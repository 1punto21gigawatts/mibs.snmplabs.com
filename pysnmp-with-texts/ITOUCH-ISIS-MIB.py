#
# PySNMP MIB module ITOUCH-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-ISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
iTouch, = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Gauge32, NotificationType, Bits, Counter64, TimeTicks, Counter32, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Gauge32", "NotificationType", "Bits", "Counter64", "TimeTicks", "Counter32", "Integer32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class ExistState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class SupportedProtocol(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 204))
    namedValues = NamedValues(("iso8473", 129), ("ip", 204))

xIsis = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26))
xIsisSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 1))
xIsisCirc = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 2))
xIsisISAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 3))
xIsisESAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 4))
xIsisReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 5))
xIsisCLNPDest = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 26, 7))
xIsisSysTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 1, 1), )
if mibBuilder.loadTexts: xIsisSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysTable.setDescription('The set of instances of the Integrated IS-IS protocol existing on the system.')
xIsisSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisSysInstance"))
if mibBuilder.loadTexts: xIsisSysEntry.setReference('ANSI {ISIS.poi cLNSISISBasic-P (1)}')
if mibBuilder.loadTexts: xIsisSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysEntry.setDescription('Each row defines information specific to a single instance of the protocol existing on the system.')
xIsisSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
xIsisSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysExistState.setDescription('The validity of this instance of the Integrated IS-IS protocol. This object follows the existenceState behaviour.')
xIsisSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysVersion.setReference('ANSI {ISIS.aoi version (1)}')
if mibBuilder.loadTexts: xIsisSysVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysVersion.setDescription('The version number of the IS-IS protocol to which this instance conforms. This value must be set by the implementation when the row is valid.')
xIsisSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysType.setReference('ANSI {ISIS.aoi iSType (2)}')
if mibBuilder.loadTexts: xIsisSysType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysType.setDescription('The type of this instance of the Integrated IS-IS protocol. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisSysNET = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysNET.setReference('ANSI {ISIS.aoi systemId (119)}')
if mibBuilder.loadTexts: xIsisSysNET.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysNET.setDescription("The ID for this instance of the Integrated IS-IS protocol. This value is appended to each of the instance's area addresses to form the Network Entity Titles valid for this instance. The derivation of a value for this object is implementation-specific. Some implementations may assign values and not permit write access, others may require the value to be set manually.")
xIsisSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMaxPathSplits.setReference('ANSI {ISIS.aoi maximumPathSplits (3)}')
if mibBuilder.loadTexts: xIsisSysMaxPathSplits.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value which it is permitted to split between. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisSysMinLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMinLSPTransInt.setReference('ANSI {ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: xIsisSysMinLSPTransInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMinLSPTransInt.setDescription('Minimum interval, in seconds, between re-transmission of an LSP. This object follows the resettingTimer behaviour.')
xIsisSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMaxLSPGenInt.setReference('ANSI {ISIS.aoi maximumLSPGenerationInterval (6)}')
if mibBuilder.loadTexts: xIsisSysMaxLSPGenInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs by this instance. This object follows the resettingTimer behaviour.')
xIsisSysMinBroadLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMinBroadLSPTransInt.setReference('ANSI {ISIS.aoi minimumBroadcastLSPTransmissionInterval (7)}')
if mibBuilder.loadTexts: xIsisSysMinBroadLSPTransInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMinBroadLSPTransInt.setDescription('Minimum interval, in milliseconds, between transmission of LSPs on a broadcast circuit. This object follows the resettingTimer behaviour. This timer shall be capable of a resolution not coarser than 10 milliseconds.')
xIsisSysCompSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysCompSNPInt.setReference('ANSI {ISIS.aoi completeSNPInterval (8)}')
if mibBuilder.loadTexts: xIsisSysCompSNPInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysCompSNPInt.setDescription('Interval, in seconds, between generation of Complete Sequence Numbers PDUs by a designated Intermediate System on a broadcast circuit. This object follows the resettingTimer behaviour.')
xIsisSysOrigL1LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1492))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysOrigL1LSPBuffSize.setReference('ANSI {ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: xIsisSysOrigL1LSPBuffSize.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysOrigL1LSPBuffSize.setDescription('The maximum size of Level 1 LSPs and SNPs originated by this instance. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisSysMaxAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMaxAreaAddr.setReference('ANSI {ISIS.aoi maximumAreaAddresses (4)}')
if mibBuilder.loadTexts: xIsisSysMaxAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMaxAreaAddr.setDescription('The maximum number of area addresses to be permitted for the area in which this instance exists. Note that all Intermediate Systems in the same area must have the same value configured for this attribute if correct operation is to be assumed. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisSysMinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMinLSPGenInt.setReference('ANSI {ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: xIsisSysMinLSPGenInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMinLSPGenInt.setDescription('Minimum interval, in seconds, between successive generation of LSPs with the same LSPID by this instance. This object follows the resettingTimer behaviour.')
xIsisSysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysPollESHelloRate.setReference('ANSI {ISIS.aoi pollESHelloRate (13)}')
if mibBuilder.loadTexts: xIsisSysPollESHelloRate.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration.')
xIsisSysPartSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysPartSNPInt.setReference('ANSI {ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: xIsisSysPartSNPInt.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysPartSNPInt.setDescription('Minimum interval between sending Partial Sequence Number PDUs. This object follows the resettingTimer behaviour.')
xIsisSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysWaitTime.setReference('ANSI {ISIS.aoi waitingTime (15)}')
if mibBuilder.loadTexts: xIsisSysWaitTime.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysWaitTime.setDescription('Number of seconds to delay in waiting state before entering on state. This object follows the resettingTimer behaviour.')
xIsisSysDRISISHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysDRISISHelloTimer.setReference('ANSI {ISIS.aoi dRISISHelloTimer (16)}')
if mibBuilder.loadTexts: xIsisSysDRISISHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysDRISISHelloTimer.setDescription('The interval, in seconds, between the generation of IIH PDUs by the designated IS on a LAN. This object follows the resettingTimer behaviour.')
xIsisSysOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysOperState.setDescription('The operational state of this instance of the Integrated IS-IS protocol. Setting this object to the value on when its current value is off enables operation of this instance of the Integrated IS-IS protocol.')
xIsisSysL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("waiting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysL1State.setReference('ANSI {ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: xIsisSysL1State.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysL1State.setDescription('The state of the Level 1 database.')
xIsisSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysCorrLSPs.setReference('ANSI {ISIS.aoi corruptedLSPsDetected (19)}')
if mibBuilder.loadTexts: xIsisSysCorrLSPs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysCorrLSPs.setDescription('Number of corrupted LSPs detected.')
xIsisSysL1LSPDbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysL1LSPDbaseOloads.setReference('ANSI {ISIS.aoi lSPL1DatabaseOverloads (20)}')
if mibBuilder.loadTexts: xIsisSysL1LSPDbaseOloads.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysL1LSPDbaseOloads.setDescription('Number of times the LSP L1 database has become overloaded.')
xIsisSysManAddrsDropFromArea = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysManAddrsDropFromArea.setReference('ANSI {ISIS.aoi manualAddressesDroppedFromArea (21)}')
if mibBuilder.loadTexts: xIsisSysManAddrsDropFromArea.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysManAddrsDropFromArea.setDescription('Number of times a manual address has been dropped from the area.')
xIsisSysAttmptsToExMaxSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysAttmptsToExMaxSeqNum.setReference('ANSI {ISIS.aoi attemptsToExceedmaximumSequenceNumber (22)}')
if mibBuilder.loadTexts: xIsisSysAttmptsToExMaxSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysAttmptsToExMaxSeqNum.setDescription('Number of times the IS has attempted to exceed the maximum sequence number.')
xIsisSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysSeqNumSkips.setReference('ANSI {ISIS.aoi sequenceNumberSkips (23)}')
if mibBuilder.loadTexts: xIsisSysSeqNumSkips.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
xIsisSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysOwnLSPPurges.setReference('ANSI {ISIS.aoi ownLSPPurges (24)}')
if mibBuilder.loadTexts: xIsisSysOwnLSPPurges.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP is received from some other node.")
xIsisSysIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysIDFieldLenMismatches.setReference('ANSI {ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: xIsisSysIDFieldLenMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value for ID field length to that of the receiving system.')
xIsisSysMaxAreaMis = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysMaxAreaMis.setReference('ANSI {ISIS.aoi MaximumAreaAddressesMismatches (118)}')
if mibBuilder.loadTexts: xIsisSysMaxAreaMis.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMaxAreaMis.setDescription('Number of times a PDU is received with a different value for MaximumAreaAddresses from that of the receiving system.')
xIsisSysOrigL2LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1492))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysOrigL2LSPBuffSize.setReference('ANSI {ISIS.aoi originatingL2LSPBufferSize (26)}')
if mibBuilder.loadTexts: xIsisSysOrigL2LSPBuffSize.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysOrigL2LSPBuffSize.setDescription('The maximum size of Level 2 LSPs and SNPs originated by this system. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisSysL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("waiting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysL2State.setReference('ANSI {ISIS.aoi l2State (28)}')
if mibBuilder.loadTexts: xIsisSysL2State.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysL2State.setDescription('The state of the Level 2 database.')
xIsisSysL2LSPDbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysL2LSPDbaseOloads.setReference('ANSI {ISIS.aoi lSPL2DatabaseOverloads (32)}')
if mibBuilder.loadTexts: xIsisSysL2LSPDbaseOloads.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysL2LSPDbaseOloads.setDescription('Number of times the Level 2 LSP database has become overloaded.')
xIsisSysMaxAreaCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysMaxAreaCheck.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysMaxAreaCheck.setDescription('When on, enables checking of maximum area addresses per IS version of ISO10589.')
xIsisManAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 1, 2), )
if mibBuilder.loadTexts: xIsisManAreaAddrTable.setReference('ANSI {ISIS.aoi manualAreaAddresses (10)}')
if mibBuilder.loadTexts: xIsisManAreaAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisManAreaAddrTable.setDescription('The set of manual area addresses configured on this Intermediate System.')
xIsisManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 1, 2, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisManAreaAddrSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisManAreaAddr"))
if mibBuilder.loadTexts: xIsisManAreaAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisManAreaAddrEntry.setDescription('Each entry contains one area address manually configured on this system')
xIsisManAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisManAreaAddrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisManAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
xIsisManAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisManAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisManAreaAddr.setDescription('A manually configured area address for this system. This object follows the index behaviour.')
xIsisManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisManAreaAddrExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisManAreaAddrExistState.setDescription('The state of the xIsisManAreaAddrEntry. This object follows the ExistenceState behaviour. If an attempt is made to set this object to the value off when the corresponding xIsisManAreaAddrEntry is the only valid entry for this instance and when the corresponding ISIS instance has xIsisSysOperState set to On then the attempt is rejected.')
xIsisAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 1, 3), )
if mibBuilder.loadTexts: xIsisAreaAddrTable.setReference('ANSI {ISIS.aoi areaAddresses (18)}')
if mibBuilder.loadTexts: xIsisAreaAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisAreaAddrTable.setDescription('The union of the sets of area addresses reported in all Level 1 LSPs received by this instance of the protocol.')
xIsisAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 1, 3, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisAreaAddrSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisAreaAddr"))
if mibBuilder.loadTexts: xIsisAreaAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisAreaAddrEntry.setDescription('Each entry contains one area address reported in a Level 1 LSP received by this instance of the protocol.')
xIsisAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisAreaAddrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
xIsisAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisAreaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisAreaAddr.setDescription('An area address reported in a Level 1 LSP received by this instance of the protocol.')
xIsisSysProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 1, 4), )
if mibBuilder.loadTexts: xIsisSysProtSuppTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysProtSuppTable.setDescription('This table contains the manually configured set of protocols supported by each instance of the Integrated ISIS protocol.')
xIsisSysProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 1, 4, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisSysProtSuppSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisSysProtSuppProtocol"))
if mibBuilder.loadTexts: xIsisSysProtSuppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysProtSuppEntry.setDescription('Each entry contains one protocol supported by an instance of the Integrated ISIS protocol.')
xIsisSysProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysProtSuppSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysProtSuppSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
xIsisSysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 4, 1, 2), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisSysProtSuppProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysProtSuppProtocol.setDescription('One supported protocol. This object follows the index behaviour.')
xIsisSysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 1, 4, 1, 3), ExistState().clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisSysProtSuppExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisSysProtSuppExistState.setDescription('The state of the xIsisSysProtSuppEntry. This object follows the ExistenceState and ReplaceOnlyWhileInstanceDisabled behaviours.')
xIsisCircTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 2, 1), )
if mibBuilder.loadTexts: xIsisCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircTable.setDescription('The table of circuits used by each instance of Integrated IS-IS on this system.')
xIsisCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisCircSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisCircIndex"))
if mibBuilder.loadTexts: xIsisCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircEntry.setDescription('An xIsisCircEntry exists for each circuit used by Integrated IS-IS on this system.')
xIsisCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
xIsisCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircIndex.setDescription('The identifier of this circuit, unique within the instance of the protocol. This object follows the index behaviour.')
xIsisCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircIfIndex.setDescription('The value of ifIndex for the interface to which this circuit corresponds. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircOperState.setDescription('The operational state of the circuit. This object follows the operationalState behaviour.')
xIsisCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircExistState.setDescription('The existence state of this circuit. This object follows the ExistenceState behaviour.')
xIsisCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("broadcast", 2), ("ptToPt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircType.setReference('ANSI {ISIS.aoi type (33)}')
if mibBuilder.loadTexts: xIsisCircType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircType.setDescription('The type of the circuit. This object follows the replaceOnlyWhileDisabled behaviour. The type specified must be compatible with the type of the interface defined by the value of xIsisCircIfIndex.')
xIsisCircHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircHelloTimer.setReference('ANSI {ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: xIsisCircHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircHelloTimer.setDescription('The period, in seconds, between IIH PDUs. It is also used as the period between ISH PDUs when polling the ES configuration. This object follows the resettingTimer behaviour.')
xIsisCircL1DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL1DefaultMetric.setReference('ANSI {ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: xIsisCircL1DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1DefaultMetric.setDescription('The default metric value of this circuit for Level 1 traffic. 0 means the IS will automatically generate Level 1 default metric for the circuit.')
xIsisCircL1DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL1DelayMetric.setReference('ANSI {ISIS.aoi l1DelayMetric (36)}')
if mibBuilder.loadTexts: xIsisCircL1DelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1DelayMetric.setDescription('The delay metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircL1ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL1ExpenseMetric.setReference('ANSI {ISIS.aoi l1ExpenseMetric (37)}')
if mibBuilder.loadTexts: xIsisCircL1ExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1ExpenseMetric.setDescription('The expense metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircL1ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL1ErrorMetric.setReference('ANSI {ISIS.aoi l1ErrorMetric (38)}')
if mibBuilder.loadTexts: xIsisCircL1ErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1ErrorMetric.setDescription('The error metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircExtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircExtDomain.setReference('ANSI {ISIS.aoi externalDomain (46)}')
if mibBuilder.loadTexts: xIsisCircExtDomain.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircExtDomain.setDescription('If true, suppress normal transmission of and interpretation of Intra-domain ISIS PDUs on this circuit.')
xIsisCircAdjChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircAdjChanges.setReference('ANSI {ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: xIsisCircAdjChanges.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircAdjChanges.setDescription('The number of times an adjacency state change has occurred on this circuit.')
xIsisCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircInitFails.setReference('ANSI {ISIS.aoi initializationFailures (41)}')
if mibBuilder.loadTexts: xIsisCircInitFails.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircInitFails.setDescription('The number of times initialization of this circuit has failed.')
xIsisCircRejAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircRejAdjs.setReference('ANSI {ISIS.aoi rejectedAdjacencies (42)}')
if mibBuilder.loadTexts: xIsisCircRejAdjs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircRejAdjs.setDescription('The number of times an adjacency has been rejected on this circuit.')
xIsisCircOutCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircOutCtrlPDUs.setReference('ANSI {ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: xIsisCircOutCtrlPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircOutCtrlPDUs.setDescription('The number of IS-IS control PDUs sent on this circuit.')
xIsisCircInCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircInCtrlPDUs.setReference('ANSI {ISIS.aoi controlPDUsReceived (44)}')
if mibBuilder.loadTexts: xIsisCircInCtrlPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircInCtrlPDUs.setDescription('The number of IS-IS control PDUs received on this circuit.')
xIsisCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircIDFieldLenMismatches.setReference('ANSI {ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: xIsisCircIDFieldLenMismatches.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID field length different to that for this system has been received.')
xIsisCircL2DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL2DefaultMetric.setReference('ANSI {ISIS.aoi l2DefaultMetric (68)}')
if mibBuilder.loadTexts: xIsisCircL2DefaultMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2DefaultMetric.setDescription('The default metric value of this circuit for level 2 traffic. 0 means the IS will automatically generate the Level 2 default metric for this circuit.')
xIsisCircL2DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL2DelayMetric.setReference('ANSI {ISIS.aoi l2DelayMetric (69)}')
if mibBuilder.loadTexts: xIsisCircL2DelayMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2DelayMetric.setDescription('The delay metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircL2ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL2ExpenseMetric.setReference('ANSI {ISIS.aoi l2ExpenseMetric (70)}')
if mibBuilder.loadTexts: xIsisCircL2ExpenseMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2ExpenseMetric.setDescription('The expense metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircL2ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL2ErrorMetric.setReference('ANSI {ISIS.aoi l2ErrorMetric (71)}')
if mibBuilder.loadTexts: xIsisCircL2ErrorMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2ErrorMetric.setDescription('The error metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
xIsisCircManL2Only = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircManL2Only.setReference('ANSI {ISIS.aoi manualL2OnlyMode (72)}')
if mibBuilder.loadTexts: xIsisCircManL2Only.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircManL2Only.setDescription('When true, indicates that this circuit is to be used only for level 2. This object follows the replaceOnlyWhileDisabled behaviour.')
xIsisCircL1ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL1ISPriority.setReference('ANSI {ISIS.aoi l1IntermediateSystemPriority (47)}')
if mibBuilder.loadTexts: xIsisCircL1ISPriority.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1ISPriority.setDescription('The priority for becoming LAN Level 1 Deignated Intermediate System on a broadcast circuit.')
xIsisCircL1CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircL1CircID.setReference('ANSI {ISIS.aoi l1CircuitID (48)}')
if mibBuilder.loadTexts: xIsisCircL1CircID.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1CircID.setDescription('The LAN ID allocated by the LAN Level 1 Designated Intermediate System. Where this system is not aware of the value (because it is not participating in the Level 1 Designated Intermediate System election), this object has the value which would be proposed for this circuit (i.e. the concatenation of the local system ID and the one octet local Circuit ID for this circuit.')
xIsisCircL1DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircL1DesIS.setReference('ANSI {ISIS.aoi l1DesignatedIntermediateSystem (49)}')
if mibBuilder.loadTexts: xIsisCircL1DesIS.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL1DesIS.setDescription('The ID of the LAN Level 1 Designated Intermediate System on this circuit. If, for any reason this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
xIsisCircLANL1DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircLANL1DesISChanges.setReference('ANSI {ISIS.aoi lanL1DesignatedIntermediateSystemChanges (50)}')
if mibBuilder.loadTexts: xIsisCircLANL1DesISChanges.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircLANL1DesISChanges.setDescription('The number of times the LAN Level 1 Designated Intermediate System has changed.')
xIsisCircL2ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircL2ISPriority.setReference('ANSI {ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: xIsisCircL2ISPriority.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2ISPriority.setDescription('The priority for becoming LAN level 2 Designated Intermediate System.')
xIsisCircL2CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircL2CircID.setReference('ANSI {ISIS.aoi l2CircuitID (74)}')
if mibBuilder.loadTexts: xIsisCircL2CircID.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2CircID.setDescription('The LAN ID allocated by the LAN Level 2 Designated Intermediate System. Where this system is not aware of this value (because it is not participating in the Level 2 Designated Intermediate System election), this object has the value which would be proposed for this circuit (i.e. the concatenation of the local system ID and the one octet local Circuit ID for this circuit.')
xIsisCircL2DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircL2DesIS.setReference('ANSI {ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: xIsisCircL2DesIS.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircL2DesIS.setDescription('The ID of the LAN Level 2 Designated Intermediate System on this circuit. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
xIsisCircLANL2DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircLANL2DesISChanges.setReference('ANSI {ISIS.aoi lanL2DesignatedIntermediateSystemChanges (76)}')
if mibBuilder.loadTexts: xIsisCircLANL2DesISChanges.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircLANL2DesISChanges.setDescription('The number of times the LAN Level 2 Designated Intermediate System has changed.')
xIsisCircISTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 2, 2), )
if mibBuilder.loadTexts: xIsisCircISTable.setReference('ANSI {NLM.poi linkage-ISO9542IS-P (22)}')
if mibBuilder.loadTexts: xIsisCircISTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISTable.setDescription('The set of objects controlling the operation of the IS functions of the ES-IS protocol (ISO 9542) on each circuit over which ISIS is run.')
xIsisCircISEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisCircISIndex"))
if mibBuilder.loadTexts: xIsisCircISEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISEntry.setDescription('Each entry contains objects controlling the operation of the IS functions of the ES-IS protocol (ISO 9542) on one circuit.')
xIsisCircISSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISSysInstance.setDescription('The identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index and manualOrAutomatic behaviours.')
xIsisCircISIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISIndex.setDescription('The unique identifier of this row. This value is the same as the value of the ifIndex object which identifies the interface which corresponds to this circuit. This object follows the index behaviour.')
xIsisCircISExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISExistState.setDescription('The existence state of this row. This object follows the ExistenceState behaviour.')
xIsisCircISOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircISOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISOperState.setDescription('The operational state of the row. This object follows the operationalState behaviour.')
xIsisCircISHoldTimerMult = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISHoldTimerMult.setReference('ANSI {NLM.aoi holdingTimerMutliplier (20)}')
if mibBuilder.loadTexts: xIsisCircISHoldTimerMult.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISHoldTimerMult.setDescription('The factor to derive holding timer from configuration timer. This value when multipled by a configuration timer yields the value of the holding timer parameter issued with configuration information. The semantics of this parameter are such that it is permissible to add a delta value to the result to compensate for possible delays and imprecision of timers. The result of the calculation is truncated, upon overflow, to the maximum value for the parameter permitted by the protocol (65535).')
xIsisCircISConfTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircISConfTimer.setReference('ANSI {NLM.aoi iSConfigurationTimer (24)}')
if mibBuilder.loadTexts: xIsisCircISConfTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISConfTimer.setDescription('Value in seconds for the ISO 9542 IS configuration timer. It is used to determine how often an IS reports configuration information to ESs. This object follows the resettingTimer behaviour.')
xIsisCircISSuggESConfTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircISSuggESConfTimer.setReference('ANSI {NLM.aoi suggestedESConfigurationTimer (25)}')
if mibBuilder.loadTexts: xIsisCircISSuggESConfTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISSuggESConfTimer.setDescription('Value to be used for the ISO 9542 suggested ES configuration timer value (in seconds), advertised in IS Hellos generated by the system on this circuit. This object follows the resettingTimer behaviour.')
xIsisCircISRedHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircISRedHoldTime.setReference('ANSI {NLM.aoi redirectHoldingTime (26)}')
if mibBuilder.loadTexts: xIsisCircISRedHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISRedHoldTime.setDescription('The holding time (in seconds) to be specified in Redirect PDUs generated by the system on this circuit.')
xIsisCircISESReachChgs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISESReachChgs.setReference('ANSI {NLM.aoi eSReachabilityChanges (27)}')
if mibBuilder.loadTexts: xIsisCircISESReachChgs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISESReachChgs.setDescription('Count of the number of changes in reachability of End Systems from this circuit.')
xIsisCircISInv9542PDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircISInv9542PDUs.setReference('ANSI {NLM.aoi invalid9542PDUs (101)}')
if mibBuilder.loadTexts: xIsisCircISInv9542PDUs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircISInv9542PDUs.setDescription('Counter of invalid 9542 PDUs received. This is the number of ISO 9452 PDUs received which are discarded as a result of the PDU Header Error Detection or Protocol Error Processing Functions specified in ISO 9542.')
xIsisISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 3, 1), )
if mibBuilder.loadTexts: xIsisISAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
xIsisISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisISAdjSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjCircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjIndex"))
if mibBuilder.loadTexts: xIsisISAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjEntry.setDescription('Each entry corresponds to one adjacency to an Intermediate System on this system.')
xIsisISAdjSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
xIsisISAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency.')
xIsisISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIndex.setDescription('A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is assigned by the system when the adjacency is created automatically.')
xIsisISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjState.setReference('ANSI {ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: xIsisISAdjState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjState.setDescription('The state of the adjacency')
xIsisISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjNeighSNPAAddress.setReference('ANSI {ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: xIsisISAdjNeighSNPAAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
xIsisISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("intermediateSystem", 3), ("l1IntermediateSystem", 4), ("l2IntermediateSystem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjNeighSysType.setReference('ANSI {ISIS.aoi neighbourSystemType (80)}')
if mibBuilder.loadTexts: xIsisISAdjNeighSysType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjNeighSysType.setDescription('The type of the neighboring system.')
xIsisISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjNeighSysID.setReference('ANSI {ISIS.aoi neighbourSystemIds (83)}')
if mibBuilder.loadTexts: xIsisISAdjNeighSysID.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjNeighSysID.setDescription("The system ID of the neighboring Intermediate System set from the source ID field of the neighbor's IIH PDUs.")
xIsisISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2), ("level2", 3), ("level1and2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjUsage.setReference('ANSI {ISIS.aoi adjacencyUsage (82)}')
if mibBuilder.loadTexts: xIsisISAdjUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjUsage.setDescription('The usage of the adjacency. An adjacency of type level1 will be used for level 1 traffic only. An adjacency of type level2 will be used for level 2 traffic only. An adjacency of type level1and2 will be used for both level 1 and level 2 traffic. There may be two adjacencies (of types level1 and level2) between the same pair of Intermediate Systems.')
xIsisISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjHoldTimer.setReference('ANSI {ISIS.aoi holdingTimer (85)}')
if mibBuilder.loadTexts: xIsisISAdjHoldTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjHoldTimer.setDescription('The holding time for this adjacency updated from received IIH PDUs.')
xIsisISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjNeighPriority.setReference('ANSI {ISIS.aoi lANPriority (86)}')
if mibBuilder.loadTexts: xIsisISAdjNeighPriority.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for becoming the LAN Level 1 Designated Intermediate System if the value of xIsisISAdjNeighSysType is L1IntermediateSystem or LAN Level 2 Designated Intermediate System if the value of xIsisISAdjNeighSysType is L2IntermediateSystem.')
xIsisISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 3, 2), )
if mibBuilder.loadTexts: xIsisISAdjAreaAddrTable.setReference('ANSI {ISIS.aoi areaAddressesOfNeighbour (84)}')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
xIsisISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 3, 2, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisISAdjAreaAddrSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjAreaAddrCircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjAreaAddrAdjIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjAreaAddress"))
if mibBuilder.loadTexts: xIsisISAdjAreaAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs.')
xIsisISAdjAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjAreaAddrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
xIsisISAdjAreaAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjAreaAddrCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this Area Address entry corresponds.')
xIsisISAdjAreaAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjAreaAddrAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry belongs.')
xIsisISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjAreaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from the neighbor.')
xIsisISAdjIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 3, 3), )
if mibBuilder.loadTexts: xIsisISAdjIPAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddrTable.setDescription('This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
xIsisISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 3, 3, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisISAdjIPAddrSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjIPAddrCircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjIPAddrAdjIndex"))
if mibBuilder.loadTexts: xIsisISAdjIPAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs.')
xIsisISAdjIPAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjIPAddrSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
xIsisISAdjIPAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjIPAddrCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddrCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this IP Address entry corresponds.')
xIsisISAdjIPAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjIPAddrAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry belongs.')
xIsisISAdjIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjIPAddress.setDescription('One IP Address as reported in IIH PDUs received from the neighbor.')
xIsisISAdjProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 3, 4), )
if mibBuilder.loadTexts: xIsisISAdjProtSuppTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs.')
xIsisISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 3, 4, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisISAdjProtSuppSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjProtSuppCircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjProtSuppAdjIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: xIsisISAdjProtSuppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs.')
xIsisISAdjProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjProtSuppSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
xIsisISAdjProtSuppCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjProtSuppCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this supported protocol entry corresponds.')
xIsisISAdjProtSuppAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjProtSuppAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppAdjIndex.setDescription('The identifier the IS adjacency to which this entry corresponds.')
xIsisISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 3, 4, 1, 4), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisISAdjProtSuppProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received from the neighbor.')
xIsisESAdjTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 4, 1), )
if mibBuilder.loadTexts: xIsisESAdjTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjTable.setDescription('The table of End System IDs of neighboring End Systems as reported in their ESH PDUs or as configured manually')
xIsisESAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisESAdjSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisESAdjCircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisESAdjIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisESAdjESID"))
if mibBuilder.loadTexts: xIsisESAdjEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjEntry.setDescription('Each entry contains one End System ID of a neighboring End System as reported in an ESH PDU or as configured manually.')
xIsisESAdjSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisESAdjSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjSysInstance.setDescription('The identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index and manualOrAutomatic behaviours.')
xIsisESAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisESAdjCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjCircIndex.setDescription('The identifier of the Circuit which is the parent of the ES adjacency to which this End System ID entry corresponds. This object follows the index and manualOrAutomatic behaviours.')
xIsisESAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisESAdjIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjIndex.setDescription('The identifier of the ES adjacency to which this entry belongs. This object follows the index and manualOrAutomatic behaviours.')
xIsisESAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisESAdjType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjType.setDescription('The indication of whether this adjacency was created manually by management action or automatically by the implementation.')
xIsisESAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisESAdjState.setReference('ANSI {ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: xIsisESAdjState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjState.setDescription('The state of the adjacency. Adjacencies created manually always have this value set to up.')
xIsisESAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisESAdjNeighSNPAAddress.setReference('ANSI {ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: xIsisESAdjNeighSNPAAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system. This object follows the manualOrAutomatic behaviour.')
xIsisESAdjExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisESAdjExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjExistState.setDescription('The existence state of this ES Adjacency. This object follows the ExistenceState behaviour. This object follows the manualOrAutomatic behaviour.')
xIsisESAdjESID = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisESAdjESID.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisESAdjESID.setDescription('An End System ID of a neighboring End System. This object follows the index and manualOrAutomatic behaviour.')
xIsisRATable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 5, 1), )
if mibBuilder.loadTexts: xIsisRATable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRATable.setDescription('The table of Reachable Addresses to NSAPs or Address Prefixes.')
xIsisRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisRASysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisRACircIndex"), (0, "ITOUCH-ISIS-MIB", "xIsisRAIndex"))
if mibBuilder.loadTexts: xIsisRAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAEntry.setDescription('Each entry defines a Reachable Address to a NSAP or Address Prefix.')
xIsisRASysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisRASysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRASysInstance.setDescription('The identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index and manualOrAutomatic behaviours.')
xIsisRACircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisRACircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRACircIndex.setDescription('The identifier of the Circuit over which this destination is reachable. This object follows the index and manualOrAutomatic behaviours.')
xIsisRAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisRAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAIndex.setDescription('The identifier for this xIsisRAEntry. This value must be unique amongst all Reachable Addresses on the same parent Circuit. This object follows the index and manualOrAutomatic behaviours.')
xIsisRAExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAExistState.setDescription('The existence state of this Reachable Address. This object follows the ExistenceState and manualOrAutomatic behaviours.')
xIsisRAOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAOperState.setDescription('The operational state of the Reachable Address. This object follows the operationalState and manualOrAutomatic behaviours.')
xIsisRAAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAAddrPrefix.setReference('ANSI {ISIS.aoi addressPrefix (98)}')
if mibBuilder.loadTexts: xIsisRAAddrPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAAddrPrefix.setDescription('The destination of this Reachable Address. This is an Address Prefix. This object follows the replaceOnlyWhileDisabled and manualOrAutomatic behaviours.')
xIsisRAMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("explicit", 2), ("extractIDI", 3), ("extractDSP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAMapType.setReference('ANSI {ISO10589-ISIS.aoi mappingType (107)}')
if mibBuilder.loadTexts: xIsisRAMapType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAMapType.setDescription('The type of mapping to be employed to ascertain the SNPA Address which should be used in forwarding PDUs for this Reachable Address prefix. This object follows the manualOrAutomatic behaviour. The following values of mapping type are defined: none: The mapping is null because the neighbor SNPA is implicit by nature of the subnetwork (e.g. a point-to-point linkage). explicit: The subnetwork addresses in the object xIsisRASNPAAddress is to be used. extractIDI: The SNPA is embedded in the IDI of the destination NSAP Address. The mapping algorithm extracts the SNPA to be used according to the format and encoding rules of ISO8473/Add2. This SNPA extraction algorithm can be used in conjunction with Reachable Address prefixes from the X.121, F.69, E.163 and E.164 addressing subdomains. extractDSP: All, or a suffix, of the SNPA is embedded in the DSP of the destination address. This SNPA extraction algorithm extracts the embedded subnetwork addressing information by performing a logical AND of the xIsisRASNPAMask object value with the destination address. The part of the SNPA extracted from the destination NSAP is appended to the xIsisRASNPAPrefix object value to form the next hop subnetwork addressing information.')
xIsisRADefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRADefMetric.setReference('ANSI {ISIS.aoi defaultMetric (99)}')
if mibBuilder.loadTexts: xIsisRADefMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRADefMetric.setDescription('The default metric value for reaching the specified prefix over this circuit. This object follows the manualOrAutomatic behaviour.')
xIsisRADelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRADelMetric.setReference('ANSI {ISIS.aoi delayMetric (100)}')
if mibBuilder.loadTexts: xIsisRADelMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRADelMetric.setDescription('The delay metric for reaching the specified prefix over this circuit. This object follows the manualOrAutomatic behaviour. The value zero is reserved to indicate that this metric is not supported.')
xIsisRAExpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAExpMetric.setReference('ANSI {ISIS.aoi expenseMetric (101)}')
if mibBuilder.loadTexts: xIsisRAExpMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAExpMetric.setDescription('The expense metric for reaching the specified prefix over this circuit. This object follows the manualOrAutomatic behaviour. The value zero is reserved to indicate that this metric is not supported.')
xIsisRAErrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAErrMetric.setReference('ANSI {ISIS.aoi errorMetric (102)}')
if mibBuilder.loadTexts: xIsisRAErrMetric.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAErrMetric.setDescription('The error metric for reaching the specified prefix over this circuit. This object follows the manualOrAutomatic behaviour. The value zero is reserved to indicate that this metric is not supported.')
xIsisRADefMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRADefMetricType.setReference('ANSI {ISIS.aoi defaultMetricType (103)}')
if mibBuilder.loadTexts: xIsisRADefMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRADefMetricType.setDescription('Indicates whether the default metric is internal or external. This object follows the manualOrAutomatic behaviour.')
xIsisRADelMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRADelMetricType.setReference('ANSI {ISO10589-ISIS.aoi delayMetricType (104)}')
if mibBuilder.loadTexts: xIsisRADelMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRADelMetricType.setDescription('Indicates whether the delay metric is internal or external. This object follows the manualOrAutomatic behaviour.')
xIsisRAExpMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAExpMetricType.setReference('ANSI {ISIS.aoi expenseMetricType (105)}')
if mibBuilder.loadTexts: xIsisRAExpMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAExpMetricType.setDescription('Indicates whether the expense metric is internal or external. This object follows the manualOrAutomatic behaviour.')
xIsisRAErrMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRAErrMetricType.setReference('ANSI {ISIS.aoi errorMetricType (106)}')
if mibBuilder.loadTexts: xIsisRAErrMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAErrMetricType.setDescription('Indicates whether the error metric is internal or external. This object follows the manualOrAutomatic behaviour.')
xIsisRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRASNPAAddress.setReference('ANSI {ISIS.aoi sNPAAddresses (109)}')
if mibBuilder.loadTexts: xIsisRASNPAAddress.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches the address prefix of the Reachable Address. This object follows the manualOrAutomatic behaviour.')
xIsisRASNPAMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRASNPAMask.setReference('ANSI {ISIS.aoi sNPAMask (122)}')
if mibBuilder.loadTexts: xIsisRASNPAMask.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRASNPAMask.setDescription('A bit mask with 1 bits indicating the positions in the effective destination address from which embedded SNPA information is to be extracted. For the extraction the first octet of the xIsisRASNPAMask object value is aligned with the first octet (AFI) of the NSAP Address. If the xIsisRASNPAMask object value and NSAP Address are of different lengths, the shorter of the two is logically padded with zeros before performing the extraction. This object follows the manualOrAutomatic behaviour.')
xIsisRASNPAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisRASNPAPrefix.setReference('ANSI {ISIS.aoi sNPAPrefix (123)}')
if mibBuilder.loadTexts: xIsisRASNPAPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRASNPAPrefix.setDescription('A fixed SNPA prefix for use when the xIsisRAMapType is extractDSP. The SNPA Address to use is formed by concatenating the fixed SNPA prefix with a variable SNPA part that is extracted from the effective destination address. For Reachable Address prefixes in which the entire SNPA is embedded in the DSP the SNPA Prefix shall be null. This object follows the manualOrAutomatic behaviour.')
xIsisRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisRAType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisRAType.setDescription('The type of Reachable address. Those of type manual are created by the network manager. Those of type automatic are created through propogation of routing information from another routing protocol (eg. IDRP). ')
xIsisL1CLNPDestTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 7, 1), )
if mibBuilder.loadTexts: xIsisL1CLNPDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPDestTable.setDescription('The Level 1 CLNP Destination Table records information about each end system ID destination known to the Intermediate System.')
xIsisL1CLNPDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisL1CLNPSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisL1CLNPRouteMetricQOS"), (0, "ITOUCH-ISIS-MIB", "xIsisL1CLNPRouteDest"), (0, "ITOUCH-ISIS-MIB", "xIsisL1CLNPRouteForw"))
if mibBuilder.loadTexts: xIsisL1CLNPDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPDestEntry.setDescription('Each entry records information about one CLNP end system ID destination known to the Intermediate System.')
xIsisL1CLNPRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteDest.setDescription('The destination end system ID.')
xIsisL1CLNPRouteMetricQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricQOS.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricQOS.setDescription('The QOS metric for this destination.')
xIsisL1CLNPRouteMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricType.setDescription('Indicates whether the metric has an external component or not')
xIsisL1CLNPRouteMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricValue.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteMetricValue.setDescription('The path metric value for this destination.')
xIsisL1CLNPRouteForw = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteForw.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteForw.setDescription('The OBJECT IDENTIFIER for the first object in the table entry which corresponds to the entry used for forwarding packets to this destination. This value is an OBJECT IDENTIFIER for an instance of the object: xIsisESAdjSysInstance or xIsisISAdjSysInstance.')
xIsisL1CLNPRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("level1", 2), ("esis", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPRouteSource.setDescription('The source of the destination. Manual is used if the source is manually configured information on the system. Level1 is used if the source is Level 1 LSPs. Esis is used if the source is ES Hellos')
xIsisL1CLNPSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL1CLNPSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL1CLNPSysInstance.setDescription('If the value of xIsisL1CLNPRouteSource is manual or level1 then this is the identifier of the Integrated IS-IS Level 1 instance from which this reachability information was learned, otherwise this value is zero.')
xIsisL2CLNPDestTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 7, 2), )
if mibBuilder.loadTexts: xIsisL2CLNPDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPDestTable.setDescription('The Level 2 CLNP Destination Table records information about each NSAP Address Prefix known to the Intermediate System.')
xIsisL2CLNPDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisL2CLNPSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisL2CLNPRouteMetricQOS"), (0, "ITOUCH-ISIS-MIB", "xIsisL2CLNPRouteDest"), (0, "ITOUCH-ISIS-MIB", "xIsisL2CLNPRouteForw"))
if mibBuilder.loadTexts: xIsisL2CLNPDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPDestEntry.setDescription('Each entry records information about one NSAP Address Prefix known to the Intermediate System.')
xIsisL2CLNPRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteDest.setDescription('The destination address prefix.')
xIsisL2CLNPRouteMetricQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricQOS.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricQOS.setDescription('The QOS metric for this destination.')
xIsisL2CLNPRouteMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricType.setDescription('Indicates whether the metric has an external component or not')
xIsisL2CLNPRouteMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricValue.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteMetricValue.setDescription('The path metric value for this destination.')
xIsisL2CLNPRouteForw = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteForw.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteForw.setDescription('The OBJECT IDENTIFIER for the first object in the table entry which corresponds to the entry used for forwarding packets to this destination. This value is an OBJECT IDENTIFIER for an instance of one of the following objects: isisVirtSysInstance, xIsisISAdjSysInstance, xIsisRASysInstance.')
xIsisL2CLNPRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("level2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPRouteSource.setDescription('The source of the destination. Manual is used if the source is manually configured information on the system. Level2 is used if the source is Level 2 LSPs.')
xIsisL2CLNPSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL2CLNPSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL2CLNPSysInstance.setDescription('The identifier of the Integrated IS-IS Level 2 instance from which this reachability information was learned.')
xIsisL3CLNPDestTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 7, 3), )
if mibBuilder.loadTexts: xIsisL3CLNPDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPDestTable.setDescription('The Level 3 CLNP Destination Table records information about each Reachable Address Prefix known to the Intermediate System.')
xIsisL3CLNPDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisL3CLNPSysInstance"), (0, "ITOUCH-ISIS-MIB", "xIsisL3CLNPRouteMetricQOS"), (0, "ITOUCH-ISIS-MIB", "xIsisL3CLNPRouteDest"), (0, "ITOUCH-ISIS-MIB", "xIsisL3CLNPRouteForw"))
if mibBuilder.loadTexts: xIsisL3CLNPDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPDestEntry.setDescription('Each entry records information about one Address Prefix known to the Intermediate System.')
xIsisL3CLNPRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteDest.setDescription('The destination address prefix.')
xIsisL3CLNPRouteMetricQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricQOS.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricQOS.setDescription('The QOS metric for this destination.')
xIsisL3CLNPRouteMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricType.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricType.setDescription('Indicates whether the metric has an external component or not')
xIsisL3CLNPRouteMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricValue.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteMetricValue.setDescription('The path metric value for this destination.')
xIsisL3CLNPRouteForw = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteForw.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteForw.setDescription('The OBJECT IDENTIFIER for the first object in the table entry which corresponds to the entry used for forwarding packets to this destination. This value is an OBJECT IDENTIFIER for an instance of one of the following objects: isisVirtSysInstance, xIsisISAdjSysInstance, xIsisRASysInstance.')
xIsisL3CLNPRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("level2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPRouteSource.setDescription('The source of the destination. Manual is used if the source is manually configured information on the system. Level3 is used if the source is Level 3 LSPs.')
xIsisL3CLNPSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisL3CLNPSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisL3CLNPSysInstance.setDescription('The identifier of the Integrated IS-IS Level 3 instance from which this reachability information was learned.')
xIsisCircClnsTable = MibTable((1, 3, 6, 1, 4, 1, 33, 26, 2, 3), )
if mibBuilder.loadTexts: xIsisCircClnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsTable.setDescription('The set of objects controlling the operation of the CLNS protocol (ISO 8473) on each circuit over which ISIS is run.')
xIsisCircClnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1), ).setIndexNames((0, "ITOUCH-ISIS-MIB", "xIsisCircClnsIndex"))
if mibBuilder.loadTexts: xIsisCircClnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsEntry.setDescription('Each entry contains objects controlling the operation of the CLNS protocol (ISO 8473) on one circuit.')
xIsisCircClnsSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircClnsSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsSysInstance.setDescription('The identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index and manualOrAutomatic behaviours.')
xIsisCircClnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircClnsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsIndex.setDescription('The unique identifier of this row. This value is the same as the value of the ifIndex object which identifies the interface which corresponds to this circuit. This object follows the index behaviour.')
xIsisCircClnsExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircClnsExistState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsExistState.setDescription('The existence state of this row. This object follows the ExistenceState behaviour.')
xIsisCircClnsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xIsisCircClnsOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsOperState.setDescription('The operational state of the row. This object follows the operationalState behaviour.')
xIsisCircClnsRxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircClnsRxPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsRxPDUs.setDescription('Counter of number of CLNS PDUs received on this circuit.')
xIsisCircClnsTxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 26, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIsisCircClnsTxPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: xIsisCircClnsTxPDUs.setDescription('Counter of number of CLNS PDUs transmitted on this circuit.')
mibBuilder.exportSymbols("ITOUCH-ISIS-MIB", xIsisCircInitFails=xIsisCircInitFails, xIsisCircL2DesIS=xIsisCircL2DesIS, xIsisL2CLNPDestEntry=xIsisL2CLNPDestEntry, xIsisISAdjIPAddrTable=xIsisISAdjIPAddrTable, xIsisSysNET=xIsisSysNET, xIsisCLNPDest=xIsisCLNPDest, xIsisCircL1ExpenseMetric=xIsisCircL1ExpenseMetric, xIsisSysPollESHelloRate=xIsisSysPollESHelloRate, xIsisISAdjHoldTimer=xIsisISAdjHoldTimer, xIsisCircISExistState=xIsisCircISExistState, xIsisCircRejAdjs=xIsisCircRejAdjs, xIsisL2CLNPRouteMetricType=xIsisL2CLNPRouteMetricType, xIsisCircIndex=xIsisCircIndex, xIsisCircISRedHoldTime=xIsisCircISRedHoldTime, xIsisISAdjState=xIsisISAdjState, xIsisISAdjNeighSysID=xIsisISAdjNeighSysID, xIsisL1CLNPRouteMetricType=xIsisL1CLNPRouteMetricType, xIsisManAreaAddrExistState=xIsisManAreaAddrExistState, xIsisCircL2ExpenseMetric=xIsisCircL2ExpenseMetric, xIsisCircL2DelayMetric=xIsisCircL2DelayMetric, xIsisESAdjTable=xIsisESAdjTable, xIsisCircClnsSysInstance=xIsisCircClnsSysInstance, xIsisL1CLNPDestTable=xIsisL1CLNPDestTable, xIsisSysAttmptsToExMaxSeqNum=xIsisSysAttmptsToExMaxSeqNum, xIsisL1CLNPRouteDest=xIsisL1CLNPRouteDest, xIsisISAdjAreaAddrSysInstance=xIsisISAdjAreaAddrSysInstance, xIsisSysExistState=xIsisSysExistState, xIsisL2CLNPRouteForw=xIsisL2CLNPRouteForw, xIsisSysMinLSPTransInt=xIsisSysMinLSPTransInt, xIsisCircL1ISPriority=xIsisCircL1ISPriority, xIsisESAdjIndex=xIsisESAdjIndex, xIsisCircTable=xIsisCircTable, xIsisCircManL2Only=xIsisCircManL2Only, xIsisCircL1DesIS=xIsisCircL1DesIS, xIsisL3CLNPRouteMetricQOS=xIsisL3CLNPRouteMetricQOS, xIsisSysCompSNPInt=xIsisSysCompSNPInt, xIsisCircIDFieldLenMismatches=xIsisCircIDFieldLenMismatches, xIsisRASysInstance=xIsisRASysInstance, xIsisSysType=xIsisSysType, xIsisISAdjProtSuppProtocol=xIsisISAdjProtSuppProtocol, xIsisSysMaxAreaAddr=xIsisSysMaxAreaAddr, xIsisISAdjUsage=xIsisISAdjUsage, xIsisSysDRISISHelloTimer=xIsisSysDRISISHelloTimer, xIsisCircISESReachChgs=xIsisCircISESReachChgs, xIsisCircType=xIsisCircType, xIsisSysIDFieldLenMismatches=xIsisSysIDFieldLenMismatches, xIsisSysCorrLSPs=xIsisSysCorrLSPs, xIsisRAOperState=xIsisRAOperState, xIsisISAdjTable=xIsisISAdjTable, xIsisSysEntry=xIsisSysEntry, xIsisL3CLNPSysInstance=xIsisL3CLNPSysInstance, xIsisSysL1State=xIsisSysL1State, xIsisSysProtSuppEntry=xIsisSysProtSuppEntry, xIsisCircInCtrlPDUs=xIsisCircInCtrlPDUs, xIsisL2CLNPRouteSource=xIsisL2CLNPRouteSource, xIsisSysOperState=xIsisSysOperState, xIsisESAdjESID=xIsisESAdjESID, xIsisL3CLNPRouteForw=xIsisL3CLNPRouteForw, xIsisCircL1DelayMetric=xIsisCircL1DelayMetric, xIsisCircISInv9542PDUs=xIsisCircISInv9542PDUs, xIsisSysOrigL2LSPBuffSize=xIsisSysOrigL2LSPBuffSize, xIsisISAdj=xIsisISAdj, xIsisCircL1ErrorMetric=xIsisCircL1ErrorMetric, xIsisSysMaxPathSplits=xIsisSysMaxPathSplits, xIsisSysL2LSPDbaseOloads=xIsisSysL2LSPDbaseOloads, xIsisL3CLNPRouteDest=xIsisL3CLNPRouteDest, xIsisCircClnsIndex=xIsisCircClnsIndex, xIsisISAdjAreaAddress=xIsisISAdjAreaAddress, xIsisCircISIndex=xIsisCircISIndex, xIsisSystem=xIsisSystem, xIsisCircISSysInstance=xIsisCircISSysInstance, xIsisISAdjIPAddress=xIsisISAdjIPAddress, xIsisL1CLNPSysInstance=xIsisL1CLNPSysInstance, xIsisL2CLNPSysInstance=xIsisL2CLNPSysInstance, xIsisSysMinLSPGenInt=xIsisSysMinLSPGenInt, xIsisCircHelloTimer=xIsisCircHelloTimer, xIsisRASNPAMask=xIsisRASNPAMask, xIsisRAIndex=xIsisRAIndex, xIsisESAdj=xIsisESAdj, xIsisCircOutCtrlPDUs=xIsisCircOutCtrlPDUs, xIsisL3CLNPDestEntry=xIsisL3CLNPDestEntry, xIsisCircL2ErrorMetric=xIsisCircL2ErrorMetric, xIsisCircEntry=xIsisCircEntry, xIsisCircISConfTimer=xIsisCircISConfTimer, xIsisISAdjProtSuppSysInstance=xIsisISAdjProtSuppSysInstance, xIsisRATable=xIsisRATable, xIsisCircISHoldTimerMult=xIsisCircISHoldTimerMult, xIsisESAdjExistState=xIsisESAdjExistState, xIsisSysProtSuppSysInstance=xIsisSysProtSuppSysInstance, xIsisISAdjIPAddrAdjIndex=xIsisISAdjIPAddrAdjIndex, xIsisL1CLNPDestEntry=xIsisL1CLNPDestEntry, xIsisCircLANL2DesISChanges=xIsisCircLANL2DesISChanges, xIsisISAdjIPAddrCircIndex=xIsisISAdjIPAddrCircIndex, xIsisCircLANL1DesISChanges=xIsisCircLANL1DesISChanges, xIsisRADefMetricType=xIsisRADefMetricType, xIsisCircL2DefaultMetric=xIsisCircL2DefaultMetric, xIsisCircClnsTxPDUs=xIsisCircClnsTxPDUs, xIsisL1CLNPRouteForw=xIsisL1CLNPRouteForw, xIsisRACircIndex=xIsisRACircIndex, xIsisCircExistState=xIsisCircExistState, xIsisISAdjEntry=xIsisISAdjEntry, xIsisManAreaAddrTable=xIsisManAreaAddrTable, xIsisRASNPAPrefix=xIsisRASNPAPrefix, ExistState=ExistState, xIsisRAErrMetric=xIsisRAErrMetric, xIsisL3CLNPDestTable=xIsisL3CLNPDestTable, xIsisL3CLNPRouteMetricValue=xIsisL3CLNPRouteMetricValue, xIsisRAMapType=xIsisRAMapType, xIsisISAdjIndex=xIsisISAdjIndex, xIsisSysProtSuppProtocol=xIsisSysProtSuppProtocol, xIsisISAdjAreaAddrCircIndex=xIsisISAdjAreaAddrCircIndex, xIsisSysProtSuppTable=xIsisSysProtSuppTable, xIsisRAExistState=xIsisRAExistState, xIsisAreaAddr=xIsisAreaAddr, xIsisCircISOperState=xIsisCircISOperState, xIsisManAreaAddrEntry=xIsisManAreaAddrEntry, xIsisL2CLNPRouteMetricValue=xIsisL2CLNPRouteMetricValue, xIsisSysOrigL1LSPBuffSize=xIsisSysOrigL1LSPBuffSize, SupportedProtocol=SupportedProtocol, xIsisSysMinBroadLSPTransInt=xIsisSysMinBroadLSPTransInt, xIsisISAdjProtSuppAdjIndex=xIsisISAdjProtSuppAdjIndex, xIsisISAdjIPAddrSysInstance=xIsisISAdjIPAddrSysInstance, xIsisL1CLNPRouteSource=xIsisL1CLNPRouteSource, xIsisRADelMetric=xIsisRADelMetric, xIsisSysProtSuppExistState=xIsisSysProtSuppExistState, xIsisCircClnsExistState=xIsisCircClnsExistState, xIsisCircL1DefaultMetric=xIsisCircL1DefaultMetric, xIsisL3CLNPRouteMetricType=xIsisL3CLNPRouteMetricType, xIsisCircL1CircID=xIsisCircL1CircID, xIsisISAdjAreaAddrAdjIndex=xIsisISAdjAreaAddrAdjIndex, xIsisAreaAddrSysInstance=xIsisAreaAddrSysInstance, xIsisISAdjProtSuppEntry=xIsisISAdjProtSuppEntry, xIsisL2CLNPDestTable=xIsisL2CLNPDestTable, xIsisSysMaxAreaMis=xIsisSysMaxAreaMis, xIsisSysTable=xIsisSysTable, xIsisRAEntry=xIsisRAEntry, xIsisRADefMetric=xIsisRADefMetric, xIsisSysMaxAreaCheck=xIsisSysMaxAreaCheck, xIsisCircClnsEntry=xIsisCircClnsEntry, xIsis=xIsis, xIsisESAdjCircIndex=xIsisESAdjCircIndex, xIsisISAdjIPAddrEntry=xIsisISAdjIPAddrEntry, xIsisESAdjEntry=xIsisESAdjEntry, xIsisRAExpMetric=xIsisRAExpMetric, xIsisSysInstance=xIsisSysInstance, xIsisCircAdjChanges=xIsisCircAdjChanges, xIsisISAdjProtSuppTable=xIsisISAdjProtSuppTable, xIsisL3CLNPRouteSource=xIsisL3CLNPRouteSource, xIsisISAdjProtSuppCircIndex=xIsisISAdjProtSuppCircIndex, xIsisSysVersion=xIsisSysVersion, xIsisCircISSuggESConfTimer=xIsisCircISSuggESConfTimer, xIsisSysPartSNPInt=xIsisSysPartSNPInt, xIsisCircIfIndex=xIsisCircIfIndex, xIsisISAdjNeighSNPAAddress=xIsisISAdjNeighSNPAAddress, xIsisESAdjNeighSNPAAddress=xIsisESAdjNeighSNPAAddress, xIsisL1CLNPRouteMetricQOS=xIsisL1CLNPRouteMetricQOS, xIsisCircISTable=xIsisCircISTable, xIsisESAdjSysInstance=xIsisESAdjSysInstance, xIsisManAreaAddrSysInstance=xIsisManAreaAddrSysInstance, xIsisISAdjAreaAddrEntry=xIsisISAdjAreaAddrEntry, xIsisL1CLNPRouteMetricValue=xIsisL1CLNPRouteMetricValue, xIsisCircSysInstance=xIsisCircSysInstance, xIsisRADelMetricType=xIsisRADelMetricType, xIsisCircClnsRxPDUs=xIsisCircClnsRxPDUs, xIsisISAdjNeighSysType=xIsisISAdjNeighSysType, xIsisL2CLNPRouteDest=xIsisL2CLNPRouteDest, xIsisAreaAddrEntry=xIsisAreaAddrEntry, xIsisManAreaAddr=xIsisManAreaAddr, xIsisSysSeqNumSkips=xIsisSysSeqNumSkips, xIsisRAExpMetricType=xIsisRAExpMetricType, xIsisSysL2State=xIsisSysL2State, xIsisCirc=xIsisCirc, xIsisCircClnsOperState=xIsisCircClnsOperState, xIsisESAdjState=xIsisESAdjState, xIsisISAdjNeighPriority=xIsisISAdjNeighPriority, xIsisRAAddrPrefix=xIsisRAAddrPrefix, xIsisRASNPAAddress=xIsisRASNPAAddress, xIsisCircOperState=xIsisCircOperState, xIsisESAdjType=xIsisESAdjType, xIsisSysMaxLSPGenInt=xIsisSysMaxLSPGenInt, xIsisSysWaitTime=xIsisSysWaitTime, xIsisL2CLNPRouteMetricQOS=xIsisL2CLNPRouteMetricQOS, xIsisISAdjAreaAddrTable=xIsisISAdjAreaAddrTable, xIsisCircClnsTable=xIsisCircClnsTable, xIsisISAdjCircIndex=xIsisISAdjCircIndex, xIsisRAErrMetricType=xIsisRAErrMetricType, xIsisCircL2ISPriority=xIsisCircL2ISPriority, xIsisCircExtDomain=xIsisCircExtDomain, xIsisReachAddr=xIsisReachAddr, xIsisSysL1LSPDbaseOloads=xIsisSysL1LSPDbaseOloads, xIsisSysOwnLSPPurges=xIsisSysOwnLSPPurges, xIsisCircISEntry=xIsisCircISEntry, xIsisISAdjSysInstance=xIsisISAdjSysInstance, xIsisRAType=xIsisRAType, xIsisAreaAddrTable=xIsisAreaAddrTable, xIsisCircL2CircID=xIsisCircL2CircID, xIsisSysManAddrsDropFromArea=xIsisSysManAddrsDropFromArea)
