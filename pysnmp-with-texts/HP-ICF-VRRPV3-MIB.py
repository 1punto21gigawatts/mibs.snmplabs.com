#
# PySNMP MIB module HP-ICF-VRRPV3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-VRRPV3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, Unsigned32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, IpAddress, Counter32, TimeTicks, ModuleIdentity, ObjectIdentity, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "IpAddress", "Counter32", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Integer32")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
vrrpv3OperationsVrId, vrrpv3OperationsEntry, vrrpv3OperationsInetAddrType, vrrpv3AssociatedIpAddrEntry = mibBuilder.importSymbols("VRRPV3-MIB", "vrrpv3OperationsVrId", "vrrpv3OperationsEntry", "vrrpv3OperationsInetAddrType", "vrrpv3AssociatedIpAddrEntry")
hpicfVrrpv3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90))
hpicfVrrpv3MIB.setRevisions(('2015-09-16 00:00', '2012-11-21 00:00', '2012-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfVrrpv3MIB.setRevisionsDescriptions(('Added an object to support the bfd protocol operations under vrrp. Added hpicfVrrpv3VrBfdIPAddr.', 'Added statistics objects.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setLastUpdated('201509160000Z')
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfVrrpv3MIB.setDescription('This MIB module contains HP proprietary extensions to the standard VRRPV3-MIB module.')
hpicfVrrpv3Operations = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1))
hpicfVrrpv3ErrorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10))
hpicfVrrpv3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2))
hpicfVrrpv3IPv4AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv4AdminStatus.setDescription('When set to true, this enables VRRP for IPv4 globally on the router. If set to false, this would disable VRRPv3 for IPv4. Default is false.')
hpicfVrrpv3IPv6AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv6AdminStatus.setDescription('When set to true, this enables VRRP for IPv6 globally on the router. If set to false, this would disable VRRPv3 for IPv6. Default is false.')
hpicfVrrpv3OperationsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3), )
if mibBuilder.loadTexts: hpicfVrrpv3OperationsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3OperationsTable.setDescription('HP extensions to the vrrpv3OperationsTable.')
hpicfVrrpv3OperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1), )
vrrpv3OperationsEntry.registerAugmentions(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperationsEntry"))
hpicfVrrpv3OperationsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfVrrpv3OperationsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3OperationsEntry.setDescription('HP extensions for an entry in the vrrpv3OperationsTable.')
hpicfVrrpv3VrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("owner", 1), ("backup", 2), ("uninitialized", 3))).clone('uninitialized')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrMode.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrMode.setDescription('This object denotes whether this VR has been designated as an owner or as a backup. On VR creation, this field is set to uninitialized. The user cannot set the value of this object to uninitialized.')
hpicfVrrpv3VrPreemptDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrPreemptDelayTime.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrPreemptDelayTime.setDescription('This object specifies the time that the owner virtual router will wait before taking control of its virtual IP address. A value of 0 indicates that the pre-empt delay timer is not active')
hpicfVrrpv3VrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("failback", 1), ("failover", 2), ("failoverWithMonitoring", 3), ("invalid", 4))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrControl.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrControl.setDescription('When this object is set to failback (1), it acts as a trigger to intimate VRRP to failback to this router from another. When this object is set to failover (2), it acts as a trigger to intimate VRRP to failover from this router to another. When this object is set to failoverWithMonitoring (3), in addition to triggering VRRP to failover, it triggers VR to monitor for presence of a master. When read, this object always returns invalid (4).')
hpicfVrrpv3VrRespondToPing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrRespondToPing.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrRespondToPing.setDescription('If set to FALSE, prevents a response to ping requests to the virtual router IP addresses configured on the backup router. If set to TRUE allows response to ping requests to virtual IP addresses configured when virtual router become master. hpicfVrrpv3RespondToPing must also be configured globally to respond to virtual IP ping requests. By default hpicfVrrpv3VrRespondToPing is enabled.')
hpicfVrrpv3Version = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2", 2), ("v3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3Version.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3Version.setDescription('The configured version of VRRP. IPv6 Virtual Routers supports only v3. Default value for IPv4 virtual Routers is v2 and for IPv6 Virtual Routers is v3.')
hpicfVrrpv3VrNullAuthCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrNullAuthCompatibility.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrNullAuthCompatibility.setDescription(' When set to true appends authentication data at the end to an IPv6 VRRP packet being sent out. The authentication data is 8 bytes filled with 0 and is applicable only for IPv6 Virtual router. By default hpicfVrrpv3VrNullAuthCompatibility is set to false.')
hpicfVrrpv3VrBfdIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 3, 1, 13), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3VrBfdIPAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrBfdIPAddr.setDescription(' IP address of the master to enable BFD under VRRP.')
hpicfVrrpv3TrackTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4), )
if mibBuilder.loadTexts: hpicfVrrpv3TrackTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3TrackTable.setDescription('HP extensions for supporting tracking.')
hpicfVrrpv3TrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRPV3-MIB", "vrrpv3OperationsVrId"), (0, "VRRPV3-MIB", "vrrpv3OperationsInetAddrType"), (0, "HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrTrackType"), (0, "HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrTrackEntity"))
if mibBuilder.loadTexts: hpicfVrrpv3TrackEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3TrackEntry.setDescription('HP extensions for supporting tracking.')
hpicfVrrpv3VrTrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("trunk", 2), ("vlan", 3))))
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackType.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackType.setDescription("This object specifies the type of interface specified by 'hpicfVrrpv3VrTrackEntity'.")
hpicfVrrpv3VrTrackEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackEntity.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3VrTrackEntity.setDescription("This object specifies interface details. Interface detail is interpreted Based on type specified by 'hpicfVrrpv3VrTrackType'. Valid values for different track types are - ------------------------------------ hpicfVrrpv3VrTrackType range ------------------------------------ port '1'..'65535' trunk '1'..'65535' vlan '1'..'65535' ------------------------------------")
hpicfVrrpv3TrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVrrpv3TrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3TrackRowStatus.setDescription('The row status of given track entity.')
hpicfVrrpv3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5), )
if mibBuilder.loadTexts: hpicfVrrpv3StatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3StatsTable.setDescription('Table of virtual router statistics.')
hpicfVrrpv3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5, 1), )
vrrpv3OperationsEntry.registerAugmentions(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3StatsEntry"))
hpicfVrrpv3StatsEntry.setIndexNames(*vrrpv3OperationsEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfVrrpv3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3StatsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
hpicfVrrpv3StatsNearFailovers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3StatsNearFailovers.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3StatsNearFailovers.setDescription('This object reports the number of near failovers for backup virtual routers. A near failover occurs when a backup virtual router has not received an advertisement packet from the master virtual router for two advertisement intervals.')
hpicfVrrpv3RespondToPing = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3RespondToPing.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3RespondToPing.setDescription('If this object is set to FALSE globally, it prevents a response to ping requests to the virtual router IP addresses configured on all backup routers.If set to TRUE, allows response to ping requests to virtual IP addresses configured on backup virtual routers when they become master. hpicfVrrpv3VrRespondToPing object must also be configured on a Virtual router to respond to virtual IP ping requests. By default hpicfVrrpv3RespondToPing is disabled.')
hpicfVrrpv3RemoveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3RemoveConfig.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3RemoveConfig.setDescription("This objects clears all existing vrrp configuration and again intializes it with default values when this is set with value 'true'. It also clears (disables) the global VRRP enable flag. SnmpGet on this will always return false.")
hpicfVrrpv3Nonstop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3Nonstop.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3Nonstop.setDescription('This object defines the operation of VRRP on redundant platforms. When set to TRUE, the VRRP Master router will retain control of virtual-IP addresses across a management card failure on redundant platforms. When set to FALSE, the VRRP Backup router will take control of virtual-IP addresses on the network on the occurrence of a management card failure on the Master VRRP router.')
hpicfVrrpv3NotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVrrpv3NotificationCntl.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3NotificationCntl.setDescription("Indicates whether the VRRPv3-enabled router will generate SNMP traps for events defined in this MIB. 'Enabled' results in SNMP traps; 'disabled', no traps are sent.")
hpicfVrrpv3IPv4RouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterChecksumErrors.setDescription('The total number of IPv4 VRRP packets received with an invalid VRRP checksum value. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3IPv6RouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterChecksumErrors.setDescription('The total number of IPv6 VRRP packets received with an invalid VRRP checksum value. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3IPv4RouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVersionErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVersionErrors.setDescription('The total number of IPv4 VRRP packets received with an unknown or unsupported version number. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3IPv6RouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVersionErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVersionErrors.setDescription('The total number of IPv6 VRRP packets received with an unknown or unsupported version number. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3IPv4RouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVrIdErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv4RouterVrIdErrors.setDescription('The total number of IPv4 VRRP packets received with a VRID that is not valid for any virtual router on this router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3IPv6RouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 1, 10, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVrIdErrors.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3IPv6RouterVrIdErrors.setDescription('The total number of IPv6 VRRP packets received with a VRID that is not valid for any virtual router on this router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpv3GlobalStatisticsDiscontinuityTime.')
hpicfVrrpv3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 1))
hpicfVrrpv3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2))
hpicfVrrpv3MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 1, 1)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3BfdGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3OperGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackGroup"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3BfdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3MIBCompliance = hpicfVrrpv3MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3MIBCompliance.setDescription('The compliance statement for HP routers running VRRPV3 and implementing the HP-ICF-VRRPV3-MIB.')
hpicfVrrpv3OperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 1)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4AdminStatus"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6AdminStatus"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3Version"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrMode"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrRespondToPing"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrPreemptDelayTime"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrControl"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3StatsNearFailovers"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrNullAuthCompatibility"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3RespondToPing"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3RemoveConfig"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3Nonstop"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3NotificationCntl"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterChecksumErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterChecksumErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterVersionErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterVersionErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv4RouterVrIdErrors"), ("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3IPv6RouterVrIdErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3OperGroup = hpicfVrrpv3OperGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3OperGroup.setDescription('A collection of HP proprietary objects to support VRRPV3 configuration on HP routers.')
hpicfVrrpv3TrackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 2)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3TrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3TrackGroup = hpicfVrrpv3TrackGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3TrackGroup.setDescription('A collection of HP proprietary objects to support VRRPV3 configuration on HP routers.')
hpicfVrrpv3BfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 90, 2, 2, 5)).setObjects(("HP-ICF-VRRPV3-MIB", "hpicfVrrpv3VrBfdIPAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVrrpv3BfdGroup = hpicfVrrpv3BfdGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVrrpv3BfdGroup.setDescription('A collection of HP proprietary objects to support BFD configuration on HP routers.')
mibBuilder.exportSymbols("HP-ICF-VRRPV3-MIB", hpicfVrrpv3StatsTable=hpicfVrrpv3StatsTable, hpicfVrrpv3IPv6RouterVrIdErrors=hpicfVrrpv3IPv6RouterVrIdErrors, PYSNMP_MODULE_ID=hpicfVrrpv3MIB, hpicfVrrpv3Conformance=hpicfVrrpv3Conformance, hpicfVrrpv3NotificationCntl=hpicfVrrpv3NotificationCntl, hpicfVrrpv3Version=hpicfVrrpv3Version, hpicfVrrpv3IPv4AdminStatus=hpicfVrrpv3IPv4AdminStatus, hpicfVrrpv3VrPreemptDelayTime=hpicfVrrpv3VrPreemptDelayTime, hpicfVrrpv3VrControl=hpicfVrrpv3VrControl, hpicfVrrpv3TrackRowStatus=hpicfVrrpv3TrackRowStatus, hpicfVrrpv3IPv6RouterChecksumErrors=hpicfVrrpv3IPv6RouterChecksumErrors, hpicfVrrpv3IPv4RouterVrIdErrors=hpicfVrrpv3IPv4RouterVrIdErrors, hpicfVrrpv3OperGroup=hpicfVrrpv3OperGroup, hpicfVrrpv3MIB=hpicfVrrpv3MIB, hpicfVrrpv3TrackEntry=hpicfVrrpv3TrackEntry, hpicfVrrpv3StatsEntry=hpicfVrrpv3StatsEntry, hpicfVrrpv3VrTrackType=hpicfVrrpv3VrTrackType, hpicfVrrpv3IPv6AdminStatus=hpicfVrrpv3IPv6AdminStatus, hpicfVrrpv3VrRespondToPing=hpicfVrrpv3VrRespondToPing, hpicfVrrpv3ErrorObjects=hpicfVrrpv3ErrorObjects, hpicfVrrpv3BfdGroup=hpicfVrrpv3BfdGroup, hpicfVrrpv3StatsNearFailovers=hpicfVrrpv3StatsNearFailovers, hpicfVrrpv3RespondToPing=hpicfVrrpv3RespondToPing, hpicfVrrpv3TrackTable=hpicfVrrpv3TrackTable, hpicfVrrpv3RemoveConfig=hpicfVrrpv3RemoveConfig, hpicfVrrpv3VrMode=hpicfVrrpv3VrMode, hpicfVrrpv3VrNullAuthCompatibility=hpicfVrrpv3VrNullAuthCompatibility, hpicfVrrpv3MIBGroups=hpicfVrrpv3MIBGroups, hpicfVrrpv3OperationsTable=hpicfVrrpv3OperationsTable, hpicfVrrpv3Nonstop=hpicfVrrpv3Nonstop, hpicfVrrpv3IPv4RouterChecksumErrors=hpicfVrrpv3IPv4RouterChecksumErrors, hpicfVrrpv3OperationsEntry=hpicfVrrpv3OperationsEntry, hpicfVrrpv3MIBCompliances=hpicfVrrpv3MIBCompliances, hpicfVrrpv3MIBCompliance=hpicfVrrpv3MIBCompliance, hpicfVrrpv3IPv6RouterVersionErrors=hpicfVrrpv3IPv6RouterVersionErrors, hpicfVrrpv3Operations=hpicfVrrpv3Operations, hpicfVrrpv3VrBfdIPAddr=hpicfVrrpv3VrBfdIPAddr, hpicfVrrpv3IPv4RouterVersionErrors=hpicfVrrpv3IPv4RouterVersionErrors, hpicfVrrpv3TrackGroup=hpicfVrrpv3TrackGroup, hpicfVrrpv3VrTrackEntity=hpicfVrrpv3VrTrackEntity)
