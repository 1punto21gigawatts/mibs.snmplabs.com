#
# PySNMP MIB module WWP-LEOS-8021X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-8021X-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Bits, Gauge32, IpAddress, Unsigned32, TimeTicks, MibIdentifier, iso, NotificationType, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Bits", "Gauge32", "IpAddress", "Unsigned32", "TimeTicks", "MibIdentifier", "iso", "NotificationType", "Integer32", "Counter32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeos8021xMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401))
wwpLeos8021xMibModule.setRevisions(('2005-08-28 19:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeos8021xMibModule.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: wwpLeos8021xMibModule.setLastUpdated('200508281935Z')
if mibBuilder.loadTexts: wwpLeos8021xMibModule.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeos8021xMibModule.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeos8021xMibModule.setDescription('Description.')
wwpLeos8021xMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1))
wwpLeos8021xConf = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 1))
wwpLeos8021xGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 1, 1))
wwpLeos8021xCompls = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 1, 2))
wwpLeos8021xObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2))
wwpLeos8021xPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeos8021xPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xPortTable.setDescription('Table with an entry for every port on the switch')
wwpLeos8021xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-8021X-MIB", "wwpLeos8021xPort"))
if mibBuilder.loadTexts: wwpLeos8021xPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xPortEntry.setDescription('Description.')
wwpLeos8021xPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeos8021xPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xPort.setDescription('Switch Ethernet Port')
wwpLeos8021xRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("supplicant", 2), ("authenticator", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xRole.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xRole.setDescription('802.1x role of the Port.')
wwpLeos8021xAuthPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xAuthPortStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xAuthPortStatsClear.setDescription("Setting this MIB object to 'true' will clear the authenticator port statistics.")
wwpLeos8021xEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 3))
wwpLeos8021xEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 3, 0))
wwpLeos8021xSuppTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeos8021xSuppTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppTable.setDescription('A table that contains the configuration objects for the Supplicant PAE associated with each port. An entry appears in this table for each port that may authenticate itself when challenged by a remote system.')
wwpLeos8021xSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-8021X-MIB", "wwpLeos8021xSuppPort"))
if mibBuilder.loadTexts: wwpLeos8021xSuppEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppEntry.setDescription('The configuration information for a Supplicant PAE.')
wwpLeos8021xSuppPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeos8021xSuppPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppPort.setDescription('The MIB object is used as an index in the table and specifies the port.')
wwpLeos8021xSuppUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xSuppUserName.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppUserName.setDescription('The username that shall be used along with the password specified by wwpLeos8021xSuppPassword to gain access to the PAE resources. Setting this object to 0 will reset the username.')
wwpLeos8021xSuppPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xSuppPassword.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppPassword.setDescription('The password that shall be used along with the username specified by wwpLeos8021xSuppUserName to gain access on port. Setting this object to 0 will reset the password. Doing a get on this object will always return NULL for security reasons.')
wwpLeos8021xSuppPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xSuppPortStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppPortStatsClear.setDescription("Setting this MIB object to 'true' will clear the supplicant port statistics.")
wwpLeos8021xSuppEAPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("eapMd5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xSuppEAPMethod.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppEAPMethod.setDescription('Extensible Authentication Protocol associated with this supplicant.')
wwpLeos8021xGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 3))
wwpLeos8021xAuthStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xAuthStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xAuthStatsClear.setDescription("Setting this MIB object to 'true' will clear the authenticator global statistics.")
wwpLeos8021xSuppStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 401, 1, 2, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeos8021xSuppStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeos8021xSuppStatsClear.setDescription("Setting this MIB object to 'true' will clear the supplicant global statistics.")
mibBuilder.exportSymbols("WWP-LEOS-8021X-MIB", wwpLeos8021xRole=wwpLeos8021xRole, wwpLeos8021xSuppStatsClear=wwpLeos8021xSuppStatsClear, PYSNMP_MODULE_ID=wwpLeos8021xMibModule, wwpLeos8021xAuthStatsClear=wwpLeos8021xAuthStatsClear, wwpLeos8021xSuppPassword=wwpLeos8021xSuppPassword, wwpLeos8021xPortEntry=wwpLeos8021xPortEntry, wwpLeos8021xEvents=wwpLeos8021xEvents, wwpLeos8021xAuthPortStatsClear=wwpLeos8021xAuthPortStatsClear, wwpLeos8021xPort=wwpLeos8021xPort, wwpLeos8021xGlobalAttrs=wwpLeos8021xGlobalAttrs, wwpLeos8021xSuppUserName=wwpLeos8021xSuppUserName, wwpLeos8021xGroups=wwpLeos8021xGroups, wwpLeos8021xSuppPortStatsClear=wwpLeos8021xSuppPortStatsClear, wwpLeos8021xMIB=wwpLeos8021xMIB, wwpLeos8021xCompls=wwpLeos8021xCompls, wwpLeos8021xConf=wwpLeos8021xConf, wwpLeos8021xPortTable=wwpLeos8021xPortTable, wwpLeos8021xEventsV2=wwpLeos8021xEventsV2, wwpLeos8021xObjs=wwpLeos8021xObjs, wwpLeos8021xSuppTable=wwpLeos8021xSuppTable, wwpLeos8021xMibModule=wwpLeos8021xMibModule, wwpLeos8021xSuppEntry=wwpLeos8021xSuppEntry, wwpLeos8021xSuppEAPMethod=wwpLeos8021xSuppEAPMethod, wwpLeos8021xSuppPort=wwpLeos8021xSuppPort)
