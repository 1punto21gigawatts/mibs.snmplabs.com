#
# PySNMP MIB module COM21-HCXVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXVLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
com21Hcx, com21 = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, Gauge32, MibIdentifier, Integer32, Counter32, TimeTicks, ModuleIdentity, Unsigned32, Bits, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Gauge32", "MibIdentifier", "Integer32", "Counter32", "TimeTicks", "ModuleIdentity", "Unsigned32", "Bits", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
com21HcxVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 80))
if mibBuilder.loadTexts: com21HcxVlan.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxVlan.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxVlan.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxVlan.setDescription('This is the Com21 ComController Vlan MIB module. COM21 Part# 005-0025-00')
com21HcxVlanCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 81))
com21HcxVlanStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 82))
com21HcxOc3VlanStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 83))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

com21HcxVlanCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1), )
if mibBuilder.loadTexts: com21HcxVlanCtrlTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxVlanCtrlTable.setDescription('.')
com21HcxVlanCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1), ).setIndexNames((0, "COM21-HCXVLAN-MIB", "hcxVlanCtrlId"))
if mibBuilder.loadTexts: com21HcxVlanCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxVlanCtrlEntry.setDescription('.')
hcxVlanCtrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanCtrlId.setStatus('current')
if mibBuilder.loadTexts: hcxVlanCtrlId.setDescription(' Specifies the associated Vlan Id.')
hcxVlanCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanCtrlName.setStatus('current')
if mibBuilder.loadTexts: hcxVlanCtrlName.setDescription(' contains a descriptive name for the VLAN.')
hcxVlanShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanShelf.setStatus('current')
if mibBuilder.loadTexts: hcxVlanShelf.setDescription(' Specifies the Shelf to which the Vlan is attached to. Shelf/Slot/CardType/Port will uniquely identify the port to which this Vlan is attached to')
hcxVlanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanSlot.setStatus('current')
if mibBuilder.loadTexts: hcxVlanSlot.setDescription(' Specifies the Slot to which the Vlan is attached to. Shelf/Slot/CardType/Port will uniquely identify the port to which this Vlan is attached to')
hcxVlanCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenBaseT", 1), ("onehundredBaseT", 2), ("oc3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanCardType.setStatus('current')
if mibBuilder.loadTexts: hcxVlanCardType.setDescription(' Specifies the CardType to which the Vlan is attached to. Shelf/Slot/CardType/Port will uniquely identify the port to which this Vlan is attached to')
hcxVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanPort.setStatus('current')
if mibBuilder.loadTexts: hcxVlanPort.setDescription(' Specifies the Port to which the Vlan is attached to. Shelf/Slot/CardType/Port will uniquely identify the port to which this Vlan is attached to')
hcxVlanPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 7), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxVlanPriStatus.setStatus('current')
if mibBuilder.loadTexts: hcxVlanPriStatus.setDescription(' lets the user Create a Vlan instance. If already created it lets the user Enable, Disable or Delete the Vlan. Note that the VLAN cannot be Enabled or Disabled until the attributes hcxVlanShelf, hcxVlanSlot, hcxVlanCardType and hcxVlanPort have valid values.')
hcxVlanSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanSecStatus.setStatus('current')
if mibBuilder.loadTexts: hcxVlanSecStatus.setDescription(' Indicates whether the Vlan is ONLINE or OFFLINE.')
hcxVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanType.setStatus('current')
if mibBuilder.loadTexts: hcxVlanType.setDescription(' Specifies whether the Vlan is an internal Vlan or external Vlan. internal Vlan does not allow traffic to leave the Vlan or enter the Vlan. external Vlan allows traffic in both directions. default is external. Note that this attribute is not applicable to 10bT card.')
hcxVlanPeerToPeerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanPeerToPeerFlag.setStatus('current')
if mibBuilder.loadTexts: hcxVlanPeerToPeerFlag.setDescription(' Specifies whether STU to STU communication is allowed in the Vlan. If false, STU to STU communication is not allowed and has to go through an external router. If true direct STU to STU communication is allowed without the intervention of an external router. This attribute is not applicable to VLANs on 10bT Card and defaults to a read-only value of true. Default for 100bT/OC3 is false. ')
hcxVlanMcastDnstrmRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanMcastDnstrmRate.setStatus('current')
if mibBuilder.loadTexts: hcxVlanMcastDnstrmRate.setDescription(' Specifies the downstream multicast rate associated with this Vlan. Defined in bits per second. The multicast rate is ondemand (not guaranteed if enough bandwidth is not available). 0 stops all broadcast forwarding. Default 100000. If a twoWay modem of model CP1000, CP1000A, CP1000B or CP1000C is acquired in the system or a teleRet modem is configured then the multicast rate will be dynamically lowered to not exceed 1000000. Under that condition an attempt to set the rate to greater than 1000000 will be rejected. The rate wil remain at 1000000 even if the condition clears eventually (all the modems of model CP1000, CP1000A, CP1000B or CP1000C get deacquired and no more teleRet modems are configured).')
hcxVlanIpArpFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpArpFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpArpFiltEnbl.setDescription(' Specifies whether ARP authentication filtering should be enabled on this VLAN. This filter is applicable to 10BT, 100BT, and OC3 cards. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpArpFiltEnable.')
hcxVlanIpSrcFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpSrcFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpSrcFiltEnbl.setDescription(' Specifies whether IP source address filtering should be enabled on this VLAN. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpSrcFiltEnable.')
hcxVlanIpDstFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpDstFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpDstFiltEnbl.setDescription(' Specifies whether IP destination address filtering should be enabled on this VLAN. This filter is applicable to 100BT, and OC3 cards. It is not applicable to to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpDstFiltEnable.')
hcxVlanIpBootpReqFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpBootpReqFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpBootpReqFiltEnbl.setDescription(' Specifies whether BOOTP requests, or DHCPDISCOVER, or DHCPREQUEST, or DHCPRELEASE packets should be filtered on this VLAN. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It filters traffic in the downstream direction. Default is true. This filter cannot be controlled per ComPort.')
hcxVlanIpBootpReplyFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpBootpReplyFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpBootpReplyFiltEnbl.setDescription(' Specifies whether BOOTP replies, or DHCPOFFER, or DHCPACK packets should be filtered on this VLAN. This filter is applicable to 100BT, and OC3 cards. It it not applicable to 10BT card. It filters traffic in the upstream direction. Default is true. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpBootpReplyFiltEnbl.')
hcxVlanIpDhcpSnoopFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpDhcpSnoopFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpDhcpSnoopFiltEnbl.setDescription(' Specifies whether DHCP snooping should be enabled on this VLAN. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It snoops traffic in the downstream direction for DHCPACK packets, and in the upstream direction for DHCPDECLINE or DHCPRELEASE packets. Dynamic IP address assigments thus learned are stored in the valid source IP address table (com21HcxStuSrcIpAddrGroup.) Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpDhcpSnoopFiltEnbl.')
hcxVlanL2SnapFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2SnapFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2SnapFiltEnbl.setDescription(' Specifies whether SNAP-encoded IEEE 802.3 packets should be filtered on this VLAN. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2SnapFiltEnbl.')
hcxVlanL2NonSnapFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2NonSnapFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2NonSnapFiltEnbl.setDescription(' Specifies whether non-SNAP-encoded IEEE 802.3 packets should be filtered on this VLAN. This filter is applicable to 10BT, 100BT, and OC3 cards. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2NonSnapFiltEnbl.')
hcxVlanL2EnetFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2EnetFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2EnetFiltEnbl.setDescription(' Specifies whether Ethernet packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT Card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2EnetFiltEnbl.')
hcxVlanL2ArpIpv4FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2ArpIpv4FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2ArpIpv4FiltEnbl.setDescription(' Specifies whether ARP packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2ArpIpv4FiltEnbl.')
hcxVlanL2Ipv4FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2Ipv4FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2Ipv4FiltEnbl.setDescription(' Specifies whether IPv4 packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2Ipv4FiltEnbl.')
hcxVlanL2Ipv6FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2Ipv6FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2Ipv6FiltEnbl.setDescription(' Specifies whether IPv6 packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2Ipv6FiltEnbl.')
hcxVlanL2IpxFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2IpxFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2IpxFiltEnbl.setDescription(' Specifies whether IPX packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2IpxFiltEnbl.')
hcxVlanL2AppletalkFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2AppletalkFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2AppletalkFiltEnbl.setDescription(' Specifies whether AppleTalk packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2AppletalkFiltEnbl.')
hcxVlanL2OthersFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanL2OthersFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2OthersFiltEnbl.setDescription(' Specifies whether all layer 2 packets that are none of the above (ARP, IPv4, IPv6, IPX, AppleTalk) should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuL2OthersFiltEnbl.')
hcxVlanIpNetbiosFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanIpNetbiosFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpNetbiosFiltEnbl.setDescription(' Specifies whether NetBIOS-over-IP packets should be filtered on this VLAN. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for a specific ComPort via the MIB attribute hcxStuIpNetbiosFiltEnbl.')
hcxVPNNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVPNNum.setStatus('current')
if mibBuilder.loadTexts: hcxVPNNum.setDescription(' Specifies the Virtual Private Network to which this Vlan belongs to. If this is not set, it defaults to 0. If a ComPort which belongs to this Vlan has to be configured to support Voice, then a VPN Number has to be defined. Default is 0.')
hcxVlanVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanVpi.setStatus('current')
if mibBuilder.loadTexts: hcxVlanVpi.setDescription(' Specifies the VPI to use if this vlan is on an OC3 Port. This attribute is not used if vlan is not on a oc3 Port. Default is 0.')
hcxVlanVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanVci.setStatus('current')
if mibBuilder.loadTexts: hcxVlanVci.setDescription(' Specifies the VCI to use if this vlan is on an OC3 Port. This attribute is not used if vlan is not on a oc3 Port. If the hcxVlanVpi value is set to 0, the valid range for this attribute is 38 to 255 Default is 0.')
hcxVlanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 81, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanRate.setStatus('current')
if mibBuilder.loadTexts: hcxVlanRate.setDescription(' Specifies the Maximum Rate at which this Vlan can operate. This attribute is used only if the vlan is on an OC3 Port. Default is 10,000,000 bps')
com21HcxVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1), )
if mibBuilder.loadTexts: com21HcxVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxVlanStatsTable.setDescription('.')
com21HcxVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1), ).setIndexNames((0, "COM21-HCXVLAN-MIB", "hcxVlanStatsId"))
if mibBuilder.loadTexts: com21HcxVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxVlanStatsEntry.setDescription('.')
hcxVlanStatsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanStatsId.setStatus('current')
if mibBuilder.loadTexts: hcxVlanStatsId.setDescription(' Is used as an Index to read the Statistics of a given Vlan.')
hcxVlanCurrMcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanCurrMcastTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxVlanCurrMcastTxPkts.setDescription(' contains the number of Multicast net packets sent downstream over the Vlan in the current 15min period.')
hcxVlanCurrMcastDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanCurrMcastDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: hcxVlanCurrMcastDroppedPkts.setDescription(' contains the number of Multicast downstream packets dropped in the current 15min period.')
hcxVlanIpCurrArpFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrArpFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrArpFiltStat.setDescription(' contains the number of ARP packets from this Vlan dropped due to authentication filtering in the current 15minute collection period')
hcxVlanIpCurrSrcFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrSrcFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrSrcFiltStat.setDescription(' Contains the number of IP packets from this VLAN dropped due to source address filtering in the current 15 minute collection period.')
hcxVlanIpCurrDstFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrDstFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrDstFiltStat.setDescription(' Contains the number of IP packets from this VLAN dropped due to destination address filtering in the current 15 minute collection period.')
hcxVlanIpCurrBootpReqFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrBootpReqFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrBootpReqFiltStat.setDescription(' Contains the number of Bootp Req packets from this VLAN dropped due to filtering in the current 15 minute collection period.')
hcxVlanIpCurrBootpReplyFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrBootpReplyFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrBootpReplyFiltStat.setDescription(' Contains the number of Bootp Reply packets from this VLAN dropped due to filtering in the current 15 minute collection period.')
hcxVlanIpCurrDhcpSnoopFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrDhcpSnoopFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrDhcpSnoopFiltStat.setDescription(' Contains the number of DHCP Ack packets from this VLAN snooped due to filtering in the current 15 minute collection period.')
hcxVlanPrevMcastTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanPrevMcastTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxVlanPrevMcastTxPkts.setDescription(' contains the number of Multicast net packets sent downstream over the Vlan in the previous 15min period.')
hcxVlanPrevMcastDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanPrevMcastDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: hcxVlanPrevMcastDroppedPkts.setDescription(' contains the number of Multicast downstream packets dropped in the previous 15min period.')
hcxVlanIpPrevArpFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevArpFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevArpFiltStat.setDescription(' contains the number of ARP packets from this Vlan dropped due to authentication filtering in the previous 15minute collection period')
hcxVlanIpPrevSrcFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevSrcFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevSrcFiltStat.setDescription(' Contains the number of IP packets from this VLAN dropped due to source address filtering in the previous 15 minute collection period.')
hcxVlanIpPrevDstFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevDstFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevDstFiltStat.setDescription(' Contains the number of IP packets from this VLAN dropped due to destination address filtering in the previous 15 minute collection period.')
hcxVlanIpPrevBootpReqFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevBootpReqFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevBootpReqFiltStat.setDescription(' Contains the number of Bootp Req packets from this VLAN dropped due to filtering in the previous 15 minute collection period.')
hcxVlanIpPrevBootpReplyFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevBootpReplyFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevBootpReplyFiltStat.setDescription(' Contains the number of Bootp Reply packets from this VLAN dropped due to filtering in the previous 15 minute collection period.')
hcxVlanIpPrevDhcpSnoopFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevDhcpSnoopFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevDhcpSnoopFiltStat.setDescription(' Contains the number of DHCP Ack packets from this VLAN snooped due to filtering in the previous 15 minute collection period.')
hcxVlanClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVlanClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxVlanClearStats.setDescription(' This attribute is used to clear the all VLAN statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
hcxVlanL2CurrSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2CurrSnapFiltStat.setDescription(' Contains the number of SNAP-encoded IEEE 802.3 packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrNonSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrNonSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2CurrNonSnapFiltStat.setDescription(' Contains the number of non-SNAP-encoded IEEE 802.3 packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrEnetFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrEnetFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrEnetFiltStat.setDescription(' Contains the number of Ethernet packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrArpIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrArpIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrArpIpv4FiltStat.setDescription(' Contains the number of IPv4 ARP packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrIpv4FiltStat.setDescription(' Contains the number of IPv4 packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrIpv6FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrIpv6FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrIpv6FiltStat.setDescription(' Contains the number of IPv6 packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrIpxFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrIpxFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrIpxFiltStat.setDescription(' Contains the number of IPX packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrAppletalkFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrAppletalkFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrAppletalkFiltStat.setDescription(' Contains the number of AppleTalk packets filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2CurrOthersFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2CurrOthersFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2CurrOthersFiltStat.setDescription(' Contains the number of packets that are none of the above type of filters that are filtered from this VLAN in the current 15 minute collection period.')
hcxVlanIpCurrNetbiosFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpCurrNetbiosFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpCurrNetbiosFiltStat.setDescription(' Contains the number of NetBIOS-over-IP packets that are filtered from this VLAN in the current 15 minute collection period.')
hcxVlanL2PrevSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2PrevSnapFiltStat.setDescription(' Contains the number of SNAP-encoded IEEE 802.3 packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevNonSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevNonSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanL2PrevNonSnapFiltStat.setDescription(' Contains the number of non-SNAP-encoded IEEE 802.3 packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevEnetFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevEnetFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevEnetFiltStat.setDescription(' Contains the number of Ethernet packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevArpIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevArpIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevArpIpv4FiltStat.setDescription(' Contains the number of IPv4 ARP packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevIpv4FiltStat.setDescription(' Contains the number of IPv4 packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevIpv6FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevIpv6FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevIpv6FiltStat.setDescription(' Contains the number of IPv6 packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevIpxFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevIpxFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevIpxFiltStat.setDescription(' Contains the number of IPX packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevAppletalkFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevAppletalkFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevAppletalkFiltStat.setDescription(' Contains the number of AppleTalk packets filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanL2PrevOthersFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanL2PrevOthersFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxVlanL2PrevOthersFiltStat.setDescription(' Contains the number of packets that are none of the above type of filters that are filtered from this VLAN in the previous 15 minute collection period.')
hcxVlanIpPrevNetbiosFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 82, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVlanIpPrevNetbiosFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxVlanIpPrevNetbiosFiltStat.setDescription(' Contains the number of NetBIOS-over-IP packets that are filtered from this VLAN in the previous 15 minute collection period.')
com21HcxOc3VlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1), )
if mibBuilder.loadTexts: com21HcxOc3VlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3VlanStatsTable.setDescription('.')
com21HcxOc3VlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1), ).setIndexNames((0, "COM21-HCXVLAN-MIB", "hcxOc3VlanStatsVlanId"))
if mibBuilder.loadTexts: com21HcxOc3VlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxOc3VlanStatsEntry.setDescription('.')
hcxOc3VlanStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsVlanId.setDescription(' Specifies the index into this table. An entry exists for each vlan which is on the Oc3 Port.')
hcxOc3VlanStatsCurrTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrTxPkts.setDescription(' Specifies the number of Pkts. Transmitted on the VPI/VCI value associated with this entry in the current 15-min time period.')
hcxOc3VlanStatsCurrRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrRxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrRxPkts.setDescription(' Specifies the number of Pkts. Received on the VPI/VCI value associated with this entry in the current 15-min time period.')
hcxOc3VlanStatsCurrCrcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrCrcPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsCurrCrcPkts.setDescription(' Specifies the number of Pkts. Received with CRC error on the VPI/VCI value associated with this entry in the current 15-min time period.')
hcxOc3VlanStatsPrevTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevTxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevTxPkts.setDescription(' Specifies the number of Pkts. Transmitted on the VPI/VCI value associated with this entry in the previous 15-min time period.')
hcxOc3VlanStatsPrevRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevRxPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevRxPkts.setDescription(' Specifies the number of Pkts. Received on the VPI/VCI value associated with this entry in the previous 15-min time period.')
hcxOc3VlanStatsPrevCrcPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevCrcPkts.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsPrevCrcPkts.setDescription(' Specifies the number of Pkts. Received with CRC error on the VPI/VCI value associated with this entry in the previous 15-min time period.')
hcxOc3VlanStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 83, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxOc3VlanStatsClear.setStatus('current')
if mibBuilder.loadTexts: hcxOc3VlanStatsClear.setDescription(' Provides the capability to clear the statistics. Clearing of Statistics is allowed only if hcxStatsControl attribute is set to wrapCurr.')
mibBuilder.exportSymbols("COM21-HCXVLAN-MIB", hcxVlanIpArpFiltEnbl=hcxVlanIpArpFiltEnbl, hcxVlanVci=hcxVlanVci, hcxVlanL2OthersFiltEnbl=hcxVlanL2OthersFiltEnbl, hcxVlanIpCurrBootpReplyFiltStat=hcxVlanIpCurrBootpReplyFiltStat, hcxVlanIpPrevSrcFiltStat=hcxVlanIpPrevSrcFiltStat, hcxVlanIpPrevNetbiosFiltStat=hcxVlanIpPrevNetbiosFiltStat, hcxVlanL2PrevEnetFiltStat=hcxVlanL2PrevEnetFiltStat, hcxVlanStatsId=hcxVlanStatsId, hcxVlanIpPrevDstFiltStat=hcxVlanIpPrevDstFiltStat, hcxVlanIpPrevBootpReplyFiltStat=hcxVlanIpPrevBootpReplyFiltStat, hcxVlanIpDstFiltEnbl=hcxVlanIpDstFiltEnbl, PrimServiceState=PrimServiceState, hcxVlanL2CurrNonSnapFiltStat=hcxVlanL2CurrNonSnapFiltStat, hcxVlanL2PrevAppletalkFiltStat=hcxVlanL2PrevAppletalkFiltStat, hcxVPNNum=hcxVPNNum, hcxVlanIpCurrBootpReqFiltStat=hcxVlanIpCurrBootpReqFiltStat, hcxVlanIpSrcFiltEnbl=hcxVlanIpSrcFiltEnbl, hcxVlanSecStatus=hcxVlanSecStatus, hcxVlanCtrlName=hcxVlanCtrlName, hcxVlanL2PrevIpxFiltStat=hcxVlanL2PrevIpxFiltStat, hcxVlanShelf=hcxVlanShelf, hcxVlanL2CurrSnapFiltStat=hcxVlanL2CurrSnapFiltStat, com21HcxVlanStatsGroup=com21HcxVlanStatsGroup, hcxVlanIpCurrNetbiosFiltStat=hcxVlanIpCurrNetbiosFiltStat, hcxVlanIpPrevArpFiltStat=hcxVlanIpPrevArpFiltStat, hcxOc3VlanStatsPrevRxPkts=hcxOc3VlanStatsPrevRxPkts, hcxVlanClearStats=hcxVlanClearStats, hcxVlanL2Ipv6FiltEnbl=hcxVlanL2Ipv6FiltEnbl, hcxVlanL2EnetFiltEnbl=hcxVlanL2EnetFiltEnbl, hcxOc3VlanStatsClear=hcxOc3VlanStatsClear, hcxVlanCurrMcastTxPkts=hcxVlanCurrMcastTxPkts, com21HcxVlanCtrlEntry=com21HcxVlanCtrlEntry, com21HcxOc3VlanStatsGroup=com21HcxOc3VlanStatsGroup, hcxVlanL2PrevNonSnapFiltStat=hcxVlanL2PrevNonSnapFiltStat, hcxVlanL2ArpIpv4FiltEnbl=hcxVlanL2ArpIpv4FiltEnbl, hcxOc3VlanStatsVlanId=hcxOc3VlanStatsVlanId, hcxVlanSlot=hcxVlanSlot, hcxVlanRate=hcxVlanRate, com21HcxVlan=com21HcxVlan, hcxOc3VlanStatsCurrCrcPkts=hcxOc3VlanStatsCurrCrcPkts, hcxVlanL2CurrIpv6FiltStat=hcxVlanL2CurrIpv6FiltStat, Com21RowStatus=Com21RowStatus, hcxVlanL2PrevArpIpv4FiltStat=hcxVlanL2PrevArpIpv4FiltStat, hcxVlanL2CurrIpv4FiltStat=hcxVlanL2CurrIpv4FiltStat, hcxOc3VlanStatsPrevTxPkts=hcxOc3VlanStatsPrevTxPkts, hcxVlanL2CurrOthersFiltStat=hcxVlanL2CurrOthersFiltStat, com21HcxVlanCtrlTable=com21HcxVlanCtrlTable, hcxVlanVpi=hcxVlanVpi, hcxVlanCardType=hcxVlanCardType, hcxVlanType=hcxVlanType, hcxVlanL2PrevIpv4FiltStat=hcxVlanL2PrevIpv4FiltStat, hcxVlanIpCurrSrcFiltStat=hcxVlanIpCurrSrcFiltStat, hcxVlanCurrMcastDroppedPkts=hcxVlanCurrMcastDroppedPkts, hcxVlanIpPrevDhcpSnoopFiltStat=hcxVlanIpPrevDhcpSnoopFiltStat, hcxOc3VlanStatsCurrTxPkts=hcxOc3VlanStatsCurrTxPkts, hcxOc3VlanStatsCurrRxPkts=hcxOc3VlanStatsCurrRxPkts, hcxVlanL2PrevOthersFiltStat=hcxVlanL2PrevOthersFiltStat, hcxVlanIpBootpReqFiltEnbl=hcxVlanIpBootpReqFiltEnbl, hcxVlanIpNetbiosFiltEnbl=hcxVlanIpNetbiosFiltEnbl, hcxVlanL2PrevSnapFiltStat=hcxVlanL2PrevSnapFiltStat, hcxVlanPort=hcxVlanPort, com21HcxOc3VlanStatsEntry=com21HcxOc3VlanStatsEntry, hcxVlanIpCurrDstFiltStat=hcxVlanIpCurrDstFiltStat, hcxVlanL2CurrArpIpv4FiltStat=hcxVlanL2CurrArpIpv4FiltStat, hcxVlanL2PrevIpv6FiltStat=hcxVlanL2PrevIpv6FiltStat, com21HcxOc3VlanStatsTable=com21HcxOc3VlanStatsTable, com21HcxVlanCtrlGroup=com21HcxVlanCtrlGroup, hcxVlanL2Ipv4FiltEnbl=hcxVlanL2Ipv4FiltEnbl, hcxVlanMcastDnstrmRate=hcxVlanMcastDnstrmRate, hcxVlanIpCurrDhcpSnoopFiltStat=hcxVlanIpCurrDhcpSnoopFiltStat, hcxVlanL2CurrIpxFiltStat=hcxVlanL2CurrIpxFiltStat, hcxVlanL2AppletalkFiltEnbl=hcxVlanL2AppletalkFiltEnbl, hcxVlanIpBootpReplyFiltEnbl=hcxVlanIpBootpReplyFiltEnbl, hcxVlanPrevMcastTxPkts=hcxVlanPrevMcastTxPkts, com21HcxVlanStatsEntry=com21HcxVlanStatsEntry, PYSNMP_MODULE_ID=com21HcxVlan, hcxVlanPeerToPeerFlag=hcxVlanPeerToPeerFlag, hcxVlanIpDhcpSnoopFiltEnbl=hcxVlanIpDhcpSnoopFiltEnbl, hcxVlanPrevMcastDroppedPkts=hcxVlanPrevMcastDroppedPkts, hcxVlanL2CurrEnetFiltStat=hcxVlanL2CurrEnetFiltStat, hcxVlanPriStatus=hcxVlanPriStatus, com21HcxVlanStatsTable=com21HcxVlanStatsTable, hcxVlanL2NonSnapFiltEnbl=hcxVlanL2NonSnapFiltEnbl, hcxVlanL2IpxFiltEnbl=hcxVlanL2IpxFiltEnbl, hcxVlanIpCurrArpFiltStat=hcxVlanIpCurrArpFiltStat, hcxVlanL2CurrAppletalkFiltStat=hcxVlanL2CurrAppletalkFiltStat, hcxVlanCtrlId=hcxVlanCtrlId, hcxOc3VlanStatsPrevCrcPkts=hcxOc3VlanStatsPrevCrcPkts, hcxVlanIpPrevBootpReqFiltStat=hcxVlanIpPrevBootpReqFiltStat, hcxVlanL2SnapFiltEnbl=hcxVlanL2SnapFiltEnbl)
