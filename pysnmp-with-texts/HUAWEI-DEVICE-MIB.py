#
# PySNMP MIB module HUAWEI-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
huaweiUtility, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiUtility")
HWSubPCBType, HWPortType, HWPCBType, HWFrameType = mibBuilder.importSymbols("HUAWEI-TC-MIB", "HWSubPCBType", "HWPortType", "HWPCBType", "HWFrameType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, ObjectIdentity, TimeTicks, Unsigned32, Integer32, Counter32, ModuleIdentity, IpAddress, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "ObjectIdentity", "TimeTicks", "Unsigned32", "Integer32", "Counter32", "ModuleIdentity", "IpAddress", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "RowStatus")
hwDev = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 3))
if mibBuilder.loadTexts: hwDev.setLastUpdated('200406280900Z')
if mibBuilder.loadTexts: hwDev.setOrganization('Fix-Net Dept, Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwDev.setContactInfo('Block 4, R&D Building, Huawei Longgang Production Base, Shenzhen, P.R.C. http://www.huawei.com Zip:518057 ')
if mibBuilder.loadTexts: hwDev.setDescription('huawei device mib.')
hwSystemPara = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 1))
hwSysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwSysIpAddr.setDescription(" IP address of the system,IP address of the net port used for device maintenance.It'd better not to modify this address when out-band NMS is used. ")
hwSysIpMask = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysIpMask.setStatus('current')
if mibBuilder.loadTexts: hwSysIpMask.setDescription(" IP address mask of the system. IP address of the net port used for device maintenance. It'd be better not to IP address mask together with address mask. It will take no effect to separately configure IP address or address mask. It'd when out-band NMS is used. ")
hwSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSysVersion.setStatus('current')
if mibBuilder.loadTexts: hwSysVersion.setDescription(' The System Version is consistent with the specification of HUAWEI product. For example, MD5500 V100R001M30B01PXXXX. ')
hwSysTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSysTime.setStatus('current')
if mibBuilder.loadTexts: hwSysTime.setDescription(' The current date and time of the system. ')
hwNmsParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2), )
if mibBuilder.loadTexts: hwNmsParaTable.setStatus('current')
if mibBuilder.loadTexts: hwNmsParaTable.setDescription(' ')
hwNmsParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwNmsIndex"))
if mibBuilder.loadTexts: hwNmsParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwNmsParaEntry.setDescription(' NMS parameters configuration table entity. ')
hwNmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNmsIndex.setStatus('current')
if mibBuilder.loadTexts: hwNmsIndex.setDescription(' Index(1..32),at most supports 32 NMSs,exclusively identifies a NMS. ')
hwNmsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsName.setStatus('current')
if mibBuilder.loadTexts: hwNmsName.setDescription(' Name of the NMS, which des not have to be consistent with that of the NMS workstation. ')
hwNmsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsIp.setStatus('current')
if mibBuilder.loadTexts: hwNmsIp.setDescription(' IP address of the NMS workstation that can be outband or inband address. ')
hwNmsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsMask.setStatus('deprecated')
if mibBuilder.loadTexts: hwNmsMask.setDescription(' IP address mask of the NMS workstation. ')
hwNmsMaintainMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inBandwidth", 1), ("outBandwidth", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsMaintainMode.setStatus('deprecated')
if mibBuilder.loadTexts: hwNmsMaintainMode.setDescription(' Maintenance mode of NMS workstation,if the IP address of the NMS station is in-band, the mode must also be in-band. ')
hwNmsGetCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsGetCommunity.setStatus('current')
if mibBuilder.loadTexts: hwNmsGetCommunity.setDescription(' Community authentication name used for SNMP protocol GET operation, default value: public. ')
hwNmsSetCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsSetCommunity.setStatus('current')
if mibBuilder.loadTexts: hwNmsSetCommunity.setDescription(' Community authentication name used for SNMP protocol SET operation, default value: private. ')
hwNmsSnmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsSnmpPort.setStatus('deprecated')
if mibBuilder.loadTexts: hwNmsSnmpPort.setDescription(' Snmp communication port of NMS workstation,default value:161. ')
hwNmsTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsTrapPort.setStatus('deprecated')
if mibBuilder.loadTexts: hwNmsTrapPort.setDescription(' Trap receive Port of NMS workstation, default value:162. ')
hwNmsClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ro", 1), ("rw", 2), ("rwWithTrap", 3), ("trapOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsClass.setStatus('deprecated')
if mibBuilder.loadTexts: hwNmsClass.setDescription(' Class of NMS station,default value is 3. ')
hwNmsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwNmsStatus.setStatus('current')
if mibBuilder.loadTexts: hwNmsStatus.setDescription(' Operation status of NMS station,the NMS station can be added,deleted and modified. ')
hwSlotConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3))
hwFrameTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1), )
if mibBuilder.loadTexts: hwFrameTable.setStatus('current')
if mibBuilder.loadTexts: hwFrameTable.setDescription(' Frame description table that describes basic information of a frame. It includes the frame type, the number of slots in the frame, etc. The number of slots vary with the type of the frame where it is located. For example,, there are has 16 slots in MA5100 while 4 ones in MA5103. This table is also adopted for the case-shaped device with Agent (For example, the MA5105). There is no frame in this his kind of device. Thus, the device can be put on the rack with other ones during implementation. Its frame index is specified as 0. The frame type is imported from the relevant definition of the HW-TC table. ')
hwFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"))
if mibBuilder.loadTexts: hwFrameEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrameEntry.setDescription(' Frame description table entity. ')
hwFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrameIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrameIndex.setDescription(' Frame Index,the number of the frame in the device. This table is also adopted by the case-shaped device with Agent (For example, the MA5105). There is no frame in this kind of device. Thus it is placed on the rack with other devices During implementation. The frame index is specified as 0. ')
hwFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 2), HWFrameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFrameType.setStatus('current')
if mibBuilder.loadTexts: hwFrameType.setDescription('Frame type,one kind of the frame types defined in HW-TC table. According to the private MIB standard of the company, the product must support read-only mode. In other words, you can query the frame type the NMS. You can choose for various broadband product to support read-write mode for the dynamic control of frame type. ')
hwFrameDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFrameDesc.setStatus('current')
if mibBuilder.loadTexts: hwFrameDesc.setDescription(' Frame description, the maximum length of the character string is 64. This table is used to describe some extra information. For example, to facilitate management, use it to describe the frame that is located in XX frame XX apparatus room. ')
hwSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlots.setStatus('current')
if mibBuilder.loadTexts: hwSlots.setDescription(' Slot number of the frame, refers to the physical slot number of the frame, which depends on the frame type and has nothing to do with the number of boards placed in the slots, whose number varies with the frame type. For example, there are 16 slots in MA5100 while 4 lots in MA5103. ')
hwFrameOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("other", 3), ("discovery", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrameOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwFrameOperStatus.setDescription(' Frame operation status. This variable is used to indicate whether the frame works in a normal status. ')
hwFrameAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("reset", 3), ("test", 4), ("confirm", 5), ("delete", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFrameAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwFrameAdminStatus.setDescription('Frame administration status. It only describes the statuses in common use, including ')
hwFrameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwFrameRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwFrameRowStatus.setDescription('Row status of the frame:mainly to support the offline configuration of addition and deletion. You can choose for various broadband products to support this function.Row status is used to manage the creation or deletion of the concept rows.The following shows six statuses. ')
hwSlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2), )
if mibBuilder.loadTexts: hwSlotTable.setStatus('current')
if mibBuilder.loadTexts: hwSlotTable.setDescription(' Slot description table, which describes detailed information of all boards in each slot which is on the frame, including the number of subslots, the status of the board, the software of the board, the hardware version No., the working mode of the board, etc. This table must be implemented. ')
hwSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwSlotEntry.setStatus('current')
if mibBuilder.loadTexts: hwSlotEntry.setDescription(' Slot description table entity. ')
hwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotIndex.setStatus('current')
if mibBuilder.loadTexts: hwSlotIndex.setDescription(' Slot index that identifies the physical position of a slot. The case-shaped device is treated as the one with only one slot whose index is always set as 0. If there are ports in the frame, all the ports on the frame must be virtualized as a fixed slot index (equal to the virtual slots which is the max slot index for the frame plus 1.) Their slot index is also fixedly set as 0. ')
hwSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 2), HWPCBType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotType.setStatus('current')
if mibBuilder.loadTexts: hwSlotType.setDescription(' Board type. The board type defined in HW-TC table is recommended. According to the private MIB standard of the company, all the products must support the read-only mode. In other words, you can query the slot type through the NMS. You can choose for various broadband products to support the read-write mode for the dynamic control of slot type. ')
hwSlotDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotDesc.setStatus('current')
if mibBuilder.loadTexts: hwSlotDesc.setDescription(' Slot information description, used to describe extra information of the board. For example, it can be adopted for a user access device to describe the information of a user group connected to the slot. ')
hwSlotPcbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotPcbVersion.setStatus('deprecated')
if mibBuilder.loadTexts: hwSlotPcbVersion.setDescription(' The PCB version information of the slot. It has been discarded in the fixed net MIB. The information of PCB version and other versions are described in the hwSlotVersion. ')
hwSlotVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotVersion.setStatus('current')
if mibBuilder.loadTexts: hwSlotVersion.setDescription(' Board version information. Refer to the technical specifications of Huawei Technologies Co., Ltd. Use the new-line character \\n (ACSII 0x0A) to space various version information.If there is no corresponding version, the new-line character shall also be inserted to remain the order. Detailed order information: Hardware PCB version \\n Software version \\n Logic version \\n DSP version \\n Standby CPU software version \\n Chip version \\n Other software version of the chip with a software \\n Other version information \\n ')
hwSlotWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("main", 1), ("standby", 2), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwSlotWorkMode.setDescription(' Board working mode that describes whether the board is working in main state or in standby state. ')
hwSubSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSubSlots.setStatus('current')
if mibBuilder.loadTexts: hwSubSlots.setDescription("The number of the subslots. The subslot is used to plug the subboard in the board. The number subslots can be determined when the board's been made, whether the subboard has been inserted in the subslot. ")
hwSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("uninstall", 1), ("normal", 2), ("fault", 3), ("forbidden", 4), ("discovery", 5), ("config", 6), ("offline", 7), ("abnormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwSlotOperStatus.setDescription('Operation status of the board. ')
hwSlotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("reset", 3), ("test", 4), ("confirm", 5), ("switch", 6), ("delete", 7), ("forbidden", 8), ("unforbidden", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwSlotAdminStatus.setDescription(' Administration status of the board. ')
hwSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSlotRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSlotRowStatus.setDescription(' Row status:mainly to support the offline configuration of board addition and deletion. Various broadband products can be determined whether to support this function. ')
hwSlotPhySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSlotPhySerialNum.setStatus('current')
if mibBuilder.loadTexts: hwSlotPhySerialNum.setDescription('The vendor-specific serial number string for the physical entity. The preferred value is the serial number string actually printed on the component itself (if present). ')
hwSubslotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3), )
if mibBuilder.loadTexts: hwSubslotTable.setStatus('current')
if mibBuilder.loadTexts: hwSubslotTable.setDescription(' Subslot description table that describes detailed information of each subslot attached to the board. ')
hwSubslotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSubslotIndex"))
if mibBuilder.loadTexts: hwSubslotEntry.setStatus('current')
if mibBuilder.loadTexts: hwSubslotEntry.setDescription(' Subslot description table entity. ')
hwSubslotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSubslotIndex.setStatus('current')
if mibBuilder.loadTexts: hwSubslotIndex.setDescription(' Subslot Index. The present subslot index is determined by its physical position in the board. ')
hwSubslotType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 2), HWSubPCBType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubslotType.setStatus('current')
if mibBuilder.loadTexts: hwSubslotType.setDescription(' Subboard type in the subslot,refer to HW-TC table. According to the private MIB standard of the company, the product must support read-only mode. In other words, you can query the subboard type through the NMS. You can choose for various broadband product to support read-write mode for the dynamic control of frame type. ')
hwSubslotPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSubslotPorts.setStatus('current')
if mibBuilder.loadTexts: hwSubslotPorts.setDescription(' The number of physical ports owned by the subboard in the subslot. ')
hwSubslotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninstall", 1), ("normal", 2), ("fault", 3), ("forbidden", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSubslotOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwSubslotOperStatus.setDescription(' Operation status of the subboard in the subslot. ')
hwSubslotAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("reset", 3), ("test", 4), ("confirm", 5), ("delete", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubslotAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwSubslotAdminStatus.setDescription(' Administration status of the subboard in the subslot. The following only describes some statuses in common use. If there are some other statuses, just extend them. delete(6) - discard this node through hwSubSlotRowStatus. ')
hwSubslotVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubslotVersion.setStatus('current')
if mibBuilder.loadTexts: hwSubslotVersion.setDescription(' Subboard version information. Refer to the technical specifications of Huawei Technologies Co., Ltd. Use the new-line character \\n (ACSII 0x0A) to space various version information. ')
hwSubSlotDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubSlotDesc.setStatus('current')
if mibBuilder.loadTexts: hwSubSlotDesc.setDescription(' Subboard description. ')
hwSubslotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubslotRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSubslotRowStatus.setDescription(' Row status:mainly to support the offline configuration of subboard addition and deletion.Each product can determine whether to offer this kind of function. ')
hwPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4), )
if mibBuilder.loadTexts: hwPortTable.setStatus('current')
if mibBuilder.loadTexts: hwPortTable.setDescription(' Port configuration table that describes the detailed information of physical ports in the board, including the type, status and rate of the port.This table must be implemented. ')
hwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSubslotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwPortIndex"))
if mibBuilder.loadTexts: hwPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortEntry.setDescription(' Port configuration table entity. ')
hwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortIndex.setDescription(' Port index, the index of this table, which exclusively determines all the ports in a subboard. ')
hwPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 2), HWPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortType.setStatus('current')
if mibBuilder.loadTexts: hwPortType.setDescription(' Port type. According to the private MIB standard of the company, the product must support read-only mode. In other words, you can query the frame type through the NMS. You can choose for various broadband product to support read-write mode for the dynamic control of subboard type. ')
hwPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortDesc.setStatus('current')
if mibBuilder.loadTexts: hwPortDesc.setDescription(' Port description, used to describe extra information of the port. For example, for a user access device it can be adopted to describe the information of the user who is connecting to the port. ')
hwPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: hwPortSpeed.setDescription(' The speed of this port. ')
hwPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("localLoopback", 3), ("forbidden", 4), ("test", 5), ("remoteLoopback", 6), ("activing", 10), ("deactive", 11), ("block", 12), ("nolight", 13), ("innerLocalLoopback", 14), ("innerRemoteLoopback", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortOperStatus.setDescription(' Port operation status. ')
hwPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("active", 1), ("deactive", 2), ("block", 3), ("unblock", 4), ("confirm", 5), ("delete", 6), ("reset", 7), ("localLoopback", 8), ("remoteLoopback", 9), ("stopLoopback", 11), ("innerLocalLoopback", 12), ("innerRemoteLoopback", 13), ("rtuLocalLoopback", 14), ("rtuRemoteLoopback", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortAdminStatus.setDescription(' Port administration status. ')
hwFrameLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5))
hwFrameLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkNumber.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkNumber.setDescription(' Number of frame Links, which refers to the number of links between the main frame and the standby frame of the presen device. If there are many frames, but the device cannot know the link relation of the frames, then the initial value of this node is 0. If a user manually adds the link between the frames later, then this node shall be renewed. ')
hwFrameLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2), )
if mibBuilder.loadTexts: hwFrameLinkTable.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkTable.setDescription(' The frame link table. It describes the topology relation between the frames. For the device that can automatically discover the link relationship between the devices, this table can be implemented as read-only table. For the device whose inter-frame relation needs to be configured manually, this table shall support adding and deletion. All the links must locate on the two existing ports. ')
hwFrameLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameLinkIndex"))
if mibBuilder.loadTexts: hwFrameLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkEntry.setDescription(' The entry of the frame link table. There are the left and right node for a frame link. Each node is in the form of frame ID + slot ID + subslot + port. ')
hwFrameLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrameLinkIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkIndex.setDescription(' Index of the frame link. It is sequentially numerated and exclusively identified in the device. There is no restriction to the coding rule. ')
hwFrameLinkLeftFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkLeftFrame.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkLeftFrame.setDescription(' The ID of the left node linked to the frame, corresponding to the hwFrameIndex in the hwFrameTable ')
hwFrameLinkLeftSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkLeftSlot.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkLeftSlot.setDescription(' The ID of the left slot linked to the frame, corresponding to the hwSlotIndex in the hwSlotTable. It indicates which slot of the left node is the link entry. ')
hwFrameLinkLeftSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkLeftSubSlot.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkLeftSubSlot.setDescription(' Link the left subslot, corresponding to the hwSubSlotIndex in the hwSubTable. It indicates which subslot of the left node is the link entry. ')
hwFrameLinkLeftPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkLeftPort.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkLeftPort.setDescription(' The ID of the left port linked to the frame, corresponding to the hwPortIndex in the hwPortTable. It indicates which port of the left node is the link entry. ')
hwFrameLinkRightFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkRightFrame.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkRightFrame.setDescription(' The ID of the right node linked to the frame, corresponding to the hwFrameIndex of the hwFrameTable. ')
hwFrameLinkRightSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkRightSlot.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkRightSlot.setDescription(' The ID of the right slot linked the frame, corresponding to the hwSlotIndex of the hwSlotTable. It indicates which slot of the right node is the link entry. ')
hwFrameLinkRightSubSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkRightSubSlot.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkRightSubSlot.setDescription(' Link the right subslot, corresponding to the hwSubSlotIndex in the hwSubSlotTable. It indicates which subslot of the right node is the link entry. ')
hwFrameLinkRightPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkRightPort.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkRightPort.setDescription(' The ID of the right port linked to the frame, corresponding to the hwPortIndex in the hwPortTable. It indicates which port of the right port is the link entry. ')
hwFrameLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrameLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkOperStatus.setDescription('The running status of the link ')
hwFrameLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFrameLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkRowStatus.setDescription(' The row status of the frame link, used to add or delete a link. ')
hwFrameLinkNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFrameLinkNextIndex.setStatus('current')
if mibBuilder.loadTexts: hwFrameLinkNextIndex.setDescription(" The frame link table indicates adding the index value to be assigned by the new link. This leaf is used to access an index ID of the next frame link dynamically assigned by the host before delivering the adding link. To deliver the adding link, the value of the leaf shall be accessed, and be delivered together with the 'frame link table'. Otherwise, the host can not execute the operation and will return the error. ")
hwNarrowBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6))
hwBoardAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6, 1), )
if mibBuilder.loadTexts: hwBoardAttrTable.setStatus('current')
if mibBuilder.loadTexts: hwBoardAttrTable.setDescription(' Inquiring or modifying A_ULaw, impedance and current of ASL, A32 and H511POTS ports. ')
hwBoardAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"))
if mibBuilder.loadTexts: hwBoardAttrEntry.setStatus('current')
if mibBuilder.loadTexts: hwBoardAttrEntry.setDescription(' Narrow board attribute table entity ')
hwBoardAulaw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBoardAulaw.setStatus('current')
if mibBuilder.loadTexts: hwBoardAulaw.setDescription(' Coding method of voice signal when digitalizing. In different country or area it should be A law or u law. 1 -- A law 2 -- ulaw ')
hwBoardCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBoardCurrent.setStatus('current')
if mibBuilder.loadTexts: hwBoardCurrent.setDescription(' Port current supported by the board. The value ranges from 1 to 8, which indicates the port current value supported under certain loopline impedence. 1 -- 25mA steady current 2 -- 16mA steady current 3 -- 35mA 2*200 ohm 4 -- 35mA 2*250 ohm 5 -- 35mA 2*400 ohm 6 -- 47mA 2*200 ohm 7 -- 47mA 2*250 ohm 8 -- 47mA 2*400 ohm ')
hwBoardImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBoardImpedance.setStatus('current')
if mibBuilder.loadTexts: hwBoardImpedance.setDescription(' Port impedance of the board. The following values indicates different impedance with different application circumstances. 1 -- Bureau machine in China(200+680|| 100nf) 2 -- User Machine in China(200+560|| 100nf) 3 -- 600 ohm Interface 4 -- Interface of russian(150+510|| 47nf) 5 -- (220+820|| 115nf ) 6 -- (220+820|| 120nf ) 7 -- 900 ohm Interface 8 -- Interface of Brazil(800|| 50nf) 255 -- Private definition ')
hwCpuDevTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4), )
if mibBuilder.loadTexts: hwCpuDevTable.setStatus('current')
if mibBuilder.loadTexts: hwCpuDevTable.setDescription(' A table of CPU statistics. ')
hwCpuDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwCpuDevIndex"))
if mibBuilder.loadTexts: hwCpuDevEntry.setStatus('current')
if mibBuilder.loadTexts: hwCpuDevEntry.setDescription(' The Entries of hwCpuDevTable. ')
hwCpuDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: hwCpuDevIndex.setStatus('current')
if mibBuilder.loadTexts: hwCpuDevIndex.setDescription(' Index of hwCpuDevTable. ')
hwCpuDevDuty = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCpuDevDuty.setStatus('current')
if mibBuilder.loadTexts: hwCpuDevDuty.setDescription(' The overall CPU duty percentage in the last 5-second period. ')
hwAvgDuty1min = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAvgDuty1min.setStatus('current')
if mibBuilder.loadTexts: hwAvgDuty1min.setDescription(' The overall CPU duty percentage in the last 1 minute period. ')
hwAvgDuty5min = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAvgDuty5min.setStatus('current')
if mibBuilder.loadTexts: hwAvgDuty5min.setDescription(' The overall CPU duty percentage in the last 5-minute period. ')
hwMemoryDev = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5))
hwMemoryDevTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1), )
if mibBuilder.loadTexts: hwMemoryDevTable.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevTable.setDescription(' This table contains memory information. ')
hwMemoryDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwMemoryDevModuleIndex"))
if mibBuilder.loadTexts: hwMemoryDevEntry.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevEntry.setDescription(' The Entries of hwMemoryDevTable. ')
hwMemoryDevModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwMemoryDevModuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevModuleIndex.setDescription(' Index of hwMemoryDevTable. ')
hwMemoryDevSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevSize.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevSize.setDescription(' Indicates the total size of the memory module which is on the managed object.Its unit is byte. ')
hwMemoryDevFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevFree.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevFree.setDescription(' Indicates the free size of the memory, in the unit of byte. ')
hwMemoryDevRawSliceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevRawSliceUsed.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevRawSliceUsed.setDescription(' Indicates the used size of the raw slice memory, in the unit of byte. ')
hwMemoryDevLargestFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevLargestFree.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevLargestFree.setDescription(' The maximum size of the memory that can be currently used, in the unit of byte. ')
hwMemoryDevFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevFail.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevFail.setDescription(' Count of memory allocation failures. ')
hwMemoryDevFailNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMemoryDevFailNoMem.setStatus('current')
if mibBuilder.loadTexts: hwMemoryDevFailNoMem.setDescription(' Count of the memory allocation ')
hwBufferTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2), )
if mibBuilder.loadTexts: hwBufferTable.setStatus('current')
if mibBuilder.loadTexts: hwBufferTable.setDescription(' Buffer information table. ')
hwBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwBufferModuleIndex"), (0, "HUAWEI-DEVICE-MIB", "hwBufferSize"))
if mibBuilder.loadTexts: hwBufferEntry.setStatus('current')
if mibBuilder.loadTexts: hwBufferEntry.setDescription(' The Entries of hwBufferTable. ')
hwBufferModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwBufferModuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwBufferModuleIndex.setDescription(' Index of hwBufferTable. ')
hwBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBufferSize.setStatus('current')
if mibBuilder.loadTexts: hwBufferSize.setDescription(' Contains the size of byte hwBuffers, in the unit of byte. ')
hwBufferCurrentTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBufferCurrentTotal.setStatus('current')
if mibBuilder.loadTexts: hwBufferCurrentTotal.setDescription(' Contains the total number of hwBuffers currently. ')
hwBufferCurrentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBufferCurrentUsed.setStatus('current')
if mibBuilder.loadTexts: hwBufferCurrentUsed.setDescription(' Contains the number of used hwBuffers currently. ')
hwFlashDev = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6))
hwFlashDevTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1), )
if mibBuilder.loadTexts: hwFlashDevTable.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevTable.setDescription(' This table contains falsh information. ')
hwFlashDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwFrameIndex"), (0, "HUAWEI-DEVICE-MIB", "hwSlotIndex"), (0, "HUAWEI-DEVICE-MIB", "hwFlashDevIndex"))
if mibBuilder.loadTexts: hwFlashDevEntry.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevEntry.setDescription(' The Entries of hwFlashDevTable. ')
hwFlashDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwFlashDevIndex.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevIndex.setDescription(' Index of hwFlashDevTable. ')
hwFlashDevSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlashDevSize.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevSize.setDescription(' Total size in Octets of Flash memory, ')
hwFlashDevFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlashDevFree.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevFree.setDescription(' Unused Size in Octets of Flash memory. ')
hwFlashDevEraseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlashDevEraseTime.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevEraseTime.setDescription(' The last time when Flash was erased after powerup. ')
hwFlashDevEraseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashErasing", 1), ("flashErasedSuccessful", 2), ("flashErasedFail", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noEraseAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlashDevEraseStatus.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevEraseStatus.setDescription('Status of current or last flash erasing. ')
hwFlashDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFlashDevStatus.setStatus('current')
if mibBuilder.loadTexts: hwFlashDevStatus.setDescription(' Status of the availability of flash. ')
hwAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7))
hwAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1), )
if mibBuilder.loadTexts: hwAlarmTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwAlarmTable.setDescription(' The table of Alarms which the device occurred. ')
hwAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwAlarmSerialIndex"))
if mibBuilder.loadTexts: hwAlarmEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwAlarmEntry.setDescription(' The Entry of the Alarm Table. ')
hwAlarmSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAlarmSerialIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwAlarmSerialIndex.setDescription(' The Index of Alarms. Serial number. ')
hwAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm", 1), ("restore", 2), ("event", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAlarmType.setStatus('obsolete')
if mibBuilder.loadTexts: hwAlarmType.setDescription(' The type of the Alarm. ')
hwAlarmOcurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAlarmOcurTime.setStatus('obsolete')
if mibBuilder.loadTexts: hwAlarmOcurTime.setDescription(' The time when this Alarm occurred. ')
trapObjectIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 7, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapObjectIdValue.setStatus('obsolete')
if mibBuilder.loadTexts: trapObjectIdValue.setDescription(' The OID String of the trap. ')
hwDevTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8))
hwDevTrapVbOids = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 1))
hwFrameAdminResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwFrameAdminResult.setStatus('current')
if mibBuilder.loadTexts: hwFrameAdminResult.setDescription(' Frame administration result. ')
hwSlotAdminResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSlotAdminResult.setStatus('current')
if mibBuilder.loadTexts: hwSlotAdminResult.setDescription(' Slot administration result. ')
hwSubslotAdminResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwSubslotAdminResult.setStatus('current')
if mibBuilder.loadTexts: hwSubslotAdminResult.setDescription(' Subslot administration result. ')
hwPortAdminResult = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwPortAdminResult.setStatus('current')
if mibBuilder.loadTexts: hwPortAdminResult.setDescription(' Port administration result. ')
hwDevGeneralTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 5, 0))
hwFrameAdminResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 5, 0, 1)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwFrameAdminStatus"), ("HUAWEI-DEVICE-MIB", "hwFrameAdminResult"))
if mibBuilder.loadTexts: hwFrameAdminResultTrap.setStatus('current')
if mibBuilder.loadTexts: hwFrameAdminResultTrap.setDescription(' Frame administration result Trap report ')
hwSlotAdminResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 5, 0, 2)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotAdminStatus"), ("HUAWEI-DEVICE-MIB", "hwSlotAdminResult"))
if mibBuilder.loadTexts: hwSlotAdminResultTrap.setStatus('current')
if mibBuilder.loadTexts: hwSlotAdminResultTrap.setDescription(' Slot administration result Trap report ')
hwSubSlotAdminResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 5, 0, 3)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"), ("HUAWEI-DEVICE-MIB", "hwSubslotIndex"), ("HUAWEI-DEVICE-MIB", "hwSubslotAdminStatus"), ("HUAWEI-DEVICE-MIB", "hwSubslotAdminResult"))
if mibBuilder.loadTexts: hwSubSlotAdminResultTrap.setStatus('current')
if mibBuilder.loadTexts: hwSubSlotAdminResultTrap.setDescription(' Subslot administration result Trap report ')
hwPortAdminResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 3, 8, 5, 0, 4)).setObjects(("HUAWEI-DEVICE-MIB", "hwFrameIndex"), ("HUAWEI-DEVICE-MIB", "hwSlotIndex"), ("HUAWEI-DEVICE-MIB", "hwSubslotIndex"), ("HUAWEI-DEVICE-MIB", "hwPortIndex"), ("HUAWEI-DEVICE-MIB", "hwPortAdminStatus"), ("HUAWEI-DEVICE-MIB", "hwPortAdminResult"))
if mibBuilder.loadTexts: hwPortAdminResultTrap.setStatus('current')
if mibBuilder.loadTexts: hwPortAdminResultTrap.setDescription(' Port administration result Trap report ')
hwCliUserMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10))
hwCliUserParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1), )
if mibBuilder.loadTexts: hwCliUserParaTable.setStatus('current')
if mibBuilder.loadTexts: hwCliUserParaTable.setDescription('')
hwCliUserParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1), ).setIndexNames((1, "HUAWEI-DEVICE-MIB", "hwCliUserName"))
if mibBuilder.loadTexts: hwCliUserParaEntry.setStatus('current')
if mibBuilder.loadTexts: hwCliUserParaEntry.setDescription(' CLI user parameters configuration table entity. ')
hwCliUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: hwCliUserName.setStatus('current')
if mibBuilder.loadTexts: hwCliUserName.setDescription(' Name of the CLI user. ')
hwCliUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCliUserPassword.setStatus('current')
if mibBuilder.loadTexts: hwCliUserPassword.setDescription(' password of the CLI user. ')
hwCliUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("common", 1), ("operator", 2), ("administrator", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCliUserLevel.setStatus('current')
if mibBuilder.loadTexts: hwCliUserLevel.setDescription(' Level of CLI user(1:common,2:operator,3:administrator). ')
hwCliUserLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCliUserLogins.setStatus('current')
if mibBuilder.loadTexts: hwCliUserLogins.setDescription(' The num of user can login in one time. ')
hwCliUserDecr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCliUserDecr.setStatus('current')
if mibBuilder.loadTexts: hwCliUserDecr.setDescription(' Description of CLI user. ')
hwCliUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCliUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCliUserRowStatus.setDescription(' Operation status of CLI user,the CLI user can be added,deleted and modified. ')
hwCliClientTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2), )
if mibBuilder.loadTexts: hwCliClientTable.setStatus('current')
if mibBuilder.loadTexts: hwCliClientTable.setDescription('')
hwCliClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1), ).setIndexNames((0, "HUAWEI-DEVICE-MIB", "hwCliClientID"))
if mibBuilder.loadTexts: hwCliClientEntry.setStatus('current')
if mibBuilder.loadTexts: hwCliClientEntry.setDescription(' CLI user parameters configuration table entity. ')
hwCliClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: hwCliClientID.setStatus('current')
if mibBuilder.loadTexts: hwCliClientID.setDescription(' Client ID(1..5). ')
hwCliClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCliClientUserName.setStatus('current')
if mibBuilder.loadTexts: hwCliClientUserName.setDescription(' User name of client. ')
hwCliClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("telnet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCliClientType.setStatus('current')
if mibBuilder.loadTexts: hwCliClientType.setDescription(' Type of client(1:serial,2:telnet). ')
hwCliClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCliClientIp.setStatus('current')
if mibBuilder.loadTexts: hwCliClientIp.setDescription(' The IP address of client. ')
hwCliClientLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCliClientLoginTime.setStatus('current')
if mibBuilder.loadTexts: hwCliClientLoginTime.setDescription(' Login time of Client. ')
hwCliClientAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnect", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCliClientAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwCliClientAdminStatus.setDescription(' admin status of client, can disconnect client. ')
hwDevCompatibleTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 3, 11))
hwCompatibleSysOid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 11, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCompatibleSysOid.setStatus('current')
if mibBuilder.loadTexts: hwCompatibleSysOid.setDescription(' The compatible SYSOID of new network element. ')
hwCompatibleVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCompatibleVersion.setStatus('current')
if mibBuilder.loadTexts: hwCompatibleVersion.setDescription(' The compatible version of new network element. ')
hwCompatibleVRCB = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 11, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCompatibleVRCB.setStatus('current')
if mibBuilder.loadTexts: hwCompatibleVRCB.setDescription(' The compatible VRCB of new network element. ')
hwCompatibleProductName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 3, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCompatibleProductName.setStatus('current')
if mibBuilder.loadTexts: hwCompatibleProductName.setDescription(' The compatible product name of new network element. ')
mibBuilder.exportSymbols("HUAWEI-DEVICE-MIB", hwAvgDuty1min=hwAvgDuty1min, hwBufferModuleIndex=hwBufferModuleIndex, hwFlashDevSize=hwFlashDevSize, hwCliUserPassword=hwCliUserPassword, hwCompatibleVRCB=hwCompatibleVRCB, hwFlashDevStatus=hwFlashDevStatus, hwCliClientIp=hwCliClientIp, hwNmsClass=hwNmsClass, hwSysIpMask=hwSysIpMask, hwFlashDevEntry=hwFlashDevEntry, hwFrameLinkRowStatus=hwFrameLinkRowStatus, hwPortAdminResult=hwPortAdminResult, hwPortAdminStatus=hwPortAdminStatus, hwFrameLinkEntry=hwFrameLinkEntry, hwFrameLinkLeftSlot=hwFrameLinkLeftSlot, hwSubslotEntry=hwSubslotEntry, hwFrameAdminResultTrap=hwFrameAdminResultTrap, hwMemoryDevFree=hwMemoryDevFree, hwCpuDevDuty=hwCpuDevDuty, hwFlashDevEraseTime=hwFlashDevEraseTime, hwBoardAttrTable=hwBoardAttrTable, hwPortAdminResultTrap=hwPortAdminResultTrap, hwSubSlotAdminResultTrap=hwSubSlotAdminResultTrap, hwFrameIndex=hwFrameIndex, hwSlotRowStatus=hwSlotRowStatus, hwDevGeneralTraps=hwDevGeneralTraps, hwSubslotVersion=hwSubslotVersion, hwFrameLinkIndex=hwFrameLinkIndex, hwNmsSetCommunity=hwNmsSetCommunity, hwBoardAttrEntry=hwBoardAttrEntry, hwDev=hwDev, hwPortType=hwPortType, hwSysVersion=hwSysVersion, hwSlotPhySerialNum=hwSlotPhySerialNum, hwMemoryDevModuleIndex=hwMemoryDevModuleIndex, hwSubslotTable=hwSubslotTable, hwAlarmOcurTime=hwAlarmOcurTime, hwBufferCurrentUsed=hwBufferCurrentUsed, hwNarrowBoard=hwNarrowBoard, hwMemoryDevTable=hwMemoryDevTable, hwFlashDevFree=hwFlashDevFree, hwPortTable=hwPortTable, hwSubslotRowStatus=hwSubslotRowStatus, hwSlotOperStatus=hwSlotOperStatus, hwPortIndex=hwPortIndex, hwCliClientUserName=hwCliClientUserName, hwCpuDevIndex=hwCpuDevIndex, hwFrameLinkLeftFrame=hwFrameLinkLeftFrame, hwMemoryDevRawSliceUsed=hwMemoryDevRawSliceUsed, hwSubslotAdminStatus=hwSubslotAdminStatus, hwSubslotIndex=hwSubslotIndex, hwCliClientType=hwCliClientType, hwCliClientAdminStatus=hwCliClientAdminStatus, hwSubslotAdminResult=hwSubslotAdminResult, hwDevTraps=hwDevTraps, hwCliUserDecr=hwCliUserDecr, hwFrameEntry=hwFrameEntry, hwSlotDesc=hwSlotDesc, hwPortEntry=hwPortEntry, hwNmsIndex=hwNmsIndex, hwFrameLinks=hwFrameLinks, hwFrameLinkRightSlot=hwFrameLinkRightSlot, hwFrameLinkTable=hwFrameLinkTable, hwSubslotOperStatus=hwSubslotOperStatus, hwFrameLinkRightFrame=hwFrameLinkRightFrame, hwBoardCurrent=hwBoardCurrent, hwMemoryDev=hwMemoryDev, hwCliClientLoginTime=hwCliClientLoginTime, hwFlashDev=hwFlashDev, PYSNMP_MODULE_ID=hwDev, hwFrameType=hwFrameType, hwSlotType=hwSlotType, hwFrameLinkLeftPort=hwFrameLinkLeftPort, hwCliClientEntry=hwCliClientEntry, hwBoardAulaw=hwBoardAulaw, hwPortSpeed=hwPortSpeed, hwFrameLinkNextIndex=hwFrameLinkNextIndex, hwNmsSnmpPort=hwNmsSnmpPort, hwSubSlots=hwSubSlots, hwNmsTrapPort=hwNmsTrapPort, hwCliClientID=hwCliClientID, hwAlarmSerialIndex=hwAlarmSerialIndex, hwCompatibleSysOid=hwCompatibleSysOid, hwFrameAdminResult=hwFrameAdminResult, hwFrameTable=hwFrameTable, hwCliUserLogins=hwCliUserLogins, hwCliUserParaTable=hwCliUserParaTable, hwSlotPcbVersion=hwSlotPcbVersion, hwNmsIp=hwNmsIp, hwSlotTable=hwSlotTable, hwSystemPara=hwSystemPara, hwAlarmEntry=hwAlarmEntry, hwAlarmInfo=hwAlarmInfo, hwDevTrapVbOids=hwDevTrapVbOids, hwSlotAdminStatus=hwSlotAdminStatus, hwFlashDevTable=hwFlashDevTable, hwFrameLinkRightSubSlot=hwFrameLinkRightSubSlot, hwCliClientTable=hwCliClientTable, hwNmsMask=hwNmsMask, hwBufferTable=hwBufferTable, hwFrameLinkOperStatus=hwFrameLinkOperStatus, hwSlotAdminResultTrap=hwSlotAdminResultTrap, hwSlotWorkMode=hwSlotWorkMode, hwFrameAdminStatus=hwFrameAdminStatus, hwFlashDevIndex=hwFlashDevIndex, hwFrameLinkNumber=hwFrameLinkNumber, trapObjectIdValue=trapObjectIdValue, hwMemoryDevFail=hwMemoryDevFail, hwMemoryDevFailNoMem=hwMemoryDevFailNoMem, hwNmsParaTable=hwNmsParaTable, hwSlotVersion=hwSlotVersion, hwAvgDuty5min=hwAvgDuty5min, hwNmsGetCommunity=hwNmsGetCommunity, hwCliUserName=hwCliUserName, hwCliUserParaEntry=hwCliUserParaEntry, hwCliUserLevel=hwCliUserLevel, hwCompatibleVersion=hwCompatibleVersion, hwMemoryDevLargestFree=hwMemoryDevLargestFree, hwNmsStatus=hwNmsStatus, hwCliUserMgmt=hwCliUserMgmt, hwFrameDesc=hwFrameDesc, hwFrameLinkRightPort=hwFrameLinkRightPort, hwBufferEntry=hwBufferEntry, hwSubSlotDesc=hwSubSlotDesc, hwFrameRowStatus=hwFrameRowStatus, hwBufferSize=hwBufferSize, hwNmsMaintainMode=hwNmsMaintainMode, hwSysTime=hwSysTime, hwBufferCurrentTotal=hwBufferCurrentTotal, hwCompatibleProductName=hwCompatibleProductName, hwNmsName=hwNmsName, hwSubslotType=hwSubslotType, hwSlotAdminResult=hwSlotAdminResult, hwPortOperStatus=hwPortOperStatus, hwMemoryDevSize=hwMemoryDevSize, hwDevCompatibleTable=hwDevCompatibleTable, hwSlotIndex=hwSlotIndex, hwSysIpAddr=hwSysIpAddr, hwSlotConf=hwSlotConf, hwSlots=hwSlots, hwCpuDevEntry=hwCpuDevEntry, hwSubslotPorts=hwSubslotPorts, hwPortDesc=hwPortDesc, hwFlashDevEraseStatus=hwFlashDevEraseStatus, hwAlarmType=hwAlarmType, hwFrameOperStatus=hwFrameOperStatus, hwSlotEntry=hwSlotEntry, hwCliUserRowStatus=hwCliUserRowStatus, hwMemoryDevEntry=hwMemoryDevEntry, hwFrameLinkLeftSubSlot=hwFrameLinkLeftSubSlot, hwNmsParaEntry=hwNmsParaEntry, hwBoardImpedance=hwBoardImpedance, hwAlarmTable=hwAlarmTable, hwCpuDevTable=hwCpuDevTable)
