#
# PySNMP MIB module LOOPBACK-DETECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LOOPBACK-DETECT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ObjectIdentity, Integer32, Counter64, NotificationType, Counter32, ModuleIdentity, Unsigned32, IpAddress, Gauge32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ObjectIdentity", "Integer32", "Counter64", "NotificationType", "Counter32", "ModuleIdentity", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
swLoopDetectMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 41))
if mibBuilder.loadTexts: swLoopDetectMIB.setLastUpdated('1003010000Z')
if mibBuilder.loadTexts: swLoopDetectMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swLoopDetectMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swLoopDetectMIB.setDescription('The structure of loopback detection management for the proprietary enterprise.')
swLoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 1))
swLoopDetectInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 2))
swLoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 3))
swLoopDetectNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 10))
swLoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectAdminState.setDescription('This object indicates the loopback detection status for the system.')
swLoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectInterval.setDescription('This object indicates the interval value. The range is from 1 to 32767 seconds.')
swLoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectRecoverTime.setDescription('This object indicates the recover time. The range is from 60 to 1000000. The value of 0 disables the recover function.')
swLoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectMode.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectMode.setDescription('This object indicates the loopback detection mode for the system.')
swLoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop-detected", 2), ("loop-cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectTrapMode.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectTrapMode.setDescription('This object indicates the loopback detection trap mode for the system.')
swLoopDetectLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectLogState.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectLogState.setDescription('This object indicates the LBD log state.')
swLoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1), )
if mibBuilder.loadTexts: swLoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by port.')
swLoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1, 1), ).setIndexNames((0, "LOOPBACK-DETECT-MIB", "swLoopDetectPortIndex"))
if mibBuilder.loadTexts: swLoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by port.')
swLoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swLoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swLoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoopDetectPortLoopVLAN.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortLoopVLAN.setDescription('This object indicates the VLAN list that has detected a loopback.')
swLoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 41, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swLoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swLoopDetectNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 0))
swPortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 0, 1)).setObjects(("LOOPBACK-DETECT-MIB", "swLoopDetectPortIndex"))
if mibBuilder.loadTexts: swPortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swPortLoopOccurred.setDescription('The trap is sent when a port loop occurs.')
swPortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 0, 2)).setObjects(("LOOPBACK-DETECT-MIB", "swLoopDetectPortIndex"))
if mibBuilder.loadTexts: swPortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swPortLoopRestart.setDescription('The trap is sent when a port loop restarts after the interval time.')
swVlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 0, 3)).setObjects(("LOOPBACK-DETECT-MIB", "swLoopDetectPortIndex"), ("LOOPBACK-DETECT-MIB", "swVlanLoopDetectVID"))
if mibBuilder.loadTexts: swVlanLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swVlanLoopOccurred.setDescription('The trap is sent when a Port with a VID loop occurs.')
swVlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 0, 4)).setObjects(("LOOPBACK-DETECT-MIB", "swLoopDetectPortIndex"), ("LOOPBACK-DETECT-MIB", "swVlanLoopDetectVID"))
if mibBuilder.loadTexts: swVlanLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swVlanLoopRestart.setDescription('The trap is sent when a Port with a VID loop restarts after the interval time.')
swLoopDetectNotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 1))
swVlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 41, 10, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swVlanLoopDetectVID.setStatus('current')
if mibBuilder.loadTexts: swVlanLoopDetectVID.setDescription('This object indicates the VID that has detected a loopback.')
mibBuilder.exportSymbols("LOOPBACK-DETECT-MIB", swLoopDetectMIB=swLoopDetectMIB, swLoopDetectPortEntry=swLoopDetectPortEntry, swLoopDetectPortIndex=swLoopDetectPortIndex, swLoopDetectPortLoopVLAN=swLoopDetectPortLoopVLAN, swPortLoopOccurred=swPortLoopOccurred, swLoopDetectNotifyPrefix=swLoopDetectNotifyPrefix, swPortLoopRestart=swPortLoopRestart, swLoopDetectPortState=swLoopDetectPortState, swLoopDetectPortLoopStatus=swLoopDetectPortLoopStatus, swLoopDetectNotify=swLoopDetectNotify, swVlanLoopDetectVID=swVlanLoopDetectVID, swLoopDetectRecoverTime=swLoopDetectRecoverTime, swLoopDetectMode=swLoopDetectMode, swLoopDetectAdminState=swLoopDetectAdminState, swLoopDetectInfo=swLoopDetectInfo, swLoopDetectPortMgmt=swLoopDetectPortMgmt, swVlanLoopRestart=swVlanLoopRestart, swLoopDetectCtrl=swLoopDetectCtrl, swLoopDetectNotificationBidings=swLoopDetectNotificationBidings, swVlanLoopOccurred=swVlanLoopOccurred, swLoopDetectInterval=swLoopDetectInterval, PYSNMP_MODULE_ID=swLoopDetectMIB, swLoopDetectPortTable=swLoopDetectPortTable, swLoopDetectTrapMode=swLoopDetectTrapMode, swLoopDetectLogState=swLoopDetectLogState)
