#
# PySNMP MIB module BTI-7000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BTI-7000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
bti7000, btiModules = mibBuilder.importSymbols("BTI-MIB", "bti7000", "btiModules")
NotifCodeType, OaType, AmdType, InitializeCmd, MirrorConfigType, OcnType, LoopbackType, CondReportType, AdminStatus, AmdPortType, StsnType, VcnType, PMIntervalType, OperStatus, UpgradeCompleteStage, InetAddress, CpType, XcvrProtocolType, LldpChassisIdSubtype, HoursAndMinutes, PvxPortType, LldpChassisId, PMMontype, XcvrType, PowerFeedModeType, ShelfConfigType, MediaRateType, EnvNotifCodeType, DesignatedRouterPriority, ProtSwOpCmd, PvxL1PortType, SlotType, DuplexModeType, SwitchIdxType, LldpPortIdSubtype, ProtectionStatusType, PassivePortType, OdunType, PMValidity, AreaID, XCType, LldpPortId, NotifObjectType, InetAddressType, ProtSwEvtType, ShelfType, CondSeverity, FiberType, CondServiceAffecting, SyncSwEvtType, FixedX10, OperStatQlfr, BERType, WDMGrid, Unsigned64, TimeZone, FixedX100, StmnType = mibBuilder.importSymbols("BTI-TC-MIB", "NotifCodeType", "OaType", "AmdType", "InitializeCmd", "MirrorConfigType", "OcnType", "LoopbackType", "CondReportType", "AdminStatus", "AmdPortType", "StsnType", "VcnType", "PMIntervalType", "OperStatus", "UpgradeCompleteStage", "InetAddress", "CpType", "XcvrProtocolType", "LldpChassisIdSubtype", "HoursAndMinutes", "PvxPortType", "LldpChassisId", "PMMontype", "XcvrType", "PowerFeedModeType", "ShelfConfigType", "MediaRateType", "EnvNotifCodeType", "DesignatedRouterPriority", "ProtSwOpCmd", "PvxL1PortType", "SlotType", "DuplexModeType", "SwitchIdxType", "LldpPortIdSubtype", "ProtectionStatusType", "PassivePortType", "OdunType", "PMValidity", "AreaID", "XCType", "LldpPortId", "NotifObjectType", "InetAddressType", "ProtSwEvtType", "ShelfType", "CondSeverity", "FiberType", "CondServiceAffecting", "SyncSwEvtType", "FixedX10", "OperStatQlfr", "BERType", "WDMGrid", "Unsigned64", "TimeZone", "FixedX100", "StmnType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Gauge32, IpAddress, NotificationType, Unsigned32, iso, Integer32, MibIdentifier, ModuleIdentity, Counter32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "iso", "Integer32", "MibIdentifier", "ModuleIdentity", "Counter32", "ObjectIdentity", "TimeTicks")
TextualConvention, DisplayString, DateAndTime, RowStatus, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime", "RowStatus", "TruthValue", "MacAddress")
bti7000Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 18070, 1, 3))
bti7000Mib.setRevisions(('2012-10-09 12:00', '2012-08-29 12:00', '2012-02-10 12:00', '2011-09-26 12:00', '2011-04-26 12:00', '2011-03-28 12:00', '2011-02-25 12:00', '2010-09-17 12:00', '2010-08-06 12:00', '2010-06-18 12:00', '2010-02-12 12:00', '2009-01-19 12:00', '2008-12-19 12:00', '2008-10-10 12:00', '2008-05-30 12:00', '2007-09-14 12:00', '2007-07-16 12:00', '2007-03-09 12:00', '2006-08-25 12:00', '2005-12-05 12:00', '2005-07-25 12:00', '2005-01-07 12:00', '2004-09-23 12:00', '2004-09-09 14:34', '2004-04-14 22:35', '2003-12-01 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bti7000Mib.setRevisionsDescriptions(('MIB Updates for BTI 7000 Rel 10.3.0: - added ethIntfLldpAdminStatus', 'MIB Updates for BTI 7000 Rel 10.2.0: - added missing import of LoopbackType', 'MIB Updates for BTI 7000 Rel 9.2.0: - neAutoDeProv object status changed to obsolete - in support of Remote ID feature, added new objects oaRemoteId xcvrRemoteId, passivePortRemoteId, ocnRemoteId, stmnRemoteId, geRemoteId, feRemoteId, fcRemoteId, ethIntfRemoteId, briRemoteId - added new xcvrLoopbackType object - added new value oprTerminalLpbk to xcvrLpbkOpCmd object - added new tl1LogTable and latestTl1LogNum object - deprecated pvxL2IntfIngressFiltering field in pvxL2IntfTable - added new objects pvxL2IntfBcastLimit, pvxL2IntfMcastLimit, and pvxL2IntfDlfLimit - cpDbApplyResultEvt trap status changed to obsolete - added new traps xcvrLFCond and xcvrLFClear', 'MIB Updates for BTI 7000 Rel 9.1.0: - added opticalLayer branch for all dynamic optical layer managament objects - added slotInvDataTable - expanded value range of cpShelfIdx and cpSlotIdx to support provisioning of D40MD modules - added cpDegradeCond and cpDegradeClear traps - added tl1LogTable', 'MIB Updates for BTI 7000 Rel 8.2.0: - added eptree and evptree to pvxEthSrvcType to support ETREE services - added pvxSrvsUNIForwarding to PvxServiceUNIEntry to support ETREE services - added attributes to the PVXSwitchModule and PVXSwitchMember tables to support stacking - port numbering changes on multiple tables: Static Multicast, Static Unicast, Multicast Group, MSTPXstTable - added pvxLGMaxLinks to support Active/Standby LAG - added service-Map to pvxClassMapType to support per-flow services - added pvxSrvcUNIServiceMap and pvxSrvcUNIFilterSequence to support per-flow services - added pvxSrvcUNIEFPSDEnabled to support EFPSD - added new tables pvSLAMeasurementProfileTable, pvxEServiceSlaCrntPMTable, pvxEServiceSlaHistPMTable, pvxEServieSlaPMThresholdTable, pvxSLAThroughputTestTable, pvxSLAMsmtInitiatorDBTable, and pvxSLAMsmtResponderDBTable to support the Y.1731 SLA Measurement feature - added trap pvxSrvcUNIEFPSDLocalEFPSDStateChangeEvent', 'MIB Updates for BTI 7000 Rel 8.1.4: - added support for sftp protocol for use with the software upgrade and database backup/restore operations.', 'MIB Updates for BTI 7000 Rel 8.1.3: - added two new traps for NTP. One for indicating timing ref change and the other for when NTP updates the system date/time.', 'MIB Updates for BTI 7000 Rel 8.1.1: - added snmpTrapRcvTable for administration of configured recipients of traps generated by the SNMP agent', 'MIB Updates for BTI 7000 Rel 8.1.0: - changed range of objects representing a slot number to support new 7200 shelf which has 20 slots - added neFPDetect object to control Pack Missing alarms - changed status of shelfInvConfig, shelfProvConfig and shelfDiscConfig objects and shelfConfigurationMismatchCond and shelfConfigurationMismatchClear notifications to deprecated - increased size range of vcgTimeSlotIndices string to support longer list of indices - added new UAS PM objects in SONET OC-n (ocn), SDH STM-N (stmn), Gigabit Ethernet (ge), Fiber Channel (fc), ethernet Layer 1 (ethL1IF) - added ospfGeneralTable, ospfIfTable, ospfLsdbTable and ospfNbrTable tables for management of OSPF - added slotInvCoolingUnitMismatchCond and slotInvCoolingUnitMismatchClear notifications', 'MIB Updates for BTI 7000 Rel 7.3.2: - added envCondAttrTable for managing environmental alarms - added all environmental alarm traps under envCondNotifications branch', "MIB Updates for BTI 7000 Rel 7.3.0: - added objects pluggableInvWavelengthMin, pluggableInvWavelengthMax and pluggableInvWavelengthSpacing in support of tuneable pluggables - added ocn, stmn, and ols versions of 'WavelengthNotAchievable' traps - added ocnTransparencyChannel and stsnTransparencyChannel objects to support DCC configuration on Muxponders - added values sdSdi through dvbAsi to SYNTAX of briProtocol - modified range of the IntervalType index field of all historical PM tables from 1..32 to 1..96 in accordance with increased binning support - added objects to support new BER and average BER PM stats in transceiver (XCVR), SONET OC-n (ocn), SDH STM-N (stmn), and ethernet Layer 1 (ethL1IF) curent and historical PM tables - added objects to support 64-bit versions of NBITCR and NBYTCR stats in transceiver (XCVR), SONET OC-n (ocn), SDH STM-N (stmn), and ethernet Layer 1 (ethL1IF) current and historical PM tables - added gcc0ConfigTable and ipExtInterfaceTable - marked the applyRestore value of the DbBackupAndRestoreCmd textual convention as obsolete - added cpSynchronizationPrimRefBasicSSM and cpSynchronizationSecRefBasicSSM objects to support synchronization status messages - added cpSynchronizationSwitchEvt trap - added briTxLockingCond and briTxLockingClear traps to notify of when Bit-rate-independent facilities on the Muxponder are in the process of locking.", 'MIB Updates for BTI 7000 Rel 7.2.0: - added all objects under ntpClient branch for management of Network Time Protocol - added ocnDCCTransparency and stmnDCCTransparency objects - added values vc42v, sts1c6v and sts3c2v to vcgType object - added odunTable table for management of ODU-N facilities on Muxponder circuit packs - added briTable table for management of Bit Rate Independent facilities on Muxponder circuit packs - replaced references to SwitchIdxType TC with an integer range of 1..11 - added btiCrntPMTable and briHistPMTable for retrieval of current and historical PMs on BRI facilities - added condObjectType and condCodeType objects to all condition Trap varbind lists, added evtDescription, evtObjectType and evtCodeType objects to all event Trap varbind lists, added actCondObjectType and actCondCodeType objects to actCondTable, and added actAlarmObjectType and actAlarmCodeType objects to actAlarmTable to support enhanced event/alarm/condition information feature. - added briLpbkOpTable for BRI facility loopback management - added new objects pvxL2IntfIsUNI to pvxL2IntfTrustIncomingDscp in pvxL2IntfTable - changed DEFVAL value of pvxL2IntfType from cep to pnp - added setErrorInfo objects for reporting of error information in response to failed set requests - added condNotifCtrlTable and eventNotifState objects for management of configurable alarm severity feature - added new PVX Ethernet Interface Traps olsLossOfFrameCond to olsOTUTrailTraceMismatchClear - added new set of Traps under odunCondNotifications branch - added new set of Traps under briCondNotifications branch - added new set of Traps under ntpcCondNotifications branch', 'MIB Updates for BTI 7000 Rel 7.1.2: - corrected OID for slotInvUpgradeStage, slotInvUpgradeResult, and slotInvPackUSI objects - corrected DEFVAL clause for shelfPowerFeedA, shelfPowerFeedB - added new values to ocnLineMapping/stmnLineMapping objects - changed SYNTAX of vcgTimeSlotIndices object - added ethIntMACAddr object - changed ethIntfLineMapping value of none to tenglan - added ethL1IFCrntPMTable, ethL1IFHistPMTable, and ethL1IFPMThresholdTable for performance management of Ethernet Layer 1 interfaces on PVX cards - corrected MAX-ACCESS of all protection entity objects in XC tables to read-create - replaced otunProtGrpTable and otunProtSwOpTable with ocnProtGrpTable, stmnProtGrpTable, ocnProtSwOpTable and stmnProtSwOpTable - added ocnProtSwitchEvt and stmnProtSwitchEvt traps - added ethL1IFStatusChangeEvt and ethL1IFTcaEvt traps - removed all unused otun and odun related objects', 'MIB Updates for BTI 7000 Rel 7.1.1: - added shelfInvUSI, slotInvPackUSI, and pluggableInvUSI objects - added shelfPowerFeedA, shelfPowerFeedB objects - removed NBITCR, NBYTCR from PM Threshold tables for XCVRx, OCn, and STMn - added EthIntfTable and pvxL2IntfTable for management of Ethernet Layer 1 and Layer 2 interfaces respectively on PVX card - added pvxL2IFCrntPMTable, pvxL2IFHistPMTable, and pvxL2IFPMThresholdTable for performance management of Ethernet Layer 2 interfaces on PVX cards - added the condDescription varbind to all condition raise and clear traps - added varbinds to shelfInvPlugin, slotInvPlugin and pluggableInvPlugin event traps to provide detailed data for the newly plugged in inventory item - added ocnOTNPayloadMismatchCond and stmnOTNPayloadMismatchCond condition traps - added new condition traps under ethPortCondNotifications and pvxL2PortCondNotifications OID branches', 'MIB Updates for BTI 7000 Rel 7.1.0: - replaced references to Netstender with BTI 7000 - added SDBERTh and Trace-related objects to xcvrTable - added initialization objects for all PM value objects - added TOHTransparency and LineMapping objects to ocnTable and stmnTable - added GFPMode and FlowControl objects to geTable - modified vcgTable to allow creation of row entries - added fcTable for Fiber Channel facilities on MXP cards - added odunTable to support Traps on MXP cards - added SUPPLY2, and OTU PMs to XCVR PM Tables - added SONET Line layer, OTU, and FEC PMs to OC-N PM Tables - added SDH MS layer, OTU, and FEC PMs to STM-N PM Tables - added additional Layer 2 PMs to GE PM Tables - added Fiber Channel PM Tables - added several new Traps for TPR and 10GMXP packs', 'MIB Updates for Netstender Rel 6.2.0: Completion of SNMP coverage for all cards including all Wavelength Conversion, 2.5G Muxponder and AMD circuit packs. Addition of full management support including Muxponder facilities, protocol PMs, synchronization management, and database change messages. New and expanded tables and other objects include: - amdTable - ocnTable - stsnTable - stmnTable - vcnTable - geTable - feTable - vcgTable - serialTable - xcvrCrntPMTable - xcvrHistPMTable - xcvrPMThresholdTable - amdCrntPMTable - amdHistPMTable - ocnCrntPMTable - ocnHistPMTable - ocnPMThresholdTable - stsnCrntPMTable - stsnHistPMTable - stsnPMThresholdByPortTable - stmnCrntPMTable - stmnHistPMTable - stmnPMThresholdTable - vcnCrntPMTable - vcnHistPMTable - vcnPMThresholdByPortTable - geCrntPMTable - geHistPMTable - gePMThresholdTable - vcgXCTable - ocnLpbkOpTable - stsnProtSwOpTable - stmnLpbkOpTable - vcnProtSwOpTable - geLpbkOpTable - cpSynchronizationTable - networkNeighborTable - Threshold crossing alert notifications and supporting objects - Database change messages and supporting objects', 'MIB updates for Netstender Rel. 6.1: Added tables and traps in support of new 2.5G Muxponder card. - ocnTable, stsnTable, stmnTable, vcnTable, geTable - stsnProtSwitchEvt, vcnProtSwitchEvt - all condition notifications under ocnCondNotifications, stsnCondNotifications, stmnCondNotifications, vcnCondNotifications, geCondNotifications - shelfInvAssemblyPEC object marked obsolete', 'MIB Updates for Netstender Rel 5.1.1: Addition of full SNMP support for management of inventory, equipment, optical amplifiers, 2.5G wavelength conversion transceivers and passive cards. New and expanded tables and other objects include: - networkElement group - shelfInvTable - slotInvTable - pluggableInvTable - shelfTable - cpTable - oaTable - xcvrTable - passivePortTable - oscTable - netMgmtTable - oaCrntPMTable - oaHistPMTable - xcvrCrntPMTable - xcvrHistPMTable - xcvrXCTable - xcvrProtGrpTable - commitESOpTable - cpRestartOpTable - oaOOBRSDOpTable - xcvrLpbkOpTable - xcvrProtSwOpTable - dataCommsPingTable - addition of several Traps and supporting objects under eventNotifications branch', 'MIB Updates for Netstender Rel 5.1: - generalized naming of SFP Inventory related objects and notifications to allow for inclusion of XFPs as well as SFPs - added Traps for Forced Switch, Lockout and Temp conditions - added read-only support for Optical Amplifer Performance Monitoring - removed obsolete Red and Blue type OA notifications', 'MIB Updates for Netstender Rel 4.1: - changed actCondTable Index fields MAX-ACCESS to read-only - added support for new multi-shelf, AMD, and XCVR Traps - added TL1 IP Lockout, DspCommCond and Unsupported Pack traps - marked some unused shelf-related Traps as obsolete', 'MIB Updates for Netstender Rel 3.1.1: - added support for TL1 User Lockout Traps - added actCondTable to support retrieval of active conditions on Netstender - updated Contact Info in Module Identity', 'MIB Updates for Netstender Rel 3.1: - changed Shutdown terminology to Safety for OBR Traps - added sfpInvTable, xcvrTable and new Traps for SFPs', 'MIB Updates for Netstender Rel 3.0: - generalized object names to Netstender to support both Netstender 2060 and Netstender 1030 - changed name of file from net2060.my to netstender.my - changed name of MIB from NETSTENDER-2060-MIB to NETSTENDER-MIB - eliminated unnecessary textual conventions - redefined several enumerations as textual conventions and moved to BTI-TC-MIB - corrected the descriptions for several objects', 'MIB Updates for Netstender 2060 Rel 2.2: - added new Single Channel Booster Amp card types and OA type - changed OIDs of SNMPv2c notifications to make them reverse mapable: SNMPv2c -> SNMPv1 -> SNMPv2c - defined new OA Back Reflection Shutdown notifications', 'MIB Updates for Netstender 2060 Rel 2.1.3: - added new supported card types and optical amplifier types - added new Red and Blue type objects to OA Table - defined new Red and Blue type OA notifications - corrected the descriptions for several notifications', 'The initial version of this MIB module, released with the Netstender 2060 Rel 2.1 product.',))
if mibBuilder.loadTexts: bti7000Mib.setLastUpdated('201210091200Z')
if mibBuilder.loadTexts: bti7000Mib.setOrganization('BTI Systems Inc.')
if mibBuilder.loadTexts: bti7000Mib.setContactInfo('Technical Support BTI Systems Inc. 200-1000 Innovation Drive Kanata, Ontario, Canada, K2K 3E7 (613) 287-1700 support@btisystems.com')
if mibBuilder.loadTexts: bti7000Mib.setDescription('The external MIB definitions for the BTI 7000 series products.')
objects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1))
networkElement = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2))
equipment = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3))
facilities = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4))
dataComms = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6))
conditions = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7))
administration = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8))
connections = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9))
protection = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10))
operations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11))
synchronization = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12))
topology = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13))
pvxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14))
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15))
opticalLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16))
pvxBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1))
pvxNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4))
mstpNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2))
eventNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1))
conditionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2))
dbChangeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3))
notificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4))
notificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5))
evtNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1))
neEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 2))
shelfInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3))
slotInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4))
shelfEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5))
cpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6))
oaEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7))
dataCommsEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8))
pluggableInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9))
xcvrEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10))
adminEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 11))
amdEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12))
ocnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13))
stsnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14))
stmnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15))
vcnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16))
geEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17))
fcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18))
ethPortEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21))
pvxL2EvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22))
mstpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23))
briEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24))
cpSynchronizationEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25))
pvxESrvcBWPrflEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 26))
pvxESrvcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 27))
pvxERPSSrvcNNIEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 28))
pvxERPSSrvcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29))
pvxSlaMsmtEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 30))
ntpcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31))
pvxSUniEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 32))
olEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33))
pvxLldpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34))
neCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 1))
shelfInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2))
slotInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3))
shelfCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4))
cpCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5))
oaCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6))
dataCommsCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7))
pluggableInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8))
xcvrCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9))
adminCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10))
amdCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11))
ocnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12))
stsnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13))
stmnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14))
vcnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15))
geCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16))
fcCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17))
ethPortCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20))
pvxL2PortCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21))
mstpCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22))
lagCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23))
odunCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24))
briCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25))
ntpcCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26))
envCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27))
olCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28))
erpsCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29))
swMemberCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30))
condNotifCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1))
eventNotifCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2))
neOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1))
shelfInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 2))
slotInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 3))
shelfOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 4))
cpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5))
oaOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6))
dataCommsOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7))
pluggableInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8))
xcvrOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9))
adminOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 10))
amdOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 11))
ocnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12))
stsnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13))
stmnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14))
vcnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15))
geOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16))
fcOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17))
briOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18))
neSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSWVersion.setStatus('current')
if mibBuilder.loadTexts: neSWVersion.setDescription('The software version that is active on the NE currently.')
neNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNum.setStatus('current')
if mibBuilder.loadTexts: neNum.setDescription('This is a unique network element number used to identify the network element and to differentiate it from other NEs in the management domain.')
neSiteNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSiteNum.setStatus('current')
if mibBuilder.loadTexts: neSiteNum.setDescription('This is a network element site number used to uniquely identify the site of the NE and to differentiate it from other NE sites in the management domain.')
neDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDateAndTime.setStatus('current')
if mibBuilder.loadTexts: neDateAndTime.setDescription('The current system date and time, without time zone information.')
neTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 5), TimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimeZone.setStatus('current')
if mibBuilder.loadTexts: neTimeZone.setDescription('The time zone in which the local time of this system is to be reported. Typically, the time zone is the one in which the system is physically located.')
neAutoDST = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDST.setStatus('current')
if mibBuilder.loadTexts: neAutoDST.setDescription('A setting that indicates whether the system time should be updated automatically in accordance with the daylight savings time characteristics of the current time zone.')
neGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neGateway.setStatus('current')
if mibBuilder.loadTexts: neGateway.setDescription('The default IP routing gateway for network management interfaces on the node. If not specified, this object returns a value of 0.0.0.0.')
neSecGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSecGateway.setStatus('current')
if mibBuilder.loadTexts: neSecGateway.setDescription('The secondary IP routing gateway for network management interfaces on the node. If not specified, this object returns a value of 0.0.0.0.')
neActiveGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neActiveGateway.setStatus('current')
if mibBuilder.loadTexts: neActiveGateway.setDescription('The IP routing gateway that is currently active on the node. If no gateway is active, this object returns a value of 0.0.0.0.')
neAutoProv = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("autoEnabled", 3), ("autoProvOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProv.setStatus('current')
if mibBuilder.loadTexts: neAutoProv.setDescription('A setting that specifies if automatic provisioning of equipment and facilities is enabled. If automatic provisioning is enabled, this object indicates the default administration status. The possible values include: - enabled: Applicable entities are auto provisioned with the initial state enabled. - disabled: Applicable entities are auto provisioned with the initial state disabled. - autoEnabled: Applicable entities are auto provisioned and placed into the auto-enabled state. - autoProvOff: Auto provisioning is disabled.')
neAutoDeProv = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 11), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDeProv.setStatus('obsolete')
if mibBuilder.loadTexts: neAutoDeProv.setDescription('The time delay after a physical shelf or circuit pack is removed from the NE before the provisioned entities that are supported by the removed equipment are automatically deprovisioned. If this object is set to a value of 000-00, auto deprovisioning is disabled.')
neAutoEnabledTimer = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 12), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoEnabledTimer.setStatus('current')
if mibBuilder.loadTexts: neAutoEnabledTimer.setDescription('The system wide default auto-enable timer value. This timer specifies a time delay after a provisioned facility in the auto-enabled state is cleared of all alarms before the state of the facility transitions to enabled. The default value can be overridden by a facility-specific value that is specified when the facility is either provisioned or edited in its respective table.')
ntpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13))
ntpClientPollingRate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 1), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientPollingRate.setStatus('current')
if mibBuilder.loadTexts: ntpClientPollingRate.setDescription('The polling rate for the NTP client to periodically fetch the system time from the list of NTP servers configured.')
ntpClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientAuthKey.setStatus('obsolete')
if mibBuilder.loadTexts: ntpClientAuthKey.setDescription('The NTP authentication key ID, if authentication is required.')
ntpClientSyncState = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientSyncState.setStatus('current')
if mibBuilder.loadTexts: ntpClientSyncState.setDescription('Status indicating if the node is in sync with one of the time servers. Either Y or N.')
ntpClientStratum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientStratum.setStatus('current')
if mibBuilder.loadTexts: ntpClientStratum.setDescription('Specifies the stratum of the timer server the node in in sync with.')
ntpClientRefIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientRefIPAddr.setStatus('current')
if mibBuilder.loadTexts: ntpClientRefIPAddr.setDescription('The IP address of the time server the node is in sync with.')
ntpClientAssocTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6), )
if mibBuilder.loadTexts: ntpClientAssocTable.setStatus('current')
if mibBuilder.loadTexts: ntpClientAssocTable.setDescription('A list of NTP servers to poll for the system time. The NTP client then decides which is best clock source.')
ntpClientAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "ntpClientAssocIdx"))
if mibBuilder.loadTexts: ntpClientAssocEntry.setStatus('current')
if mibBuilder.loadTexts: ntpClientAssocEntry.setDescription('The list entry for an NTP server.')
ntpClientAssocIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpClientAssocIdx.setStatus('current')
if mibBuilder.loadTexts: ntpClientAssocIdx.setDescription('The IP address of the NTP server.')
ntpClientAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpClientAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: ntpClientAssocRowStatus.setDescription('Used to control the addition and deletion of entries in the NTP client association table.')
ntpOldTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpOldTimeAndDate.setStatus('current')
if mibBuilder.loadTexts: ntpOldTimeAndDate.setDescription('The date and time of the system before the NTP client updated the system clock.')
ntpNewTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpNewTimeAndDate.setStatus('current')
if mibBuilder.loadTexts: ntpNewTimeAndDate.setDescription('The new system date and time updated by the NTP client.')
ntpRefIP = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpRefIP.setStatus('current')
if mibBuilder.loadTexts: ntpRefIP.setDescription('This the NTP server being used as the clock reference for the system.')
ntpRefStratum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpRefStratum.setStatus('current')
if mibBuilder.loadTexts: ntpRefStratum.setDescription('This is the stratum of the NTP server being used as the clock reference for the system.')
neFPDetect = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFPDetect.setStatus('current')
if mibBuilder.loadTexts: neFPDetect.setDescription('A setting that indicates whether the system should report pack missing alarms.')
neHTAutoShutdown = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neHTAutoShutdown.setStatus('current')
if mibBuilder.loadTexts: neHTAutoShutdown.setDescription('A system wide setting that specifies whether the circuit pack pack high temperature automatic shutdown (HTAS) is enabled. When enabled, the circuit packs which support the HTAS feature will be automatically powered down if the shutdown temperature threshold for that circuit pack is exceeded. There will be alarms indicating that the shutdown has occurred. The default setting is enabled.')
shelfInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: shelfInvTable.setStatus('current')
if mibBuilder.loadTexts: shelfInvTable.setDescription('This table contains one row for every physically detected shelf on the NE. Each row contains a list of attributes that pertain to a physical shelf.')
shelfInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "shelfInvIdx"))
if mibBuilder.loadTexts: shelfInvEntry.setStatus('current')
if mibBuilder.loadTexts: shelfInvEntry.setDescription('The conceptual row object of the shelf inventory table.')
shelfInvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvIdx.setStatus('current')
if mibBuilder.loadTexts: shelfInvIdx.setDescription('The number of the shelf. It is set to 1 for the main shelf, otherwise the object is based on the expansion shelf port on which the shelf is detected, and the number of hops from the main shelf.')
shelfInvExpectedNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedNEName.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpectedNEName.setDescription('The NE name expected by the main shelf to be reported by the expansion shelf as the name of the NE to which it belongs.')
shelfInvExpectedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedIPAddress.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpectedIPAddress.setDescription('The string representation of the NE NMS IP address that is expected by the main shelf to be reported by the expansion shelf as the IP address of the NE to which it belongs.')
shelfInvExpectedShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedShelfNum.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpectedShelfNum.setDescription('The number of the expansion shelf that is expected by the main shelf to be reported by the attached shelf.')
shelfInvExpectedMSISerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedMSISerialNum.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpectedMSISerialNum.setDescription('The serial number of the Main Shelf Interface circuit pack that is expected by the main shelf to be reported by the expansion shelf as the MSI serial number of the NE main shelf to which it belongs.')
shelfInvDiscoveredNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredNEName.setStatus('current')
if mibBuilder.loadTexts: shelfInvDiscoveredNEName.setDescription('The actual NE name reported by the expansion shelf as the name of the NE to which it belongs.')
shelfInvDiscoveredIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredIPAddress.setStatus('current')
if mibBuilder.loadTexts: shelfInvDiscoveredIPAddress.setDescription('The string representation of the actual NE NMS IP address reported by the expansion shelf as the IP address of the NE to which it belongs.')
shelfInvDiscoveredShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredShelfNum.setStatus('current')
if mibBuilder.loadTexts: shelfInvDiscoveredShelfNum.setDescription('The actual number of the expansion shelf reported by the attached shelf.')
shelfInvDiscoveredMSISerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredMSISerialNum.setStatus('current')
if mibBuilder.loadTexts: shelfInvDiscoveredMSISerialNum.setDescription('The actual serial number of the Main Shelf Interface circuit pack reported by the expansion shelf as the MSI serial number of the NE main shelf to which it belongs.')
shelfInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 10), ShelfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvType.setStatus('current')
if mibBuilder.loadTexts: shelfInvType.setDescription('Indicates if the shelf functions as a main shelf or an expansion shelf.')
shelfInvShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvShortName.setStatus('current')
if mibBuilder.loadTexts: shelfInvShortName.setDescription('A concise representation of the shelf brand name.')
shelfInvName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvName.setStatus('current')
if mibBuilder.loadTexts: shelfInvName.setDescription('The full representation of the shelf brand name.')
shelfInvChassisPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvChassisPEC.setStatus('current')
if mibBuilder.loadTexts: shelfInvChassisPEC.setDescription('A string representation of the Product Equipment Code for the shelf chassis alone.')
shelfInvChassisCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvChassisCLEI.setStatus('current')
if mibBuilder.loadTexts: shelfInvChassisCLEI.setDescription('A string representation of the Telcordia Common Language Equipment Identifier for the shelf chassis alone.')
shelfInvAssemblyPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvAssemblyPEC.setStatus('obsolete')
if mibBuilder.loadTexts: shelfInvAssemblyPEC.setDescription('A string representation of the Product Equipment Code for the shelf assembly, which bundles the shelf chassis, shelf interface pack, and cooling unit.')
shelfInvRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvRev.setStatus('current')
if mibBuilder.loadTexts: shelfInvRev.setDescription('The shelf hardware revision number. A value of 0 indicates that the revision is unspecified.')
shelfInvConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 17), ShelfConfigType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvConfig.setStatus('deprecated')
if mibBuilder.loadTexts: shelfInvConfig.setDescription('The shelf configuration with respect to the number of slots for holding replaceable circuit packs. Note: This object is no longer supported as of BTI 7000 Release 8.1.0, and is maintained in the MIB for backwards- compatibility for management of pre-8.1 nodes.')
shelfInvUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvUSI.setStatus('current')
if mibBuilder.loadTexts: shelfInvUSI.setDescription('The Unique Serial Identifier (only for FNC-branded equipment)')
shelfInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvSerialNum.setStatus('current')
if mibBuilder.loadTexts: shelfInvSerialNum.setDescription('The serial number of the unit.')
shelfInvMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvMfgDate.setStatus('current')
if mibBuilder.loadTexts: shelfInvMfgDate.setDescription('The shelf manufacture date in the format YYYY-MM-DD.')
shelfInvMfgLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvMfgLoc.setStatus('current')
if mibBuilder.loadTexts: shelfInvMfgLoc.setDescription('The shelf manufacture location.')
shelfInvTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvTestDate.setStatus('current')
if mibBuilder.loadTexts: shelfInvTestDate.setDescription('The shelf test date in the format YYYY-MM-DD.')
shelfInvTestLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvTestLoc.setStatus('current')
if mibBuilder.loadTexts: shelfInvTestLoc.setDescription('The shelf test location.')
slotInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: slotInvTable.setStatus('current')
if mibBuilder.loadTexts: slotInvTable.setDescription('This table contains one row for every slot on every shelf of the NE in which a circuit pack or other replaceable unit is seated. Each row contains a list of attributes that pertain to the circuit pack within the slot.')
slotInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "slotInvShelfIdx"), (0, "BTI-7000-MIB", "slotInvSlotTypeIdx"), (0, "BTI-7000-MIB", "slotInvSlotIdx"))
if mibBuilder.loadTexts: slotInvEntry.setStatus('current')
if mibBuilder.loadTexts: slotInvEntry.setDescription('The conceptual row object of the slot inventory table.')
slotInvShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvShelfIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvShelfIdx.setDescription('The number of the shelf on which the slot inventory item is detected.')
slotInvSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 2), SlotType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSlotTypeIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvSlotTypeIdx.setDescription('The type of slot that contains the inventory item.')
slotInvSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSlotIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvSlotIdx.setDescription('The number of the slot within the shelf containing the inventory item. The number is from 1 to 20 for regular circuit pack slots. For main shelf interface type slots, the number is set to 0. For 7060/7030/7020 expansion shelf interface and cooling unit type slots, the number is set to 0. For 7200 common communications module type slots, the number is 1 or 2. For 7200 cooling unit type slots, the number is from 1 to 4.')
slotInvSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSWVersion.setStatus('current')
if mibBuilder.loadTexts: slotInvSWVersion.setDescription('The version of the software running on the circuit pack in the given slot.')
slotInvPackShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackShortName.setStatus('current')
if mibBuilder.loadTexts: slotInvPackShortName.setDescription('A concise representation of the name of the circuit pack or unit.')
slotInvPackName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackName.setStatus('current')
if mibBuilder.loadTexts: slotInvPackName.setDescription('The full name of the circuit pack or unit.')
slotInvPackPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackPEC.setStatus('current')
if mibBuilder.loadTexts: slotInvPackPEC.setDescription('The Product Equipment Code for the circuit pack or unit.')
slotInvPackCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackCLEI.setStatus('current')
if mibBuilder.loadTexts: slotInvPackCLEI.setDescription('The Telcordia Common Language Equipment Identifier for the circuit pack or unit.')
slotInvPackSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackSerialNum.setStatus('current')
if mibBuilder.loadTexts: slotInvPackSerialNum.setDescription('The serial number of the unit.')
slotInvPackRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackRev.setStatus('current')
if mibBuilder.loadTexts: slotInvPackRev.setDescription('The circuit pack or unit hardware revision number. A value of 0 indicates that the revision is unspecified.')
slotInvPackMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackMfgDate.setStatus('current')
if mibBuilder.loadTexts: slotInvPackMfgDate.setDescription('The circuit pack manufacture date in the format YYYY-MM-DD.')
slotInvPackMfgLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackMfgLoc.setStatus('current')
if mibBuilder.loadTexts: slotInvPackMfgLoc.setDescription('The circuit pack manufacture location.')
slotInvPackTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackTestDate.setStatus('current')
if mibBuilder.loadTexts: slotInvPackTestDate.setDescription('The circuit pack test date in the format YYYY-MM-DD.')
slotInvPackTestLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackTestLoc.setStatus('current')
if mibBuilder.loadTexts: slotInvPackTestLoc.setDescription('The circuit pack test location.')
slotInvUpgradeStage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 15), UpgradeCompleteStage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvUpgradeStage.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeStage.setDescription('The stage of the circuit pack upgrade process that has been completed.')
slotInvUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeResult.setDescription('Indicates if the identified stage of the circuit pack upgrade process has resulted in success or failure.')
slotInvPackUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackUSI.setStatus('current')
if mibBuilder.loadTexts: slotInvPackUSI.setDescription('The Unique Serial Identifier (only for FNC-branded equipment)')
slotInvTempHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvTempHighTh.setStatus('current')
if mibBuilder.loadTexts: slotInvTempHighTh.setDescription('The circuit pack high temperature threshold.')
slotInvTempShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvTempShutdownTh.setStatus('current')
if mibBuilder.loadTexts: slotInvTempShutdownTh.setDescription('The circuit pack shutdown temperature threshold.')
pluggableInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: pluggableInvTable.setStatus('current')
if mibBuilder.loadTexts: pluggableInvTable.setDescription('This table contains one row for every SFP/XFP or other pluggable present on any circuit pack or other replaceable unit present in the NE. Each row contains a list of attributes that pertain to the detected SFP/XFP.')
pluggableInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "pluggableInvShelfIdx"), (0, "BTI-7000-MIB", "pluggableInvSlotTypeIdx"), (0, "BTI-7000-MIB", "pluggableInvSlotIdx"), (0, "BTI-7000-MIB", "pluggableInvPortIdx"))
if mibBuilder.loadTexts: pluggableInvEntry.setStatus('current')
if mibBuilder.loadTexts: pluggableInvEntry.setDescription('The conceptual row object of the pluggable inventory table.')
pluggableInvShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvShelfIdx.setDescription('The number of the shelf on which the pluggable inventory item resides.')
pluggableInvSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 2), SlotType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvSlotTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvSlotTypeIdx.setDescription('The type of slot containing the pluggable inventory item.')
pluggableInvSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvSlotIdx.setDescription('The number of the slot that contains the pluggable inventory item.')
pluggableInvPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvPortIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvPortIdx.setDescription('The number of the port on the circuit pack that contains the pluggable inventory item.')
pluggableInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sfp", 2), ("xfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvType.setStatus('current')
if mibBuilder.loadTexts: pluggableInvType.setDescription('The type of small form-factor pluggable inventory item.')
pluggableInvPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvPEC.setStatus('current')
if mibBuilder.loadTexts: pluggableInvPEC.setDescription('The Product Equipment Code for the pluggable inventory item.')
pluggableInvCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvCLEI.setStatus('current')
if mibBuilder.loadTexts: pluggableInvCLEI.setDescription('The Telcordia Common Language Equipment Identifier for the pluggable inventory item.')
pluggableInvVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorName.setStatus('current')
if mibBuilder.loadTexts: pluggableInvVendorName.setDescription('The Vendor Name of the pluggable inventory item.')
pluggableInvVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorOUI.setStatus('current')
if mibBuilder.loadTexts: pluggableInvVendorOUI.setDescription('The Vendor IEEE Organizationally Unique Identifier.')
pluggableInvVendorPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorPartNum.setStatus('current')
if mibBuilder.loadTexts: pluggableInvVendorPartNum.setDescription('The Vendor Part Number.')
pluggableInvVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorRev.setStatus('current')
if mibBuilder.loadTexts: pluggableInvVendorRev.setDescription('The Vendor Revision Number.')
pluggableInvVendorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorSerialNum.setStatus('current')
if mibBuilder.loadTexts: pluggableInvVendorSerialNum.setDescription('The Vendor Serial Number.')
pluggableInvMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMfgDate.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMfgDate.setDescription('The manufacture date in the format YYYY-MM-DD..')
pluggableInvConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("sc", 2), ("fcs1cc", 3), ("fcs2cc", 4), ("bnctnc", 5), ("fcch", 6), ("fj", 7), ("lc", 8), ("mtrj", 9), ("mu", 10), ("sg", 11), ("op", 12), ("hssdc2", 13), ("cp", 14), ("vs", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvConnectorType.setStatus('current')
if mibBuilder.loadTexts: pluggableInvConnectorType.setDescription('The type of connector on the pluggable unit.')
pluggableInvMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMinBitRate.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMinBitRate.setDescription('The minimum bit rate supported by the pluggable. A value of 0 means unspecified.')
pluggableInvMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMaxBitRate.setDescription('The maximum bit rate supported by the pluggable. A value of 0 means unspecified.')
pluggableInvNomBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvNomBitRate.setStatus('current')
if mibBuilder.loadTexts: pluggableInvNomBitRate.setDescription('The nominal bit rate supported by the pluggable. A value of 0 means unspecified.')
pluggableInvEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvEncoding.setStatus('current')
if mibBuilder.loadTexts: pluggableInvEncoding.setDescription('A textual comma-delimited list of serial encoding mechanisms supported by the pluggable.')
pluggableInvWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 19), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelength.setStatus('current')
if mibBuilder.loadTexts: pluggableInvWavelength.setDescription('The wavelength transmitted by the pluggable. A value of 0 means unspecified.')
pluggableInvReach = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kilometers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvReach.setStatus('current')
if mibBuilder.loadTexts: pluggableInvReach.setDescription('The reach supported by the pluggable. A value of 0 means unspecified.')
pluggableInvTxFaultImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvTxFaultImpl.setStatus('current')
if mibBuilder.loadTexts: pluggableInvTxFaultImpl.setDescription('Indicates if the pluggable implements the Transmit Fault signal.')
pluggableInvLOSImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvLOSImpl.setStatus('current')
if mibBuilder.loadTexts: pluggableInvLOSImpl.setDescription('Indicates if the pluggable implements the Loss of Signal signal.')
pluggableInvDDiagImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvDDiagImpl.setStatus('current')
if mibBuilder.loadTexts: pluggableInvDDiagImpl.setDescription('Indicates if the pluggable implements support for Digital Diagnostics.')
pluggableInvTxDisableImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvTxDisableImpl.setStatus('current')
if mibBuilder.loadTexts: pluggableInvTxDisableImpl.setDescription('Indicates if the pluggable implements support for disabling the transmit laser.')
pluggableInvMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("electrical", 2), ("optical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMedia.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMedia.setDescription('The physical media type of the pluggable')
pluggableInvUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvUSI.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUSI.setDescription('The Unique Serial Identifier (only for FNC-branded equipment)')
pluggableInvWavelengthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 27), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthMin.setStatus('current')
if mibBuilder.loadTexts: pluggableInvWavelengthMin.setDescription('The wavelength minimum for the tunable pluggable. A value of 0 means unspecified. ')
pluggableInvWavelengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 28), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthMax.setStatus('current')
if mibBuilder.loadTexts: pluggableInvWavelengthMax.setDescription('The wavelength maximum for the tunable pluggable.A value of 0 means unspecified.')
pluggableInvWavelengthSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), ))).setUnits('GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthSpacing.setStatus('current')
if mibBuilder.loadTexts: pluggableInvWavelengthSpacing.setDescription('The wavelength spacing for the tunable pluggable. A value of 0 means unspecified.')
pluggableInvRestartOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1), )
if mibBuilder.loadTexts: pluggableInvRestartOpTable.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpTable.setDescription('This table contains one row for every provisioned restartable pluggable on a circuit pack.')
pluggableInvRestartOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "pluggableInvRestartOpTypeIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpShelfIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpSlotIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpPortIdx"))
if mibBuilder.loadTexts: pluggableInvRestartOpEntry.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpEntry.setDescription('The conceptual row object of the pluggable restart operation table.')
pluggableInvRestartOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unknown", 1), ("xfp", 3))))
if mibBuilder.loadTexts: pluggableInvRestartOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpTypeIdx.setDescription('The type of small form-factor pluggable inventory item targeted for the restart operation.')
pluggableInvRestartOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pluggableInvRestartOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpShelfIdx.setDescription('The number of the shelf on which the pluggable inventory item resides targeted for the restart operation is provisioned.')
pluggableInvRestartOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: pluggableInvRestartOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpSlotIdx.setDescription('The number of the slot that contains the pluggable inventory item targeted for the restart operation is provisioned.')
pluggableInvRestartOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: pluggableInvRestartOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpPortIdx.setDescription('The number of the port on the circuit pack that contains the pluggable inventory item.')
pluggableInvRestartOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("coldRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pluggableInvRestartOpCmd.setStatus('current')
if mibBuilder.loadTexts: pluggableInvRestartOpCmd.setDescription('Used to perform a restart operation as follows. - coldRestart causes a pluggable restart When this object is read, the value noOp is returned.')
slotInvDataTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: slotInvDataTable.setStatus('current')
if mibBuilder.loadTexts: slotInvDataTable.setDescription('This table contains a listing of any specialized data records available for the slot inventory entries on the system. Each row contains a single item of data for a specialized data record for a slot inventory entry.')
slotInvDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "slotInvDataShelfIdx"), (0, "BTI-7000-MIB", "slotInvDataSlotTypeIdx"), (0, "BTI-7000-MIB", "slotInvDataSlotIdx"), (0, "BTI-7000-MIB", "slotInvDataRecordIdx"), (0, "BTI-7000-MIB", "slotInvDataNameIdx"))
if mibBuilder.loadTexts: slotInvDataEntry.setStatus('current')
if mibBuilder.loadTexts: slotInvDataEntry.setDescription('The conceptual row object of the slot inventory data table.')
slotInvDataShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: slotInvDataShelfIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvDataShelfIdx.setDescription('The number of the shelf on which the slot inventory item is detected.')
slotInvDataSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 2), SlotType())
if mibBuilder.loadTexts: slotInvDataSlotTypeIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvDataSlotTypeIdx.setDescription('The type of slot that contains the inventory item.')
slotInvDataSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: slotInvDataSlotIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvDataSlotIdx.setDescription('The number of the slot within the shelf containing the inventory item. The number is from 1 to 20 for regular circuit pack slots. For shelfInterface and coolingUnit type slots, the number is set to 0.')
slotInvDataRecordIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: slotInvDataRecordIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvDataRecordIdx.setDescription('The specialized data record index.')
slotInvDataNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wavelength", 1), ("loss", 2), ("dispersion", 3))))
if mibBuilder.loadTexts: slotInvDataNameIdx.setStatus('current')
if mibBuilder.loadTexts: slotInvDataNameIdx.setDescription('The name of the data item.')
slotInvDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvDataValue.setStatus('current')
if mibBuilder.loadTexts: slotInvDataValue.setDescription('The value of the data item.')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
if mibBuilder.loadTexts: shelfTable.setDescription('This table contains one row for every provisioned shelf on the NE. Each row contains a list of attributes that pertain to a provisioned shelf.')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "shelfIdx"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
if mibBuilder.loadTexts: shelfEntry.setDescription('The conceptual row object of the shelf table.')
shelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfIdx.setStatus('current')
if mibBuilder.loadTexts: shelfIdx.setDescription('The number of the shelf that has been provisioned. This is set to 1 for the main shelf. Otherwise, the number is based on the expansion shelf port number on which this shelf is expected to be detected and the number of hops from the main shelf.')
shelfProvConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 2), ShelfConfigType().clone('sixSlot')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfProvConfig.setStatus('deprecated')
if mibBuilder.loadTexts: shelfProvConfig.setDescription('The provisioned configuration for the shelf. Note: This object is no longer supported as of BTI 7000 Release 8.1.0, and is maintained in the MIB for backwards- compatibility for management of pre-8.1 nodes.')
shelfDiscConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 3), ShelfConfigType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfDiscConfig.setStatus('deprecated')
if mibBuilder.loadTexts: shelfDiscConfig.setDescription('The configuration of the actual shelf discovered. Note: This object is no longer supported as of BTI 7000 Release 8.1.0, and is maintained in the MIB for backwards- compatibility for management of pre-8.1 nodes.')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 4), ShelfType().clone('expansion')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfType.setStatus('current')
if mibBuilder.loadTexts: shelfType.setDescription('Indicates if the provisioned shelf is a main or expansion shelf. Only expansion shelves can be created. The main shelf is automatically provisioned and can never be de-provisioned.')
shelfPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPEC.setStatus('current')
if mibBuilder.loadTexts: shelfPEC.setDescription('Indicates the provisioned shelf Product Equipment Code. This is a mandatory object when a row of the shelf table is created. The PEC can only be set at the time of row creation, and it cannot be edited later.')
shelfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 6), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: shelfAdminStatus.setDescription('The administrative status of the shelf.')
shelfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperStatus.setStatus('current')
if mibBuilder.loadTexts: shelfOperStatus.setDescription('The reported operational status of the shelf.')
shelfOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 8), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: shelfOperStatQlfr.setDescription('A textual list of qualifiers of the reported operational status of the shelf.')
shelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfId.setStatus('current')
if mibBuilder.loadTexts: shelfId.setDescription('Textual data recorded by the user to describe the provisioned shelf in a manner useful to the user such as the location where the shelf is installed.')
shelfCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom1.setStatus('current')
if mibBuilder.loadTexts: shelfCustom1.setDescription('A variable length text string for operating company use.')
shelfCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom2.setStatus('current')
if mibBuilder.loadTexts: shelfCustom2.setDescription('A variable length text string for operating company use.')
shelfCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom3.setStatus('current')
if mibBuilder.loadTexts: shelfCustom3.setDescription('A variable length text string for operating company use.')
shelfPowerFeedA = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 13), PowerFeedModeType().clone('dc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerFeedA.setStatus('current')
if mibBuilder.loadTexts: shelfPowerFeedA.setDescription('The power feed mode for rail A.')
shelfPowerFeedB = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 14), PowerFeedModeType().clone('dc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerFeedB.setStatus('current')
if mibBuilder.loadTexts: shelfPowerFeedB.setDescription('The power feed mode for rail B.')
shelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRowStatus.setStatus('current')
if mibBuilder.loadTexts: shelfRowStatus.setDescription('Used to control the addition and deletion of entries in the shelf table, which in turn controls provisioning and deprovisioning of shelf objects.')
cpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: cpTable.setStatus('current')
if mibBuilder.loadTexts: cpTable.setDescription('This table contains one row for every provisioned circuit pack on the NE. Each row contains a list of attributes that pertain to a provisioned circuit pack.')
cpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpTypeIdx"), (0, "BTI-7000-MIB", "cpShelfIdx"), (0, "BTI-7000-MIB", "cpSlotIdx"))
if mibBuilder.loadTexts: cpEntry.setStatus('current')
if mibBuilder.loadTexts: cpEntry.setDescription('The conceptual row object of the circuit pack table.')
cpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 1), CpType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpTypeIdx.setDescription('The specific type of circuit pack provisioned.')
cpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: cpShelfIdx.setDescription('The number of the shelf on which the circuit pack is provisioned.')
cpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cpSlotIdx.setDescription('The number of the slot in which the circuit pack is provisioned.')
cpPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpPEC.setStatus('current')
if mibBuilder.loadTexts: cpPEC.setDescription('Indicates the provisioned circuit pack Product Equipment Code. This is a mandatory object when a row of the circuit pack table is created. The PEC can only be set at the time of row creation, and it cannot be edited later.')
cpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 5), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cpAdminStatus.setDescription('The administrative status of the circuit pack.')
cpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpOperStatus.setStatus('current')
if mibBuilder.loadTexts: cpOperStatus.setDescription('The reported operational status of the circuit pack.')
cpOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: cpOperStatQlfr.setDescription('A textual list of qualifiers of the reported operational status of the circuit pack.')
cpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpId.setStatus('current')
if mibBuilder.loadTexts: cpId.setDescription('Textual data recorded by the user to describe the provisioned circuit pack in a manner useful to the user.')
cpCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom1.setStatus('current')
if mibBuilder.loadTexts: cpCustom1.setDescription('A variable length text string for operating company use.')
cpCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom2.setStatus('current')
if mibBuilder.loadTexts: cpCustom2.setDescription('A variable length text string for operating company use.')
cpCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom3.setStatus('current')
if mibBuilder.loadTexts: cpCustom3.setDescription('A variable length text string for operating company use.')
cpUpgradeStage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 12), UpgradeCompleteStage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpUpgradeStage.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeStage.setDescription('Used in notifications sent during the circuit pack software upgrade process. It indicates the stage of the circuit pack upgrade process that has been completed.')
cpUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeResult.setDescription('Indicates if the identified stage of the circuit pack upgrade process has resulted in success or failure.')
cpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpRowStatus.setDescription('Used to control the addition and deletion of entries in the circuit pack table, which in turn controls the provisioning and de-provisioning of circuit pack objects.')
oaTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: oaTable.setStatus('current')
if mibBuilder.loadTexts: oaTable.setDescription('This table contains one row for every provisioned optical amplifier facility on the NE. Each row contains a list of attributes that pertain to the optical amplifier.')
oaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaTypeIdx"), (0, "BTI-7000-MIB", "oaShelfIdx"), (0, "BTI-7000-MIB", "oaSlotIdx"), (0, "BTI-7000-MIB", "oaIdx"))
if mibBuilder.loadTexts: oaEntry.setStatus('current')
if mibBuilder.loadTexts: oaEntry.setDescription('The conceptual row object of the optical amplifier table.')
oaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 1), OaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaTypeIdx.setDescription('The specific type of optical amplifier provisioned.')
oaShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaShelfIdx.setStatus('current')
if mibBuilder.loadTexts: oaShelfIdx.setDescription('The number of the shelf on which the optical amplifier facility is provisioned.')
oaSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaSlotIdx.setStatus('current')
if mibBuilder.loadTexts: oaSlotIdx.setDescription('The number of the slot in which the optical amplifier facility is provisioned.')
oaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaIdx.setStatus('current')
if mibBuilder.loadTexts: oaIdx.setDescription('The number of the port on the circuit pack on which the optical amplifier facility is provisioned.')
oaCaseTempMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767)).clone(60)).setUnits('degrees Celsius').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCaseTempMaxTh.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempMaxTh.setDescription('The case temperature threshold.')
oaCaseTempMaxShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCaseTempMaxShutdownTh.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempMaxShutdownTh.setDescription('The case temperature shutdown threshold.')
oaLaserTempMinShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserTempMinShutdownTh.setStatus('current')
if mibBuilder.loadTexts: oaLaserTempMinShutdownTh.setDescription('The laser temperature minimum shutdown threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaLaserTempMaxShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserTempMaxShutdownTh.setStatus('current')
if mibBuilder.loadTexts: oaLaserTempMaxShutdownTh.setDescription('The laser temperature maximum shutdown threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinTh.setDescription('The optical power received minimum threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxTh.setDescription('The optical power received maximum threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaSSIOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 11), FixedX10().clone(55)).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxTh.setDescription('The secondary stage input optical power received maximum threshold. This object is applicable only to OLAM type amplifiers.')
oaOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 12), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinTh.setDescription('The optical power transmitted minimum threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 13), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxTh.setDescription('The optical power transmitted maximum threshold. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaBackReflectionSafetyTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 14), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaBackReflectionSafetyTh.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionSafetyTh.setDescription('The optical back reflection safety threshold.')
oaMSInsertionLossMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 15), FixedX10().clone(150)).setUnits('dB/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaMSInsertionLossMaxTh.setStatus('current')
if mibBuilder.loadTexts: oaMSInsertionLossMaxTh.setDescription('This is the mid-stage maximum insertion loss signal threshold. It applies to mid-stage access amplifiers only.')
oaCaseTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCaseTemp.setStatus('current')
if mibBuilder.loadTexts: oaCaseTemp.setDescription('The optical amplifier case temperature.')
oaLaser1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Temp.setStatus('current')
if mibBuilder.loadTexts: oaLaser1Temp.setDescription('The temperature of the optical amplifier laser 1.')
oaLaser2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Temp.setStatus('current')
if mibBuilder.loadTexts: oaLaser2Temp.setDescription('The temperature of the optical amplifier laser 2.')
oaOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 19), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceived.setDescription('The optical power received on the input of the amplifier.')
oaSSIOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 20), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSSIOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: oaSSIOpticalPwrReceived.setDescription('The optical power received on the second stage of the amplifier. It applies to mid-stage access amplifiers only.')
oaOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the amplifier.')
oaMSInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 22), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaMSInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: oaMSInsertionLoss.setDescription('The mid-stage insertion loss. This object is only applicable to OLAM type amplifiers.')
oaEffectiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 33), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaEffectiveGain.setStatus('current')
if mibBuilder.loadTexts: oaEffectiveGain.setDescription('The effective gain level of the optical amplifier.')
oaFSOOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 34), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaFSOOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: oaFSOOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the first stage of the amplifier. It applies to mid-stage access amplifiers only.')
oaLaser1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 35), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Current.setStatus('current')
if mibBuilder.loadTexts: oaLaser1Current.setDescription('The optical amplifier laser 1 current.')
oaLaser2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 36), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Current.setStatus('current')
if mibBuilder.loadTexts: oaLaser2Current.setDescription('The optical amplifier laser 2 current.')
oaLaser1Power = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 37), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Power.setStatus('current')
if mibBuilder.loadTexts: oaLaser1Power.setDescription('The optical amplifier laser 1 power.')
oaLaser2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 38), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Power.setStatus('current')
if mibBuilder.loadTexts: oaLaser2Power.setDescription('The optical amplifier laser 2 power.')
oaOpticalBackReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 39), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalBackReflection.setStatus('current')
if mibBuilder.loadTexts: oaOpticalBackReflection.setDescription('The optical back reflection of the amplifier.')
oaVariableOpticalAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 40), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaVariableOpticalAttenuation.setStatus('current')
if mibBuilder.loadTexts: oaVariableOpticalAttenuation.setDescription('The variable optical attenuation of the amplifier.')
oaAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 41), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaAdminStatus.setStatus('current')
if mibBuilder.loadTexts: oaAdminStatus.setDescription('The administrative status of the optical amplifier.')
oaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 42), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOperStatus.setStatus('current')
if mibBuilder.loadTexts: oaOperStatus.setDescription('The reported operational status of the optical amplifier.')
oaOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 43), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: oaOperStatQlfr.setDescription('A textual list of qualifiers of the reported operational status of the optical amplifier.')
oaAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 44), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: oaAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted optical amplifier. This value only applies if the oaAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00. The supported range of values is 000-00 to 096-00.')
oaActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 45), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: oaActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer, if it is actively counting down. Otherwise, the value returned is 000-00.')
oaModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("constantGain", 2), ("constantPower", 3))).clone('constantGain')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaModeSetting.setStatus('current')
if mibBuilder.loadTexts: oaModeSetting.setDescription('The desired mode of operation to which this optical amplifier is set.')
oaGainSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 47), FixedX10()).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaGainSetting.setStatus('current')
if mibBuilder.loadTexts: oaGainSetting.setDescription('The effective gain (excluding ASE) set point. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaPwrSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 48), FixedX10()).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaPwrSetting.setStatus('current')
if mibBuilder.loadTexts: oaPwrSetting.setDescription('The signal output power (excluding ASE) set point. A default value is provided when the optical amplifier is created based on the optical amplifier type provisioned.')
oaTiltCompSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 49), FixedX10()).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaTiltCompSetting.setStatus('current')
if mibBuilder.loadTexts: oaTiltCompSetting.setDescription('The desired tilt compensation to which this optical amplifier is set.')
oaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("constantGain", 2), ("constantPower", 3), ("eyeSafe", 4), ("shutdown", 5), ("constantGainOff", 6), ("constantPowerOff", 7), ("constantLaserCurrent", 8), ("constantLaserCurrentOff", 9), ("constantLaserPower", 10), ("constantLaserPowerOff", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatus.setStatus('current')
if mibBuilder.loadTexts: oaStatus.setDescription('The specific operational status of the amplifier.')
oaLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserStatus.setStatus('current')
if mibBuilder.loadTexts: oaLaserStatus.setDescription('The actual operational status of the optical amplifier laser.')
oaId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaId1.setStatus('current')
if mibBuilder.loadTexts: oaId1.setDescription('Textual data recorded by the user to describe the provisioned optical amplifier in a manner useful to the user.')
oaId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaId2.setStatus('current')
if mibBuilder.loadTexts: oaId2.setDescription('Textual data recorded by the user to describe the provisioned optical amplifier in a manner useful to the user.')
oaFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 54), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaFiberType.setStatus('current')
if mibBuilder.loadTexts: oaFiberType.setDescription('An optional specification of the fiber type that interfaces with the optical amplifier.')
oaGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 55), WDMGrid().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaGrid.setStatus('current')
if mibBuilder.loadTexts: oaGrid.setDescription('An optional indication of the WDM grid to which the link conforms.')
oaNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaNumChannels.setStatus('current')
if mibBuilder.loadTexts: oaNumChannels.setDescription('An optional indication of the number of channels that the link is carrying.')
oaCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 57), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom1.setStatus('current')
if mibBuilder.loadTexts: oaCustom1.setDescription('A variable length text string for operating company use.')
oaCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 58), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom2.setStatus('current')
if mibBuilder.loadTexts: oaCustom2.setDescription('A variable length text string for operating company use.')
oaCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 59), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom3.setStatus('current')
if mibBuilder.loadTexts: oaCustom3.setDescription('A variable length text string for operating company use.')
oaWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 60), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaWavelength.setStatus('current')
if mibBuilder.loadTexts: oaWavelength.setDescription('The wavelength transmitted from the OA port. This object applies only to single channel amplifiers (sba, spa).')
oaRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 61), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaRemoteId.setStatus('current')
if mibBuilder.loadTexts: oaRemoteId.setDescription('Identifies the remote node and port to which the optical amplifier port is connected, in the format prescribed by the PSM network management system.')
oaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaRowStatus.setStatus('current')
if mibBuilder.loadTexts: oaRowStatus.setDescription('Used to control the addition and deletion of entries in the optical amplifier table, which in turn controls provisioning and deprovisioning of optical amplifier facilities.')
xcvrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: xcvrTable.setStatus('current')
if mibBuilder.loadTexts: xcvrTable.setDescription('This table contains one row for every provisioned optical transceiver on a wavelength translator, regenerator or manager card. Each row contains a list of attributes that pertain to the transceiver.')
xcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrTypeIdx"), (0, "BTI-7000-MIB", "xcvrShelfIdx"), (0, "BTI-7000-MIB", "xcvrSlotIdx"), (0, "BTI-7000-MIB", "xcvrIdx"))
if mibBuilder.loadTexts: xcvrEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrEntry.setDescription('The conceptual row object of the optical transceiver table.')
xcvrTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 1), XcvrType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrTypeIdx.setDescription('The specific type of wavelength conversion function of the circuit pack on which the transceiver is provisioned.')
xcvrShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrShelfIdx.setDescription('The number of the shelf on which the transceiver is provisioned.')
xcvrSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrSlotIdx.setDescription('The number of the slot within which the transceiver is provisioned.')
xcvrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrIdx.setDescription('The number of the port on the circuit pack on which the transceiver is provisioned.')
xcvrOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
xcvrOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
xcvrOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
xcvrOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
xcvrOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
xcvrOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
xcvrProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 11), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrProtSwEvtType.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwEvtType.setDescription('Indicates the type of protection switching event that has occured on an optical transceiver port.')
xcvrPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrPEC.setStatus('current')
if mibBuilder.loadTexts: xcvrPEC.setDescription('An optionally provisioned transceiver Product Equipment Code used to validate the physically present transceiver.')
xcvrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 13), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrAdminStatus.setDescription('The administrative status of the optical transceiver.')
xcvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOperStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrOperStatus.setDescription('The reported operational status of the optical transceiver.')
xcvrOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 15), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: xcvrOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the optical transceiver.')
xcvrAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 16), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: xcvrAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted optical transceiver. This value only applies if the xcvrAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
xcvrActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 17), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: xcvrActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
xcvrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 18), XcvrProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtocol.setStatus('current')
if mibBuilder.loadTexts: xcvrProtocol.setDescription('The protocol of the service to be carried by the port. This is a mandatory object when a row of the transceiver table is created.')
xcvrWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrWavelength.setStatus('current')
if mibBuilder.loadTexts: xcvrWavelength.setDescription('The wavelength to be transmitted by the transceiver port. This is a mandatory object when a row of the transceiver table is created for ports that have a pluggable transceiver.')
xcvrVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN1.setStatus('current')
if mibBuilder.loadTexts: xcvrVendorPN1.setDescription('An optionally provisioned part number used to validate the physically present transceiver.')
xcvrVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN2.setStatus('current')
if mibBuilder.loadTexts: xcvrVendorPN2.setDescription('An optionally provisioned part number used to validate the physically present transceiver.')
xcvrVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN3.setStatus('current')
if mibBuilder.loadTexts: xcvrVendorPN3.setDescription('An optionally provisioned part number used to validate the physically present transceiver.')
xcvrPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: xcvrPhyPMMon.setDescription('Indicates if the port is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
xcvrFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrFPSD.setStatus('current')
if mibBuilder.loadTexts: xcvrFPSD.setDescription('Indicates if the port is configured for Fault Propagation Shut Down.')
xcvrLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("idle", 3), ("aisl", 4), ("msais", 5), ("odu2ais", 6), ("prbs", 7), ("remoteFault", 8), ("odu2lck", 9), ("odu2oci", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrLaserStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrLaserStatus.setDescription('An indication of the operational status of the transceiver laser.')
xcvrId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrId1.setStatus('current')
if mibBuilder.loadTexts: xcvrId1.setDescription('Textual data recorded by the user to describe the provisioned optical transceiver in a manner useful to the user.')
xcvrId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrId2.setStatus('current')
if mibBuilder.loadTexts: xcvrId2.setDescription('Textual data recorded by the user to describe the provisioned optical transceiver in a manner useful to the user.')
xcvrFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 28), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrFiberType.setStatus('current')
if mibBuilder.loadTexts: xcvrFiberType.setDescription('An optional specification of the fiber type that interfaces to the optical transceiver.')
xcvrGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 29), WDMGrid().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrGrid.setStatus('current')
if mibBuilder.loadTexts: xcvrGrid.setDescription('An optical indication of the WDM grid the link conforms.')
xcvrCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 30), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom1.setStatus('current')
if mibBuilder.loadTexts: xcvrCustom1.setDescription('A variable length text string for operating company use.')
xcvrCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 31), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom2.setStatus('current')
if mibBuilder.loadTexts: xcvrCustom2.setDescription('A variable length text string for operating company use.')
xcvrCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 32), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom3.setStatus('current')
if mibBuilder.loadTexts: xcvrCustom3.setDescription('A variable length text string for operating company use.')
xcvrTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrTraceLabel.setStatus('current')
if mibBuilder.loadTexts: xcvrTraceLabel.setDescription('If specified, this attribute will describe the trace label to be used in the outgoing OTN or SONET/SDH trace.')
xcvrExpectedTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrExpectedTraceLabel.setStatus('current')
if mibBuilder.loadTexts: xcvrExpectedTraceLabel.setDescription('This attribute will describe the trace label that is expected to be received in the incoming OTN or SONET/SDH trace. If specified, this expected trace label will be compared to the actual value for xcvrReceivedTraceLabel, and a trace mismatch alarm will be raised if the two trace labels do not match.')
xcvrReceivedTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrReceivedTraceLabel.setStatus('current')
if mibBuilder.loadTexts: xcvrReceivedTraceLabel.setDescription('The actual received trace label on the incoming OTN or SONET/SDH trace.')
xcvrSDBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 36), BERType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrSDBERTh.setStatus('current')
if mibBuilder.loadTexts: xcvrSDBERTh.setDescription('The Bit Error Rate threshold above which the Signal Degrade condition is raised.')
xcvrLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 37), LoopbackType().clone('noLoopback')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrLoopbackType.setStatus('current')
if mibBuilder.loadTexts: xcvrLoopbackType.setDescription('The loopback type that is currently active on the xcvr')
xcvrRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 38), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrRemoteId.setStatus('current')
if mibBuilder.loadTexts: xcvrRemoteId.setDescription('Identifies the remote node and port to which the transceiver port is connected, in the format prescribed by the PSM network management system.')
xcvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrRowStatus.setDescription('Used to control the addition and deletion of entries in the Transceiver table, which in turn controls provisioning and deprovisioning of optical transceiver facilities.')
amdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3), )
if mibBuilder.loadTexts: amdTable.setStatus('obsolete')
if mibBuilder.loadTexts: amdTable.setDescription('This table contains one row for every provisioned active multiplexer-demultiplexer facility. AMD facilities include AMD line facilities and AMD channel facilities. Each row contains a list of attributes that pertain to one facility.')
amdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdTypeIdx"), (0, "BTI-7000-MIB", "amdShelfIdx"), (0, "BTI-7000-MIB", "amdSlotIdx"), (0, "BTI-7000-MIB", "amdLineIdx"), (0, "BTI-7000-MIB", "amdPortIdx"))
if mibBuilder.loadTexts: amdEntry.setStatus('obsolete')
if mibBuilder.loadTexts: amdEntry.setDescription('The conceptual row object of the Active Mux-Demux table.')
amdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 1), AmdType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdTypeIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdTypeIdx.setDescription('The specific type of active multiplexer-demultiplexer circuit pack on which the facility is provisioned.')
amdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdShelfIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdShelfIdx.setDescription('The number of the shelf on which the active multiplexer-demultiplexer facility is provisioned.')
amdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdSlotIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdSlotIdx.setDescription('The number of the slot within which the active multiplexer-demultiplexer facility is provisioned.')
amdLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdLineIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdLineIdx.setDescription('The number of the multiplexed wavelength line on the AMD circuit pack.')
amdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 5), AmdPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdPortIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdPortIdx.setDescription('Identifies a specific port on the identified line of the AMD circuit pack.')
amdOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinTh.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
amdOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxTh.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
amdOpticalPwrTransmittedTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrTransmittedTarget.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrTransmittedTarget.setDescription('This is the optical power transmitted target level.')
amdOpticalAttenuationTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 9), FixedX10()).setUnits('dB/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalAttenuationTarget.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalAttenuationTarget.setDescription('This is the optical power attenuation target level.')
amdOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalPwrReceived.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceived.setDescription('The optical input power received for the channel.')
amdOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalPwrTransmitted.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrTransmitted.setDescription('The optical power level transmitted for the channel.')
amdOpticalAttentuation = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 12), FixedX10()).setUnits('dB/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalAttentuation.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalAttentuation.setDescription('The optical power attenuation for the line.')
amdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 13), AdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: amdAdminStatus.setDescription('The administrative status of the AMD port.')
amdOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: amdOperStatus.setDescription('The reported operational status of the AMD port.')
amdOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 15), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdOperStatQlfr.setStatus('obsolete')
if mibBuilder.loadTexts: amdOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the AMD port.')
amdAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 16), HoursAndMinutes().clone('008-00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdAutoEnableTimer.setStatus('obsolete')
if mibBuilder.loadTexts: amdAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted AMD port. This value only applies if the amdAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
amdActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 17), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdActAutoEnableTimer.setStatus('obsolete')
if mibBuilder.loadTexts: amdActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
amdWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 18), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdWavelength.setStatus('obsolete')
if mibBuilder.loadTexts: amdWavelength.setDescription('The wavelength transmitted from the AMD port. This object applies only to channel ports.')
amdId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdId1.setStatus('obsolete')
if mibBuilder.loadTexts: amdId1.setDescription('Textual data recorded by the user to describe the provisioned optical transceiver in a manner useful to the user.')
amdId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdId2.setStatus('obsolete')
if mibBuilder.loadTexts: amdId2.setDescription('Textual data recorded by the user to describe the provisioned optical transceiver in a manner useful to the user.')
amdFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 21), FiberType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdFiberType.setStatus('obsolete')
if mibBuilder.loadTexts: amdFiberType.setDescription('An optional specification of the fiber type that interfaces to the AMD port.')
amdGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 22), WDMGrid().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdGrid.setStatus('obsolete')
if mibBuilder.loadTexts: amdGrid.setDescription('An optical indication of the WDM grid to which the AMD port link conforms.')
amdCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom1.setStatus('obsolete')
if mibBuilder.loadTexts: amdCustom1.setDescription('A variable length text string for operating company use.')
amdCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom2.setStatus('obsolete')
if mibBuilder.loadTexts: amdCustom2.setDescription('A variable length text string for operating company use.')
amdCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom3.setStatus('obsolete')
if mibBuilder.loadTexts: amdCustom3.setDescription('A variable length text string for operating company use.')
amdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: amdRowStatus.setDescription('The active multiplexer-demultiplexer table RowStatus object is not readable or writeable because all entries in the AMD table are automatically created and deleted when the AMD circuit pack is created or deleted. This AMD row status object is used only in database change notifications to indicate if the row has been created or deleted.')
passivePortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4), )
if mibBuilder.loadTexts: passivePortTable.setStatus('current')
if mibBuilder.loadTexts: passivePortTable.setDescription('This table contains one row for each port on every provisioned passive circuit pack on the NE. Each list contains a list of attributes that pertain to the passive port.')
passivePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "passivePortCpTypeIdx"), (0, "BTI-7000-MIB", "passivePortShelfIdx"), (0, "BTI-7000-MIB", "passivePortSlotIdx"), (0, "BTI-7000-MIB", "passivePortLineIdx"), (0, "BTI-7000-MIB", "passivePortTypeIdx"))
if mibBuilder.loadTexts: passivePortEntry.setStatus('current')
if mibBuilder.loadTexts: passivePortEntry.setDescription('The conceptual row object of the passive circuit pack port table.')
passivePortCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 1), CpType())
if mibBuilder.loadTexts: passivePortCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: passivePortCpTypeIdx.setDescription('The type of circuit pack on which the passive port is found.')
passivePortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: passivePortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: passivePortShelfIdx.setDescription('The number of the shelf on which the passive circuit pack port is provisioned.')
passivePortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: passivePortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: passivePortSlotIdx.setDescription('The number of the slot within which the passive circuit pack port is provisioned.')
passivePortLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: passivePortLineIdx.setStatus('current')
if mibBuilder.loadTexts: passivePortLineIdx.setDescription('Identifies the multiplexed multi-channel optical facility instance associated with the targeted passive port.')
passivePortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 5), PassivePortType())
if mibBuilder.loadTexts: passivePortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: passivePortTypeIdx.setDescription('Identifies the specific passive port on the circuit pack according to function.')
passivePortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortId1.setStatus('current')
if mibBuilder.loadTexts: passivePortId1.setDescription('An optional name used to identify the passive circuit pack port facility.')
passivePortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortId2.setStatus('current')
if mibBuilder.loadTexts: passivePortId2.setDescription('An optional identifier for the passive circuit pack port circuit.')
passivePortFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 8), FiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortFiberType.setStatus('current')
if mibBuilder.loadTexts: passivePortFiberType.setDescription('An optional specification of the fiber type interfacing the passive circuit pack port.')
passivePortGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 9), WDMGrid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortGrid.setStatus('current')
if mibBuilder.loadTexts: passivePortGrid.setDescription('An optional indication of the DWM grid that the link conforms to.')
passivePortNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortNumChannels.setStatus('current')
if mibBuilder.loadTexts: passivePortNumChannels.setDescription('An optional indication of the number of channels that the link is carrying. This field does not apply to individual channel type ports.')
passivePortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 11), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passivePortWavelength.setStatus('current')
if mibBuilder.loadTexts: passivePortWavelength.setDescription('An indication of the wavelength that the port is carrying.')
passivePortCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom1.setStatus('current')
if mibBuilder.loadTexts: passivePortCustom1.setDescription('A variable length text string for operating company use.')
passivePortCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom2.setStatus('current')
if mibBuilder.loadTexts: passivePortCustom2.setDescription('A variable length text string for operating company use.')
passivePortCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom3.setStatus('current')
if mibBuilder.loadTexts: passivePortCustom3.setDescription('A variable length text string for operating company use.')
passivePortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: passivePortRemoteId.setStatus('current')
if mibBuilder.loadTexts: passivePortRemoteId.setDescription('Identifies the remote node and port to which the passive card port is connected, in the format prescribed by the PSM network management system.')
passivePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: passivePortRowStatus.setStatus('current')
if mibBuilder.loadTexts: passivePortRowStatus.setDescription('The passive port table RowStatus object is not readable or writeable because all entries in the passive port table are automatically created and deleted when the circuit pack is created or deleted. This passive port row status object is used only in database change notifications to indicate if the row has been created or deleted.')
ocnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5), )
if mibBuilder.loadTexts: ocnTable.setStatus('current')
if mibBuilder.loadTexts: ocnTable.setDescription('This table contains one row for every provisioned SONET OC-N facility on the system. Each row contains a list of attributes that pertain to the facility.')
ocnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnTypeIdx"), (0, "BTI-7000-MIB", "ocnShelfIdx"), (0, "BTI-7000-MIB", "ocnSlotIdx"), (0, "BTI-7000-MIB", "ocnPortIdx"))
if mibBuilder.loadTexts: ocnEntry.setStatus('current')
if mibBuilder.loadTexts: ocnEntry.setDescription('The conceptual row object of the OC-N table.')
ocnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 1), OcnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnTypeIdx.setDescription('The specific type of OC-N signal which is provisioned.')
ocnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnShelfIdx.setDescription('The number of the shelf on which the OC-N facility is provisioned.')
ocnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnSlotIdx.setDescription('The number of the slot within which the OC-N facility is provisioned.')
ocnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPortIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility is provisioned.')
ocnOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
ocnOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
ocnOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
ocnOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
ocnOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
ocnOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
ocnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 11), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnBER.setStatus('current')
if mibBuilder.loadTexts: ocnBER.setDescription('The Bit Error Rate measured on the received signal.')
ocnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 12), BERType().clone('tenExpMinus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnBERTh.setStatus('current')
if mibBuilder.loadTexts: ocnBERTh.setDescription('The Bit Error Rate threshold above which the Signal Degrade condition is raised.')
ocnPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnPEC.setStatus('current')
if mibBuilder.loadTexts: ocnPEC.setDescription('An optionally provisioned Product Equipment Code used to validate the physically present optical transceiver on the OC-N port.')
ocnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 14), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ocnAdminStatus.setDescription('The administrative status of the OC-N facility.')
ocnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOperStatus.setStatus('current')
if mibBuilder.loadTexts: ocnOperStatus.setDescription('The reported operational status of the OC-N facility.')
ocnOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 16), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: ocnOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the OC-N facility.')
ocnAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 17), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: ocnAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted OC-N facility. This value only applies if the ocnAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
ocnActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 18), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: ocnActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
ocnWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnWavelength.setStatus('current')
if mibBuilder.loadTexts: ocnWavelength.setDescription('The wavelength to be transmitted by the transceiver on the OC-N facility port. This is a mandatory object when a row of the OC-N table is created.')
ocnVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN1.setStatus('current')
if mibBuilder.loadTexts: ocnVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the OC-N facility port.')
ocnVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN2.setStatus('current')
if mibBuilder.loadTexts: ocnVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the OC-N facility port.')
ocnVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN3.setStatus('current')
if mibBuilder.loadTexts: ocnVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the OC-N facility port.')
ocnPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: ocnPhyPMMon.setDescription('Indicates if the OC-N facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
ocnLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnLaserStatus.setStatus('current')
if mibBuilder.loadTexts: ocnLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the OC-N facility port.')
ocnId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnId1.setStatus('current')
if mibBuilder.loadTexts: ocnId1.setDescription('Textual data recorded by the user to describe the provisioned OC-N facility in a manner useful to the user.')
ocnFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 26), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnFiberType.setStatus('current')
if mibBuilder.loadTexts: ocnFiberType.setDescription('An optional specification of the fiber type that interfaces to the OC-N facility port.')
ocnCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnCustom1.setStatus('current')
if mibBuilder.loadTexts: ocnCustom1.setDescription('A variable length text string for operating company use.')
ocnTOHTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnTOHTransparency.setStatus('current')
if mibBuilder.loadTexts: ocnTOHTransparency.setDescription('Used to configure whether the transport overhead of the the SONET OC-N facility is to be handled transparently or if it is to be terminated and regenerated. This object only applies to OC-48 client facilities on the 10G MXP circuit pack and the OC-12 and OC-3 client facilities on the 8-port 2.5G MXP circuit pack.')
ocnLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unmapped", 1), ("odu1ToOtu2", 2), ("otu2", 3), ("subOdu1ToOtu1", 4), ("otu1", 5))).clone('otu2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnLineMapping.setStatus('current')
if mibBuilder.loadTexts: ocnLineMapping.setDescription('Used to configure the OTN configuration of the line port. If set to unmapped, there is no OTN digital wrapper added to the OC-192 or OC-48 facility. The odu1ToOtu2 and otu2 mapping is applicable to OC-192 line ports as follows: odu1ToOtu2 - the line port is configured as an OTN digitally wrapped OTU2 facility containing 4 ODU1 units. otu2 - the line port is configured as an OTN digitally wrapped OTU2 facility to which an OC-192 facility is directly mapped. The subOdu1ToOtu1 and otu1 mapping is applicable to OC-48 line ports as follows: subOdu1ToOtu1 - the line port is configured as an OTN digitally wrapped ODU1 facility containing 4 sub-ODU1 units. otu1 - the line port is configured as an OTN digitally wrapped OTU1 facility to which an OC-48 facility is directly mapped. This object applies only to the OC-192 line port of the 10G MXP circuit pack and the OC-48 line port of the 8-port 2.5G circuit pack.')
ocnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 30), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnProtSwEvtType.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwEvtType.setDescription('Indicates the type of protection switching event that has occured on an OC-N facility.')
ocnDCCTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnDCCTransparency.setStatus('current')
if mibBuilder.loadTexts: ocnDCCTransparency.setDescription('Used to configure whether the Data Communications Channel (DCC) is transported transparently through the circuit pack. Specifically, this refers to the D1, D2 and D3 section DCC bytes. This object only applies to OC-48 client facilities on the 10G MXP circuit pack and the OC-12 client facilities on the 8-port 2.5G MXP circuit pack.')
ocnTransparencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnTransparencyChannel.setStatus('current')
if mibBuilder.loadTexts: ocnTransparencyChannel.setDescription('Used to configure the STS1 channel number on which the DCC is transported. This object only applies to OC-48 client facilities on the 10G MXP circuit pack and the OC-12 client facilities on the 8-port 2.5G MXP circuit pack.')
ocnRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnRemoteId.setStatus('current')
if mibBuilder.loadTexts: ocnRemoteId.setDescription('Identifies the remote node and port to which the OC-n port is connected, in the format prescribed by the PSM network management system.')
ocnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnRowStatus.setStatus('current')
if mibBuilder.loadTexts: ocnRowStatus.setDescription('Used to control the addition and deletion of entries in the OC-N table, which in turn controls provisioning and deprovisioning of OC-N facilities.')
stsnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6), )
if mibBuilder.loadTexts: stsnTable.setStatus('current')
if mibBuilder.loadTexts: stsnTable.setDescription('This table contains one row for every created SONET STS-N facility on the system. Each row contains a list of attributes that pertain to the facility.')
stsnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnTypeIdx"), (0, "BTI-7000-MIB", "stsnShelfIdx"), (0, "BTI-7000-MIB", "stsnSlotIdx"), (0, "BTI-7000-MIB", "stsnPortIdx"), (0, "BTI-7000-MIB", "stsnIdx"))
if mibBuilder.loadTexts: stsnEntry.setStatus('current')
if mibBuilder.loadTexts: stsnEntry.setDescription('The conceptual row object of the STS-N table.')
stsnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 1), StsnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnTypeIdx.setDescription('The specific type of STS-N signal which is created.')
stsnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnShelfIdx.setDescription('The number of the shelf on which the STS-N facility exists.')
stsnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnSlotIdx.setDescription('The number of the slot within which the STS-N facility exists.')
stsnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPortIdx.setDescription('The number of the port on the circuit pack on which the STS-N facility exists.')
stsnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnIdx.setStatus('current')
if mibBuilder.loadTexts: stsnIdx.setDescription('The stsn channel number within the port in which the STS-N facility exists.')
stsnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 6), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnProtSwEvtType.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwEvtType.setDescription('Indicates the type of protection switching event that has occured on an STS-N facility.')
stsnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 7), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnBER.setStatus('current')
if mibBuilder.loadTexts: stsnBER.setDescription('The Bit Error Rate measured on the received channel.')
stsnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 8), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnBERTh.setStatus('current')
if mibBuilder.loadTexts: stsnBERTh.setDescription('The Bit Error Rate threshold above which the Signal Degrade condition is raised.')
stsnProtSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 9), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnProtSwStatus.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwStatus.setDescription('If the STS-N facility is configured as part of a protection grouping, this object indicates its protection status.')
stmnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7), )
if mibBuilder.loadTexts: stmnTable.setStatus('current')
if mibBuilder.loadTexts: stmnTable.setDescription('This table contains one row for every provisioned SDH STM-N facility on the system. Each row contains a list of attributes that pertain to the facility.')
stmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnTypeIdx"), (0, "BTI-7000-MIB", "stmnShelfIdx"), (0, "BTI-7000-MIB", "stmnSlotIdx"), (0, "BTI-7000-MIB", "stmnPortIdx"))
if mibBuilder.loadTexts: stmnEntry.setStatus('current')
if mibBuilder.loadTexts: stmnEntry.setDescription('The conceptual row object of the STM-N table.')
stmnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 1), StmnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnTypeIdx.setDescription('The specific type of STM-N signal which is provisioned.')
stmnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnShelfIdx.setDescription('The number of the shelf on which the STM-N facility is provisioned.')
stmnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnSlotIdx.setDescription('The number of the slot within which the STM-N facility is provisioned.')
stmnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPortIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility is provisioned.')
stmnOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
stmnOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
stmnOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
stmnOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
stmnOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
stmnOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
stmnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 11), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnBER.setStatus('current')
if mibBuilder.loadTexts: stmnBER.setDescription('The Bit Error Rate measured on the received signal.')
stmnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 12), BERType().clone('tenExpMinus6')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnBERTh.setStatus('current')
if mibBuilder.loadTexts: stmnBERTh.setDescription('The Bit Error Rate threshold above which the Signal Degrade condition is raised.')
stmnPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnPEC.setStatus('current')
if mibBuilder.loadTexts: stmnPEC.setDescription('An optionally provisioned Product Equipment Code used to validate the physically present optical transceiver on the STM-N port.')
stmnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 14), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: stmnAdminStatus.setDescription('The administrative status of the STM-N facility.')
stmnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOperStatus.setStatus('current')
if mibBuilder.loadTexts: stmnOperStatus.setDescription('The reported operational status of the STM-N facility.')
stmnOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 16), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: stmnOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the STM-N facility.')
stmnAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 17), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: stmnAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted STM-N facility. This value only applies if the stmnAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
stmnActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 18), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: stmnActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
stmnWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnWavelength.setStatus('current')
if mibBuilder.loadTexts: stmnWavelength.setDescription('The wavelength to be transmitted by the transceiver on the STM-N facility port. This is a mandatory object when a row of the STM-N table is created.')
stmnVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN1.setStatus('current')
if mibBuilder.loadTexts: stmnVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the STM-N facility port.')
stmnVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN2.setStatus('current')
if mibBuilder.loadTexts: stmnVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the STM-N facility port.')
stmnVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN3.setStatus('current')
if mibBuilder.loadTexts: stmnVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the STM-N facility port.')
stmnPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: stmnPhyPMMon.setDescription('Indicates if the STM-N facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
stmnLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnLaserStatus.setStatus('current')
if mibBuilder.loadTexts: stmnLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the STM-N facility port.')
stmnId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnId1.setStatus('current')
if mibBuilder.loadTexts: stmnId1.setDescription('Textual data recorded by the user to describe the provisioned STM-N facility in a manner useful to the user.')
stmnFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 26), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnFiberType.setStatus('current')
if mibBuilder.loadTexts: stmnFiberType.setDescription('An optional specification of the fiber type that interfaces to the STM-N facility port.')
stmnCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnCustom1.setStatus('current')
if mibBuilder.loadTexts: stmnCustom1.setDescription('A variable length text string for operating company use.')
stmnTOHTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnTOHTransparency.setStatus('current')
if mibBuilder.loadTexts: stmnTOHTransparency.setDescription('Used to configure whether the transport overhead of the the SDH STM-N facility is to be handled transparently or if it is to be terminated and regenerated. This object only applies to STM-16 client facilities on the 10G MXP circuit pack and the STM-4 and STM-1 client facilities on the 8-port 2.5G MXP circuit pack.')
stmnLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unmapped", 1), ("odu1ToOtu2", 2), ("otu2", 3), ("subOdu1ToOtu1", 4), ("otu1", 5))).clone('otu2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnLineMapping.setStatus('current')
if mibBuilder.loadTexts: stmnLineMapping.setDescription('Used to configure the OTN configuration of the line port. If set to unmapped, there is no OTN digital wrapper added to the STM-64 or STM-16 facility. The odu1ToOtu2 and otu2 mapping is applicable to STM-64 line ports as follows: odu1ToOtu2 - the line port is configured as an OTN digitally wrapped OTU2 facility containing 4 ODU1 units. otu2 - the line port is configured as an OTN digitally wrapped OTU2 facility to which an STM-64 facility is directly mapped. The subOdu1ToOtu1 and otu1 mapping is applicable to STM-16 line ports as follows: subOdu1ToOtu1 - the line port is configured as an OTN digitally wrapped ODU1 facility containing 4 sub-ODU1 units. otu1 - the line port is configured as an OTN digitally wrapped OTU1 facility to which an STM-16 facility is directly mapped. This object applies only to the STM-64 line port of the 10G MXP circuit pack and the STM-16 line port of the 8-port 2.5G circuit pack.')
stmnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 30), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnProtSwEvtType.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwEvtType.setDescription('Indicates the type of protection switching event that has occured on an STM-N facility.')
stmnDCCTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnDCCTransparency.setStatus('current')
if mibBuilder.loadTexts: stmnDCCTransparency.setDescription('Used to configure whether the Data Communications Channel (DCC) is transported transparently through the circuit pack. Specifically, this refers to the D1, D2 and D3 section DCC bytes. This object only applies to STM-16 client facilities on the 10G MXP circuit pack and the STM-4 client facilities on the 8-port 2.5G MXP circuit pack.')
stmnTransparencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnTransparencyChannel.setStatus('current')
if mibBuilder.loadTexts: stmnTransparencyChannel.setDescription('Used to configure the VC4 channel number on which the DCC is transported. This object only applies to STM-16 client facilities on the 10G MXP circuit pack and the STM-4 client facilities on the 8-port 2.5G MXP circuit pack.')
stmnRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnRemoteId.setStatus('current')
if mibBuilder.loadTexts: stmnRemoteId.setDescription('Identifies the remote node and port to which the STM-n port is connected, in the format prescribed by the PSM network management system.')
stmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: stmnRowStatus.setDescription('Used to control the addition and deletion of entries in the STM-N table, which in turn controls provisioning and deprovisioning of STM-N facilities.')
vcnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8), )
if mibBuilder.loadTexts: vcnTable.setStatus('current')
if mibBuilder.loadTexts: vcnTable.setDescription('This table contains one row for every created SDH VC-N facility on the system. Each row contains a list of attributes that pertain to the facility.')
vcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnTypeIdx"), (0, "BTI-7000-MIB", "vcnShelfIdx"), (0, "BTI-7000-MIB", "vcnSlotIdx"), (0, "BTI-7000-MIB", "vcnPortIdx"), (0, "BTI-7000-MIB", "vcnIdx"))
if mibBuilder.loadTexts: vcnEntry.setStatus('current')
if mibBuilder.loadTexts: vcnEntry.setDescription('The conceptual row object of the VC-N table.')
vcnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 1), VcnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnTypeIdx.setDescription('The specific type of VC-N signal which is created.')
vcnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnShelfIdx.setDescription('The number of the shelf on which the VC-N facility exists.')
vcnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnSlotIdx.setDescription('The number of the slot within which the VC-N facility exists.')
vcnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPortIdx.setDescription('The number of the port on the circuit pack on which the VC-N facility exists.')
vcnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnIdx.setStatus('current')
if mibBuilder.loadTexts: vcnIdx.setDescription('The vcn channel number within the port in which the VC-N facility exists.')
vcnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 6), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnProtSwEvtType.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwEvtType.setDescription('Indicates the type of protection switching event that has occured on a VC-N facility.')
vcnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 7), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnBER.setStatus('current')
if mibBuilder.loadTexts: vcnBER.setDescription('The Bit Error Rate measured on the received channel.')
vcnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 8), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnBERTh.setStatus('current')
if mibBuilder.loadTexts: vcnBERTh.setDescription('The Bit Error Rate threshold above which the Signal Degrade condition is raised.')
vcnProtSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 9), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnProtSwStatus.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwStatus.setDescription('If the VC-N facility is configured as part of a protection grouping, this object indicates its protection status.')
geTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9), )
if mibBuilder.loadTexts: geTable.setStatus('current')
if mibBuilder.loadTexts: geTable.setDescription('This table contains one row for every provisioned Gigabit Ethernet (GE) facility on the system. Each row contains a list of attributes that pertain to the facility.')
geEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1), ).setIndexNames((0, "BTI-7000-MIB", "geShelfIdx"), (0, "BTI-7000-MIB", "geSlotIdx"), (0, "BTI-7000-MIB", "gePortIdx"))
if mibBuilder.loadTexts: geEntry.setStatus('current')
if mibBuilder.loadTexts: geEntry.setDescription('The conceptual row object of the GE table.')
geShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geShelfIdx.setStatus('current')
if mibBuilder.loadTexts: geShelfIdx.setDescription('The number of the shelf on which the GE facility is provisioned.')
geSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geSlotIdx.setStatus('current')
if mibBuilder.loadTexts: geSlotIdx.setDescription('The number of the slot within which the GE facility is provisioned.')
gePortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gePortIdx.setStatus('current')
if mibBuilder.loadTexts: gePortIdx.setDescription('The number of the port on the circuit pack on which the GE facility is provisioned.')
geOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 4), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
geOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
geOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
geOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
geOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
geOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
gePEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gePEC.setStatus('current')
if mibBuilder.loadTexts: gePEC.setDescription('An optionally provisioned transceiver Product Equipment Code used to validate the physically present transceiver on the Gigabit Ethernet port.')
geAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 11), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geAdminStatus.setStatus('current')
if mibBuilder.loadTexts: geAdminStatus.setDescription('The administrative status of the Gigabit Ethernet facility.')
geOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geOperStatus.setStatus('current')
if mibBuilder.loadTexts: geOperStatus.setDescription('The reported operational status of the Gigabit Ethernet facility.')
geOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 13), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: geOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the Gigabit Ethernet facility.')
geAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 14), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: geAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted Gigabit Ethernet facility. This value only applies if the geAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
geActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 15), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: geActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
geWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 16), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geWavelength.setStatus('current')
if mibBuilder.loadTexts: geWavelength.setDescription('The wavelength to be transmitted by the transceiver on the Gigabit Ethernet facility port. This is a mandatory object when a row of the Gigabit Ethernet table is created.')
geVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN1.setStatus('current')
if mibBuilder.loadTexts: geVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Gigabit Ethernet facility port.')
geVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN2.setStatus('current')
if mibBuilder.loadTexts: geVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Gigabit Ethernet facility port.')
geVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN3.setStatus('current')
if mibBuilder.loadTexts: geVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Gigabit Ethernet facility port.')
gePhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gePhyPMMon.setStatus('current')
if mibBuilder.loadTexts: gePhyPMMon.setDescription('Indicates if the Gigabit Ethernet facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
geFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFPSD.setStatus('current')
if mibBuilder.loadTexts: geFPSD.setDescription('Indicates if the Gigabit Ethernet facility is configured for Fault Propagation Shut Down.')
geLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: geLaserStatus.setStatus('current')
if mibBuilder.loadTexts: geLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the Gigabit Ethernet facility port.')
geId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geId1.setStatus('current')
if mibBuilder.loadTexts: geId1.setDescription('Textual data recorded by the user to describe the provisioned Gigabit Ethernet facility in a manner useful to the user.')
geFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 24), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFiberType.setStatus('current')
if mibBuilder.loadTexts: geFiberType.setDescription('An optional specification of the fiber type that interfaces to the Gigabit Ethernet facility port.')
geCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 25), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geCustom1.setStatus('current')
if mibBuilder.loadTexts: geCustom1.setDescription('A variable length text string for operating company use.')
geSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 26), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: geSpeed.setStatus('current')
if mibBuilder.loadTexts: geSpeed.setDescription('The speed of the Gigabit Ethernet facility link.')
geDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 27), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geDuplex.setStatus('current')
if mibBuilder.loadTexts: geDuplex.setDescription('The duplex mode of the Gigabit Ethernet facility interface.')
geMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 28), MediaRateType().clone('autoNegotiated')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geMediaRate.setStatus('current')
if mibBuilder.loadTexts: geMediaRate.setDescription('The configured media rate of the Gigabit Ethernet facility interface.')
geMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geMTU.setStatus('current')
if mibBuilder.loadTexts: geMTU.setDescription('The MTU size for the Gigabit Ethernet facility interface.')
geMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 30), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geMACAddr.setStatus('current')
if mibBuilder.loadTexts: geMACAddr.setDescription('The MAC address of the Gigabit Ethernet facility interface.')
geGfpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unmapped", 1), ("gfpf", 2), ("gfpt", 3))).clone('gfpt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geGfpMode.setStatus('current')
if mibBuilder.loadTexts: geGfpMode.setDescription('Configures the mapping of GE facility port onto the line port using either framed or transparent general framing protocol.')
geFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("local", 2))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFlowControl.setStatus('current')
if mibBuilder.loadTexts: geFlowControl.setDescription('Configures the flow control setting of GE facility as transparent or locally enabled.')
geRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geRemoteId.setStatus('current')
if mibBuilder.loadTexts: geRemoteId.setDescription('Identifies the remote node and port to which the gigabit ethernet port is connected, in the format prescribed by the PSM network management system.')
geRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geRowStatus.setStatus('current')
if mibBuilder.loadTexts: geRowStatus.setDescription('Used to control the addition and deletion of entries in the Gigabit Ethernet table, which in turn controls provisioning and deprovisioning of Gigabit Ethernet facilities.')
feTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10), )
if mibBuilder.loadTexts: feTable.setStatus('current')
if mibBuilder.loadTexts: feTable.setDescription('This table contains one row for every provisioned Fast Ethernet (FE) facility on the system. Each row contains a list of attributes that pertain to the facility.')
feEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1), ).setIndexNames((0, "BTI-7000-MIB", "feShelfIdx"), (0, "BTI-7000-MIB", "feSlotIdx"), (0, "BTI-7000-MIB", "fePortIdx"))
if mibBuilder.loadTexts: feEntry.setStatus('current')
if mibBuilder.loadTexts: feEntry.setDescription('The conceptual row object of the FE table.')
feShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feShelfIdx.setStatus('current')
if mibBuilder.loadTexts: feShelfIdx.setDescription('The number of the shelf on which the FE facility is provisioned.')
feSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feSlotIdx.setStatus('current')
if mibBuilder.loadTexts: feSlotIdx.setDescription('The number of the slot within which the FE facility is provisioned.')
fePortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fePortIdx.setStatus('current')
if mibBuilder.loadTexts: fePortIdx.setDescription('The number of the port on the circuit pack on which the FE facility is provisioned.')
feId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feId1.setStatus('current')
if mibBuilder.loadTexts: feId1.setDescription('Textual data recorded by the user to describe the provisioned Fast Ethernet facility in a manner useful to the user.')
feCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feCustom1.setStatus('current')
if mibBuilder.loadTexts: feCustom1.setDescription('A variable length text string for operating company use.')
feSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 6), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: feSpeed.setStatus('current')
if mibBuilder.loadTexts: feSpeed.setDescription('The speed of the Fast Ethernet facility link.')
feDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 7), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feDuplex.setStatus('current')
if mibBuilder.loadTexts: feDuplex.setDescription('The duplex mode of the Fast Ethernet facility interface.')
feMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 8), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMediaRate.setStatus('current')
if mibBuilder.loadTexts: feMediaRate.setDescription('The configured media rate of the Fast Ethernet facility interface.')
feMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMTU.setStatus('current')
if mibBuilder.loadTexts: feMTU.setDescription('The MTU size for the Fast Ethernet facility interface.')
feMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMACAddr.setStatus('current')
if mibBuilder.loadTexts: feMACAddr.setDescription('The MAC address of the Fast Ethernet facility interface.')
feRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feRemoteId.setStatus('current')
if mibBuilder.loadTexts: feRemoteId.setDescription('Identifies the remote node and port to which the fast ethernet port is connected, in the format prescribed by the PSM network management system.')
feRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feRowStatus.setStatus('current')
if mibBuilder.loadTexts: feRowStatus.setDescription('Used to control the addition and deletion of entries in the Fast Ethernet table, which in turn controls provisioning and deprovisioning of Fast Ethernet facilities.')
vcgTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11), )
if mibBuilder.loadTexts: vcgTable.setStatus('current')
if mibBuilder.loadTexts: vcgTable.setDescription('This table contains one row for every provisioned Virtual Concatenation Group (VCG) enitity on the system. Each row contains a list of attributes that pertain to the VCG.')
vcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcgShelfIdx"), (0, "BTI-7000-MIB", "vcgSlotIdx"), (0, "BTI-7000-MIB", "vcgPortIdx"), (0, "BTI-7000-MIB", "vcgIdx"))
if mibBuilder.loadTexts: vcgEntry.setStatus('current')
if mibBuilder.loadTexts: vcgEntry.setDescription('The conceptual row object of the VCG table.')
vcgShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcgShelfIdx.setDescription('The number of the shelf on which the VCG entity is located.')
vcgSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcgSlotIdx.setDescription('The number of the slot within which the VCG entity is located.')
vcgPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcgPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcgPortIdx.setDescription('The number of the port on the circuit pack on which the VCG entity is located.')
vcgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgIdx.setStatus('current')
if mibBuilder.loadTexts: vcgIdx.setDescription('The number of the VCG within the identified port.')
vcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("sts1c21v", 1), ("sts1c2v", 2), ("sts3c7v", 3), ("sts3c1v", 4), ("vc47v", 5), ("vc41v", 6), ("sts1c3v", 7), ("sts1c19v", 8), ("sts1c22v", 9), ("sts1c37v", 10), ("sts1c74v", 11), ("sts3c6v", 12), ("sts3c12v", 13), ("sts3c24v", 14), ("vc46v", 15), ("vc412v", 16), ("vc424v", 17), ("vc42v", 18), ("sts1c6v", 19), ("sts3c2v", 20), ("sts1c31v", 21), ("sts3c10v", 22), ("vc410v", 23)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgType.setStatus('current')
if mibBuilder.loadTexts: vcgType.setDescription('The format of the VCG.')
vcgTimeSlotIndices = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgTimeSlotIndices.setStatus('current')
if mibBuilder.loadTexts: vcgTimeSlotIndices.setDescription("A textual listing of the time slot indices used for the VCG. The information is formatted as a comma-separated list of of individual time slot indices or time slot index ranges. For example, a value of 'X-Y,Z' indicates that the VCG includes all time slots in the range of X to Y, plus Z, when X, Y, and Z are all integers.")
vcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgRowStatus.setStatus('current')
if mibBuilder.loadTexts: vcgRowStatus.setDescription('Used to control the addition and deletion of entries in the VCG table, which in turn controls provisioning and deprovisioning of Virtual Concatenation groups. Manual creation and deletion of VCGs is supported only on the 10G MXP, as all VCGs on the 2.5G MXP are auto-created and deleted.')
fcTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12), )
if mibBuilder.loadTexts: fcTable.setStatus('current')
if mibBuilder.loadTexts: fcTable.setDescription('This table contains one row for every provisioned fiber channel facility on the system. Each row contains a list of attributes that pertain to the facility.')
fcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcShelfIdx"), (0, "BTI-7000-MIB", "fcSlotIdx"), (0, "BTI-7000-MIB", "fcPortIdx"))
if mibBuilder.loadTexts: fcEntry.setStatus('current')
if mibBuilder.loadTexts: fcEntry.setDescription('The conceptual row object of the fiber channel table.')
fcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: fcShelfIdx.setDescription('The number of the shelf on which the fiber channel facility is provisioned.')
fcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: fcSlotIdx.setDescription('The number of the slot within which the fiber channel facility is provisioned.')
fcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcPortIdx.setStatus('current')
if mibBuilder.loadTexts: fcPortIdx.setDescription('The number of the port on the circuit pack on which the fiber channel facility is provisioned.')
fcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneGbs", 1), ("twoGbs", 2), ("fourGbs", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRate.setStatus('current')
if mibBuilder.loadTexts: fcRate.setDescription('The rate of the fiber channel signal which is provisioned.')
fcOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
fcOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
fcOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
fcOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
fcOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
fcOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
fcPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPEC.setStatus('current')
if mibBuilder.loadTexts: fcPEC.setDescription('An optionally provisioned Product Equipment Code used to validate the physically present optical transceiver on the fiber channel port.')
fcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 12), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: fcAdminStatus.setDescription('The administrative status of the fiber channel facility.')
fcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOperStatus.setStatus('current')
if mibBuilder.loadTexts: fcOperStatus.setDescription('The reported operational status of the fiber channel facility.')
fcOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: fcOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the fiber channel facility.')
fcAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: fcAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted fiber channel facility. This value only applies if the fcAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
fcActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: fcActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
fcWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcWavelength.setStatus('current')
if mibBuilder.loadTexts: fcWavelength.setDescription('The wavelength to be transmitted by the transceiver on the fiber channel facility port. This is a mandatory object when a row of the fiber channel table is created.')
fcVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN1.setStatus('current')
if mibBuilder.loadTexts: fcVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the fiber channel facility port.')
fcVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN2.setStatus('current')
if mibBuilder.loadTexts: fcVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the fiber channel facility port.')
fcVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN3.setStatus('current')
if mibBuilder.loadTexts: fcVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the fiber channel facility port.')
fcPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: fcPhyPMMon.setDescription('Indicates if the fiber channel facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
fcFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcFPSD.setStatus('current')
if mibBuilder.loadTexts: fcFPSD.setDescription('Indicates if the Fiber Channel facility is configured for Fault Propagation Shut Down.')
fcLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLaserStatus.setStatus('current')
if mibBuilder.loadTexts: fcLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the fiber channel facility port.')
fcId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcId1.setStatus('current')
if mibBuilder.loadTexts: fcId1.setDescription('Textual data recorded by the user to describe the provisioned fiber channel facility in a manner useful to the user.')
fcFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 25), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcFiberType.setStatus('current')
if mibBuilder.loadTexts: fcFiberType.setDescription('An optional specification of the fiber type that interfaces to the fiber channel facility port.')
fcCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcCustom1.setStatus('current')
if mibBuilder.loadTexts: fcCustom1.setDescription('A variable length text string for operating company use.')
fcGfpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unmapped", 1), ("gfpt", 2))).clone('gfpt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcGfpMode.setStatus('current')
if mibBuilder.loadTexts: fcGfpMode.setDescription('Configures the mapping of fiber channel facility port onto the line port using GFP. Only the transparent mapping is supported for fiber channel facilities.')
fcRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 28), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRemoteId.setStatus('current')
if mibBuilder.loadTexts: fcRemoteId.setDescription('Identifies the remote node and port to which the fiber channel port is connected, in the format prescribed by the PSM network management system.')
fcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRowStatus.setStatus('current')
if mibBuilder.loadTexts: fcRowStatus.setDescription('Used to control the addition and deletion of entries in the fiber channel table, which in turn controls provisioning and deprovisioning of fiber channel facilities.')
oscTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: oscTable.setStatus('current')
if mibBuilder.loadTexts: oscTable.setDescription('This table contains one row for every provisioned optical supervisory channel interface on the NE. Each row contains a list of attributes that pertain to the OSC.')
oscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oscShelfIdx"), (0, "BTI-7000-MIB", "oscSlotIdx"), (0, "BTI-7000-MIB", "oscIdx"))
if mibBuilder.loadTexts: oscEntry.setStatus('current')
if mibBuilder.loadTexts: oscEntry.setDescription('The conceptual row object of the optical supervisory channel table.')
oscShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscShelfIdx.setStatus('current')
if mibBuilder.loadTexts: oscShelfIdx.setDescription('The number of the shelf on which the OSC is provisioned.')
oscSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscSlotIdx.setStatus('current')
if mibBuilder.loadTexts: oscSlotIdx.setDescription('The number of the slot in which the OSC is provisioned.')
oscIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscIdx.setStatus('current')
if mibBuilder.loadTexts: oscIdx.setDescription('The number of the port on the circuit pack on which the OSC is provisioned.')
oscAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 4), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscAdminStatus.setStatus('current')
if mibBuilder.loadTexts: oscAdminStatus.setDescription('The administrative status of the OSC interface.')
oscOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscOperStatus.setStatus('current')
if mibBuilder.loadTexts: oscOperStatus.setDescription('The reported operational status of the OSC interface.')
oscOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 6), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: oscOperStatQlfr.setDescription('A textual list of qualifiers for the reported operational status of the OSC interface.')
oscCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscCustom1.setStatus('current')
if mibBuilder.loadTexts: oscCustom1.setDescription('A variable length text string for operating company use.')
oscType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscType.setStatus('current')
if mibBuilder.loadTexts: oscType.setDescription('The type of physical communication medium attached to the OSC interface.')
oscUnmbrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscUnmbrd.setStatus('current')
if mibBuilder.loadTexts: oscUnmbrd.setDescription('Indicates whether or not the OSC interface is the type that requires an IP address to be assigned.')
oscSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 10), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscSpeed.setStatus('current')
if mibBuilder.loadTexts: oscSpeed.setDescription('The speed of the OSC link.')
oscDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 11), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscDuplex.setStatus('current')
if mibBuilder.loadTexts: oscDuplex.setDescription('The duplex mode of the OSC interface.')
oscMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 12), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMediaRate.setStatus('current')
if mibBuilder.loadTexts: oscMediaRate.setDescription('The configured media rate of the OSC interface.')
oscMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMTU.setStatus('current')
if mibBuilder.loadTexts: oscMTU.setDescription('The MTU size for the OSC interface.')
oscMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMACAddr.setStatus('current')
if mibBuilder.loadTexts: oscMACAddr.setDescription('The MAC address of the OSC interface.')
oscIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscIPAddr.setStatus('current')
if mibBuilder.loadTexts: oscIPAddr.setDescription('The IP Address of the OSC interface. A value of 0.0.0.0 indicates that the interface is not assigned an IP address.')
oscIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscIPMask.setStatus('current')
if mibBuilder.loadTexts: oscIPMask.setDescription('The IP Subnet Mask of the OSC interface.')
oscIPBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscIPBcast.setStatus('current')
if mibBuilder.loadTexts: oscIPBcast.setDescription('The IP broadcast address of the OSC interface.')
oscRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscRowStatus.setStatus('current')
if mibBuilder.loadTexts: oscRowStatus.setDescription('Used to control the addition and deletion of entries in the OSC table, which in turn controls provisioning and deprovisioning of OSC interfaces.')
netMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: netMgmtTable.setStatus('current')
if mibBuilder.loadTexts: netMgmtTable.setDescription('This table contains one row for every network management interface on the NE. Each row contains a list of attributes that pertain to the interface.')
netMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "netMgmtIdx"))
if mibBuilder.loadTexts: netMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: netMgmtEntry.setDescription('The conceptual row object of the network management interface table.')
netMgmtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nms", 1), ("craft", 2))))
if mibBuilder.loadTexts: netMgmtIdx.setStatus('current')
if mibBuilder.loadTexts: netMgmtIdx.setDescription('Identifies the specific management interface.')
netMgmtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 2), AdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: netMgmtAdminStatus.setDescription('The administrative status of the management interface.')
netMgmtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtOperStatus.setStatus('current')
if mibBuilder.loadTexts: netMgmtOperStatus.setDescription('The reported operational status of the management interface.')
netMgmtOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 4), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: netMgmtOperStatQlfr.setDescription('A textual list of qualifiers for the reported operational status of the management interface.')
netMgmtIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIPAddr.setStatus('current')
if mibBuilder.loadTexts: netMgmtIPAddr.setDescription('The IP Address of the management interface.')
netMgmtIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIPMask.setStatus('current')
if mibBuilder.loadTexts: netMgmtIPMask.setDescription('The IP Subnet Mask of the management interface.')
netMgmtIPBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtIPBcast.setStatus('current')
if mibBuilder.loadTexts: netMgmtIPBcast.setDescription('The IP broadcast address of the management interface.')
netMgmtCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCustom1.setStatus('current')
if mibBuilder.loadTexts: netMgmtCustom1.setDescription('A variable length text string for operating company use.')
netMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtType.setStatus('current')
if mibBuilder.loadTexts: netMgmtType.setDescription('The type of physical communication medium attached to the management interface.')
netMgmtUnmbrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtUnmbrd.setStatus('current')
if mibBuilder.loadTexts: netMgmtUnmbrd.setDescription('Indicates whether or not the management interface is the type that requires an IP address to be assigned.')
netMgmtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 11), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtSpeed.setStatus('current')
if mibBuilder.loadTexts: netMgmtSpeed.setDescription('The speed of the management interface link.')
netMgmtDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 12), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtDuplex.setStatus('current')
if mibBuilder.loadTexts: netMgmtDuplex.setDescription('The duplex mode of the management interface.')
netMgmtMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 13), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMediaRate.setStatus('current')
if mibBuilder.loadTexts: netMgmtMediaRate.setDescription('The configured media rate of the management interface.')
netMgmtMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMTU.setStatus('current')
if mibBuilder.loadTexts: netMgmtMTU.setDescription('The MTU size for this management interface.')
netMgmtMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMACAddr.setStatus('current')
if mibBuilder.loadTexts: netMgmtMACAddr.setDescription('The MAC address of the management interface.')
serialTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3), )
if mibBuilder.loadTexts: serialTable.setStatus('current')
if mibBuilder.loadTexts: serialTable.setDescription('A table of serial communication ports on the network element. Each row contains a list of attributes that pertain to a given serial port.')
serialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "serialPortIdx"))
if mibBuilder.loadTexts: serialEntry.setStatus('current')
if mibBuilder.loadTexts: serialEntry.setDescription('The conceptual row object for the serial port table.')
serialPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: serialPortIdx.setStatus('current')
if mibBuilder.loadTexts: serialPortIdx.setDescription('The serial port instance on the NE.')
serialBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialBaudRate.setStatus('current')
if mibBuilder.loadTexts: serialBaudRate.setDescription('The baud rate of the serial port.')
serialDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDataBits.setStatus('current')
if mibBuilder.loadTexts: serialDataBits.setDescription('The number of data bits of the serial port.')
serialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialParity.setStatus('current')
if mibBuilder.loadTexts: serialParity.setDescription('The parity value of the serial port.')
serialStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialStopBits.setStatus('current')
if mibBuilder.loadTexts: serialStopBits.setDescription('The number of stop bits of the serial port.')
ethIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14), )
if mibBuilder.loadTexts: ethIntfTable.setStatus('current')
if mibBuilder.loadTexts: ethIntfTable.setDescription('This table contains one row for every provisioned Ethernet facility on the system. Each row contains a list of attributes that pertain to the facility.')
ethIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethIntfShelfIdx"), (0, "BTI-7000-MIB", "ethIntfSlotIdx"), (0, "BTI-7000-MIB", "ethIntfPortTypeIdx"), (0, "BTI-7000-MIB", "ethIntfPortIdx"))
if mibBuilder.loadTexts: ethIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ethIntfEntry.setDescription('The conceptual row object of the ethIntfTable table.')
ethIntfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ethIntfShelfIdx.setDescription('The number of the shelf in which the Ethernet facility resides.')
ethIntfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ethIntfSlotIdx.setDescription('The number of the slot in which the Ethernet facility resides.')
ethIntfPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 3), PvxL1PortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethIntfPortTypeIdx.setDescription('The type of the port on the circuit pack.')
ethIntfPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfPortIdx.setStatus('current')
if mibBuilder.loadTexts: ethIntfPortIdx.setDescription('The number of the port on the circuit pack on which the ethernet facility is provisioned.')
ethIntfOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
ethIntfOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
ethIntfOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
ethIntfOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
ethIntfOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
ethIntfOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
ethIntfPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfPEC.setStatus('current')
if mibBuilder.loadTexts: ethIntfPEC.setDescription('An optionally provisioned transceiver Product Equipment Code used to validate the physically present transceiver on the Ethernet port.')
ethIntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfAdminStatus.setDescription('The administrative status of the Ethernet facility.')
ethIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfOperStatus.setDescription('The reported operational status of the Ethernet facility.')
ethIntfOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: ethIntfOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the Ethernet facility.')
ethIntfAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: ethIntfAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted Ethernet facility. This value only applies if the AdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
ethIntfActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: ethIntfActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
ethIntfWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfWavelength.setStatus('current')
if mibBuilder.loadTexts: ethIntfWavelength.setDescription('The wavelength to be transmitted by the transceiver on the Gigabit Ethernet facility port. This is a mandatory object when a row of the Ethernet table is created.')
ethIntfVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN1.setStatus('current')
if mibBuilder.loadTexts: ethIntfVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Ethernet facility port.')
ethIntfVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN2.setStatus('current')
if mibBuilder.loadTexts: ethIntfVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Ethernet facility port.')
ethIntfVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN3.setStatus('current')
if mibBuilder.loadTexts: ethIntfVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the Ethernet facility port.')
ethIntfPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: ethIntfPhyPMMon.setDescription('Indicates if the Ethernet facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
ethIntfFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfFPSD.setStatus('current')
if mibBuilder.loadTexts: ethIntfFPSD.setDescription('Indicates if the Ethernet facility is configured for Fault Propagation Shut Down.')
ethIntfLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLaserStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the Ethernet facility port.')
ethIntfId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfId1.setStatus('current')
if mibBuilder.loadTexts: ethIntfId1.setDescription('Textual data recorded by the user to describe the provisioned facility in a manner useful to the user.')
ethIntfFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 25), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfFiberType.setStatus('current')
if mibBuilder.loadTexts: ethIntfFiberType.setDescription('An optional specification of the fiber type that interfaces to the Ethernet facility port.')
ethIntfCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfCustom1.setStatus('current')
if mibBuilder.loadTexts: ethIntfCustom1.setDescription('A variable length text string for operating company use.')
ethIntfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 27), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfSpeed.setStatus('current')
if mibBuilder.loadTexts: ethIntfSpeed.setDescription('The speed of the Ethernet facility link. This object is mandatory to create a new facility and determines the type of interface, based on speed.')
ethIntfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfDuplex.setStatus('current')
if mibBuilder.loadTexts: ethIntfDuplex.setDescription('The duplex mode of the Ethernet facility interface.')
ethIntfMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 29), MediaRateType().clone('autoNegotiated')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfMediaRate.setStatus('current')
if mibBuilder.loadTexts: ethIntfMediaRate.setDescription('The configured media rate of the Ethernet facility interface. For 10 GE interfaces, the media rate can only be autoNegotiated.')
ethIntfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1518)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfMTU.setStatus('current')
if mibBuilder.loadTexts: ethIntfMTU.setDescription('The MTU size for the Ethernet facility interface.')
ethIntfLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLinkStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfLinkStatus.setDescription('This object provides the link status information regarding the particular interface.')
ethIntfLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLagId.setStatus('current')
if mibBuilder.loadTexts: ethIntfLagId.setDescription('This object provides the information regarding the LAG Id of the particular interface.')
ethIntfLagPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 33), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfLagPortPriority.setStatus('current')
if mibBuilder.loadTexts: ethIntfLagPortPriority.setDescription('This object provides the information for lag port priority of the particular interface.')
ethIntfBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 37), BERType().clone('tenExpMinus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfBER.setStatus('current')
if mibBuilder.loadTexts: ethIntfBER.setDescription('The Signal Degrade Bit Error Ratio (SDBER) is used to configure the error rate threshold above which a Signal Degrade is declared.')
ethIntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 39), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfMACAddr.setStatus('current')
if mibBuilder.loadTexts: ethIntfMACAddr.setDescription('The MAC address of the interface.')
ethIntfLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenglanphy", 1), ("otu2gfp1", 2), ("notApplicable", 3), ("stacking", 4))).clone('tenglanphy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfLineMapping.setStatus('current')
if mibBuilder.loadTexts: ethIntfLineMapping.setDescription('For 10 GE interfaces, both 10 GE LAN PHY and OTU2 encapsulated 10GE LAN PHY will be supported. The line mapping attribute allow provisioning of either of the protocol. This attributes applies to 10 GE interfaces only. When a 10 GE interface is configured as a stacking port, this field is set to stacking. NOTE: This parameter does not apply to gigabitEthernet type interfaces, attempts to set this for gigE port types will fail. Reading this object for non-10GigE interfaces will return notApplicable.')
ethIntfErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fec", 2), ("efec", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: ethIntfErrorCorrection.setDescription('For 10G in OTU2 line-mapping mode, this object specifies the error correction mode. For interfaces in tenlanphy line-mapping mode, this object must be none. Attempts to set it to any other value while in tenglanphy mode will fail. NOTE: This parameter does not apply to gigabitEthernet type interfaces, attempts to set this for gigE port types will fail.')
ethIntfLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("oprLpbk", 2), ("rlsLpbk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: ethIntfLpbkOpCmd.setDescription('Used to perform a loopback operation on a transceiver facility as follows: - oprLpbk: operates a loopback on the transceiver - rlsLpbk: causes a previously invoked loopback to be released When read, this object returns noOp.')
ethIntfRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 43), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfRemoteId.setStatus('current')
if mibBuilder.loadTexts: ethIntfRemoteId.setDescription('Identifies the remote node and port to which the PVX ethernet port is connected, in the format prescribed by the PSM network management system.')
ethIntfMirrorConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 44), MirrorConfigType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfMirrorConfig.setStatus('current')
if mibBuilder.loadTexts: ethIntfMirrorConfig.setDescription('Mirror configuration for the physical ethernet port')
ethIntfLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfLldpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfLldpAdminStatus.setDescription("The administratively desired status of the local LLDP agent. If the associated ethIntfLldpAdminStatus object has a value of 'enabled(1)', then the LLDP agent will transmit and receive LLDP frames on this port. If the associated ethIntfLldpAdminStatus object has a value of 'disabled(2)', then LLDP agent will not transmit or receive LLDP frames on this port. If there is remote systems information which is received on this port and stored in other tables, before the port's ethIntfLldpAdminStatus becomes disabled, then the information will naturally age out.")
ethIntfLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 46), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: ethIntfLldpRemChassisIdSubtype.setDescription('The type of encoding used to identify the chassis associated with the remote system.')
ethIntfLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 47), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemChassisId.setStatus('current')
if mibBuilder.loadTexts: ethIntfLldpRemChassisId.setDescription('The string value used to identify the chassis component associated with the remote system.')
ethIntfLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 48), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: ethIntfLldpRemPortIdSubtype.setDescription("The type of port identifier encoding used in the associated 'ethIntfLldpRemPortId' object.")
ethIntfLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 49), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemPortId.setStatus('current')
if mibBuilder.loadTexts: ethIntfLldpRemPortId.setDescription('The string value used to identify the port component associated with the remote system.')
ethIntfBouncingStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfBouncingStateChangeCount.setStatus('current')
if mibBuilder.loadTexts: ethIntfBouncingStateChangeCount.setDescription(' Count of the Ethernet facility operational state changes sinse last reboot')
ethIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ethIntfRowStatus.setDescription('Used to control the addition and deletion of entries in the Ethernet table, which in turn controls provisioning and deprovisioning of Ethernet facilities.')
odunTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15), )
if mibBuilder.loadTexts: odunTable.setStatus('current')
if mibBuilder.loadTexts: odunTable.setDescription('This table contains one row for every ODU-N facility on the system.')
odunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1), ).setIndexNames((0, "BTI-7000-MIB", "odunTypeIdx"), (0, "BTI-7000-MIB", "odunShelfIdx"), (0, "BTI-7000-MIB", "odunSlotIdx"), (0, "BTI-7000-MIB", "odunPortIdx"))
if mibBuilder.loadTexts: odunEntry.setStatus('current')
if mibBuilder.loadTexts: odunEntry.setDescription('The conceptual row object of the ODU-N table.')
odunTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 1), OdunType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunTypeIdx.setStatus('current')
if mibBuilder.loadTexts: odunTypeIdx.setDescription('The specific type of ODU-N which is provisioned.')
odunShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunShelfIdx.setStatus('current')
if mibBuilder.loadTexts: odunShelfIdx.setDescription('The number of the shelf on which the ODU-N facility is provisioned.')
odunSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunSlotIdx.setStatus('current')
if mibBuilder.loadTexts: odunSlotIdx.setDescription('The number of the slot within which the ODU-N facility is provisioned.')
odunPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunPortIdx.setStatus('current')
if mibBuilder.loadTexts: odunPortIdx.setDescription('The number of the port on the circuit pack on which the ODU-N facility is provisioned.')
odunIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunIdx.setStatus('current')
if mibBuilder.loadTexts: odunIdx.setDescription('The ODU-N channel number within the port in which the ODU-N facility exists.')
briTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16), )
if mibBuilder.loadTexts: briTable.setStatus('current')
if mibBuilder.loadTexts: briTable.setDescription('This table contains one row for every provisioned Bit Rate Independent (BRI) facility on the system. Each row contains a list of attributes that pertain to the facility.')
briEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1), ).setIndexNames((0, "BTI-7000-MIB", "briShelfIdx"), (0, "BTI-7000-MIB", "briSlotIdx"), (0, "BTI-7000-MIB", "briPortIdx"))
if mibBuilder.loadTexts: briEntry.setStatus('current')
if mibBuilder.loadTexts: briEntry.setDescription('The conceptual row object of the BRI table.')
briShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briShelfIdx.setStatus('current')
if mibBuilder.loadTexts: briShelfIdx.setDescription('The number of the shelf on which the BRI facility is provisioned.')
briSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briSlotIdx.setStatus('current')
if mibBuilder.loadTexts: briSlotIdx.setDescription('The number of the slot within which the BRI facility is provisioned.')
briPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briPortIdx.setStatus('current')
if mibBuilder.loadTexts: briPortIdx.setDescription('The number of the port on the circuit pack on which the BRI facility is provisioned.')
briProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fx100", 1), ("escon", 2), ("sdSdi", 3), ("hdSdi", 4), ("hdSdi1001", 5), ("dvbAsi", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briProtocol.setStatus('current')
if mibBuilder.loadTexts: briProtocol.setDescription('The protocol of the BRI signal which is provisioned.')
briOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrReceivedMinTh.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMinTh.setDescription('This is the optical power received minimum threshold.')
briOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxTh.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxTh.setDescription('This is the optical power received maximum threshold.')
briOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinTh.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinTh.setDescription('This is the optical power transmitted minimum threshold.')
briOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxTh.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxTh.setDescription('This is the optical power transmitted maximum threshold.')
briOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briOpticalPwrReceived.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceived.setDescription('The optical power received on the input of the transceiver.')
briOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briOpticalPwrTransmitted.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmitted.setDescription('The optical power transmitted at the output of the transceiver.')
briPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briPEC.setStatus('current')
if mibBuilder.loadTexts: briPEC.setDescription('An optionally provisioned Product Equipment Code used to validate the physically present optical transceiver on the BRI port.')
briAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 12), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briAdminStatus.setStatus('current')
if mibBuilder.loadTexts: briAdminStatus.setDescription('The administrative status of the BRI facility.')
briOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briOperStatus.setStatus('current')
if mibBuilder.loadTexts: briOperStatus.setDescription('The reported operational status of the BRI facility.')
briOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: briOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the BRI facility.')
briAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: briAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted BRI facility. This value only applies if the briAdminStatus object is set to autoEnabled. Otherwise, the value returned is 000-00.')
briActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: briActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
briWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briWavelength.setStatus('current')
if mibBuilder.loadTexts: briWavelength.setDescription('The wavelength to be transmitted by the transceiver on the BRI facility port. This is a mandatory object when a row of the fiber channel table is created.')
briVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN1.setStatus('current')
if mibBuilder.loadTexts: briVendorPN1.setDescription('An optionally provisioned part number used to validate the optical transceiver on the BRI facility port.')
briVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN2.setStatus('current')
if mibBuilder.loadTexts: briVendorPN2.setDescription('An optionally provisioned part number used to validate the optical transceiver on the BRI facility port.')
briVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN3.setStatus('current')
if mibBuilder.loadTexts: briVendorPN3.setDescription('An optionally provisioned part number used to validate the optical transceiver on the BRI facility port.')
briPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briPhyPMMon.setStatus('current')
if mibBuilder.loadTexts: briPhyPMMon.setDescription('Indicates if the BRI facility is configured to report threshold crossing conditions for physical layer performance monitoring parameters.')
briLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briLaserStatus.setStatus('current')
if mibBuilder.loadTexts: briLaserStatus.setDescription('An indication of the operational status of the transceiver laser on the BRI facility port.')
briId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briId1.setStatus('current')
if mibBuilder.loadTexts: briId1.setDescription('Textual data recorded by the user to describe the provisioned BRI facility in a manner useful to the user.')
briFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 24), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briFiberType.setStatus('current')
if mibBuilder.loadTexts: briFiberType.setDescription('An optional specification of the fiber type that interfaces to the BRI facility port.')
briCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 25), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briCustom1.setStatus('current')
if mibBuilder.loadTexts: briCustom1.setDescription('A variable length text string for operating company use.')
briBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 26), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briBitRate.setStatus('current')
if mibBuilder.loadTexts: briBitRate.setDescription('The bit rate transmitted by the BRI facility port in Mbps.')
briRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briRemoteId.setStatus('current')
if mibBuilder.loadTexts: briRemoteId.setDescription('Identifies the remote node and port to which the Bitrate Independent port is connected, in the format prescribed by the PSM network management system.')
briRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briRowStatus.setStatus('current')
if mibBuilder.loadTexts: briRowStatus.setDescription('Used to control the addition and deletion of entries in the BRI table, which in turn controls provisioning and deprovisioning of BRI facilities.')
oaCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: oaCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the optical amplifier facilities on the NE.')
oaCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaCrntPMOaTypeIdx"), (0, "BTI-7000-MIB", "oaCrntPMShelfIdx"), (0, "BTI-7000-MIB", "oaCrntPMSlotIdx"), (0, "BTI-7000-MIB", "oaCrntPMOaIdx"), (0, "BTI-7000-MIB", "oaCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: oaCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMEntry.setDescription('The row entry object of the optical amplifier current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given optical amplifier.')
oaCrntPMOaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 1), OaType())
if mibBuilder.loadTexts: oaCrntPMOaTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOaTypeIdx.setDescription('The type of the optical amplifier targeted for PM retrieval.')
oaCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMShelfIdx.setDescription('The number of the shelf on which the amplifier targeted for PMs is provisioned.')
oaCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMSlotIdx.setDescription('The number of the slot within which the optical amplifier targeted for PMs is provisioned.')
oaCrntPMOaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaCrntPMOaIdx.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOaIdx.setDescription('The number of the amplifier port on which the circuit pack for PMs is targeted.')
oaCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: oaCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
oaCrntPMCaseTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMCaseTempValue.setDescription('The optical amplifier case temperature.')
oaCrntPMCaseTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMCaseTempTimeStamp.setDescription('The date and time stamp of the case temperature value.')
oaCrntPMCaseTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMCaseTempValidity.setDescription('Indicates the validity of the provided case temperature value.')
oaCrntPMLaser1TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1TempValue.setDescription('The optical amplifier laser 1 temperature.')
oaCrntPMLaser1TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1TempTimeStamp.setDescription('The date and time stamp of the laser 1 temperature value.')
oaCrntPMLaser1TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1TempValidity.setDescription('Indicates the validity of the provided laser 1 temperature value.')
oaCrntPMLaser2TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2TempValue.setDescription('The optical amplifier laser 2 temperature.')
oaCrntPMLaser2TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2TempTimeStamp.setDescription('The date and time stamp of the laser 2 temperature value.')
oaCrntPMLaser2TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2TempValidity.setDescription('Indicates the validity of the provided laser 2 temperature value.')
oaCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 15), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPRValue.setDescription('The optical power received on the input of the amplifer.')
oaCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
oaCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
oaCrntPMSSIOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 18), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMSSIOPRValue.setDescription('The optical power received on the input of the second stage of the amplifier.')
oaCrntPMSSIOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMSSIOPRTimeStamp.setDescription('The date and time stamp of the second stage input optical power received value.')
oaCrntPMSSIOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMSSIOPRValidity.setDescription('Indicates the validity of the provided second stage input optical power received value.')
oaCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPTValue.setDescription('The optical power transmitted at the output of the amplifier.')
oaCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
oaCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
oaCrntPMMSInsLossValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 24), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMMSInsLossValue.setDescription('The mid-stage insertion loss.')
oaCrntPMMSInsLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMMSInsLossTimeStamp.setDescription('The date and time stamp of the mid-stage insertion loss value.')
oaCrntPMMSInsLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMMSInsLossValidity.setDescription('Indicates the validity of the provided mid-stage insertion loss value.')
oaCrntPMEffectiveGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 27), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValue.setDescription('The effective gain of the optical amplifier. This reading is compensated for amplified spontaneous emissions.')
oaCrntPMEffectiveGainTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMEffectiveGainTimeStamp.setDescription('The date and time stamp of the effective gain value.')
oaCrntPMEffectiveGainValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValidity.setDescription('Indicates the validity of the provided effective gain value.')
oaCrntPMFSOOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 30), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMFSOOPTValue.setDescription('The optical power transmitted at the output of the first stage of the amplifier.')
oaCrntPMFSOOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMFSOOPTTimeStamp.setDescription('The date and time stamp of the first stage output optical power transmitted value.')
oaCrntPMFSOOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMFSOOPTValidity.setDescription('Indicates the validity of the provided first stage output optical power transmitted value.')
oaCrntPMLaser1CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 33), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValue.setDescription('The optical amplifier laser 1 current.')
oaCrntPMLaser1CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentTimeStamp.setDescription('The date and time stamp of the laser 1 current value.')
oaCrntPMLaser1CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValidity.setDescription('Indicates the validity of the provided laser 1 current value.')
oaCrntPMLaser2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 36), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValue.setDescription('The optical amplifier laser 2 current.')
oaCrntPMLaser2CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentTimeStamp.setDescription('The date and time stamp of the laser 2 current value.')
oaCrntPMLaser2CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValidity.setDescription('Indicates the validity of the provided laser 2 current value.')
oaCrntPMLaser1PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 39), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValue.setDescription('The optical amplifier laser 1 power.')
oaCrntPMLaser1PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1PowerTimeStamp.setDescription('The date and time stamp of the laser 1 power value.')
oaCrntPMLaser1PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValidity.setDescription('Indicates the validity of the provided laser 1 power value.')
oaCrntPMLaser2PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 42), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValue.setDescription('The optical amplifier laser 2 power.')
oaCrntPMLaser2PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2PowerTimeStamp.setDescription('The date and time stamp of the laser 2 power value.')
oaCrntPMLaser2PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValidity.setDescription('Indicates the validity of the provided laser 2 power value.')
oaCrntPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 45), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOBRValue.setDescription('The back reflected optical power measured at the output of the second stage of the optical amplifier.')
oaCrntPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOBRTimeStamp.setDescription('The date and time stamp of the optical back reflection value.')
oaCrntPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMOBRValidity.setDescription('Indicates the validity of the provided optical back reflection value.')
oaCrntPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 48), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOAValue.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMVOAValue.setDescription('The variable optical attenuation of the amplifier.')
oaCrntPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOATimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMVOATimeStamp.setDescription('The date and time stamp of the variable optical attenuation value.')
oaCrntPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOAValidity.setStatus('current')
if mibBuilder.loadTexts: oaCrntPMVOAValidity.setDescription('Indicates the validity of the provided variable optical attenuation value.')
oaHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2), )
if mibBuilder.loadTexts: oaHistPMTable.setStatus('current')
if mibBuilder.loadTexts: oaHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the optical amplifier facilities on the NE.')
oaHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaHistPMOaTypeIdx"), (0, "BTI-7000-MIB", "oaHistPMShelfIdx"), (0, "BTI-7000-MIB", "oaHistPMSlotIdx"), (0, "BTI-7000-MIB", "oaHistPMOaIdx"), (0, "BTI-7000-MIB", "oaHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "oaHistPMIntervalIdx"))
if mibBuilder.loadTexts: oaHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: oaHistPMEntry.setDescription('The row entry object of the optical amplifier historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given optical amplifier.')
oaHistPMOaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 1), OaType())
if mibBuilder.loadTexts: oaHistPMOaTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOaTypeIdx.setDescription('The type of the optical amplifier targeted for PM retrieval.')
oaHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMShelfIdx.setDescription('The number of the shelf on which the amplifier targeted for PMs is provisioned.')
oaHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMSlotIdx.setDescription('The number of the slot within which the optical amplifier targeted for PMs is provisioned.')
oaHistPMOaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaHistPMOaIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOaIdx.setDescription('The number of the amplifier port on the circuit pack targeted for PMs.')
oaHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: oaHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
oaHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: oaHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: oaHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1..96 for 15-minute bins, and for 1-day historical bins, the value is 1.')
oaHistPMCaseTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMCaseTempValue.setDescription('The optical amplifier case temperature.')
oaHistPMCaseTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMCaseTempTimeStamp.setDescription('The date and time stamp of the case temperature value.')
oaHistPMCaseTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMCaseTempValidity.setDescription('Indicates the validity of the provided case temperature value.')
oaHistPMLaser1TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1TempValue.setDescription('The optical amplifier laser 1 temperature.')
oaHistPMLaser1TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1TempTimeStamp.setDescription('The date and time stamp of the laser 1 temperature value.')
oaHistPMLaser1TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1TempValidity.setDescription('Indicates the validity of the provided laser 1 temperature value.')
oaHistPMLaser2TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2TempValue.setDescription('The optical amplifier laser 2 temperature.')
oaHistPMLaser2TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2TempTimeStamp.setDescription('The date and time stamp of the laser 2 temperature value.')
oaHistPMLaser2TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2TempValidity.setDescription('Indicates the validity of the provided laser 2 temperature value.')
oaHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 16), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPRValue.setDescription('The optical power received on the input of the amplifer.')
oaHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
oaHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
oaHistPMSSIOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 19), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMSSIOPRValue.setDescription('The optical power received on the input of the second stage of the amplifier.')
oaHistPMSSIOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMSSIOPRTimeStamp.setDescription('The date and time stamp of the second stage input optical power received value.')
oaHistPMSSIOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMSSIOPRValidity.setDescription('Indicates the validity of the provided second stage input optical power received value.')
oaHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 22), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPTValue.setDescription('The optical power transmitted at the output of the amplifier.')
oaHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
oaHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
oaHistPMMSInsLossValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 25), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMMSInsLossValue.setDescription('The mid-stage insertion loss.')
oaHistPMMSInsLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMMSInsLossTimeStamp.setDescription('The date and time stamp of the mid-stage insertion loss value.')
oaHistPMMSInsLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMMSInsLossValidity.setDescription('Indicates the validity of the provided mid-stage insertion loss value.')
oaHistPMEffectiveGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 28), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMEffectiveGainValue.setDescription('The effective gain of the optical amplifier. This reading is compensated for amplified spontaneous emissions.')
oaHistPMEffectiveGainTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMEffectiveGainTimeStamp.setDescription('The date and time stamp of the effective gain value.')
oaHistPMEffectiveGainValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMEffectiveGainValidity.setDescription('Indicates the validity of the provided effective gain value.')
oaHistPMFSOOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 31), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMFSOOPTValue.setDescription('The optical power transmitted at the output of the first stage of the amplifier.')
oaHistPMFSOOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMFSOOPTTimeStamp.setDescription('The date and time stamp of the first stage output optical power transmitted value.')
oaHistPMFSOOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMFSOOPTValidity.setDescription('Indicates the validity of the provided first stage output optical power transmitted value.')
oaHistPMLaser1CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 34), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValue.setDescription('The optical amplifier laser 1 current.')
oaHistPMLaser1CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1CurrentTimeStamp.setDescription('The date and time stamp of the laser 1 current value.')
oaHistPMLaser1CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValidity.setDescription('Indicates the validity of the provided laser 1 current value.')
oaHistPMLaser2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 37), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValue.setDescription('The optical amplifier laser 2 current.')
oaHistPMLaser2CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2CurrentTimeStamp.setDescription('The date and time stamp of the laser 2 current value.')
oaHistPMLaser2CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValidity.setDescription('Indicates the validity of the provided laser 2 current value.')
oaHistPMLaser1PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 40), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1PowerValue.setDescription('The optical amplifier laser 1 power.')
oaHistPMLaser1PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1PowerTimeStamp.setDescription('The date and time stamp of the laser 1 power value.')
oaHistPMLaser1PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser1PowerValidity.setDescription('Indicates the validity of the provided laser 1 power value.')
oaHistPMLaser2PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 43), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2PowerValue.setDescription('The optical amplifier laser 2 power.')
oaHistPMLaser2PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2PowerTimeStamp.setDescription('The date and time stamp of the laser 2 power value.')
oaHistPMLaser2PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMLaser2PowerValidity.setDescription('Indicates the validity of the provided laser 2 power value.')
oaHistPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 46), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOBRValue.setDescription('The back reflected optical power measured at the output of the second stage of the optical amplifier.')
oaHistPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOBRTimeStamp.setDescription('The date and time stamp of the optical back reflection value.')
oaHistPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMOBRValidity.setDescription('Indicates the validity of the provided optical back reflection value.')
oaHistPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 49), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOAValue.setStatus('current')
if mibBuilder.loadTexts: oaHistPMVOAValue.setDescription('The variable optical attenuation of the amplifier.')
oaHistPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOATimeStamp.setStatus('current')
if mibBuilder.loadTexts: oaHistPMVOATimeStamp.setDescription('The date and time stamp of the variable optical attenuation value.')
oaHistPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOAValidity.setStatus('current')
if mibBuilder.loadTexts: oaHistPMVOAValidity.setDescription('Indicates the validity of the provided variable optical attenuation value.')
xcvrCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3), )
if mibBuilder.loadTexts: xcvrCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the optical transceiver facilities on the NE.')
xcvrCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrCrntPMTypeIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMShelfIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMSlotIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: xcvrCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMEntry.setDescription('The row entry object of the optical transceiver current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given optical transceiver.')
xcvrCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTypeIdx.setDescription('The type of the optical transceiver targeted for PMs.')
xcvrCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMShelfIdx.setDescription('The shelf number on which the optical transceiver targeted for PMs is provisioned.')
xcvrCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSlotIdx.setDescription('The slot number on which the optical transceiver targeted for PMs is provisioned.')
xcvrCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMIdx.setDescription('The optical transceiver port number on the circuit pack that is targeted for PMs.')
xcvrCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
xcvrCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRValue.setDescription('The optical power received on the input of the transceiver.')
xcvrCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
xcvrCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
xcvrCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTValue.setDescription('The optical power transmitted at the output of the transceiver.')
xcvrCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
xcvrCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
xcvrCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTempValue.setDescription('The optical transceiver temperature.')
xcvrCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
xcvrCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
xcvrCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValue.setDescription('The transceiver supply voltage.')
xcvrCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
xcvrCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
xcvrCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMLBCValue.setDescription('The transceiver laser bias current.')
xcvrCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
xcvrCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
xcvrCrntPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVSValue.setDescription('The count of coding violations at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrCrntPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
xcvrCrntPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
xcvrCrntPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESSValue.setDescription('The count of errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrCrntPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
xcvrCrntPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
xcvrCrntPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESSValue.setDescription('The count of severely errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrCrntPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
xcvrCrntPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
xcvrCrntPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrCrntPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
xcvrCrntPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
xcvrCrntPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSEBValue.setDescription('The count of regenerator section errored blocks. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSEBTimeStamp.setDescription('The date and time stamp of the regenerator section errored blocks value.')
xcvrCrntPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSEBValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSEBValidity.setDescription('Indicates the validity of the provided regenerator section errored blocks value.')
xcvrCrntPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValue.setDescription('The count of regenerator section background block errors. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSBBETimeStamp.setDescription('The date and time stamp of the regenerator section background block errors value.')
xcvrCrntPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValidity.setDescription('Indicates the validity of the provided regenerator section background block errors value.')
xcvrCrntPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSESValue.setDescription('The count of regenerator section errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSESTimeStamp.setDescription('The date and time stamp of the regenerator section errored seconds value.')
xcvrCrntPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSESValidity.setDescription('Indicates the validity of the provided regenerator section errored seconds value.')
xcvrCrntPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSSESValue.setDescription('The count of regenerator section severely errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSSESTimeStamp.setDescription('The date and time stamp of the regenerator section severely errored seconds value.')
xcvrCrntPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSSESValidity.setDescription('Indicates the validity of the provided regenerator section severely errored seconds value.')
xcvrCrntPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValue.setDescription('The count of regenerator section out-of-frame seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSOFSTimeStamp.setDescription('The date and time stamp of the regenerator section out-of-frame seconds value.')
xcvrCrntPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValidity.setDescription('Indicates the validity of the provided regenerator section out-of-frame seconds value.')
xcvrCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVValue.setDescription('The count of coding violations. This object applies only to transciever ports provisioned for the gigabit ethernet protocol or a fiber channel protocol.')
xcvrCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVTimeStamp.setDescription('The date and time stamp of the coding violations value.')
xcvrCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVValidity.setDescription('Indicates the validity of the provided coding violations value.')
xcvrCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESValue.setDescription('The count of errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESTimeStamp.setDescription('The date and time stamp of the errored seconds value.')
xcvrCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESValidity.setDescription('Indicates the validity of the provided errored seconds value.')
xcvrCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESValue.setDescription('The count of severely errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESTimeStamp.setDescription('The date and time stamp of the severely errored seconds value.')
xcvrCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESValidity.setDescription('Indicates the validity of the provided severely errored seconds value.')
xcvrCrntPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValue.setDescription('The count of invalid blocks. This object applies only to transciever ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMINVBLKTimeStamp.setDescription('The date and time stamp of the invalid blocks value.')
xcvrCrntPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValidity.setDescription('Indicates the validity of the provided invalid blocks value.')
xcvrCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
xcvrCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
xcvrCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
xcvrCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
xcvrCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
xcvrCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
xcvrCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 69), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValue.setDescription('The total number of bytes of data (including those in bad frames) received (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXTimeStamp.setDescription('The date and time stamp of the received bytes count value.')
xcvrCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValidity.setDescription('Indicates the validity of the provided received bytes count value.')
xcvrCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXInitialize.setDescription('Used to initialize the value of the xcvrCrntPMTBYCRXValue object to 0.')
xcvrCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 73), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValue.setDescription('The total number of received frames (incl. bad frames, broadcast frames, and multicast frames received). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXTimeStamp.setDescription('The date and time stamp of the total received frames count value.')
xcvrCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValidity.setDescription('Indicates the validity of the provided received frames count value.')
xcvrCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXInitialize.setDescription('Used to initialize the value of the xcvrCrntPMTFRCRXValue object to 0.')
xcvrCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 77), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 78), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
xcvrCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 79), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
xcvrCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMBCSTInitialize.setDescription('Used to initialize the value of the xcvrCrntPMBCSTValue object to 0.')
xcvrCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 81), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 82), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
xcvrCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 83), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
xcvrCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMMCSTInitialize.setDescription('Used to initialize the value of the xcvrCrntPMMCSTValue object to 0.')
xcvrCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 85), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 86), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
xcvrCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 87), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
xcvrCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE64Value object to 0.')
xcvrCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 89), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
xcvrCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
xcvrCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE65To127Value object to 0.')
xcvrCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 93), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
xcvrCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
xcvrCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE128To255Value object to 0.')
xcvrCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 97), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
xcvrCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
xcvrCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE256To511Value object to 0.')
xcvrCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 101), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
xcvrCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
xcvrCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE512To1023Value object to 0.')
xcvrCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 105), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
xcvrCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
xcvrCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZE1024To1518Value object to 0.')
xcvrCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 109), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
xcvrCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
xcvrCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the xcvrCrntPMSIZEOver1518Value object to 0.')
xcvrCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 113), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFCSEValue.setDescription('The count of packets that had a valid length but had either a Frame Check Sequence (FCS) or a bad FCS with a non-integral number of octets (Alignment Error) . This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFCSETimeStamp.setDescription('The date and time stamp of the count of packets with bad FCS or alignment error.')
xcvrCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFCSEValidity.setDescription('Indicates the validity of the provided count of packets with bad FCS or alignment error.')
xcvrCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRDRValue.setDescription('The total number of dropped frames due to lack of resources or otherwise. Note that this number is not necessarily the number of frames dropped; it is just the number of times that it could be detected. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRDRTimeStamp.setDescription('The date and time stamp of the count of dropped packets.')
xcvrCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRDRValidity.setDescription('Indicates the validity of the provided count of dropped packets.')
xcvrCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 119), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 120), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
xcvrCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 121), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
xcvrCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 122), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 123), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
xcvrCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 124), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
xcvrCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 125), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
xcvrCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
xcvrCrntPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 128), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMJABRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMJABRValue.setDescription('The total number of frames received that were longer than 14336 9600 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with non-integral number of octets (Alignment Error). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrCrntPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMJABRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMJABRTimeStamp.setDescription('The date and time stamp of the count of received jabbers.')
xcvrCrntPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMJABRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMJABRValidity.setDescription('Indicates the validity of the provided count of received jabbers.')
xcvrCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 131), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValue.setDescription('The count of OTN digital wrapper layer errored blocks.')
xcvrCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 132), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer errored blocks value.')
xcvrCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 133), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer errored blocks value.')
xcvrCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 134), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValue.setDescription('The count of OTN digital wrapper layer background block errors.')
xcvrCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 135), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer background block errors.')
xcvrCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 136), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer background block errors value.')
xcvrCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 137), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUESValue.setDescription('The count of errored seconds at the OTN digital wrapper layer.')
xcvrCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUESTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer errored seconds value.')
xcvrCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUESValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer errored seconds value.')
xcvrCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 140), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValue.setDescription('The count of severely errored seconds at the OTN digital wrapper layer.')
xcvrCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer severely errored seconds value.')
xcvrCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer severely errored seconds value.')
xcvrCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 143), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValue.setDescription('The count of Out-Of-Frame seconds at the OTN digital wrapper layer.')
xcvrCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 144), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer Out-Of-Frame seconds value.')
xcvrCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 145), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer Out-of-Frame seconds value.')
xcvrCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 146), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Value.setDescription('A second supply voltage value on the transceiver.')
xcvrCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 147), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
xcvrCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 148), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
xcvrCrntPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 149), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMCVSValue object to 0.')
xcvrCrntPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 150), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMESSValue object to 0.')
xcvrCrntPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 151), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMSESSValue object to 0.')
xcvrCrntPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 152), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSEFSSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMSEFSSValue object to 0.')
xcvrCrntPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 153), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSEBInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSEBValue object to 0.')
xcvrCrntPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 154), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSBBEInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSBBEValue object to 0.')
xcvrCrntPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 155), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSESValue object to 0.')
xcvrCrntPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 156), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSSESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSSESValue object to 0.')
xcvrCrntPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 157), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSOFSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSOFSValue object to 0.')
xcvrCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 158), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMCVInitialize.setDescription('Used to initialize the value of the xcvrCrntPMCVValue object to 0.')
xcvrCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 159), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMESValue object to 0.')
xcvrCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 160), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMSESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMSESValue object to 0.')
xcvrCrntPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 161), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMINVBLKInitialize.setDescription('Used to initialize the value of the xcvrCrntPMINVBLKValue object to 0.')
xcvrCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 162), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCRInitialize.setDescription('Used to initialize the value of the xcvrCrntPMNBITCRValue object to 0.')
xcvrCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 163), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRInitialize.setDescription('Used to initialize the value of the xcvrCrntPMNBYTCRValue object to 0.')
xcvrCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 164), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWInitialize.setDescription('Used to initialize the value of the xcvrCrntPMUNCRCDWValue object to 0.')
xcvrCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 165), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFCSEInitialize.setDescription('Used to initialize the value of the xcvrCrntPMFCSEValue object to 0.')
xcvrCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 166), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRDRInitialize.setDescription('Used to initialize the value of the xcvrCrntPMFRDRValue object to 0.')
xcvrCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 167), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUSIZEInitialize.setDescription('Used to initialize the value of the xcvrCrntPMUSIZEValue object to 0.')
xcvrCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 168), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOSIZEInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOSIZEValue object to 0.')
xcvrCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 169), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMFRGTInitialize.setDescription('Used to initialize the value of the xcvrCrntPMFRGTValue object to 0.')
xcvrCrntPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 170), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMJABRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMJABRInitialize.setDescription('Used to initialize the value of the xcvrCrntPMJABRValue object to 0.')
xcvrCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 171), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUEBInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUEBValue object to 0.')
xcvrCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 172), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUBBEValue object to 0.')
xcvrCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 173), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUESValue object to 0.')
xcvrCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 174), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUSESInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUSESValue object to 0.')
xcvrCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 175), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUOFSValue object to 0.')
xcvrCrntPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 176), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASSValue.setDescription('The count of unavailable seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrCrntPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 177), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASSTimeStamp.setDescription('The date and time stamp of the section layer unavailable seconds value.')
xcvrCrntPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 178), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASSValidity.setDescription('Indicates the validity of the provided section layer unavailable seconds value.')
xcvrCrntPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 179), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASSInitialize.setDescription('Used to initialize the value of the xcvrCrntPMUASSValue object to 0.')
xcvrCrntPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 180), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSUASValue.setDescription('The count of regenerator section unavailable seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrCrntPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 181), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSUASTimeStamp.setDescription('The date and time stamp of the regenerator section unavailable seconds value.')
xcvrCrntPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 182), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSUASValidity.setDescription('Indicates the validity of the provided regenerator section unavailable seconds value.')
xcvrCrntPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 183), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMRSUASInitialize.setDescription('Used to initialize the value of the xcvrCrntPMRSUASValue object to 0.')
xcvrCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 184), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the gigabit ethernet protocol or a fiber channel protocol.')
xcvrCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 185), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
xcvrCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 186), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
xcvrCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 187), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMUASInitialize.setDescription('Used to initialize the value of the xcvrCrntPMUASValue object to 0.')
xcvrCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 188), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValue.setDescription('The count of unavailable seconds at the OTN digital wrapper layer.')
xcvrCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 189), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer unavailable seconds value.')
xcvrCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 190), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer unavailable seconds value.')
xcvrCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 191), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTUUASInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTUUASValue object to 0.')
xcvrCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 192), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValue.setDescription('The instantaneous BER of transciever ports provisioned for the 10 gigabit ethernet LAN with FEC protocol.')
xcvrCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 193), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
xcvrCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 194), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
xcvrCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 195), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNBERInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTNBERValue object to 0.')
xcvrCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 196), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValue.setDescription('The average/interval BER of transciever ports provisioned for the 10 gigabit ethernet LAN with FEC protocol.')
xcvrCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 197), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the average/interval BER.')
xcvrCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 198), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided average/interval BER.')
xcvrCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 199), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOTNAVGBERValue object to 0.')
xcvrCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 200), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 201), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
xcvrCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 202), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
xcvrCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 203), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the xcvrCrntPMNBITCR64BitValue object to 0.')
xcvrCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 204), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 205), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
xcvrCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 206), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
xcvrCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 207), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the xcvrCrntPMNBYTCR64BitValue object to 0.')
xcvrCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 208), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
xcvrCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 209), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
xcvrCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 210), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
xcvrCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 211), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPRMinValue object to 0.')
xcvrCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 212), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
xcvrCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 213), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
xcvrCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 214), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
xcvrCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 215), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPRMaxValue object to 0.')
xcvrCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 216), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
xcvrCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 217), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
xcvrCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 218), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
xcvrCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 219), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPRAvgValue object to 0.')
xcvrCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 220), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
xcvrCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 221), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
xcvrCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 222), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
xcvrCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 223), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPTMinValue object to 0.')
xcvrCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 224), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
xcvrCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 225), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
xcvrCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 226), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
xcvrCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 227), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPTMaxValue object to 0.')
xcvrCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 228), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
xcvrCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 229), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
xcvrCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 230), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
xcvrCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 231), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the xcvrCrntPMOPTAvgValue object to 0.')
xcvrHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4), )
if mibBuilder.loadTexts: xcvrHistPMTable.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the optical transceiver facilities on the NE.')
xcvrHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrHistPMTypeIdx"), (0, "BTI-7000-MIB", "xcvrHistPMShelfIdx"), (0, "BTI-7000-MIB", "xcvrHistPMSlotIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIntervalIdx"))
if mibBuilder.loadTexts: xcvrHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMEntry.setDescription('The row entry object of the optical transceiver historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given optical transceiver.')
xcvrHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTypeIdx.setDescription('The type of the optical transceiver targeted for PMs.')
xcvrHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMShelfIdx.setDescription('The number of the shelf on which the optical transceiver targeted for PMs is provisioned.')
xcvrHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSlotIdx.setDescription('The number of the slot within which the optical transceiver targeted for PMs is provisioned.')
xcvrHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMIdx.setDescription('The number of the transceiver port targeted for PMs.')
xcvrHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
xcvrHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: xcvrHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
xcvrHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRValue.setDescription('The optical power received on the input of the transceiver.')
xcvrHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
xcvrHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
xcvrHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTValue.setDescription('The optical power transmitted at the output of the transceiver.')
xcvrHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
xcvrHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
xcvrHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTempValue.setDescription('The optical transceiver temperature.')
xcvrHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
xcvrHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
xcvrHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValue.setDescription('The transceiver supply voltage.')
xcvrHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
xcvrHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
xcvrHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMLBCValue.setDescription('The transceiver laser bias current.')
xcvrHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
xcvrHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
xcvrHistPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVSValue.setDescription('The count of coding violations at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrHistPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
xcvrHistPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
xcvrHistPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESSValue.setDescription('The count of errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrHistPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
xcvrHistPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
xcvrHistPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESSValue.setDescription('The count of severely errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrHistPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
xcvrHistPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
xcvrHistPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrHistPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
xcvrHistPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
xcvrHistPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSEBValue.setDescription('The count of regenerator section errored blocks. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSEBTimeStamp.setDescription('The date and time stamp of the regenerator section errored blocks value.')
xcvrHistPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSEBValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSEBValidity.setDescription('Indicates the validity of the provided regenerator section errored blocks value.')
xcvrHistPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSBBEValue.setDescription('The count of regenerator section background block errors. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSBBETimeStamp.setDescription('The date and time stamp of the regenerator section background block errors value.')
xcvrHistPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSBBEValidity.setDescription('Indicates the validity of the provided regenerator section background block errors value.')
xcvrHistPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSESValue.setDescription('The count of regenerator section errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSESTimeStamp.setDescription('The date and time stamp of the regenerator section errored seconds value.')
xcvrHistPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSESValidity.setDescription('Indicates the validity of the provided regenerator section errored seconds value.')
xcvrHistPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSSESValue.setDescription('The count of regenerator section severely errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSSESTimeStamp.setDescription('The date and time stamp of the regenerator section severely errored seconds value.')
xcvrHistPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSSESValidity.setDescription('Indicates the validity of the provided regenerator section severely errored seconds value.')
xcvrHistPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSOFSValue.setDescription('The count of regenerator section out-of-frame seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSOFSTimeStamp.setDescription('The date and time stamp of the regenerator section out-of-frame seconds value.')
xcvrHistPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSOFSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSOFSValidity.setDescription('Indicates the validity of the provided regenerator section out-of-frame seconds value.')
xcvrHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVValue.setDescription('The count of coding violations. This object applies only to transciever ports provisioned for the gigabit ethernet protocol or a fiber channel protocol.')
xcvrHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVTimeStamp.setDescription('The date and time stamp of the coding violations value.')
xcvrHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVValidity.setDescription('Indicates the validity of the provided coding violations value.')
xcvrHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESValue.setDescription('The count of errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESTimeStamp.setDescription('The date and time stamp of the errored seconds value.')
xcvrHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESValidity.setDescription('Indicates the validity of the provided errored seconds value.')
xcvrHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESValue.setDescription('The count of severely errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESTimeStamp.setDescription('The date and time stamp of the severely errored seconds value.')
xcvrHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESValidity.setDescription('Indicates the validity of the provided severely errored seconds value.')
xcvrHistPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMINVBLKValue.setDescription('The count of invalid blocks. This object applies only to transciever ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMINVBLKTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMINVBLKTimeStamp.setDescription('The date and time stamp of the invalid blocks value.')
xcvrHistPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMINVBLKValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMINVBLKValidity.setDescription('Indicates the validity of the provided invalid blocks value.')
xcvrHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
xcvrHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
xcvrHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
xcvrHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
xcvrHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
xcvrHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
xcvrHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 70), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValue.setDescription('The total number of bytes of data (including those in bad frames) received (excluding framing bits but including FCS bytes). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTBYCRXTimeStamp.setDescription('The date and time stamp of the received bytes count value.')
xcvrHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValidity.setDescription('Indicates the validity of the provided received bytes count value.')
xcvrHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTBYCRXInitialize.setDescription('Used to initialize the value of the xcvrHistPMTBYCRXValue object to 0.')
xcvrHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 74), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValue.setDescription('The total number of received frames (incl. bad frames, broadcast frames, and multicast frames received). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 75), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTFRCRXTimeStamp.setDescription('The date and time stamp of the received frames count value.')
xcvrHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 76), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValidity.setDescription('Indicates the validity of the provided received frames count value.')
xcvrHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMTFRCRXInitialize.setDescription('Used to initialize the value of the xcvrHistPMTFRCRXValue object to 0.')
xcvrHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 78), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 79), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
xcvrHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 80), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
xcvrHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMBCSTInitialize.setDescription('Used to initialize the value of the xcvrHistPMBCSTValue object to 0.')
xcvrHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 82), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 83), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
xcvrHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 84), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
xcvrHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMMCSTInitialize.setDescription('Used to initialize the value of the xcvrHistPMMCSTValue object to 0.')
xcvrHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 86), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 87), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
xcvrHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 88), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
xcvrHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE64Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE64Value object to 0.')
xcvrHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 90), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 91), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
xcvrHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 92), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
xcvrHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE65To127Value object to 0.')
xcvrHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 94), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 95), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
xcvrHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 96), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
xcvrHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 97), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE128To255Value object to 0.')
xcvrHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 98), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 99), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
xcvrHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 100), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
xcvrHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 101), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE256To511Value object to 0.')
xcvrHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 102), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 103), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
xcvrHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 104), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
xcvrHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 105), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE512To1023Value object to 0.')
xcvrHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 106), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 107), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
xcvrHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 108), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
xcvrHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZE1024To1518Value object to 0.')
xcvrHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 110), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 111), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
xcvrHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 112), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
xcvrHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the xcvrHistPMSIZEOver1518Value object to 0.')
xcvrHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 114), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFCSEValue.setDescription('The count of packets that had a valid length but had either a Frame Check Sequence (FCS) or a bad FCS with a non-integral number of octets (Alignment Error) . This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 115), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFCSETimeStamp.setDescription('The date and time stamp of the count of packets with bad FCS or alignment error.')
xcvrHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 116), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFCSEValidity.setDescription('Indicates the validity of the provided count of packets with bad FCS or alignment error.')
xcvrHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRDRValue.setDescription('The total number of dropped frames due to lack of resources or otherwise. Note that this number is not necessarily the number of frames dropped; it is just the number of times that it could be detected. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRDRTimeStamp.setDescription('The date and time stamp of the count of dropped packets.')
xcvrHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRDRValidity.setDescription('Indicates the validity of the provided count of dropped packets.')
xcvrHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 120), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
xcvrHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
xcvrHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 123), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 124), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
xcvrHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 125), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
xcvrHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 127), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
xcvrHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 128), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
xcvrHistPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 129), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMJABRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMJABRValue.setDescription('The total number of frames received that were longer than 14336 9600 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with non-integral number of octets (Alignment Error). This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrHistPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMJABRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMJABRTimeStamp.setDescription('The date and time stamp of the count of received jabbers.')
xcvrHistPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMJABRValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMJABRValidity.setDescription('Indicates the validity of the provided count of received jabbers.')
xcvrHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 132), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUEBValue.setDescription('The count of OTN digital wrapper layer errored blocks.')
xcvrHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer errored blocks value.')
xcvrHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUEBValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer errored blocks value.')
xcvrHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 135), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValue.setDescription('The count of OTN digital wrapper layer background block errors.')
xcvrHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 136), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer background block errors.')
xcvrHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 137), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer background block errors value.')
xcvrHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 138), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUESValue.setDescription('The count of errored seconds at the OTN digital wrapper layer.')
xcvrHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 139), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUESTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer errored seconds value.')
xcvrHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 140), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUESValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer errored seconds value.')
xcvrHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 141), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUSESValue.setDescription('The count of severely errored seconds at the OTN digital wrapper layer.')
xcvrHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer severely errored seconds value.')
xcvrHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUSESValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer severely errored seconds value.')
xcvrHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 144), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValue.setDescription('The count of Out-Of-Frame seconds at the OTN digital wrapper layer.')
xcvrHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 145), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer Out-Of-Frame seconds value.')
xcvrHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 146), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer Out-of-Frame seconds value.')
xcvrHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 147), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Value.setDescription('A second supply voltage value on the transceiver.')
xcvrHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 148), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
xcvrHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 149), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
xcvrHistPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 150), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVSInitialize.setDescription('Used to initialize the value of the xcvrHistPMCVSValue object to 0.')
xcvrHistPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 151), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESSInitialize.setDescription('Used to initialize the value of the xcvrHistPMESSValue object to 0.')
xcvrHistPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 152), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESSInitialize.setDescription('Used to initialize the value of the xcvrHistPMSESSValue object to 0.')
xcvrHistPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 153), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSEFSSInitialize.setDescription('Used to initialize the value of the xcvrHistPMSEFSSValue object to 0.')
xcvrHistPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 154), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSEBInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSEBValue object to 0.')
xcvrHistPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 155), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSBBEInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSBBEValue object to 0.')
xcvrHistPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 156), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSESInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSESValue object to 0.')
xcvrHistPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 157), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSSESInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSSESValue object to 0.')
xcvrHistPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 158), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSOFSInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSOFSValue object to 0.')
xcvrHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 159), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMCVInitialize.setDescription('Used to initialize the value of the xcvrHistPMCVValue object to 0.')
xcvrHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 160), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMESInitialize.setDescription('Used to initialize the value of the xcvrHistPMESValue object to 0.')
xcvrHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 161), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMSESInitialize.setDescription('Used to initialize the value of the xcvrHistPMSESValue object to 0.')
xcvrHistPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 162), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMINVBLKInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMINVBLKInitialize.setDescription('Used to initialize the value of the xcvrHistPMINVBLKValue object to 0.')
xcvrHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 163), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCRInitialize.setDescription('Used to initialize the value of the xcvrHistPMNBITCRValue object to 0.')
xcvrHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 164), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCRInitialize.setDescription('Used to initialize the value of the xcvrHistPMNBYTCRValue object to 0.')
xcvrHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 165), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWInitialize.setDescription('Used to initialize the value of the xcvrHistPMUNCRCDWValue object to 0.')
xcvrHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 166), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFCSEInitialize.setDescription('Used to initialize the value of the xcvrHistPMFCSEValue object to 0.')
xcvrHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 167), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRDRInitialize.setDescription('Used to initialize the value of the xcvrHistPMFRDRValue object to 0.')
xcvrHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 168), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUSIZEInitialize.setDescription('Used to initialize the value of the xcvrHistPMUSIZEValue object to 0.')
xcvrHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 169), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOSIZEInitialize.setDescription('Used to initialize the value of the xcvrHistPMOSIZEValue object to 0.')
xcvrHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 170), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMFRGTInitialize.setDescription('Used to initialize the value of the xcvrHistPMFRGTValue object to 0.')
xcvrHistPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 171), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMJABRInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMJABRInitialize.setDescription('Used to initialize the value of the xcvrHistPMJABRValue object to 0.')
xcvrHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 172), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUEBInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUEBValue object to 0.')
xcvrHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 173), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUBBEInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUBBEValue object to 0.')
xcvrHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 174), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUESInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUESValue object to 0.')
xcvrHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 175), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUSESInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUSESValue object to 0.')
xcvrHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 176), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUOFSInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUOFSValue object to 0.')
xcvrHistPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 177), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASSValue.setDescription('The count of unavailable seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrHistPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 178), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASSTimeStamp.setDescription('The date and time stamp of the section layer unavailable seconds value.')
xcvrHistPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 179), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASSValidity.setDescription('Indicates the validity of the provided section layer unavailable seconds value.')
xcvrHistPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 180), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASSInitialize.setDescription('Used to initialize the value of the xcvrHistPMUASSValue object to 0.')
xcvrHistPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 181), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSUASValue.setDescription('The count of regenerator section unavailable seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrHistPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 182), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSUASTimeStamp.setDescription('The date and time stamp of the regenerator section unavailable seconds value.')
xcvrHistPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 183), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSUASValidity.setDescription('Indicates the validity of the provided regenerator section unavailable seconds value.')
xcvrHistPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 184), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMRSUASInitialize.setDescription('Used to initialize the value of the xcvrHistPMRSUASValue object to 0.')
xcvrHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 185), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the gigabit ethernet protocol or a fiber channel protocol.')
xcvrHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 186), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
xcvrHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 187), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
xcvrHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 188), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMUASInitialize.setDescription('Used to initialize the value of the xcvrHistPMUASValue object to 0.')
xcvrHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 189), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUUASValue.setDescription('The count of unavailable seconds at the OTN digital wrapper layer.')
xcvrHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 190), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTN digital wrapper layer unavailable seconds value.')
xcvrHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 191), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUUASValidity.setDescription('Indicates the validity of the provided OTN digital wrapper layer unavailable seconds value.')
xcvrHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 192), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTUUASInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTUUASValue object to 0.')
xcvrHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 193), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNBERValue.setDescription('The instantaneous BER of transciever ports provisioned for the 10 gigabit ethernet LAN with FEC protocol.')
xcvrHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 194), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
xcvrHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 195), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
xcvrHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 196), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNBERInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTNBERValue object to 0.')
xcvrHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 197), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValue.setDescription('The interval/average BER of transciever ports provisioned for the 10 gigabit ethernet LAN with FEC protocol.')
xcvrHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 198), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
xcvrHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 199), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
xcvrHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 200), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the xcvrHistPMOTNAVGBERValue object to 0.')
xcvrHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 201), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 202), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
xcvrHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 203), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
xcvrHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 204), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the xcvrHistPMNBITCR64BitValue object to 0.')
xcvrHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 205), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to transciever ports provisioned for a protocol that includes Forward Error Correction (FEC).')
xcvrHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 206), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
xcvrHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 207), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
xcvrHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 208), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the xcvrHistPMNBYTCR64BitValue object to 0.')
xcvrHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 209), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
xcvrHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 210), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
xcvrHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 211), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
xcvrHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 212), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMinInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPRMinValue object to 0.')
xcvrHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 213), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
xcvrHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 214), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
xcvrHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 215), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
xcvrHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 216), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPRMaxValue object to 0.')
xcvrHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 217), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
xcvrHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 218), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
xcvrHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 219), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
xcvrHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 220), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPRAvgValue object to 0.')
xcvrHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 221), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
xcvrHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 222), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
xcvrHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 223), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
xcvrHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 224), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMinInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPTMinValue object to 0.')
xcvrHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 225), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
xcvrHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 226), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
xcvrHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 227), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
xcvrHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 228), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPTMaxValue object to 0.')
xcvrHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 229), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
xcvrHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 230), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
xcvrHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 231), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
xcvrHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 232), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: xcvrHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the xcvrHistPMOPTAvgValue object to 0.')
xcvrPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5), )
if mibBuilder.loadTexts: xcvrPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on optical transceiver facilities, that are used in the generation of threshold crossing alerts.')
xcvrPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: xcvrPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdEntry.setDescription('The row entry object of the optical transceiver performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual optical transceiver.')
xcvrPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrPMThresholdTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdTypeIdx.setDescription('The type of the optical transceiver targeted for PM thresholds.')
xcvrPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdShelfIdx.setDescription('The shelf number on which the optical transceiver targeted for PM thresholds is provisioned.')
xcvrPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdSlotIdx.setDescription('The slot number on which the optical transceiver targeted for PM thresholds is provisioned.')
xcvrPMThresholdIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrPMThresholdIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdIdx.setDescription('The optical transceiver port number on the circuit pack that is targeted for PM thresholds.')
xcvrPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
xcvrPMThresholdCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdCVSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdCVSValue.setDescription('The threshold for the count of coding violations at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrPMThresholdESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdESSValue.setDescription('The threshold for the count of errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrPMThresholdSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSESSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdSESSValue.setDescription('The threshold fro the count of severely errored seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrPMThresholdSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdSEFSSValue.setDescription('The threshold for the count of severely errored framing seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrPMThresholdRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSEBValue.setDescription('The threshold for the count of regenerator section errored blocks. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSBBEValue.setDescription('The threshold for the count of regenerator section background block errors. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSESValue.setDescription('The threshold for the count of regenerator section errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSSESValue.setDescription('The threshold for the count of regenerator section severely errored seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSOFSValue.setDescription('The threshold for the count of regenerator section out-of-frame seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdCVValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdCVValue.setDescription('The threshold for the count of coding violations. This object applies only to transciever ports provisioned for the gigabit ethernet protocol or a fiber channel protocol.')
xcvrPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdESValue.setDescription('The threshold for the count of errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdSESValue.setDescription('The threshold for the count of severely errored seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrPMThresholdINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdINVBLKValue.setDescription('The threshold for the count of invalid blocks. This object applies only to transciever ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdUNCRCDWValue.setDescription('The threshold for the count of uncorrectable codewords. This object applies only to transciever ports provisioned for the 10 gigabit ethernet LAN with FEC protocol.')
xcvrPMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFCSEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdFCSEValue.setDescription('The threshold for the count of FCSE packets. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFRDRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdFRDRValue.setDescription('The threshold for the count of dropped frames. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdUSIZEValue.setDescription('The threshold for the count of undersized frames. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOSIZEValue.setDescription('The threshold for the count of oversized frames. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFRGTValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdFRGTValue.setDescription('The threshold for the count of frame fragments. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdJABRValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdJABRValue.setDescription('The threshold for the count of jabbers. This object applies only to transceiver ports provisioned for the 10 gigabit ethernet LAN protocol.')
xcvrPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUEBValue.setDescription('The threshold for the count of errored blocks at the OTN digital wrapper layer.')
xcvrPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUBBEValue.setDescription('The threshold for the count of background block errors at the OTN digital wrapper layer.')
xcvrPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUESValue.setDescription('The threshold for the count of errored seconds at the OTN digital wrapper layer.')
xcvrPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUSESValue.setDescription('The threshold for the count of severely errored seconds at the OTN digital wrapper layer.')
xcvrPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUOFSValue.setDescription('The threshold for the count of Out-of-Frame seconds at the OTN digital wrapper layer.')
xcvrPMThresholdUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUASSValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdUASSValue.setDescription('The threshold for the count of unavailable seconds at the section layer. This object applies only to transciever ports provisioned for a SONET OC-N protocol.')
xcvrPMThresholdRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdRSUASValue.setDescription('The threshold for the count of regenerator section unavailable seconds. This object applies only to transciever ports provisioned for a SDH STM-N protocol.')
xcvrPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdUASValue.setDescription('The threshold for the count of unavailable seconds. This object applies only to transciever ports provisioned for an ethernet protocol or a fiber channel protocol.')
xcvrPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: xcvrPMThresholdOTUUASValue.setDescription('The threshold for the count of unavailable seconds at the OTN digital wrapper layer.')
amdCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6), )
if mibBuilder.loadTexts: amdCrntPMTable.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the ports of active multiplexer-demultiplexer circuit packs.')
amdCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdCrntPMTypeIdx"), (0, "BTI-7000-MIB", "amdCrntPMShelfIdx"), (0, "BTI-7000-MIB", "amdCrntPMSlotIdx"), (0, "BTI-7000-MIB", "amdCrntPMLineIdx"), (0, "BTI-7000-MIB", "amdCrntPMPortIdx"), (0, "BTI-7000-MIB", "amdCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: amdCrntPMEntry.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMEntry.setDescription('The row entry object of the active multiplexer-demultiplexer current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given AMD port.')
amdCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 1), AmdType())
if mibBuilder.loadTexts: amdCrntPMTypeIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMTypeIdx.setDescription('The specific type of active multiplexer-demultiplexer circuit pack on which the facility targeted for PMs is provisioned.')
amdCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: amdCrntPMShelfIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMShelfIdx.setDescription('The number of the shelf on which the active multiplexer-demultiplexer facility targeted for PMs is provisioned.')
amdCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: amdCrntPMSlotIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMSlotIdx.setDescription('The number of the slot within which the active multiplexer-demultiplexer facility targeted for PMs is provisioned.')
amdCrntPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: amdCrntPMLineIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMLineIdx.setDescription('The number of the multiplexed wavelength line on the AMD circuit pack that is targeted for PMs.')
amdCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 5), AmdPortType())
if mibBuilder.loadTexts: amdCrntPMPortIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMPortIdx.setDescription('Identifies a specific port on the identified line of the AMD circuit pack that is targeted for PMs.')
amdCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: amdCrntPMIntervalTypeIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
amdCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPRValue.setDescription('The optical power received on the input of the AMD port.')
amdCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
amdCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
amdCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPTValue.setDescription('The optical power transmitted at the output of the AMD port.')
amdCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
amdCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
amdCrntPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 13), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOAValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMVOAValue.setDescription('The variable optical attenuation of the AMD port.')
amdCrntPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOATimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMVOATimeStamp.setDescription('The date and time stamp of the variable optical attenuation value.')
amdCrntPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOAValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMVOAValidity.setDescription('Indicates the validity of the provided variable optical attenuation value.')
amdCrntPMLitChnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMLitChnValue.setDescription('The number of muxed channels with light on the line port.')
amdCrntPMLitChnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMLitChnTimeStamp.setDescription('The date and time stamp of the number of lit channels value.')
amdCrntPMLitChnValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdCrntPMLitChnValidity.setDescription('Indicates the validity of the provided number of lit channels value.')
amdHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7), )
if mibBuilder.loadTexts: amdHistPMTable.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the ports of active multiplexer-demultiplexer circuit packs.')
amdHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdHistPMTypeIdx"), (0, "BTI-7000-MIB", "amdHistPMShelfIdx"), (0, "BTI-7000-MIB", "amdHistPMSlotIdx"), (0, "BTI-7000-MIB", "amdHistPMLineIdx"), (0, "BTI-7000-MIB", "amdHistPMPortIdx"), (0, "BTI-7000-MIB", "amdHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "amdHistPMIntervalIdx"))
if mibBuilder.loadTexts: amdHistPMEntry.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMEntry.setDescription('The row entry object of the active multiplexer-demultiplexer historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given AMD port.')
amdHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 1), AmdType())
if mibBuilder.loadTexts: amdHistPMTypeIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMTypeIdx.setDescription('The specific type of active multiplexer-demultiplexer circuit pack on which the facility targeted for PMs is provisioned.')
amdHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: amdHistPMShelfIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMShelfIdx.setDescription('The number of the shelf on which the active multiplexer-demultiplexer facility targeted for PMs is provisioned.')
amdHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: amdHistPMSlotIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMSlotIdx.setDescription('The number of the slot within which the active multiplexer-demultiplexer facility targeted for PMs is provisioned.')
amdHistPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: amdHistPMLineIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMLineIdx.setDescription('The number of the multiplexed wavelength line on the AMD circuit pack that is targeted for PMs.')
amdHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 5), AmdPortType())
if mibBuilder.loadTexts: amdHistPMPortIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMPortIdx.setDescription('Identifies a specific port on the identified line of the AMD circuit pack that is targeted for PMs.')
amdHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: amdHistPMIntervalTypeIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
amdHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: amdHistPMIntervalIdx.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
amdHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPRValue.setDescription('The optical power received on the input of the AMD port.')
amdHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
amdHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
amdHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPTValue.setDescription('The optical power transmitted at the output of the AMD port.')
amdHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
amdHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
amdHistPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 14), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOAValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMVOAValue.setDescription('The variable optical attenuation of the AMD port.')
amdHistPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOATimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMVOATimeStamp.setDescription('The date and time stamp of the variable optical attenuation value.')
amdHistPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOAValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMVOAValidity.setDescription('Indicates the validity of the provided variable optical attenuation valcue.')
amdHistPMLitChnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnValue.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMLitChnValue.setDescription('The number of muxed channels with light on the line port.')
amdHistPMLitChnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMLitChnTimeStamp.setDescription('The date and time stamp of the number of lit channels value.')
amdHistPMLitChnValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnValidity.setStatus('obsolete')
if mibBuilder.loadTexts: amdHistPMLitChnValidity.setDescription('Indicates the validity of the provided number of lit channels value.')
ocnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8), )
if mibBuilder.loadTexts: ocnCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the SONET OC-N facilities on the NE.')
ocnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "ocnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "ocnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "ocnCrntPMPortIdx"), (0, "BTI-7000-MIB", "ocnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: ocnCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMEntry.setDescription('The row entry object of the SONET OC-N current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given OC-N facility.')
ocnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMTypeIdx.setDescription('The type of OC-N facility targeted for PMs.')
ocnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMShelfIdx.setDescription('The number of the shelf on which the OC-N facility targeted for PMs is provisioned.')
ocnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSlotIdx.setDescription('The number of the slot within which the OC-N facility targeted for PMs is provisioned.')
ocnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMPortIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility targeted for PMs is provisioned.')
ocnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
ocnCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRValue.setDescription('The optical power received on the input of the OC-N facility port.')
ocnCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
ocnCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
ocnCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTValue.setDescription('The optical power transmitted at the output of the OC-N facility port.')
ocnCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
ocnCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
ocnCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMTempValue.setDescription('The temperature measured on the OC-N facility port.')
ocnCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
ocnCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
ocnCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the OC-N facility port.')
ocnCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
ocnCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
ocnCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMLBCValue.setDescription('The laser bias current measured on the OC-N facility port.')
ocnCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
ocnCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
ocnCrntPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVSValue.setDescription('The count of coding violations at the section layer.')
ocnCrntPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
ocnCrntPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
ocnCrntPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESSValue.setDescription('The count of errored seconds at the section layer.')
ocnCrntPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
ocnCrntPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
ocnCrntPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESSValue.setDescription('The count of severely errored seconds at the section layer.')
ocnCrntPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
ocnCrntPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
ocnCrntPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer.')
ocnCrntPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
ocnCrntPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
ocnCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 33), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Value.setDescription('The value of the second supply voltage source measured on the OC-N facility port transceiver.')
ocnCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
ocnCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
ocnCrntPMCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVLValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVLValue.setDescription('The count of coding violations at the line layer.')
ocnCrntPMCVLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVLTimeStamp.setDescription('The date and time stamp of the line layer coding violations value.')
ocnCrntPMCVLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVLValidity.setDescription('Indicates the validity of the provided line layer coding violations value.')
ocnCrntPMESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESLValue.setDescription('The count of errored seconds at the line layer.')
ocnCrntPMESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESLTimeStamp.setDescription('The date and time stamp of the line layer errored seconds value.')
ocnCrntPMESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESLValidity.setDescription('Indicates the validity of the provided line layer errored seconds value.')
ocnCrntPMSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESLValue.setDescription('The count of severely errored seconds at the line layer.')
ocnCrntPMSESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESLTimeStamp.setDescription('The date and time stamp of the line layer severely errored seconds value.')
ocnCrntPMSESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESLValidity.setDescription('Indicates the validity of the provided line layer severely errored seconds value.')
ocnCrntPMUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASLValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASLValue.setDescription('The count of unavailable seconds at the line layer.')
ocnCrntPMUASLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASLTimeStamp.setDescription('The date and time stamp of the line layer unavailable seconds value.')
ocnCrntPMUASLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASLValidity.setDescription('Indicates the validity of the provided line layer unavailable seconds value.')
ocnCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
ocnCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
ocnCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
ocnCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
ocnCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
ocnCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
ocnCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
ocnCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
ocnCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
ocnCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
ocnCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
ocnCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
ocnCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
ocnCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
ocnCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer out-of-frame seconds value.')
ocnCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
ocnCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
ocnCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
ocnCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
ocnCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
ocnCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
ocnCrntPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVSInitialize.setDescription('Used to initialize the value of the ocnCrntPMCVSValue object to 0.')
ocnCrntPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESSInitialize.setDescription('Used to initialize the value of the ocnCrntPMESSValue object to 0.')
ocnCrntPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESSInitialize.setDescription('Used to initialize the value of the ocnCrntPMSESSValue object to 0.')
ocnCrntPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSEFSSInitialize.setDescription('Used to initialize the value of the ocnCrntPMSEFSSValue object to 0.')
ocnCrntPMCVLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMCVLInitialize.setDescription('Used to initialize the value of the ocnCrntPMCVLValue object to 0.')
ocnCrntPMESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMESLInitialize.setDescription('Used to initialize the value of the ocnCrntPMESLValue object to 0.')
ocnCrntPMSESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMSESLInitialize.setDescription('Used to initialize the value of the ocnCrntPMSESLValue object to 0.')
ocnCrntPMUASLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASLInitialize.setDescription('Used to initialize the value of the ocnCrntPMUASLValue object to 0.')
ocnCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUEBInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUEBValue object to 0.')
ocnCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUBBEInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUBBEValue object to 0.')
ocnCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUESInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUESValue object to 0.')
ocnCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUSESInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUSESValue object to 0.')
ocnCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUOFSInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUOFSValue object to 0.')
ocnCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCRInitialize.setDescription('Used to initialize the value of the ocnCrntPMNBITCRValue object to 0.')
ocnCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCRInitialize.setDescription('Used to initialize the value of the ocnCrntPMNBYTCRValue object to 0.')
ocnCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWInitialize.setDescription('Used to initialize the value of the ocnCrntPMUNCRCDWValue object to 0.')
ocnCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNBERValue.setDescription('The instantaneous BER of OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
ocnCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
ocnCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNBERInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTNBERValue object to 0.')
ocnCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValue.setDescription('The interval/average BER of OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
ocnCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
ocnCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTNAVGBERValue object to 0.')
ocnCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 96), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
ocnCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
ocnCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the ocnCrntPMNBITCR64BitValue object to 0.')
ocnCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 100), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
ocnCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
ocnCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the ocnCrntPMNBYTCR64BitValue object to 0.')
ocnCrntPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 104), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASSValue.setDescription('The count of unavailable seconds at the section layer. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnCrntPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASSTimeStamp.setDescription('The date and time stamp of the unavailable seconds at the section layer')
ocnCrntPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASSValidity.setDescription('Indicates the validity of the unavailable seconds at the section layer.')
ocnCrntPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMUASSInitialize.setDescription('Used to initialize the value of the ocnCrntPMUASSValue object to 0.')
ocnCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 108), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
ocnCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
ocnCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
ocnCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOTUUASInitialize.setDescription('Used to initialize the value of the ocnCrntPMOTUUASValue object to 0.')
ocnCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 112), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
ocnCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
ocnCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
ocnCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPRMinValue object to 0.')
ocnCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 116), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
ocnCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
ocnCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
ocnCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPRMaxValue object to 0.')
ocnCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
ocnCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
ocnCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
ocnCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPRAvgValue object to 0.')
ocnCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
ocnCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
ocnCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
ocnCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPTMinValue object to 0.')
ocnCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
ocnCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
ocnCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
ocnCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPTMaxValue object to 0.')
ocnCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
ocnCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
ocnCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
ocnCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the ocnCrntPMOPTAvgValue object to 0.')
ocnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9), )
if mibBuilder.loadTexts: ocnHistPMTable.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the SONET OC-N facilities on the NE.')
ocnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnHistPMTypeIdx"), (0, "BTI-7000-MIB", "ocnHistPMShelfIdx"), (0, "BTI-7000-MIB", "ocnHistPMSlotIdx"), (0, "BTI-7000-MIB", "ocnHistPMPortIdx"), (0, "BTI-7000-MIB", "ocnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "ocnHistPMIntervalIdx"))
if mibBuilder.loadTexts: ocnHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMEntry.setDescription('The row entry object of the SONET OC-N historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given OC-N facility.')
ocnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMTypeIdx.setDescription('The type of the OC-N facility targeted for PMs.')
ocnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMShelfIdx.setDescription('The number of the shelf on which the OC-N facility targeted for PMs is provisioned.')
ocnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSlotIdx.setDescription('The number of the slot within which the OC-N facility targeted for PMs is provisioned.')
ocnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMPortIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility targeted for PMs is provisioned.')
ocnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
ocnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: ocnHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
ocnHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRValue.setDescription('The optical power received on the input of the OC-N facility.')
ocnHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
ocnHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
ocnHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTValue.setDescription('The optical power transmitted at the output of the OC-N facility.')
ocnHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
ocnHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
ocnHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMTempValue.setDescription('The temperature measured on the OC-N facility port.')
ocnHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
ocnHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
ocnHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the OC-N facility port.')
ocnHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
ocnHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
ocnHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMLBCValue.setDescription('The laser bias current measured on the OC-N facility port.')
ocnHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
ocnHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
ocnHistPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVSValue.setDescription('The count of coding violations at the section layer.')
ocnHistPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
ocnHistPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
ocnHistPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESSValue.setDescription('The count of errored seconds at the section layer.')
ocnHistPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
ocnHistPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
ocnHistPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESSValue.setDescription('The count of severely errored seconds at the section layer.')
ocnHistPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
ocnHistPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
ocnHistPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer.')
ocnHistPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
ocnHistPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
ocnHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 34), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Value.setDescription('The value of the second supply voltage source measured on the OC-N facility port transceiver.')
ocnHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
ocnHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
ocnHistPMCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVLValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVLValue.setDescription('The count of coding violations at the line layer.')
ocnHistPMCVLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVLTimeStamp.setDescription('The date and time stamp of the line layer coding violations value.')
ocnHistPMCVLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVLValidity.setDescription('Indicates the validity of the provided line layer coding violations value.')
ocnHistPMESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESLValue.setDescription('The count of errored seconds at the line layer.')
ocnHistPMESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESLTimeStamp.setDescription('The date and time stamp of the line layer errored seconds value.')
ocnHistPMESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESLValidity.setDescription('Indicates the validity of the provided line layer errored seconds value.')
ocnHistPMSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESLValue.setDescription('The count of severely errored seconds at the line layer.')
ocnHistPMSESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESLTimeStamp.setDescription('The date and time stamp of the line layer severely errored seconds value.')
ocnHistPMSESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESLValidity.setDescription('Indicates the validity of the provided line layer severely errored seconds value.')
ocnHistPMUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASLValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASLValue.setDescription('The count of unavailable seconds at the line layer.')
ocnHistPMUASLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASLTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASLTimeStamp.setDescription('The date and time stamp of the line layer unavailable seconds value.')
ocnHistPMUASLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASLValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASLValidity.setDescription('Indicates the validity of the provided line layer unavailable seconds value.')
ocnHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
ocnHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
ocnHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
ocnHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
ocnHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
ocnHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
ocnHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
ocnHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
ocnHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
ocnHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
ocnHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
ocnHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
ocnHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
ocnHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
ocnHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer out-of-frame seconds value.')
ocnHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
ocnHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
ocnHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
ocnHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
ocnHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 70), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
ocnHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
ocnHistPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVSInitialize.setDescription('Used to initialize the value of the ocnHistPMCVSValue object to 0.')
ocnHistPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESSInitialize.setDescription('Used to initialize the value of the ocnHistPMESSValue object to 0.')
ocnHistPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESSInitialize.setDescription('Used to initialize the value of the ocnHistPMSESSValue object to 0.')
ocnHistPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSEFSSInitialize.setDescription('Used to initialize the value of the ocnHistPMSEFSSValue object to 0.')
ocnHistPMCVLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMCVLInitialize.setDescription('Used to initialize the value of the ocnHistPMCVLValue object to 0.')
ocnHistPMESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMESLInitialize.setDescription('Used to initialize the value of the ocnHistPMESLValue object to 0.')
ocnHistPMSESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMSESLInitialize.setDescription('Used to initialize the value of the ocnHistPMSESLValue object to 0.')
ocnHistPMUASLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASLInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASLInitialize.setDescription('Used to initialize the value of the ocnHistPMUASLValue object to 0.')
ocnHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUEBInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUEBValue object to 0.')
ocnHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUBBEInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUBBEValue object to 0.')
ocnHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUESInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUESValue object to 0.')
ocnHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUSESInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUSESValue object to 0.')
ocnHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUOFSInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUOFSValue object to 0.')
ocnHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCRInitialize.setDescription('Used to initialize the value of the ocnHistPMNBITCRValue object to 0.')
ocnHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCRInitialize.setDescription('Used to initialize the value of the ocnHistPMNBYTCRValue object to 0.')
ocnHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUNCRCDWInitialize.setDescription('Used to initialize the value of the ocnHistPMUNCRCDWValue object to 0.')
ocnHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 89), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNBERValue.setDescription('The instantaneous BER of OC-192 line port provisioned for OTN line mapping.')
ocnHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
ocnHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
ocnHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNBERInitialize.setDescription('Used to initialize the value of the ocnHistPMOTNBERValue object to 0.')
ocnHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValue.setDescription('The interval/average BER of OC-192 line port provisioned for OTN line mapping.')
ocnHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
ocnHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
ocnHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the ocnHistPMOTNAVGBERValue object to 0.')
ocnHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 97), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
ocnHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
ocnHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the ocnHistPMNBITCR64BitValue object to 0.')
ocnHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 101), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
ocnHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
ocnHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the ocnHistPMNBYTCR64BitValue object to 0.')
ocnHistPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 105), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASSValue.setDescription('The count of unavailable seconds at the section layer. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ocnHistPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASSTimeStamp.setDescription('The date and time stamp of the unavailable seconds at the section layer.')
ocnHistPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASSValidity.setDescription('Indicates the validity of the unavailable seconds at the section layer.')
ocnHistPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMUASSInitialize.setDescription('Used to initialize the value of the ocnHistPMUASSValue object to 0.')
ocnHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 109), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
ocnHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
ocnHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
ocnHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOTUUASInitialize.setDescription('Used to initialize the value of the ocnHistPMOTUUASValue object to 0.')
ocnHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 113), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
ocnHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
ocnHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
ocnHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMinInitialize.setDescription('Used to initialize the value of the ocnHistPMOPRMinValue object to 0.')
ocnHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 117), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
ocnHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
ocnHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
ocnHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the ocnHistPMOPRMaxValue object to 0.')
ocnHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
ocnHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
ocnHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
ocnHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the ocnHistPMOPRAvgValue object to 0.')
ocnHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
ocnHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
ocnHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
ocnHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMinInitialize.setDescription('Used to initialize the value of the ocnHistPMOPTMinValue object to 0.')
ocnHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
ocnHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
ocnHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
ocnHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the ocnHistPMOPTMaxValue object to 0.')
ocnHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
ocnHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
ocnHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
ocnHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ocnHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the ocnHistPMOPTAvgValue object to 0.')
ocnPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10), )
if mibBuilder.loadTexts: ocnPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on SONET OC-N facilities, that are used in the generation of threshold crossing alerts.')
ocnPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdPortIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: ocnPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdEntry.setDescription('The row entry object of the SONET OC-N performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual OC-N facility.')
ocnPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnPMThresholdTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdTypeIdx.setDescription('The type of the OC-N facility targeted for PM thresholds.')
ocnPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdShelfIdx.setDescription('The shelf number on which the OC-N facility targeted for PM thresholds is provisioned.')
ocnPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdSlotIdx.setDescription('The slot number on which the OC-N facility targeted for PM thresholds is provisioned.')
ocnPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdPortIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility targeted for PM thresholds is provisioned.')
ocnPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
ocnPMThresholdCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdCVSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdCVSValue.setDescription('The threshold for the count of coding violations at the section layer.')
ocnPMThresholdESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdESSValue.setDescription('The threshold for the count of errored seconds at the section layer.')
ocnPMThresholdSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSESSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdSESSValue.setDescription('The threshold fro the count of severely errored seconds at the section layer.')
ocnPMThresholdSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdSEFSSValue.setDescription('The threshold for the count of severely errored framing seconds at the section layer.')
ocnPMThresholdCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdCVLValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdCVLValue.setDescription('The threshold for the count of coding violations at the line layer.')
ocnPMThresholdESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdESLValue.setDescription('The threshold for the count of errored seconds at the line layer.')
ocnPMThresholdSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSESLValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdSESLValue.setDescription('The threshold for the count of severely errored seconds at the line layer.')
ocnPMThresholdUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUASLValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdUASLValue.setDescription('The threshold for the count of unavailable seconds at the line layer.')
ocnPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUEBValue.setDescription('The threshold for the count of errored blocks at the OTU digital wrapper layer.')
ocnPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUBBEValue.setDescription('The threshold for the count of background block errors at the OTU digital wrapper layer.')
ocnPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUESValue.setDescription('The threshold for the count of errored seconds at the OTU digital wrapper layer.')
ocnPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUSESValue.setDescription('The threshold for the count of severely errored seconds at the OTU digital wrapper layer.')
ocnPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUOFSValue.setDescription('The threshold for the count of out-of-frame seconds at the OTU digital wrapper layer.')
ocnPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdUNCRCDWValue.setDescription('The threshold for the count of uncorrectable codewords.')
ocnPMThresholdUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUASSValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdUASSValue.setDescription('The threshold for the count of unavailable seconds at the section layer.')
ocnPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ocnPMThresholdOTUUASValue.setDescription('The threshold for the count of unavailable seconds at the OTU digital wrapper layer.')
stsnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11), )
if mibBuilder.loadTexts: stsnCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the SONET STS-N facilities on the NE.')
stsnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "stsnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "stsnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "stsnCrntPMPortIdx"), (0, "BTI-7000-MIB", "stsnCrntPMIdx"), (0, "BTI-7000-MIB", "stsnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: stsnCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMEntry.setDescription('The row entry object of the SONET STS-N current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given STS-N facility.')
stsnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMTypeIdx.setDescription('The type of STS-N facility targeted for PMs.')
stsnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMShelfIdx.setDescription('The number of the shelf of the STS-N facility targeted for PMs.')
stsnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMSlotIdx.setDescription('The number of the slot of the STS-N facility targeted for PMs.')
stsnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMPortIdx.setDescription('The number of the port on the circuit pack of the STS-N facility targeted for PMs.')
stsnCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMIdx.setDescription('The sts index number of the STS-N facility targeted for PMs.')
stsnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: stsnCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
stsnCrntPMCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMCVPValue.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMCVPValue.setDescription('The count of coding violations at the path layer.')
stsnCrntPMCVPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMCVPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMCVPTimeStamp.setDescription('The date and time stamp of the path layer coding violations value.')
stsnCrntPMCVPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMCVPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMCVPValidity.setDescription('Indicates the validity of the provided path layer coding violations value.')
stsnCrntPMESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMESPValue.setDescription('The count of errored seconds at the path layer.')
stsnCrntPMESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMESPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMESPTimeStamp.setDescription('The date and time stamp of the path layer errored seconds value.')
stsnCrntPMESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMESPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMESPValidity.setDescription('Indicates the validity of the provided path layer errored seconds value.')
stsnCrntPMSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMSESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMSESPValue.setDescription('The count of severely errored seconds at the path layer.')
stsnCrntPMSESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMSESPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMSESPTimeStamp.setDescription('The date and time stamp of the path layer severely errored seconds value.')
stsnCrntPMSESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMSESPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMSESPValidity.setDescription('Indicates the validity of the provided path layer severely errored seconds value.')
stsnCrntPMUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMUASPValue.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMUASPValue.setDescription('The count of unavailable seconds at the path layer.')
stsnCrntPMUASPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMUASPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMUASPTimeStamp.setDescription('The date and time stamp of the path layer unavailable seconds value.')
stsnCrntPMUASPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMUASPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMUASPValidity.setDescription('Indicates the validity of the provided path layer unavailable seconds value.')
stsnCrntPMFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMFCPValue.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMFCPValue.setDescription('The failure count at the path layer.')
stsnCrntPMFCPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMFCPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMFCPTimeStamp.setDescription('The date and time stamp of the path layer failure count value.')
stsnCrntPMFCPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMFCPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMFCPValidity.setDescription('Indicates the validity of the provided path layer failure count value.')
stsnCrntPMCVPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMCVPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMCVPInitialize.setDescription('Used to initialize the value of the stsnCrntPMCVPValue object to 0.')
stsnCrntPMESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMESPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMESPInitialize.setDescription('Used to initialize the value of the stsnCrntPMESPValue object to 0.')
stsnCrntPMSESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMSESPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMSESPInitialize.setDescription('Used to initialize the value of the stsnCrntPMSESPValue object to 0.')
stsnCrntPMUASPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMUASPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMUASPInitialize.setDescription('Used to initialize the value of the stsnCrntPMUASPValue object to 0.')
stsnCrntPMFCPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMFCPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnCrntPMFCPInitialize.setDescription('Used to initialize the value of the stsnCrntPMFCPValue object to 0.')
stsnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12), )
if mibBuilder.loadTexts: stsnHistPMTable.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the SONET STS-N facilities on the NE.')
stsnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnHistPMTypeIdx"), (0, "BTI-7000-MIB", "stsnHistPMShelfIdx"), (0, "BTI-7000-MIB", "stsnHistPMSlotIdx"), (0, "BTI-7000-MIB", "stsnHistPMPortIdx"), (0, "BTI-7000-MIB", "stsnHistPMIdx"), (0, "BTI-7000-MIB", "stsnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "stsnHistPMIntervalIdx"))
if mibBuilder.loadTexts: stsnHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMEntry.setDescription('The row entry object of the SONET STS-N historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given STS-N facility.')
stsnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMTypeIdx.setDescription('The type of the STS-N facility targeted for PMs.')
stsnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMShelfIdx.setDescription('The number of the shelf of the STS-N facility targeted for PMs.')
stsnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMSlotIdx.setDescription('The number of the slot of the STS-N facility targeted for PMs.')
stsnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMPortIdx.setDescription('The number of the port on the circuit pack of the STS-N facility targeted for PMs.')
stsnHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMIdx.setDescription('The sts index number of the STS-N facility targeted for PMs.')
stsnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: stsnHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
stsnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: stsnHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
stsnHistPMCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMCVPValue.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMCVPValue.setDescription('The count of coding violations at the path layer.')
stsnHistPMCVPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMCVPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMCVPTimeStamp.setDescription('The date and time stamp of the path layer coding violations value.')
stsnHistPMCVPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMCVPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMCVPValidity.setDescription('Indicates the validity of the provided path layer coding violations value.')
stsnHistPMESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMESPValue.setDescription('The count of errored seconds at the path layer.')
stsnHistPMESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMESPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMESPTimeStamp.setDescription('The date and time stamp of the path layer errored seconds value.')
stsnHistPMESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMESPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMESPValidity.setDescription('Indicates the validity of the provided path layer errored seconds value.')
stsnHistPMSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMSESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMSESPValue.setDescription('The count of severely errored seconds at the path layer.')
stsnHistPMSESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMSESPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMSESPTimeStamp.setDescription('The date and time stamp of the path layer severely errored seconds value.')
stsnHistPMSESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMSESPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMSESPValidity.setDescription('Indicates the validity of the provided path layer severely errored seconds value.')
stsnHistPMUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMUASPValue.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMUASPValue.setDescription('The count of unavailable seconds at the path layer.')
stsnHistPMUASPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMUASPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMUASPTimeStamp.setDescription('The date and time stamp of the path layer unavailable seconds value.')
stsnHistPMUASPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMUASPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMUASPValidity.setDescription('Indicates the validity of the provided path layer unavailable seconds value.')
stsnHistPMFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMFCPValue.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMFCPValue.setDescription('The failure count at the path layer.')
stsnHistPMFCPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMFCPTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMFCPTimeStamp.setDescription('The date and time stamp of the path layer failure count.')
stsnHistPMFCPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMFCPValidity.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMFCPValidity.setDescription('Indicates the validity of the provided path layer failure count.')
stsnHistPMCVPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMCVPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMCVPInitialize.setDescription('Used to initialize the value of the stsnHistPMCVPValue object to 0.')
stsnHistPMESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMESPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMESPInitialize.setDescription('Used to initialize the value of the stsnHistPMESPValue object to 0.')
stsnHistPMSESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMSESPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMSESPInitialize.setDescription('Used to initialize the value of the stsnHistPMSESPValue object to 0.')
stsnHistPMUASPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMUASPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMUASPInitialize.setDescription('Used to initialize the value of the stsnHistPMUASPValue object to 0.')
stsnHistPMFCPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMFCPInitialize.setStatus('current')
if mibBuilder.loadTexts: stsnHistPMFCPInitialize.setDescription('Used to initialize the value of the stsnHistPMFCPValue object to 0.')
stsnPMThresholdByPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13), )
if mibBuilder.loadTexts: stsnPMThresholdByPortTable.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortTable.setDescription('A table of threshold levels for performance monitoring counter values on SONET STS-N facilities, that are used in the generation of threshold crossing alerts. The STS-N threshold settings will be the same for all STS channels on a given OC-N facility port.')
stsnPMThresholdByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnPMThresholdByPortTypeIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortShelfIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortSlotIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortIntervalTypeIdx"))
if mibBuilder.loadTexts: stsnPMThresholdByPortEntry.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortEntry.setDescription('The row entry object of the SONET STS-N performance monitoring threshold by port table. Each row of this table contains a set of PM thresholds for a given interval type that applies to all the STS-N channels on an OC-N facility port.')
stsnPMThresholdByPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnPMThresholdByPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortTypeIdx.setDescription('The type of the STS-N facilities targeted for PM thresholds.')
stsnPMThresholdByPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnPMThresholdByPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortShelfIdx.setDescription('The shelf number of the STS-N facilities targeted for PM thresholds.')
stsnPMThresholdByPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnPMThresholdByPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortSlotIdx.setDescription('The slot number of the STS-N facilities targeted for PM thresholds.')
stsnPMThresholdByPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnPMThresholdByPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortIdx.setDescription('The number of the port on the circuit pack of the STS-N facilities targeted for PM thresholds.')
stsnPMThresholdByPortIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stsnPMThresholdByPortIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
stsnPMThresholdByPortCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortCVPValue.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortCVPValue.setDescription('The threshold for the count of coding violations at the path layer.')
stsnPMThresholdByPortESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortESPValue.setDescription('The threshold for the count of errored seconds at the path layer.')
stsnPMThresholdByPortSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortSESPValue.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortSESPValue.setDescription('The threshold for the count of severely errored seconds at the path layer.')
stsnPMThresholdByPortUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortUASPValue.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortUASPValue.setDescription('The threshold for the count of unavailable seconds at the path layer.')
stsnPMThresholdByPortFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortFCPValue.setStatus('current')
if mibBuilder.loadTexts: stsnPMThresholdByPortFCPValue.setDescription('The threshold for the failure count at the path layer.')
stmnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14), )
if mibBuilder.loadTexts: stmnCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the SDH STM-N facilities on the NE.')
stmnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "stmnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "stmnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "stmnCrntPMPortIdx"), (0, "BTI-7000-MIB", "stmnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: stmnCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMEntry.setDescription('The row entry object of the SDH STM-N current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given STM-N facility.')
stmnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMTypeIdx.setDescription('The type of STM-N facility targeted for PMs.')
stmnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMShelfIdx.setDescription('The number of the shelf on which the STM-N facility targeted for PMs is provisioned.')
stmnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSlotIdx.setDescription('The number of the slot within which the STM-N facility targeted for PMs is provisioned.')
stmnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMPortIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility targeted for PMs is provisioned.')
stmnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
stmnCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRValue.setDescription('The optical power received on the input of the OC-N facility port.')
stmnCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
stmnCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
stmnCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTValue.setDescription('The optical power transmitted at the output of the STM-N facility port.')
stmnCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
stmnCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
stmnCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMTempValue.setDescription('The temperature measured on the STM-N facility port.')
stmnCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
stmnCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
stmnCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the STM-N facility port.')
stmnCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
stmnCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
stmnCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMLBCValue.setDescription('The laser bias current measured on the STM-N facility port.')
stmnCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
stmnCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
stmnCrntPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSEBValue.setDescription('The count of regenerator section errored blocks.')
stmnCrntPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSEBTimeStamp.setDescription('The date and time stamp of the regenerator section errored blocks value.')
stmnCrntPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSEBValidity.setDescription('Indicates the validity of the provided regenerator section errored blocks value.')
stmnCrntPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSBBEValue.setDescription('The count of regenerator section background block errors.')
stmnCrntPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSBBETimeStamp.setDescription('The date and time stamp of the regenerator section background block errors value.')
stmnCrntPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSBBEValidity.setDescription('Indicates the validity of the provided regenerator section background block errors value.')
stmnCrntPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSESValue.setDescription('The count of regenerator section errored seconds.')
stmnCrntPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSESTimeStamp.setDescription('The date and time stamp of the regenerator section errored seconds value.')
stmnCrntPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSESValidity.setDescription('Indicates the validity of the provided regenerator section errored seconds value.')
stmnCrntPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSSESValue.setDescription('The count of regenerator section severely errored seconds.')
stmnCrntPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSSESTimeStamp.setDescription('The date and time stamp of the regenerator section severely errored seconds value.')
stmnCrntPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSSESValidity.setDescription('Indicates the validity of the provided regenerator section severely errored seconds value.')
stmnCrntPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSOFSValue.setDescription('The count of regenerator section out-of-frame seconds.')
stmnCrntPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSOFSTimeStamp.setDescription('The date and time stamp of the regenerator section out-of-frame seconds value.')
stmnCrntPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSOFSValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSOFSValidity.setDescription('Indicates the validity of the provided regenerator section out-of-frame seconds value.')
stmnCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 36), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Value.setDescription('The value of the second supply voltage source measured on the STM-N facility port transceiver.')
stmnCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
stmnCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
stmnCrntPMMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSEBValue.setDescription('The count of multiplex section errored blocks.')
stmnCrntPMMSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSEBTimeStamp.setDescription('The date and time stamp of the multiplex section errored blocks value.')
stmnCrntPMMSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSEBValidity.setDescription('Indicates the validity of the provided multiplex section errored blocks value.')
stmnCrntPMMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSBBEValue.setDescription('The count of multiplex section background block errors.')
stmnCrntPMMSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSBBETimeStamp.setDescription('The date and time stamp of the multiplex section background block errors value.')
stmnCrntPMMSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSBBEValidity.setDescription('Indicates the validity of the provided multiplex section background block errors value.')
stmnCrntPMMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSESValue.setDescription('The count of multiplex section errored seconds.')
stmnCrntPMMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSESTimeStamp.setDescription('The date and time stamp of the multiplex section errored seconds value.')
stmnCrntPMMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSESValidity.setDescription('Indicates the validity of the provided multiplex section errored seconds value.')
stmnCrntPMMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSSESValue.setDescription('The count of multiplex section severely errored seconds.')
stmnCrntPMMSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSSESTimeStamp.setDescription('The date and time stamp of the multiplex section severely errored seconds value.')
stmnCrntPMMSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSSESValidity.setDescription('Indicates the validity of the provided multiplex section severely errored seconds value.')
stmnCrntPMMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSUASValue.setDescription('The count of multiplex section unavailable seconds.')
stmnCrntPMMSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSUASTimeStamp.setDescription('The date and time stamp of the multiplex section unavailable seconds value.')
stmnCrntPMMSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSUASValidity.setDescription('Indicates the validity of the provided multiplex section unavailable seconds value.')
stmnCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
stmnCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
stmnCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
stmnCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
stmnCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
stmnCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
stmnCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
stmnCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
stmnCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
stmnCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
stmnCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
stmnCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
stmnCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
stmnCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
stmnCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored framing seconds value.')
stmnCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
stmnCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
stmnCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 72), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
stmnCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
stmnCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
stmnCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
stmnCrntPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSEBInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSEBValue object to 0.')
stmnCrntPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSBBEInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSBBEValue object to 0.')
stmnCrntPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSESInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSESValue object to 0.')
stmnCrntPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSSESInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSSESValue object to 0.')
stmnCrntPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSOFSInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSOFSValue object to 0.')
stmnCrntPMMSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSEBInitialize.setDescription('Used to initialize the value of the stmnCrntPMMSEBValue object to 0.')
stmnCrntPMMSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSBBEInitialize.setDescription('Used to initialize the value of the stmnCrntPMMSBBEValue object to 0.')
stmnCrntPMMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSESInitialize.setDescription('Used to initialize the value of the stmnCrntPMMSESValue object to 0.')
stmnCrntPMMSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSSESInitialize.setDescription('Used to initialize the value of the stmnCrntPMMSSESValue object to 0.')
stmnCrntPMMSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMMSUASInitialize.setDescription('Used to initialize the value of the stmnCrntPMMSUASValue object to 0.')
stmnCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUEBInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUEBValue object to 0.')
stmnCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUBBEInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUBBEValue object to 0.')
stmnCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUESInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUESValue object to 0.')
stmnCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUSESInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUSESValue object to 0.')
stmnCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUOFSInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUOFSValue object to 0.')
stmnCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCRInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBITCRValue object to 0.')
stmnCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCRInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBYTCRValue object to 0.')
stmnCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWInitialize.setDescription('Used to initialize the value of the stmnCrntPMUNCRCDWValue object to 0.')
stmnCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 96), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNBERValue.setDescription('The instantaneous BER of STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
stmnCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
stmnCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNBERInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTNBERValue object to 0.')
stmnCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValue.setDescription('The interval/average BER of STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
stmnCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
stmnCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTNAVGBERValue object to 0.')
stmnCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 104), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
stmnCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
stmnCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBITCR64BitValue object to 0.')
stmnCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 108), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
stmnCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
stmnCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBYTCR64BitValue object to 0.')
stmnCrntPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 112), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSUASValue.setDescription('The count of regenerator section unavailable seconds. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnCrntPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSUASTimeStamp.setDescription('The date and time stamp of the regenerator section unavailable seconds value.')
stmnCrntPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSUASValidity.setDescription('Indicates the validity of the provided regenerator section unavailable seconds value.')
stmnCrntPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMRSUASInitialize.setDescription('Used to initialize the value of the stmnCrntPMRSUASValue object to 0.')
stmnCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
stmnCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
stmnCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
stmnCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOTUUASInitialize.setDescription('Used to initialize the value of the stmnCrntPMOTUUASValue object to 0.')
stmnCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
stmnCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
stmnCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
stmnCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPRMinValue object to 0.')
stmnCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
stmnCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
stmnCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
stmnCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPRMaxValue object to 0.')
stmnCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
stmnCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
stmnCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
stmnCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPRAvgValue object to 0.')
stmnCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
stmnCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
stmnCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
stmnCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPTMinValue object to 0.')
stmnCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 136), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
stmnCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 137), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
stmnCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 138), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
stmnCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 139), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPTMaxValue object to 0.')
stmnCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 140), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
stmnCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
stmnCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
stmnCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 143), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the stmnCrntPMOPTAvgValue object to 0.')
stmnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15), )
if mibBuilder.loadTexts: stmnHistPMTable.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the SDH STM-N facilities on the NE.')
stmnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnHistPMTypeIdx"), (0, "BTI-7000-MIB", "stmnHistPMShelfIdx"), (0, "BTI-7000-MIB", "stmnHistPMSlotIdx"), (0, "BTI-7000-MIB", "stmnHistPMPortIdx"), (0, "BTI-7000-MIB", "stmnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "stmnHistPMIntervalIdx"))
if mibBuilder.loadTexts: stmnHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMEntry.setDescription('The row entry object of the SDH STM-N historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given STM-N facility.')
stmnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMTypeIdx.setDescription('The type of the STM-N facility targeted for PMs.')
stmnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMShelfIdx.setDescription('The number of the shelf on which the STM-N facility targeted for PMs is provisioned.')
stmnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSlotIdx.setDescription('The number of the slot within which the STM-N facility targeted for PMs is provisioned.')
stmnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMPortIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility targeted for PMs is provisioned.')
stmnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
stmnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: stmnHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
stmnHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRValue.setDescription('The optical power received on the input of the STM-N facility.')
stmnHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
stmnHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
stmnHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTValue.setDescription('The optical power transmitted at the output of the STM-N facility.')
stmnHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
stmnHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
stmnHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMTempValue.setDescription('The temperature measured on the STM-N facility port.')
stmnHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
stmnHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
stmnHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the STM-N facility port.')
stmnHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
stmnHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
stmnHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMLBCValue.setDescription('The laser bias current measured on the STM-N facility port.')
stmnHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
stmnHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
stmnHistPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSEBValue.setDescription('The count of regenerator section errored blocks.')
stmnHistPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSEBTimeStamp.setDescription('The date and time stamp of the regenerator section errored blocks value.')
stmnHistPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSEBValidity.setDescription('Indicates the validity of the provided regenerator section errored blocks value.')
stmnHistPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSBBEValue.setDescription('The count of regenerator section background block errors.')
stmnHistPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSBBETimeStamp.setDescription('The date and time stamp of the regenerator section background block errors value.')
stmnHistPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSBBEValidity.setDescription('Indicates the validity of the provided regenerator section background block errors value.')
stmnHistPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSESValue.setDescription('The count of regenerator section errored seconds.')
stmnHistPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSESTimeStamp.setDescription('The date and time stamp of the regenerator section errored seconds value.')
stmnHistPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSESValidity.setDescription('Indicates the validity of the provided regenerator section errored seconds value.')
stmnHistPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSSESValue.setDescription('The count of regenerator section severely errored seconds.')
stmnHistPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSSESTimeStamp.setDescription('The date and time stamp of the regenerator section severely errored seconds value.')
stmnHistPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSSESValidity.setDescription('Indicates the validity of the provided regenerator section severely errored seconds value.')
stmnHistPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSOFSValue.setDescription('The count of regenerator section out-of-frame seconds.')
stmnHistPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSOFSTimeStamp.setDescription('The date and time stamp of the regenerator section out-of-frame seconds value.')
stmnHistPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSOFSValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSOFSValidity.setDescription('Indicates the validity of the provided regenerator section out-of-frame seconds value.')
stmnHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 37), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Value.setDescription('The value of the second supply voltage source measured on the STM-N facility port transceiver.')
stmnHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
stmnHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
stmnHistPMMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSEBValue.setDescription('The count of multiplex section errored blocks.')
stmnHistPMMSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSEBTimeStamp.setDescription('The date and time stamp of the multiplex section errored blocks value.')
stmnHistPMMSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSEBValidity.setDescription('Indicates the validity of the provided multiplex section errored blocks value.')
stmnHistPMMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSBBEValue.setDescription('The count of multiplex section background block errors.')
stmnHistPMMSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSBBETimeStamp.setDescription('The date and time stamp of the multiplex section background block errors value.')
stmnHistPMMSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSBBEValidity.setDescription('Indicates the validity of the provided multiplex section background block errors value.')
stmnHistPMMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSESValue.setDescription('The count of multiplex section errored seconds.')
stmnHistPMMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSESTimeStamp.setDescription('The date and time stamp of the multiplex section errored seconds value.')
stmnHistPMMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSESValidity.setDescription('Indicates the validity of the provided multiplex section errored seconds value.')
stmnHistPMMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSSESValue.setDescription('The count of multiplex section severely errored seconds.')
stmnHistPMMSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSSESTimeStamp.setDescription('The date and time stamp of the multiplex section severely errored seconds value.')
stmnHistPMMSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSSESValidity.setDescription('Indicates the validity of the provided multiplex section severely errored seconds value.')
stmnHistPMMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSUASValue.setDescription('The count of multiplex section unavailable seconds.')
stmnHistPMMSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSUASTimeStamp.setDescription('The date and time stamp of the multiplex section unavailable seconds value.')
stmnHistPMMSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSUASValidity.setDescription('Indicates the validity of the provided multiplex section unavailable seconds value.')
stmnHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
stmnHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
stmnHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
stmnHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
stmnHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
stmnHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
stmnHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
stmnHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
stmnHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
stmnHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
stmnHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
stmnHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
stmnHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
stmnHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
stmnHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored framing seconds value.')
stmnHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 70), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
stmnHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
stmnHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 73), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
stmnHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
stmnHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
stmnHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
stmnHistPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSEBInitialize.setDescription('Used to initialize the value of the stmnHistPMRSEBValue object to 0.')
stmnHistPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSBBEInitialize.setDescription('Used to initialize the value of the stmnHistPMRSBBEValue object to 0.')
stmnHistPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSESInitialize.setDescription('Used to initialize the value of the stmnHistPMRSESValue object to 0.')
stmnHistPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSSESInitialize.setDescription('Used to initialize the value of the stmnHistPMRSSESValue object to 0.')
stmnHistPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSOFSInitialize.setDescription('Used to initialize the value of the stmnHistPMRSOFSValue object to 0.')
stmnHistPMMSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSEBInitialize.setDescription('Used to initialize the value of the stmnHistPMMSEBValue object to 0.')
stmnHistPMMSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSBBEInitialize.setDescription('Used to initialize the value of the stmnHistPMMSBBEValue object to 0.')
stmnHistPMMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSESInitialize.setDescription('Used to initialize the value of the stmnHistPMMSESValue object to 0.')
stmnHistPMMSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSSESInitialize.setDescription('Used to initialize the value of the stmnHistPMMSSESValue object to 0.')
stmnHistPMMSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMMSUASInitialize.setDescription('Used to initialize the value of the stmnHistPMMSUASValue object to 0.')
stmnHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUEBInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUEBValue object to 0.')
stmnHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUBBEInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUBBEValue object to 0.')
stmnHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUESInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUESValue object to 0.')
stmnHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUSESInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUSESValue object to 0.')
stmnHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUOFSInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUOFSValue object to 0.')
stmnHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCRInitialize.setDescription('Used to initialize the value of the stmnHistPMNBITCRValue object to 0.')
stmnHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCRInitialize.setDescription('Used to initialize the value of the stmnHistPMNBYTCRValue object to 0.')
stmnHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMUNCRCDWInitialize.setDescription('Used to initialize the value of the stmnHistPMUNCRCDWValue object to 0.')
stmnHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 97), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNBERValue.setDescription('The instantaneous BER of STM-64 line port provisioned for OTN line mapping.')
stmnHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
stmnHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
stmnHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNBERInitialize.setDescription('Used to initialize the value of the stmnHistPMOTNBERValue object to 0.')
stmnHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValue.setDescription('The interval/average BER of STM-64 line port provisioned for OTN line mapping.')
stmnHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
stmnHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
stmnHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the stmnHistPMOTNAVGBERValue object to 0.')
stmnHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 105), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
stmnHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
stmnHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBITCR64BitValue object to 0.')
stmnHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 109), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
stmnHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
stmnHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the stmnCrntPMNBYTCR64BitValue object to 0.')
stmnHistPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 113), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSUASValue.setDescription('The count of regenerator section unavailable seconds. This object applies only to STM-64 line port provisioned for OTN line mapping.')
stmnHistPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSUASTimeStamp.setDescription('The date and time stamp of the regenerator section unavailable seconds value.')
stmnHistPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSUASValidity.setDescription('Indicates the validity of the provided regenerator section unavailable seconds value.')
stmnHistPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMRSUASInitialize.setDescription('Used to initialize the value of the stmnHistPMRSUASValue object to 0.')
stmnHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
stmnHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
stmnHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
stmnHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOTUUASInitialize.setDescription('Used to initialize the value of the stmnHistPMOTUUASValue object to 0.')
stmnHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
stmnHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
stmnHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
stmnHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMinInitialize.setDescription('Used to initialize the value of the stmnHistPMOPRMinValue object to 0.')
stmnHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
stmnHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
stmnHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
stmnHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the stmnHistPMOPRMaxValue object to 0.')
stmnHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
stmnHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
stmnHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
stmnHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the stmnHistPMOPRAvgValue object to 0.')
stmnHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
stmnHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
stmnHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
stmnHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMinInitialize.setDescription('Used to initialize the value of the stmnHistPMOPTMinValue object to 0.')
stmnHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 137), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
stmnHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
stmnHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
stmnHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 140), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the stmnHistPMOPTMaxValue object to 0.')
stmnHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 141), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
stmnHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
stmnHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
stmnHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 144), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: stmnHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the stmnHistPMOPTAvgValue object to 0.')
stmnPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16), )
if mibBuilder.loadTexts: stmnPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on SDH STM-N facilities, that are used in the generation of threshold crossing alerts.')
stmnPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdPortIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: stmnPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdEntry.setDescription('The row entry object of the SDH STM-N performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual STM-N facility.')
stmnPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnPMThresholdTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdTypeIdx.setDescription('The type of the STM-N facility targeted for PM thresholds.')
stmnPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdShelfIdx.setDescription('The shelf number on which the STM-N facility targeted for PM thresholds is provisioned.')
stmnPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdSlotIdx.setDescription('The slot number on which the STM-N facility targeted for PM thresholds is provisioned.')
stmnPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdPortIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility targeted for PM thresholds is provisioned.')
stmnPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
stmnPMThresholdRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSEBValue.setDescription('The threshold for the count of regenerator section errored blocks.')
stmnPMThresholdRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSBBEValue.setDescription('The threshold for the count of regenerator section background block errors.')
stmnPMThresholdRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSESValue.setDescription('The threshold for the count of regenerator section errored seconds.')
stmnPMThresholdRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSSESValue.setDescription('The threshold for the count of regenerator section severely errored seconds.')
stmnPMThresholdRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSOFSValue.setDescription('The threshold for the count of regenerator section out-of-frame seconds.')
stmnPMThresholdMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdMSEBValue.setDescription('The threshold for the count of multiplex section errored blocks.')
stmnPMThresholdMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdMSBBEValue.setDescription('The threshold for the count of multiplex section background block errors.')
stmnPMThresholdMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdMSESValue.setDescription('The threshold for the count of multiplex section errored seconds.')
stmnPMThresholdMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdMSSESValue.setDescription('The threshold for the count of multiplex section severely errored seconds.')
stmnPMThresholdMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdMSUASValue.setDescription('The threshold for the count of multiplex section unavailable seconds.')
stmnPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUEBValue.setDescription('The threshold for the count of OTU digital wrapper layer errored blocks.')
stmnPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUBBEValue.setDescription('The threshold for the count of OTU digital wrapper layer background block errors.')
stmnPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUESValue.setDescription('The threshold for the count of OTU digital wrapper layer errored seconds.')
stmnPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUSESValue.setDescription('The threshold for the count of OTU digital wrapper layer severely errored seconds.')
stmnPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUOFSValue.setDescription('The threshold for the count of OTU digital wrapper layer out-of-frame seconds.')
stmnPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdUNCRCDWValue.setDescription('The threshold for the count of uncorrectable codewords.')
stmnPMThresholdRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdRSUASValue.setDescription('The threshold for the count of regenerator section unavailable seconds.')
stmnPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: stmnPMThresholdOTUUASValue.setDescription('The threshold for the count of OTU digital wrapper layer unavailable seconds.')
vcnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17), )
if mibBuilder.loadTexts: vcnCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the SDH VC-N facilities on the NE.')
vcnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "vcnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "vcnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "vcnCrntPMPortIdx"), (0, "BTI-7000-MIB", "vcnCrntPMIdx"), (0, "BTI-7000-MIB", "vcnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: vcnCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMEntry.setDescription('The row entry object of the SDH VC-N current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given VC-N facility.')
vcnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMTypeIdx.setDescription('The type of VC-N facility targeted for PMs.')
vcnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMShelfIdx.setDescription('The number of the shelf of the VC-N facility targeted for PMs.')
vcnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMSlotIdx.setDescription('The number of the slot of the VC-N facility targeted for PMs.')
vcnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMPortIdx.setDescription('The number of the port on the circuit pack of the VC-N facility targeted for PMs.')
vcnCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMIdx.setDescription('The channel number of the VC-N facility targeted for PMs.')
vcnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: vcnCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
vcnCrntPMHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPEBValue.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPEBValue.setDescription('The count of high order path errored blocks.')
vcnCrntPMHPEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPEBTimeStamp.setDescription('The date and time stamp of the high order path errored blocks value.')
vcnCrntPMHPEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPEBValidity.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPEBValidity.setDescription('Indicates the validity of the provided high order path errored blocks value.')
vcnCrntPMHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPBBEValue.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPBBEValue.setDescription('The count of high order path background block errors.')
vcnCrntPMHPBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPBBETimeStamp.setDescription('The date and time stamp of the high order path background block errors value.')
vcnCrntPMHPBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPBBEValidity.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPBBEValidity.setDescription('Indicates the validity of the provided high order path background block errors value.')
vcnCrntPMHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPESValue.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPESValue.setDescription('The count of high order path errored seconds.')
vcnCrntPMHPESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPESTimeStamp.setDescription('The date and time stamp of the high order path errored seconds value.')
vcnCrntPMHPESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPESValidity.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPESValidity.setDescription('Indicates the validity of the provided high order path errored seconds value.')
vcnCrntPMHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPSESValue.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPSESValue.setDescription('The count of high order path severely errored seconds.')
vcnCrntPMHPSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPSESTimeStamp.setDescription('The date and time stamp of the high order path severely errored seconds value.')
vcnCrntPMHPSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPSESValidity.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPSESValidity.setDescription('Indicates the validity of the provided high order path severely errored seconds value.')
vcnCrntPMHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPUASValue.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPUASValue.setDescription('The count of high order path unavailable seconds.')
vcnCrntPMHPUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPUASTimeStamp.setDescription('The date and time stamp of the high order path unavailable seconds value.')
vcnCrntPMHPUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPUASValidity.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPUASValidity.setDescription('Indicates the validity of the provided high order path unavailable seconds value.')
vcnCrntPMHPEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPEBInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPEBInitialize.setDescription('Used to initialize the value of the vcnCrntPMHPEBValue object to 0.')
vcnCrntPMHPBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPBBEInitialize.setDescription('Used to initialize the value of the vcnCrntPMHPBBEValue object to 0.')
vcnCrntPMHPESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPESInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPESInitialize.setDescription('Used to initialize the value of the vcnCrntPMHPESValue object to 0.')
vcnCrntPMHPSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPSESInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPSESInitialize.setDescription('Used to initialize the value of the vcnCrntPMHPSESValue object to 0.')
vcnCrntPMHPUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPUASInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnCrntPMHPUASInitialize.setDescription('Used to initialize the value of the vcnCrntPMHPUASValue object to 0.')
vcnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18), )
if mibBuilder.loadTexts: vcnHistPMTable.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the SDH VC-N facilities on the NE.')
vcnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnHistPMTypeIdx"), (0, "BTI-7000-MIB", "vcnHistPMShelfIdx"), (0, "BTI-7000-MIB", "vcnHistPMSlotIdx"), (0, "BTI-7000-MIB", "vcnHistPMPortIdx"), (0, "BTI-7000-MIB", "vcnHistPMIdx"), (0, "BTI-7000-MIB", "vcnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "vcnHistPMIntervalIdx"))
if mibBuilder.loadTexts: vcnHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMEntry.setDescription('The row entry object of the SDH VC-N historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given VC-N facility.')
vcnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMTypeIdx.setDescription('The type of the VC-N facility targeted for PMs.')
vcnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMShelfIdx.setDescription('The number of the shelf of the VC-N facility targeted for PMs.')
vcnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMSlotIdx.setDescription('The number of the slot of the VC-N facility targeted for PMs.')
vcnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMPortIdx.setDescription('The number of the port on the circuit pack of the VC-N facility targeted for PMs.')
vcnHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMIdx.setDescription('The channel number of the VC-N facility targeted for PMs.')
vcnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: vcnHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
vcnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: vcnHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
vcnHistPMHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPEBValue.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPEBValue.setDescription('The count of high order path errored blocks.')
vcnHistPMHPEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPEBTimeStamp.setDescription('The date and time stamp of the high order path errored blocks value.')
vcnHistPMHPEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPEBValidity.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPEBValidity.setDescription('Indicates the validity of the provided high order path errored blocks value.')
vcnHistPMHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPBBEValue.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPBBEValue.setDescription('The count of high order path background block errors.')
vcnHistPMHPBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPBBETimeStamp.setDescription('The date and time stamp of the high order path background block errors value.')
vcnHistPMHPBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPBBEValidity.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPBBEValidity.setDescription('Indicates the validity of the provided high order path background block errors value.')
vcnHistPMHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPESValue.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPESValue.setDescription('The count of high order path errored seconds.')
vcnHistPMHPESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPESTimeStamp.setDescription('The date and time stamp of the high order path errored seconds value.')
vcnHistPMHPESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPESValidity.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPESValidity.setDescription('Indicates the validity of the high order path errored seconds value.')
vcnHistPMHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPSESValue.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPSESValue.setDescription('The count of high order path severely errored seconds.')
vcnHistPMHPSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPSESTimeStamp.setDescription('The date and time stamp of the high order path severely errored seconds value.')
vcnHistPMHPSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPSESValidity.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPSESValidity.setDescription('Indicates the validity of the provided high order path severely errored seconds value.')
vcnHistPMHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPUASValue.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPUASValue.setDescription('The count of high order path unavailable seconds.')
vcnHistPMHPUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPUASTimeStamp.setDescription('The date and time stamp of the high order path unavailable seconds value.')
vcnHistPMHPUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPUASValidity.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPUASValidity.setDescription('Indicates the validity of the provided high order path unavailable seconds value.')
vcnHistPMHPEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPEBInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPEBInitialize.setDescription('Used to initialize the value of the vcnHistPMHPEBValue object to 0.')
vcnHistPMHPBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPBBEInitialize.setDescription('Used to initialize the value of the vcnHistPMHPBBEValue object to 0.')
vcnHistPMHPESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPESInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPESInitialize.setDescription('Used to initialize the value of the vcnHistPMHPESValue object to 0.')
vcnHistPMHPSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPSESInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPSESInitialize.setDescription('Used to initialize the value of the vcnHistPMHPSESValue object to 0.')
vcnHistPMHPUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPUASInitialize.setStatus('current')
if mibBuilder.loadTexts: vcnHistPMHPUASInitialize.setDescription('Used to initialize the value of the vcnHistPMHPUASValue object to 0.')
vcnPMThresholdByPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19), )
if mibBuilder.loadTexts: vcnPMThresholdByPortTable.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortTable.setDescription('A table of threshold levels for performance monitoring counter values on SDH VC-N facilities, that are used in the generation of threshold crossing alerts. The VC-N threshold settings will be the same for all channels on a given STM-N facility port.')
vcnPMThresholdByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnPMThresholdByPortTypeIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortShelfIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortSlotIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortIntervalTypeIdx"))
if mibBuilder.loadTexts: vcnPMThresholdByPortEntry.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortEntry.setDescription('The row entry object of the SDH STM-N performance monitoring threshold by port table. Each row of this table contains a set of PM thresholds for a given interval type that applies to all the VC-N channels on an STM-N facility port.')
vcnPMThresholdByPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnPMThresholdByPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortTypeIdx.setDescription('The type of the VC-N facility targeted for PM thresholds.')
vcnPMThresholdByPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnPMThresholdByPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortShelfIdx.setDescription('The shelf number of the VC-N facilities targeted for PM thresholds.')
vcnPMThresholdByPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnPMThresholdByPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortSlotIdx.setDescription('The slot number of the VC-N facilities targeted for PM thresholds.')
vcnPMThresholdByPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnPMThresholdByPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortIdx.setDescription('The number of the port on the circuit pack of the VC-N facilities targeted for PM thresholds.')
vcnPMThresholdByPortIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: vcnPMThresholdByPortIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
vcnPMThresholdByPortHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPEBValue.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortHPEBValue.setDescription('The threshold for the count of high order path errored blocks.')
vcnPMThresholdByPortHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPBBEValue.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortHPBBEValue.setDescription('The threshold for the count of high order path background block errors.')
vcnPMThresholdByPortHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPESValue.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortHPESValue.setDescription('The threshold for the count of high order path errored seconds.')
vcnPMThresholdByPortHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPSESValue.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortHPSESValue.setDescription('The threshold for the count of high order path severely errored seconds.')
vcnPMThresholdByPortHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPUASValue.setStatus('current')
if mibBuilder.loadTexts: vcnPMThresholdByPortHPUASValue.setDescription('The threshold for the count of high order path unavailable seconds.')
geCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20), )
if mibBuilder.loadTexts: geCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the Gigabit Ethernet facilities on the NE.')
geCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1), ).setIndexNames((0, "BTI-7000-MIB", "geCrntPMShelfIdx"), (0, "BTI-7000-MIB", "geCrntPMSlotIdx"), (0, "BTI-7000-MIB", "geCrntPMPortIdx"), (0, "BTI-7000-MIB", "geCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: geCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: geCrntPMEntry.setDescription('The row entry object of the Gigabit Ethernet current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given Gigabit Ethernet facility.')
geCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: geCrntPMShelfIdx.setDescription('The number of the shelf on which the GE facility targeted for PMs is provisioned.')
geCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSlotIdx.setDescription('The number of the slot within which the GE facility targeted for PMs is provisioned.')
geCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: geCrntPMPortIdx.setDescription('The number of the port on the circuit pack on which the GE facility targeted for PMs is provisioned.')
geCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: geCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: geCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
geCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRValue.setDescription('The optical power received on the input of the GE facility port.')
geCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
geCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
geCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTValue.setDescription('The optical power transmitted at the output of the GE facility port.')
geCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
geCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
geCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTempValue.setDescription('The temperature measured on the GE facility port.')
geCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
geCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
geCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the GE facility port.')
geCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
geCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
geCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMLBCValue.setDescription('The laser bias current measured on the GE facility port.')
geCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
geCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
geCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMCVValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMCVValue.setDescription('The count of Gigabit Ethernet 8B/10B coding violations.')
geCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMCVTimeStamp.setDescription('The date and time stamp of the GE coding violations value.')
geCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMCVValidity.setDescription('Indicates the validity of the provided GE coding violations value.')
geCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMESValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMESValue.setDescription('The count of GE errored seconds.')
geCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMESTimeStamp.setDescription('The date and time stamp of the GE errored seconds value.')
geCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMESValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMESValidity.setDescription('Indicates the validity of the provided GE errored seconds value.')
geCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSESValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSESValue.setDescription('The count of GE severely errored seconds.')
geCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSESTimeStamp.setDescription('The date and time stamp of the GE severely errored seconds value.')
geCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSESValidity.setDescription('Indicates the validity of the provided GE severely errored seconds value.')
geCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 29), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCRXValue.setDescription('The Gigabit Ethernet total received frame count.')
geCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCRXTimeStamp.setDescription('The date and time stamp of the GE total received frame count value.')
geCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCRXValidity.setDescription('Indicates the validity of the provided GE total received frame count value.')
geCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCRXInitialize.setDescription('Used to initialize the value of the geCrntPMTFRCRXValue object to 0.')
geCrntPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 33), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCTXValue.setDescription('The Gigabit Ethernet total transmitted frame count.')
geCrntPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted frame count value.')
geCrntPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted frame count value.')
geCrntPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTFRCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTFRCTXInitialize.setDescription('Used to initialize the value of the geCrntPMTFRCTXValue object to 0.')
geCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRDRValue.setDescription('The count of Gigabit Ethernet discarded frames.')
geCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRDRTimeStamp.setDescription('The date and time stamp of the GE discarded frames value.')
geCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRDRValidity.setDescription('Indicates the validity of the provided GE discarded frames value.')
geCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFCSEValue.setDescription('The count of Gigabit Ethernet frame checksum errors.')
geCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFCSETimeStamp.setDescription('The date and time stamp of the GE frame checksum errors value.')
geCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFCSEValidity.setDescription('Indicates the validity of the provided GE frame checksum errors value.')
geCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCRXValue.setDescription('The Gigabit Ethernet total received byte count.')
geCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCRXTimeStamp.setDescription('The date and time stamp of the GE total received byte count value.')
geCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCRXValidity.setDescription('Indicates the validity of the provided GE total received byte count value.')
geCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCRXInitialize.setDescription('Used to initialize the value of the geCrntPMTBYCRXValue object to 0.')
geCrntPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCTXValue.setDescription('The Gigabit Ethernet total transmitted byte count.')
geCrntPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted byte count value.')
geCrntPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted byte count value.')
geCrntPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTBYCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTBYCTXInitialize.setDescription('Used to initialize the value of the geCrntPMTBYCTXValue object to 0.')
geCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames.')
geCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
geCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
geCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMBCSTInitialize.setDescription('Used to initialize the value of the geCrntPMBCSTValue object to 0.')
geCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
geCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
geCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
geCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMMCSTInitialize.setDescription('Used to initialize the value of the geCrntPMMCSTValue object to 0.')
geCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets).')
geCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
geCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
geCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE64Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE64Value object to 0.')
geCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets).')
geCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
geCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
geCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE65To127Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE65To127Value object to 0.')
geCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets).')
geCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
geCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
geCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE128To255Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE128To255Value object to 0.')
geCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets).')
geCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
geCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
geCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE256To511Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE256To511Value object to 0.')
geCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 75), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets).')
geCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
geCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
geCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE512To1023Value object to 0.')
geCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 79), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets).')
geCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
geCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
geCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the geCrntPMSIZE1024To1518Value object to 0.')
geCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 83), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets).')
geCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
geCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
geCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the geCrntPMSIZEOver1518Value object to 0.')
geCrntPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 87), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCRXValue.setDescription('The Gigabit Ethernet total received pause frame count.')
geCrntPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 88), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCRXTimeStamp.setDescription('The date and time stamp of the GE total received pause frame count value.')
geCrntPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 89), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCRXValidity.setDescription('Indicates the validity of the provided GE total received pause frame count value.')
geCrntPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTPFCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCRXInitialize.setDescription('Used to initialize the value of the geCrntPMTPFCRXValue object to 0.')
geCrntPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 91), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCTXValue.setDescription('The Gigabit Ethernet total transmitted pause frame count.')
geCrntPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 92), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted pause frame count value.')
geCrntPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 93), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted pause frame count value.')
geCrntPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTPFCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMTPFCTXInitialize.setDescription('Used to initialize the value of the geCrntPMTPFCTXValue object to 0.')
geCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 95), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
geCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 96), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
geCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 97), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
geCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 98), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
geCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 99), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
geCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 100), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
geCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 101), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
geCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
geCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
geCrntPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 104), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMJABRValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMJABRValue.setDescription('The total number of frames received that were longer than 14336 9600 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with non-integral number of octets (Alignment Error).')
geCrntPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMJABRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMJABRTimeStamp.setDescription('The date and time stamp of the count of received jabbers.')
geCrntPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMJABRValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMJABRValidity.setDescription('Indicates the validity of the provided count of received jabbers.')
geCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMCVInitialize.setDescription('Used to initialize the value of the geCrntPMCVValue object to 0.')
geCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMESInitialize.setDescription('Used to initialize the value of the geCrntPMESValue object to 0.')
geCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMSESInitialize.setDescription('Used to initialize the value of the geCrntPMSESValue object to 0.')
geCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 110), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFCSEInitialize.setDescription('Used to initialize the value of the geCrntPMFCSEValue object to 0.')
geCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRDRInitialize.setDescription('Used to initialize the value of the geCrntPMFRDRValue object to 0.')
geCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUSIZEInitialize.setDescription('Used to initialize the value of the geCrntPMUSIZEValue object to 0.')
geCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOSIZEInitialize.setDescription('Used to initialize the value of the geCrntPMOSIZEValue object to 0.')
geCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 114), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMFRGTInitialize.setDescription('Used to initialize the value of the geCrntPMFRGTValue object to 0.')
geCrntPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMJABRInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMJABRInitialize.setDescription('Used to initialize the value of the geCrntPMJABRValue object to 0.')
geCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUASValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the gigabit ethernet protocol.')
geCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
geCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
geCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMUASInitialize.setDescription('Used to initialize the value of the geCrntPMUASValue object to 0.')
geCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
geCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
geCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
geCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the geCrntPMOPRMinValue object to 0.')
geCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
geCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
geCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
geCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the geCrntPMOPRMaxValue object to 0.')
geCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
geCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
geCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
geCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the geCrntPMOPRAvgValue object to 0.')
geCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
geCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
geCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
geCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the geCrntPMOPTMinValue object to 0.')
geCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 136), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
geCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 137), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
geCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 138), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
geCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 139), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the geCrntPMOPTMaxValue object to 0.')
geCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 140), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
geCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
geCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
geCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 143), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: geCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the geCrntPMOPTAvgValue object to 0.')
geHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21), )
if mibBuilder.loadTexts: geHistPMTable.setStatus('current')
if mibBuilder.loadTexts: geHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the Gigabit Ethernet facilities on the NE.')
geHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1), ).setIndexNames((0, "BTI-7000-MIB", "geHistPMShelfIdx"), (0, "BTI-7000-MIB", "geHistPMSlotIdx"), (0, "BTI-7000-MIB", "geHistPMPortIdx"), (0, "BTI-7000-MIB", "geHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "geHistPMIntervalIdx"))
if mibBuilder.loadTexts: geHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: geHistPMEntry.setDescription('The row entry object of the Gigabit Ethernet historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given Gigabit Ethernet facility.')
geHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: geHistPMShelfIdx.setDescription('The number of the shelf on which the GE facility targeted for PMs is provisioned.')
geHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: geHistPMSlotIdx.setDescription('The number of the slot within which the GE facility targeted for PMs is provisioned.')
geHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: geHistPMPortIdx.setDescription('The number of the port on the circuit pack on which the GE facility targeted for PMs is provisioned.')
geHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: geHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: geHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
geHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: geHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: geHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
geHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRValue.setDescription('The optical power received on the input of the GE facility port.')
geHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
geHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
geHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTValue.setDescription('The optical power transmitted at the output of the GE facility port.')
geHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
geHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
geHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTempValue.setDescription('The temperature measured on the GE facility port.')
geHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
geHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
geHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the GE facility port.')
geHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
geHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
geHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMLBCValue.setDescription('The laser bias current measured on the GE facility port.')
geHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
geHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
geHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMCVValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMCVValue.setDescription('The count of Gigabit Ethernet 8B/10B coding violations.')
geHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMCVTimeStamp.setDescription('The date and time stamp of the GE coding violations value.')
geHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMCVValidity.setDescription('Indicates the validity of the provided GE coding violations value.')
geHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMESValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMESValue.setDescription('The count of GE errored seconds.')
geHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMESTimeStamp.setDescription('The date and time stamp of the GE errored seconds value.')
geHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMESValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMESValidity.setDescription('Indicates the validity of the provided GE errored seconds value.')
geHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSESValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMSESValue.setDescription('The count of GE severely errored seconds.')
geHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSESTimeStamp.setDescription('The date and time stamp of the GE severely errored seconds value.')
geHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSESValidity.setDescription('Indicates the validity of the provided GE severely errored seconds value.')
geHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 30), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCRXValue.setDescription('The Gigabit Ethernet total received byte count.')
geHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCRXTimeStamp.setDescription('The date and time stamp of the GE total received byte count value.')
geHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCRXValidity.setDescription('Indicates the validity of the provided GE total received byte count value.')
geHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCRXInitialize.setDescription('Used to initialize the value of the geHistPMTBYCRXValue object to 0.')
geHistPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 34), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCTXValue.setDescription('The Gigabit Ethernet total transmitted frame count.')
geHistPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted frame count value.')
geHistPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted frame count value.')
geHistPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTFRCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTFRCTXInitialize.setDescription('Used to initialize the value of the geHistPMTFRCTXValue object to 0.')
geHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRDRValue.setDescription('The count of Gigabit Ethernet discarded frames.')
geHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRDRTimeStamp.setDescription('The date and time stamp of the GE discarded frames value.')
geHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRDRValidity.setDescription('Indicates the validity of the provided GE discarded frames value.')
geHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMFCSEValue.setDescription('The count of Gigabit Ethernet frame checksum errors.')
geHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMFCSETimeStamp.setDescription('The date and time stamp of the GE frame checksum errors value.')
geHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMFCSEValidity.setDescription('Indicates the validity of the provided GE frame checksum errors value.')
geHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCRXValue.setDescription('The Gigabit Ethernet total received byte count.')
geHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCRXTimeStamp.setDescription('The date and time stamp of the GE total received byte count value.')
geHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCRXValidity.setDescription('Indicates the validity of the provided GE total received byte count value.')
geHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCRXInitialize.setDescription('Used to initialize the value of the geHistPMTBYCRXValue object to 0.')
geHistPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCTXValue.setDescription('The Gigabit Ethernet total transmitted byte count.')
geHistPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted byte count value.')
geHistPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted byte count value.')
geHistPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTBYCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTBYCTXInitialize.setDescription('Used to initialize the value of the geHistPMTBYCTXValue object to 0.')
geHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames.')
geHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
geHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
geHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMBCSTInitialize.setDescription('Used to initialize the value of the geHistPMBCSTValue object to 0.')
geHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
geHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
geHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
geHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMMCSTInitialize.setDescription('Used to initialize the value of the geHistPMMCSTValue object to 0.')
geHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets).')
geHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
geHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
geHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE64Initialize.setDescription('Used to initialize the value of the geHistPMSIZE64Value object to 0.')
geHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets).')
geHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
geHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
geHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE65To127Initialize.setDescription('Used to initialize the value of the geHistPMSIZE65To127Value object to 0.')
geHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets).')
geHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
geHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
geHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE128To255Initialize.setDescription('Used to initialize the value of the geHistPMSIZE128To255Value object to 0.')
geHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets).')
geHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
geHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
geHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE256To511Initialize.setDescription('Used to initialize the value of the geHistPMSIZE256To511Value object to 0.')
geHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 76), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets).')
geHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
geHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
geHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the geHistPMSIZE512To1023Value object to 0.')
geHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets).')
geHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
geHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
geHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the geHistPMSIZE1024To1518Value object to 0.')
geHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets).')
geHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
geHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
geHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the geHistPMSIZEOver1518Value object to 0.')
geHistPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 88), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCRXValue.setDescription('The Gigabit Ethernet total received pause frame count.')
geHistPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCRXTimeStamp.setDescription('The date and time stamp of the GE total received pause frame count value.')
geHistPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCRXValidity.setDescription('Indicates the validity of the provided GE total received pause frame count value.')
geHistPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTPFCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCRXInitialize.setDescription('Used to initialize the value of the geHistPMTPFCRXValue object to 0.')
geHistPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 92), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCTXValue.setDescription('The Gigabit Ethernet total transmitted pause frame count.')
geHistPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCTXTimeStamp.setDescription('The date and time stamp of the GE total transmitted pause frame count value.')
geHistPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCTXValidity.setDescription('Indicates the validity of the provided GE total transmitted pause frame count value.')
geHistPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTPFCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMTPFCTXInitialize.setDescription('Used to initialize the value of the geHistPMTPFCTXValue object to 0.')
geHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 96), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
geHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
geHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
geHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 99), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
geHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 100), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
geHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 101), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
geHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 102), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
geHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 103), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
geHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 104), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
geHistPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 105), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMJABRValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMJABRValue.setDescription('The total number of frames received that were longer than 14336 9600 octets (excluding framing bits, but including FCS octets), and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with non-integral number of octets (Alignment Error).')
geHistPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMJABRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMJABRTimeStamp.setDescription('The date and time stamp of the count of received jabbers.')
geHistPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMJABRValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMJABRValidity.setDescription('Indicates the validity of the provided count of received jabbers.')
geHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMCVInitialize.setDescription('Used to initialize the value of the geHistPMCVValue object to 0.')
geHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMESInitialize.setDescription('Used to initialize the value of the geHistPMESValue object to 0.')
geHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 110), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMSESInitialize.setDescription('Used to initialize the value of the geHistPMSESValue object to 0.')
geHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMFCSEInitialize.setDescription('Used to initialize the value of the geHistPMFCSEValue object to 0.')
geHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRDRInitialize.setDescription('Used to initialize the value of the geHistPMFRDRValue object to 0.')
geHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMUSIZEInitialize.setDescription('Used to initialize the value of the geHistPMUSIZEValue object to 0.')
geHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 114), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOSIZEInitialize.setDescription('Used to initialize the value of the geHistPMOSIZEValue object to 0.')
geHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMFRGTInitialize.setDescription('Used to initialize the value of the geHistPMFRGTValue object to 0.')
geHistPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMJABRInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMJABRInitialize.setDescription('Used to initialize the value of the geHistPMJABRValue object to 0.')
geHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUASValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the gigabit ethernet protocol.')
geHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
geHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
geHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMUASInitialize.setDescription('Used to initialize the value of the geHistPMUASValue object to 0.')
geHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
geHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
geHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
geHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMinInitialize.setDescription('Used to initialize the value of the geHistPMOPRMinValue object to 0.')
geHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
geHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
geHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
geHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the geHistPMOPRMaxValue object to 0.')
geHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
geHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
geHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
geHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the geHistPMOPRAvgValue object to 0.')
geHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
geHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
geHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
geHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMinInitialize.setDescription('Used to initialize the value of the geHistPMOPTMinValue object to 0.')
geHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 137), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
geHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
geHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
geHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 140), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the geHistPMOPTMaxValue object to 0.')
geHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 141), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
geHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
geHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
geHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 144), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: geHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the geHistPMOPTAvgValue object to 0.')
gePMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22), )
if mibBuilder.loadTexts: gePMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on Gigabit Ethernet facilities, that are used in the generation of threshold crossing alerts.')
gePMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1), ).setIndexNames((0, "BTI-7000-MIB", "gePMThresholdShelfIdx"), (0, "BTI-7000-MIB", "gePMThresholdSlotIdx"), (0, "BTI-7000-MIB", "gePMThresholdPortIdx"), (0, "BTI-7000-MIB", "gePMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: gePMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdEntry.setDescription('The row entry object of the Gigabit Ethernet performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual GE facility.')
gePMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: gePMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdShelfIdx.setDescription('The shelf number on which the Gigabit Ethernet facility targeted for PM thresholds is provisioned.')
gePMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: gePMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdSlotIdx.setDescription('The slot number on which the Gigabit Ethernet facility targeted for PM thresholds is provisioned.')
gePMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: gePMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdPortIdx.setDescription('The number of the port on the circuit pack on which the Gigabit Ethernet facility targeted for PM thresholds is provisioned.')
gePMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: gePMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
gePMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdCVValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdCVValue.setDescription('The threshold for the count of Gigabit Ethernet 8B/10B coding violations.')
gePMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdESValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdESValue.setDescription('The threshold for the count of Gigabit Ethernet errored seconds.')
gePMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdSESValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdSESValue.setDescription('The threshold for the count of Gigabit Ethernet severely errored seconds.')
gePMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFRDRValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdFRDRValue.setDescription('The threshold for the count of Gigabit Ethernet discarded frames.')
gePMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFCSEValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdFCSEValue.setDescription('The threshold for the count of Gigabit Ethernet frame check sum errors.')
gePMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdUSIZEValue.setDescription('The threshold for the count of Gigabit Ethernet undersized frames.')
gePMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdOSIZEValue.setDescription('The threshold for the count of Gigabit Ethernet oversized frames.')
gePMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFRGTValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdFRGTValue.setDescription('The threshold for the count of Gigabit Ethernet frame fragments.')
gePMThresholdJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdJABRValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdJABRValue.setDescription('The threshold for the count of Gigabit Ethernet jabbers.')
gePMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdUASValue.setStatus('current')
if mibBuilder.loadTexts: gePMThresholdUASValue.setDescription('The threshold for the count of Gigabit Ethernet unavailable seconds.')
fcCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23), )
if mibBuilder.loadTexts: fcCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the Fiber Channel facilities on the NE.')
fcCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcCrntPMShelfIdx"), (0, "BTI-7000-MIB", "fcCrntPMSlotIdx"), (0, "BTI-7000-MIB", "fcCrntPMPortIdx"), (0, "BTI-7000-MIB", "fcCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: fcCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMEntry.setDescription('The row entry object of the Fiber Channel current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given Fiber Channel facility.')
fcCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMShelfIdx.setDescription('The number of the shelf on which the FC facility targeted for PMs is provisioned.')
fcCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSlotIdx.setDescription('The number of the slot within which the FC facility targeted for PMs is provisioned.')
fcCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMPortIdx.setDescription('The number of the port on the circuit pack on which the FC facility targeted for PMs is provisioned.')
fcCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
fcCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRValue.setDescription('The optical power received on the input of the FC facility port.')
fcCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
fcCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
fcCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTValue.setDescription('The optical power transmitted at the output of the FC facility port.')
fcCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
fcCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
fcCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMTempValue.setDescription('The temperature measured on the FC facility port.')
fcCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
fcCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
fcCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the FC facility port.')
fcCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
fcCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
fcCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMLBCValue.setDescription('The laser bias current measured on the FC facility port.')
fcCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
fcCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
fcCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMCVValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMCVValue.setDescription('The count of Fiber Channel coding violations.')
fcCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMCVTimeStamp.setDescription('The date and time stamp of the FC coding violations value.')
fcCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMCVValidity.setDescription('Indicates the validity of the provided FC coding violations value.')
fcCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMESValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMESValue.setDescription('The count of FC errored seconds.')
fcCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMESTimeStamp.setDescription('The date and time stamp of the FC errored seconds value.')
fcCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMESValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMESValidity.setDescription('Indicates the validity of the provided FC errored seconds value.')
fcCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMSESValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSESValue.setDescription('The count of FC severely errored seconds.')
fcCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSESTimeStamp.setDescription('The date and time stamp of the FC severely errored seconds value.')
fcCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSESValidity.setDescription('Indicates the validity of the provided FC severely errored seconds value.')
fcCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMCVInitialize.setDescription('Used to initialize the value of the fcCrntPMCVValue object to 0.')
fcCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMESInitialize.setDescription('Used to initialize the value of the fcCrntPMESValue object to 0.')
fcCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMSESInitialize.setDescription('Used to initialize the value of the fcCrntPMSESValue object to 0.')
fcCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMUASValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the fiber channel protocol.')
fcCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
fcCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
fcCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMUASInitialize.setDescription('Used to initialize the value of the fcCrntPMUASValue object to 0.')
fcCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 36), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
fcCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
fcCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
fcCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the fcCrntPMOPRMinValue object to 0.')
fcCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 40), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
fcCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
fcCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
fcCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the fcCrntPMOPRMaxValue object to 0.')
fcCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 44), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
fcCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
fcCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
fcCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the fcCrntPMOPRAvgValue object to 0.')
fcCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 48), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
fcCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
fcCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
fcCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the fcCrntPMOPTMinValue object to 0.')
fcCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 52), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
fcCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
fcCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
fcCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the fcCrntPMOPTMaxValue object to 0.')
fcCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 56), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
fcCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
fcCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
fcCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: fcCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the fcCrntPMOPTAvgValue object to 0.')
fcHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24), )
if mibBuilder.loadTexts: fcHistPMTable.setStatus('current')
if mibBuilder.loadTexts: fcHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the Fiber Channel facilities on the NE.')
fcHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcHistPMShelfIdx"), (0, "BTI-7000-MIB", "fcHistPMSlotIdx"), (0, "BTI-7000-MIB", "fcHistPMPortIdx"), (0, "BTI-7000-MIB", "fcHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "fcHistPMIntervalIdx"))
if mibBuilder.loadTexts: fcHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: fcHistPMEntry.setDescription('The row entry object of the Fiber Channel historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given Fiber Channel facility.')
fcHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: fcHistPMShelfIdx.setDescription('The number of the shelf on which the FC facility targeted for PMs is provisioned.')
fcHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSlotIdx.setDescription('The number of the slot within which the FC facility targeted for PMs is provisioned.')
fcHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: fcHistPMPortIdx.setDescription('The number of the port on the circuit pack on which the FC facility targeted for PMs is provisioned.')
fcHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: fcHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
fcHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: fcHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: fcHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
fcHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRValue.setDescription('The optical power received on the input of the FC facility port.')
fcHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
fcHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
fcHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTValue.setDescription('The optical power transmitted at the output of the FC facility port.')
fcHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
fcHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
fcHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMTempValue.setDescription('The temperature measured on the FC facility port.')
fcHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
fcHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
fcHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the FC facility port.')
fcHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
fcHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
fcHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMLBCValue.setDescription('The laser bias current measured on the FC facility port.')
fcHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
fcHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
fcHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMCVValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMCVValue.setDescription('The count of Fiber Channel coding violations.')
fcHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMCVTimeStamp.setDescription('The date and time stamp of the FC coding violations value.')
fcHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMCVValidity.setDescription('Indicates the validity of the provided FC coding violations value.')
fcHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMESValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMESValue.setDescription('The count of FC errored seconds.')
fcHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMESTimeStamp.setDescription('The date and time stamp of the FC errored seconds value.')
fcHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMESValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMESValidity.setDescription('Indicates the validity of the provided FC errored seconds value.')
fcHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMSESValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSESValue.setDescription('The count of FC severely errored seconds.')
fcHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSESTimeStamp.setDescription('The date and time stamp of the FC severely errored seconds value.')
fcHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSESValidity.setDescription('Indicates the validity of the provided FC severely errored seconds value.')
fcHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMCVInitialize.setDescription('Used to initialize the value of the fcHistPMCVValue object to 0.')
fcHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMESInitialize.setDescription('Used to initialize the value of the fcHistPMESValue object to 0.')
fcHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMSESInitialize.setDescription('Used to initialize the value of the fcHistPMSESValue object to 0.')
fcHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMUASValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMUASValue.setDescription('The count of unavailable seconds. This object applies only to transciever ports provisioned for the fiber channel protocol.')
fcHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
fcHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
fcHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMUASInitialize.setDescription('Used to initialize the value of the fcHistPMUASValue object to 0.')
fcHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 37), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
fcHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
fcHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
fcHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMinInitialize.setDescription('Used to initialize the value of the fcHistPMOPRMinValue object to 0.')
fcHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 41), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
fcHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
fcHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
fcHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the fcHistPMOPRMaxValue object to 0.')
fcHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 45), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
fcHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
fcHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
fcHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the fcHistPMOPRAvgValue object to 0.')
fcHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 49), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
fcHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
fcHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
fcHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMinInitialize.setDescription('Used to initialize the value of the fcHistPMOPTMinValue object to 0.')
fcHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 53), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
fcHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 54), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
fcHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 55), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
fcHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 56), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the fcHistPMOPTMaxValue object to 0.')
fcHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 57), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
fcHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
fcHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
fcHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 60), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: fcHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the fcHistPMOPTAvgValue object to 0.')
fcPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25), )
if mibBuilder.loadTexts: fcPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on Fiber Channel facilities, that are used in the generation of threshold crossing alerts.')
fcPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "fcPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "fcPMThresholdPortIdx"), (0, "BTI-7000-MIB", "fcPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: fcPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdEntry.setDescription('The row entry object of the Fiber Channel performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual FC facility.')
fcPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdShelfIdx.setDescription('The shelf number on which the Fiber Channel facility targeted for PM thresholds is provisioned.')
fcPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdSlotIdx.setDescription('The slot number on which the Fiber Channel facility targeted for PM thresholds is provisioned.')
fcPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdPortIdx.setDescription('The number of the port on the circuit pack on which the Fiber Channel facility targeted for PM thresholds is provisioned.')
fcPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
fcPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdCVValue.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdCVValue.setDescription('The threshold for the count of Fiber Channel coding violations.')
fcPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdESValue.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdESValue.setDescription('The threshold for the count of Fiber Channel errored seconds.')
fcPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdSESValue.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdSESValue.setDescription('The threshold for the count of Fiber Channel severely errored seconds.')
fcPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdUASValue.setStatus('current')
if mibBuilder.loadTexts: fcPMThresholdUASValue.setDescription('The threshold for the count of Fiber Channel unavailable seconds.')
ethL1IFCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26), )
if mibBuilder.loadTexts: ethL1IFCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the Ethernet Layer 1 Interface facilities on the NE.')
ethL1IFCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFCrntPMShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMPortIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: ethL1IFCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMEntry.setDescription('The row entry object of the Ethernet Layer 1 Interface current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given Ethernet Layer 1 Interface facility.')
ethL1IFCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMShelfIdx.setDescription('The number of the shelf on which the Ethernet Layer 1 facility targeted for PMs is provisioned.')
ethL1IFCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSlotIdx.setDescription('The number of the slot within which the Ethernet Layer 1 facility targeted for PMs is provisioned.')
ethL1IFCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFCrntPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMPortTypeIdx.setDescription('The type of Ethernet Layer 1 port targeted for PMs.')
ethL1IFCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMPortIdx.setDescription('The number of the port of the identified type targeted for PMs.')
ethL1IFCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
ethL1IFCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValue.setDescription('The optical power received on the input of the Ethernet Layer 1 facility port.')
ethL1IFCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
ethL1IFCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
ethL1IFCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValue.setDescription('The optical power transmitted at the output of the Ethernet Layer 1 facility port.')
ethL1IFCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
ethL1IFCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
ethL1IFCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMTempValue.setDescription('The temperature measured on the Ethernet Layer 1 facility port.')
ethL1IFCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
ethL1IFCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
ethL1IFCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the Ethernet Layer 1 facility port.')
ethL1IFCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
ethL1IFCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
ethL1IFCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 18), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Value.setDescription('A second supply voltage value measured on the Ethernet Layer 1 facility port. This object is available only for XFP-equipped Ethernet Interface ports.')
ethL1IFCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
ethL1IFCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
ethL1IFCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValue.setDescription('The laser bias current measured on the Ethernet Layer 1 facility port.')
ethL1IFCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
ethL1IFCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
ethL1IFCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMCVValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMCVValue.setDescription('The count of 8B/10B coding violations. This object is only available on Gigabit Ethernet ports.')
ethL1IFCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMCVTimeStamp.setDescription('The date and time stamp of the coding violations value.')
ethL1IFCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMCVValidity.setDescription('Indicates the validity of the provided coding violations value.')
ethL1IFCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMCVInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMCVValue object to 0.')
ethL1IFCrntPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValue.setDescription('The count of invalid blocks. This object is only available on 10 Gigabit Ethernet ports.')
ethL1IFCrntPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKTimeStamp.setDescription('The date and time stamp of the invalid blocks value.')
ethL1IFCrntPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValidity.setDescription('Indicates the validity of the provided invalid blocks value.')
ethL1IFCrntPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMINVBLKValue object to 0.')
ethL1IFCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMESValue.setDescription('The count of Ethernet Layer 1 errored seconds.')
ethL1IFCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMESTimeStamp.setDescription('The date and time stamp of the Ethernet Layer 1 errored seconds value.')
ethL1IFCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMESValidity.setDescription('Indicates the validity of the provided Ethernet Layer 1 errored seconds value.')
ethL1IFCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMESInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMESValue object to 0.')
ethL1IFCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSESValue.setDescription('The count of Ethernet Layer 1 severely errored seconds.')
ethL1IFCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSESTimeStamp.setDescription('The date and time stamp of the Ethernet Layer 1 severely errored seconds value.')
ethL1IFCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSESValidity.setDescription('Indicates the validity of the provided Ethernet Layer 1 severely errored seconds value.')
ethL1IFCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMSESInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMSESValue object to 0.')
ethL1IFCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
ethL1IFCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
ethL1IFCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
ethL1IFCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUEBValue object to 0.')
ethL1IFCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
ethL1IFCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
ethL1IFCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
ethL1IFCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUBBEValue object to 0.')
ethL1IFCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
ethL1IFCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
ethL1IFCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
ethL1IFCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUESValue object to 0.')
ethL1IFCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
ethL1IFCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
ethL1IFCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
ethL1IFCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUSESValue object to 0.')
ethL1IFCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
ethL1IFCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
ethL1IFCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer out-of-frame seconds value.')
ethL1IFCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUOFSValue object to 0.')
ethL1IFCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValue.setDescription('The count of the number of bits corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
ethL1IFCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
ethL1IFCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMNBITCRValue object to 0.')
ethL1IFCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
ethL1IFCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
ethL1IFCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMNBYTCRValue object to 0.')
ethL1IFCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 68), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
ethL1IFCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
ethL1IFCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMUNCRCDWValue object to 0.')
ethL1IFCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValue.setDescription('The instantaneous BER of the line port.')
ethL1IFCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
ethL1IFCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
ethL1IFCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTNBERValue object to 0.')
ethL1IFCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValue.setDescription('The interval/average BER of the line port.')
ethL1IFCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
ethL1IFCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
ethL1IFCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTNAVGBERValue object to 0.')
ethL1IFCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
ethL1IFCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
ethL1IFCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMNBITCR64BitValue object to 0.')
ethL1IFCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
ethL1IFCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
ethL1IFCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMNBYTCR64BitValue object to 0.')
ethL1IFCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 88), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUASValue.setDescription('The count of unavailable seconds. This object is only available on Gigabit Ethernet ports.')
ethL1IFCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
ethL1IFCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
ethL1IFCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMUASInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMUASValue object to 0.')
ethL1IFCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 92), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
ethL1IFCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
ethL1IFCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
ethL1IFCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOTUUASValue object to 0.')
ethL1IFCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 96), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
ethL1IFCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
ethL1IFCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
ethL1IFCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPRMinValue object to 0.')
ethL1IFCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 100), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
ethL1IFCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
ethL1IFCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
ethL1IFCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPRMaxValue object to 0.')
ethL1IFCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 104), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
ethL1IFCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
ethL1IFCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
ethL1IFCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPRAvgValue object to 0.')
ethL1IFCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 108), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
ethL1IFCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
ethL1IFCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
ethL1IFCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPTMinValue object to 0.')
ethL1IFCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 112), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
ethL1IFCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
ethL1IFCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
ethL1IFCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPTMaxValue object to 0.')
ethL1IFCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 116), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
ethL1IFCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
ethL1IFCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
ethL1IFCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the ethL1IFCrntPMOPTAvgValue object to 0.')
ethL1IFHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27), )
if mibBuilder.loadTexts: ethL1IFHistPMTable.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the Ethernet Layer 1 Interface facilities on the NE.')
ethL1IFHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFHistPMShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMPortIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalIdx"))
if mibBuilder.loadTexts: ethL1IFHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMEntry.setDescription('The row entry object of the Ethernet Layer 1 Interface historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given Ethernet Layer 1 Interface facility.')
ethL1IFHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMShelfIdx.setDescription('The number of the shelf on which the Ethernet Layer 1 facility targeted for PMs is provisioned.')
ethL1IFHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSlotIdx.setDescription('The number of the slot within which the Ethernet Layer 1 facility targeted for PMs is provisioned.')
ethL1IFHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFHistPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMPortTypeIdx.setDescription('The type of Ethernet Layer 1 port targeted for PMs.')
ethL1IFHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMPortIdx.setDescription('The number of the port of the identified type targeted for PMs.')
ethL1IFHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
ethL1IFHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: ethL1IFHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1..96 for 15-minute bins, and for 1-day historical bins, the value is 1.')
ethL1IFHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRValue.setDescription('The optical power received on the input of the Ethernet Layer 1 facility port.')
ethL1IFHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
ethL1IFHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
ethL1IFHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTValue.setDescription('The optical power transmitted at the output of the Ethernet Layer 1 facility port.')
ethL1IFHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
ethL1IFHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
ethL1IFHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMTempValue.setDescription('The temperature measured on the Ethernet Layer 1 facility port.')
ethL1IFHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
ethL1IFHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
ethL1IFHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the Ethernet Layer 1 facility port.')
ethL1IFHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
ethL1IFHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
ethL1IFHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 19), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Value.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Value.setDescription('A second supply voltage value measured on the Ethernet Layer 1 facility port. This object is available only for XFP-equipped Ethernet Interface ports.')
ethL1IFHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2TimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2TimeStamp.setDescription('The date and time stamp of the second supply voltage value.')
ethL1IFHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Validity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Validity.setDescription('Indicates the validity of the provided second supply voltage value.')
ethL1IFHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMLBCValue.setDescription('The laser bias current measured on the Ethernet Layer 1 facility port.')
ethL1IFHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
ethL1IFHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
ethL1IFHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMCVValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMCVValue.setDescription('The count of 8B/10B coding violations. This object is only available on Gigabit Ethernet ports.')
ethL1IFHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMCVTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMCVTimeStamp.setDescription('The date and time stamp of the coding violations value.')
ethL1IFHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMCVValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMCVValidity.setDescription('Indicates the validity of the provided coding violations value.')
ethL1IFHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMCVInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMCVInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMCVValue object to 0.')
ethL1IFHistPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValue.setDescription('The count of invalid blocks. This object is only available on 10 Gigabit Ethernet ports.')
ethL1IFHistPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKTimeStamp.setDescription('The date and time stamp of the invalid blocks value.')
ethL1IFHistPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValidity.setDescription('Indicates the validity of the provided invalid blocks value.')
ethL1IFHistPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMINVBLKValue object to 0.')
ethL1IFHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMESValue.setDescription('The count of Ethernet Layer 1 errored seconds.')
ethL1IFHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMESTimeStamp.setDescription('The date and time stamp of the Ethernet Layer 1 errored seconds value.')
ethL1IFHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMESValidity.setDescription('Indicates the validity of the provided Ethernet Layer 1 errored seconds value.')
ethL1IFHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMESInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMESValue object to 0.')
ethL1IFHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSESValue.setDescription('The count of Ethernet Layer 1 severely errored seconds.')
ethL1IFHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSESTimeStamp.setDescription('The date and time stamp of the Ethernet Layer 1 severely errored seconds value.')
ethL1IFHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSESValidity.setDescription('Indicates the validity of the provided Ethernet Layer 1 severely errored seconds value.')
ethL1IFHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMSESInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMSESValue object to 0.')
ethL1IFHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValue.setDescription('The count of OTU digital wrapper layer errored blocks.')
ethL1IFHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored blocks value.')
ethL1IFHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored blocks value.')
ethL1IFHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUEBValue object to 0.')
ethL1IFHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValue.setDescription('The count of OTU digital wrapper layer background block errors.')
ethL1IFHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBETimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBETimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer background block errors value.')
ethL1IFHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer background block errors value.')
ethL1IFHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUBBEValue object to 0.')
ethL1IFHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValue.setDescription('The count of OTU digital wrapper layer errored seconds.')
ethL1IFHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer errored seconds value.')
ethL1IFHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer errored seconds value.')
ethL1IFHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUESInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUESValue object to 0.')
ethL1IFHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 53), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValue.setDescription('The count of OTU digital wrapper layer severely errored seconds.')
ethL1IFHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 54), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer severely errored seconds value.')
ethL1IFHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 55), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer severely errored seconds value.')
ethL1IFHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 56), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUSESValue object to 0.')
ethL1IFHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValue.setDescription('The count of OTU digital wrapper layer out-of-frame seconds.')
ethL1IFHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer out-of-frame seconds value.')
ethL1IFHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer out-of-frame seconds value.')
ethL1IFHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 60), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUOFSValue object to 0.')
ethL1IFHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValue.setDescription('The count of the number of bits corrected.')
ethL1IFHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRTimeStamp.setDescription('The date and time stamp of the number of bits corrected value.')
ethL1IFHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValidity.setDescription('Indicates the validity of the provided number of bits corrected value.')
ethL1IFHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 64), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMNBITCRValue object to 0.')
ethL1IFHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 65), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValue.setDescription('The count of the number of bytes corrected. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ethL1IFHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 66), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRTimeStamp.setDescription('The date and time stamp of the number of bytes corrected value.')
ethL1IFHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 67), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValidity.setDescription('Indicates the validity of the provided number of bytes corrected value.')
ethL1IFHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 68), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMNBYTCRValue object to 0.')
ethL1IFHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValue.setDescription('The count of uncorrectable codewords. This object applies only to OC-192 line port provisioned for OTN line mapping.')
ethL1IFHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWTimeStamp.setDescription('The date and time stamp of the uncorrectable codewords value.')
ethL1IFHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValidity.setDescription('Indicates the validity of the provided uncorrectable codewords value.')
ethL1IFHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMUNCRCDWValue object to 0.')
ethL1IFHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValue.setDescription('The instantaneous BER of the line port.')
ethL1IFHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERTimeStamp.setDescription('The date and time stamp of the instantaneous BER.')
ethL1IFHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValidity.setDescription('Indicates the validity of the provided instantaneous BER.')
ethL1IFHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTNBERValue object to 0.')
ethL1IFHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValue.setDescription('The interval/average BER of the line port.')
ethL1IFHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 78), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERTimeStamp.setDescription('The date and time stamp of the interval/average BER.')
ethL1IFHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 79), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValidity.setDescription('Indicates the validity of the provided interval/average BER.')
ethL1IFHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTNAVGBERValue object to 0.')
ethL1IFHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 81), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValue.setDescription('The 64-bit count of the number of bits corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 82), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bits corrected value.')
ethL1IFHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 83), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bits corrected value.')
ethL1IFHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMNBITCR64BitValue object to 0.')
ethL1IFHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 85), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValue.setDescription('The 64-bit count of the number of bytes corrected. This object applies only to xGigE line ports provisioned for OTN line mapping with Forward Eror Correction (FEC).')
ethL1IFHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 86), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitTimeStamp.setDescription('The date and time stamp of the 64-bit number of bytes corrected value.')
ethL1IFHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 87), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValidity.setDescription('Indicates the validity of the provided 64-bit number of bytes corrected value.')
ethL1IFHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMNBYTCR64BitValue object to 0.')
ethL1IFHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 89), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUASValue.setDescription('The count of unavailable seconds. This object is only available on Gigabit Ethernet ports.')
ethL1IFHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUASTimeStamp.setDescription('The date and time stamp of the unavailable seconds value.')
ethL1IFHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUASValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUASValidity.setDescription('Indicates the validity of the provided unavailable seconds value.')
ethL1IFHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMUASInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMUASValue object to 0.')
ethL1IFHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 93), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValue.setDescription('The count of OTU digital wrapper layer unavailable seconds.')
ethL1IFHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASTimeStamp.setDescription('The date and time stamp of the OTU digital wrapper layer unavailable seconds value.')
ethL1IFHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValidity.setDescription('Indicates the validity of the provided OTU digital wrapper layer unavailable seconds value.')
ethL1IFHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOTUUASValue object to 0.')
ethL1IFHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 97), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
ethL1IFHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
ethL1IFHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
ethL1IFHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPRMinValue object to 0.')
ethL1IFHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 101), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
ethL1IFHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
ethL1IFHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
ethL1IFHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPRMaxValue object to 0.')
ethL1IFHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 105), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
ethL1IFHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
ethL1IFHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
ethL1IFHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPRAvgValue object to 0.')
ethL1IFHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 109), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
ethL1IFHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
ethL1IFHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
ethL1IFHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPTMinValue object to 0.')
ethL1IFHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 113), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
ethL1IFHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
ethL1IFHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
ethL1IFHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPTMaxValue object to 0.')
ethL1IFHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 117), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
ethL1IFHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
ethL1IFHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
ethL1IFHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the ethL1IFHistPMOPTAvgValue object to 0.')
ethL1IFPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28), )
if mibBuilder.loadTexts: ethL1IFPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on Ethernet Layer 1 facilities, that are used in the generation of threshold crossing alerts.')
ethL1IFPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: ethL1IFPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdEntry.setDescription('The row entry object of the Ethernet Layer 1 performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual Ethernet Layer 1 facility.')
ethL1IFPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdShelfIdx.setDescription('The shelf number on which the Ethernet Layer 1 facility targeted for PM thresholds is provisioned.')
ethL1IFPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdSlotIdx.setDescription('The slot number on which the Ethernet Layer 1 facility targeted for PM thresholds is provisioned.')
ethL1IFPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFPMThresholdPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdPortTypeIdx.setDescription('The type of Ethernet Layer 1 port targeted for PM thresholds.')
ethL1IFPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdPortIdx.setDescription('The number of the port of the identified type targeted for PM thresholds.')
ethL1IFPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
ethL1IFPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdCVValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdCVValue.setDescription('The threshold for the count of 8B/10B coding violations. This object is only available on Gigabit Ethernet ports.')
ethL1IFPMThresholdINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdINVBLKValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdINVBLKValue.setDescription('The threshold for the count of invalid blocks. This object is only available on 10 Gigabit Ethernet ports.')
ethL1IFPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdESValue.setDescription('The threshold for the count of errored seconds.')
ethL1IFPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdSESValue.setDescription('The threshold for the count of severely errored seconds.')
ethL1IFPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUEBValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUEBValue.setDescription('The threshold for the count of errored blocks at the OTU digital wrapper layer.')
ethL1IFPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUBBEValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUBBEValue.setDescription('The threshold for the count of background block errors at the OTU digital wrapper layer.')
ethL1IFPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUESValue.setDescription('The threshold for the count of errored seconds at the OTU digital wrapper layer.')
ethL1IFPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUSESValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUSESValue.setDescription('The threshold for the count of severely errored seconds at the OTU digital wrapper layer.')
ethL1IFPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUOFSValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUOFSValue.setDescription('The threshold for the count of out-of-frame seconds at the OTU digital wrapper layer.')
ethL1IFPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdUNCRCDWValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdUNCRCDWValue.setDescription('The threshold for the count of uncorrectable codewords.')
ethL1IFPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdUASValue.setDescription('The threshold for the count of unavailable seconds.')
ethL1IFPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUUASValue.setStatus('current')
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUUASValue.setDescription('The threshold for the count of unavailable seconds at the OTU digital wrapper layer.')
pvxL2IFCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29), )
if mibBuilder.loadTexts: pvxL2IFCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the PacketVX Layer2 interfaces on the NE.')
pvxL2IFCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFCrntPMSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxL2IFCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMEntry.setDescription('The row entry object of the PacketVX Layer 2 current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given PVX Layer 2 interface facility.')
pvxL2IFCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFCrntPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Layer 2 Interface facilitiy is provisioned.')
pvxL2IFCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMShelfIdx.setDescription('The number of the shelf on which the PVX Layer2 IF targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxL2IFCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSlotIdx.setDescription('The number of the slot within which the PVX Layer2 IF targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxL2IFCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFCrntPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMPortTypeIdx.setDescription('The type of PacketVX port on which the Layer 2 Interface facility is provisioned.')
pvxL2IFCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMPortIdx.setDescription('The number of the port of the identified type on which the PVX Layer 2 IF facility targeted for PMs is provisioned.')
pvxL2IFCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxL2IFCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValue.setDescription('The total received frame count receieved on the interface.')
pvxL2IFCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXTimeStamp.setDescription('The date and time stamp of the total received frame count value.')
pvxL2IFCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValidity.setDescription('Indicates the validity of the provided total received frame count value.')
pvxL2IFCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTFRCRXValue object to 0.')
pvxL2IFCrntPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValue.setDescription('The total transmitted frame count on the interface.')
pvxL2IFCrntPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXTimeStamp.setDescription('The date and time stamp of the total transmitted frame count value.')
pvxL2IFCrntPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValidity.setDescription('Indicates the validity of the provided total transmitted frame count value.')
pvxL2IFCrntPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTFRCTXValue object to 0.')
pvxL2IFCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValue.setDescription('The count of discarded frames on the interface.')
pvxL2IFCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRTimeStamp.setDescription('The date and time stamp of the discarded frames value.')
pvxL2IFCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValidity.setDescription('Indicates the validity of the provided discarded frames value.')
pvxL2IFCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMFRDRValue object to 0.')
pvxL2IFCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValue.setDescription('The count of frame checksum errors on the interface.')
pvxL2IFCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSETimeStamp.setDescription('The date and time stamp of the frame checksum errors value.')
pvxL2IFCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValidity.setDescription('Indicates the validity of the provided frame checksum errors value.')
pvxL2IFCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMFCSEValue object to 0.')
pvxL2IFCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValue.setDescription('The total received byte count on the interface.')
pvxL2IFCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXTimeStamp.setDescription('The date and time stamp of the total received byte count value.')
pvxL2IFCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValidity.setDescription('Indicates the validity of the provided total received byte count value.')
pvxL2IFCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTBYCRXValue object to 0.')
pvxL2IFCrntPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValue.setDescription('The total transmitted byte count on the interface.')
pvxL2IFCrntPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXTimeStamp.setDescription('The date and time stamp of the total transmitted byte count value.')
pvxL2IFCrntPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValidity.setDescription('Indicates the validity of the provided Ftotal transmitted byte count value.')
pvxL2IFCrntPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTBYCTXValue object to 0.')
pvxL2IFCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames.')
pvxL2IFCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
pvxL2IFCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
pvxL2IFCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMBCSTValue object to 0.')
pvxL2IFCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 35), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
pvxL2IFCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
pvxL2IFCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 37), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
pvxL2IFCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 38), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMMCSTValue object to 0.')
pvxL2IFCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 39), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
pvxL2IFCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
pvxL2IFCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 42), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE64Value object to 0.')
pvxL2IFCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
pvxL2IFCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
pvxL2IFCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE65To127Value object to 0.')
pvxL2IFCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
pvxL2IFCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
pvxL2IFCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE128To255Value object to 0.')
pvxL2IFCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
pvxL2IFCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
pvxL2IFCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE256To511Value object to 0.')
pvxL2IFCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
pvxL2IFCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
pvxL2IFCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE512To1023Value object to 0.')
pvxL2IFCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
pvxL2IFCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
pvxL2IFCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZE1024To1518Value object to 0.')
pvxL2IFCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets).')
pvxL2IFCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
pvxL2IFCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
pvxL2IFCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMSIZEOver1518Value object to 0.')
pvxL2IFCrntPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValue.setDescription('The total received pause frame count on the interface.')
pvxL2IFCrntPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXTimeStamp.setDescription('The date and time stamp of the total received pause frame count value.')
pvxL2IFCrntPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValidity.setDescription('Indicates the validity of the provided total received pause frame count value.')
pvxL2IFCrntPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTPFCRXValue object to 0.')
pvxL2IFCrntPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValue.setDescription('The total transmitted pause frame count on the interface.')
pvxL2IFCrntPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXTimeStamp.setDescription('The date and time stamp of the total transmitted pause frame count value.')
pvxL2IFCrntPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValidity.setDescription('Indicates the validity of the provided total transmitted pause frame count value.')
pvxL2IFCrntPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMTPFCTXValue object to 0.')
pvxL2IFCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
pvxL2IFCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
pvxL2IFCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
pvxL2IFCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMUSIZEValue object to 0.')
pvxL2IFCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 79), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
pvxL2IFCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
pvxL2IFCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
pvxL2IFCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMOSIZEValue object to 0.')
pvxL2IFCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 83), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
pvxL2IFCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
pvxL2IFCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
pvxL2IFCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTInitialize.setDescription('Used to initialize the value of the pvxL2IFCrntPMFRGTValue object to 0.')
pvxL2IFHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30), )
if mibBuilder.loadTexts: pvxL2IFHistPMTable.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the PacketVX Layer2 interfaces on the NE.')
pvxL2IFHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFHistPMSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxL2IFHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMEntry.setDescription('The row entry object of the PacketVX Layer 2 historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given PVX Layer 2 interface facility.')
pvxL2IFHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFHistPMSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Layer 2 Interface facilitiy is provisioned.')
pvxL2IFHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMShelfIdx.setDescription('The number of the shelf on which the PVX Layer2 IF targeted for PMs is provisioned. For LAG entities, the shelf number is 0.')
pvxL2IFHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSlotIdx.setDescription('The number of the slot within which the PVX Layer2 IF targeted for PMs is provisioned. For LAG entities, the slot number is 0.')
pvxL2IFHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFHistPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMPortTypeIdx.setDescription('The type of PacketVX port on which the Layer 2 Interface facility is provisioned.')
pvxL2IFHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMPortIdx.setDescription('The number of the port of the identified type on which the PVX Layer 2 IF facility targeted for PMs is provisioned.')
pvxL2IFHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxL2IFHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
pvxL2IFHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValue.setDescription('The total received frame count receieved on the interface.')
pvxL2IFHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXTimeStamp.setDescription('The date and time stamp of the total received frame count value.')
pvxL2IFHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValidity.setDescription('Indicates the validity of the provided total received frame count value.')
pvxL2IFHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTFRCRXValue object to 0.')
pvxL2IFHistPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValue.setDescription('The total transmitted frame count on the interface.')
pvxL2IFHistPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXTimeStamp.setDescription('The date and time stamp of the total transmitted frame count value.')
pvxL2IFHistPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValidity.setDescription('Indicates the validity of the provided total transmitted frame count value.')
pvxL2IFHistPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTFRCTXValue object to 0.')
pvxL2IFHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValue.setDescription('The count of discarded frames on the interface.')
pvxL2IFHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRTimeStamp.setDescription('The date and time stamp of the discarded frames value.')
pvxL2IFHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValidity.setDescription('Indicates the validity of the provided discarded frames value.')
pvxL2IFHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMFRDRValue object to 0.')
pvxL2IFHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValue.setDescription('The count of frame checksum errors on the interface.')
pvxL2IFHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFCSETimeStamp.setDescription('The date and time stamp of the frame checksum errors value.')
pvxL2IFHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValidity.setDescription('Indicates the validity of the provided frame checksum errors value.')
pvxL2IFHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMFCSEValue object to 0.')
pvxL2IFHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValue.setDescription('The total received byte count on the interface.')
pvxL2IFHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXTimeStamp.setDescription('The date and time stamp of the total received byte count value.')
pvxL2IFHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValidity.setDescription('Indicates the validity of the provided total received byte count value.')
pvxL2IFHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTBYCRXValue object to 0.')
pvxL2IFHistPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValue.setDescription('The total transmitted byte count on the interface.')
pvxL2IFHistPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXTimeStamp.setDescription('The date and time stamp of the total transmitted byte count value.')
pvxL2IFHistPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValidity.setDescription('Indicates the validity of the provided Ftotal transmitted byte count value.')
pvxL2IFHistPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTBYCTXValue object to 0.')
pvxL2IFHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValue.setDescription('The total number of good frames received that were directed to the broadcast address. Note that this does not include multicast frames.')
pvxL2IFHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTTimeStamp.setDescription('The date and time stamp of the broadcast packets received count value.')
pvxL2IFHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValidity.setDescription('Indicates the validity of the provided broadcast packets received count value.')
pvxL2IFHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMBCSTValue object to 0.')
pvxL2IFHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValue.setDescription('The total number of good frames received that were directed to a multicast address. Note that this number does not include frames directed to the broadcast address.')
pvxL2IFHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTTimeStamp.setDescription('The date and time stamp of the multicast packets received count value.')
pvxL2IFHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValidity.setDescription('Indicates the validity of the provided multicast packets received count value.')
pvxL2IFHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMMCSTValue object to 0.')
pvxL2IFHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Value.setDescription('The total number of 64 byte frames received (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64TimeStamp.setDescription('The date and time stamp of the count of 64-byte packets received.')
pvxL2IFHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Validity.setDescription('Indicates the validity of the provided count of 64-byte packets packets received.')
pvxL2IFHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE64Value object to 0.')
pvxL2IFHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Value.setDescription('The total number of frames received that are 65 to 127 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127TimeStamp.setDescription('The date and time stamp of the count of packets between 65 and 127 bytes.')
pvxL2IFHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Validity.setDescription('Indicates the validity of the provided count of packets between 65 and 127 bytes.')
pvxL2IFHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE65To127Value object to 0.')
pvxL2IFHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Value.setDescription('The total number of frames received that are 128 to 255 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255TimeStamp.setDescription('The date and time stamp of the count of packets between 128 and 255 bytes.')
pvxL2IFHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Validity.setDescription('Indicates the validity of the provided count of packets between 128 and 255 bytes.')
pvxL2IFHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE128To255Value object to 0.')
pvxL2IFHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Value.setDescription('The total number of frames received that are 256 to 511 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511TimeStamp.setDescription('The date and time stamp of the count of packets between 256 and 511 bytes.')
pvxL2IFHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Validity.setDescription('Indicates the validity of the provided count of packets between 256 and 511 bytes.')
pvxL2IFHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE256To511Value object to 0.')
pvxL2IFHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Value.setDescription('The total number of frames received that are 512 to 1023 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023TimeStamp.setDescription('The date and time stamp of the count of packets between 512 and 1023 bytes.')
pvxL2IFHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Validity.setDescription('Indicates the validity of the provided count of packets between 512 and 1023 bytes.')
pvxL2IFHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE512To1023Value object to 0.')
pvxL2IFHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Value.setDescription('The total number of frames received that are 1024 to 1518 bytes inclusive in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518TimeStamp.setDescription('The date and time stamp of the count of packets between 1024 and 1518 bytes.')
pvxL2IFHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Validity.setDescription('Indicates the validity of the provided count of packets between 1024 and 1518 bytes.')
pvxL2IFHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZE1024To1518Value object to 0.')
pvxL2IFHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Value.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Value.setDescription('The total number of frames received that are greater than or equal to 1519 bytes in length (excluding framing bits but including FCS octets).')
pvxL2IFHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518TimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518TimeStamp.setDescription('The date and time stamp of the count of packets over 1518 bytes.')
pvxL2IFHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Validity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Validity.setDescription('Indicates the validity of the provided count of packets over 1518 bytes.')
pvxL2IFHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Initialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Initialize.setDescription('Used to initialize the value of the pvxL2IFHistPMSIZEOver1518Value object to 0.')
pvxL2IFHistPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValue.setDescription('The total received pause frame count on the interface.')
pvxL2IFHistPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXTimeStamp.setDescription('The date and time stamp of the total received pause frame count value.')
pvxL2IFHistPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValidity.setDescription('Indicates the validity of the provided total received pause frame count value.')
pvxL2IFHistPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTPFCRXValue object to 0.')
pvxL2IFHistPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValue.setDescription('The total transmitted pause frame count on the interface.')
pvxL2IFHistPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXTimeStamp.setDescription('The date and time stamp of the total transmitted pause frame count value.')
pvxL2IFHistPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValidity.setDescription('Indicates the validity of the provided total transmitted pause frame count value.')
pvxL2IFHistPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMTPFCTXValue object to 0.')
pvxL2IFHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValue.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
pvxL2IFHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZETimeStamp.setDescription('The date and time stamp of the count of undersized packets.')
pvxL2IFHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValidity.setDescription('Indicates the validity of the provided count of undersized packets.')
pvxL2IFHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMUSIZEValue object to 0.')
pvxL2IFHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 80), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValue.setDescription('The total number of frames received that were longer than 9600 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
pvxL2IFHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZETimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZETimeStamp.setDescription('The date and time stamp of the count of oversized packets.')
pvxL2IFHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValidity.setDescription('Indicates the validity of the provided count of oversized packets.')
pvxL2IFHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMOSIZEValue object to 0.')
pvxL2IFHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 84), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValue.setDescription('The total number of frames received that were less than 64 octets in length (excluding framing bits but including FCS octets) and had either a bad Frame Check Sequence (FCS) with an integral number of octets (FCS Error) or a bad FCS with a non-integral number of octets (Alignment Error).')
pvxL2IFHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTTimeStamp.setDescription('The date and time stamp of the count of received packet fragments.')
pvxL2IFHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValidity.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValidity.setDescription('Indicates the validity of the provided count of received packet fragments.')
pvxL2IFHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTInitialize.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTInitialize.setDescription('Used to initialize the value of the pvxL2IFHistPMFRGTValue object to 0.')
pvxL2IFPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31), )
if mibBuilder.loadTexts: pvxL2IFPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on PVX Layer 2 IF facilities, that are used in the generation of threshold crossing alerts.')
pvxL2IFPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFPMThresholdSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxL2IFPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdEntry.setDescription('The row entry object of the PacketVX Layer 2 Interface performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual PVX Layer 2 IF facility.')
pvxL2IFPMThresholdSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFPMThresholdSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdSwitchIdx.setDescription('The identifier of the ethernet switch instance on which the Layer 2 Interface facilitiy is provisioned.')
pvxL2IFPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdShelfIdx.setDescription('The number of the shelf on which the PVX Layer2 IF targeted for PM thresholds is provisioned. For LAG entities, the shelf number is 0.')
pvxL2IFPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdSlotIdx.setDescription('The number of the slot within which the PVX Layer2 IF targeted for PM thresholds is provisioned. For LAG entities, the slot number is 0.')
pvxL2IFPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortTypeIdx.setDescription('The type of PacketVX port on which the Layer 2 Interface facility is provisioned.')
pvxL2IFPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortIdx.setDescription('The number of the port of the identified type on which the PVX Layer 2 IF facility targeted for PM thresholds is provisioned.')
pvxL2IFPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
pvxL2IFPMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRDRValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRDRValue.setDescription('The threshold for the count of discarded frames on the interface.')
pvxL2IFPMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFCSEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdFCSEValue.setDescription('The threshold for the count of frame checksum errors on the interface.')
pvxL2IFPMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdUSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdUSIZEValue.setDescription('The threshold for the count of undersized frames.')
pvxL2IFPMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdOSIZEValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdOSIZEValue.setDescription('The threshold for the count of oversized frames.')
pvxL2IFPMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRGTValue.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRGTValue.setDescription('The threshold for the count of fragmented frames.')
briCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38), )
if mibBuilder.loadTexts: briCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: briCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the Bit Rate Independent (BRI) facilities on the NE.')
briCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1), ).setIndexNames((0, "BTI-7000-MIB", "briCrntPMShelfIdx"), (0, "BTI-7000-MIB", "briCrntPMSlotIdx"), (0, "BTI-7000-MIB", "briCrntPMPortIdx"), (0, "BTI-7000-MIB", "briCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: briCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: briCrntPMEntry.setDescription('The row entry object of the BRI current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given BRI facility.')
briCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: briCrntPMShelfIdx.setDescription('The number of the shelf on which the BRI facility targeted for PMs is provisioned.')
briCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: briCrntPMSlotIdx.setDescription('The number of the slot within which the BRI facility targeted for PMs is provisioned.')
briCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: briCrntPMPortIdx.setDescription('The number of the port on the circuit pack on which the BRI facility targeted for PMs is provisioned.')
briCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: briCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: briCrntPMIntervalTypeIdx.setDescription('The type of BRI bin according to interval length.')
briCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRValue.setDescription('The optical power received on the input of the BRI facility port.')
briCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
briCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
briCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTValue.setDescription('The optical power transmitted at the output of the BRI facility port.')
briCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
briCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
briCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMTempValue.setDescription('The temperature measured on the BRI facility port.')
briCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
briCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
briCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValue.setDescription('The supply voltage measured on the BRI facility port.')
briCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
briCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
briCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMLBCValue.setDescription('The laser bias current measured on the BRI facility port.')
briCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
briCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
briCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 20), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
briCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
briCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
briCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the briCrntPMOPRMinValue object to 0.')
briCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 24), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
briCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
briCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
briCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the briCrntPMOPRMaxValue object to 0.')
briCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 28), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
briCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
briCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
briCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPRAvgInitialize.setDescription('Used to initialize the value of the briCrntPMOPRAvgValue object to 0.')
briCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 32), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
briCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
briCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
briCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the briCrntPMOPTMinValue object to 0.')
briCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 36), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
briCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
briCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
briCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the briCrntPMOPTMaxValue object to 0.')
briCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 40), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
briCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
briCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
briCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: briCrntPMOPTAvgInitialize.setDescription('Used to initialize the value of the briCrntPMOPTAvgValue object to 0.')
briHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39), )
if mibBuilder.loadTexts: briHistPMTable.setStatus('current')
if mibBuilder.loadTexts: briHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the Bit Rate Independent (BRI) facilities on the NE.')
briHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1), ).setIndexNames((0, "BTI-7000-MIB", "briHistPMShelfIdx"), (0, "BTI-7000-MIB", "briHistPMSlotIdx"), (0, "BTI-7000-MIB", "briHistPMPortIdx"), (0, "BTI-7000-MIB", "briHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "briHistPMIntervalIdx"))
if mibBuilder.loadTexts: briHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: briHistPMEntry.setDescription('The row entry object of the BRI historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given BRI facility.')
briHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: briHistPMShelfIdx.setDescription('The number of the shelf on which the BRI facility targeted for PMs is provisioned.')
briHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: briHistPMSlotIdx.setDescription('The number of the slot within which the BRI facility targeted for PMs is provisioned.')
briHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: briHistPMPortIdx.setDescription('The number of the port on the circuit pack on which the BRI facility targeted for PMs is provisioned.')
briHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: briHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: briHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
briHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: briHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: briHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
briHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRValue.setDescription('The optical power received on the input of the BRI facility port.')
briHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
briHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
briHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTValue.setDescription('The optical power transmitted at the output of the BRI facility port.')
briHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
briHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
briHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMTempValue.setDescription('The temperature measured on the BRI facility port.')
briHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
briHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
briHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMSupplyVoltageValue.setDescription('The supply voltage measured on the BRI facility port.')
briHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMSupplyVoltageTimeStamp.setDescription('The date and time stamp of the supply voltage value.')
briHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMSupplyVoltageValidity.setDescription('Indicates the validity of the provided supply voltage value.')
briHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMLBCValue.setDescription('The laser bias current measured on the BRI facility port.')
briHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMLBCTimeStamp.setDescription('The date and time stamp of the laser bias current value.')
briHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMLBCValidity.setDescription('Indicates the validity of the provided laser bias current value.')
briHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMinValue.setDescription('The minimum optical power received on the input of the transceiver.')
briHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
briHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
briHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMinInitialize.setDescription('Used to initialize the value of the briHistPMOPRMinValue object to 0.')
briHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 25), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMaxValue.setDescription('The maximum optical power received on the input of the transceiver.')
briHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
briHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
briHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the briHistPMOPRMaxValue object to 0.')
briHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 29), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRAvgValue.setDescription('The average optical power received on the input of the transceiver.')
briHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
briHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
briHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPRAvgInitialize.setDescription('Used to initialize the value of the briHistPMOPRAvgValue object to 0.')
briHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 33), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMinValue.setDescription('The minimum optical power transmitted at the output of the transceiver.')
briHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
briHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
briHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMinInitialize.setDescription('Used to initialize the value of the briHistPMOPTMinValue object to 0.')
briHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 37), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMaxValue.setDescription('The maximum optical power transmitted at the output of the transceiver.')
briHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
briHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
briHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the briHistPMOPTMaxValue object to 0.')
briHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 41), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTAvgValue.setDescription('The average optical power transmitted at the output of the transceiver.')
briHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
briHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
briHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTAvgInitialize.setStatus('current')
if mibBuilder.loadTexts: briHistPMOPTAvgInitialize.setDescription('Used to initialize the value of the briHistPMOPTAvgValue object to 0.')
cpCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49), )
if mibBuilder.loadTexts: cpCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the circuit packs on the NE.')
cpCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpCrntPMCpTypeIdx"), (0, "BTI-7000-MIB", "cpCrntPMShelfIdx"), (0, "BTI-7000-MIB", "cpCrntPMSlotIdx"), (0, "BTI-7000-MIB", "cpCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: cpCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMEntry.setDescription('The row entry object of the equipment current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given circuit pack.')
cpCrntPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 1), CpType())
if mibBuilder.loadTexts: cpCrntPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMCpTypeIdx.setDescription('The type of the circuit pack targeted for PM retrieval.')
cpCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMShelfIdx.setDescription('The number of the shelf on which the circuit pack targeted for PMs is provisioned.')
cpCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMSlotIdx.setDescription('The number of the slot within which the circuit pack targeted for PMs is provisioned.')
cpCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: cpCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
cpCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempValue.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMTempValue.setDescription('The circuit pack temperature.')
cpCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
cpCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: cpCrntPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
cpHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50), )
if mibBuilder.loadTexts: cpHistPMTable.setStatus('current')
if mibBuilder.loadTexts: cpHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the circuit packs on the NE.')
cpHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpHistPMCpTypeIdx"), (0, "BTI-7000-MIB", "cpHistPMShelfIdx"), (0, "BTI-7000-MIB", "cpHistPMSlotIdx"), (0, "BTI-7000-MIB", "cpHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "cpHistPMIntervalIdx"))
if mibBuilder.loadTexts: cpHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: cpHistPMEntry.setDescription('The row entry object of the circuit pack historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given circuit pack.')
cpHistPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 1), CpType())
if mibBuilder.loadTexts: cpHistPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpHistPMCpTypeIdx.setDescription('The type of the circuit pack targeted for PM retrieval.')
cpHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: cpHistPMShelfIdx.setDescription('The number of the shelf on which the circuit pack targeted for PMs is provisioned.')
cpHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cpHistPMSlotIdx.setDescription('The number of the slot within which the circuit pack targeted for PMs is provisioned.')
cpHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: cpHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
cpHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cpHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: cpHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1..96 for 15-minute bins, and for 1-day historical bins, the value is 1.')
cpHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempValue.setStatus('current')
if mibBuilder.loadTexts: cpHistPMTempValue.setDescription('The circuit pack temperature.')
cpHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cpHistPMTempTimeStamp.setDescription('The date and time stamp of the temperature value.')
cpHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempValidity.setStatus('current')
if mibBuilder.loadTexts: cpHistPMTempValidity.setDescription('Indicates the validity of the provided temperature value.')
gcc0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4), )
if mibBuilder.loadTexts: gcc0ConfigTable.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigTable.setDescription('A table of GCC0 configuration information. This table contains one row for every provisioned GCC0.')
gcc0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "gcc0ConfigCpTypeIdx"), (0, "BTI-7000-MIB", "gcc0ConfigShelfIdx"), (0, "BTI-7000-MIB", "gcc0ConfigSlotIdx"), (0, "BTI-7000-MIB", "gcc0ConfigPortIdx"))
if mibBuilder.loadTexts: gcc0ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigEntry.setDescription('A conceptual row that contains GCC0 configuration information of an interface. Each instance must correspond to an instance of an OTN Port capable of supporting GCC. Instances of this conceptual row persist across agent restarts.')
gcc0ConfigCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 1), CpType())
if mibBuilder.loadTexts: gcc0ConfigCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigCpTypeIdx.setDescription('The specific type of circuit pack provisioned.')
gcc0ConfigShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: gcc0ConfigShelfIdx.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigShelfIdx.setDescription('The number of the shelf on which the gcc0 is provisioned.')
gcc0ConfigSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: gcc0ConfigSlotIdx.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigSlotIdx.setDescription('The number of the slot in which the gcc0 is provisioned.')
gcc0ConfigPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: gcc0ConfigPortIdx.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigPortIdx.setDescription('The number of the port on the circuit pack on which the gcc0 provisioned.')
gcc0ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullRate", 1), ("lowRate", 2))).clone('fullRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigMode.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigMode.setDescription('The desired mode to which the gcc0 is to be provisioned.')
gcc0ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 6), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigAdminStatus.setDescription('The administrative status of the gcc.')
gcc0ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gcc0ConfigOperStatus.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigOperStatus.setDescription('The reported operational status of the gcc.')
gcc0ConfigOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 8), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gcc0ConfigOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigOperStatQlfr.setDescription('A textual list of qualifiers of the reported operational status of the gcc.')
gcc0ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: gcc0ConfigRowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the gcc0 config table.')
ipExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5), )
if mibBuilder.loadTexts: ipExtInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ipExtInterfaceTable.setDescription('')
ipExtInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSubPortNumber"))
if mibBuilder.loadTexts: ipExtInterfaceTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipExtInterfaceTableEntry.setDescription('')
pvxL2IntfSubPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxL2IntfSubPortNumber.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfSubPortNumber.setDescription('A number indentifying a entity smaller than and contained in a port. At this time, this value is unused and must be zero.')
ipExtIntfPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 2), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfPrimaryState.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfPrimaryState.setDescription('The reported operational status of the IP Interface.')
ipExtIntfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 3), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfSecondaryState.setDescription('A textual list of qualifiers for the reported operational status of the IP Interface')
ipExtIntfCmdPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 4), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfCmdPrimaryState.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfCmdPrimaryState.setDescription('')
ipExtIntfNumberedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipExtIntfNumberedStatus.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfNumberedStatus.setDescription('Set to true if this is a numbered interface and false if it is unnumbered.')
ipExtIntfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfAddressType.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfAddressType.setDescription('The type of addresses (v4/v6) used in this row of this MIB. Currently only ipv4 is allowed in this table.')
ipExtIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfAddress.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfAddress.setDescription('The IP Address associated with the interface.')
ipExtIntfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfSubnetMask.setDescription('The sub-net mask associated with the interface.')
ipExtIntfProxyARPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfProxyARPStatus.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfProxyARPStatus.setDescription('Not currently implemented.')
ipExtIntfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfDescription.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfDescription.setDescription('A string describing the interface.')
ipExtIntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMACAddr.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfMACAddr.setDescription('The MAC address associated with the interface, if applicable. All zeros for a non-MAC interface.')
ipExtIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfOperStatus.setDescription('')
ipExtIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfType.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfType.setDescription('A value describing the type of interface.')
ipExtIntfBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfBroadcastAddress.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfBroadcastAddress.setDescription('The broadcast address associated with the interface.')
ipExtIntfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSpeed.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfSpeed.setDescription('')
ipExtIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 16), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMode.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfMode.setDescription('Is the interface full or half-duplex?')
ipExtIntfMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMTUSize.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfMTUSize.setDescription('The Maximum Transmission Unit for the interface.')
ipExtIntfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfLastChange.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfLastChange.setDescription('')
ipExtIntfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 19), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfGateway.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfGateway.setDescription('The gateway IP address associated with the interface.')
ipExtIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 100), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipExtIntfRowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the ipExtIntf table.')
notifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1))
condDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condDateAndTime.setStatus('current')
if mibBuilder.loadTexts: condDateAndTime.setDescription('This object is used in Trap messages to indicate the date and time at which the condition or alarm reported in the Trap message occurred.')
condReportType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 2), CondReportType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condReportType.setStatus('current')
if mibBuilder.loadTexts: condReportType.setDescription('Indicates if this is a condition (non-alarmed) or an alarm. This object is used solely for reporting the condition report type in Trap messages.')
condSeverity = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 3), CondSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condSeverity.setStatus('current')
if mibBuilder.loadTexts: condSeverity.setDescription('Indicates the severity of the condition or alarm. This object is used solely for reporting the condition severity in Trap messages.')
condServiceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 4), CondServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: condServiceAffecting.setDescription('Indicates if the presence of this active condition or alarm impacts the ability of the equipment to provide service as expected. This object is used solely for reporting whether or not a condition is service affecting in Trap messages.')
condDescription = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condDescription.setStatus('current')
if mibBuilder.loadTexts: condDescription.setDescription('A textual decription of the condition or alarm. This object is used solely for reporting the condition description in Trap messages.')
condObjectType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 6), NotifObjectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condObjectType.setStatus('current')
if mibBuilder.loadTexts: condObjectType.setDescription('Identifies the type of managed object against which the condition or alarm is raised.')
condCodeType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 7), NotifCodeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condCodeType.setStatus('current')
if mibBuilder.loadTexts: condCodeType.setDescription('This object value uniquely identifies the type of condition or alarm that is raised.')
actCondTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2), )
if mibBuilder.loadTexts: actCondTable.setStatus('current')
if mibBuilder.loadTexts: actCondTable.setDescription('This table lists all active conditions and alarms raised on the system.')
actCondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "actCondNotifIdx"), (0, "BTI-7000-MIB", "actCondTableEntryIdx"), (0, "BTI-7000-MIB", "actCondInstanceIdx"))
if mibBuilder.loadTexts: actCondEntry.setStatus('current')
if mibBuilder.loadTexts: actCondEntry.setDescription('Contains identifying and descriptive attributes for a single active condition or alarm raised on the network element.')
actCondNotifIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: actCondNotifIdx.setStatus('current')
if mibBuilder.loadTexts: actCondNotifIdx.setDescription('Identifies the type of condition or alarm that is active by pointing to the NOTIFICATION-TYPE object that corresponds to the raising event of the condition or alarm.')
actCondTableEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: actCondTableEntryIdx.setStatus('current')
if mibBuilder.loadTexts: actCondTableEntryIdx.setDescription('Identifies the type of resource that is alarmed by pointing to the corresponding table entry object.')
actCondInstanceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: actCondInstanceIdx.setStatus('current')
if mibBuilder.loadTexts: actCondInstanceIdx.setDescription('Identifies the specific instance of the idenitifed resource type that is alarmed by providing instance data that applies to an instance of the table entry object type identified by actCondTableEntryIdx. The instance data portion of the OID is mapped to an OCTET string.')
actCondReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 4), CondReportType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondReportType.setStatus('current')
if mibBuilder.loadTexts: actCondReportType.setDescription('Indicates if the table entry is a condition (non-alarmed) or an alarm.')
actCondDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondDateAndTime.setStatus('current')
if mibBuilder.loadTexts: actCondDateAndTime.setDescription('The date and time that the condition or alarm reported in the trap message was raised.')
actCondSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 6), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondSeverity.setStatus('current')
if mibBuilder.loadTexts: actCondSeverity.setDescription('Indicates how severe the condition or alarm is.')
actCondServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 7), CondServiceAffecting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: actCondServiceAffecting.setDescription('Indicates if the presence of this active condition or alarm impacts the ability of the equipment to provide service as expected.')
actCondDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondDescription.setStatus('current')
if mibBuilder.loadTexts: actCondDescription.setDescription('A textual decription of the condition or alarm.')
actCondObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 9), NotifObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondObjectType.setStatus('current')
if mibBuilder.loadTexts: actCondObjectType.setDescription('Identifies the type of managed object against which the condition or alarm is raised.')
actCondCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 10), NotifCodeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondCodeType.setStatus('current')
if mibBuilder.loadTexts: actCondCodeType.setDescription('This object value uniquely identifies the type of condition or alarm that is raised.')
actCondSummary = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noActiveConditions", 1), ("nonAlarmedConditionsActive", 2), ("minorAlarmsActive", 3), ("majorAlarmsActive", 4), ("criticalAlarmsActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondSummary.setStatus('current')
if mibBuilder.loadTexts: actCondSummary.setDescription('This object summarizes the active alarm/condition status of the network element. The value of the object returned indicates the following status data: - noActiveConditions: there are no active alarms or conditions on the network element - nonAlarmedConditionsActive: there is one or more active conditions on the network element, but none are of alarmable severity - minorAlarmsActive: there is one or more active conditions and/or alarms on the network element, and the highest severity level alarm is minor - majorAlarmsActive: there is one or more active conditions and/or alarms on the network element, and the highest severity level alarm is major - criticalAlarmsActive: there is one or more active conditions and/or alarms on the network element, and the highest severity level alarm is critical')
actAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4), )
if mibBuilder.loadTexts: actAlarmTable.setStatus('current')
if mibBuilder.loadTexts: actAlarmTable.setDescription('This table lists all active alarms raised on the system.')
actAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "actAlarmNotifIdx"), (0, "BTI-7000-MIB", "actAlarmTableEntryIdx"), (0, "BTI-7000-MIB", "actAlarmInstanceIdx"))
if mibBuilder.loadTexts: actAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: actAlarmEntry.setDescription('Contains identifying and descriptive attributes for a single active alarm raised on the system.')
actAlarmNotifIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: actAlarmNotifIdx.setStatus('current')
if mibBuilder.loadTexts: actAlarmNotifIdx.setDescription('Identifies the type of alarm that is active by pointing to the NOTIFICATION-TYPE object that corresponds to the raising event of the condition or alarm.')
actAlarmTableEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: actAlarmTableEntryIdx.setStatus('current')
if mibBuilder.loadTexts: actAlarmTableEntryIdx.setDescription('Identifies the type of resource that is alarmed by pointing to the corresponding table entry object.')
actAlarmInstanceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: actAlarmInstanceIdx.setStatus('current')
if mibBuilder.loadTexts: actAlarmInstanceIdx.setDescription('Identifies the specific instance of the idenitifed resource type that is alarmed by providing instance data that applies to an instance of the table entry object type identified by actAlarmTableEntryIdx. The instance data portion of the OID is mapped to an OCTET string.')
actAlarmReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 4), CondReportType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmReportType.setStatus('current')
if mibBuilder.loadTexts: actAlarmReportType.setDescription('Indicates if the table entry is an alarm.')
actAlarmDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmDateAndTime.setStatus('current')
if mibBuilder.loadTexts: actAlarmDateAndTime.setDescription('The date and time that the alarm reported in the trap message was raised.')
actAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 6), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: actAlarmSeverity.setDescription('Indicates how severe the alarm is.')
actAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 7), CondServiceAffecting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmServiceAffecting.setStatus('current')
if mibBuilder.loadTexts: actAlarmServiceAffecting.setDescription('Indicates if the presence of this active alarm impacts the ability of the equipment to provide service as expected.')
actAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: actAlarmDescription.setDescription('A textual decription of the alarm.')
actAlarmObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 9), NotifObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmObjectType.setStatus('current')
if mibBuilder.loadTexts: actAlarmObjectType.setDescription('Identifies the type of managed object against which the alarm is raised.')
actAlarmCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 10), NotifCodeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmCodeType.setStatus('current')
if mibBuilder.loadTexts: actAlarmCodeType.setDescription('This object value uniquely identifies the type of alarm that is raised.')
tl1UserTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1), )
if mibBuilder.loadTexts: tl1UserTable.setStatus('current')
if mibBuilder.loadTexts: tl1UserTable.setDescription('This table contains one row for every provisioned user that can operate the TL1 management interface on the NE. Each row contains a list of attributes that pertain to a provisioned TL1 user.')
tl1UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "tl1UserIdx"))
if mibBuilder.loadTexts: tl1UserEntry.setStatus('current')
if mibBuilder.loadTexts: tl1UserEntry.setDescription('The conceptual row object of the TL1 user table.')
tl1UserIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tl1UserIdx.setStatus('current')
if mibBuilder.loadTexts: tl1UserIdx.setDescription('This is the unique user identifier, or UID, that is used for TL1 access.')
tl1IpLockoutAddr = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tl1IpLockoutAddr.setStatus('current')
if mibBuilder.loadTexts: tl1IpLockoutAddr.setDescription('This is an IP address from which TL1 user login attempts have been temporarily disabled due to an excessive number of failed user login attempts.')
tl1LogTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3), )
if mibBuilder.loadTexts: tl1LogTable.setStatus('current')
if mibBuilder.loadTexts: tl1LogTable.setDescription('This table lists all the log entries generated by the TL1 interface on the BTI 7000 system.')
tl1LogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "tl1LogIdx"))
if mibBuilder.loadTexts: tl1LogEntry.setStatus('current')
if mibBuilder.loadTexts: tl1LogEntry.setDescription('The conceptual row object of the TL1 log table.')
tl1LogIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tl1LogIdx.setStatus('current')
if mibBuilder.loadTexts: tl1LogIdx.setDescription('The unique identifier for this log entry. It is the global Log Id of the entry when viewed through the TL1 interface.')
tl1LogSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogSysName.setStatus('current')
if mibBuilder.loadTexts: tl1LogSysName.setDescription('The name of the BTI 7000 system at the time that the log was recorded.')
tl1LogType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("alarm", 1), ("event", 2), ("dbChange", 3), ("security", 4), ("command", 5), ("rtrvcmd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogType.setStatus('current')
if mibBuilder.loadTexts: tl1LogType.setDescription('The type of log entry.')
tl1LogTypeSpecificLogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogTypeSpecificLogNum.setStatus('current')
if mibBuilder.loadTexts: tl1LogTypeSpecificLogNum.setDescription('The type-specific number for this log.')
tl1LogMsgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogMsgCode.setStatus('current')
if mibBuilder.loadTexts: tl1LogMsgCode.setDescription("The message code that was issued for this log entry. This field is relevant to log entries for TL1 autonomous notifications. For example, the message code may be 'REPT ALM OC48'. A message code is reported for all log entries of type alarm, event and dbChange. For logs of type security or command, the message code is an empty string.")
tl1LogDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogDateAndTime.setStatus('current')
if mibBuilder.loadTexts: tl1LogDateAndTime.setDescription('The timestamp of the log entry.')
tl1LogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogMessage.setStatus('current')
if mibBuilder.loadTexts: tl1LogMessage.setDescription('This is the main log entry contents. The log entry is enclosed in double quotations.')
latestTl1LogNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latestTl1LogNum.setStatus('current')
if mibBuilder.loadTexts: latestTl1LogNum.setDescription('Identifies the value of the tl1LogIdx object for the most recently added entry in the tl1LogTable.')
snmpTrapRcvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5), )
if mibBuilder.loadTexts: snmpTrapRcvTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvTable.setDescription('This table contains one row for every configured SNMP trap receiver. Each row contains a list of attributes that pertain to a provisioned trap receiver. All access to this table, whether for read, write, or create requests are restricted to SNMP requests issued with a valid community string configured with read-write access.')
snmpTrapRcvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "snmpTrapRcvIdx"))
if mibBuilder.loadTexts: snmpTrapRcvEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvEntry.setDescription('The conceptual row object of the SNMP trap receiver table.')
snmpTrapRcvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvIdx.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvIdx.setDescription('This string serves as a unique trap receiver Id and is used to index the table.')
snmpTrapRcvIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvIPAddr.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvIPAddr.setDescription('The IP address of the trap receiver. The setting of this object is mandatory when creating a new row.')
snmpTrapRcvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvPort.setDescription('The port on the specified IP address of the trap receiver.')
snmpTrapRcvNotifType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trap", 1), ("inform", 2))).clone('trap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvNotifType.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvNotifType.setDescription('The type of notification service to be provided to the trap receiver. The notification type can be configured as inform only if the message version specified for the snmpTrapRcvVersion object is snmpv2c.')
snmpTrapRcvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2c", 2), ("snmpV3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvVersion.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvVersion.setDescription('The type of notification service to be provided to the trap receiver. The notification type can be configured as inform only if the message version specified for the snmpTrapRcvVersion object is snmpv2c. The setting of this object is mandatory when creating a new row.')
snmpTrapRcvCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvCommunity.setDescription('The community string inserted into the trap messages generated for this trap receiver. The setting of this object is mandatory when creating a new row.')
snmpTrapRcvTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 7), HoursAndMinutes().clone('000-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvTTL.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvTTL.setDescription('The time-to-live for the trap receiver. When the trap receiver is created or this object is set, this object specifies how long the trap receiver is to be configured. When read, the value returned is the length of time remaining before the trap receiver is automatically deleted. The valid range for this object is 000-00 to 099-99. If this object is set to a value of 000-00, the trap receiver will never auto-delete.')
snmpTrapRcvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRcvRowStatus.setDescription('Used to control the addition and deletion of entries in the SNMP trap receiver table.')
xcvrXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: xcvrXCTable.setStatus('current')
if mibBuilder.loadTexts: xcvrXCTable.setDescription('This table contains one row for every provisioned cross connection between optical transceiver facilities on wavelength translator, regenerator and manager circuit packs.')
xcvrXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrXCSrcTypeIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcShelfIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcSlotIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcIdx"), (0, "BTI-7000-MIB", "xcvrXCDestTypeIdx"), (0, "BTI-7000-MIB", "xcvrXCDestShelfIdx"), (0, "BTI-7000-MIB", "xcvrXCDestSlotIdx"), (0, "BTI-7000-MIB", "xcvrXCDestIdx"))
if mibBuilder.loadTexts: xcvrXCEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrXCEntry.setDescription('The conceptual row object of the optical transceiver cross connection table.')
xcvrXCSrcTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrXCSrcTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCSrcTypeIdx.setDescription('The specific type of wavelength conversion function of the transceiver port that serves as the source port for the cross connection.')
xcvrXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCSrcShelfIdx.setDescription('The number of the shelf of the transceiver port that serves as the source port for the cross connection.')
xcvrXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCSrcSlotIdx.setDescription('The number of the slot of the transceiver port that serves as the source port for the cross connection.')
xcvrXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrXCSrcIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCSrcIdx.setDescription('The number of the port of the transceiver port that serves as the source port for the cross connection.')
xcvrXCDestTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 5), XcvrType())
if mibBuilder.loadTexts: xcvrXCDestTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCDestTypeIdx.setDescription('The specific type of wavelength conversion function of the transceiver port that serves as the destination port for the cross connection.')
xcvrXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrXCDestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCDestShelfIdx.setDescription('The number of the shelf of the transceiver port that serves as the destination port for the cross connection.')
xcvrXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrXCDestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCDestSlotIdx.setDescription('The number of the slot of the transceiver port that serves as the destination port for the cross connection.')
xcvrXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrXCDestIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrXCDestIdx.setDescription('The number of the port of the transceiver port that serves as the destination port for the cross connection.')
xcvrXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 9), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrXCType.setStatus('current')
if mibBuilder.loadTexts: xcvrXCType.setDescription('The type of cross connection between the identified source and destination transceiver ports. This is a mandatory object when a row of the transceiver cross connect table is created. Only 1-way and 2-way cross-connections are supported on optical transceiver ports')
xcvrXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrXCRowStatus.setDescription('Used to control the addition and deletion of entries in the transceiver cross connection table, which in turn controls the provisioning and de-provisioning of transceiver cross connections.')
vcgXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2), )
if mibBuilder.loadTexts: vcgXCTable.setStatus('current')
if mibBuilder.loadTexts: vcgXCTable.setDescription('This table contains one row for every provisioned cross connection between VCGs on Muxponder circuit packs.')
vcgXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcgXCSrcShelfIdx"), (0, "BTI-7000-MIB", "vcgXCSrcSlotIdx"), (0, "BTI-7000-MIB", "vcgXCSrcPortIdx"), (0, "BTI-7000-MIB", "vcgXCSrcIdx"), (0, "BTI-7000-MIB", "vcgXCDestShelfIdx"), (0, "BTI-7000-MIB", "vcgXCDestSlotIdx"), (0, "BTI-7000-MIB", "vcgXCDestPortIdx"), (0, "BTI-7000-MIB", "vcgXCDestIdx"))
if mibBuilder.loadTexts: vcgXCEntry.setStatus('current')
if mibBuilder.loadTexts: vcgXCEntry.setDescription('The conceptual row object of the VCG cross connection table.')
vcgXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCSrcShelfIdx.setDescription('The number of the shelf of the VCG entity that serves as the source port for the cross connection.')
vcgXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCSrcSlotIdx.setDescription('The number of the slot of the VCG entity that serves as the source port for the cross connection.')
vcgXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcgXCSrcPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCSrcPortIdx.setDescription('The number of the port of the VCG entity that serves as the source port for the cross connection.')
vcgXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgXCSrcIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCSrcIdx.setDescription('The number of the VCG within the identified port that serves as the source port for the cross connection.')
vcgXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgXCDestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCDestShelfIdx.setDescription('The number of the shelf of the VCG entity that serves as the destination port for the cross connection.')
vcgXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgXCDestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCDestSlotIdx.setDescription('The number of the slot of the VCG entity that serves as the destination port for the cross connection.')
vcgXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: vcgXCDestPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCDestPortIdx.setDescription('The number of the port of the VCG entity that serves as the destination port for the cross connection.')
vcgXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgXCDestIdx.setStatus('current')
if mibBuilder.loadTexts: vcgXCDestIdx.setDescription('The number of the VCG within the identified port that serves as the destination port for the cross connection.')
vcgXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 9), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCType.setStatus('current')
if mibBuilder.loadTexts: vcgXCType.setDescription('The type of cross connection between the identified source and destination VCG entities. This is a mandatory object when a row of the VCG cross connect table is created. Only 2-way and 2-way protected cross-connections are supported between VCGs.')
vcgXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtShelfNum.setStatus('current')
if mibBuilder.loadTexts: vcgXCProtShelfNum.setDescription('The number of the shelf of the VCG entity that serves as the protection port for the cross connection.')
vcgXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtSlotNum.setStatus('current')
if mibBuilder.loadTexts: vcgXCProtSlotNum.setDescription('The number of the slot of the VCG entity that serves as the protection port for the cross connection.')
vcgXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtPortNum.setStatus('current')
if mibBuilder.loadTexts: vcgXCProtPortNum.setDescription('The number of the port of the VCG entity that serves as the protection port for the cross connection.')
vcgXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtNum.setStatus('current')
if mibBuilder.loadTexts: vcgXCProtNum.setDescription('The number of the VCG within the identified port that serves as the protection port for the cross connection.')
vcgXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: vcgXCRowStatus.setDescription('Used to control the addition and deletion of entries in the VCG cross connection table, which in turn controls the provisioning and de-provisioning of VCG cross connections.')
stsnXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3), )
if mibBuilder.loadTexts: stsnXCTable.setStatus('current')
if mibBuilder.loadTexts: stsnXCTable.setDescription('This table contains one row for every provisioned cross connection between SONET STS-N facilities on Muxponder circuit packs.')
stsnXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnXCStsnTypeIdx"), (0, "BTI-7000-MIB", "stsnXCSrcShelfIdx"), (0, "BTI-7000-MIB", "stsnXCSrcSlotIdx"), (0, "BTI-7000-MIB", "stsnXCSrcPortIdx"), (0, "BTI-7000-MIB", "stsnXCSrcIdx"), (0, "BTI-7000-MIB", "stsnXCDestShelfIdx"), (0, "BTI-7000-MIB", "stsnXCDestSlotIdx"), (0, "BTI-7000-MIB", "stsnXCDestPortIdx"), (0, "BTI-7000-MIB", "stsnXCDestIdx"))
if mibBuilder.loadTexts: stsnXCEntry.setStatus('current')
if mibBuilder.loadTexts: stsnXCEntry.setDescription('The conceptual row object of the STS-N cross connection table.')
stsnXCStsnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnXCStsnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCStsnTypeIdx.setDescription('The specific STS-N rate of the cross-connection.')
stsnXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCSrcShelfIdx.setDescription('The number of the shelf of the STS-N facility that serves as the source end-point for the cross connection.')
stsnXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stsnXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCSrcSlotIdx.setDescription('The number of the slot of the STS-N facility that serves as the source end-point for the cross connection.')
stsnXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnXCSrcPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCSrcPortIdx.setDescription('The number of the port of the STS-N facility that serves as the source end-point for the cross connection.')
stsnXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnXCSrcIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCSrcIdx.setDescription('The number of the STS-N within the identified port that serves as the source end-point for the cross connection.')
stsnXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnXCDestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCDestShelfIdx.setDescription('The number of the shelf of the STS-N facility that serves as the destination end-point for the cross connection.')
stsnXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stsnXCDestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCDestSlotIdx.setDescription('The number of the slot of the STS-N entity that serves as the destination end-point for the cross connection.')
stsnXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: stsnXCDestPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCDestPortIdx.setDescription('The number of the port of the STS-N entity that serves as the destination end-point for the cross connection.')
stsnXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnXCDestIdx.setStatus('current')
if mibBuilder.loadTexts: stsnXCDestIdx.setDescription('The number of the STS-N within the identified port that serves as the destination end-point for the cross connection.')
stsnXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCType.setStatus('current')
if mibBuilder.loadTexts: stsnXCType.setDescription('The type of cross connection between the identified source and destination STS-N facilities. This is a mandatory object when a row of the STS-N cross connect table is created. Only 2-way cross-connections are supported between STS-Ns.')
stsnXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 11), StsnType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtTypeNum.setStatus('current')
if mibBuilder.loadTexts: stsnXCProtTypeNum.setDescription('The rate of the STS-N facility that serves as the protection end-point for the cross connection.')
stsnXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtShelfNum.setStatus('current')
if mibBuilder.loadTexts: stsnXCProtShelfNum.setDescription('The number of the shelf of the STS-N entity that serves as the protection end-point for the cross connection.')
stsnXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtSlotNum.setStatus('current')
if mibBuilder.loadTexts: stsnXCProtSlotNum.setDescription('The number of the slot of the STS-N entity that serves as the protection end-point for the cross connection.')
stsnXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtPortNum.setStatus('current')
if mibBuilder.loadTexts: stsnXCProtPortNum.setDescription('The number of the port of the STS-N entity that serves as the protection end-point for the cross connection.')
stsnXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtNum.setStatus('current')
if mibBuilder.loadTexts: stsnXCProtNum.setDescription('The number of the STS-N within the identified port that serves as the protection end-point for the cross connection.')
stsnXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: stsnXCRowStatus.setDescription('Used to control the addition and deletion of entries in the STS-N cross connection table, which in turn controls the provisioning and de-provisioning of STS-N cross connections.')
vcnXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4), )
if mibBuilder.loadTexts: vcnXCTable.setStatus('current')
if mibBuilder.loadTexts: vcnXCTable.setDescription('This table contains one row for every provisioned cross connection between SDH VC-N facilities on Muxponder circuit packs.')
vcnXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnXCVcnTypeIdx"), (0, "BTI-7000-MIB", "vcnXCSrcShelfIdx"), (0, "BTI-7000-MIB", "vcnXCSrcSlotIdx"), (0, "BTI-7000-MIB", "vcnXCSrcPortIdx"), (0, "BTI-7000-MIB", "vcnXCSrcIdx"), (0, "BTI-7000-MIB", "vcnXCDestShelfIdx"), (0, "BTI-7000-MIB", "vcnXCDestSlotIdx"), (0, "BTI-7000-MIB", "vcnXCDestPortIdx"), (0, "BTI-7000-MIB", "vcnXCDestIdx"))
if mibBuilder.loadTexts: vcnXCEntry.setStatus('current')
if mibBuilder.loadTexts: vcnXCEntry.setDescription('The conceptual row object of the VC-N cross connection table.')
vcnXCVcnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnXCVcnTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCVcnTypeIdx.setDescription('The specific rate of the VC-N cross-connection.')
vcnXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCSrcShelfIdx.setDescription('The number of the shelf of the VC-N facility that serves as the source end-point for the cross connection.')
vcnXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: vcnXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCSrcSlotIdx.setDescription('The number of the slot of the VC-N facility that serves as the source end-point for the cross connection.')
vcnXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnXCSrcPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCSrcPortIdx.setDescription('The number of the port of the VC-N facility that serves as the source end-point for the cross connection.')
vcnXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnXCSrcIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCSrcIdx.setDescription('The number of the VC-N within the identified port that serves as the source end-point for the cross connection.')
vcnXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnXCDestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCDestShelfIdx.setDescription('The number of the shelf of the VC-N facility that serves as the destination end-point for the cross connection.')
vcnXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: vcnXCDestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCDestSlotIdx.setDescription('The number of the slot of the VC-N entity that serves as the destination end-point for the cross connection.')
vcnXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: vcnXCDestPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCDestPortIdx.setDescription('The number of the port of the VC-N entity that serves as the destination end-point for the cross connection.')
vcnXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnXCDestIdx.setStatus('current')
if mibBuilder.loadTexts: vcnXCDestIdx.setDescription('The number of the VC-N within the identified port that serves as the destination end-point for the cross connection.')
vcnXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCType.setStatus('current')
if mibBuilder.loadTexts: vcnXCType.setDescription('The type of cross connection between the identified source and destination VC-N facilities. This is a mandatory object when a row of the VC-N cross connect table is created. Only 2-way cross-connections are supported between VC-Ns.')
vcnXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 11), VcnType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtTypeNum.setStatus('current')
if mibBuilder.loadTexts: vcnXCProtTypeNum.setDescription('The rate of the VC-N facility that serves as the protection end-point for the cross connection.')
vcnXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtShelfNum.setStatus('current')
if mibBuilder.loadTexts: vcnXCProtShelfNum.setDescription('The number of the shelf of the VC-N entity that serves as the protection end-point for the cross connection.')
vcnXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtSlotNum.setStatus('current')
if mibBuilder.loadTexts: vcnXCProtSlotNum.setDescription('The number of the slot of the VC-N entity that serves as the protection end-point for the cross connection.')
vcnXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtPortNum.setStatus('current')
if mibBuilder.loadTexts: vcnXCProtPortNum.setDescription('The number of the port of the VC-N entity that serves as the protection end-point for the cross connection.')
vcnXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtNum.setStatus('current')
if mibBuilder.loadTexts: vcnXCProtNum.setDescription('The number of the VC-N within the identified port that serves as the protection end-point for the cross connection.')
vcnXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: vcnXCRowStatus.setDescription('Used to control the addition and deletion of entries in the VC-N cross connection table, which in turn controls the provisioning and de-provisioning of VC-N cross connections.')
odunXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5), )
if mibBuilder.loadTexts: odunXCTable.setStatus('current')
if mibBuilder.loadTexts: odunXCTable.setDescription('This table contains one row for every provisioned cross connection between OTN ODU-N facilities on Muxponder circuit packs.')
odunXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "odunXCOdunTypeIdx"), (0, "BTI-7000-MIB", "odunXCSrcShelfIdx"), (0, "BTI-7000-MIB", "odunXCSrcSlotIdx"), (0, "BTI-7000-MIB", "odunXCSrcPortIdx"), (0, "BTI-7000-MIB", "odunXCSrcIdx"), (0, "BTI-7000-MIB", "odunXCDestShelfIdx"), (0, "BTI-7000-MIB", "odunXCDestSlotIdx"), (0, "BTI-7000-MIB", "odunXCDestPortIdx"), (0, "BTI-7000-MIB", "odunXCDestIdx"))
if mibBuilder.loadTexts: odunXCEntry.setStatus('current')
if mibBuilder.loadTexts: odunXCEntry.setDescription('The conceptual row object of the ODU-N cross connection table.')
odunXCOdunTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 1), OdunType())
if mibBuilder.loadTexts: odunXCOdunTypeIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCOdunTypeIdx.setDescription('The specific rate of the ODU-N cross-connection.')
odunXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: odunXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCSrcShelfIdx.setDescription('The number of the shelf of the ODU-N facility that serves as the source end-point for the cross connection.')
odunXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: odunXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCSrcSlotIdx.setDescription('The number of the slot of the ODU-N facility that serves as the source end-point for the cross connection.')
odunXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: odunXCSrcPortIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCSrcPortIdx.setDescription('The number of the port of the ODU-N facility that serves as the source end-point for the cross connection.')
odunXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: odunXCSrcIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCSrcIdx.setDescription('The number of the ODU-N within the identified port that serves as the source end-point for the cross connection.')
odunXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: odunXCDestShelfIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCDestShelfIdx.setDescription('The number of the shelf of the ODU-N facility that serves as the destination end-point for the cross connection.')
odunXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: odunXCDestSlotIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCDestSlotIdx.setDescription('The number of the slot of the ODU-N entity that serves as the destination end-point for the cross connection.')
odunXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: odunXCDestPortIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCDestPortIdx.setDescription('The number of the port of the ODU-N entity that serves as the destination end-point for the cross connection.')
odunXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: odunXCDestIdx.setStatus('current')
if mibBuilder.loadTexts: odunXCDestIdx.setDescription('The number of the ODU-N within the identified port that serves as the destination end-point for the cross connection.')
odunXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCType.setStatus('current')
if mibBuilder.loadTexts: odunXCType.setDescription('The type of cross connection between the identified source and destination ODU-N facilities. This is a mandatory object when a row of the ODU-N cross connect table is created. Only 2-way cross-connections are supported between ODU-Ns.')
odunXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 11), OdunType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtTypeNum.setStatus('current')
if mibBuilder.loadTexts: odunXCProtTypeNum.setDescription('The rate of the ODU-N facility that serves as the protection end-point for the cross connection.')
odunXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtShelfNum.setStatus('current')
if mibBuilder.loadTexts: odunXCProtShelfNum.setDescription('The number of the shelf of the ODU-N entity that serves as the protection end-point for the cross connection.')
odunXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtSlotNum.setStatus('current')
if mibBuilder.loadTexts: odunXCProtSlotNum.setDescription('The number of the slot of the ODU-N entity that serves as the protection end-point for the cross connection.')
odunXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtPortNum.setStatus('current')
if mibBuilder.loadTexts: odunXCProtPortNum.setDescription('The number of the port of the ODU-N entity that serves as the protection end-point for the cross connection.')
odunXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtNum.setStatus('current')
if mibBuilder.loadTexts: odunXCProtNum.setDescription('The number of the ODU-N within the identified port that serves as the protection end-point for the cross connection.')
odunXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: odunXCRowStatus.setDescription('Used to control the addition and deletion of entries in the ODU-N cross connection table, which in turn controls the provisioning and de-provisioning of ODU-N cross connections.')
xcvrProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: xcvrProtGrpTable.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpTable.setDescription('This table contains one row for every provisioned protection group pairing between optical transceiver facilities on the wavelength translator, regenerator and manager cards.')
xcvrProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtIdx"))
if mibBuilder.loadTexts: xcvrProtGrpEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpEntry.setDescription('The conceptual row object of the optical transceiver protection group table.')
xcvrProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrProtGrpWorkTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpWorkTypeIdx.setDescription('The specific type of wavelength conversion function of the transceiver port that serves as the working port for the protection group.')
xcvrProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtGrpWorkShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpWorkShelfIdx.setDescription('The number of the shelf of the transceiver port that serves as the working port for the protection group.')
xcvrProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtGrpWorkSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpWorkSlotIdx.setDescription('The number of the slot of the transceiver port that serves as the working port for the protection group.')
xcvrProtGrpWorkIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtGrpWorkIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpWorkIdx.setDescription('The number of the port of the transceiver port that serves as the working port for the protection group.')
xcvrProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 5), XcvrType())
if mibBuilder.loadTexts: xcvrProtGrpProtTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpProtTypeIdx.setDescription('The specific type of wavelength conversion function of the transceiver port that serves as the protection port for the protection group.')
xcvrProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtGrpProtShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpProtShelfIdx.setDescription('The number of the shelf of the transceiver port that serves as the protection port for the protection group.')
xcvrProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtGrpProtSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpProtSlotIdx.setDescription('The number of the slot of the transceiver port that serves as the protection port for the protection group.')
xcvrProtGrpProtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtGrpProtIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpProtIdx.setDescription('The number of the port of the transceiver port that serves as the protection port for the protection group.')
xcvrProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtGrpId.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpId.setDescription('Textual data recorded by the user to describe the provisioned transceiver protection group in a manner useful to the user.')
xcvrProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: xcvrProtGrpRowStatus.setDescription('Used to control the addition and deletion of entries in the transceiver protection group table, which in turn controls provisioning and deprovisioning of optical transceiver protection groups.')
ocnProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2), )
if mibBuilder.loadTexts: ocnProtGrpTable.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpTable.setDescription('This table contains one row for every provisioned protection group pairing between SONET OC-N facilities on Muxponder circuit packs.')
ocnProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkPortIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtPortIdx"))
if mibBuilder.loadTexts: ocnProtGrpEntry.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpEntry.setDescription('The conceptual row object of the OC-N facility protection group table.')
ocnProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnProtGrpWorkTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpWorkTypeIdx.setDescription('The specific rate of the OC-N facility that serves as the working facility for the protection group. Currently, only OCN-N facilities that are OTU-N mapped are supported for protection grouping.')
ocnProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtGrpWorkShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpWorkShelfIdx.setDescription('The number of the shelf of the OC-N facility that serves as the working facility for the protection group.')
ocnProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtGrpWorkSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpWorkSlotIdx.setDescription('The number of the slot of the OC-N facility that serves as the working facility for the protection group.')
ocnProtGrpWorkPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtGrpWorkPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpWorkPortIdx.setDescription('The number of the port of the OC-N facility that serves as the working facility for the protection group.')
ocnProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 5), OcnType())
if mibBuilder.loadTexts: ocnProtGrpProtTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpProtTypeIdx.setDescription('The specific rate of the OC-N facility that serves as the protection facility for the protection group. Currently, only OC-N facilities that are OTU-N mapped are supported for protection grouping.')
ocnProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtGrpProtShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpProtShelfIdx.setDescription('The number of the shelf of the OC-N facility that serves as the protection facility for the protection group.')
ocnProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtGrpProtSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpProtSlotIdx.setDescription('The number of the slot of the OC-N facility that serves as the protection facility for the protection group.')
ocnProtGrpProtPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtGrpProtPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpProtPortIdx.setDescription('The number of the port of the OC-N facility that serves as the protection facility for the protection group.')
ocnProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnProtGrpId.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpId.setDescription('Textual data recorded by the user to describe the provisioned OC-N protection group in a manner useful to the user.')
ocnProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnProtGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ocnProtGrpRowStatus.setDescription('Used to control the addition and deletion of entries in the OC-N protection group table, which in turn controls provisioning and deprovisioning of OC-N facility protection groups.')
stmnProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3), )
if mibBuilder.loadTexts: stmnProtGrpTable.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpTable.setDescription('This table contains one row for every provisioned protection group pairing between SDH STM-N facilities on Muxponder circuit packs.')
stmnProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkPortIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtPortIdx"))
if mibBuilder.loadTexts: stmnProtGrpEntry.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpEntry.setDescription('The conceptual row object of the STM-N facility protection group table.')
stmnProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnProtGrpWorkTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpWorkTypeIdx.setDescription('The specific rate of the STM-N facility that serves as the working facility for the protection group. Currently, only STM-N facilities that are OTU-N mapped are supported for protection grouping.')
stmnProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtGrpWorkShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpWorkShelfIdx.setDescription('The number of the shelf of the STM-N facility that serves as the working facility for the protection group.')
stmnProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtGrpWorkSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpWorkSlotIdx.setDescription('The number of the slot of the STM-N facility that serves as the working facility for the protection group.')
stmnProtGrpWorkPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtGrpWorkPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpWorkPortIdx.setDescription('The number of the port of the STM-N facility that serves as the working facility for the protection group.')
stmnProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 5), StmnType())
if mibBuilder.loadTexts: stmnProtGrpProtTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpProtTypeIdx.setDescription('The specific rate of the STM-N facility that serves as the protection facility for the protection group. Currently, only STM-N facilities that are OTU-N mapped are supported for protection grouping.')
stmnProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtGrpProtShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpProtShelfIdx.setDescription('The number of the shelf of the STM-N facility that serves as the protection facility for the protection group.')
stmnProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtGrpProtSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpProtSlotIdx.setDescription('The number of the slot of the STM-N facility that serves as the protection facility for the protection group.')
stmnProtGrpProtPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtGrpProtPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpProtPortIdx.setDescription('The number of the port of the STM-N facility that serves as the protection facility for the protection group.')
stmnProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnProtGrpId.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpId.setDescription('Textual data recorded by the user to describe the provisioned STM-N protection group in a manner useful to the user.')
stmnProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnProtGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: stmnProtGrpRowStatus.setDescription('Used to control the addition and deletion of entries in the STM-N protection group table, which in turn controls provisioning and deprovisioning of STM-N facility protection groups.')
dbBackupAndRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1))
swUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2))
class DbBackupAndRestoreCmd(TextualConvention, Integer32):
    description = "The MSCP maintains all provisionable data in non-volatile storage so that configuration settings are retained during system shutdowns and restarts. The configuration database is version controlled to facilitate the detection of an incompatible software load and/or database. The BTI 7000 Series supports user-initiated backup and restore operations of the configuration database through the SNMP Set requests performed on the dbBackupAndRestoreCmd object with a value corresponding to the required action. In a backup operation, the database is uploaded to a user-specified network location (that is, a local PC or a remote PC) using the file transfer protocol (FTP), or it is stored locally on the MSCP. In a restore operation, the database is restored using a version of the file from an FTP server or locally from the MSCP. The integrity of the file is validated to ensure that it matches the current software load on the BTI 7000 Series. The DbBackupAndRestoreCmd textual convention is the value of the dbBackupAndRestoreCmd object, which is used to activate a database backup operation, or the various steps of a database restore operation. These operations are initiated when a set request is performed on the dbBackupAndRestoreCmd object with a value corresponding to the desired action, as explained below. A get request on this type returns the value noOp. The valid values for DbBackupAndRestoreCmd that can be used in a set operation are: - 'invokeBackup': used to perform a database backup operation. The operation may be used to perform a local database backup, or to save the database backup to a remote repository. - 'loadRestore': used to initiate a database restore operation. The operation may be the restoration of a local database backup or of a remote database backup - 'invokeRestore': continues a database restore operation after the loadRestore stage has completed. The database being restored is made active on the SCP circuit pack at this stage. - 'applyRestore': Obsolete this functionality is now done as part of the invokeRestore. - 'commitRestore': is used to complete a database restore operation and can be used after the applyRestore action completes - 'cancelRestore': is used to cancel and back out of a database restore operation in progress and can be used before the commitRestore action is called. In order for the set request on the dbBackupAndRestoreCmd object to complete successfully, the values of other objects must be set in the same set request for some of the commands. The additional objects required to be set along with the dbBackupAndRestoreCmd object for each DbBackupAndRestoreCmd value are listed below. - invokeBackup: must also set dbBackupAndRestoreType. If this object is set to remote, then the dbBackupAndRestoreAddress, dbBackupAndRestoreFtpUser and dbBackupAndRestorePswd object values must also be specified in the set request. The dbBackupAndRestoreCheckAlm object may optionally be set when the invokeBackup action is performed. Also when the dbBackupAndRestoreType is set to remote the dbBackupAndRestorePath is optional. If not specified the default name is used. - loadRestore: must also set dbBackupAndRestoreType. If this object is set to remote, then the dbBackupAndRestoreAddress, dbBackupAndRestorePath, dbBackupAndRestoreFtpUser and dbBackupAndRestorePswd object values must also be specified in the set request. The dbBackupAndRestoreCheckSysName object may be set when the loadRestore action is performed, but is not mandatory. - invokeRestore: must also set dbBackupAndRestoreInvokeFilename to confirm the name of the backed file to be used in the restore operation. Optionally, the dbBackupAndRestoreCheckAlm object may be set. - applyRestore, commitRestore, cancelRestore: no additional object values are required to be included for these set requests"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))
    namedValues = NamedValues(("noOp", 1), ("invokeBackup", 2), ("loadRestore", 3), ("invokeRestore", 4), ("commitRestore", 6), ("cancelRestore", 7))

class DbBackupAndRestoreType(TextualConvention, Integer32):
    description = "Indicates the type of database backup operation to be performed, or the type of database restore operation to be performed. The meaning of the values are as follows. - 'local': for a database backup, the backup is made on the NE itself; for a database restore, the restoration is from a local database backup file - 'remote': for a database backup, the backup is made to an external ftp server; for a database restore, the restoration is from a database file located on an external ftp server - 'remoteSftp': for a database backup, the backup is made to an external sftp server; for a database restore, the restoration is from a database file located on an external sftp server"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("remote", 2), ("remoteSftp", 3))

dbBackupAndRestoreCmd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 1), DbBackupAndRestoreCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCmd.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreCmd.setDescription('This object is used to activate the steps of a database backup or database restore operation. The description of the DbBackupAndRestoreCmd textual convention explains the usage of this object to perform these operations.')
dbBackupAndRestoreType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 2), DbBackupAndRestoreType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreType.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreType.setDescription('This object is used to indicate whether a local database, or a remote database is involved in the backup or restore operation that is being activated with the dbBackupAndRestoreCmd object, as explained in the DbBackupAndRestoreType textual convention.')
dbBackupAndRestoreAddress = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreAddress.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreAddress.setDescription('The IP address of an ftp server which the NE database is backed up to, or restored from. This object is used when the dbBackupAndRestoreType is set to remote.')
dbBackupAndRestorePath = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestorePath.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestorePath.setDescription('The directory path on the ftp server where where the NE database backup is to be saved to, or restored from. This object is used when the dbBackupAndRestoreType is set to remote.')
dbBackupAndRestoreFtpUser = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreFtpUser.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreFtpUser.setDescription('The user identifier to be used on the ftp server where the NE database backup is to be saved to, or restored from. This object is used when the dbBackupAndRestoreType is set to remote.')
dbBackupAndRestoreFtpPswd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreFtpPswd.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreFtpPswd.setDescription('The password to be used on the ftp server where the NE database backup is to be saved to, or restored from. This object is used when the dbBackupAndRestoreType is set to remote.')
dbBackupAndRestoreCheckAlm = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCheckAlm.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreCheckAlm.setDescription('This object is used to indicate whether or not the system is to be checked for active alarms before proceding with a backup or restore operation. If set to yes, the requested action will not be performed if alarms are active on the system. If not specified in the same set request as the dbBackupAndRestoreCmd object, the value is defaulted to yes.')
dbBackupAndRestoreCheckSysName = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCheckSysName.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreCheckSysName.setDescription('This object is used to indicate whether or not the system name of the NE targeted for a database restore operation against the system name embedded in the database backup file to be restored. If set to yes, the requested action will not be performed if system names do not match. If not specified in the same set request as the dbBackupAndRestoreCmd object, the value is defaulted to yes.')
dbBackupAndRestoreInvokeFilename = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreInvokeFilename.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreInvokeFilename.setDescription('The name of the database backup file that is to be used in a database restore operation. This object is set along with the dbBackupAndRestoreCmd object when it is set to invokeRestore, as a confirmation that the database that is to be restored is the correct database. In order for the invokeRestore command to proceed, the value set for this object must match the value of the dbBackupAndRestoreFilename object.')
dbBackupAndRestoreFilename = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbBackupAndRestoreFilename.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreFilename.setDescription('The name of the database backup file that is present and ready to be restored. The value of this field is valid after the completion of the loadRestore command.')
dbBackupAndRestoreResult = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbBackupAndRestoreResult.setStatus('current')
if mibBuilder.loadTexts: dbBackupAndRestoreResult.setDescription('Indicates if the identified stage of the database backup and restore process has resulted in success or failure.')
class SwUpgradeCmd(TextualConvention, Integer32):
    description = "All BTI 7000 Series circuit packs are shipped with pre-loaded software. At system commissioning, it is not necessary to start the system by loading software. However, during the life cycle of the BTI 7000 Series, it might be necessary to upgrade the system software. Normally, the system software is upgraded to: � Support the functionality of new circuit packs � Provide new features for existing circuit packs � Add specific software improvements Performing a system software upgrade on the BTI 7000 Series is non-service affecting. The upgrade process is designed for application environments that require that the optical signals passing through the BTI 7000 Series are not interrupted. The BTI 7000 Series supports a user-initiated software upgrade operation through the SNMP Set requests performed on the swUpgradeCmd object with a value corresponding to the required action. The SwUpgradeCmd textual convention is the value of the swUpgradeCmd object, which is used to activate the various steps of the software upgrade procedure on the system. These steps are initiated when a set request is performed on the swUpgradeCmd object with a value corresponding to the desired action, as explained below. A get request will return the value noOp. The valid values for SwUpgradeCmd that can be used in a set operation are: - 'checkUpgrade': used to perform a pre-upgrade check of the system to ensure that it is ready for the upgrade process, and that the load files on the server are accessible. - 'loadUpgrade': used to initiate a system upgrade by downloading the load files from a remote server to the SCP software load storage area. - 'invokeUpgrade': continues a system upgrade operation after the loadUpgrade stage has completed. First the upgrade load is installed on all circuit packs in the system, then each card is rebooted to run the upgrade load. - 'commitUpgrade': is used to complete a system upgrade operation and can be used after the invkUpgrade action completes - 'cancelUpgrade': is used to cancel and back out of a system software upgrade operation in progress and can be used before the cmmtUpgrade action is called. - 'invokeScpUpgrade': is a special-purpose upgrade step used in place of the invkUpgrade value when an upgrade is being performed on an SCP pack only. Such a targeted upgrade is valid only when an SCP pack is replaced and the new pack requires a software upgrade to make its software version consistent with the system In order for the set request on the swUpgradeCmd object to complete successfully, the values of other objects must be set in the same set request for some of the commands. The additional objects required to be set along with the swUpgradeCmd object for each SwUpgradeCmd value are listed below. - checkUpgrade, loadUpgrade: must also set swUpgradeAddress, swUpgradePath, swUpgradeFtpUser, swUpgradeFtpPswd and swUpgradeFileTransferType object values to indicate where the ftp or sftp server with the upgrade load files is to be found, along with access parameters. - invokeUpgrade, invokeScpUpgrade: must also set the swUpgradeInvokeRelNum object to confirm the software version that is to be used in the upgrade. The swUpgradeCheckAlm object may be set, but is not mandatory. - commitUpgrade, cancelUpgrade: no additional object values are required to be specified for these set requests."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("noOp", 1), ("checkUpgrade", 2), ("loadUpgrade", 3), ("invkUpgrade", 4), ("cmmtUpgrade", 5), ("cancUpgrade", 6), ("invkScpUpgrade", 7))

class SwUpgradeFileTransferType(TextualConvention, Integer32):
    description = "Indicates the protocol of the file transfer. - 'ftp': an external ftp server is the source for the load to be transfered. - 'sftp': an external sftp server is the source for the load to be transfered."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ftp", 1), ("sftp", 2))

swUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 1), SwUpgradeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeCmd.setStatus('current')
if mibBuilder.loadTexts: swUpgradeCmd.setDescription('This object is used to activate the steps of a software upgrade procedure on the system. The description of the SwUpgradeCmd textual convention explains the usage of this object to perform these operations.')
swUpgradeAddress = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeAddress.setStatus('current')
if mibBuilder.loadTexts: swUpgradeAddress.setDescription('The IP address of an ftp or sftp server from which the software load files for the upgrade are to be downloaded.')
swUpgradePath = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradePath.setStatus('current')
if mibBuilder.loadTexts: swUpgradePath.setDescription('The directory path on the upgrade load files ftp or sftp server where the software load files are found.')
swUpgradeFtpUser = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFtpUser.setStatus('current')
if mibBuilder.loadTexts: swUpgradeFtpUser.setDescription('The user identifier to be used on the ftp or sftp server from which the upgrade load is downloaded.')
swUpgradeFtpPswd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFtpPswd.setStatus('current')
if mibBuilder.loadTexts: swUpgradeFtpPswd.setDescription('The password to be used on the ftp or sftp server from which the upgrade load is downloaded.')
swUpgradeInvokeRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeInvokeRelNum.setStatus('current')
if mibBuilder.loadTexts: swUpgradeInvokeRelNum.setDescription('The release number of the software upgrade load that is targeted in a software upgrade invoke operation. This object must be set along with the swUpgradeCmd object when it is set to invokeUpgrade or invokeScpUpgrade, as a confirmation that the software load to be used in the upgrade is the correct load.')
swUpgradeCheckAlm = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeCheckAlm.setStatus('current')
if mibBuilder.loadTexts: swUpgradeCheckAlm.setDescription('This object is used to indicate whether or not the system is to be checked for active alarms before proceding with a software upgrade operation. If set to yes, the requested action will not be performed if alarms are active on the system. If not specified in the same set request as the swUpgradeCmd object, the value is defaulted to yes.')
swUpgradeActiveRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpgradeActiveRelNum.setStatus('current')
if mibBuilder.loadTexts: swUpgradeActiveRelNum.setDescription('The release number of the software load that is installed on the system and is currently active.')
swUpgradeInactiveRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpgradeInactiveRelNum.setStatus('current')
if mibBuilder.loadTexts: swUpgradeInactiveRelNum.setDescription('The release number of the software load that is installed on the system and is currently inactive.')
swUpgradeFileTransferType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 10), SwUpgradeFileTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFileTransferType.setStatus('current')
if mibBuilder.loadTexts: swUpgradeFileTransferType.setDescription('This object is used to define the file transfer protocol used to retreive the load from a remote server. The default value is ftp')
cpRestartOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1), )
if mibBuilder.loadTexts: cpRestartOpTable.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpTable.setDescription('This table contains one row for every provisioned restartable circuit pack on the NE to facilitate the performing of circuit pack restarts.')
cpRestartOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpRestartOpTypeIdx"), (0, "BTI-7000-MIB", "cpRestartOpShelfIdx"), (0, "BTI-7000-MIB", "cpRestartOpSlotIdx"))
if mibBuilder.loadTexts: cpRestartOpEntry.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpEntry.setDescription('The conceptual row object of the circuit pack restart operation table.')
cpRestartOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 1), CpType())
if mibBuilder.loadTexts: cpRestartOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpTypeIdx.setDescription('The specific type of circuit pack targeted for the restart operation.')
cpRestartOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpRestartOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpShelfIdx.setDescription('The number of the shelf on which the circuit pack targeted for the restart operation is provisioned.')
cpRestartOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: cpRestartOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpSlotIdx.setDescription('The number of the slot in which the circuit pack targeted for the restart operation is provisioned. For ESI type circuit packs, the slot will be 0. For CCM type circuit packs, the slot can only be 1 or 2.')
cpRestartOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("warmRestart", 2), ("coldRestart", 3), ("powerOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpRestartOpCmd.setStatus('current')
if mibBuilder.loadTexts: cpRestartOpCmd.setDescription('Used to perform a circuit pack restart operation as follows. - warmRestart causes a restart of the main processor only; traffic is not affected - coldRestart causes a full circuit pack restart, including data path - powerOn causes a circuit pack that has been powered down due to a high temperature or voltage event to power on. When this object is read, the value noOp is returned.')
oaOOBRSDOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1), )
if mibBuilder.loadTexts: oaOOBRSDOpTable.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpTable.setDescription('This table contains one row for every provisioned optical amplifier on the NE that supports the Override Optical Back Reflection Shutdown operation.')
oaOOBRSDOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaOOBRSDOpTypeIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpShelfIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpSlotIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpIdx"))
if mibBuilder.loadTexts: oaOOBRSDOpEntry.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpEntry.setDescription('The conceptual row object of the optical amplifier override optical back reflection shutdown operation table.')
oaOOBRSDOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 1), OaType())
if mibBuilder.loadTexts: oaOOBRSDOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpTypeIdx.setDescription('The specific type of optical amplifier.')
oaOOBRSDOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaOOBRSDOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpShelfIdx.setDescription('The number of the shelf on which the optical amplifier targeted for the operation is provisioned.')
oaOOBRSDOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaOOBRSDOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpSlotIdx.setDescription('The number of the slot within which the optical amplifier facility targeted for the operation is provisioned.')
oaOOBRSDOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaOOBRSDOpIdx.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpIdx.setDescription('The number of the port on the circuit pack on which the optical amplifier facility has been provisioned.')
oaOOBRSDOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("overrideOBRSD", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOOBRSDOpCmd.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpCmd.setDescription('Used to perform a Override Optical Back Reflection Shutdown operation when this object is set to overrideOBRSD. When read, this object returns noOp.')
oaOOBRSDOpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOOBRSDOpTimer.setStatus('current')
if mibBuilder.loadTexts: oaOOBRSDOpTimer.setDescription('Used to specify the time duration of an override back reflection shutdown operation. It is only valid to set the value of this object in the same set request as for the oaOOBRSDOpCmd object. Despite the indicated value range, the actual supported range is 20 to 600. The value 0 is returned when this object is read, even if an overrideOBRSD operation is in progress.')
xcvrLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1), )
if mibBuilder.loadTexts: xcvrLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpTable.setDescription('This table contains one row for every provisioned optical transceiver on the NE to facilitate the performing of transceiver loopback operations.')
xcvrLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpIdx"))
if mibBuilder.loadTexts: xcvrLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpEntry.setDescription('The conceptual row object of the optical transceiver loopback operation table.')
xcvrLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrLpbkOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpTypeIdx.setDescription('The specific type of wavelength conversion function of the circuit pack of the transceiver port targeted for the loopback operation.')
xcvrLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpShelfIdx.setDescription('The number of the shelf of the transceiver targeted for the loopback operation.')
xcvrLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpSlotIdx.setDescription('The number of the slot in which the transceiver targeted for the loopback operation is provisioned.')
xcvrLpbkOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrLpbkOpIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpIdx.setDescription('The number of the port on the circuit pack on which the optical transceiver facility has been provisioned.')
xcvrLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: xcvrLpbkOpCmd.setDescription('Used to perform a loopback operation on a transceiver facility as follows: - oprLpbk: operates a loopback on the transceiver - rlsLpbk: causes a previously invoked loopback to be released - oprTermLpbk: operates a terminal loopback for the transceiver When read, this object returns noOp.')
xcvrProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2), )
if mibBuilder.loadTexts: xcvrProtSwOpTable.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpTable.setDescription('This table contains one row for every provisioned optical transceiver on the NE configured to be part of a protection group pair to facilitate the performing of transceiver protection switching operations.')
xcvrProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpIdx"))
if mibBuilder.loadTexts: xcvrProtSwOpEntry.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpEntry.setDescription('The conceptual row object of the optical transceiver protection switching operation table.')
xcvrProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrProtSwOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpTypeIdx.setDescription('The specific type of wavelength conversion function of the circuit pack of the transceiver port targeted for the protection switching operation.')
xcvrProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtSwOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpShelfIdx.setDescription('The number of the shelf of the transceiver targeted for the protection switching operation.')
xcvrProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtSwOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpSlotIdx.setDescription('The number of the slot within which the transceiver targeted for the protection switching operation is provisioned.')
xcvrProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtSwOpIdx.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpIdx.setDescription('The number of the port on the circuit pack on which the optical transceiver facility has been provisioned.')
xcvrProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrProtSwOpCmd.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwOpCmd.setDescription('Used to perform a protection switch on a transceiver facility which is configured to be a part of a protection group, as described in the ProtSwOpCmd textual convention.')
ocnLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1), )
if mibBuilder.loadTexts: ocnLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpTable.setDescription('This table contains one row for every provisioned OC-N facility on the NE to facilitate the performing loopback operations.')
ocnLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpPortIdx"))
if mibBuilder.loadTexts: ocnLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpEntry.setDescription('The conceptual row object of the OC-N loopback operation table.')
ocnLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnLpbkOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpTypeIdx.setDescription('The specific type of OC-N signal which is targeted for the loopback operation.')
ocnLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpShelfIdx.setDescription('The number of the shelf of the OC-N facility targeted for the loopback operation.')
ocnLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpSlotIdx.setDescription('The number of the slot in which the OC-N facility targeted for the loopback operation is provisioned.')
ocnLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnLpbkOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpPortIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility targeted for the loopback operation is provisioned.')
ocnLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: ocnLpbkOpCmd.setDescription('Used to perform a loopback operation on a OC-N facility as follows: - oprFacilityLpbk: operates an OC-N facility loopback - oprTerminalLpbk: operates an OC-N terminal loopback - rlsLpbk: releases a previously invoked loopback Note that the terminal loopback can only be operated on a client OC-N facility. When read, this object returns noOp.')
ocnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2), )
if mibBuilder.loadTexts: ocnProtSwOpTable.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpTable.setDescription('This table contains one row for every provisioned SONET OC-N facility on the NE configured to be part of a protection group pair to facilitate the performing of OC-N line protection switching operations.')
ocnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpIdx"))
if mibBuilder.loadTexts: ocnProtSwOpEntry.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpEntry.setDescription('The conceptual row object of the SONET OC-N facility protection switching operation table.')
ocnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnProtSwOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpTypeIdx.setDescription('The specific rate of OC-N facility targeted for the protection switching operation.')
ocnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtSwOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpShelfIdx.setDescription('The number of the shelf of the OC-N facility targeted for the protection switching operation.')
ocnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtSwOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpSlotIdx.setDescription('The number of the slot within which the OC-N facility targeted for the protection switching operation is provisioned.')
ocnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtSwOpIdx.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpIdx.setDescription('The number of the port on the circuit pack on which the OC-N facility has been provisioned.')
ocnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnProtSwOpCmd.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwOpCmd.setDescription('Used to perform a protection switch on a OC-N facility which is configured to be a part of a protection group, as described in the ProtSwOpCmd textual convention.')
stsnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1), )
if mibBuilder.loadTexts: stsnProtSwOpTable.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpTable.setDescription('This table contains one row for every created SONET STS-N facility on the system which is part of a protection group pairing to facilitate the performing of STS-N protection switching operations.')
stsnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpPortIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpIdx"))
if mibBuilder.loadTexts: stsnProtSwOpEntry.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpEntry.setDescription('The conceptual row object of the SONET STS-N protection switching operation table.')
stsnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnProtSwOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpTypeIdx.setDescription('The specific type of STS-N signal targeted for the protection switching operation.')
stsnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnProtSwOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpShelfIdx.setDescription('The number of the shelf of the STS-N facility targeted for the protection switching operation.')
stsnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnProtSwOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpSlotIdx.setDescription('The number of the slot of the STS-N facility targeted for the protection switching operation.')
stsnProtSwOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnProtSwOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpPortIdx.setDescription('The number of the port of the STS-N facility targeted for the protection switching operation.')
stsnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnProtSwOpIdx.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpIdx.setDescription('The sts channel number of the STS-N facility targeted for the protection switching operation.')
stsnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 6), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnProtSwOpCmd.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwOpCmd.setDescription('Used to perform a protection switch on a STS-N facility which is part of a protection group pairing, as described in the ProtSwOpCmd textual convention.')
stmnLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1), )
if mibBuilder.loadTexts: stmnLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpTable.setDescription('This table contains one row for every provisioned STM-N facility on the NE to facilitate the performing of STM-N facility loopback operations.')
stmnLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpPortIdx"))
if mibBuilder.loadTexts: stmnLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpEntry.setDescription('The conceptual row object of the STM-N loopback operation table.')
stmnLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnLpbkOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpTypeIdx.setDescription('The specific type of STM-N signal which is targeted for the loopback operation.')
stmnLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpShelfIdx.setDescription('The number of the shelf of the STM-N facility targeted for the loopback operation.')
stmnLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpSlotIdx.setDescription('The number of the slot in which the STM-N facility targeted for the loopback operation is provisioned.')
stmnLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnLpbkOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpPortIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility targeted for the loopback operation is provisioned.')
stmnLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: stmnLpbkOpCmd.setDescription('Used to perform a loopback operation on a STM-N facility as follows: - oprFacilityLpbk: operates an STM-N facility loopback - oprTerminalLpbk: operates an STM-N terminal loopback - rlsLpbk: releases a previously invoked loopback Note that a terminal loopback can only be operated on a client STM-N facility. When read, this object returns noOp.')
stmnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2), )
if mibBuilder.loadTexts: stmnProtSwOpTable.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpTable.setDescription('This table contains one row for every provisioned SDH STM-N facility on the NE configured to be part of a protection group pair to facilitate the performing of STM-N line protection switching operations.')
stmnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpIdx"))
if mibBuilder.loadTexts: stmnProtSwOpEntry.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpEntry.setDescription('The conceptual row object of the SDH STM-N facility protection switching operation table.')
stmnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnProtSwOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpTypeIdx.setDescription('The specific rate of STM-N facility targeted for the protection switching operation.')
stmnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtSwOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpShelfIdx.setDescription('The number of the shelf of the STM-N faacility targeted for the protection switching operation.')
stmnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtSwOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpSlotIdx.setDescription('The number of the slot within which the STM-N facility targeted for the protection switching operation is provisioned.')
stmnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtSwOpIdx.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpIdx.setDescription('The number of the port on the circuit pack on which the STM-N facility has been provisioned.')
stmnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnProtSwOpCmd.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwOpCmd.setDescription('Used to perform a protection switch on a STM-N facility which is configured to be a part of a protection group, as described in the ProtSwOpCmd textual convention.')
vcnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1), )
if mibBuilder.loadTexts: vcnProtSwOpTable.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpTable.setDescription('This table contains one row for every created SDH VC-N facility on the system which is part of a protection group pairing to facilitate the performing of VC-N protection switching operations.')
vcnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpPortIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpIdx"))
if mibBuilder.loadTexts: vcnProtSwOpEntry.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpEntry.setDescription('The conceptual row object of the SDH VC-N protection switching operation table.')
vcnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnProtSwOpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpTypeIdx.setDescription('The specific type of VC-N signal targeted for the protection switching operation.')
vcnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnProtSwOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpShelfIdx.setDescription('The number of the shelf of the VC-N facility targeted for the protection switching operation.')
vcnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnProtSwOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpSlotIdx.setDescription('The number of the slot of the VC-N facility targeted for the protection switching operation.')
vcnProtSwOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnProtSwOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpPortIdx.setDescription('The number of the port of the VC-N facility targeted for the protection switching operation.')
vcnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnProtSwOpIdx.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpIdx.setDescription('The index number of the VC-N facility targeted for the protection switching operation.')
vcnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 6), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnProtSwOpCmd.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwOpCmd.setDescription('Used to perform a protection switch on a VC-N facility which is part of a protection group pairing, as described in the ProtSwOpCmd textual convention.')
geLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1), )
if mibBuilder.loadTexts: geLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpTable.setDescription('This table contains one row for every provisioned Gigabit Ethernet facility on the NE to facilitate the performing of GE facility loopback operations.')
geLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "geLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "geLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "geLpbkOpPortIdx"))
if mibBuilder.loadTexts: geLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpEntry.setDescription('The conceptual row object of the Gigabit Ethernet loopback operation table.')
geLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpShelfIdx.setDescription('The number of the shelf of the Gigabit Ethernet facility targeted for the loopback operation.')
geLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpSlotIdx.setDescription('The number of the slot in which the Gigabit Ethernet facility targeted for the loopback operation is provisioned.')
geLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geLpbkOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpPortIdx.setDescription('The number of the port on the circuit pack on which the Gigabit Ethernet facility targeted for the loopback operation is provisioned.')
geLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: geLpbkOpCmd.setDescription('Used to perform a loopback operation on a Gigabit Ethernet facility as follows: - oprFacilityLpbk: operates an GE facility loopback - oprFacilityLpbk: operates an GE terminal loopback - rlsLpbk: releases a previously invoked loopback When read, this object returns noOp.')
fcLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1), )
if mibBuilder.loadTexts: fcLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpTable.setDescription('This table contains one row for every provisioned Fiber Channel facility on the NE to facilitate the performing of FC facility loopback operations.')
fcLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "fcLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "fcLpbkOpPortIdx"))
if mibBuilder.loadTexts: fcLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpEntry.setDescription('The conceptual row object of the Fiber Channel loopback operation table.')
fcLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpShelfIdx.setDescription('The number of the shelf of the Fiber Channel facility targeted for the loopback operation.')
fcLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpSlotIdx.setDescription('The number of the slot in which the Fiber Channel facility targeted for the loopback operation is provisioned.')
fcLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcLpbkOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpPortIdx.setDescription('The number of the port on the circuit pack on which the Fiber Channel facility targeted for the loopback operation is provisioned.')
fcLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: fcLpbkOpCmd.setDescription('Used to perform a loopback operation on a Fiber Channel facility as follows: - oprFacilityLpbk: operates an FC facility loopback - oprFacilityLpbk: operates an FC terminal loopback - rlsLpbk: releases a previously invoked loopback When read, this object returns noOp.')
briLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1), )
if mibBuilder.loadTexts: briLpbkOpTable.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpTable.setDescription('This table contains one row for every provisioned Bit Rate Independent (BRI) facility on the NE to facilitate the performing of BRI facility loopback operations.')
briLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "briLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "briLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "briLpbkOpPortIdx"))
if mibBuilder.loadTexts: briLpbkOpEntry.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpEntry.setDescription('The conceptual row object of the BRI loopback operation table.')
briLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briLpbkOpShelfIdx.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpShelfIdx.setDescription('The number of the shelf of the BRI facility targeted for the loopback operation.')
briLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briLpbkOpSlotIdx.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpSlotIdx.setDescription('The number of the slot in which the BRI facility targeted for the loopback operation is provisioned.')
briLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briLpbkOpPortIdx.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpPortIdx.setDescription('The number of the port on the circuit pack on which the BRI facility targeted for the loopback operation is provisioned.')
briLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briLpbkOpCmd.setStatus('current')
if mibBuilder.loadTexts: briLpbkOpCmd.setDescription('Used to perform a loopback operation on a BRI facility as follows: - oprFacilityLpbk: operates a BRI facility loopback - oprFacilityLpbk: operates a BRI terminal loopback - rlsLpbk: releases a previously invoked loopback When read, this object returns noOp.')
class DataCommsPingCmd(TextualConvention, Integer32):
    description = "The DataCommsPingCmd textual convention is the value of the dataCommsPingCmd object which is used to perform a ping operation over the NE's OSC. The operation is initiated when a set request is performed on the dataCommsPingCmd object with a value corresponding to the ping action, as explained below. The valid values for DataCommsPingCmd that can be used in a set operation are: - 'ping', used to trigger the ping operation over the OSC A value of 'pingInProgress' is returned when the dataCommsPingCmd object is read in a get operation if the ping command entered has not yet completed, otherwise 'noOp' is returned. In order for the set request on a DataCommsPingCmd object to complete successfully, the dataCommsPingCmd object, along with the dataCommdPingAddress and optionally the dataCommsPingNumAttemps objects must be set in the same set request for a given row of the table. The purpose of these objects is: - dataCommsPingAddress: indicates the IP Address which is the target of the ping operation - dataCommsPingNumAttempts: indicates how many ping attempts are to be made in the ping operation Once the dataCommsPingCmd operation is completed by way of the set operation on the dataCommsPingCmd and associated objects, the result of the operation is checked by performing a get operation on the dataCommsPingNumSuccesses object. When the ping operation completes, the value of this object will be set to the number of the attempted ping trials that resulted in a successful ping."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noOp", 1), ("ping", 2), ("pingInProgress", 3))

dataCommsPingTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1), )
if mibBuilder.loadTexts: dataCommsPingTable.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingTable.setDescription('This table contains one row for every provisioned circuit pack on the NE from which an IP ping request can be sent. This includes all SCP and OSC type packs.')
dataCommsPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "dataCommsPingCpTypeIdx"), (0, "BTI-7000-MIB", "dataCommsPingShelfIdx"), (0, "BTI-7000-MIB", "dataCommsPingSlotIdx"))
if mibBuilder.loadTexts: dataCommsPingEntry.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingEntry.setDescription('The conceptual row object of the data comms ping table.')
dataCommsPingCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 1), CpType())
if mibBuilder.loadTexts: dataCommsPingCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingCpTypeIdx.setDescription('This object is used to indicate the type of circuit pack from which the ping operation is to be conducted using the dataCommsPingCmd object.')
dataCommsPingShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: dataCommsPingShelfIdx.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingShelfIdx.setDescription('This object is used to indicate the shelf number containing the circuit pack from which the ping operation is to be conducted using the dataCommsPingCmd object.')
dataCommsPingSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: dataCommsPingSlotIdx.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingSlotIdx.setDescription('This object is used to indicate the slot number containing the circuit pack from which the ping operation is to be conducted using the dataCommsPingCmd object.')
dataCommsPingCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 4), DataCommsPingCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingCmd.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingCmd.setDescription('This object is used to trigger a ping operation from an OSC or SCP circuit pack. The description of DataCommsPingCmd textual convention explains the usage of this object to perform the ping operation.')
dataCommsPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingAddress.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingAddress.setDescription('This object is used to indicate the IP Address which is the target of the ping operation to be conducted using the dataCommsPingCmd object.')
dataCommsPingNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingNumAttempts.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingNumAttempts.setDescription('This object is used to indicate how many ping attempts are to be made in the ping operation to be conducted using the dataCommsPingCmd object. The default is 3.')
dataCommsPingNumSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCommsPingNumSuccesses.setStatus('current')
if mibBuilder.loadTexts: dataCommsPingNumSuccesses.setDescription('This object is used to indicate how many ping trials attempted in the ping operation resulted in a successful ping completion.')
cpSynchronizationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1), )
if mibBuilder.loadTexts: cpSynchronizationTable.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationTable.setDescription('This table contains one row for every provisioned circuit pack that supports SONET synchronization configuration.')
cpSynchronizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpSynchronizationTypeIdx"), (0, "BTI-7000-MIB", "cpSynchronizationShelfIdx"), (0, "BTI-7000-MIB", "cpSynchronizationSlotIdx"))
if mibBuilder.loadTexts: cpSynchronizationEntry.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationEntry.setDescription('The conceptual row object of the circuit pack synchronization table.')
cpSynchronizationTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 1), CpType())
if mibBuilder.loadTexts: cpSynchronizationTypeIdx.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationTypeIdx.setDescription('The specific type of circuit pack provisioned.')
cpSynchronizationShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpSynchronizationShelfIdx.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationShelfIdx.setDescription('The number of the shelf on which the circuit pack is provisioned.')
cpSynchronizationSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpSynchronizationSlotIdx.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSlotIdx.setDescription('The number of the slot in which the circuit pack is provisioned.')
cpSynchronizationTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationTimingMode.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationTimingMode.setDescription('The timing mode used for SONET synchronization on the pack.')
cpSynchronizationPrimRefSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationPrimRefSrcPortNum.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationPrimRefSrcPortNum.setDescription('The port number of the SONET facility that serves as the primary timing reference source. When the value is 0, the primary reference is not configured.')
cpSynchronizationPrimRefProtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 6), ProtectionStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationPrimRefProtStatus.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationPrimRefProtStatus.setDescription('The protection status of the primary timing reference source.')
cpSynchronizationPrimProtStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationPrimProtStatQlfr.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationPrimProtStatQlfr.setDescription('A textual list of qualifiers of the reported protection status of the primary timing reference source.')
cpSynchronizationSecRefSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationSecRefSrcPortNum.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSecRefSrcPortNum.setDescription('The port number of the SONET facility that serves as the secondary timing reference source. When the value is 0, the secondary reference is not configured.')
cpSynchronizationSecRefProtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 9), ProtectionStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationSecRefProtStatus.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSecRefProtStatus.setDescription('The protection status of the secondary timing reference source.')
cpSynchronizationSecProtStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 10), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationSecProtStatQlfr.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSecProtStatQlfr.setDescription('A textual list of qualifiers of the reported protection status of the secondary timing reference source.')
cpSynchronizationPrimRefBasicSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationPrimRefBasicSSM.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationPrimRefBasicSSM.setDescription('Used to enable basic Synchronization Status Messaging (SSM) functionality on the primary timing reference source.')
cpSynchronizationSecRefBasicSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationSecRefBasicSSM.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSecRefBasicSSM.setDescription('Used to enable basic Synchronization Status Messaging (SSM) functionality on the primary timing reference source.')
cpSynchronizationSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 13), SyncSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpSynchronizationSwEvtType.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSwEvtType.setDescription('Indicates the type of timing reference switching event that has occurred on the circuit pack.')
networkNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1), )
if mibBuilder.loadTexts: networkNeighborTable.setStatus('current')
if mibBuilder.loadTexts: networkNeighborTable.setDescription('This table is used to store information on the network neighbors of the local network element. Each row contains information on a specific network neighbor.')
networkNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "networkNeighborIdx"))
if mibBuilder.loadTexts: networkNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: networkNeighborEntry.setDescription('The conceptual row object of the network neighbor table.')
networkNeighborIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: networkNeighborIdx.setStatus('current')
if mibBuilder.loadTexts: networkNeighborIdx.setDescription('A textual identifier of the network neighbor.')
networkNeighborIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkNeighborIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkNeighborIPAddr.setDescription('The primary IP Address of the network neighbor.')
networkNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: networkNeighborRowStatus.setDescription('Used to control the addition and deletion of entries in the network neighbor table.')
ospfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2), )
if mibBuilder.loadTexts: ospfGeneralTable.setStatus('current')
if mibBuilder.loadTexts: ospfGeneralTable.setDescription('This table contains all of general OSPF parameters for the network element. The group can be created and deleted but only one entry can exist in the table.')
ospfGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfIdx"))
if mibBuilder.loadTexts: ospfGeneralGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ospfGeneralGroupEntry.setDescription('The list entry for the OSPF General Group parameters.')
ospfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1))
if mibBuilder.loadTexts: ospfIdx.setStatus('current')
if mibBuilder.loadTexts: ospfIdx.setDescription('An index used to identify the OSPF instance in order to alow for creation and deletion to allow compatibility with TL1 and CLI interfaces. Note the value is always 1.')
ospfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfRouterId.setDescription("A 32-bit integer uniquely identifying the router. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses. This object is persistent.")
ospfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfAdminStat.setStatus('current')
if mibBuilder.loadTexts: ospfAdminStat.setDescription("The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF Process is active on at least one interface; 'disabled' disables it on all interfaces. This object is persistent.")
ospfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVersionNumber.setStatus('current')
if mibBuilder.loadTexts: ospfVersionNumber.setDescription('The current version number of the OSPF protocol is 2.')
ospfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: ospfAreaBdrRtrStatus.setDescription('A flag to note whether this router is an Area Border Router.')
ospfRouteRedist = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("static", 2), ("connected", 3), ("staticAndConnected", 4), ("defOrig", 5), ("defOrigAndStatic", 6), ("defOrigAndConnected", 7), ("all", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRouteRedist.setStatus('current')
if mibBuilder.loadTexts: ospfRouteRedist.setDescription('Indicates the extent of route redistribution. Static - static routes, Connected - routes connected to the node. DefOrig - default routes from adjacent nodes.')
ospfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfAreaId.setDescription('The area ID associated with this OSPF item. Note that although the area ID has the format of an IP Address it is not actually an IP address.')
ospfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ospfRowStatus.setDescription('Used to control the addition and deletion of the ospf General Group parameters.')
ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3), )
if mibBuilder.loadTexts: ospfIfTable.setStatus('current')
if mibBuilder.loadTexts: ospfIfTable.setDescription('The OSPF Interface Table describes the interfaces from the viewpoint of OSPF.')
ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfIfSwitchId"), (0, "BTI-7000-MIB", "ospfIfShelfIdx"), (0, "BTI-7000-MIB", "ospfIfSlotIdx"), (0, "BTI-7000-MIB", "ospfIfType"), (0, "BTI-7000-MIB", "ospfIfIdx"), (0, "BTI-7000-MIB", "ospfIfSubIdx"))
if mibBuilder.loadTexts: ospfIfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIfEntry.setDescription('The OSPF interface entry describes one interface from the viewpoint of OSPF. Information in this table is persistent and when this object is written the entity is saved to non-volatile storage.')
ospfIfSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSwitchId.setStatus('current')
if mibBuilder.loadTexts: ospfIfSwitchId.setDescription('The number of the switch id on which the OSPF interface exists. Set to zero if the switchId a switch Id is not applicable for identification of the OSPF interface.')
ospfIfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfShelfIdx.setStatus('current')
if mibBuilder.loadTexts: ospfIfShelfIdx.setDescription('The number of the shelf on which the OSPF interface exists.')
ospfIfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSlotIdx.setStatus('current')
if mibBuilder.loadTexts: ospfIfSlotIdx.setDescription('The number of the slot within the shelf corresponding to the OSPF interface.')
ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 4), PvxPortType().clone('unknown')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfType.setStatus('current')
if mibBuilder.loadTexts: ospfIfType.setDescription('The type of the interface corresponding to the OSPF interface. Set to zero if the ospfIfType is not applicable for identification of the OSPF interface.')
ospfIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfIdx.setStatus('current')
if mibBuilder.loadTexts: ospfIfIdx.setDescription('The number of the interface within the slot corresponding to the OSPF interface.')
ospfIfSubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSubIdx.setStatus('current')
if mibBuilder.loadTexts: ospfIfSubIdx.setDescription('The number of the sub-interface that the OSFP Interface corresponds to. Set to zero if the ospfIfSubIdx is not applicable for identification of the OSPF interface. ')
ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 7), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfAdminStat.setStatus('current')
if mibBuilder.loadTexts: ospfIfAdminStat.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: ospfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligible to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: ospfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface. Note that the minimal value SHOULD be 1 second.')
ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: ospfIfRetransInterval.setDescription('The number of seconds between link state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and Link State request packets. Note that minimal value SHOULD be 1 second.')
ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: ospfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for all routers attached to a common network.')
ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: ospfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before its neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
ospfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfMetricValue.setStatus('current')
if mibBuilder.loadTexts: ospfIfMetricValue.setDescription("A metric used to identify the 'cost' associated with using this interface.")
ospfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfIfStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction, and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
ospfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4), )
if mibBuilder.loadTexts: ospfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbTable.setDescription("The OSPF Process's link state database (LSDB). The LSDB contains the link state advertisements from throughout the areas that the device is attached to.")
ospfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfLsdbAreaId"), (0, "BTI-7000-MIB", "ospfLsdbType"), (0, "BTI-7000-MIB", "ospfLsdbLsid"), (0, "BTI-7000-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbEntry.setDescription('A single link state advertisement.')
ospfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbAreaId.setDescription('The 32-bit identifier of the area from which the LSA was received.')
ospfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbType.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format')
ospfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP address; it identifies the piece of the routing domain that is being described by the advertisement.')
ospfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
ospfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate Link State Advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.")
ospfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbAge.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
ospfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
ospfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5), )
if mibBuilder.loadTexts: ospfNbrTable.setStatus('current')
if mibBuilder.loadTexts: ospfNbrTable.setDescription('A table describing all non-virtual neighbors in the locality of the OSPF router.')
ospfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfNbrIpAddr"), (0, "BTI-7000-MIB", "ospfNbrAddressLessIndex"))
if mibBuilder.loadTexts: ospfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNbrEntry.setDescription('The information regarding a single neighbor. Information in this table is persistent and when this object is written the entity SHOULD save the change to non-volatile storage.')
ospfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfNbrIpAddr.setDescription("The IP address this neighbor is using in its IP source address. Note that, on addressless links, this will not be 0.0.0.0 but the address of another of the neighbor's interfaces.")
ospfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrAddressLessIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNbrAddressLessIndex.setDescription('On an interface having an IP address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.')
ospfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: ospfNbrRtrId.setDescription('A 32-bit integer (represented as a type IpAddress) uniquely identifying the neighboring router in the Autonomous System.')
ospfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrOptions.setStatus('current')
if mibBuilder.loadTexts: ospfNbrOptions.setDescription("A bit mask corresponding to the neighbor's options field. Bit 0, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 1, if set, indicates that the associated area accepts and operates on external information; if zero, it is a stub area. Bit 2, if set, indicates that the system is capable of routing IP multicast datagrams, that is that it implements the multicast extensions to OSPF. Bit 3, if set, indicates that the associated area is an NSSA. These areas are capable of carrying type-7 external advertisements, which are translated into type-5 external advertisements at NSSA borders.")
ospfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 5), DesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: ospfNbrPriority.setDescription('The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.')
ospfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrState.setDescription('The state of the relationship with this neighbor.')
pvxL2IntfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3), )
if mibBuilder.loadTexts: pvxL2IntfTable.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfTable.setDescription('This table contains one row for every provisioned Ethernet facility on the system. Each row contains a list of attributes that pertain to the facility.')
pvxL2IntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"))
if mibBuilder.loadTexts: pvxL2IntfEntry.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfEntry.setDescription('The conceptual row object of the ethIntfTable table.')
pvxL2IntfSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfSwitchIdx.setDescription('The number of the switch id of the provisioned ethernet facility.')
pvxL2IntfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfShelfIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfShelfIdx.setDescription('The number of the shelf id of the provisioned ethernet facility.')
pvxL2IntfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfSlotIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfSlotIdx.setDescription('The number of the instance id of the provisioned ethernet facility.')
pvxL2IntfPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 4), PvxPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfPortTypeIdx.setDescription('The number of the instance id of the provisioned ethernet facility.')
pvxL2IntfPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfPortIdx.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfPortIdx.setDescription('The number of the port on the circuit pack on which the ethernet facility is provisioned.')
pvxL2IntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfAdminStatus.setDescription('The administrative status of the Ethernet facility.')
pvxL2IntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfOperStatus.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfOperStatus.setDescription('The reported operational status of the Ethernet facility.')
pvxL2IntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pnp", 1), ("cep", 2), ("cnpPortbased", 3), ("cbp", 4))).clone('pnp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfType.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfType.setDescription('This object is used to configure the type of a interface.')
pvxL2IntfSTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni8100", 1), ("nni88a8", 2), ("nni9100", 3))).clone('uni8100')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfSTpid.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfSTpid.setDescription('The Ethernet type (TPID) of the S-TAG')
pvxL2IntfPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPvid.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfPvid.setDescription('The PVID (port-based VLAN ID) for the port')
pvxL2IntfDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfDefaultPriority.setDescription('This object sets the default priority of the interface.')
pvxL2IntfAllowedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("vlanTagged", 2), ("priorityTagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfAllowedFrames.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfAllowedFrames.setDescription('TODO: Does this feild need to support OR of the options?')
pvxL2IntfIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfIngressFiltering.setStatus('deprecated')
if mibBuilder.loadTexts: pvxL2IntfIngressFiltering.setDescription('When this is true(1) the device will discard incoming frames for VLANs which do not include this Port in its Member set. When false(2), the port will accept all incoming frames. This control does not affect VLAN independent BPDU frames, such as GVRP and STP. It does affect VLAN dependent BPDU frames, such as GMRP.')
pvxL2IntfCtrlFrmProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileId.setStatus('deprecated')
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileId.setDescription('')
pvxL2IntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfMACAddr.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfMACAddr.setDescription('The MAC address of the interface.')
pvxL2IntfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfRateLimit.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfRateLimit.setDescription('This represents the interface rate limit in kilobits/s.')
pvxL2IntfCoSProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCoSProfileId.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfCoSProfileId.setDescription('This represents the Class of service profile for the interface.')
pvxL2IntfIsUNI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("neither", 1), ("uni", 2), ("nni", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfIsUNI.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfIsUNI.setDescription('The Switch port type. The default value set by the switch is neither.')
pvxL2IntfSchedProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfSchedProfName.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfSchedProfName.setDescription('The scheduler profile used by the interface.')
pvxL2IntfPriTCMapProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPriTCMapProfName.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfPriTCMapProfName.setDescription('The priority to traffic class map profile used by the interface.')
pvxL2IntfPCPCodingProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPCPCodingProfName.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfPCPCodingProfName.setDescription('The scheduler profile used by the interface.')
pvxL2IntfDscpPHBProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDscpPHBProfName.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfDscpPHBProfName.setDescription('The internal priority setting for DSCP profile used by the interface.')
pvxL2IntfCtrlFrmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileName.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileName.setDescription('The L2 control frame profile used by the interface.')
pvxL2IntfUseDei = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfUseDei.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfUseDei.setDescription('Used by PNP port. By default, it is set to false by the switch.')
pvxL2IntfIngressBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfIngressBandwidthProfile.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfIngressBandwidthProfile.setDescription('The ingress policy map profile used by the interface.')
pvxL2IntfEgressBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfEgressBandwidthProfile.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfEgressBandwidthProfile.setDescription('The egress policy map profile used by the interface.')
pvxL2IntfTrustIncomingPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingPCP.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingPCP.setDescription('Used by all port type. By default, it is set to true by the switch.')
pvxL2IntfTrustIncomingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingDscp.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingDscp.setDescription('Used by all port type. By default, it is set to true by the switch.')
pvxL2IntfBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfBcastLimit.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfBcastLimit.setDescription('Broadcast rate limit as percentage of the line rate for the port with default value of 100 (no storm control).')
pvxL2IntfMcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfMcastLimit.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfMcastLimit.setDescription('Multicast rate limit as percentage of the line rate for the port with default value of 100 (no storm control).')
pvxL2IntfDlfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDlfLimit.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfDlfLimit.setDescription('Unicast DLF rate limit as percentage of the line rate for the port with default value of 100 (no storm control).')
pvxL2IntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: pvxL2IntfRowStatus.setDescription('Used to control the addition and deletion of entries in the PVX L2 Interface table.')
setErrorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1))
setErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setErrorCode.setStatus('current')
if mibBuilder.loadTexts: setErrorCode.setDescription('The BTI-specific error code for the set request failure.')
setErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setErrorDesc.setStatus('current')
if mibBuilder.loadTexts: setErrorDesc.setDescription('A textual description string that explains the reason for the failed set request.')
trapSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeqNum.setStatus('current')
if mibBuilder.loadTexts: trapSeqNum.setDescription('A integer value indicating the place of the trap notification message within the continual sequence of all notification messages issued by the system.')
evtDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtDateAndTime.setStatus('current')
if mibBuilder.loadTexts: evtDateAndTime.setDescription('The date and time at which an event notification was issued by the system.')
tcaIntervalType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 2), PMIntervalType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaIntervalType.setStatus('current')
if mibBuilder.loadTexts: tcaIntervalType.setDescription('The type of PM bin according to interval length during which a performance monitoring threshold crossing occurred.')
tcaDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaDateAndTime.setStatus('current')
if mibBuilder.loadTexts: tcaDateAndTime.setDescription('The date and time of the performance monitoring interval for which a performance monitoring threshold crossing alert is generated.')
tcaMontype = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 4), PMMontype()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaMontype.setStatus('current')
if mibBuilder.loadTexts: tcaMontype.setDescription('Identify the performance monitoring monitored type for which a threshold crossing alert is generated.')
tcaValue = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaValue.setStatus('current')
if mibBuilder.loadTexts: tcaValue.setDescription('The measured value of the monitored type for which a performance monitoring threshold crossing alert is generated.')
tcaThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaThreshold.setStatus('current')
if mibBuilder.loadTexts: tcaThreshold.setDescription('The threshold for the monitored type that was exceeded resulting in the generation of a performance monnitoring threshold crossing alert.')
evtDescription = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtDescription.setStatus('current')
if mibBuilder.loadTexts: evtDescription.setDescription('A textual decription of the event.')
evtObjectType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 8), NotifObjectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtObjectType.setStatus('current')
if mibBuilder.loadTexts: evtObjectType.setDescription('Identifies the type of managed object against which the event notification is raised.')
evtCodeType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 9), NotifCodeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtCodeType.setStatus('current')
if mibBuilder.loadTexts: evtCodeType.setDescription('This object value uniquely identifies the type of event that has been generated.')
dbChangeNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1))
dbChangeDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: dbChangeDateAndTime.setDescription('The date and time at which a database change notification was issued by the system.')
dbChangeSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeSeqNum.setStatus('current')
if mibBuilder.loadTexts: dbChangeSeqNum.setDescription('A integer value indicating the place of a database change notification message within the continual sequence of all database messages issued by the system.')
dbChangeOID = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeOID.setStatus('current')
if mibBuilder.loadTexts: dbChangeOID.setDescription('The OID of the object instance whose value has been changed in the database.')
condNotifCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: condNotifCtrlTable.setStatus('current')
if mibBuilder.loadTexts: condNotifCtrlTable.setDescription('This table contains one row for every condition notification associated with a raise.')
condNotifCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "condNotifObjId"))
if mibBuilder.loadTexts: condNotifCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: condNotifCtrlEntry.setDescription('The conceptual row object of the condition notification control table.')
condNotifObjId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: condNotifObjId.setStatus('current')
if mibBuilder.loadTexts: condNotifObjId.setDescription('The specific condition notification to set the severity for. The value must correspond to the raise condition not the clear.')
condNotifSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 2), CondSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: condNotifSeverity.setStatus('current')
if mibBuilder.loadTexts: condNotifSeverity.setDescription('The severity associated with the condition notification. - Only certain values are permitted for the set: default, critial, major, minor, notAlarmed. - Only certain values are visible for the get: critial, major, minor, major-minor, notAlarmed')
condNotifDefaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 3), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: condNotifDefaultSeverity.setStatus('current')
if mibBuilder.loadTexts: condNotifDefaultSeverity.setDescription('The default severity associated with the condition notification. Only certain of the CondSeverity values are visible: critial, major, minor, major-minor, notAlarmed')
envCondAttrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: envCondAttrTable.setStatus('current')
if mibBuilder.loadTexts: envCondAttrTable.setDescription('This table is used to manage the configuration of environmental alarm inputs. It contains one row for each environmental condition input on the NE.')
envCondAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "envCondAttrHKIIdx"))
if mibBuilder.loadTexts: envCondAttrEntry.setStatus('current')
if mibBuilder.loadTexts: envCondAttrEntry.setDescription('The conceptual row object of the environmental condition attribute table.')
envCondAttrHKIIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: envCondAttrHKIIdx.setStatus('current')
if mibBuilder.loadTexts: envCondAttrHKIIdx.setDescription('The number of the housekeeping input which drives the activation of the environmental condition configured by this entry of the table.')
envCondAttrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 2), CondSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrSeverity.setStatus('current')
if mibBuilder.loadTexts: envCondAttrSeverity.setDescription('The severity reported for the configured environmental condition when it is raised. The valid values are: - minor - major - critical - notAlarmed')
envCondAttrCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 3), EnvNotifCodeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrCodeType.setStatus('current')
if mibBuilder.loadTexts: envCondAttrCodeType.setDescription('The code for the specific environmental condition that is reported when the housekeeping input indicates that the condition is active.')
envCondAttrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrDescription.setStatus('current')
if mibBuilder.loadTexts: envCondAttrDescription.setDescription('The textual decription of the environmental condition that is reported when the condition is raised.')
envCondAttrInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrInputType.setStatus('current')
if mibBuilder.loadTexts: envCondAttrInputType.setDescription('Specifies how the housekeeping input which drives the reporting of the environmental condition is interpreted.')
eventNotifState = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eventsEnabled", 1), ("eventsDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventNotifState.setStatus('current')
if mibBuilder.loadTexts: eventNotifState.setDescription('Allows all events to be either disabled or enabled.')
shelfInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 1)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "shelfInvType"), ("BTI-7000-MIB", "shelfInvShortName"), ("BTI-7000-MIB", "shelfInvName"), ("BTI-7000-MIB", "shelfInvChassisPEC"), ("BTI-7000-MIB", "shelfInvChassisCLEI"), ("BTI-7000-MIB", "shelfInvRev"), ("BTI-7000-MIB", "shelfInvConfig"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfInvPluginEvt.setStatus('current')
if mibBuilder.loadTexts: shelfInvPluginEvt.setDescription('A shelf has been detected through the shelf interconnect.')
shelfInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 2)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfInvUnpluginEvt.setStatus('current')
if mibBuilder.loadTexts: shelfInvUnpluginEvt.setDescription('A previously detected shelf is no longer detected through the shelf interconnect.')
slotInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 1)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvPackShortName"), ("BTI-7000-MIB", "slotInvPackName"), ("BTI-7000-MIB", "slotInvPackPEC"), ("BTI-7000-MIB", "slotInvPackCLEI"), ("BTI-7000-MIB", "slotInvPackSerialNum"), ("BTI-7000-MIB", "slotInvPackRev"), ("BTI-7000-MIB", "slotInvPackMfgDate"), ("BTI-7000-MIB", "slotInvPackMfgLoc"), ("BTI-7000-MIB", "slotInvPackTestDate"), ("BTI-7000-MIB", "slotInvPackTestLoc"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvPluginEvt.setStatus('current')
if mibBuilder.loadTexts: slotInvPluginEvt.setDescription('A circuit pack has been inserted into the identified slot.')
slotInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 2)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvUnpluginEvt.setStatus('current')
if mibBuilder.loadTexts: slotInvUnpluginEvt.setDescription('A circuit pack has been removed from the identified slot.')
slotInvUpgradeStageResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 3)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvUpgradeStage"), ("BTI-7000-MIB", "slotInvUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeStageResultEvt.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeStageResultEvt.setDescription('The software upgrade process on the circuit pack in the identified slot has completed a stage.')
pluggableInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 1)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "pluggableInvType"), ("BTI-7000-MIB", "pluggableInvPEC"), ("BTI-7000-MIB", "pluggableInvCLEI"), ("BTI-7000-MIB", "pluggableInvVendorName"), ("BTI-7000-MIB", "pluggableInvVendorOUI"), ("BTI-7000-MIB", "pluggableInvVendorPartNum"), ("BTI-7000-MIB", "pluggableInvVendorRev"), ("BTI-7000-MIB", "pluggableInvVendorSerialNum"), ("BTI-7000-MIB", "pluggableInvMfgDate"), ("BTI-7000-MIB", "pluggableInvConnectorType"), ("BTI-7000-MIB", "pluggableInvMinBitRate"), ("BTI-7000-MIB", "pluggableInvMaxBitRate"), ("BTI-7000-MIB", "pluggableInvNomBitRate"), ("BTI-7000-MIB", "pluggableInvEncoding"), ("BTI-7000-MIB", "pluggableInvWavelength"), ("BTI-7000-MIB", "pluggableInvReach"), ("BTI-7000-MIB", "pluggableInvTxFaultImpl"), ("BTI-7000-MIB", "pluggableInvLOSImpl"), ("BTI-7000-MIB", "pluggableInvDDiagImpl"), ("BTI-7000-MIB", "pluggableInvTxDisableImpl"), ("BTI-7000-MIB", "pluggableInvMedia"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pluggableInvPluginEvt.setStatus('current')
if mibBuilder.loadTexts: pluggableInvPluginEvt.setDescription('A pluggable transceiver has been inserted into the identified port.')
pluggableInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 2)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pluggableInvUnpluginEvt.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUnpluginEvt.setDescription('A pluggable transceiver has been removed from the identified port.')
shelfStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5, 0, 1)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "shelfOperStatus"), ("BTI-7000-MIB", "shelfOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: shelfStatusChangeEvt.setDescription("Notification of a change in the shelf's operational status or operational status qualifier.")
cpStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 1)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpOperStatus"), ("BTI-7000-MIB", "cpOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: cpStatusChangeEvt.setDescription("Notification of a change in the circuit pack's operational status or operational status qualifier.")
cpCheckUpgradeResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 2)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpCheckUpgradeResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpCheckUpgradeResultEvt.setDescription('Indicates the result of the check upgrade step of the system-wide software upgrade process.')
cpUpgradeTransferResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 3)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpUpgradeTransferResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeTransferResultEvt.setDescription('Indicates the result of the software download step of the system-wide software upgrade process.')
cpUpgradeStageResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 4)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeStage"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpUpgradeStageResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeStageResultEvt.setDescription('The software upgrade process on the active circuit pack in the identified slot has completed a stage.')
cpDbBackupResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 5)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreAddress"), ("BTI-7000-MIB", "dbBackupAndRestorePath"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbBackupResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpDbBackupResultEvt.setDescription('Indicates the result of an NE database backup operation.')
cpDbRestoreTransferResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 6)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreAddress"), ("BTI-7000-MIB", "dbBackupAndRestorePath"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbRestoreTransferResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpDbRestoreTransferResultEvt.setDescription('Indicates the result of the database download step of the NE database restore process.')
cpDbInvokeResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 7)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbInvokeResultEvt.setStatus('current')
if mibBuilder.loadTexts: cpDbInvokeResultEvt.setDescription('Indicates the result of the invoke step of the NE database restore process.')
cpDbApplyResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 8)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbApplyResultEvt.setStatus('obsolete')
if mibBuilder.loadTexts: cpDbApplyResultEvt.setDescription('Indicates the result of the accept step of the NE database restore process.')
oaStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7, 0, 1)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOperStatus"), ("BTI-7000-MIB", "oaOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: oaStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: oaStatusChangeEvt.setDescription("Notification of a change in the optical amplifier's operational status or operational status qualifier.")
xcvrStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 1)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOperStatus"), ("BTI-7000-MIB", "xcvrOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: xcvrStatusChangeEvt.setDescription("Notification of a change in the transceiver's operational status or operational status qualifier.")
xcvrProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 2)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrProtSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: xcvrProtSwitchEvt.setDescription('A protection switch has occured on the optical transceiver facility.')
xcvrTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 3)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrTcaEvt.setStatus('current')
if mibBuilder.loadTexts: xcvrTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on an optical transceiver port.')
amdStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12, 0, 1)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOperStatus"), ("BTI-7000-MIB", "amdOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: amdStatusChangeEvt.setStatus('obsolete')
if mibBuilder.loadTexts: amdStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of an active multiplexer-demultiplexer port.')
oscStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 1)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "oscOperStatus"), ("BTI-7000-MIB", "oscOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: oscStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: oscStatusChangeEvt.setDescription("Notification of a change in the optical supervisory channels's operational status or operational status qualifier.")
netMgmtStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 2)).setObjects(("BTI-7000-MIB", "netMgmtIdx"), ("BTI-7000-MIB", "netMgmtOperStatus"), ("BTI-7000-MIB", "netMgmtOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: netMgmtStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: netMgmtStatusChangeEvt.setDescription("Notification of a change in the network management interface's operational status or operational status qualifier.")
ocnStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 1)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOperStatus"), ("BTI-7000-MIB", "ocnOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: ocnStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a SONET OC-N facility port.')
ocnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 2)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnTcaEvt.setStatus('current')
if mibBuilder.loadTexts: ocnTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a SONET OC-N facility.')
ocnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 3)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnProtSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: ocnProtSwitchEvt.setDescription('A protection switch has occured on the identified OC-N facility.')
stsnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 2)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "stsnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stsnProtSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: stsnProtSwitchEvt.setDescription('A protection switch has occured on the identified STS-N channel.')
stsnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 3)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stsnTcaEvt.setStatus('current')
if mibBuilder.loadTexts: stsnTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a SONET STS-N facility.')
stmnStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 1)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOperStatus"), ("BTI-7000-MIB", "stmnOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: stmnStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a SDH STM-N facility port.')
stmnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 2)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnTcaEvt.setStatus('current')
if mibBuilder.loadTexts: stmnTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a SDH STM-N facility.')
stmnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 3)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnProtSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: stmnProtSwitchEvt.setDescription('A protection switch has occured on the identified STM-N facility.')
vcnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 2)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "vcnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: vcnProtSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: vcnProtSwitchEvt.setDescription('A protection switch has occured on the identified VC-N channel.')
vcnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 3)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: vcnTcaEvt.setStatus('current')
if mibBuilder.loadTexts: vcnTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a SDH VC-N facility.')
geStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 1)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOperStatus"), ("BTI-7000-MIB", "geOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: geStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: geStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a Gigabit Ethernet facility port.')
geTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 2)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: geTcaEvt.setStatus('current')
if mibBuilder.loadTexts: geTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a Gigabit Ethernet facility.')
fcStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 1)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOperStatus"), ("BTI-7000-MIB", "fcOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: fcStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: fcStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a Fiber Channel facility port.')
fcTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 2)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: fcTcaEvt.setStatus('current')
if mibBuilder.loadTexts: fcTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a Fiber Channel facility.')
ethL1IFStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 1)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "ethIntfOperStatus"), ("BTI-7000-MIB", "ethIntfOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ethL1IFStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: ethL1IFStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a L1 Ethernet facility port.')
ethL1IFTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 2)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ethL1IFTcaEvt.setStatus('current')
if mibBuilder.loadTexts: ethL1IFTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on an Ethernet Layer 1 interface facility.')
pvxL2IFTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22, 0, 2)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxL2IFTcaEvt.setStatus('current')
if mibBuilder.loadTexts: pvxL2IFTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on a PVX Pack Ethernet Layer 2 interface facility.')
briStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24, 0, 1)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOperStatus"), ("BTI-7000-MIB", "briOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: briStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: briStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier of a BRI facility port.')
cpSynchronizationSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25, 0, 1)).setObjects(("BTI-7000-MIB", "cpSynchronizationTypeIdx"), ("BTI-7000-MIB", "cpSynchronizationShelfIdx"), ("BTI-7000-MIB", "cpSynchronizationSlotIdx"), ("BTI-7000-MIB", "cpSynchronizationSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpSynchronizationSwitchEvt.setStatus('current')
if mibBuilder.loadTexts: cpSynchronizationSwitchEvt.setDescription('A synchronization timing reference switch has occurred on the identified circuit pack.')
shelfInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 1)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvMissingCond.setStatus('obsolete')
if mibBuilder.loadTexts: shelfInvMissingCond.setDescription('An expansion shelf is missing. To clear this condition, attach an appropriate expansion shelf to the MSCP in the main shelf of the system.')
shelfInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 2)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvMissingClear.setStatus('obsolete')
if mibBuilder.loadTexts: shelfInvMissingClear.setDescription('A previously active shelf missing condition has cleared.')
shelfInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 3)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvUnknownCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvUnknownCond.setDescription('A shelf is unknown to the system. This condition occurs because the shelf is unknown to the system (for example, the the FRU data cannot be read on the expansion shelf interface (ESI) circuit pack in the expansion shelf). To clear this condition, connect an appropriate shelf to its associated MSCP.')
shelfInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 4)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvUnknownClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvUnknownClear.setDescription('A previously active shelf unknown condition has cleared.')
shelfInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 5)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvCommCond.setStatus('obsolete')
if mibBuilder.loadTexts: shelfInvCommCond.setDescription('This condition indicates that a connected expansion shelf has a communications failure between the multiport system control processor (MSCP) and the expansion shelf interface (ESI) circuit packs.')
shelfInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 6)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvCommClear.setStatus('obsolete')
if mibBuilder.loadTexts: shelfInvCommClear.setDescription('A previously active shelf communications condition has cleared.')
shelfInvPwrFeedAFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 7)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedAFailCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrFeedAFailCond.setDescription('There is a power feed A failure. The system can continue to function on power feed B. Plan to diagnose and correct the problem as soon as possible.')
shelfInvPwrFeedAFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 8)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedAFailClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrFeedAFailClear.setDescription('A previously active Power feed A condition has cleared.')
shelfInvPwrFeedBFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 9)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedBFailCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrFeedBFailCond.setDescription('There is a power feed B failure. The system can continue to function on power feed A. Plan to diagnose and correct the problem as soon as possible.')
shelfInvPwrFeedBFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 10)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedBFailClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrFeedBFailClear.setDescription('A previously active Power feed B condition has cleared.')
shelfInvPwrBrownoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 11)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrBrownoutCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrBrownoutCond.setDescription('There is a system power brownout. As voltage levels decrease, the amplifiers fail, followed by the MSCP, and then the cooling unit fails.')
shelfInvPwrBrownoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 12)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrBrownoutClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvPwrBrownoutClear.setDescription('A previously active power brownout condition on the shelf has cleared.')
shelfInvSysCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 13)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvSysCommCond.setStatus('deprecated')
if mibBuilder.loadTexts: shelfInvSysCommCond.setDescription('This condition indicates that backplane communication between the multiport system control processor (MSCP) and the affected circuit pack is interrupted. Normal OAM&P operations to the circuit pack, like provisioning and performance monitoring, are affected while this alarm is active.')
shelfInvSysCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 14)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvSysCommClear.setStatus('deprecated')
if mibBuilder.loadTexts: shelfInvSysCommClear.setDescription('A previously active shelf missing condition has cleared.')
shelfInvExpansionShelfIdMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 15)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "shelfInvExpectedNEName"), ("BTI-7000-MIB", "shelfInvExpectedIPAddress"), ("BTI-7000-MIB", "shelfInvExpectedShelfNum"), ("BTI-7000-MIB", "shelfInvExpectedMSISerialNum"), ("BTI-7000-MIB", "shelfInvDiscoveredNEName"), ("BTI-7000-MIB", "shelfInvDiscoveredIPAddress"), ("BTI-7000-MIB", "shelfInvDiscoveredShelfNum"), ("BTI-7000-MIB", "shelfInvDiscoveredMSISerialNum"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchCond.setDescription('Indicates that the identifying information of the discovered expansion shelf does not match that of the expected shelf.')
shelfInvExpansionShelfIdMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 16)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchClear.setDescription('A previously active expansion shelf identifier mismatch condition has cleared.')
shelfInvExpansionShelfCommLOSCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 17)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSCond.setDescription('This alarm indicates that a connected expansion shelf has a loss of signal between the multiport system control processor (MSCP) and the expansion shelf interface (ESI) circuit packs. The most likely causes are a fiber cut or a fault with the Molex connector and cable assembly.')
shelfInvExpansionShelfCommLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 18)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSClear.setDescription('A previously active expansion shelf communications LOS condition has cleared.')
shelfInvExpansionShelfCommLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 19)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownCond.setDescription('This alarm indicates that a connected expansion shelf has a communications failure between the multiport system control processor (MSCP) and the expansion shelf interface (ESI) circuit packs.')
shelfInvExpansionShelfCommLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 20)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownClear.setDescription('A previously active expansion shelf communications link down condition has cleared.')
shelfInvExpansionShelfCommDeviceUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 21)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedCond.setDescription('This alarm indicates that an unknown device is connected to the expansion shelf port of the multiport system control processor (MSCP) on the main shelf.')
shelfInvExpansionShelfCommDeviceUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 22)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedClear.setDescription('A previously active expansion shelf communications device unsupported condition has cleared.')
shelfInvTempMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 23)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvTempMaxCond.setStatus('current')
if mibBuilder.loadTexts: shelfInvTempMaxCond.setDescription('Indicates that the temperature on the identified shelf has risen above the maximum threshold.')
shelfInvTempMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 24)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvTempMaxClear.setStatus('current')
if mibBuilder.loadTexts: shelfInvTempMaxClear.setDescription('A previously active shelf inventory maximum temperature condition has cleared.')
slotInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 1)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvMissingCond.setStatus('current')
if mibBuilder.loadTexts: slotInvMissingCond.setDescription('A Circuit pack is missing. The alarm is triggered for one of the following reasons: the provisioned circuit pack is missing from its associated slot a filler circuit pack is missing from an unprovisioned single-width or doublewidth slot a single-width circuit pack is provisioned in a double-width slot To clear this alarm, insert an appropriate single-width or double-width circuit pack or filler circuit pack in the associated single-width or double-width slot.')
slotInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 2)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvMissingClear.setStatus('current')
if mibBuilder.loadTexts: slotInvMissingClear.setDescription('A previously active circuit pack or replaceable unit missing condition has cleared.')
slotInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 3)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnknownCond.setStatus('current')
if mibBuilder.loadTexts: slotInvUnknownCond.setDescription('Circuit pack type is unknown to the system. This condition occurs for the following two reasons: the circuit pack in the associated slot is unknown to the system (for example, the circuit pack is not supported by the software release running on the system) two single-width circuit packs are in a double-width slot To clear this condition, insert an appropriate circuit pack in the associated slot.')
slotInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 4)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnknownClear.setStatus('current')
if mibBuilder.loadTexts: slotInvUnknownClear.setDescription('A previously active circuit pack or replaceable unit unknown condition has cleared.')
slotInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 5)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCommCond.setStatus('current')
if mibBuilder.loadTexts: slotInvCommCond.setDescription('This alarm indicates that backplane communication between the multiport system control processor (MSCP) and the circuit pack is interrupted. Normal OAM&P operations to the circuit pack, like provisioning and performance monitoring, are affected while this alarm is active. If an amplifier or wavelength conversion circuit pack has been provisioned already, it continues to operate normally.')
slotInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 6)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCommClear.setStatus('current')
if mibBuilder.loadTexts: slotInvCommClear.setDescription('A previously active circuit pack communications condition has cleared.')
slotInvFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 7)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvFailCond.setStatus('current')
if mibBuilder.loadTexts: slotInvFailCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 8)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvFailClear.setStatus('current')
if mibBuilder.loadTexts: slotInvFailClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvUpgradeInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 9)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeInProgressCond.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeInProgressCond.setDescription('A software upgrade process has begun on the circuit pack in the identified slot.')
slotInvUpgradeInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 10)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeInProgressClear.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeInProgressClear.setDescription('There is an auto upgrade in progress. This alarm is typically seen when inserting a circuit pack other than a multiport system control processor (MSCP).')
slotInvUpgradeFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 11)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeFailureCond.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeFailureCond.setDescription('There is a circuit pack upgrade failure.')
slotInvUpgradeFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 12)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeFailureClear.setStatus('current')
if mibBuilder.loadTexts: slotInvUpgradeFailureClear.setDescription('A previously active circuit pack software upgrade failure condition has cleared.')
slotInvVersionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 13)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvSWVersion"), ("BTI-7000-MIB", "neSWVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvVersionMismatchCond.setStatus('current')
if mibBuilder.loadTexts: slotInvVersionMismatchCond.setDescription('The circuit pack in the indicated slot is running a software version which is inconsistent with the committed software version of the system.')
slotInvVersionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 14)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvVersionMismatchClear.setStatus('current')
if mibBuilder.loadTexts: slotInvVersionMismatchClear.setDescription('A previously active circuit pack software version mismatch condition has cleared.')
slotInvCoolingUnitFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 15)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitFailCond.setStatus('current')
if mibBuilder.loadTexts: slotInvCoolingUnitFailCond.setDescription('A cooling unit failure has occurred. One or more fans have failed in the cooling unit.')
slotInvCoolingUnitFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 16)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitFailClear.setStatus('current')
if mibBuilder.loadTexts: slotInvCoolingUnitFailClear.setDescription('A previously active shelf cooling unit failure condition has cleared.')
slotInvDspCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 17)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvDspCommCond.setStatus('current')
if mibBuilder.loadTexts: slotInvDspCommCond.setDescription('This alarm indicates that communication has failed either between the DSP and the processor handling backplane communications on an optical amplifier circuit pack, or between the variable optical equalizer (VOE) and the processor handling backplane communications on an active mux/demux circuit pack Normal OAM&P operations to the circuit pack, like provisioning and performance monitoring, is affected when this alarm is active.')
slotInvDspCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 18)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvDspCommClear.setStatus('current')
if mibBuilder.loadTexts: slotInvDspCommClear.setDescription('A previously active DSP control communications condition has been cleared.')
slotInvUnsupportedPackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 19)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnsupportedPackCond.setStatus('current')
if mibBuilder.loadTexts: slotInvUnsupportedPackCond.setDescription('A replaceable unit inventory item is unsupported. In this case, a multiport system control processor (MSCP) circuit pack is plugged into any slot of the expansion shelf. However, MSCPs are only supported in slot five of the main shelf.')
slotInvUnsupportedPackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 20)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnsupportedPackClear.setStatus('current')
if mibBuilder.loadTexts: slotInvUnsupportedPackClear.setDescription('A previously active unsupported pack condition has cleared.')
slotInvCoolingUnitMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 21)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchCond.setStatus('current')
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchCond.setDescription('The shelf is plugged in with a wring cooling unit.')
slotInvCoolingUnitMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 22)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchClear.setStatus('current')
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchClear.setDescription('A previously active cooling unit mismatch condition has cleared.')
slotInvPwrFeedAFuseFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 23)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailCond.setStatus('current')
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvPwrFeedAFuseFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 24)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailClear.setStatus('current')
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvPwrFeedBFuseFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 25)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailCond.setStatus('current')
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvPwrFeedBFuseFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 26)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailClear.setStatus('current')
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvPowerFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 27)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPowerFailCond.setStatus('current')
if mibBuilder.loadTexts: slotInvPowerFailCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvPowerFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 28)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPowerFailClear.setStatus('current')
if mibBuilder.loadTexts: slotInvPowerFailClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvHiTempAutoShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 29)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownCond.setStatus('current')
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvHiTempAutoShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 30)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownClear.setStatus('current')
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvHTThreshExceededCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 31)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTThreshExceededCond.setStatus('current')
if mibBuilder.loadTexts: slotInvHTThreshExceededCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvHTThreshExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 32)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTThreshExceededClear.setStatus('current')
if mibBuilder.loadTexts: slotInvHTThreshExceededClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvHTSThreshExceededCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 33)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTSThreshExceededCond.setStatus('current')
if mibBuilder.loadTexts: slotInvHTSThreshExceededCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvHTSThreshExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 34)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTSThreshExceededClear.setStatus('current')
if mibBuilder.loadTexts: slotInvHTSThreshExceededClear.setDescription('A previously active circuit pack fail condition has cleared.')
slotInvHTASUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 35)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTASUnsupportedCond.setStatus('current')
if mibBuilder.loadTexts: slotInvHTASUnsupportedCond.setDescription('There is a circuit pack failure. The alarm is critical when a circuit pack is provisioned and that it has fails in its associated slot.')
slotInvHTASUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 36)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTASUnsupportedClear.setStatus('current')
if mibBuilder.loadTexts: slotInvHTASUnsupportedClear.setDescription('A previously active circuit pack fail condition has cleared.')
shelfMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 1)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMismatchCond.setStatus('current')
if mibBuilder.loadTexts: shelfMismatchCond.setDescription('The type of the physically detected shelf does not match the provisioned shelf type.')
shelfMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 2)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMismatchClear.setStatus('current')
if mibBuilder.loadTexts: shelfMismatchClear.setDescription('A previously active shelf type mismatch condition has cleared.')
shelfMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 3)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMissingCond.setStatus('current')
if mibBuilder.loadTexts: shelfMissingCond.setDescription('An expansion shelf is missing. To clear this alarm, attach an appropriate expansion shelf to the MSCP in the main shelf of the system.')
shelfMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 4)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMissingClear.setStatus('current')
if mibBuilder.loadTexts: shelfMissingClear.setDescription('A previously active expansion shelf missing condition has cleared.')
shelfConfigurationMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 5)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "shelfProvConfig"), ("BTI-7000-MIB", "shelfDiscConfig"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfConfigurationMismatchCond.setStatus('deprecated')
if mibBuilder.loadTexts: shelfConfigurationMismatchCond.setDescription('The configuration type of the physically detected expansion shelf does not match the provisioned expansion shelf configuration type.')
shelfConfigurationMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 6)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfConfigurationMismatchClear.setStatus('deprecated')
if mibBuilder.loadTexts: shelfConfigurationMismatchClear.setDescription('A previously active expansion shelf configuration mismatch condition has cleared.')
cpMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 1)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpMismatchCond.setStatus('current')
if mibBuilder.loadTexts: cpMismatchCond.setDescription('There is a circuit pack mismatch. There is a mismatch between the equipment provisioned for the slot and the physical circuit pack that is inserted in the slot.')
cpMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 2)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpMismatchClear.setStatus('current')
if mibBuilder.loadTexts: cpMismatchClear.setDescription('A previously active circuit pack type mismatch condition has cleared.')
cpConnectorMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 3)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpConnectorMismatchCond.setStatus('current')
if mibBuilder.loadTexts: cpConnectorMismatchCond.setDescription('A connector mismatch alarm occurs on a circuit pack that is provisioned with a connector type that is different to the one actually inserted.')
cpConnectorMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 4)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpConnectorMismatchClear.setStatus('current')
if mibBuilder.loadTexts: cpConnectorMismatchClear.setDescription('A previously active optical fiber connector type mismatch condition has cleared.')
cpInvalidProvCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 5)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpInvalidProvCond.setStatus('current')
if mibBuilder.loadTexts: cpInvalidProvCond.setDescription('The type of circuit pack that is provisioned in a slot that is invalid for the shelf slot configuration.')
cpInvalidProvClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 6)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpInvalidProvClear.setStatus('current')
if mibBuilder.loadTexts: cpInvalidProvClear.setDescription('A previously active invalid circuit pack provisioning condition has cleared.')
cpSoftwareBankAFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 7)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankAFailCond.setStatus('current')
if mibBuilder.loadTexts: cpSoftwareBankAFailCond.setDescription('There is a hardware failure in software bank A storage device. During this alarm, software backups, upgrades and restores cannot occur. When the MSCP is rebooting, the LEDs on the MSI and the MSCP are lit.')
cpSoftwareBankAFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 8)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankAFailClear.setStatus('current')
if mibBuilder.loadTexts: cpSoftwareBankAFailClear.setDescription('A previously active software Bank A failure condition has cleared.')
cpSoftwareBankBFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 9)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankBFailCond.setStatus('current')
if mibBuilder.loadTexts: cpSoftwareBankBFailCond.setDescription('There is a hardware failure in software bank B storage device. During this alarm, software backups, upgrades, and restores cannot occur. When the MSCP is rebooting, the LEDs on the MSI and the MSCP are lit.')
cpSoftwareBankBFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 10)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankBFailClear.setStatus('current')
if mibBuilder.loadTexts: cpSoftwareBankBFailClear.setDescription('A previously active software Bank B failure condition has cleared.')
cpUpgradeInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 11)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeInProgressCond.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeInProgressCond.setDescription('Indicates that a system-wide software upgrade process is in progress on the NE.')
cpUpgradeInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 12)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeInProgressClear.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeInProgressClear.setDescription('A previously active system-wide upgrade in progress condition has cleared.')
cpUpgradeFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 15)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeFailCond.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeFailCond.setDescription('Indicates that the system-wide upgrade procedure has failed to complete successfully.')
cpUpgradeFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 16)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeFailClear.setStatus('current')
if mibBuilder.loadTexts: cpUpgradeFailClear.setDescription('A previously active circuit pack upgrade failure condition has cleared.')
cpDbRestoreInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 17)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRestoreInProgressCond.setStatus('current')
if mibBuilder.loadTexts: cpDbRestoreInProgressCond.setDescription('There is a database restore in progress on the system.')
cpDbRestoreInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 18)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRestoreInProgressClear.setStatus('current')
if mibBuilder.loadTexts: cpDbRestoreInProgressClear.setDescription('A previously active NE database restore condition has cleared.')
cpDbRecoveryFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 19)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRecoveryFailCond.setStatus('current')
if mibBuilder.loadTexts: cpDbRecoveryFailCond.setDescription('There is a database recovery failure. If a new MSCP circuit pack fails to acquire the database from the system, a database recovery failure alarm can be triggered after replacing the MSCP.')
cpDbRecoveryFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 20)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRecoveryFailClear.setStatus('current')
if mibBuilder.loadTexts: cpDbRecoveryFailClear.setDescription('A previously active NE database recovery failure condition has cleared.')
cpFanFeedFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 21)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpFanFeedFailCond.setStatus('current')
if mibBuilder.loadTexts: cpFanFeedFailCond.setDescription('A cooling unit feed failure has occurred on a BTI 7030 shelf. There are two cooling unit power feeds from the SCP to the cooling unit. If one power feeds fails, a minor alarm is raised. If both power feed fails, a major alarm is raised.')
cpFanFeedFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 22)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpFanFeedFailClear.setStatus('current')
if mibBuilder.loadTexts: cpFanFeedFailClear.setDescription('A previously active fan power feed failure condition has cleared.')
cpStorageCardFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 23)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpStorageCardFailCond.setStatus('current')
if mibBuilder.loadTexts: cpStorageCardFailCond.setDescription('Indicates that the database storage card has failed.')
cpStorageCardFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 24)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpStorageCardFailClear.setStatus('current')
if mibBuilder.loadTexts: cpStorageCardFailClear.setDescription('A previously active database storage card failure condition has cleared.')
cpDbDeletionInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 25)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbDeletionInProgressCond.setStatus('current')
if mibBuilder.loadTexts: cpDbDeletionInProgressCond.setDescription('There is a database deletion in progress on the system.')
cpDbDeletionInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 26)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbDeletionInProgressClear.setStatus('current')
if mibBuilder.loadTexts: cpDbDeletionInProgressClear.setDescription('A previously active NE database deletion condition has cleared.')
cpDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 27)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDegradeCond.setStatus('current')
if mibBuilder.loadTexts: cpDegradeCond.setDescription('Indicates that a failure or degradation has been detected in one or more physical components on the identified circuit pack, which may lead to a failure of the pack to provide service normally.')
cpDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 28)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDegradeClear.setStatus('current')
if mibBuilder.loadTexts: cpDegradeClear.setDescription('A previously active Circuit Pack Degrade condition has cleared.')
oaCaseTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 1)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaCaseTemp"), ("BTI-7000-MIB", "oaCaseTempMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempCond.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempCond.setDescription('A case temperature high threshold is exceeded. A warning is raised to indicate that the amplifier is nearing its shutdown threshold. The circuit pack in the associated slot has exceeded its case temperature high threshold. If the case temperature continues to rise to its shutdown threshold, the circuit pack automatically shuts down.')
oaCaseTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 2)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempClear.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempClear.setDescription('A previously active optical amplifier case temperature condition has cleared.')
oaCaseTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 3)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaCaseTemp"), ("BTI-7000-MIB", "oaCaseTempMaxShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempShutdownCond.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempShutdownCond.setDescription('A case temperature high threshold shutdown has occurred. The optical amplifier is shutdown and taken out-of-service by the system. The pump lasers are turned off and there is no amplification.')
oaCaseTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 4)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempShutdownClear.setStatus('current')
if mibBuilder.loadTexts: oaCaseTempShutdownClear.setDescription('A previously active optical amplifier case temperature shutdown condition has cleared.')
oaLaserMinTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 5)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaLaser1Temp"), ("BTI-7000-MIB", "oaLaser2Temp"), ("BTI-7000-MIB", "oaLaserTempMinShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMinTempShutdownCond.setStatus('current')
if mibBuilder.loadTexts: oaLaserMinTempShutdownCond.setDescription('A pump laser temperature low threshold shutdown has occurred. The optical amplifier is shutdown and taken out-of-service by the system.')
oaLaserMinTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 6)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMinTempShutdownClear.setStatus('current')
if mibBuilder.loadTexts: oaLaserMinTempShutdownClear.setDescription('A previously active optical amplifier minimum temperature shutdown condition has cleared.')
oaLaserMaxTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 7)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaLaser1Temp"), ("BTI-7000-MIB", "oaLaser2Temp"), ("BTI-7000-MIB", "oaLaserTempMaxShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMaxTempShutdownCond.setStatus('current')
if mibBuilder.loadTexts: oaLaserMaxTempShutdownCond.setDescription('A pump laser temperature high threshold shutdown has occurred. The optical amplifier is shutdown and taken out-of-service by the system.')
oaLaserMaxTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 8)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMaxTempShutdownClear.setStatus('current')
if mibBuilder.loadTexts: oaLaserMaxTempShutdownClear.setDescription('A previously active optical amplifier maximum temperature shutdown condition has cleared.')
oaOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 9)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrReceived"), ("BTI-7000-MIB", "oaOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinCond.setDescription('The optical power received (OPR) low threshold is exceeded. The input signal to an optical amplifier has reached the optical power received low threshold. If the input signal drops to below the input sensitivity level, the circuit pack will degrade in performance.')
oaOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 10)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinClear.setDescription('A previously active optical amplifier minimum power received condition has cleared.')
oaOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 11)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrReceived"), ("BTI-7000-MIB", "oaOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxCond.setDescription('The optical power received (OPR) high threshold is crossed. The input signal to an optical amplifier has reached the optical power received high threshold.')
oaOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 12)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxClear.setDescription('A previously active optical amplifier maximum power received condition has cleared.')
oaSSIOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 13)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaSSIOpticalPwrReceived"), ("BTI-7000-MIB", "oaSSIOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxCond.setDescription('A second stage input optical power received (OPR) high threshold crossing has occurred.')
oaSSIOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 14)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxClear.setDescription('A previously active optical amplifier second stage input maximum power received condition has cleared.')
oaBackReflectionSafetyCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 17)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaBackReflectionSafetyTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyCond.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionSafetyCond.setDescription('The Optical Back Reflection - High Threshold Safety Override alarm indicates someone has activated the optical power received optical back reflection high threshold safety override (OPR-OBR-HTSO) command to override the automatic power reduction (APR) feature of the amplifier lasers. This command overrides the APR feature of the amplifier for 20 to 600 seconds. When the timer expires, the alarm clears.')
oaBackReflectionSafetyClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 18)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyClear.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionSafetyClear.setDescription('A previously active optical amplifier back reflection safety condition has cleared.')
oaOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 19)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrTransmitted"), ("BTI-7000-MIB", "oaOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinCond.setDescription('The optical power transmitted (OPT) low threshold is crossed.')
oaOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 20)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinClear.setDescription('A previously active optical amplifier minimum transmitted power condition has cleared.')
oaOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 21)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrTransmitted"), ("BTI-7000-MIB", "oaOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxCond.setDescription('The optical power transmitted (OPT) high threshold has been exceeded on the amplifier.')
oaOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 22)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxClear.setDescription('A previously active optical amplifier maximum transmitted power condition has cleared.')
oaMSInsertionLossCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 23)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaMSInsertionLoss"), ("BTI-7000-MIB", "oaMSInsertionLossMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaMSInsertionLossCond.setStatus('current')
if mibBuilder.loadTexts: oaMSInsertionLossCond.setDescription('A mid-stage insertion loss high threshold is exceeded for a mid-stage amplifier.')
oaMSInsertionLossClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 24)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaMSInsertionLossClear.setStatus('current')
if mibBuilder.loadTexts: oaMSInsertionLossClear.setDescription('A previously active optical amplifier midstage insertion loss condition has cleared.')
oaAmplifierConditioningCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 25)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaAmplifierConditioningCond.setStatus('current')
if mibBuilder.loadTexts: oaAmplifierConditioningCond.setDescription('There is an amplifier conditioning problem. When an amplifier is initially plugged in, thermo-electric coolers (TEC) work to control the pump laser temperature to between 16 degrees and 34 degrees Celsius. Until the pump laser temperature is within range, the amplifier conditioning problem is present. If the amplifier conditioning problem persists for more than 30 minutes, the condition is cleared and either a laser temperature low threshold or a laser temperature high threshold alarm is raised.')
oaAmplifierConditioningClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 26)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaAmplifierConditioningClear.setStatus('current')
if mibBuilder.loadTexts: oaAmplifierConditioningClear.setDescription('A previously active optical amplifier conditioning condition has cleared.')
oaDspCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 27)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaDspCommCond.setStatus('current')
if mibBuilder.loadTexts: oaDspCommCond.setDescription('This alarm indicates that communication has failed between the DSP and the processor handling backplane communications on an optical amplifier circuit pack. Normal OAM&P operations to the circuit pack, like provisioning and performance monitoring, is affected when this alarm is active.')
oaDspCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 28)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaDspCommClear.setStatus('current')
if mibBuilder.loadTexts: oaDspCommClear.setDescription('A previously active optical amplifier DSP communications condition has cleared.')
oaBackReflectionSafetyOverrideCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 41)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideCond.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideCond.setDescription('The Optical Back Reflection - High Threshold Safety Override alarm indicates someone has activated the high threshold safety override command to override the automatic power reduction (APR) feature of the amplifier lasers. This command overrides the APR feature of the amplifier for 20 to 600 seconds. When the timer expires, the alarm clears.')
oaBackReflectionSafetyOverrideClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 42)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideClear.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideClear.setDescription('A previously active back reflection safety override condition has been cleared.')
oaBackReflectionHighThresholdCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 43)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionHighThresholdCond.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionHighThresholdCond.setDescription('The Optical Amplifier Back Reflection High Threshold alarm indicates that the measured optical back reflection power has exceeded the high threshold. This serves as a warning that optical back reflection is operating at an elevated level, and that continued increases in the optical back reflection level may result in an automatic laser safety shutdown.')
oaBackReflectionHighThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 44)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionHighThresholdClear.setStatus('current')
if mibBuilder.loadTexts: oaBackReflectionHighThresholdClear.setDescription('A previously active back reflection high threshold condition has been cleared.')
oscLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 1)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: oscLossOfSignalCond.setDescription('This condition indicates that an SFP transceiver has experienced an input power drop that is below the manufacturer s preset threshold.')
oscLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 2)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: oscLossOfSignalClear.setDescription('A previously active optical supervisory channel loss of signal condition has cleared.')
oscSfpMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 3)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscSfpMissingCond.setStatus('current')
if mibBuilder.loadTexts: oscSfpMissingCond.setDescription('An SFP transceiver is missing from its associated port in an MSCP circuit pack. To clear this alarm, insert an appropriate transceiver in the associated port of the MSCP circuit pack.')
oscSfpMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 4)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscSfpMissingClear.setStatus('current')
if mibBuilder.loadTexts: oscSfpMissingClear.setDescription('A previously active optical supervisory channel SFP missing condition has cleared.')
pluggableInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 1)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnknownCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUnknownCond.setDescription('The SFP or XFP transceiver type is unknown to the system. This alarm occurs because the transceiver is not supported by the current software. To clear this alarm, insert a readable SFP or XFP transceiver in the associated port of the circuit pack.')
pluggableInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 2)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnknownClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUnknownClear.setDescription('A previously active Pluggable Inventory Unknown condition has cleared.')
pluggableInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 3)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvCommCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvCommCond.setDescription('This alarm indicates that communication between a circuit pack and an inserted small form factor pluggable (SFP) transceiver is not reliable.')
pluggableInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 4)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvCommClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvCommClear.setDescription('A previously active Pluggable Inventory communications condition has cleared.')
pluggableInvFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 5)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvFailCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvFailCond.setDescription('There is an SFP or XFP transceiver failure.')
pluggableInvFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 6)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvFailClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvFailClear.setDescription('A previously active Pluggable Inventory fail condition has cleared.')
pluggableInvMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 7)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMismatchCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMismatchCond.setDescription('There is an SFP mismatch condition active. There is a mismatch between the SFP transceiver provisioned for a port of a circuit pack and the physical SFP transceiver that is inserted in the port.')
pluggableInvMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 8)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMismatchClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMismatchClear.setDescription('A previously active Pluggable Inventory mismatch condition has cleared.')
pluggableInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 9)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMissingCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMissingCond.setDescription('There is an SFP or XFP missing from the indicated port.')
pluggableInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 10)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMissingClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvMissingClear.setDescription('A previously active Pluggable Inventory missing condition has cleared.')
pluggableInvUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 11)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnsupportedCond.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUnsupportedCond.setDescription('The electrical SFP transceiver type is NOT supported in the given port. This alarm occurs when an electrical SFP is plugged into a port that does not support GE. To clear this alarm, remove the electrical SFP.')
pluggableInvUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 12)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnsupportedClear.setStatus('current')
if mibBuilder.loadTexts: pluggableInvUnsupportedClear.setDescription('A previously active Pluggable unsupported condition has cleared.')
xcvrMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 1)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMissingCond.setStatus('current')
if mibBuilder.loadTexts: xcvrMissingCond.setDescription('An SFP or XFP transceiver is missing from its associated port in a circuit pack.')
xcvrMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 2)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMissingClear.setStatus('current')
if mibBuilder.loadTexts: xcvrMissingClear.setDescription('A previously active transceiver port missing condition has cleared.')
xcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 3)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: xcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for a port of a circuit pack and the physical SFP or XFP transceiver that is inserted in the port. The provisioned SFP or XFP transceiver must match the transceiver in the port.')
xcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 4)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: xcvrMismatchClear.setDescription('A previously active transceiver port type mismatch condition has cleared.')
xcvrRFICond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 5)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRFICond.setStatus('current')
if mibBuilder.loadTexts: xcvrRFICond.setDescription('Remote Fault Indication: The source port to which the specified destination transceiver port is cross-connected has a service-affecting fault active against it.')
xcvrRFIClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 6)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRFIClear.setStatus('current')
if mibBuilder.loadTexts: xcvrRFIClear.setDescription('A previously active transceiver RFI condition has cleared.')
xcvrLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 7)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfSignalCond.setDescription('This alarm indicates that an SFP transceiver has experienced an input power drop that is below the preset minimum threshold.')
xcvrLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 8)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfSignalClear.setDescription('A previously active transceiver port Loss Of Signal condition has cleared.')
xcvrLossOfLockCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 9)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfLockCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfLockCond.setDescription('This alarm indicates that a transceiver port is unable to lock on the incoming bit stream. This is a result of either: the provisioned protocol does not match the incoming signal, or the incoming signal is excessively degraded.')
xcvrLossOfLockClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 10)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfLockClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfLockClear.setDescription('A previously active transceiver port Loss Of Lock condition has cleared.')
xcvrOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 11)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrReceived"), ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinCond.setDescription('The optical power received (OPR) low threshold is not met. The input signal to a transceiver has reached the optical power received low threshold. If the input signal drops to below the input sensitivity level, the transceiver degrades in performance.')
xcvrOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 12)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinClear.setDescription('A previously active transceiver port minimum power received condition has cleared.')
xcvrOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 13)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrReceived"), ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxCond.setDescription('The optical power received (OPR) high threshold is exceeded. The input signal to a transceiver has reached the optical power received high threshold.')
xcvrOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 14)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxClear.setDescription('A previously active transceiver port maximum power received condition has cleared.')
xcvrOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 15)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinCond.setDescription('The optical power transmitted (OPT) is below the low threshold for the transceiver.')
xcvrOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 16)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinClear.setDescription('A previously active transceiver port minimum power transmitted condition has cleared.')
xcvrOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 17)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxCond.setDescription('The optical power transmitted (OPT) high threshold for a transceiver is exceeded.')
xcvrOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 18)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxClear.setDescription('A previously active transceiver port maximum power transmitted condition has cleared.')
xcvrLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 19)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfFrameCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfFrameCond.setDescription('A transceiver reports a SONET or SDH loss of frame for a transceiver that is provisioned to receive a SONET or SDH protocol.')
xcvrLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 20)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfFrameClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfFrameClear.setDescription('A previously active loss of frame condition has cleared.')
xcvrLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 21)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSyncCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfSyncCond.setDescription('Indicates that a loss of synchronization condition has been detected by the transceiver port on the incoming gigabit ethernet or 10GELAN protocol.')
xcvrLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 22)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSyncClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLossOfSyncClear.setDescription('A previously active loss of synchronization condition has cleared.')
xcvrLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 27)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLoopbackCond.setDescription('Indicates that the transceiver has been provisioned to enter loopback mode.')
xcvrLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 28)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLoopbackClear.setDescription('A previously active loopback condition on the transceiver has been cleared.')
xcvrForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 29)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionCond.setStatus('current')
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionCond.setDescription('The active transceiver of a protected transceiver pair has been forced to switch to the Protection transceiver.')
xcvrForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 30)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionClear.setStatus('current')
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionClear.setDescription('A previously active Forced Switch To Protection condition has cleared.')
xcvrForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 31)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingCond.setStatus('current')
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingCond.setDescription('The active transceiver of a protected transceiver pair has been forced to switch to the Working transceiver.')
xcvrForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 32)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingClear.setStatus('current')
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingClear.setDescription('A previously active Forced Switch To Working condition has cleared.')
xcvrLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 33)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutProtectionCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLockoutProtectionCond.setDescription('The Protection transceiver of a protected transceiver pair has been locked out.')
xcvrLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 34)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutProtectionClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLockoutProtectionClear.setDescription('A previously active Lockout Protection condition has cleared.')
xcvrLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 35)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutWorkingCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLockoutWorkingCond.setDescription('The Working transceiver of a protected transceiver pair has been locked out.')
xcvrLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 36)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutWorkingClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLockoutWorkingClear.setDescription('A previously active Lockout Working condition has cleared.')
xcvrTempMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 37)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTempMaxCond.setStatus('current')
if mibBuilder.loadTexts: xcvrTempMaxCond.setDescription('Indicates that the temperature of the physical transceiver has risen above the maximum threshold.')
xcvrTempMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 38)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTempMaxClear.setStatus('current')
if mibBuilder.loadTexts: xcvrTempMaxClear.setDescription('A previously active Temperature Exceeded Maximum condition has cleared.')
xcvrWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 39)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableCond.setStatus('current')
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableCond.setDescription('Indicates that the transceiver is not currently able to tune to the set wavelength.')
xcvrWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 40)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableClear.setStatus('current')
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableClear.setDescription('A previously active Wavelength Not Achievable condition has cleared.')
xcvrAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 41)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalCond.setDescription('An Alarm Indication Signal indication is active on the transceiver port.')
xcvrAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 42)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalClear.setDescription('A previously active Alarm Indication Signal condition has cleared.')
xcvrTraceMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 43)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrReceivedTraceLabel"), ("BTI-7000-MIB", "xcvrExpectedTraceLabel"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTraceMismatchCond.setStatus('current')
if mibBuilder.loadTexts: xcvrTraceMismatchCond.setDescription('This condition indicates that the received trace label on the transciever port does not match the expected trace label.')
xcvrTraceMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 44)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTraceMismatchClear.setStatus('current')
if mibBuilder.loadTexts: xcvrTraceMismatchClear.setDescription('A previously active Trace Mismatch condition has cleared.')
xcvrRemoteFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 45)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRemoteFaultCond.setStatus('current')
if mibBuilder.loadTexts: xcvrRemoteFaultCond.setDescription('A remote fault indication is active on the traceiver port.')
xcvrRemoteFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 46)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRemoteFaultClear.setStatus('current')
if mibBuilder.loadTexts: xcvrRemoteFaultClear.setDescription('A previously raised remote fault indication has cleared.')
xcvrSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 47)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: xcvrSignalDegradeCond.setDescription('The Signal Degrade BER threshold has been crossed on the transiever port.')
xcvrSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 48)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: xcvrSignalDegradeClear.setDescription('A previously active Signal Degrade condition has cleared.')
xcvrOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 49)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchCond.setDescription('An OTN payload mismatch is active on the transceiver port facility.')
xcvrOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 50)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchClear.setDescription('A previously active OTN payload mismatch condition on the transceiver port facility has cleared.')
xcvrLFCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 51)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLFCond.setStatus('current')
if mibBuilder.loadTexts: xcvrLFCond.setDescription('Local Failure: Raised when a port detects and incoming local failure indication is received.')
xcvrLFClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 52)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLFClear.setStatus('current')
if mibBuilder.loadTexts: xcvrLFClear.setDescription('A previously active transceiver LF condition has cleared.')
xcvrOpenConnectionIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 53)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorCond.setStatus('current')
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorCond.setDescription('An Open Connection Indicator is active on the transceiver port.')
xcvrOpenConnectionIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 54)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorClear.setStatus('current')
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorClear.setDescription('A previously active Open Connection Indicator condition has cleared.')
xcvrReceivedLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 55)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrReceivedLockoutCond.setStatus('current')
if mibBuilder.loadTexts: xcvrReceivedLockoutCond.setDescription('A Received Lockout indication is active on the transceiver port.')
xcvrReceivedLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 56)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrReceivedLockoutClear.setStatus('current')
if mibBuilder.loadTexts: xcvrReceivedLockoutClear.setDescription('A previously active Received Lockout condition has cleared.')
xcvrBackwardDefectIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 57)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorCond.setStatus('current')
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorCond.setDescription('A Backward Defect Indicator is active on the transceiver port.')
xcvrBackwardDefectIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 58)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorClear.setStatus('current')
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorClear.setDescription('A previously active Backward Defect Indicator condition has cleared.')
amdLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 1)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdLossOfSignalCond.setStatus('obsolete')
if mibBuilder.loadTexts: amdLossOfSignalCond.setDescription('This condition indicates that an active mux/demux that has experienced an input power drop that is below the preset threshold. This can be against either a channel or the composite line port.')
amdLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 2)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdLossOfSignalClear.setStatus('obsolete')
if mibBuilder.loadTexts: amdLossOfSignalClear.setDescription('A previously raised active multiplexer-demultiplexer loss of signal condition has cleared.')
amdOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 3)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrReceived"), ("BTI-7000-MIB", "amdOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinCond.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the active multiplexer-demultiplexer facility has fallen below the minimum threshold.')
amdOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 4)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinClear.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinClear.setDescription('A previously raised active multiplexer-demultiplexer minimum power received condition has cleared.')
amdOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 5)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrReceived"), ("BTI-7000-MIB", "amdOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxCond.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the active multiplexer-demultiplexer facility has risen above the maximum threshold.')
amdOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 6)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxClear.setStatus('obsolete')
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxClear.setDescription('A previously raised active multiplexer-demultiplexer maximum power received condition has cleared.')
amdTPLNACond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 7)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrTransmitted"), ("BTI-7000-MIB", "amdOpticalPwrTransmittedTarget"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTPLNACond.setStatus('obsolete')
if mibBuilder.loadTexts: amdTPLNACond.setDescription('A channel target power level not achieved (TPLNA) condition is triggered when the output power for a channel of a 32-Channel DWDM Active Mux/Demux (D32AMD) module is above or below the target power transmitted level for that channel.')
amdTPLNAClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 8)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTPLNAClear.setStatus('obsolete')
if mibBuilder.loadTexts: amdTPLNAClear.setDescription('A previously raised active target power level not achieved condition has been cleared.')
amdTALNACond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 9)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalAttentuation"), ("BTI-7000-MIB", "amdOpticalAttenuationTarget"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTALNACond.setStatus('obsolete')
if mibBuilder.loadTexts: amdTALNACond.setDescription('The target attenuation level not achieved (TALNA) condition is triggered when the attenuation for a 32-Channel DWDM Active Mux/Demux (D32AMD) is outside the preset attenuation levels for a composite line.')
amdTALNAClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 10)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTALNAClear.setStatus('obsolete')
if mibBuilder.loadTexts: amdTALNAClear.setDescription('A previously raised active target attenuation level not achieved condition has been cleared.')
ocnLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 1)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfSignalCond.setDescription('This notification indicates that there is no input signal detected on the OC-N port.')
ocnLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 2)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfSignalClear.setDescription('This notification indicates that a previously active OC-N Loss of Signal condition has been cleared.')
ocnXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 3)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnXcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: ocnXcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for the OC-N facility port and the physical transceiver that is inserted in the port. The SFP or XFP transceiver in the port must match the attributes provisioned for the OC-N facility.')
ocnXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 4)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnXcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: ocnXcvrMismatchClear.setDescription('A previously active OC-N Mismatch condition has cleared.')
ocnOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 5)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrReceived"), ("BTI-7000-MIB", "ocnOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the OC-N facility has fallen below the minimum threshold.')
ocnOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 6)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinClear.setDescription('A previously active OC-N minimum power recieved condition has cleared.')
ocnOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 7)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrReceived"), ("BTI-7000-MIB", "ocnOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the OC-N facility has risen above the maximum threshold.')
ocnOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 8)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxClear.setDescription('A previously active OC-N maximum power recieved condition has cleared.')
ocnOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 9)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"), ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinCond.setDescription('Indicates that the output power for the OC-N facility has fallen below the minimum threshold.')
ocnOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 10)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinClear.setDescription('A previously active OC-N minimum power transmitted condition has cleared.')
ocnOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 11)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"), ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxCond.setDescription('Indicates that the output power for the OC-N facility has risen above the maximum threshold.')
ocnOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 12)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxClear.setDescription('A previously active OC-N maximum power transmitted condition has cleared.')
ocnLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 13)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfFrameCond.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfFrameCond.setDescription('An OC-N Loss of Frame condition is active on the port.')
ocnLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 14)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfFrameClear.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfFrameClear.setDescription('A previously active OC-N Loss of Frame condition has cleared.')
ocnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 15)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnBER"), ("BTI-7000-MIB", "ocnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: ocnSignalDegradeCond.setDescription('A signal degrade condition on the OC-N facility is active. This indicates that the detected bit error rate exceeds the degrade threshold.')
ocnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 16)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: ocnSignalDegradeClear.setDescription('A previously active OC-N Signal Degrade condition has cleared.')
ocnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 17)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: ocnAlarmIndicationSignalCond.setDescription('An OC-N Line-level Alarm Indication Signal indication is active on facility.')
ocnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 18)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: ocnAlarmIndicationSignalClear.setDescription('A previously active OC-N Alarm Indication Signal condition has cleared.')
ocnLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 19)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: ocnLoopbackCond.setDescription('Indicates that the OC-N facility has been provisioned to enter loopback mode.')
ocnLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 20)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: ocnLoopbackClear.setDescription('A previously active loopback condition on the OC-N facility has been cleared.')
ocnLossOfPrimaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 21)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceCond.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceCond.setDescription('Indicates that the primary timing reference signal for the identified OC-N facility is missing or faulty and cannot be locked on.')
ocnLossOfPrimaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 22)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceClear.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceClear.setDescription('A previously active OC-N Loss of Primary Timing Reference condition has cleared.')
ocnLossOfSecondaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 23)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceCond.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceCond.setDescription('Indicates that the secondary timing reference signal for the identified OC-N facility is missing or faulty and cannot be locked on.')
ocnLossOfSecondaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 24)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceClear.setStatus('current')
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceClear.setDescription('A previously active OC-N Loss of Secondary Timing Reference condition has cleared.')
ocnOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 25)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOTNPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: ocnOTNPayloadMismatchCond.setDescription('An OTN payload mismatch is active on the facility.')
ocnOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 26)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOTNPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: ocnOTNPayloadMismatchClear.setDescription('A previously active OTN payload mismatch condition has cleared.')
ocnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 27)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionCond.setStatus('current')
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionCond.setDescription('The active line of a protected line pair has been forced to switch to the Protection line.')
ocnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 28)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionClear.setStatus('current')
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionClear.setDescription('A previously active Forced Switch To Protection condition has cleared.')
ocnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 29)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingCond.setStatus('current')
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingCond.setDescription('The active line of a protected line pair has been forced to switch to the Working line.')
ocnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 30)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingClear.setStatus('current')
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingClear.setDescription('A previously active Forced Switch To Working condition has cleared.')
ocnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 31)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutProtectionCond.setStatus('current')
if mibBuilder.loadTexts: ocnLockoutProtectionCond.setDescription('The Protection line of a protected line pair has been locked out.')
ocnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 32)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutProtectionClear.setStatus('current')
if mibBuilder.loadTexts: ocnLockoutProtectionClear.setDescription('A previously active Lockout Protection condition has cleared.')
ocnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 33)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutWorkingCond.setStatus('current')
if mibBuilder.loadTexts: ocnLockoutWorkingCond.setDescription('The Working line of a protected line pair has been locked out.')
ocnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 34)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutWorkingClear.setStatus('current')
if mibBuilder.loadTexts: ocnLockoutWorkingClear.setDescription('A previously active Lockout Working condition has cleared.')
ocnWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 35)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnWavelengthNotAchievableCond.setStatus('current')
if mibBuilder.loadTexts: ocnWavelengthNotAchievableCond.setDescription('The tunable pluggable cannot be tuned to the provisioned wavelength.')
ocnWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 36)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnWavelengthNotAchievableClear.setStatus('current')
if mibBuilder.loadTexts: ocnWavelengthNotAchievableClear.setDescription('A previously active Wavelength Not Achievable condition has cleared.')
stsnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 1)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: stsnAlarmIndicationSignalCond.setDescription('A Path-level Alarm Indication Signal indication is active on the STS-N channel.')
stsnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 2)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: stsnAlarmIndicationSignalClear.setDescription('A previously active STS-N Alarm Indication Signal condition has cleared.')
stsnLossOfPointerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 3)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLossOfPointerCond.setStatus('current')
if mibBuilder.loadTexts: stsnLossOfPointerCond.setDescription('A Loss of Pointer condition is active on the STS-N channel.')
stsnLossOfPointerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 4)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLossOfPointerClear.setStatus('current')
if mibBuilder.loadTexts: stsnLossOfPointerClear.setDescription('A previously raised STS-N Loss of Pointer condition has cleared.')
stsnUnequippedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 5)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnUnequippedCond.setStatus('current')
if mibBuilder.loadTexts: stsnUnequippedCond.setDescription('An Unequipped indication has been detected for the STS-N channel.')
stsnUnequippedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 6)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnUnequippedClear.setStatus('current')
if mibBuilder.loadTexts: stsnUnequippedClear.setDescription('A previously raised STS-N Unequipped condition has cleared.')
stsnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 7)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "stsnBER"), ("BTI-7000-MIB", "stsnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: stsnSignalDegradeCond.setDescription('A signal degrade condition on the STS-N channel is active. This indicates that the detected bit error rate exceeds the degrade threshold.')
stsnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 8)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: stsnSignalDegradeClear.setDescription('A previously raised STS-N signal degrade condition has cleared.')
stsnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 9)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionCond.setStatus('current')
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionCond.setDescription('The active STS-N channel of a protected STS-N channel pair has been forced to switch to the Protection transceiver.')
stsnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 10)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionClear.setStatus('current')
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionClear.setDescription('A previously raised STS-N Forced Switch To Protection condition has cleared.')
stsnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 11)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingCond.setStatus('current')
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingCond.setDescription('The active STS-N channel of a protected STS-N channel pair has been forced to switch to the Working transceiver.')
stsnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 12)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingClear.setStatus('current')
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingClear.setDescription('A previously raised STS-N Forced Switch To Working condition has cleared.')
stsnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 13)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutProtectionCond.setStatus('current')
if mibBuilder.loadTexts: stsnLockoutProtectionCond.setDescription('The Protection STS-N channel of a protected STS-N channel pair has been locked out.')
stsnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 14)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutProtectionClear.setStatus('current')
if mibBuilder.loadTexts: stsnLockoutProtectionClear.setDescription('A previously raised STS-N Lockout Protection condition has cleared.')
stsnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 15)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutWorkingCond.setStatus('current')
if mibBuilder.loadTexts: stsnLockoutWorkingCond.setDescription('The Working STS-N channel of a protected STS-N channel pair has been locked out.')
stsnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 16)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutWorkingClear.setStatus('current')
if mibBuilder.loadTexts: stsnLockoutWorkingClear.setDescription('A previously raised STS-N Lockout Working condition has cleared.')
stsnConcatMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 17)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnConcatMismatchCond.setStatus('current')
if mibBuilder.loadTexts: stsnConcatMismatchCond.setDescription('A connection provisioning does not match has been detected for the STS-N channel.')
stsnConcatMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 18)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnConcatMismatchClear.setStatus('current')
if mibBuilder.loadTexts: stsnConcatMismatchClear.setDescription('A previously raised STS-N Concat Mismatch condition has cleared.')
stmnLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 1)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfSignalCond.setDescription('This notification indicates that there is no input signal detected on the STM-N port.')
stmnLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 2)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfSignalClear.setDescription('This notification indicates that a previously active STM-N Loss of Signal condition has been cleared.')
stmnXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 3)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnXcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: stmnXcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for the STM-N facility port and the physical transceiver that is inserted in the port. The SFP or XFP transceiver in the port must match the attributes provisioned for the STM-N facility.')
stmnXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 4)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnXcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: stmnXcvrMismatchClear.setDescription('A previously active STM-N Mismatch condition has cleared.')
stmnOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 5)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrReceived"), ("BTI-7000-MIB", "stmnOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the STM-N facility has fallen below the minimum threshold.')
stmnOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 6)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinClear.setDescription('A previously active STM-N minimum power recieved condition has cleared.')
stmnOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 7)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrReceived"), ("BTI-7000-MIB", "stmnOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the STM-N facility has risen above the maximum threshold.')
stmnOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 8)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxClear.setDescription('A previously active STM-N maximum power recieved condition has cleared.')
stmnOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 9)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"), ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinCond.setDescription('Indicates that the output power for the STM-N facility has fallen below the minimum threshold.')
stmnOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 10)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinClear.setDescription('A previously active STM-N minimum power transmitted condition has cleared.')
stmnOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 11)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"), ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxCond.setDescription('Indicates that the output power for the STM-N facility has risen above the maximum threshold.')
stmnOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 12)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxClear.setDescription('A previously active STM-N maximum power transmitted condition has cleared.')
stmnLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 13)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfFrameCond.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfFrameCond.setDescription('An STM-N Loss of Frame condition is active on the port.')
stmnLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 14)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfFrameClear.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfFrameClear.setDescription('A previously active STM-N Loss of Frame condition has cleared.')
stmnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 15)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnBER"), ("BTI-7000-MIB", "stmnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: stmnSignalDegradeCond.setDescription('A signal degrade condition on the STM-N facility is active. This indicates that the detected bit error rate exceeds the degrade threshold.')
stmnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 16)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: stmnSignalDegradeClear.setDescription('A previously active STM-N Signal Degrade condition has cleared.')
stmnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 17)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: stmnAlarmIndicationSignalCond.setDescription('An STM-N Line-level Alarm Indication Signal indication is active on facility.')
stmnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 18)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: stmnAlarmIndicationSignalClear.setDescription('A previously active STM-N Alarm Indication Signal condition has cleared.')
stmnLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 19)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: stmnLoopbackCond.setDescription('Indicates that the STM-N facility has been provisioned to enter loopback mode.')
stmnLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 20)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: stmnLoopbackClear.setDescription('A previously active loopback condition on the STM-N facility has been cleared.')
stmnLossOfPrimaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 21)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceCond.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceCond.setDescription('Indicates that the primary timing reference signal for the identified STM-N facility is missing or faulty and cannot be locked on.')
stmnLossOfPrimaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 22)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceClear.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceClear.setDescription('A previously active STM-N Loss of Primary Timing Reference condition has cleared.')
stmnLossOfSecondaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 23)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceCond.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceCond.setDescription('Indicates that the secondary timing reference signal for the identified STM-N facility is missing or faulty and cannot be locked on.')
stmnLossOfSecondaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 24)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceClear.setStatus('current')
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceClear.setDescription('A previously active STM-N Loss of Secondary Timing Reference condition has cleared.')
stmnOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 25)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOTNPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: stmnOTNPayloadMismatchCond.setDescription('An OTN payload mismatch is active on the facility.')
stmnOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 26)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOTNPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: stmnOTNPayloadMismatchClear.setDescription('A previously active OTN payload mismatch condition has cleared.')
stmnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 27)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionCond.setStatus('current')
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionCond.setDescription('The active line of a protected line pair has been forced to switch to the Protection line.')
stmnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 28)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionClear.setStatus('current')
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionClear.setDescription('A previously active Forced Switch To Protection condition has cleared.')
stmnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 29)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingCond.setStatus('current')
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingCond.setDescription('The active line of a protected line pair has been forced to switch to the Working line.')
stmnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 30)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingClear.setStatus('current')
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingClear.setDescription('A previously active Forced Switch To Working condition has cleared.')
stmnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 31)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutProtectionCond.setStatus('current')
if mibBuilder.loadTexts: stmnLockoutProtectionCond.setDescription('The Protection line of a protected line pair has been locked out.')
stmnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 32)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutProtectionClear.setStatus('current')
if mibBuilder.loadTexts: stmnLockoutProtectionClear.setDescription('A previously active Lockout Protection condition has cleared.')
stmnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 33)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutWorkingCond.setStatus('current')
if mibBuilder.loadTexts: stmnLockoutWorkingCond.setDescription('The Working line of a protected line pair has been locked out.')
stmnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 34)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutWorkingClear.setStatus('current')
if mibBuilder.loadTexts: stmnLockoutWorkingClear.setDescription('A previously active Lockout Working condition has cleared.')
stmnWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 35)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnWavelengthNotAchievableCond.setStatus('current')
if mibBuilder.loadTexts: stmnWavelengthNotAchievableCond.setDescription('A previously active Wavelength Not Achievable condition has cleared.')
stmnWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 36)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnWavelengthNotAchievableClear.setStatus('current')
if mibBuilder.loadTexts: stmnWavelengthNotAchievableClear.setDescription('A previously active Lockout Working condition has cleared.')
vcnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 1)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: vcnAlarmIndicationSignalCond.setDescription('A Path-level Alarm Indication Signal indication is active on the VC-N channel.')
vcnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 2)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: vcnAlarmIndicationSignalClear.setDescription('A previously active VC-N Alarm Indication Signal condition has cleared.')
vcnLossOfPointerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 3)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLossOfPointerCond.setStatus('current')
if mibBuilder.loadTexts: vcnLossOfPointerCond.setDescription('A Loss of Pointer condition is active on the VC-N channel.')
vcnLossOfPointerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 4)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLossOfPointerClear.setStatus('current')
if mibBuilder.loadTexts: vcnLossOfPointerClear.setDescription('A previously raised VC-N Loss of Pointer condition has cleared.')
vcnUnequippedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 5)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnUnequippedCond.setStatus('current')
if mibBuilder.loadTexts: vcnUnequippedCond.setDescription('An Unequipped indication has been detected for the VC-N channel.')
vcnUnequippedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 6)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnUnequippedClear.setStatus('current')
if mibBuilder.loadTexts: vcnUnequippedClear.setDescription('A previously raised VC-N Unequipped condition has cleared.')
vcnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 7)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "vcnBER"), ("BTI-7000-MIB", "vcnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: vcnSignalDegradeCond.setDescription('A signal degrade condition on the VC-N channel is active. This indicates that the detected bit error rate exceeds the degrade threshold.')
vcnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 8)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: vcnSignalDegradeClear.setDescription('A previously raised VC-N signal degrade condition has cleared.')
vcnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 9)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionCond.setStatus('current')
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionCond.setDescription('The active VC-N channel of a protected VC-N channel pair has been forced to switch to the Protection transceiver.')
vcnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 10)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionClear.setStatus('current')
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionClear.setDescription('A previously raised VC-N Forced Switch To Protection condition has cleared.')
vcnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 11)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingCond.setStatus('current')
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingCond.setDescription('The active VC-N channel of a protected VC-N channel pair has been forced to switch to the Working transceiver.')
vcnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 12)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingClear.setStatus('current')
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingClear.setDescription('A previously raised VC-N Forced Switch To Working condition has cleared.')
vcnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 13)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutProtectionCond.setStatus('current')
if mibBuilder.loadTexts: vcnLockoutProtectionCond.setDescription('The Protection VC-N channel of a protected VC-N channel pair has been locked out.')
vcnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 14)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutProtectionClear.setStatus('current')
if mibBuilder.loadTexts: vcnLockoutProtectionClear.setDescription('A previously raised VC-N Lockout Protection condition has cleared.')
vcnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 15)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutWorkingCond.setStatus('current')
if mibBuilder.loadTexts: vcnLockoutWorkingCond.setDescription('The Working VC-N channel of a protected VC-N channel pair has been locked out.')
vcnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 16)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutWorkingClear.setStatus('current')
if mibBuilder.loadTexts: vcnLockoutWorkingClear.setDescription('A previously raised VC-N Lockout Working condition has cleared.')
vcnConcatMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 17)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnConcatMismatchCond.setStatus('current')
if mibBuilder.loadTexts: vcnConcatMismatchCond.setDescription('A connection provisioning does not match has been detected for the VC-N channel.')
vcnConcatMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 18)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnConcatMismatchClear.setStatus('current')
if mibBuilder.loadTexts: vcnConcatMismatchClear.setDescription('A previously raised VC-N Concat Mismatch condition has cleared.')
geLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 1)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: geLossOfSignalCond.setDescription('This notification indicates that there is no input signal detected on the Gigabit Ethernet port.')
geLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 2)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: geLossOfSignalClear.setDescription('This notification indicates that a previously active GE Loss of Signal condition has been cleared.')
geXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 3)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geXcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: geXcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for the Gigabit Ethernet facility port and the physical transceiver that is inserted in the port. The SFP or XFP transceiver in the port must match the attributes provisioned for the GE facility.')
geXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 4)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geXcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: geXcvrMismatchClear.setDescription('A previously active GE Mistmatch condition has cleared.')
geOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 5)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrReceived"), ("BTI-7000-MIB", "geOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the Gigabit Ethernet facility has fallen below the minimum threshold.')
geOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 6)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMinClear.setDescription('A previously active GE minimum power recieved condition has cleared.')
geOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 7)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrReceived"), ("BTI-7000-MIB", "geOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the Gigabity Ethernet facility has risen above the maximum threshold.')
geOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 8)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxClear.setDescription('A previously active GE maximum power recieved condition has cleared.')
geOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 9)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrTransmitted"), ("BTI-7000-MIB", "geOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinCond.setDescription('Indicates that the output power for the Gigabit Ethernet facility has fallen below the minimum threshold.')
geOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 10)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinClear.setDescription('A previously active GE minimum power transmitted condition has cleared.')
geOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 11)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrTransmitted"), ("BTI-7000-MIB", "geOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxCond.setDescription('Indicates that the output power for the Gigabit Ethernet facility has risen above the maximum threshold.')
geOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 12)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxClear.setDescription('A previously active GE maximum power transmitted condition has cleared.')
geLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 13)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSyncCond.setStatus('current')
if mibBuilder.loadTexts: geLossOfSyncCond.setDescription('A Gigabit Ethernet Loss of Synchronization condition is active on the port.')
geLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 14)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSyncClear.setStatus('current')
if mibBuilder.loadTexts: geLossOfSyncClear.setDescription('A previously active Gigabit Ethernet Loss of Synchronization condition has cleared.')
geRemotePathFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 15)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geRemotePathFailureCond.setStatus('current')
if mibBuilder.loadTexts: geRemotePathFailureCond.setDescription('A Gigabit Ethernet Remote Path Failure condition is active on the port.')
geRemotePathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 16)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geRemotePathFailureClear.setStatus('current')
if mibBuilder.loadTexts: geRemotePathFailureClear.setDescription('A previously active GE Remote Path Failure condition has cleared.')
geLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 17)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfMultiframeCond.setStatus('current')
if mibBuilder.loadTexts: geLossOfMultiframeCond.setDescription('A Loss of Multiframe condition is active against the VCG that is mapped to the identified Gigabit Ethernet port.')
geLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 18)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfMultiframeClear.setStatus('current')
if mibBuilder.loadTexts: geLossOfMultiframeClear.setDescription('A previously raised GE Loss of Multiframe condition has cleared.')
geLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 19)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSequenceCond.setStatus('current')
if mibBuilder.loadTexts: geLossOfSequenceCond.setDescription('A Loss of Sequence condition is active against the VCG that is mapped to the identified Gigabit Ethernet port.')
geLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 20)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSequenceClear.setStatus('current')
if mibBuilder.loadTexts: geLossOfSequenceClear.setDescription('A previously active GE Loss of Sequence condition has cleared.')
geLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 21)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfAlignmentCond.setStatus('current')
if mibBuilder.loadTexts: geLossOfAlignmentCond.setDescription('A Loss of Alignment condition is active against the VCG that is mapped to the identified Gigabit Ethernet port.')
geLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 22)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfAlignmentClear.setStatus('current')
if mibBuilder.loadTexts: geLossOfAlignmentClear.setDescription('A previously active GE Loss of Alignment condition has cleared.')
geLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 23)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: geLoopbackCond.setDescription('Indicates that the Gigabit Ethernet facility has been provisioned to enter loopback mode.')
geLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 24)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: geLoopbackClear.setDescription('A previously active GE Loopback condition has cleared.')
geBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 25)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geBandwidthMismatchCond.setStatus('current')
if mibBuilder.loadTexts: geBandwidthMismatchCond.setDescription('A GE bandwidth mismatch condition is active on the port.')
geBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 26)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geBandwidthMismatchClear.setStatus('current')
if mibBuilder.loadTexts: geBandwidthMismatchClear.setDescription('A previously active GE bandwidth mismatch condition has cleared.')
gePayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 27)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: gePayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: gePayloadMismatchCond.setDescription('A GE payload mismatch condition is active on the port.')
gePayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 28)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: gePayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: gePayloadMismatchClear.setDescription('A previously active GE payload mismatch condition has cleared.')
fcLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 1)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSignalCond.setDescription('This notification indicates that there is no input signal detected on the Fiber Channel port.')
fcLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 2)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSignalClear.setDescription('This notification indicates that a previously active FC Loss of Signal condition has been cleared.')
fcXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 3)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcXcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: fcXcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for the Fiber Channel facility port and the physical transceiver that is inserted in the port. The SFP or XFP transceiver in the port must match the attributes provisioned for the FC facility.')
fcXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 4)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcXcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: fcXcvrMismatchClear.setDescription('A previously active FC XCVR Mistmatch condition has cleared.')
fcOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 5)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrReceived"), ("BTI-7000-MIB", "fcOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the Fiber Channel facility has fallen below the minimum threshold.')
fcOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 6)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinClear.setDescription('A previously active FC minimum power recieved condition has cleared.')
fcOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 7)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrReceived"), ("BTI-7000-MIB", "fcOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the Fiber Channel facility has risen above the maximum threshold.')
fcOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 8)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxClear.setDescription('A previously active FC maximum power recieved condition has cleared.')
fcOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 9)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrTransmitted"), ("BTI-7000-MIB", "fcOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinCond.setDescription('Indicates that the output power for the Fiber Channel facility has fallen below the minimum threshold.')
fcOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 10)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinClear.setDescription('A previously active FC minimum power transmitted condition has cleared.')
fcOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 11)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrTransmitted"), ("BTI-7000-MIB", "fcOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxCond.setDescription('Indicates that the output power for the Fiber Channel facility has risen above the maximum threshold.')
fcOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 12)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxClear.setDescription('A previously active FC maximum power transmitted condition has cleared.')
fcLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 13)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSyncCond.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSyncCond.setDescription('A Fiber Channel Loss of Synchronization condition is active on the port.')
fcLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 14)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSyncClear.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSyncClear.setDescription('A previously active Fiber Channel Loss of Synchronization condition has cleared.')
fcRemotePathFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 15)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcRemotePathFailureCond.setStatus('current')
if mibBuilder.loadTexts: fcRemotePathFailureCond.setDescription('A Fiber Channel Remote Path Failure condition is active on the port.')
fcRemotePathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 16)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcRemotePathFailureClear.setStatus('current')
if mibBuilder.loadTexts: fcRemotePathFailureClear.setDescription('A previously active FC Remote Path Failure condition has cleared.')
fcLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 17)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfMultiframeCond.setStatus('current')
if mibBuilder.loadTexts: fcLossOfMultiframeCond.setDescription('A Loss of Multiframe condition is active against the VCG that is mapped to the identified Fiber Channel port.')
fcLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 18)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfMultiframeClear.setStatus('current')
if mibBuilder.loadTexts: fcLossOfMultiframeClear.setDescription('A previously raised FC Loss of Multiframe condition has cleared.')
fcLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 19)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSequenceCond.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSequenceCond.setDescription('A Loss of Sequence condition is active against the VCG that is mapped to the identified Fiber Channel port.')
fcLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 20)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSequenceClear.setStatus('current')
if mibBuilder.loadTexts: fcLossOfSequenceClear.setDescription('A previously active FC Loss of Sequence condition has cleared.')
fcLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 21)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfAlignmentCond.setStatus('current')
if mibBuilder.loadTexts: fcLossOfAlignmentCond.setDescription('A Loss of Alignment condition is active against the VCG that is mapped to the identified Fiber Channel port.')
fcLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 22)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfAlignmentClear.setStatus('current')
if mibBuilder.loadTexts: fcLossOfAlignmentClear.setDescription('A previously active FC Loss of Alignment condition has cleared.')
fcLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 23)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: fcLoopbackCond.setDescription('Indicates that the Fiber Channel facility has been provisioned to enter loopback mode.')
fcLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 24)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: fcLoopbackClear.setDescription('A previously active FC Loopback condition has cleared.')
fcBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 25)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcBandwidthMismatchCond.setStatus('current')
if mibBuilder.loadTexts: fcBandwidthMismatchCond.setDescription('A Fiber Channel bandwidth mismatch condition is active on the port.')
fcBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 26)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcBandwidthMismatchClear.setStatus('current')
if mibBuilder.loadTexts: fcBandwidthMismatchClear.setDescription('A previously active Fiber Channel bandwidth mismatch condition has cleared.')
fcPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 27)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: fcPayloadMismatchCond.setDescription('A Fiber Channel payload mismatch condition is active on the port.')
fcPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 28)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: fcPayloadMismatchClear.setDescription('A previously active Fiber Channel payload mismatch condition has cleared.')
tl1UserLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 1)).setObjects(("BTI-7000-MIB", "tl1UserIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1UserLockoutCond.setStatus('current')
if mibBuilder.loadTexts: tl1UserLockoutCond.setDescription('A user is locked out of the system. After three incorrect attempts to login, a user is blocked from attempting to login again for 60 seconds.')
tl1UserLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 2)).setObjects(("BTI-7000-MIB", "tl1UserIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1UserLockoutClear.setStatus('current')
if mibBuilder.loadTexts: tl1UserLockoutClear.setDescription('A previously active TL1 User Lockout condition has cleared.')
tl1IpLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 3)).setObjects(("BTI-7000-MIB", "tl1IpLockoutAddr"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1IpLockoutCond.setStatus('current')
if mibBuilder.loadTexts: tl1IpLockoutCond.setDescription('After three incorrect attempts to login from the same IP address, the IP address from which the three attempts are made is blocked for 60 seconds. When this condition is present in the actCondTable, the actCondTableEntryIdx will be set to the networkElement OID and the actCondInstanceIdx will be set to 0.')
tl1IpLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 4)).setObjects(("BTI-7000-MIB", "tl1IpLockoutAddr"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1IpLockoutClear.setStatus('current')
if mibBuilder.loadTexts: tl1IpLockoutClear.setDescription('A previously active TL1 IP lockout condition has cleared.')
olsSFPMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 1)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMissingCond.setStatus('current')
if mibBuilder.loadTexts: olsSFPMissingCond.setDescription('')
olsSFPMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 2)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMissingClear.setStatus('current')
if mibBuilder.loadTexts: olsSFPMissingClear.setDescription('')
olsSFPMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 3)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMismatchCond.setStatus('current')
if mibBuilder.loadTexts: olsSFPMismatchCond.setDescription('')
olsSFPMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 4)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMismatchClear.setStatus('current')
if mibBuilder.loadTexts: olsSFPMismatchClear.setDescription('')
olsInputLOSCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 5)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsInputLOSCond.setStatus('current')
if mibBuilder.loadTexts: olsInputLOSCond.setDescription('')
olsInputLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 6)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsInputLOSClear.setStatus('current')
if mibBuilder.loadTexts: olsInputLOSClear.setDescription('')
olsOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 7)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinCond.setDescription('')
olsOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 8)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinClear.setDescription('')
olsOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 9)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxCond.setDescription('')
olsOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 10)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxClear.setDescription('')
olsOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 11)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinCond.setDescription('')
olsOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 12)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinClear.setDescription('')
olsOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 13)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxCond.setDescription('')
olsOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 14)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxClear.setDescription('')
olsTemperatureMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 15)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsTemperatureMaxCond.setStatus('current')
if mibBuilder.loadTexts: olsTemperatureMaxCond.setDescription('')
olsTemperatureMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 16)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsTemperatureMaxClear.setStatus('current')
if mibBuilder.loadTexts: olsTemperatureMaxClear.setDescription('')
olsLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 17)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: olsLoopbackCond.setDescription('')
olsLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 18)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: olsLoopbackClear.setDescription('')
olsLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 19)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfSyncCond.setStatus('current')
if mibBuilder.loadTexts: olsLossOfSyncCond.setDescription('')
olsLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 20)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfSyncClear.setStatus('current')
if mibBuilder.loadTexts: olsLossOfSyncClear.setDescription('')
olsLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 21)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfFrameCond.setStatus('current')
if mibBuilder.loadTexts: olsLossOfFrameCond.setDescription('')
olsLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 22)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfFrameClear.setStatus('current')
if mibBuilder.loadTexts: olsLossOfFrameClear.setDescription('')
olsAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 23)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsAlarmIndicationSignalCond.setStatus('current')
if mibBuilder.loadTexts: olsAlarmIndicationSignalCond.setDescription('')
olsAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 24)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsAlarmIndicationSignalClear.setStatus('current')
if mibBuilder.loadTexts: olsAlarmIndicationSignalClear.setDescription('')
olsBackwardDefectIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 25)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsBackwardDefectIndicatorCond.setStatus('current')
if mibBuilder.loadTexts: olsBackwardDefectIndicatorCond.setDescription('')
olsBackwardDefectIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 26)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsBackwardDefectIndicatorClear.setStatus('current')
if mibBuilder.loadTexts: olsBackwardDefectIndicatorClear.setDescription('')
olsSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 27)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSignalDegradeCond.setStatus('current')
if mibBuilder.loadTexts: olsSignalDegradeCond.setDescription('')
olsSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 28)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSignalDegradeClear.setStatus('current')
if mibBuilder.loadTexts: olsSignalDegradeClear.setDescription('')
olsOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 29)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTNPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: olsOTNPayloadMismatchCond.setDescription('')
olsOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 30)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTNPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: olsOTNPayloadMismatchClear.setDescription('')
olsOTUTrailTraceMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 31)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchCond.setStatus('current')
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchCond.setDescription('')
olsOTUTrailTraceMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 32)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchClear.setStatus('current')
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchClear.setDescription('')
olsRemoteFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 33)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsRemoteFaultCond.setStatus('current')
if mibBuilder.loadTexts: olsRemoteFaultCond.setDescription('A remote fault indication is active on the ethernet interface.')
olsRemoteFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 34)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsRemoteFaultClear.setStatus('current')
if mibBuilder.loadTexts: olsRemoteFaultClear.setDescription('A previously raised remote fault indication has cleared.')
olsLocalFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 35)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLocalFaultCond.setStatus('current')
if mibBuilder.loadTexts: olsLocalFaultCond.setDescription('A local fault indication is active on the ethernet interface.')
olsLocalFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 36)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLocalFaultClear.setStatus('current')
if mibBuilder.loadTexts: olsLocalFaultClear.setDescription('A previously raised local fault indication has cleared.')
olsWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 37)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsWavelengthNotAchievableCond.setStatus('current')
if mibBuilder.loadTexts: olsWavelengthNotAchievableCond.setDescription('')
olsWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 38)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsWavelengthNotAchievableClear.setStatus('current')
if mibBuilder.loadTexts: olsWavelengthNotAchievableClear.setDescription('')
olsLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 1)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLinkDownCond.setStatus('current')
if mibBuilder.loadTexts: olsLinkDownCond.setDescription('PVX L2 port link down.')
olsLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 2)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLinkDownClear.setStatus('current')
if mibBuilder.loadTexts: olsLinkDownClear.setDescription('PVX L2 port link down has cleared.')
odunPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 1)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunPayloadMismatchCond.setStatus('current')
if mibBuilder.loadTexts: odunPayloadMismatchCond.setDescription('A payload mismatch is active on the ODU-N facility.')
odunPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 2)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunPayloadMismatchClear.setStatus('current')
if mibBuilder.loadTexts: odunPayloadMismatchClear.setDescription('A previously active ODU-N facility payload mismatch condition has cleared.')
odunOpenConnectionIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 3)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunOpenConnectionIndicatorCond.setStatus('current')
if mibBuilder.loadTexts: odunOpenConnectionIndicatorCond.setDescription('An OCI is active on the ODU-N facility.')
odunOpenConnectionIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 4)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunOpenConnectionIndicatorClear.setStatus('current')
if mibBuilder.loadTexts: odunOpenConnectionIndicatorClear.setDescription('A previously active ODU-N OCI condition has cleared.')
briLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 1)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSignalCond.setStatus('current')
if mibBuilder.loadTexts: briLossOfSignalCond.setDescription('This notification indicates that there is no input signal detected on the BRI port.')
briLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 2)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSignalClear.setStatus('current')
if mibBuilder.loadTexts: briLossOfSignalClear.setDescription('This notification indicates that a previously active BRI Loss of Signal condition has been cleared.')
briXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 3)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briXcvrMismatchCond.setStatus('current')
if mibBuilder.loadTexts: briXcvrMismatchCond.setDescription('There is a mismatch between the SFP or XFP transceiver provisioned for the BRI facility port and the physical transceiver that is inserted in the port. The SFP or XFP transceiver in the port must match the attributes provisioned for the BRI facility.')
briXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 4)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briXcvrMismatchClear.setStatus('current')
if mibBuilder.loadTexts: briXcvrMismatchClear.setDescription('A previously active BRI XCVR Mistmatch condition has cleared.')
briOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 5)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrReceived"), ("BTI-7000-MIB", "briOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMinCond.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMinCond.setDescription('Indicates that the input power for the BRI facility has fallen below the minimum threshold.')
briOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 6)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMinClear.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMinClear.setDescription('A previously active BRI minimum power recieved condition has cleared.')
briOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 7)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrReceived"), ("BTI-7000-MIB", "briOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxCond.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxCond.setDescription('Indicates that the input power for the BRI facility has risen above the maximum threshold.')
briOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 8)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxClear.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxClear.setDescription('A previously active BRI maximum power recieved condition has cleared.')
briOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 9)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrTransmitted"), ("BTI-7000-MIB", "briOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinCond.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinCond.setDescription('Indicates that the output power for the BRI facility has fallen below the minimum threshold.')
briOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 10)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinClear.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinClear.setDescription('A previously active BRI minimum power transmitted condition has cleared.')
briOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 11)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrTransmitted"), ("BTI-7000-MIB", "briOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxCond.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxCond.setDescription('Indicates that the output power for the BRI facility has risen above the maximum threshold.')
briOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 12)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxClear.setStatus('current')
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxClear.setDescription('A previously active BRI maximum power transmitted condition has cleared.')
briLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 13)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfMultiframeCond.setStatus('current')
if mibBuilder.loadTexts: briLossOfMultiframeCond.setDescription('A Loss of Multiframe condition is active against the VCG that is mapped to the identified BRI port.')
briLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 14)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfMultiframeClear.setStatus('current')
if mibBuilder.loadTexts: briLossOfMultiframeClear.setDescription('A previously raised BRI Loss of Multiframe condition has cleared.')
briLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 15)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSequenceCond.setStatus('current')
if mibBuilder.loadTexts: briLossOfSequenceCond.setDescription('A Loss of Sequence condition is active against the VCG that is mapped to the identified BRI port.')
briLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 16)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSequenceClear.setStatus('current')
if mibBuilder.loadTexts: briLossOfSequenceClear.setDescription('A previously active BRI Loss of Sequence condition has cleared.')
briLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 17)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfAlignmentCond.setStatus('current')
if mibBuilder.loadTexts: briLossOfAlignmentCond.setDescription('A Loss of Alignment condition is active against the VCG that is mapped to the identified BRI port.')
briLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 18)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfAlignmentClear.setStatus('current')
if mibBuilder.loadTexts: briLossOfAlignmentClear.setDescription('A previously active BRI Loss of Alignment condition has cleared.')
briLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 19)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLoopbackCond.setStatus('current')
if mibBuilder.loadTexts: briLoopbackCond.setDescription('Indicates that the BRI facility has been provisioned to enter loopback mode.')
briLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 20)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLoopbackClear.setStatus('current')
if mibBuilder.loadTexts: briLoopbackClear.setDescription('A previously active BRI Loopback condition has cleared.')
briBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 21)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briBandwidthMismatchCond.setStatus('current')
if mibBuilder.loadTexts: briBandwidthMismatchCond.setDescription('A BRI bandwidth mismatch condition is active on the port.')
briBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 22)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briBandwidthMismatchClear.setStatus('current')
if mibBuilder.loadTexts: briBandwidthMismatchClear.setDescription('A previously active BRI bandwidth mismatch condition has cleared.')
briLossOfLockCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 23)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfLockCond.setStatus('current')
if mibBuilder.loadTexts: briLossOfLockCond.setDescription('This alarm indicates that a BRI port is unable to lock on the incoming bit stream. This is a result of either: the provisioned protocol does not match the incoming signal, or the incoming signal is excessively degraded.')
briLossOfLockClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 24)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfLockClear.setStatus('current')
if mibBuilder.loadTexts: briLossOfLockClear.setDescription('A previously active BRI loss of lock condition has cleared.')
briTxLockingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 25)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briTxLockingCond.setStatus('current')
if mibBuilder.loadTexts: briTxLockingCond.setDescription('This alarm indicates that a BRI client port is in the process of locking on the signal in the transmit direction.')
briTxLockingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 26)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briTxLockingClear.setStatus('current')
if mibBuilder.loadTexts: briTxLockingClear.setDescription('A previously active BRI TX locking condition has cleared.')
ntpAssocSrvrNotReachableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 1)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableCond.setStatus('current')
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableCond.setDescription('This alarm indicates that an NTP server can not be reached. This is a result of either: an invalid IP address, network problems or the server is down.')
ntpAssocSrvrNotReachableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 2)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableClear.setStatus('current')
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableClear.setDescription('A previously active NTP server not reachable condition has cleared.')
ntpAssocSrvrNotRespondingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 3)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingCond.setStatus('current')
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingCond.setDescription('This alarm indicates that an NTP server is reachable but is not responding to the NTP requests correctly. This can be a result of either: the server does not have the service running or there is a server is having problems.')
ntpAssocSrvrNotRespondingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 4)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingClear.setStatus('current')
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingClear.setDescription('A previously active NTP server not responding condition has cleared.')
ntpAssocAuthenFailedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 5)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocAuthenFailedCond.setStatus('current')
if mibBuilder.loadTexts: ntpAssocAuthenFailedCond.setDescription('This alarm indicates that NTP authentication has failed. This can be a result of either: the key is configured incorrectly on the client side or the NTP server does not accept the key.')
ntpAssocAuthenFailedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 6)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocAuthenFailedClear.setStatus('current')
if mibBuilder.loadTexts: ntpAssocAuthenFailedClear.setDescription('A previously active NTP authentication failed condition has cleared.')
ntpTimeAndDateUpdateEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 1)).setObjects(("BTI-7000-MIB", "ntpOldTimeAndDate"), ("BTI-7000-MIB", "ntpNewTimeAndDate"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ntpTimeAndDateUpdateEvt.setStatus('current')
if mibBuilder.loadTexts: ntpTimeAndDateUpdateEvt.setDescription('This event occurs when the NTP client updates the system date and time based on a selected reference clocks source.')
ntpTimingRefUpdateEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 2)).setObjects(("BTI-7000-MIB", "ntpRefIP"), ("BTI-7000-MIB", "ntpRefStratum"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ntpTimingRefUpdateEvt.setStatus('current')
if mibBuilder.loadTexts: ntpTimingRefUpdateEvt.setDescription('This event occurs when the NTP client has selected a reference clock source from a list provided. This is the NTP association list.')
envAttrUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 1)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAttrUnsupportedCond.setStatus('current')
if mibBuilder.loadTexts: envAttrUnsupportedCond.setDescription('Indicates that an environmental alarm detection is configured against a housekeeping input port which is located on equipment which does not support the configured function.')
envAttrUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 2)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAttrUnsupportedClear.setStatus('current')
if mibBuilder.loadTexts: envAttrUnsupportedClear.setDescription('A previously active environmental attribute unsupported alarm has cleared.')
envAirComprCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 3)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirComprCond.setStatus('current')
if mibBuilder.loadTexts: envAirComprCond.setDescription('Indicates that an environmental air compressor failure alarm is raised.')
envAirComprClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 4)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirComprClear.setStatus('current')
if mibBuilder.loadTexts: envAirComprClear.setDescription('A previously active environmental air compressor failure alarm has cleared.')
envAirCondCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 5)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirCondCond.setStatus('current')
if mibBuilder.loadTexts: envAirCondCond.setDescription('Indicates that an environmental air conditioning failure alarm is raised.')
envAirCondClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 6)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirCondClear.setStatus('current')
if mibBuilder.loadTexts: envAirCondClear.setDescription('A previously active environmental air conditioning failure alarm has cleared.')
envAirDryrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 7)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirDryrCond.setStatus('current')
if mibBuilder.loadTexts: envAirDryrCond.setDescription('Indicates that an environmental air dryer failure alarm is raised.')
envAirDryrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 8)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirDryrClear.setStatus('current')
if mibBuilder.loadTexts: envAirDryrClear.setDescription('A previously active environmental air dryer failure alarm has cleared.')
envBatDschrdCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 9)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatDschrdCond.setStatus('current')
if mibBuilder.loadTexts: envBatDschrdCond.setDescription('Indicates that an environmental battery discharging alarm is raised.')
envBatDschrdClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 10)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatDschrdClear.setStatus('current')
if mibBuilder.loadTexts: envBatDschrdClear.setDescription('A previously active environmental battery discharging alarm has cleared.')
envBatteryCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 11)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatteryCond.setStatus('current')
if mibBuilder.loadTexts: envBatteryCond.setDescription('Indicates that an environmental battery failure alarm is raised.')
envBatteryClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 12)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatteryClear.setStatus('current')
if mibBuilder.loadTexts: envBatteryClear.setDescription('A previously active environmental battery failure alarm has cleared.')
envClFanCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 13)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envClFanCond.setStatus('current')
if mibBuilder.loadTexts: envClFanCond.setDescription('Indicates that an environmental cooling fan failure alarm is raised.')
envClFanClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 14)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envClFanClear.setStatus('current')
if mibBuilder.loadTexts: envClFanClear.setDescription('A previously active environmental cooling fan failure alarm has cleared.')
envCpMajorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 15)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMajorCond.setStatus('current')
if mibBuilder.loadTexts: envCpMajorCond.setDescription('Indicates that an environmental centralized power major alarm is raised.')
envCpMajorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 16)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMajorClear.setStatus('current')
if mibBuilder.loadTexts: envCpMajorClear.setDescription('A previously active environmental centralized power major alarm has cleared.')
envCpMinorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 17)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMinorCond.setStatus('current')
if mibBuilder.loadTexts: envCpMinorCond.setDescription('Indicates that an environmental centralized power minor alarm is raised.')
envCpMinorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 18)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMinorClear.setStatus('current')
if mibBuilder.loadTexts: envCpMinorClear.setDescription('A previously active environmental centralized power minor alarm has cleared.')
envDoorOpenCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 19)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envDoorOpenCond.setStatus('current')
if mibBuilder.loadTexts: envDoorOpenCond.setDescription('Indicates that an environmental door open alarm is raised.')
envDoorOpenClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 20)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envDoorOpenClear.setStatus('current')
if mibBuilder.loadTexts: envDoorOpenClear.setDescription('A previously active environmental door open alarm has cleared.')
envEngineCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 21)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngineCond.setStatus('current')
if mibBuilder.loadTexts: envEngineCond.setDescription('Indicates that an environmental engine failure alarm is raised.')
envEngineClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 22)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngineClear.setStatus('current')
if mibBuilder.loadTexts: envEngineClear.setDescription('A previously active environmental engine failure alarm has cleared.')
envEngOprgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 23)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngOprgCond.setStatus('current')
if mibBuilder.loadTexts: envEngOprgCond.setDescription('Indicates that an environmental engine operating alarm is raised.')
envEngOprgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 24)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngOprgClear.setStatus('current')
if mibBuilder.loadTexts: envEngOprgClear.setDescription('A previously active environmental engine operating alarm has cleared.')
envExplGsCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 25)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envExplGsCond.setStatus('current')
if mibBuilder.loadTexts: envExplGsCond.setDescription('Indicates that an environmental explosive gas alarm is raised.')
envExplGsClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 26)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envExplGsClear.setStatus('current')
if mibBuilder.loadTexts: envExplGsClear.setDescription('A previously active environmental explosive gas alarm has cleared.')
envFirDetrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 27)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFirDetrCond.setStatus('current')
if mibBuilder.loadTexts: envFirDetrCond.setDescription('Indicates that an environmental fire detector failure alarm is raised.')
envFirDetrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 28)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFirDetrClear.setStatus('current')
if mibBuilder.loadTexts: envFirDetrClear.setDescription('A previously active environmental fire detector failure alarm has cleared.')
envFireCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 29)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFireCond.setStatus('current')
if mibBuilder.loadTexts: envFireCond.setDescription('Indicates that an environmental fire alarm is raised.')
envFireClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 30)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFireClear.setStatus('current')
if mibBuilder.loadTexts: envFireClear.setDescription('A previously active environmental fire alarm has cleared.')
envFloodCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 31)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFloodCond.setStatus('current')
if mibBuilder.loadTexts: envFloodCond.setDescription('Indicates that an environmental flood alarm is raised.')
envFloodClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 32)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFloodClear.setStatus('current')
if mibBuilder.loadTexts: envFloodClear.setDescription('A previously active environmental flood alarm has cleared.')
envFuseCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 33)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFuseCond.setStatus('current')
if mibBuilder.loadTexts: envFuseCond.setDescription('Indicates that an environmental fuse alarm is raised.')
envFuseClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 34)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFuseClear.setStatus('current')
if mibBuilder.loadTexts: envFuseClear.setDescription('A previously active environmental fuse alarm has cleared.')
envGenCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 35)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenCond.setStatus('current')
if mibBuilder.loadTexts: envGenCond.setDescription('Indicates that an environmental generator failure alarm is raised.')
envGenClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 36)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenClear.setStatus('current')
if mibBuilder.loadTexts: envGenClear.setDescription('A previously active environmental generator failure alarm has cleared.')
envGenericCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 37)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenericCond.setStatus('current')
if mibBuilder.loadTexts: envGenericCond.setDescription('Indicates that an environmental generic alarm is raised.')
envGenericClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 38)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenericClear.setStatus('current')
if mibBuilder.loadTexts: envGenericClear.setDescription('A previously active environmental generic alarm has cleared.')
envHiAirCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 39)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiAirCond.setStatus('current')
if mibBuilder.loadTexts: envHiAirCond.setDescription('Indicates that an environmental high airflow alarm is raised.')
envHiAirClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 40)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiAirClear.setStatus('current')
if mibBuilder.loadTexts: envHiAirClear.setDescription('A previously active environmental high airflow alarm has cleared.')
envHiHumCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 41)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiHumCond.setStatus('current')
if mibBuilder.loadTexts: envHiHumCond.setDescription('Indicates that an environmental high humidity alarm is raised.')
envHiHumClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 42)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiHumClear.setStatus('current')
if mibBuilder.loadTexts: envHiHumClear.setDescription('A previously active environmental high humidity alarm has cleared.')
envHiTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 43)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiTempCond.setStatus('current')
if mibBuilder.loadTexts: envHiTempCond.setDescription('Indicates that an environmental high temperature alarm is raised.')
envHiTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 44)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiTempClear.setStatus('current')
if mibBuilder.loadTexts: envHiTempClear.setDescription('A previously active environmental high temperature alarm has cleared.')
envHiWindCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 45)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWindCond.setStatus('current')
if mibBuilder.loadTexts: envHiWindCond.setDescription('Indicates that an environmental high wind alarm is raised.')
envHiWindClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 46)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWindClear.setStatus('current')
if mibBuilder.loadTexts: envHiWindClear.setDescription('A previously active environmental high wind alarm has cleared.')
envHiWtrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 47)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWtrCond.setStatus('current')
if mibBuilder.loadTexts: envHiWtrCond.setDescription('Indicates that an environmental high water alarm is raised.')
envHiWtrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 48)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWtrClear.setStatus('current')
if mibBuilder.loadTexts: envHiWtrClear.setDescription('A previously active environmental high water alarm has cleared.')
envIceBuildupCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 49)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIceBuildupCond.setStatus('current')
if mibBuilder.loadTexts: envIceBuildupCond.setDescription('Indicates that an environmental ice buildup alarm is raised.')
envIceBuildupClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 50)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIceBuildupClear.setStatus('current')
if mibBuilder.loadTexts: envIceBuildupClear.setDescription('A previously active environmental ice buildup alarm has cleared.')
envIntruderCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 51)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIntruderCond.setStatus('current')
if mibBuilder.loadTexts: envIntruderCond.setDescription('Indicates that an environmental intrusion alarm is raised.')
envIntruderClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 52)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIntruderClear.setStatus('current')
if mibBuilder.loadTexts: envIntruderClear.setDescription('A previously active environmental intrusion alarm has cleared.')
envLwBatvgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 53)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwBatvgCond.setStatus('current')
if mibBuilder.loadTexts: envLwBatvgCond.setDescription('Indicates that an environmental low battery voltage alarm is raised.')
envLwBatvgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 54)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwBatvgClear.setStatus('current')
if mibBuilder.loadTexts: envLwBatvgClear.setDescription('A previously active environmental low battery voltage alarm has cleared.')
envLwFuelCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 55)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwFuelCond.setStatus('current')
if mibBuilder.loadTexts: envLwFuelCond.setDescription('Indicates that an environmental low fuel alarm is raised.')
envLwFuelClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 56)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwFuelClear.setStatus('current')
if mibBuilder.loadTexts: envLwFuelClear.setDescription('A previously active environmental low fuel alarm has cleared.')
envLwHumCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 57)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwHumCond.setStatus('current')
if mibBuilder.loadTexts: envLwHumCond.setDescription('Indicates that an environmental low humidity alarm is raised.')
envLwHumClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 58)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwHumClear.setStatus('current')
if mibBuilder.loadTexts: envLwHumClear.setDescription('A previously active environmental low humidity alarm has cleared.')
envLwPresCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 59)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwPresCond.setStatus('current')
if mibBuilder.loadTexts: envLwPresCond.setDescription('Indicates that an environmental low cable pressure alarm is raised.')
envLwPresClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 60)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwPresClear.setStatus('current')
if mibBuilder.loadTexts: envLwPresClear.setDescription('A previously active environmental low cable pressure alarm has cleared.')
envLwTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 61)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwTempCond.setStatus('current')
if mibBuilder.loadTexts: envLwTempCond.setDescription('Indicates that an environmental low temperature alarm is raised.')
envLwTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 62)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwTempClear.setStatus('current')
if mibBuilder.loadTexts: envLwTempClear.setDescription('A previously active environmental low temperature alarm has cleared.')
envLwWtrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 63)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwWtrCond.setStatus('current')
if mibBuilder.loadTexts: envLwWtrCond.setDescription('Indicates that an environmental low water alarm is raised.')
envLwWtrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 64)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwWtrClear.setStatus('current')
if mibBuilder.loadTexts: envLwWtrClear.setDescription('A previously active environmental low water alarm has cleared.')
envMiscCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 65)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envMiscCond.setStatus('current')
if mibBuilder.loadTexts: envMiscCond.setDescription('Indicates that an environmental miscellaneous alarm is raised.')
envMiscClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 66)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envMiscClear.setStatus('current')
if mibBuilder.loadTexts: envMiscClear.setDescription('A previously active environmental miscellaneous alarm has cleared.')
envOpenDrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 67)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envOpenDrCond.setStatus('current')
if mibBuilder.loadTexts: envOpenDrCond.setDescription('Indicates that an environmental open door alarm is raised.')
envOpenDrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 68)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envOpenDrClear.setStatus('current')
if mibBuilder.loadTexts: envOpenDrClear.setDescription('A previously active environmental open door alarm has cleared.')
envPowerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 69)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPowerCond.setStatus('current')
if mibBuilder.loadTexts: envPowerCond.setDescription('Indicates that an environmental power failure alarm is raised.')
envPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 70)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPowerClear.setStatus('current')
if mibBuilder.loadTexts: envPowerClear.setDescription('A previously active environmental power failure alarm has cleared.')
envPumpCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 71)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPumpCond.setStatus('current')
if mibBuilder.loadTexts: envPumpCond.setDescription('Indicates that an environmental pump failure alarm is raised.')
envPumpClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 72)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPumpClear.setStatus('current')
if mibBuilder.loadTexts: envPumpClear.setDescription('A previously active environmental pump failure alarm has cleared.')
envRectCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 73)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectCond.setStatus('current')
if mibBuilder.loadTexts: envRectCond.setDescription('Indicates that an environmental rectifier failure alarm is raised.')
envRectClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 74)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectClear.setStatus('current')
if mibBuilder.loadTexts: envRectClear.setDescription('A previously active environmental rectifier failure alarm has cleared.')
envRectHiCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 75)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectHiCond.setStatus('current')
if mibBuilder.loadTexts: envRectHiCond.setDescription('Indicates that an environmental rectifier high voltage alarm is raised.')
envRectHiClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 76)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectHiClear.setStatus('current')
if mibBuilder.loadTexts: envRectHiClear.setDescription('A previously active environmental rectifier high voltage alarm has cleared.')
envRectLoCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 77)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectLoCond.setStatus('current')
if mibBuilder.loadTexts: envRectLoCond.setDescription('Indicates that an environmental rectifier low voltage alarm is raised.')
envRectLoClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 78)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectLoClear.setStatus('current')
if mibBuilder.loadTexts: envRectLoClear.setDescription('A previously active environmental rectifier low voltage alarm has cleared.')
envSmokeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 79)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envSmokeCond.setStatus('current')
if mibBuilder.loadTexts: envSmokeCond.setDescription('Indicates that an environmental smoke alarm is raised.')
envSmokeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 80)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envSmokeClear.setStatus('current')
if mibBuilder.loadTexts: envSmokeClear.setDescription('A previously active environmental smoke alarm has cleared.')
envToxicGasCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 81)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envToxicGasCond.setStatus('current')
if mibBuilder.loadTexts: envToxicGasCond.setDescription('Indicates that an environmental toxic gas alarm is raised.')
envToxicGasClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 82)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envToxicGasClear.setStatus('current')
if mibBuilder.loadTexts: envToxicGasClear.setDescription('A previously active environmental toxic gas alarm has cleared.')
envVentnCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 83)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envVentnCond.setStatus('current')
if mibBuilder.loadTexts: envVentnCond.setDescription('Indicates that an environmental ventilation system failure alarm is raised.')
envVentnClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 84)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envVentnClear.setStatus('current')
if mibBuilder.loadTexts: envVentnClear.setDescription('A previously active environmental ventilation system failure alarm has cleared.')
dbChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 2)).setObjects(("BTI-7000-MIB", "dbChangeDateAndTime"), ("BTI-7000-MIB", "dbChangeSeqNum"), ("BTI-7000-MIB", "dbChangeOID"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: dbChangeEvt.setStatus('current')
if mibBuilder.loadTexts: dbChangeEvt.setDescription('This message indicates that a change has been made in the value of the provisioned object identified by the dbChangeOID Var-Bind. If multiple objects have been changed in the same transaction, there will be multiple occurrances of the dbChangeOID object listed in the Var-Bind list.')
dbChangeSecuEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 3)).setObjects(("BTI-7000-MIB", "dbChangeDateAndTime"), ("BTI-7000-MIB", "dbChangeSeqNum"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: dbChangeSecuEvt.setStatus('current')
if mibBuilder.loadTexts: dbChangeSecuEvt.setDescription('This message indicates that a change has been made in the value of the SNMP community string, SNMP trap reciever, or Tl1User.')
pvxLldpRemTablesChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34, 0, 1)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"))
if mibBuilder.loadTexts: pvxLldpRemTablesChangeEvt.setStatus('current')
if mibBuilder.loadTexts: pvxLldpRemTablesChangeEvt.setDescription("A pvxLldpRemTablesChangeEvt notification is sent when the value of pvxLldpStatsRemTablesLastChangeTime changes. It can be utilized by an NMS to trigger LLDP remote systems table maintenance polls. Note that transmission of lldpRemTablesChange notifications are throttled by the agent. The agent must not generate more than one lldpRemTablesChange notification-event in the indicated period, where a 'notification-event' is the transmission of a single notification PDU type to a list of notification destinations. If additional changes in lldpRemoteSystemsData object groups occur within the indicated throttling period, then these trap- events must be suppressed by the agent. By default the throttling period is set to 10 seconds.")
mibBuilder.exportSymbols("BTI-7000-MIB", envLwTempClear=envLwTempClear, geCrntPMBCSTInitialize=geCrntPMBCSTInitialize, stmnHistPMIntervalTypeIdx=stmnHistPMIntervalTypeIdx, pvxL2IFCrntPMUSIZEValue=pvxL2IFCrntPMUSIZEValue, xcvrCrntPMRSESInitialize=xcvrCrntPMRSESInitialize, slotInvVersionMismatchClear=slotInvVersionMismatchClear, cpCrntPMSlotIdx=cpCrntPMSlotIdx, ethIntfVendorPN1=ethIntfVendorPN1, oaCrntPMLaser1PowerTimeStamp=oaCrntPMLaser1PowerTimeStamp, gePayloadMismatchClear=gePayloadMismatchClear, xcvrHistPMSupplyVoltage2Validity=xcvrHistPMSupplyVoltage2Validity, xcvrHistPMFRGTValue=xcvrHistPMFRGTValue, ethL1IFCrntPMOTUOFSTimeStamp=ethL1IFCrntPMOTUOFSTimeStamp, stmnProtGrpTable=stmnProtGrpTable, ocnCrntPMUASLTimeStamp=ocnCrntPMUASLTimeStamp, stmnCrntPMOPTMinValue=stmnCrntPMOPTMinValue, stmnPMThresholdIntervalTypeIdx=stmnPMThresholdIntervalTypeIdx, amdCrntPMLineIdx=amdCrntPMLineIdx, fcCrntPMOPTMinInitialize=fcCrntPMOPTMinInitialize, xcvrCrntPMOTUOFSInitialize=xcvrCrntPMOTUOFSInitialize, oaBackReflectionSafetyOverrideCond=oaBackReflectionSafetyOverrideCond, dataCommsPingCmd=dataCommsPingCmd, xcvrHistPMFCSEValue=xcvrHistPMFCSEValue, ocnBER=ocnBER, xcvrHistPMOTUBBEValidity=xcvrHistPMOTUBBEValidity, fcCrntPMEntry=fcCrntPMEntry, fcCrntPMOPRAvgValidity=fcCrntPMOPRAvgValidity, ethL1IFCrntPMNBITCRInitialize=ethL1IFCrntPMNBITCRInitialize, vcnLockoutWorkingClear=vcnLockoutWorkingClear, geActAutoEnableTimer=geActAutoEnableTimer, olsLinkDownClear=olsLinkDownClear, shelfInvExpectedMSISerialNum=shelfInvExpectedMSISerialNum, eventNotifications=eventNotifications, briCrntPMSupplyVoltageValue=briCrntPMSupplyVoltageValue, stsnProtSwOpPortIdx=stsnProtSwOpPortIdx, stsnUnequippedClear=stsnUnequippedClear, xcvrProtSwOpTable=xcvrProtSwOpTable, geVendorPN2=geVendorPN2, amdHistPMIntervalIdx=amdHistPMIntervalIdx, ethL1IFHistPMOTUBBEValidity=ethL1IFHistPMOTUBBEValidity, oaHistPMFSOOPTValue=oaHistPMFSOOPTValue, oaHistPMLaser1PowerTimeStamp=oaHistPMLaser1PowerTimeStamp, pvxL2IFCrntPMSIZE64Initialize=pvxL2IFCrntPMSIZE64Initialize, briHistPMLBCTimeStamp=briHistPMLBCTimeStamp, ethL1IFHistPMOTUSESValidity=ethL1IFHistPMOTUSESValidity, ospfAdminStat=ospfAdminStat, vcnCrntPMHPESValidity=vcnCrntPMHPESValidity, stsnPMThresholdByPortTypeIdx=stsnPMThresholdByPortTypeIdx, geHistPMSIZE65To127Value=geHistPMSIZE65To127Value, stmnShelfIdx=stmnShelfIdx, vcnLockoutWorkingCond=vcnLockoutWorkingCond, vcnShelfIdx=vcnShelfIdx, xcvrCrntPMOPTTimeStamp=xcvrCrntPMOPTTimeStamp, xcvrOperStatus=xcvrOperStatus, ethL1IFCrntPMOTUSESInitialize=ethL1IFCrntPMOTUSESInitialize, xcvrCrntPMUNCRCDWValidity=xcvrCrntPMUNCRCDWValidity, ocnOpticalPwrTransmittedMinClear=ocnOpticalPwrTransmittedMinClear, ocnHistPMNBITCRTimeStamp=ocnHistPMNBITCRTimeStamp, ntpClientRefIPAddr=ntpClientRefIPAddr, fcEvtNotifications=fcEvtNotifications, geCrntPMOPRMinValidity=geCrntPMOPRMinValidity, cpSynchronizationSecProtStatQlfr=cpSynchronizationSecProtStatQlfr, oaHistPMMSInsLossValue=oaHistPMMSInsLossValue, geHistPMSIZE512To1023Initialize=geHistPMSIZE512To1023Initialize, envBatDschrdCond=envBatDschrdCond, envFuseClear=envFuseClear, stmnHistPMOPTAvgTimeStamp=stmnHistPMOPTAvgTimeStamp, xcvrCrntPMRSUASInitialize=xcvrCrntPMRSUASInitialize, ethL1IFCrntPMOPRValidity=ethL1IFCrntPMOPRValidity, xcvrCrntPMESValue=xcvrCrntPMESValue, vcnHistPMHPSESValue=vcnHistPMHPSESValue, olsRemoteFaultCond=olsRemoteFaultCond, envLwTempCond=envLwTempCond, envToxicGasClear=envToxicGasClear, amdOpticalPwrReceivedMaxCond=amdOpticalPwrReceivedMaxCond, xcvrHistPMOPRMaxTimeStamp=xcvrHistPMOPRMaxTimeStamp, geCrntPMOPRValidity=geCrntPMOPRValidity, briCrntPMTempValue=briCrntPMTempValue, ethL1IFCrntPMOTNAVGBERValidity=ethL1IFCrntPMOTNAVGBERValidity, ethL1IFCrntPMOTNAVGBERValue=ethL1IFCrntPMOTNAVGBERValue, shelfInvDiscoveredIPAddress=shelfInvDiscoveredIPAddress, stmnCrntPMNBYTCR64BitValidity=stmnCrntPMNBYTCR64BitValidity, stsnLockoutWorkingCond=stsnLockoutWorkingCond, ethL1IFCrntPMOPRMaxTimeStamp=ethL1IFCrntPMOPRMaxTimeStamp, envRectLoClear=envRectLoClear, geCrntPMSESTimeStamp=geCrntPMSESTimeStamp, ocnCrntPMTypeIdx=ocnCrntPMTypeIdx, ethL1IFHistPMOPRAvgValidity=ethL1IFHistPMOPRAvgValidity, ocnHistPMTypeIdx=ocnHistPMTypeIdx, geCrntPMCVTimeStamp=geCrntPMCVTimeStamp, briHistPMPortIdx=briHistPMPortIdx, geCrntPMSIZE128To255TimeStamp=geCrntPMSIZE128To255TimeStamp, stmnCrntPMRSESValue=stmnCrntPMRSESValue, odunXCSrcIdx=odunXCSrcIdx, xcvrLossOfLockClear=xcvrLossOfLockClear, ethL1IFCrntPMTempValidity=ethL1IFCrntPMTempValidity, oaHistPMSSIOPRTimeStamp=oaHistPMSSIOPRTimeStamp, xcvrCrntPMSEFSSTimeStamp=xcvrCrntPMSEFSSTimeStamp, stmnHistPMUNCRCDWInitialize=stmnHistPMUNCRCDWInitialize, ocnCrntPMShelfIdx=ocnCrntPMShelfIdx, pluggableInvMismatchClear=pluggableInvMismatchClear, slotInvUnsupportedPackClear=slotInvUnsupportedPackClear, oaCrntPMVOATimeStamp=oaCrntPMVOATimeStamp, pluggableInvLOSImpl=pluggableInvLOSImpl, stsnPortIdx=stsnPortIdx, geTable=geTable, olsOpticalPwrReceivedMaxClear=olsOpticalPwrReceivedMaxClear, ocnPMThresholdOTUBBEValue=ocnPMThresholdOTUBBEValue, geHistPMESTimeStamp=geHistPMESTimeStamp, geOpticalPwrTransmittedMinClear=geOpticalPwrTransmittedMinClear, stmnForcedSwitchToWorkingClear=stmnForcedSwitchToWorkingClear, ethL1IFCrntPMNBITCR64BitTimeStamp=ethL1IFCrntPMNBITCR64BitTimeStamp, ocnHistPMOTUOFSTimeStamp=ocnHistPMOTUOFSTimeStamp, ocnProtSwOpTable=ocnProtSwOpTable, ocnHistPMOTUEBTimeStamp=ocnHistPMOTUEBTimeStamp, stmnLossOfSignalClear=stmnLossOfSignalClear, cpShelfIdx=cpShelfIdx, ethL1IFHistPMOPRMaxValue=ethL1IFHistPMOPRMaxValue, vcnXCSrcPortIdx=vcnXCSrcPortIdx, stmnOpticalPwrTransmittedMinClear=stmnOpticalPwrTransmittedMinClear, envHiTempCond=envHiTempCond, pvxL2IFHistPMSIZE64TimeStamp=pvxL2IFHistPMSIZE64TimeStamp, stmnHistPMOTUESValidity=stmnHistPMOTUESValidity, envIntruderCond=envIntruderCond, xcvrPMThresholdOTUSESValue=xcvrPMThresholdOTUSESValue, briHistPMIntervalIdx=briHistPMIntervalIdx, vcgTable=vcgTable, envIceBuildupCond=envIceBuildupCond, amdHistPMOPRTimeStamp=amdHistPMOPRTimeStamp, xcvrHistPMBCSTTimeStamp=xcvrHistPMBCSTTimeStamp, pvxL2IFCrntPMFRGTValue=pvxL2IFCrntPMFRGTValue, pluggableInvVendorSerialNum=pluggableInvVendorSerialNum, fcCrntPMOPRMaxValidity=fcCrntPMOPRMaxValidity, ocnHistPMNBITCR64BitValue=ocnHistPMNBITCR64BitValue, cpSynchronizationEvtNotifications=cpSynchronizationEvtNotifications, stsnForcedSwitchToProtectionClear=stsnForcedSwitchToProtectionClear, ospfRouteRedist=ospfRouteRedist, stsnLockoutWorkingClear=stsnLockoutWorkingClear, envExplGsCond=envExplGsCond, ocnHistPMSESLValue=ocnHistPMSESLValue, xcvrCrntPMOPTMaxValidity=xcvrCrntPMOPTMaxValidity, briOpticalPwrReceivedMaxTh=briOpticalPwrReceivedMaxTh, stmnLineMapping=stmnLineMapping, xcvrCrntPMOPRMinValidity=xcvrCrntPMOPRMinValidity, xcvrHistPMSIZE1024To1518Initialize=xcvrHistPMSIZE1024To1518Initialize, ocnCrntPMOPRMaxValue=ocnCrntPMOPRMaxValue, ocnHistPMOTUEBValidity=ocnHistPMOTUEBValidity, pvxL2IFCrntPMSIZEOver1518Initialize=pvxL2IFCrntPMSIZEOver1518Initialize, briHistPMOPRMaxValidity=briHistPMOPRMaxValidity, odunXCTable=odunXCTable, ocnAutoEnableTimer=ocnAutoEnableTimer, fcCrntPMTable=fcCrntPMTable, stmnPMThresholdUNCRCDWValue=stmnPMThresholdUNCRCDWValue, ipExtIntfAddressType=ipExtIntfAddressType, stsnHistPMTypeIdx=stsnHistPMTypeIdx, ocnHistPMSEFSSValidity=ocnHistPMSEFSSValidity, oaAutoEnableTimer=oaAutoEnableTimer, vcnPMThresholdByPortHPUASValue=vcnPMThresholdByPortHPUASValue, stmnCrntPMNBITCRValue=stmnCrntPMNBITCRValue, xcvrCrntPMRSUASValidity=xcvrCrntPMRSUASValidity, xcvrHistPMSIZE64Value=xcvrHistPMSIZE64Value, stmnHistPMOTUUASValue=stmnHistPMOTUUASValue, stmnHistPMOPTMaxInitialize=stmnHistPMOPTMaxInitialize, passivePortCustom3=passivePortCustom3, pvxL2IFHistPMMCSTInitialize=pvxL2IFHistPMMCSTInitialize, ethIntfLpbkOpCmd=ethIntfLpbkOpCmd, ipExtIntfType=ipExtIntfType, briOpticalPwrTransmittedMinClear=briOpticalPwrTransmittedMinClear, xcvrHistPMSIZE512To1023Value=xcvrHistPMSIZE512To1023Value, fcHistPMOPRValidity=fcHistPMOPRValidity, tl1LogTable=tl1LogTable, stmnHistPMOTUUASInitialize=stmnHistPMOTUUASInitialize, ethL1IFCrntPMShelfIdx=ethL1IFCrntPMShelfIdx, ocnCrntPMNBITCRInitialize=ocnCrntPMNBITCRInitialize, ocnOpticalPwrTransmittedMaxClear=ocnOpticalPwrTransmittedMaxClear, ethL1IFCrntPMOTNBERValidity=ethL1IFCrntPMOTNBERValidity, ethL1IFCrntPMESValidity=ethL1IFCrntPMESValidity, geOpticalPwrReceivedMaxCond=geOpticalPwrReceivedMaxCond, ethIntfLagPortPriority=ethIntfLagPortPriority, ocnCrntPMNBYTCRTimeStamp=ocnCrntPMNBYTCRTimeStamp, geOpticalPwrReceivedMaxClear=geOpticalPwrReceivedMaxClear, xcvrCrntPMSIZE64Validity=xcvrCrntPMSIZE64Validity, xcvrPMThresholdOSIZEValue=xcvrPMThresholdOSIZEValue, actAlarmSeverity=actAlarmSeverity, xcvrCrntPMRSSESValue=xcvrCrntPMRSSESValue, shelfInvIdx=shelfInvIdx, shelfInvMfgLoc=shelfInvMfgLoc, xcvrHistPMUNCRCDWValue=xcvrHistPMUNCRCDWValue, amdHistPMPortIdx=amdHistPMPortIdx, amdHistPMVOAValidity=amdHistPMVOAValidity, briLpbkOpShelfIdx=briLpbkOpShelfIdx, oaOpticalPwrReceivedMaxTh=oaOpticalPwrReceivedMaxTh, ethIntfLldpRemPortIdSubtype=ethIntfLldpRemPortIdSubtype, xcvrHistPMRSSESValue=xcvrHistPMRSSESValue, stsnCrntPMSESPValidity=stsnCrntPMSESPValidity, briOpticalPwrReceivedMaxClear=briOpticalPwrReceivedMaxClear, stmnCrntPMRSBBEValidity=stmnCrntPMRSBBEValidity, geHistPMOPTAvgTimeStamp=geHistPMOPTAvgTimeStamp, fcLpbkOpSlotIdx=fcLpbkOpSlotIdx, pluggableInvSlotTypeIdx=pluggableInvSlotTypeIdx, stsnHistPMUASPValidity=stsnHistPMUASPValidity, slotInvCommClear=slotInvCommClear, cpCrntPMTable=cpCrntPMTable, dataCommsPingEntry=dataCommsPingEntry, cpUpgradeFailCond=cpUpgradeFailCond, xcvrMismatchCond=xcvrMismatchCond, ocnLossOfFrameCond=ocnLossOfFrameCond, vcnCrntPMHPBBEValidity=vcnCrntPMHPBBEValidity, xcvrHistPMUSIZEValidity=xcvrHistPMUSIZEValidity, stmnWavelengthNotAchievableClear=stmnWavelengthNotAchievableClear, cpTypeIdx=cpTypeIdx, xcvrHistPMTBYCRXValue=xcvrHistPMTBYCRXValue, oaHistPMShelfIdx=oaHistPMShelfIdx, xcvrCrntPMSIZE1024To1518Validity=xcvrCrntPMSIZE1024To1518Validity, pluggableInvRestartOpPortIdx=pluggableInvRestartOpPortIdx, pluggableInvReach=pluggableInvReach, feSlotIdx=feSlotIdx, amdSlotIdx=amdSlotIdx, xcvrCrntPMOTNAVGBERInitialize=xcvrCrntPMOTNAVGBERInitialize, ocnPMThresholdUNCRCDWValue=ocnPMThresholdUNCRCDWValue, vcnCrntPMHPSESValidity=vcnCrntPMHPSESValidity, stsnLossOfPointerClear=stsnLossOfPointerClear, tl1IpLockoutClear=tl1IpLockoutClear, stmnFiberType=stmnFiberType, xcvrOpenConnectionIndicatorCond=xcvrOpenConnectionIndicatorCond, geHistPMOPTMaxInitialize=geHistPMOPTMaxInitialize, gePMThresholdIntervalTypeIdx=gePMThresholdIntervalTypeIdx, geLpbkOpCmd=geLpbkOpCmd, actCondDescription=actCondDescription, stmnPMThresholdOTUUASValue=stmnPMThresholdOTUUASValue, xcvrHistPMIntervalTypeIdx=xcvrHistPMIntervalTypeIdx, pvxL2IFCrntPMTBYCTXTimeStamp=pvxL2IFCrntPMTBYCTXTimeStamp, pvxL2IFCrntPMFRDRValue=pvxL2IFCrntPMFRDRValue, xcvrCrntPMBCSTValidity=xcvrCrntPMBCSTValidity, ethL1IFHistPMSupplyVoltageTimeStamp=ethL1IFHistPMSupplyVoltageTimeStamp, pvxL2IntfSlotIdx=pvxL2IntfSlotIdx, stmnCrntPMRSESValidity=stmnCrntPMRSESValidity, ocnProtGrpRowStatus=ocnProtGrpRowStatus, olsLocalFaultCond=olsLocalFaultCond, briEvtNotifications=briEvtNotifications, envFireCond=envFireCond, ntpClientAssocRowStatus=ntpClientAssocRowStatus, geHistPMOPRMinInitialize=geHistPMOPRMinInitialize, slotInvPackMfgDate=slotInvPackMfgDate, pvxL2IFHistPMSIZE64Validity=pvxL2IFHistPMSIZE64Validity, briVendorPN3=briVendorPN3, oaCrntPMSSIOPRTimeStamp=oaCrntPMSSIOPRTimeStamp, ocnHistPMTempValidity=ocnHistPMTempValidity, xcvrPMThresholdIntervalTypeIdx=xcvrPMThresholdIntervalTypeIdx, cpStatusChangeEvt=cpStatusChangeEvt, ocnId1=ocnId1, pvxL2IFHistPMBCSTValidity=pvxL2IFHistPMBCSTValidity, envRectCond=envRectCond, ethL1IFHistPMOPTMaxTimeStamp=ethL1IFHistPMOPTMaxTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", vcnForcedSwitchToWorkingClear=vcnForcedSwitchToWorkingClear, ethPortEvtNotifications=ethPortEvtNotifications, ethL1IFCrntPMUASValidity=ethL1IFCrntPMUASValidity, stmnLpbkOpEntry=stmnLpbkOpEntry, xcvrHistPMBCSTInitialize=xcvrHistPMBCSTInitialize, pvxL2EvtNotifications=pvxL2EvtNotifications, xcvrCrntPMEntry=xcvrCrntPMEntry, pvxSUniEvtNotifications=pvxSUniEvtNotifications, fcOperations=fcOperations, vcgType=vcgType, stmnCrntPMMSUASInitialize=stmnCrntPMMSUASInitialize, stmnCrntPMOPRTimeStamp=stmnCrntPMOPRTimeStamp, xcvrHistPMSIZE65To127Validity=xcvrHistPMSIZE65To127Validity, geCrntPMSESValidity=geCrntPMSESValidity, xcvrLpbkOpSlotIdx=xcvrLpbkOpSlotIdx, oscOperStatQlfr=oscOperStatQlfr, xcvrOpticalPwrReceivedMinTh=xcvrOpticalPwrReceivedMinTh, xcvrCrntPMIdx=xcvrCrntPMIdx, xcvrHistPMSIZE512To1023Initialize=xcvrHistPMSIZE512To1023Initialize, ocnCrntPMUASSValue=ocnCrntPMUASSValue, swUpgradeFileTransferType=swUpgradeFileTransferType, cpInvalidProvClear=cpInvalidProvClear, pvxL2IFHistPMSIZE65To127Validity=pvxL2IFHistPMSIZE65To127Validity, fcCrntPMLBCValue=fcCrntPMLBCValue, pvxL2IntfTable=pvxL2IntfTable, oaId2=oaId2, ocnHistPMSupplyVoltage2TimeStamp=ocnHistPMSupplyVoltage2TimeStamp, xcvrHistPMOTUESInitialize=xcvrHistPMOTUESInitialize, ocnHistPMESLValue=ocnHistPMESLValue, gePMThresholdJABRValue=gePMThresholdJABRValue, ethL1IFCrntPMINVBLKValidity=ethL1IFCrntPMINVBLKValidity, actAlarmServiceAffecting=actAlarmServiceAffecting, pvxL2IntfDscpPHBProfName=pvxL2IntfDscpPHBProfName, stmnOpticalPwrReceivedMinCond=stmnOpticalPwrReceivedMinCond, amdCustom1=amdCustom1, vcnPMThresholdByPortTable=vcnPMThresholdByPortTable, ocnCrntPMSESLInitialize=ocnCrntPMSESLInitialize, cpEvtNotifications=cpEvtNotifications, envEngOprgCond=envEngOprgCond, oaCrntPMLaser1CurrentValidity=oaCrntPMLaser1CurrentValidity, ocnHistPMOPTValidity=ocnHistPMOPTValidity, ocnProtSwOpIdx=ocnProtSwOpIdx, olsOpticalPwrTransmittedMaxClear=olsOpticalPwrTransmittedMaxClear, oscDuplex=oscDuplex, stmnCrntPMOTNAVGBERValidity=stmnCrntPMOTNAVGBERValidity, stsnHistPMUASPInitialize=stsnHistPMUASPInitialize, dataComms=dataComms, oaCaseTempCond=oaCaseTempCond, pluggableInvCommClear=pluggableInvCommClear, briFiberType=briFiberType, ethL1IFCrntPMOPTValue=ethL1IFCrntPMOPTValue, stmnPMThresholdRSOFSValue=stmnPMThresholdRSOFSValue, ethL1IFCrntPMPortIdx=ethL1IFCrntPMPortIdx, odunXCProtShelfNum=odunXCProtShelfNum, xcvrForcedSwitchToWorkingClear=xcvrForcedSwitchToWorkingClear, odunTable=odunTable, stmnHistPMNBYTCR64BitValue=stmnHistPMNBYTCR64BitValue, stmnTransparencyChannel=stmnTransparencyChannel, geCrntPMSIZE64Value=geCrntPMSIZE64Value, briHistPMOPTMinValue=briHistPMOPTMinValue, netMgmtEntry=netMgmtEntry, vcnCrntPMPortIdx=vcnCrntPMPortIdx, ethL1IFCrntPMOTUEBInitialize=ethL1IFCrntPMOTUEBInitialize, tl1LogType=tl1LogType, xcvrLockoutProtectionCond=xcvrLockoutProtectionCond, geHistPMSIZE128To255Initialize=geHistPMSIZE128To255Initialize, xcvrHistPMTypeIdx=xcvrHistPMTypeIdx, ethL1IFCrntPMOTNAVGBERInitialize=ethL1IFCrntPMOTNAVGBERInitialize, ocnProtSwOpShelfIdx=ocnProtSwOpShelfIdx, amdCustom3=amdCustom3, pvxL2IFHistPMSIZE1024To1518TimeStamp=pvxL2IFHistPMSIZE1024To1518TimeStamp, gePMThresholdTable=gePMThresholdTable, ocnHistPMTempValue=ocnHistPMTempValue, stmnHistPMSupplyVoltageValidity=stmnHistPMSupplyVoltageValidity, envEngOprgClear=envEngOprgClear, dbChangeSeqNum=dbChangeSeqNum, stsnPMThresholdByPortIntervalTypeIdx=stsnPMThresholdByPortIntervalTypeIdx, dbBackupAndRestore=dbBackupAndRestore, oscMACAddr=oscMACAddr, vcgXCEntry=vcgXCEntry, actCondDateAndTime=actCondDateAndTime, stmnPMThresholdOTUOFSValue=stmnPMThresholdOTUOFSValue, xcvrCrntPMSIZE256To511Value=xcvrCrntPMSIZE256To511Value, ocnTOHTransparency=ocnTOHTransparency, ethL1IFHistPMUNCRCDWValidity=ethL1IFHistPMUNCRCDWValidity, ethL1IFHistPMOTNAVGBERValidity=ethL1IFHistPMOTNAVGBERValidity, ocnHistPMOTUUASTimeStamp=ocnHistPMOTUUASTimeStamp, passivePortSlotIdx=passivePortSlotIdx, pvxL2IFHistPMTPFCRXTimeStamp=pvxL2IFHistPMTPFCRXTimeStamp, amdCrntPMOPRValue=amdCrntPMOPRValue, gePMThresholdUASValue=gePMThresholdUASValue, ocnCrntPMOTNAVGBERInitialize=ocnCrntPMOTNAVGBERInitialize, geVendorPN3=geVendorPN3, geHistPMSIZE256To511TimeStamp=geHistPMSIZE256To511TimeStamp, dataCommsPingTable=dataCommsPingTable, pvxL2IFCrntPMPortIdx=pvxL2IFCrntPMPortIdx, oaHistPMLaser2PowerTimeStamp=oaHistPMLaser2PowerTimeStamp, stmnHistPMRSESValue=stmnHistPMRSESValue, xcvrHistPMOTUSESValidity=xcvrHistPMOTUSESValidity, neAutoDeProv=neAutoDeProv, ocnCrntPMOTNBERTimeStamp=ocnCrntPMOTNBERTimeStamp, ocnHistPMOTNAVGBERValidity=ocnHistPMOTNAVGBERValidity, ethL1IFHistPMCVTimeStamp=ethL1IFHistPMCVTimeStamp, xcvrReceivedTraceLabel=xcvrReceivedTraceLabel, ospfIfStatus=ospfIfStatus, tl1IpLockoutCond=tl1IpLockoutCond, ocnCrntPMOTUESValidity=ocnCrntPMOTUESValidity, briCrntPMOPRTimeStamp=briCrntPMOPRTimeStamp, amdCustom2=amdCustom2, stsnForcedSwitchToWorkingCond=stsnForcedSwitchToWorkingCond, tl1LogMessage=tl1LogMessage, tl1LogTypeSpecificLogNum=tl1LogTypeSpecificLogNum, pvxL2IntfDlfLimit=pvxL2IntfDlfLimit, pluggableInvPortIdx=pluggableInvPortIdx, vcnXCRowStatus=vcnXCRowStatus, briHistPMOPRValue=briHistPMOPRValue, xcvrHistPMSIZE128To255TimeStamp=xcvrHistPMSIZE128To255TimeStamp, cpOperStatQlfr=cpOperStatQlfr, geHistPMSIZE256To511Value=geHistPMSIZE256To511Value, geHistPMTPFCTXValidity=geHistPMTPFCTXValidity, envLwPresClear=envLwPresClear, ocnHistPMOTUUASValidity=ocnHistPMOTUUASValidity, stsnHistPMCVPInitialize=stsnHistPMCVPInitialize, geHistPMOPTMaxValue=geHistPMOPTMaxValue, geLpbkOpTable=geLpbkOpTable, stsnProtSwOpShelfIdx=stsnProtSwOpShelfIdx, xcvrProtSwEvtType=xcvrProtSwEvtType, cpDbRecoveryFailClear=cpDbRecoveryFailClear, xcvrHistPMRSOFSValidity=xcvrHistPMRSOFSValidity, shelfMissingClear=shelfMissingClear, ethL1IFHistPMOPRMinInitialize=ethL1IFHistPMOPRMinInitialize, cpConnectorMismatchCond=cpConnectorMismatchCond, oaCrntPMVOAValidity=oaCrntPMVOAValidity, ocnCrntPMOPTMinValidity=ocnCrntPMOPTMinValidity, pvxL2IFCrntPMSIZE64Validity=pvxL2IFCrntPMSIZE64Validity, pvxL2IFPMThresholdUSIZEValue=pvxL2IFPMThresholdUSIZEValue, geHistPMSIZEOver1518Value=geHistPMSIZEOver1518Value, vcnIdx=vcnIdx, vcgXCProtShelfNum=vcgXCProtShelfNum, ocnCrntPMUNCRCDWValidity=ocnCrntPMUNCRCDWValidity, pvxL2IFCrntPMFCSEValue=pvxL2IFCrntPMFCSEValue, amdHistPMOPRValidity=amdHistPMOPRValidity, pluggableInvFailCond=pluggableInvFailCond, geHistPMTBYCRXValue=geHistPMTBYCRXValue, stmnCrntPMLBCTimeStamp=stmnCrntPMLBCTimeStamp, vcgXCProtPortNum=vcgXCProtPortNum, stsnLossOfPointerCond=stsnLossOfPointerCond, stmnForcedSwitchToProtectionCond=stmnForcedSwitchToProtectionCond, briPEC=briPEC, pvxL2IntfPriTCMapProfName=pvxL2IntfPriTCMapProfName, slotInvDataSlotIdx=slotInvDataSlotIdx, mstpCondNotifications=mstpCondNotifications, xcvrWavelengthNotAchievableClear=xcvrWavelengthNotAchievableClear, geHistPMTFRCTXInitialize=geHistPMTFRCTXInitialize, stmnCrntPMOPTMaxValidity=stmnCrntPMOPTMaxValidity, xcvrCrntPMOTUEBTimeStamp=xcvrCrntPMOTUEBTimeStamp, fcCrntPMTempValidity=fcCrntPMTempValidity, neAutoEnabledTimer=neAutoEnabledTimer, ocnLockoutProtectionClear=ocnLockoutProtectionClear, odunCondNotifications=odunCondNotifications, ocnHistPMOPRValue=ocnHistPMOPRValue, cpTable=cpTable, geHistPMUSIZETimeStamp=geHistPMUSIZETimeStamp, fcShelfIdx=fcShelfIdx, geEntry=geEntry, geHistPMLBCTimeStamp=geHistPMLBCTimeStamp, oaRemoteId=oaRemoteId, ocnCrntPMSlotIdx=ocnCrntPMSlotIdx, fcGfpMode=fcGfpMode, ethIntfMirrorConfig=ethIntfMirrorConfig, xcvrCrntPMSIZE64TimeStamp=xcvrCrntPMSIZE64TimeStamp, ethL1IFCrntPMOPRAvgInitialize=ethL1IFCrntPMOPRAvgInitialize, odunXCOdunTypeIdx=odunXCOdunTypeIdx, stsnLockoutProtectionClear=stsnLockoutProtectionClear, xcvrCrntPMJABRInitialize=xcvrCrntPMJABRInitialize, shelfInvPwrFeedAFailClear=shelfInvPwrFeedAFailClear, ospfNbrRtrId=ospfNbrRtrId, ethL1IFCrntPMLBCValue=ethL1IFCrntPMLBCValue, dbChangeOID=dbChangeOID, cpDbRestoreInProgressClear=cpDbRestoreInProgressClear, ntpClientPollingRate=ntpClientPollingRate, ocnHistPMUNCRCDWValidity=ocnHistPMUNCRCDWValidity, stsnHistPMCVPValidity=stsnHistPMCVPValidity, stmnCrntPMOTUSESInitialize=stmnCrntPMOTUSESInitialize, stmnPMThresholdRSESValue=stmnPMThresholdRSESValue, geCrntPMOPRValue=geCrntPMOPRValue, pvxL2IFHistPMSIZEOver1518Initialize=pvxL2IFHistPMSIZEOver1518Initialize, vcnXCProtTypeNum=vcnXCProtTypeNum, ocnTcaEvt=ocnTcaEvt, ocnCrntPMOPRTimeStamp=ocnCrntPMOPRTimeStamp, stmnCrntPMMSSESValue=stmnCrntPMMSSESValue, oaStatusChangeEvt=oaStatusChangeEvt, geCrntPMOPTTimeStamp=geCrntPMOPTTimeStamp, fcCrntPMCVTimeStamp=fcCrntPMCVTimeStamp, ocnHistPMSESSValue=ocnHistPMSESSValue, slotInvTable=slotInvTable, xcvrCrntPMRSBBETimeStamp=xcvrCrntPMRSBBETimeStamp, xcvrLpbkOpIdx=xcvrLpbkOpIdx, olsLossOfSyncClear=olsLossOfSyncClear, oaCrntPMOaTypeIdx=oaCrntPMOaTypeIdx, ethL1IFCrntPMSESInitialize=ethL1IFCrntPMSESInitialize, geCrntPMTPFCTXValue=geCrntPMTPFCTXValue, ocnOpticalPwrReceivedMinClear=ocnOpticalPwrReceivedMinClear, geHistPMPortIdx=geHistPMPortIdx, stmnHistPMNBITCR64BitInitialize=stmnHistPMNBITCR64BitInitialize, ethL1IFCrntPMOTUSESTimeStamp=ethL1IFCrntPMOTUSESTimeStamp, ocnCrntPMOTUESValue=ocnCrntPMOTUESValue, shelfInvDiscoveredMSISerialNum=shelfInvDiscoveredMSISerialNum, stsnXCProtPortNum=stsnXCProtPortNum, stsnProtSwOpEntry=stsnProtSwOpEntry, geCrntPMOPTMinInitialize=geCrntPMOPTMinInitialize, stsnHistPMFCPTimeStamp=stsnHistPMFCPTimeStamp, gcc0ConfigOperStatQlfr=gcc0ConfigOperStatQlfr, slotInvPackUSI=slotInvPackUSI, stsnXCSrcPortIdx=stsnXCSrcPortIdx, ethL1IFHistPMOPTAvgValue=ethL1IFHistPMOPTAvgValue, ethL1IFCrntPMSupplyVoltageTimeStamp=ethL1IFCrntPMSupplyVoltageTimeStamp, xcvrPMThresholdCVValue=xcvrPMThresholdCVValue, xcvrHistPMRSSESTimeStamp=xcvrHistPMRSSESTimeStamp, stsnCrntPMESPValidity=stsnCrntPMESPValidity, ocnCrntPMOTUBBEValue=ocnCrntPMOTUBBEValue, geHistPMOSIZEValidity=geHistPMOSIZEValidity, oaLaserTempMaxShutdownTh=oaLaserTempMaxShutdownTh, netMgmtUnmbrd=netMgmtUnmbrd, gePMThresholdEntry=gePMThresholdEntry, pvxL2IFHistPMSIZE64Value=pvxL2IFHistPMSIZE64Value, amdCrntPMEntry=amdCrntPMEntry, ocnHistPMOTUBBETimeStamp=ocnHistPMOTUBBETimeStamp, xcvrHistPMUNCRCDWInitialize=xcvrHistPMUNCRCDWInitialize, pvxL2IFCrntPMBCSTValue=pvxL2IFCrntPMBCSTValue, stmnCrntPMUNCRCDWTimeStamp=stmnCrntPMUNCRCDWTimeStamp, slotInvUnpluginEvt=slotInvUnpluginEvt, ocnHistPMUASSInitialize=ocnHistPMUASSInitialize, ntpOldTimeAndDate=ntpOldTimeAndDate, geCrntPMOPRAvgInitialize=geCrntPMOPRAvgInitialize, pvxL2IFHistPMTFRCTXTimeStamp=pvxL2IFHistPMTFRCTXTimeStamp, slotInvPwrFeedBFuseFailCond=slotInvPwrFeedBFuseFailCond, envAirCondClear=envAirCondClear, amdHistPMTypeIdx=amdHistPMTypeIdx, feSpeed=feSpeed, pluggableInvSlotIdx=pluggableInvSlotIdx, cpMismatchCond=cpMismatchCond, geHistPMFRGTInitialize=geHistPMFRGTInitialize, odunSlotIdx=odunSlotIdx, shelfInvRev=shelfInvRev, xcvrCrntPMSESSTimeStamp=xcvrCrntPMSESSTimeStamp, xcvrVendorPN1=xcvrVendorPN1, ethIntfLineMapping=ethIntfLineMapping, stmnHistPMRSUASValidity=stmnHistPMRSUASValidity, stmnLaserStatus=stmnLaserStatus, shelfEntry=shelfEntry, vcnTable=vcnTable, ethIntfMediaRate=ethIntfMediaRate, amdCrntPMTable=amdCrntPMTable)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrHistPMOTUSESValue=xcvrHistPMOTUSESValue, xcvrCrntPMFRGTTimeStamp=xcvrCrntPMFRGTTimeStamp, cpEntry=cpEntry, ocnCrntPMOTUESInitialize=ocnCrntPMOTUESInitialize, geHistPMOPRMinValue=geHistPMOPRMinValue, xcvrHistPMTFRCRXValue=xcvrHistPMTFRCRXValue, stsnXCTable=stsnXCTable, vcgXCSrcShelfIdx=vcgXCSrcShelfIdx, xcvrXCEntry=xcvrXCEntry, slotInvCoolingUnitFailClear=slotInvCoolingUnitFailClear, stsnXCEntry=stsnXCEntry, feRowStatus=feRowStatus, ocnHistPMOPTAvgInitialize=ocnHistPMOPTAvgInitialize, geHistPMOPTMaxTimeStamp=geHistPMOPTMaxTimeStamp, envAirComprClear=envAirComprClear, xcvrHistPMSIZE256To511Initialize=xcvrHistPMSIZE256To511Initialize, oaBackReflectionHighThresholdCond=oaBackReflectionHighThresholdCond, pvxL2IFCrntPMSlotIdx=pvxL2IFCrntPMSlotIdx, xcvrPMThresholdSESSValue=xcvrPMThresholdSESSValue, stmnCrntPMOPRAvgInitialize=stmnCrntPMOPRAvgInitialize, xcvrCrntPMSIZE64Initialize=xcvrCrntPMSIZE64Initialize, geHistPMTempValidity=geHistPMTempValidity, pvxL2IFHistPMTPFCTXTimeStamp=pvxL2IFHistPMTPFCTXTimeStamp, stsnProtSwitchEvt=stsnProtSwitchEvt, ethL1IFHistPMLBCValue=ethL1IFHistPMLBCValue, vcnCrntPMHPSESValue=vcnCrntPMHPSESValue, geLpbkOpSlotIdx=geLpbkOpSlotIdx, slotInvSlotIdx=slotInvSlotIdx, ocnCrntPMCVSInitialize=ocnCrntPMCVSInitialize, stmnHistPMOTNAVGBERValidity=stmnHistPMOTNAVGBERValidity, ethL1IFCrntPMNBITCR64BitValidity=ethL1IFCrntPMNBITCR64BitValidity, vcnBERTh=vcnBERTh, oaIdx=oaIdx, oaHistPMTable=oaHistPMTable, pvxL2IFHistPMTFRCRXValue=pvxL2IFHistPMTFRCRXValue, stmnCrntPMRSUASValue=stmnCrntPMRSUASValue, fcLossOfSequenceClear=fcLossOfSequenceClear, pvxL2IFCrntPMTFRCTXTimeStamp=pvxL2IFCrntPMTFRCTXTimeStamp, envCondNotifications=envCondNotifications, oaOperStatQlfr=oaOperStatQlfr, xcvrCrntPMJABRValidity=xcvrCrntPMJABRValidity, ethL1IFHistPMOTUUASInitialize=ethL1IFHistPMOTUUASInitialize, xcvrActAutoEnableTimer=xcvrActAutoEnableTimer, stsnProtSwStatus=stsnProtSwStatus, ocnHistPMNBYTCR64BitTimeStamp=ocnHistPMNBYTCR64BitTimeStamp, vcnHistPMHPEBInitialize=vcnHistPMHPEBInitialize, briHistPMSupplyVoltageValue=briHistPMSupplyVoltageValue, fcPayloadMismatchCond=fcPayloadMismatchCond, ethIntfPortIdx=ethIntfPortIdx, ethL1IFHistPMNBITCRValidity=ethL1IFHistPMNBITCRValidity, pvxL2IFHistPMSIZE512To1023Value=pvxL2IFHistPMSIZE512To1023Value, ethL1IFCrntPMOTUEBTimeStamp=ethL1IFCrntPMOTUEBTimeStamp, xcvrHistPMTBYCRXInitialize=xcvrHistPMTBYCRXInitialize, pluggableInvShelfIdx=pluggableInvShelfIdx, stsnCrntPMSESPValue=stsnCrntPMSESPValue, ocnLpbkOpShelfIdx=ocnLpbkOpShelfIdx, shelfInvOperations=shelfInvOperations, fcFPSD=fcFPSD, xcvrHistPMIntervalIdx=xcvrHistPMIntervalIdx, slotInvHiTempAutoShutdownClear=slotInvHiTempAutoShutdownClear, xcvrCrntPMOPRMinValue=xcvrCrntPMOPRMinValue, geLossOfSyncClear=geLossOfSyncClear, stsnXCDestSlotIdx=stsnXCDestSlotIdx, connections=connections, amdLineIdx=amdLineIdx, gePEC=gePEC, stsnCrntPMSESPTimeStamp=stsnCrntPMSESPTimeStamp, geHistPMSIZE128To255TimeStamp=geHistPMSIZE128To255TimeStamp, geCrntPMTPFCTXInitialize=geCrntPMTPFCTXInitialize, ocnHistPMOTUESValidity=ocnHistPMOTUESValidity, slotInvDataSlotTypeIdx=slotInvDataSlotTypeIdx, fcCondNotifications=fcCondNotifications, fcCrntPMOPRValidity=fcCrntPMOPRValidity, cpHistPMTable=cpHistPMTable, geCrntPMFRDRValue=geCrntPMFRDRValue, ocnLoopbackCond=ocnLoopbackCond, geHistPMTBYCRXValidity=geHistPMTBYCRXValidity, oaHistPMEntry=oaHistPMEntry, actCondTableEntryIdx=actCondTableEntryIdx, ocnCrntPMTempValidity=ocnCrntPMTempValidity, ocnPMThresholdShelfIdx=ocnPMThresholdShelfIdx, ethL1IFHistPMTempValue=ethL1IFHistPMTempValue, tcaDateAndTime=tcaDateAndTime, xcvrHistPMOTUEBInitialize=xcvrHistPMOTUEBInitialize, xcvrHistPMUASSTimeStamp=xcvrHistPMUASSTimeStamp, stsnHistPMCVPTimeStamp=stsnHistPMCVPTimeStamp, fcLossOfSignalClear=fcLossOfSignalClear, ocnHistPMOTUESValue=ocnHistPMOTUESValue, ocnHistPMNBYTCR64BitValidity=ocnHistPMNBYTCR64BitValidity, stmnCrntPMOPTMaxInitialize=stmnCrntPMOPTMaxInitialize, xcvrEntry=xcvrEntry, pvxL2IFPMThresholdIntervalTypeIdx=pvxL2IFPMThresholdIntervalTypeIdx, briCrntPMOPRMinInitialize=briCrntPMOPRMinInitialize, xcvrCrntPMFRGTInitialize=xcvrCrntPMFRGTInitialize, topology=topology, odunShelfIdx=odunShelfIdx, envHiHumClear=envHiHumClear, geSpeed=geSpeed, stmnCrntPMOTUESInitialize=stmnCrntPMOTUESInitialize, xcvrCrntPMOPRMaxValue=xcvrCrntPMOPRMaxValue, stmnHistPMRSESTimeStamp=stmnHistPMRSESTimeStamp, fcHistPMOPRAvgValidity=fcHistPMOPRAvgValidity, ethL1IFHistPMUASInitialize=ethL1IFHistPMUASInitialize, briHistPMOPTMaxTimeStamp=briHistPMOPTMaxTimeStamp, latestTl1LogNum=latestTl1LogNum, condNotifObjId=condNotifObjId, amdFiberType=amdFiberType, ethL1IFHistPMOTUSESValue=ethL1IFHistPMOTUSESValue, ocnOpticalPwrReceivedMaxClear=ocnOpticalPwrReceivedMaxClear, ethL1IFHistPMOPTMinTimeStamp=ethL1IFHistPMOPTMinTimeStamp, fcPMThresholdESValue=fcPMThresholdESValue, vcnTcaEvt=vcnTcaEvt, ocnHistPMOTUBBEInitialize=ocnHistPMOTUBBEInitialize, ethL1IFCrntPMNBITCR64BitInitialize=ethL1IFCrntPMNBITCR64BitInitialize, slotInvMissingClear=slotInvMissingClear, xcvrHistPMOSIZEValidity=xcvrHistPMOSIZEValidity, stmnCrntPMRSEBInitialize=stmnCrntPMRSEBInitialize, xcvrId1=xcvrId1, fcCrntPMESInitialize=fcCrntPMESInitialize, stsnHistPMPortIdx=stsnHistPMPortIdx, geHistPMSIZE64Validity=geHistPMSIZE64Validity, ethL1IFPMThresholdIntervalTypeIdx=ethL1IFPMThresholdIntervalTypeIdx, pvxL2IFCrntPMSIZE65To127Value=pvxL2IFCrntPMSIZE65To127Value, briCrntPMIntervalTypeIdx=briCrntPMIntervalTypeIdx, slotInvUpgradeFailureCond=slotInvUpgradeFailureCond, xcvrAlarmIndicationSignalCond=xcvrAlarmIndicationSignalCond, ethL1IFHistPMOPTAvgValidity=ethL1IFHistPMOPTAvgValidity, stmnHistPMOPRMaxInitialize=stmnHistPMOPRMaxInitialize, xcvrCrntPMSIZE128To255Value=xcvrCrntPMSIZE128To255Value, fcHistPMSESValue=fcHistPMSESValue, ethL1IFHistPMOTUBBEValue=ethL1IFHistPMOTUBBEValue, xcvrHistPMOTNAVGBERValidity=xcvrHistPMOTNAVGBERValidity, geOpticalPwrReceived=geOpticalPwrReceived, slotInvSlotTypeIdx=slotInvSlotTypeIdx, stsnCrntPMShelfIdx=stsnCrntPMShelfIdx, shelfInvSysCommCond=shelfInvSysCommCond, ocnCrntPMSEFSSTimeStamp=ocnCrntPMSEFSSTimeStamp, briOpticalPwrTransmittedMaxCond=briOpticalPwrTransmittedMaxCond, briCrntPMOPRMaxInitialize=briCrntPMOPRMaxInitialize, xcvrCrntPMOPTMaxInitialize=xcvrCrntPMOPTMaxInitialize, ethL1IFCrntPMUNCRCDWTimeStamp=ethL1IFCrntPMUNCRCDWTimeStamp, ocnPortIdx=ocnPortIdx, stmnCrntPMNBITCR64BitInitialize=stmnCrntPMNBITCR64BitInitialize, ethL1IFHistPMPortIdx=ethL1IFHistPMPortIdx, ocnLpbkOpEntry=ocnLpbkOpEntry, feMediaRate=feMediaRate, stmnCrntPMUNCRCDWValidity=stmnCrntPMUNCRCDWValidity, vcnSignalDegradeCond=vcnSignalDegradeCond, briHistPMOPRAvgTimeStamp=briHistPMOPRAvgTimeStamp, briHistPMOPTAvgValue=briHistPMOPTAvgValue, geCrntPMTFRCTXValue=geCrntPMTFRCTXValue, stmnHistPMOTUSESTimeStamp=stmnHistPMOTUSESTimeStamp, briCrntPMOPTAvgValidity=briCrntPMOPTAvgValidity, stmnProtGrpWorkSlotIdx=stmnProtGrpWorkSlotIdx, xcvrWavelengthNotAchievableCond=xcvrWavelengthNotAchievableCond, ipExtIntfCmdPrimaryState=ipExtIntfCmdPrimaryState, olsLossOfFrameCond=olsLossOfFrameCond, ocnCrntPMNBITCRValidity=ocnCrntPMNBITCRValidity, xcvrHistPMSIZE256To511TimeStamp=xcvrHistPMSIZE256To511TimeStamp, ocnHistPMUASSTimeStamp=ocnHistPMUASSTimeStamp, amdOperations=amdOperations, xcvrCrntPMSIZE65To127Validity=xcvrCrntPMSIZE65To127Validity, vcnHistPMHPESValidity=vcnHistPMHPESValidity, xcvrVendorPN2=xcvrVendorPN2, cpSynchronizationTypeIdx=cpSynchronizationTypeIdx, neGateway=neGateway, stmnHistPMNBYTCRInitialize=stmnHistPMNBYTCRInitialize, ocnHistPMOPTAvgTimeStamp=ocnHistPMOPTAvgTimeStamp, swMemberCondNotifications=swMemberCondNotifications, stsnCrntPMCVPValidity=stsnCrntPMCVPValidity, xcvrXCSrcSlotIdx=xcvrXCSrcSlotIdx, cpUpgradeInProgressClear=cpUpgradeInProgressClear, ocnLpbkOpSlotIdx=ocnLpbkOpSlotIdx, pluggableInvTxDisableImpl=pluggableInvTxDisableImpl, pluggableInvEncoding=pluggableInvEncoding, xcvrHistPMOPTAvgInitialize=xcvrHistPMOPTAvgInitialize, stmnHistPMSupplyVoltage2TimeStamp=stmnHistPMSupplyVoltage2TimeStamp, stmnHistPMOPTAvgInitialize=stmnHistPMOPTAvgInitialize, oaCrntPMOPTValue=oaCrntPMOPTValue, xcvrLossOfSyncClear=xcvrLossOfSyncClear, geHistPMTFRCTXValidity=geHistPMTFRCTXValidity, pvxL2IFPMThresholdFCSEValue=pvxL2IFPMThresholdFCSEValue, fcCrntPMPortIdx=fcCrntPMPortIdx, stsnProtSwOpTypeIdx=stsnProtSwOpTypeIdx, briRemoteId=briRemoteId, cpSoftwareBankAFailCond=cpSoftwareBankAFailCond, xcvrOpticalPwrTransmittedMinTh=xcvrOpticalPwrTransmittedMinTh, ocnCrntPMSupplyVoltageTimeStamp=ocnCrntPMSupplyVoltageTimeStamp, ethL1IFCrntPMLBCValidity=ethL1IFCrntPMLBCValidity, pvxL2IntfOperStatus=pvxL2IntfOperStatus, fePortIdx=fePortIdx, cpSoftwareBankBFailCond=cpSoftwareBankBFailCond, xcvrCrntPMUASValue=xcvrCrntPMUASValue, ocnHistPMOTUEBValue=ocnHistPMOTUEBValue, pvxL2IFHistPMSIZE512To1023Initialize=pvxL2IFHistPMSIZE512To1023Initialize, cpSynchronizationSecRefBasicSSM=cpSynchronizationSecRefBasicSSM, pvxL2IFCrntPMSIZE65To127Validity=pvxL2IFCrntPMSIZE65To127Validity, briCrntPMOPTMaxValidity=briCrntPMOPTMaxValidity, briHistPMOPTValue=briHistPMOPTValue, xcvrHistPMCVSValidity=xcvrHistPMCVSValidity, fcOpticalPwrTransmittedMinTh=fcOpticalPwrTransmittedMinTh, ethL1IFCrntPMSlotIdx=ethL1IFCrntPMSlotIdx, bti7000Mib=bti7000Mib, ethIntfOpticalPwrReceived=ethIntfOpticalPwrReceived, geOpticalPwrTransmittedMinCond=geOpticalPwrTransmittedMinCond, xcvrCrntPMESTimeStamp=xcvrCrntPMESTimeStamp, ethL1IFCrntPMOTNBERInitialize=ethL1IFCrntPMOTNBERInitialize, ethL1IFHistPMOTUUASValue=ethL1IFHistPMOTUUASValue, oaSlotIdx=oaSlotIdx, vcnXCSrcShelfIdx=vcnXCSrcShelfIdx, fcRowStatus=fcRowStatus, xcvrTempMaxClear=xcvrTempMaxClear, ipExtIntfAddress=ipExtIntfAddress, stsnForcedSwitchToWorkingClear=stsnForcedSwitchToWorkingClear, stmnCrntPMOTNBERInitialize=stmnCrntPMOTNBERInitialize, stmnHistPMRSESValidity=stmnHistPMRSESValidity, netMgmtMACAddr=netMgmtMACAddr, pvxL2IFHistPMSIZEOver1518TimeStamp=pvxL2IFHistPMSIZEOver1518TimeStamp, slotInvUpgradeInProgressClear=slotInvUpgradeInProgressClear, vcnHistPMEntry=vcnHistPMEntry, geHistPMSupplyVoltageValue=geHistPMSupplyVoltageValue, xcvrProtSwOpTypeIdx=xcvrProtSwOpTypeIdx, xcvrHistPMFRDRInitialize=xcvrHistPMFRDRInitialize, stmnHistPMOPTMinTimeStamp=stmnHistPMOPTMinTimeStamp, stmnCrntPMRSEBValidity=stmnCrntPMRSEBValidity, geCrntPMUSIZEInitialize=geCrntPMUSIZEInitialize, xcvrHistPMCVSInitialize=xcvrHistPMCVSInitialize, pvxL2IFHistPMTPFCRXInitialize=pvxL2IFHistPMTPFCRXInitialize, geCrntPMOPTMaxInitialize=geCrntPMOPTMaxInitialize, xcvrHistPMOTNBERValidity=xcvrHistPMOTNBERValidity, geCrntPMSESValue=geCrntPMSESValue, pvxL2IFHistPMTPFCTXValidity=pvxL2IFHistPMTPFCTXValidity, ethL1IFCrntPMNBITCRTimeStamp=ethL1IFCrntPMNBITCRTimeStamp, ocnCrntPMUNCRCDWInitialize=ocnCrntPMUNCRCDWInitialize, ethPortCondNotifications=ethPortCondNotifications, ethL1IFHistPMOPTMinInitialize=ethL1IFHistPMOPTMinInitialize, xcvrCrntPMRSOFSValidity=xcvrCrntPMRSOFSValidity, xcvrCrntPMNBYTCRInitialize=xcvrCrntPMNBYTCRInitialize, oscSfpMissingClear=oscSfpMissingClear, fcOpticalPwrReceivedMaxClear=fcOpticalPwrReceivedMaxClear, xcvrPMThresholdESSValue=xcvrPMThresholdESSValue, pvxL2IFCrntPMBCSTInitialize=pvxL2IFCrntPMBCSTInitialize, geHistPMTFRCRXInitialize=geHistPMTFRCRXInitialize, ethL1IFHistPMOTNBERTimeStamp=ethL1IFHistPMOTNBERTimeStamp, ocnCrntPMSEFSSValidity=ocnCrntPMSEFSSValidity, oaOOBRSDOpTimer=oaOOBRSDOpTimer, geCrntPMOPRMinTimeStamp=geCrntPMOPRMinTimeStamp, xcvrPMThresholdOTUBBEValue=xcvrPMThresholdOTUBBEValue, xcvrProtGrpWorkTypeIdx=xcvrProtGrpWorkTypeIdx, pvxL2IFHistPMPortTypeIdx=pvxL2IFHistPMPortTypeIdx, fcAutoEnableTimer=fcAutoEnableTimer, fcLossOfSequenceCond=fcLossOfSequenceCond, oaCrntPMCaseTempValidity=oaCrntPMCaseTempValidity, amdHistPMVOATimeStamp=amdHistPMVOATimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", tl1UserLockoutClear=tl1UserLockoutClear, xcvrCrntPMOSIZEValue=xcvrCrntPMOSIZEValue, ocnHistPMOPTMaxTimeStamp=ocnHistPMOPTMaxTimeStamp, amdOpticalPwrReceivedMaxTh=amdOpticalPwrReceivedMaxTh, fcCrntPMOPTAvgTimeStamp=fcCrntPMOPTAvgTimeStamp, ocnProtSwOpTypeIdx=ocnProtSwOpTypeIdx, stmnCrntPMMSUASValidity=stmnCrntPMMSUASValidity, stsnEntry=stsnEntry, ethL1IFHistPMINVBLKTimeStamp=ethL1IFHistPMINVBLKTimeStamp, oaOpticalPwrReceivedMaxClear=oaOpticalPwrReceivedMaxClear, xcvrReceivedLockoutCond=xcvrReceivedLockoutCond, actAlarmDateAndTime=actAlarmDateAndTime, briCrntPMOPTMinInitialize=briCrntPMOPTMinInitialize, geMediaRate=geMediaRate, ocnCrntPMOTNAVGBERValue=ocnCrntPMOTNAVGBERValue, xcvrCrntPMUSIZEValue=xcvrCrntPMUSIZEValue, ethL1IFHistPMOTNAVGBERValue=ethL1IFHistPMOTNAVGBERValue, stmnCrntPMOTUSESTimeStamp=stmnCrntPMOTUSESTimeStamp, pluggableInvVendorOUI=pluggableInvVendorOUI, briCrntPMSlotIdx=briCrntPMSlotIdx, ocnHistPMOTUSESValue=ocnHistPMOTUSESValue, geCrntPMPortIdx=geCrntPMPortIdx, olsSignalDegradeCond=olsSignalDegradeCond, ocnHistPMOPTMaxValidity=ocnHistPMOPTMaxValidity, ocnHistPMOPTMinTimeStamp=ocnHistPMOPTMinTimeStamp, vcnUnequippedClear=vcnUnequippedClear, geHistPMSupplyVoltageTimeStamp=geHistPMSupplyVoltageTimeStamp, briCrntPMOPTValidity=briCrntPMOPTValidity, oaCustom3=oaCustom3, ocnLoopbackClear=ocnLoopbackClear, ethL1IFHistPMOPTMaxInitialize=ethL1IFHistPMOPTMaxInitialize, vcnXCDestSlotIdx=vcnXCDestSlotIdx, xcvrCrntPMSIZE128To255Validity=xcvrCrntPMSIZE128To255Validity, ocnProtSwOpSlotIdx=ocnProtSwOpSlotIdx, amdCrntPMLitChnValue=amdCrntPMLitChnValue, stmnProtGrpWorkTypeIdx=stmnProtGrpWorkTypeIdx, stmnCrntPMRSEBValue=stmnCrntPMRSEBValue, ocnCrntPMOTUOFSValidity=ocnCrntPMOTUOFSValidity, stmnCrntPMMSEBInitialize=stmnCrntPMMSEBInitialize, ocnOperations=ocnOperations, fcHistPMSupplyVoltageValidity=fcHistPMSupplyVoltageValidity, ethL1IFCrntPMESTimeStamp=ethL1IFCrntPMESTimeStamp, ocnCrntPMSESLTimeStamp=ocnCrntPMSESLTimeStamp, shelfIdx=shelfIdx, geXcvrMismatchClear=geXcvrMismatchClear, shelfInvTestDate=shelfInvTestDate, stmnHistPMOPRMaxValidity=stmnHistPMOPRMaxValidity, swUpgradeCheckAlm=swUpgradeCheckAlm, briHistPMOPTMaxValue=briHistPMOPTMaxValue, stsnShelfIdx=stsnShelfIdx, stsnCrntPMIntervalTypeIdx=stsnCrntPMIntervalTypeIdx, pvxL2IFCrntPMTFRCTXValidity=pvxL2IFCrntPMTFRCTXValidity, xcvrHistPMTFRCRXTimeStamp=xcvrHistPMTFRCRXTimeStamp, xcvrCrntPMTFRCRXValue=xcvrCrntPMTFRCRXValue, ocnCrntPMCVSTimeStamp=ocnCrntPMCVSTimeStamp, slotInvDataShelfIdx=slotInvDataShelfIdx, ethIntfPEC=ethIntfPEC, pvxL2IFHistPMFRGTTimeStamp=pvxL2IFHistPMFRGTTimeStamp, stsnHistPMUASPValue=stsnHistPMUASPValue, fcWavelength=fcWavelength, pvxL2IFCrntPMSIZE1024To1518Validity=pvxL2IFCrntPMSIZE1024To1518Validity, xcvrHistPMRSEBValidity=xcvrHistPMRSEBValidity, ocnCrntPMESSValue=ocnCrntPMESSValue, oaLaserTempMinShutdownTh=oaLaserTempMinShutdownTh, geHistPMTPFCTXTimeStamp=geHistPMTPFCTXTimeStamp, pluggableInvMismatchCond=pluggableInvMismatchCond, geCrntPMTPFCTXTimeStamp=geCrntPMTPFCTXTimeStamp, vcnHistPMHPEBTimeStamp=vcnHistPMHPEBTimeStamp, xcvrHistPMSESSTimeStamp=xcvrHistPMSESSTimeStamp, geCrntPMSIZE65To127Value=geCrntPMSIZE65To127Value, oaLaserMaxTempShutdownCond=oaLaserMaxTempShutdownCond, stmnHistPMRSESInitialize=stmnHistPMRSESInitialize, geHistPMTFRCTXValue=geHistPMTFRCTXValue, ocnCrntPMSESSValue=ocnCrntPMSESSValue, stmnHistPMOPRAvgValue=stmnHistPMOPRAvgValue, xcvrCrntPMNBITCRValidity=xcvrCrntPMNBITCRValidity, odunXCSrcSlotIdx=odunXCSrcSlotIdx, amdEvtNotifications=amdEvtNotifications, stmnHistPMShelfIdx=stmnHistPMShelfIdx, vcnHistPMHPBBETimeStamp=vcnHistPMHPBBETimeStamp, vcnCrntPMHPBBEInitialize=vcnCrntPMHPBBEInitialize, xcvrHistPMUSIZEInitialize=xcvrHistPMUSIZEInitialize, ethL1IFCrntPMNBYTCRTimeStamp=ethL1IFCrntPMNBYTCRTimeStamp, envCondAttrEntry=envCondAttrEntry, stmnOpticalPwrTransmittedMaxCond=stmnOpticalPwrTransmittedMaxCond, shelfDiscConfig=shelfDiscConfig, xcvrLockoutProtectionClear=xcvrLockoutProtectionClear, geOpticalPwrTransmittedMaxCond=geOpticalPwrTransmittedMaxCond, xcvrTable=xcvrTable, pvxL2IFCrntPMSIZE128To255Validity=pvxL2IFCrntPMSIZE128To255Validity, pvxL2IFHistPMMCSTValue=pvxL2IFHistPMMCSTValue, shelfInvType=shelfInvType, stmnCrntPMOPRAvgTimeStamp=stmnCrntPMOPRAvgTimeStamp, xcvrXCSrcShelfIdx=xcvrXCSrcShelfIdx, condDescription=condDescription, geHistPMBCSTInitialize=geHistPMBCSTInitialize, xcvrCrntPMRSESTimeStamp=xcvrCrntPMRSESTimeStamp, briOpticalPwrReceivedMinTh=briOpticalPwrReceivedMinTh, geCrntPMBCSTTimeStamp=geCrntPMBCSTTimeStamp, envVentnClear=envVentnClear, olsOpticalPwrTransmittedMinCond=olsOpticalPwrTransmittedMinCond, geHistPMESValue=geHistPMESValue, vcgSlotIdx=vcgSlotIdx, xcvrCrntPMSupplyVoltage2TimeStamp=xcvrCrntPMSupplyVoltage2TimeStamp, stmnHistPMOPRMinValue=stmnHistPMOPRMinValue, ocnCrntPMSupplyVoltage2Validity=ocnCrntPMSupplyVoltage2Validity, ospfGeneralGroupEntry=ospfGeneralGroupEntry, xcvrCrntPMOTUOFSTimeStamp=xcvrCrntPMOTUOFSTimeStamp, geHistPMUASTimeStamp=geHistPMUASTimeStamp, ocnCrntPMOPTMaxTimeStamp=ocnCrntPMOPTMaxTimeStamp, xcvrHistPMRSSESInitialize=xcvrHistPMRSSESInitialize, pluggableInvMissingClear=pluggableInvMissingClear, ocnCrntPMUASLValue=ocnCrntPMUASLValue, fcHistPMESValidity=fcHistPMESValidity, briLoopbackClear=briLoopbackClear, xcvrCrntPMBCSTValue=xcvrCrntPMBCSTValue, xcvrCrntPMSIZE512To1023Initialize=xcvrCrntPMSIZE512To1023Initialize, pvxL2IFCrntPMSIZE65To127Initialize=pvxL2IFCrntPMSIZE65To127Initialize, amdLossOfSignalClear=amdLossOfSignalClear, briXcvrMismatchClear=briXcvrMismatchClear, ocnHistPMSupplyVoltage2Validity=ocnHistPMSupplyVoltage2Validity, vcnOperations=vcnOperations, geHistPMBCSTTimeStamp=geHistPMBCSTTimeStamp, pvxL2IFPMThresholdPortIdx=pvxL2IFPMThresholdPortIdx, xcvrSignalDegradeClear=xcvrSignalDegradeClear, pvxL2IntfTrustIncomingPCP=pvxL2IntfTrustIncomingPCP, stsnCrntPMESPInitialize=stsnCrntPMESPInitialize, stmnPMThresholdMSESValue=stmnPMThresholdMSESValue, pvxL2IFCrntPMTBYCRXInitialize=pvxL2IFCrntPMTBYCRXInitialize, cpCondNotifications=cpCondNotifications, xcvrHistPMSupplyVoltageValue=xcvrHistPMSupplyVoltageValue, stmnCrntPMRSBBEValue=stmnCrntPMRSBBEValue, stmnCrntPMOTUSESValue=stmnCrntPMOTUSESValue, oaCrntPMVOAValue=oaCrntPMVOAValue, adminOperations=adminOperations, gePMThresholdOSIZEValue=gePMThresholdOSIZEValue, tcaValue=tcaValue, ocnHistPMSESSValidity=ocnHistPMSESSValidity, stmnCrntPMOTNBERValue=stmnCrntPMOTNBERValue, olsInputLOSCond=olsInputLOSCond, envCpMinorCond=envCpMinorCond, envToxicGasCond=envToxicGasCond, shelfInvDiscoveredShelfNum=shelfInvDiscoveredShelfNum, oaOpticalPwrReceivedMinClear=oaOpticalPwrReceivedMinClear, envCpMajorCond=envCpMajorCond, stmnCrntPMOTUEBTimeStamp=stmnCrntPMOTUEBTimeStamp, geCrntPMTBYCTXInitialize=geCrntPMTBYCTXInitialize, stmnOpticalPwrReceivedMinTh=stmnOpticalPwrReceivedMinTh, oaHistPMLaser1TempValue=oaHistPMLaser1TempValue, briHistPMSupplyVoltageValidity=briHistPMSupplyVoltageValidity, xcvrHistPMESSTimeStamp=xcvrHistPMESSTimeStamp, ocnCrntPMLBCTimeStamp=ocnCrntPMLBCTimeStamp, geHistPMLBCValue=geHistPMLBCValue, ocnCrntPMSupplyVoltageValue=ocnCrntPMSupplyVoltageValue, geAutoEnableTimer=geAutoEnableTimer, ocnLockoutWorkingCond=ocnLockoutWorkingCond, conditions=conditions, fcCrntPMOPRMinTimeStamp=fcCrntPMOPRMinTimeStamp, ethL1IFHistPMNBITCRInitialize=ethL1IFHistPMNBITCRInitialize, pvxL2IFCrntPMSIZE256To511Validity=pvxL2IFCrntPMSIZE256To511Validity, oaLaserMinTempShutdownClear=oaLaserMinTempShutdownClear, dataCommsCondNotifications=dataCommsCondNotifications, olsBackwardDefectIndicatorCond=olsBackwardDefectIndicatorCond, stmnHistPMRSSESValidity=stmnHistPMRSSESValidity, xcvrCrntPMOTUBBEInitialize=xcvrCrntPMOTUBBEInitialize, geHistPMUASValue=geHistPMUASValue, xcvrPMThresholdCVSValue=xcvrPMThresholdCVSValue, fcHistPMOPRAvgTimeStamp=fcHistPMOPRAvgTimeStamp, pvxL2IFHistPMOSIZEInitialize=pvxL2IFHistPMOSIZEInitialize, fcFiberType=fcFiberType, pvxL2IFHistPMTBYCTXInitialize=pvxL2IFHistPMTBYCTXInitialize, ntpClientSyncState=ntpClientSyncState, stsnHistPMSlotIdx=stsnHistPMSlotIdx, geHistPMIntervalIdx=geHistPMIntervalIdx, stmnProtSwitchEvt=stmnProtSwitchEvt, cpDbDeletionInProgressCond=cpDbDeletionInProgressCond, slotInvTempShutdownTh=slotInvTempShutdownTh, oaCrntPMOPRValue=oaCrntPMOPRValue, odunXCEntry=odunXCEntry, envLwHumClear=envLwHumClear, xcvrCrntPMFRDRValidity=xcvrCrntPMFRDRValidity, xcvrPMThresholdUASValue=xcvrPMThresholdUASValue, pvxL2IFHistPMPortIdx=pvxL2IFHistPMPortIdx, ethL1IFCrntPMCVInitialize=ethL1IFCrntPMCVInitialize, xcvrCrntPMSIZE128To255TimeStamp=xcvrCrntPMSIZE128To255TimeStamp, stmnHistPMSupplyVoltageValue=stmnHistPMSupplyVoltageValue, ocnHistPMOPRMinInitialize=ocnHistPMOPRMinInitialize, stsnCrntPMIdx=stsnCrntPMIdx, pvxL2IFCrntPMFCSEValidity=pvxL2IFCrntPMFCSEValidity, stmnHistPMRSUASTimeStamp=stmnHistPMRSUASTimeStamp, shelfInvExpansionShelfCommLOSCond=shelfInvExpansionShelfCommLOSCond, xcvrPMThresholdSEFSSValue=xcvrPMThresholdSEFSSValue, amdCondNotifications=amdCondNotifications, snmpTrapRcvIdx=snmpTrapRcvIdx, briCrntPMLBCTimeStamp=briCrntPMLBCTimeStamp, ospfLsdbRouterId=ospfLsdbRouterId, ipExtIntfProxyARPStatus=ipExtIntfProxyARPStatus, stmnHistPMNBYTCRValidity=stmnHistPMNBYTCRValidity, xcvrHistPMOSIZETimeStamp=xcvrHistPMOSIZETimeStamp, cpSynchronizationEntry=cpSynchronizationEntry, pluggableInvNomBitRate=pluggableInvNomBitRate, ospfGeneralTable=ospfGeneralTable, ocnHistPMUASLInitialize=ocnHistPMUASLInitialize, vcnPMThresholdByPortIntervalTypeIdx=vcnPMThresholdByPortIntervalTypeIdx, stmnProtSwOpTypeIdx=stmnProtSwOpTypeIdx, pvxL2IFCrntPMUSIZEInitialize=pvxL2IFCrntPMUSIZEInitialize, xcvrCrntPMRSOFSValue=xcvrCrntPMRSOFSValue, xcvrCrntPMOTUSESValidity=xcvrCrntPMOTUSESValidity, stmnPMThresholdMSSESValue=stmnPMThresholdMSSESValue, pvxL2IFCrntPMSIZE128To255Initialize=pvxL2IFCrntPMSIZE128To255Initialize, geCustom1=geCustom1, ethL1IFHistPMEntry=ethL1IFHistPMEntry, ocnHistPMSEFSSValue=ocnHistPMSEFSSValue, geCrntPMSIZE65To127Validity=geCrntPMSIZE65To127Validity, fcHistPMOPTMaxValidity=fcHistPMOPTMaxValidity, xcvrWavelength=xcvrWavelength, xcvrHistPMTFRCRXInitialize=xcvrHistPMTFRCRXInitialize, ocnHistPMOPTMinValue=ocnHistPMOPTMinValue, stmnCrntPMOPRAvgValidity=stmnCrntPMOPRAvgValidity, xcvrHistPMRSESValidity=xcvrHistPMRSESValidity, xcvrHistPMJABRValue=xcvrHistPMJABRValue, envFloodCond=envFloodCond, ethL1IFCrntPMSupplyVoltageValidity=ethL1IFCrntPMSupplyVoltageValidity, cpSynchronizationTimingMode=cpSynchronizationTimingMode, xcvrHistPMOTUUASInitialize=xcvrHistPMOTUUASInitialize, xcvrCrntPMRSEBTimeStamp=xcvrCrntPMRSEBTimeStamp, pvxL2IntfType=pvxL2IntfType, stmnHistPMUNCRCDWValue=stmnHistPMUNCRCDWValue, stmnAlarmIndicationSignalClear=stmnAlarmIndicationSignalClear, ethL1IFHistPMNBYTCRValidity=ethL1IFHistPMNBYTCRValidity, stmnProtGrpProtSlotIdx=stmnProtGrpProtSlotIdx, ocnLossOfSignalCond=ocnLossOfSignalCond, feEntry=feEntry, pvxL2IFHistPMOSIZEValue=pvxL2IFHistPMOSIZEValue, stmnHistPMRSBBEValidity=stmnHistPMRSBBEValidity, geHistPMSIZE1024To1518Validity=geHistPMSIZE1024To1518Validity, fcVendorPN2=fcVendorPN2, stmnCrntPMMSBBEValidity=stmnCrntPMMSBBEValidity, xcvrProtSwOpCmd=xcvrProtSwOpCmd, vcnHistPMHPSESValidity=vcnHistPMHPSESValidity, geHistPMOPTAvgInitialize=geHistPMOPTAvgInitialize, xcvrCrntPMOTUOFSValue=xcvrCrntPMOTUOFSValue, xcvrHistPMSESSValue=xcvrHistPMSESSValue, vcgXCSrcIdx=vcgXCSrcIdx, stmnProtSwOpSlotIdx=stmnProtSwOpSlotIdx, ethL1IFHistPMNBYTCR64BitValidity=ethL1IFHistPMNBYTCR64BitValidity, fcHistPMShelfIdx=fcHistPMShelfIdx, netMgmtStatusChangeEvt=netMgmtStatusChangeEvt, xcvrCrntPMOPTMinValue=xcvrCrntPMOPTMinValue, xcvrPMThresholdOTUOFSValue=xcvrPMThresholdOTUOFSValue, xcvrPMThresholdRSSESValue=xcvrPMThresholdRSSESValue, ocnHistPMOPRTimeStamp=ocnHistPMOPRTimeStamp, snmpTrapRcvIPAddr=snmpTrapRcvIPAddr, passivePortWavelength=passivePortWavelength)
mibBuilder.exportSymbols("BTI-7000-MIB", stmnHistPMOTUESTimeStamp=stmnHistPMOTUESTimeStamp, geCrntPMSIZEOver1518Validity=geCrntPMSIZEOver1518Validity, ethL1IFCrntPMOPTMaxInitialize=ethL1IFCrntPMOPTMaxInitialize, pvxL2IFHistPMTFRCTXValidity=pvxL2IFHistPMTFRCTXValidity, gePMThresholdCVValue=gePMThresholdCVValue, ethIntfOpticalPwrReceivedMaxTh=ethIntfOpticalPwrReceivedMaxTh, xcvrCrntPMESValidity=xcvrCrntPMESValidity, snmpTrapRcvEntry=snmpTrapRcvEntry, vcnProtSwOpTable=vcnProtSwOpTable, stmnHistPMMSEBValidity=stmnHistPMMSEBValidity, ocnHistPMOTUOFSInitialize=ocnHistPMOTUOFSInitialize, ocnCondNotifications=ocnCondNotifications, xcvrCrntPMNBITCRInitialize=xcvrCrntPMNBITCRInitialize, stmnCrntPMMSESTimeStamp=stmnCrntPMMSESTimeStamp, stmnCrntPMOTUUASInitialize=stmnCrntPMOTUUASInitialize, pvxL2IntfCoSProfileId=pvxL2IntfCoSProfileId, xcvrTempMaxCond=xcvrTempMaxCond, neDateAndTime=neDateAndTime, stsnAlarmIndicationSignalCond=stsnAlarmIndicationSignalCond, briCrntPMOPRMinTimeStamp=briCrntPMOPRMinTimeStamp, shelfInvChassisCLEI=shelfInvChassisCLEI, xcvrCrntPMBCSTTimeStamp=xcvrCrntPMBCSTTimeStamp, xcvrHistPMUASValidity=xcvrHistPMUASValidity, geCrntPMMCSTInitialize=geCrntPMMCSTInitialize, geHistPMSESTimeStamp=geHistPMSESTimeStamp, ipExtIntfNumberedStatus=ipExtIntfNumberedStatus, protection=protection, stsnTypeIdx=stsnTypeIdx, oscIdx=oscIdx, actAlarmTableEntryIdx=actAlarmTableEntryIdx, xcvrForcedSwitchToProtectionClear=xcvrForcedSwitchToProtectionClear, oaCrntPMLaser1CurrentTimeStamp=oaCrntPMLaser1CurrentTimeStamp, pvxL2IFCrntPMTFRCTXInitialize=pvxL2IFCrntPMTFRCTXInitialize, envCpMinorClear=envCpMinorClear, ocnHistPMOTNBERValue=ocnHistPMOTNBERValue, geHistPMOSIZETimeStamp=geHistPMOSIZETimeStamp, cpStorageCardFailCond=cpStorageCardFailCond, xcvrHistPMUNCRCDWTimeStamp=xcvrHistPMUNCRCDWTimeStamp, ocnCrntPMOPRMinTimeStamp=ocnCrntPMOPRMinTimeStamp, ocnHistPMOPTAvgValue=ocnHistPMOPTAvgValue, oaCaseTempMaxShutdownTh=oaCaseTempMaxShutdownTh, stmnCrntPMTempValidity=stmnCrntPMTempValidity, geCrntPMESValidity=geCrntPMESValidity, pvxL2IFCrntPMSIZE256To511TimeStamp=pvxL2IFCrntPMSIZE256To511TimeStamp, ocnOpticalPwrReceived=ocnOpticalPwrReceived, xcvrCrntPMOTUUASValue=xcvrCrntPMOTUUASValue, oscCustom1=oscCustom1, ocnHistPMPortIdx=ocnHistPMPortIdx, geHistPMUSIZEValue=geHistPMUSIZEValue, ocnOpticalPwrTransmittedMinTh=ocnOpticalPwrTransmittedMinTh, dbBackupAndRestoreResult=dbBackupAndRestoreResult, fcCrntPMOPTMaxValidity=fcCrntPMOPTMaxValidity, stmnCrntPMMSESValue=stmnCrntPMMSESValue, oaHistPMOPRTimeStamp=oaHistPMOPRTimeStamp, tl1UserTable=tl1UserTable, ethL1IFCrntPMUASValue=ethL1IFCrntPMUASValue, stsnProtSwOpIdx=stsnProtSwOpIdx, ethIntfLldpRemChassisIdSubtype=ethIntfLldpRemChassisIdSubtype, geCrntPMESValue=geCrntPMESValue, ocnRemoteId=ocnRemoteId, geCrntPMOSIZEValue=geCrntPMOSIZEValue, xcvrLpbkOpTable=xcvrLpbkOpTable, ospfNbrTable=ospfNbrTable, fcCrntPMTempTimeStamp=fcCrntPMTempTimeStamp, pluggableInvFailClear=pluggableInvFailClear, ethL1IFHistPMOPTMinValue=ethL1IFHistPMOPTMinValue, xcvrHistPMUASSValue=xcvrHistPMUASSValue, envDoorOpenClear=envDoorOpenClear, xcvrCrntPMSESSValue=xcvrCrntPMSESSValue, oaCrntPMOPTTimeStamp=oaCrntPMOPTTimeStamp, envCondAttrDescription=envCondAttrDescription, fcCustom1=fcCustom1, stsnCrntPMSESPInitialize=stsnCrntPMSESPInitialize, slotInvHTThreshExceededClear=slotInvHTThreshExceededClear, ospfRowStatus=ospfRowStatus, fcLossOfAlignmentClear=fcLossOfAlignmentClear, dbChangeEvt=dbChangeEvt, stsnCrntPMFCPTimeStamp=stsnCrntPMFCPTimeStamp, xcvrCrntPMRSOFSTimeStamp=xcvrCrntPMRSOFSTimeStamp, geCrntPMTFRCRXValue=geCrntPMTFRCRXValue, cpSynchronizationSwitchEvt=cpSynchronizationSwitchEvt, cpUpgradeFailClear=cpUpgradeFailClear, neOperations=neOperations, stmnCrntPMSupplyVoltageTimeStamp=stmnCrntPMSupplyVoltageTimeStamp, stmnHistPMRSSESTimeStamp=stmnHistPMRSSESTimeStamp, geLossOfAlignmentClear=geLossOfAlignmentClear, stmnOpticalPwrTransmittedMaxTh=stmnOpticalPwrTransmittedMaxTh, serialDataBits=serialDataBits, fcHistPMOPRAvgValue=fcHistPMOPRAvgValue, stmnPMThresholdSlotIdx=stmnPMThresholdSlotIdx, shelfInvTempMaxCond=shelfInvTempMaxCond, xcvrHistPMOTNBERValue=xcvrHistPMOTNBERValue, ethIntfBER=ethIntfBER, geCrntPMUASValue=geCrntPMUASValue, stmnOperStatQlfr=stmnOperStatQlfr, ethL1IFHistPMOTNAVGBERInitialize=ethL1IFHistPMOTNAVGBERInitialize, stmnPMThresholdOTUEBValue=stmnPMThresholdOTUEBValue, vcnHistPMHPBBEValue=vcnHistPMHPBBEValue, olsOTUTrailTraceMismatchCond=olsOTUTrailTraceMismatchCond, oaHistPMOBRValidity=oaHistPMOBRValidity, geCrntPMOPTValidity=geCrntPMOPTValidity, stsnHistPMSESPTimeStamp=stsnHistPMSESPTimeStamp, cpDbBackupResultEvt=cpDbBackupResultEvt, ocnHistPMSESSInitialize=ocnHistPMSESSInitialize, slotInvPackRev=slotInvPackRev, amdOpticalAttenuationTarget=amdOpticalAttenuationTarget, ethL1IFCrntPMEntry=ethL1IFCrntPMEntry, xcvrHistPMCVInitialize=xcvrHistPMCVInitialize, stmnCrntPMMSUASTimeStamp=stmnCrntPMMSUASTimeStamp, oaOOBRSDOpShelfIdx=oaOOBRSDOpShelfIdx, shelfEvtNotifications=shelfEvtNotifications, amdHistPMOPTValue=amdHistPMOPTValue, actCondInstanceIdx=actCondInstanceIdx, fcHistPMOPTTimeStamp=fcHistPMOPTTimeStamp, xcvrCrntPMOTUUASTimeStamp=xcvrCrntPMOTUUASTimeStamp, snmpTrapRcvNotifType=snmpTrapRcvNotifType, xcvrHistPMOPRValue=xcvrHistPMOPRValue, xcvrPMThresholdFCSEValue=xcvrPMThresholdFCSEValue, xcvrOperations=xcvrOperations, geCrntPMSIZE1024To1518Value=geCrntPMSIZE1024To1518Value, fcCrntPMOPRMinValidity=fcCrntPMOPRMinValidity, fcHistPMCVValue=fcHistPMCVValue, ethL1IFCrntPMOPTAvgValue=ethL1IFCrntPMOPTAvgValue, stmnHistPMIntervalIdx=stmnHistPMIntervalIdx, xcvrCrntPMSIZE512To1023TimeStamp=xcvrCrntPMSIZE512To1023TimeStamp, stmnHistPMRSOFSValidity=stmnHistPMRSOFSValidity, ethL1IFHistPMOTUESInitialize=ethL1IFHistPMOTUESInitialize, xcvrHistPMRSEBInitialize=xcvrHistPMRSEBInitialize, briCrntPMOPTMaxTimeStamp=briCrntPMOPTMaxTimeStamp, dbBackupAndRestoreCheckSysName=dbBackupAndRestoreCheckSysName, oscSlotIdx=oscSlotIdx, stmnProtSwOpTable=stmnProtSwOpTable, actAlarmReportType=actAlarmReportType, synchronization=synchronization, stmnCrntPMOPTAvgInitialize=stmnCrntPMOPTAvgInitialize, stmnCrntPMShelfIdx=stmnCrntPMShelfIdx, fcPMThresholdIntervalTypeIdx=fcPMThresholdIntervalTypeIdx, pvxL2IFCrntPMSIZE128To255Value=pvxL2IFCrntPMSIZE128To255Value, pvxL2IFHistPMBCSTInitialize=pvxL2IFHistPMBCSTInitialize, geXcvrMismatchCond=geXcvrMismatchCond, xcvrHistPMOTUEBTimeStamp=xcvrHistPMOTUEBTimeStamp, fcXcvrMismatchClear=fcXcvrMismatchClear, slotInvHiTempAutoShutdownCond=slotInvHiTempAutoShutdownCond, neSiteNum=neSiteNum, ocnHistPMOPRAvgValue=ocnHistPMOPRAvgValue, fcPortIdx=fcPortIdx, ipExtInterfaceTable=ipExtInterfaceTable, oaEffectiveGain=oaEffectiveGain, passivePortEntry=passivePortEntry, stmnProtGrpProtPortIdx=stmnProtGrpProtPortIdx, ospfIfIdx=ospfIfIdx, amdHistPMVOAValue=amdHistPMVOAValue, xcvrCrntPMOTNBERValidity=xcvrCrntPMOTNBERValidity, oscMediaRate=oscMediaRate, xcvrHistPMSESTimeStamp=xcvrHistPMSESTimeStamp, stmnHistPMMSEBTimeStamp=stmnHistPMMSEBTimeStamp, fcHistPMTempValue=fcHistPMTempValue, shelfMissingCond=shelfMissingCond, xcvrCrntPMOPRTimeStamp=xcvrCrntPMOPRTimeStamp, odunXCDestSlotIdx=odunXCDestSlotIdx, stmnHistPMRSSESInitialize=stmnHistPMRSSESInitialize, stmnHistPMMSUASInitialize=stmnHistPMMSUASInitialize, oaOpticalPwrTransmitted=oaOpticalPwrTransmitted, xcvrHistPMOTUEBValue=xcvrHistPMOTUEBValue, ocnActAutoEnableTimer=ocnActAutoEnableTimer, stmnHistPMOPTValidity=stmnHistPMOPTValidity, xcvrOpenConnectionIndicatorClear=xcvrOpenConnectionIndicatorClear, briOpticalPwrTransmittedMinCond=briOpticalPwrTransmittedMinCond, fcHistPMSESInitialize=fcHistPMSESInitialize, xcvrCrntPMUNCRCDWTimeStamp=xcvrCrntPMUNCRCDWTimeStamp, vcnHistPMHPESInitialize=vcnHistPMHPESInitialize, pluggableInvPEC=pluggableInvPEC, vcnXCSrcSlotIdx=vcnXCSrcSlotIdx, stmnOpticalPwrTransmitted=stmnOpticalPwrTransmitted, envAirCondCond=envAirCondCond, geCrntPMIntervalTypeIdx=geCrntPMIntervalTypeIdx, ocnHistPMUASLValidity=ocnHistPMUASLValidity, stmnPortIdx=stmnPortIdx, ethL1IFCrntPMOPRValue=ethL1IFCrntPMOPRValue, oaCrntPMTable=oaCrntPMTable, stmnHistPMOTNAVGBERInitialize=stmnHistPMOTNAVGBERInitialize, ethL1IFCrntPMNBITCRValue=ethL1IFCrntPMNBITCRValue, oaHistPMLaser2CurrentTimeStamp=oaHistPMLaser2CurrentTimeStamp, pvxL2IFCrntPMSIZE256To511Initialize=pvxL2IFCrntPMSIZE256To511Initialize, vcgXCDestPortIdx=vcgXCDestPortIdx, xcvrCrntPMSIZEOver1518Value=xcvrCrntPMSIZEOver1518Value, geHistPMFCSEInitialize=geHistPMFCSEInitialize, cpSynchronizationSecRefSrcPortNum=cpSynchronizationSecRefSrcPortNum, dbBackupAndRestoreCmd=dbBackupAndRestoreCmd, xcvrHistPMSIZE1024To1518Value=xcvrHistPMSIZE1024To1518Value, fcCrntPMSESInitialize=fcCrntPMSESInitialize, cpCrntPMShelfIdx=cpCrntPMShelfIdx, oaCrntPMLaser1CurrentValue=oaCrntPMLaser1CurrentValue, briOperStatQlfr=briOperStatQlfr, slotInvUpgradeStage=slotInvUpgradeStage, ocnHistPMNBYTCRValidity=ocnHistPMNBYTCRValidity, xcvrLoopbackClear=xcvrLoopbackClear, fcHistPMOPTMinInitialize=fcHistPMOPTMinInitialize, ntpcCondNotifications=ntpcCondNotifications, ocnHistPMNBYTCRInitialize=ocnHistPMNBYTCRInitialize, envHiWtrClear=envHiWtrClear, stmnSlotIdx=stmnSlotIdx, envFireClear=envFireClear, vcnXCProtSlotNum=vcnXCProtSlotNum, briCrntPMOPRAvgValidity=briCrntPMOPRAvgValidity, fcCrntPMSupplyVoltageValue=fcCrntPMSupplyVoltageValue, ethL1IFPMThresholdINVBLKValue=ethL1IFPMThresholdINVBLKValue, cpDegradeCond=cpDegradeCond, ethL1IFCrntPMNBYTCR64BitInitialize=ethL1IFCrntPMNBYTCR64BitInitialize, slotInvPluginEvt=slotInvPluginEvt, ethL1IFCrntPMOPRMaxValue=ethL1IFCrntPMOPRMaxValue, xcvrHistPMFRDRValue=xcvrHistPMFRDRValue, amdPortIdx=amdPortIdx, xcvrHistPMESSValue=xcvrHistPMESSValue, xcvrHistPMNBITCR64BitTimeStamp=xcvrHistPMNBITCR64BitTimeStamp, pvxL2IFCrntPMTBYCRXValidity=pvxL2IFCrntPMTBYCRXValidity, geCrntPMBCSTValidity=geCrntPMBCSTValidity, xcvrProtGrpProtIdx=xcvrProtGrpProtIdx, xcvrHistPMRSBBEValidity=xcvrHistPMRSBBEValidity, ethL1IFHistPMCVValidity=ethL1IFHistPMCVValidity, geCrntPMFRDRInitialize=geCrntPMFRDRInitialize, stsnXCProtShelfNum=stsnXCProtShelfNum, vcnLossOfPointerCond=vcnLossOfPointerCond, oaBackReflectionSafetyOverrideClear=oaBackReflectionSafetyOverrideClear, ocnHistPMOTNAVGBERInitialize=ocnHistPMOTNAVGBERInitialize, ethL1IFCrntPMNBYTCRValue=ethL1IFCrntPMNBYTCRValue, xcvrCrntPMSlotIdx=xcvrCrntPMSlotIdx, vcnHistPMPortIdx=vcnHistPMPortIdx, xcvrOpticalPwrTransmittedMaxCond=xcvrOpticalPwrTransmittedMaxCond, pvxObjects=pvxObjects, briOpticalPwrTransmittedMinTh=briOpticalPwrTransmittedMinTh, slotInvUnknownCond=slotInvUnknownCond, oaGainSetting=oaGainSetting, odunEntry=odunEntry, ocnCrntPMOTUEBValidity=ocnCrntPMOTUEBValidity, cpDbRestoreTransferResultEvt=cpDbRestoreTransferResultEvt, xcvrCrntPMOPRAvgTimeStamp=xcvrCrntPMOPRAvgTimeStamp, stmnHistPMNBITCR64BitTimeStamp=stmnHistPMNBITCR64BitTimeStamp, fcCrntPMOPRValue=fcCrntPMOPRValue, ospfNbrEntry=ospfNbrEntry, ethL1IFHistPMUNCRCDWInitialize=ethL1IFHistPMUNCRCDWInitialize, stsnEvtNotifications=stsnEvtNotifications, slotInvTempHighTh=slotInvTempHighTh, shelfConfigurationMismatchCond=shelfConfigurationMismatchCond, amdHistPMIntervalTypeIdx=amdHistPMIntervalTypeIdx, ethL1IFStatusChangeEvt=ethL1IFStatusChangeEvt, ethL1IFHistPMCVValue=ethL1IFHistPMCVValue, stmnRowStatus=stmnRowStatus, ocnLpbkOpCmd=ocnLpbkOpCmd, stmnHistPMMSESValidity=stmnHistPMMSESValidity, ethL1IFPMThresholdSlotIdx=ethL1IFPMThresholdSlotIdx, briLpbkOpPortIdx=briLpbkOpPortIdx, olsOpticalPwrTransmittedMaxCond=olsOpticalPwrTransmittedMaxCond, pvxNotificationObjects=pvxNotificationObjects)
mibBuilder.exportSymbols("BTI-7000-MIB", ocnPMThresholdTable=ocnPMThresholdTable, ocnPMThresholdCVSValue=ocnPMThresholdCVSValue, shelfCustom2=shelfCustom2, pvxL2IFCrntPMTFRCTXValue=pvxL2IFCrntPMTFRCTXValue, briTable=briTable, oaCrntPMLaser2PowerTimeStamp=oaCrntPMLaser2PowerTimeStamp, ocnProtSwitchEvt=ocnProtSwitchEvt, stsnLockoutProtectionCond=stsnLockoutProtectionCond, ethL1IFCrntPMOPRMinTimeStamp=ethL1IFCrntPMOPRMinTimeStamp, gePayloadMismatchCond=gePayloadMismatchCond, stmnCrntPMTempValue=stmnCrntPMTempValue, ethIntfOperStatQlfr=ethIntfOperStatQlfr, stmnHistPMOPRMinInitialize=stmnHistPMOPRMinInitialize, fcCrntPMOPTTimeStamp=fcCrntPMOPTTimeStamp, ethL1IFCrntPMOTUOFSValue=ethL1IFCrntPMOTUOFSValue, geHistPMSESInitialize=geHistPMSESInitialize, briCrntPMSupplyVoltageTimeStamp=briCrntPMSupplyVoltageTimeStamp, stmnPMThresholdMSUASValue=stmnPMThresholdMSUASValue, envLwBatvgCond=envLwBatvgCond, geHistPMOPTValue=geHistPMOPTValue, geCrntPMSupplyVoltageTimeStamp=geCrntPMSupplyVoltageTimeStamp, xcvrCrntPMFRDRTimeStamp=xcvrCrntPMFRDRTimeStamp, stmnCrntPMNBYTCR64BitValue=stmnCrntPMNBYTCR64BitValue, pvxL2IFCrntPMOSIZEInitialize=pvxL2IFCrntPMOSIZEInitialize, briCrntPMOPTValue=briCrntPMOPTValue, ethL1IFHistPMTempTimeStamp=ethL1IFHistPMTempTimeStamp, fcEntry=fcEntry, geCrntPMTempTimeStamp=geCrntPMTempTimeStamp, xcvrProtocol=xcvrProtocol, xcvrCrntPMRSESValue=xcvrCrntPMRSESValue, ethL1IFHistPMOPTTimeStamp=ethL1IFHistPMOPTTimeStamp, cpDbRestoreInProgressCond=cpDbRestoreInProgressCond, oaCondNotifications=oaCondNotifications, stmnCrntPMMSBBEInitialize=stmnCrntPMMSBBEInitialize, ocnHistPMOPRMaxValue=ocnHistPMOPRMaxValue, amdOpticalPwrReceivedMaxClear=amdOpticalPwrReceivedMaxClear, ocnCrntPMOPRAvgValue=ocnCrntPMOPRAvgValue, envEngineClear=envEngineClear, cpOperStatus=cpOperStatus, swUpgradePath=swUpgradePath, briHistPMOPRAvgInitialize=briHistPMOPRAvgInitialize, networkElement=networkElement, geBandwidthMismatchClear=geBandwidthMismatchClear, envFloodClear=envFloodClear, ocnHistPMShelfIdx=ocnHistPMShelfIdx, briHistPMTempValidity=briHistPMTempValidity, ospfIfEntry=ospfIfEntry, ocnHistPMSESLValidity=ocnHistPMSESLValidity, xcvrCrntPMRSBBEInitialize=xcvrCrntPMRSBBEInitialize, ocnHistPMOTUBBEValidity=ocnHistPMOTUBBEValidity, stmnCrntPMSupplyVoltage2Validity=stmnCrntPMSupplyVoltage2Validity, cpSynchronizationPrimRefBasicSSM=cpSynchronizationPrimRefBasicSSM, briHistPMSupplyVoltageTimeStamp=briHistPMSupplyVoltageTimeStamp, xcvrCrntPMSIZE65To127TimeStamp=xcvrCrntPMSIZE65To127TimeStamp, ocnHistPMLBCValue=ocnHistPMLBCValue, ocnCrntPMCVLValidity=ocnCrntPMCVLValidity, ocnHistPMOTUUASValue=ocnHistPMOTUUASValue, oaMSInsertionLossMaxTh=oaMSInsertionLossMaxTh, xcvrCrntPMCVSValidity=xcvrCrntPMCVSValidity, geCrntPMTFRCTXValidity=geCrntPMTFRCTXValidity, geCrntPMFRDRTimeStamp=geCrntPMFRDRTimeStamp, stmnCrntPMOPRMaxInitialize=stmnCrntPMOPRMaxInitialize, xcvrCrntPMSIZE64Value=xcvrCrntPMSIZE64Value, stsnHistPMIdx=stsnHistPMIdx, stmnLossOfSecondaryTimingReferenceClear=stmnLossOfSecondaryTimingReferenceClear, geHistPMOPRAvgValidity=geHistPMOPRAvgValidity, xcvrPMThresholdOTUEBValue=xcvrPMThresholdOTUEBValue, ethL1IFHistPMNBYTCRInitialize=ethL1IFHistPMNBYTCRInitialize, geHistPMOPTMaxValidity=geHistPMOPTMaxValidity, xcvrHistPMRSBBEInitialize=xcvrHistPMRSBBEInitialize, xcvrCrntPMOPTAvgTimeStamp=xcvrCrntPMOPTAvgTimeStamp, stmnCrntPMNBITCR64BitTimeStamp=stmnCrntPMNBITCR64BitTimeStamp, performance=performance, pluggableInvOperations=pluggableInvOperations, ethIntfOpticalPwrTransmitted=ethIntfOpticalPwrTransmitted, stmnHistPMSupplyVoltageTimeStamp=stmnHistPMSupplyVoltageTimeStamp, ocnHistPMSEFSSTimeStamp=ocnHistPMSEFSSTimeStamp, geCrntPMLBCValidity=geCrntPMLBCValidity, stmnCrntPMNBYTCRTimeStamp=stmnCrntPMNBYTCRTimeStamp, geHistPMSIZE256To511Initialize=geHistPMSIZE256To511Initialize, ethL1IFCrntPMTable=ethL1IFCrntPMTable, ethL1IFHistPMOPRAvgValue=ethL1IFHistPMOPRAvgValue, pvxL2IFHistPMSIZE65To127Value=pvxL2IFHistPMSIZE65To127Value, netMgmtIPBcast=netMgmtIPBcast, briVendorPN1=briVendorPN1, xcvrCrntPMCVInitialize=xcvrCrntPMCVInitialize, vcnProtSwStatus=vcnProtSwStatus, stmnCrntPMSlotIdx=stmnCrntPMSlotIdx, xcvrTypeIdx=xcvrTypeIdx, xcvrHistPMSupplyVoltageValidity=xcvrHistPMSupplyVoltageValidity, oaOOBRSDOpEntry=oaOOBRSDOpEntry, vcnCrntPMEntry=vcnCrntPMEntry, geId1=geId1, geCrntPMFRGTTimeStamp=geCrntPMFRGTTimeStamp, ethL1IFHistPMNBYTCR64BitValue=ethL1IFHistPMNBYTCR64BitValue, fcHistPMTempValidity=fcHistPMTempValidity, stmnCrntPMTempTimeStamp=stmnCrntPMTempTimeStamp, xcvrHistPMOPTMaxTimeStamp=xcvrHistPMOPTMaxTimeStamp, fcHistPMIntervalTypeIdx=fcHistPMIntervalTypeIdx, amdOpticalAttentuation=amdOpticalAttentuation, stmnHistPMMSESValue=stmnHistPMMSESValue, ethL1IFHistPMOTUBBEInitialize=ethL1IFHistPMOTUBBEInitialize, pvxL2IFCrntPMSIZE512To1023TimeStamp=pvxL2IFCrntPMSIZE512To1023TimeStamp, cpHistPMEntry=cpHistPMEntry, xcvrHistPMOPTValidity=xcvrHistPMOPTValidity, actCondEntry=actCondEntry, ocnProtGrpEntry=ocnProtGrpEntry, cpSoftwareBankAFailClear=cpSoftwareBankAFailClear, stmnHistPMRSSESValue=stmnHistPMRSSESValue, ocnPMThresholdOTUESValue=ocnPMThresholdOTUESValue, xcvrPMThresholdJABRValue=xcvrPMThresholdJABRValue, stsnCrntPMCVPTimeStamp=stsnCrntPMCVPTimeStamp, oscAdminStatus=oscAdminStatus, notificationControl=notificationControl, xcvrProtSwOpIdx=xcvrProtSwOpIdx, stmnBER=stmnBER, geHistPMOPTTimeStamp=geHistPMOPTTimeStamp, xcvrHistPMRSESInitialize=xcvrHistPMRSESInitialize, xcvrHistPMOTUBBEInitialize=xcvrHistPMOTUBBEInitialize, stsnHistPMEntry=stsnHistPMEntry, oaCrntPMLaser2CurrentValidity=oaCrntPMLaser2CurrentValidity, oaCrntPMLaser2CurrentValue=oaCrntPMLaser2CurrentValue, xcvrHistPMOTNAVGBERTimeStamp=xcvrHistPMOTNAVGBERTimeStamp, xcvrXCDestIdx=xcvrXCDestIdx, ospfLsdbChecksum=ospfLsdbChecksum, stmnHistPMOPTAvgValue=stmnHistPMOPTAvgValue, oaCrntPMOaIdx=oaCrntPMOaIdx, oscOperStatus=oscOperStatus, ntpAssocAuthenFailedCond=ntpAssocAuthenFailedCond, ocnHistPMIntervalIdx=ocnHistPMIntervalIdx, geHistPMSlotIdx=geHistPMSlotIdx, vcgXCDestShelfIdx=vcgXCDestShelfIdx, geCrntPMCVInitialize=geCrntPMCVInitialize, xcvrCrntPMOTUBBEValue=xcvrCrntPMOTUBBEValue, fcHistPMOPTMaxTimeStamp=fcHistPMOPTMaxTimeStamp, amdCrntPMShelfIdx=amdCrntPMShelfIdx, briHistPMOPRMinValue=briHistPMOPRMinValue, envLwFuelCond=envLwFuelCond, ethIntfAutoEnableTimer=ethIntfAutoEnableTimer, stmnCrntPMUNCRCDWInitialize=stmnCrntPMUNCRCDWInitialize, cpHistPMSlotIdx=cpHistPMSlotIdx, odunXCProtTypeNum=odunXCProtTypeNum, stsnHistPMSESPValue=stsnHistPMSESPValue, amdEntry=amdEntry, xcvrHistPMOPRAvgValue=xcvrHistPMOPRAvgValue, stmnLossOfSignalCond=stmnLossOfSignalCond, ocnCrntPMOTUSESValue=ocnCrntPMOTUSESValue, stmnCrntPMMSEBTimeStamp=stmnCrntPMMSEBTimeStamp, ethL1IFCrntPMPortTypeIdx=ethL1IFCrntPMPortTypeIdx, olsLocalFaultClear=olsLocalFaultClear, briOpticalPwrReceivedMaxCond=briOpticalPwrReceivedMaxCond, stmnCrntPMOTUUASValue=stmnCrntPMOTUUASValue, envBatteryCond=envBatteryCond, fcHistPMOPRMinTimeStamp=fcHistPMOPRMinTimeStamp, xcvrCrntPMMCSTInitialize=xcvrCrntPMMCSTInitialize, geStatusChangeEvt=geStatusChangeEvt, briLossOfAlignmentClear=briLossOfAlignmentClear, oaHistPMLaser1TempTimeStamp=oaHistPMLaser1TempTimeStamp, xcvrCrntPMOPRAvgInitialize=xcvrCrntPMOPRAvgInitialize, geLoopbackClear=geLoopbackClear, ocnCrntPMCVSValue=ocnCrntPMCVSValue, olsLossOfFrameClear=olsLossOfFrameClear, snmpTrapRcvCommunity=snmpTrapRcvCommunity, xcvrHistPMMCSTTimeStamp=xcvrHistPMMCSTTimeStamp, pvxL2IntfRowStatus=pvxL2IntfRowStatus, stmnCrntPMNBITCRTimeStamp=stmnCrntPMNBITCRTimeStamp, networkNeighborTable=networkNeighborTable, geHistPMMCSTValidity=geHistPMMCSTValidity, pvxL2IFCrntPMTFRCRXInitialize=pvxL2IFCrntPMTFRCRXInitialize, ocnCrntPMTable=ocnCrntPMTable, ethL1IFCrntPMESInitialize=ethL1IFCrntPMESInitialize, ethL1IFHistPMOTUUASValidity=ethL1IFHistPMOTUUASValidity, ethL1IFHistPMUASValidity=ethL1IFHistPMUASValidity, fcOpticalPwrTransmittedMinClear=fcOpticalPwrTransmittedMinClear, xcvrHistPMINVBLKValue=xcvrHistPMINVBLKValue, ocnHistPMOPTTimeStamp=ocnHistPMOPTTimeStamp, stsnHistPMUASPTimeStamp=stsnHistPMUASPTimeStamp, xcvrHistPMOPTAvgTimeStamp=xcvrHistPMOPTAvgTimeStamp, cpDbInvokeResultEvt=cpDbInvokeResultEvt, xcvrHistPMUASValue=xcvrHistPMUASValue, ocnPMThresholdCVLValue=ocnPMThresholdCVLValue, fcPMThresholdSlotIdx=fcPMThresholdSlotIdx, xcvrProtGrpWorkIdx=xcvrProtGrpWorkIdx, ethIntfSpeed=ethIntfSpeed, stmnLpbkOpPortIdx=stmnLpbkOpPortIdx, ospfRouterId=ospfRouterId, shelfInvExpansionShelfCommDeviceUnsupportedCond=shelfInvExpansionShelfCommDeviceUnsupportedCond, envPumpCond=envPumpCond, cpId=cpId, pvxL2IFPMThresholdEntry=pvxL2IFPMThresholdEntry, geCrntPMSESInitialize=geCrntPMSESInitialize, stmnLossOfPrimaryTimingReferenceCond=stmnLossOfPrimaryTimingReferenceCond, olsSFPMissingCond=olsSFPMissingCond, fcOpticalPwrReceivedMinClear=fcOpticalPwrReceivedMinClear, xcvrHistPMOPTAvgValidity=xcvrHistPMOPTAvgValidity, ocnCrntPMOTUOFSValue=ocnCrntPMOTUOFSValue, briHistPMTempValue=briHistPMTempValue, ocnCrntPMOPTTimeStamp=ocnCrntPMOPTTimeStamp, vcnXCProtPortNum=vcnXCProtPortNum, geCrntPMSIZEOver1518Value=geCrntPMSIZEOver1518Value, ethL1IFHistPMOTUEBValidity=ethL1IFHistPMOTUEBValidity, geHistPMFCSEValue=geHistPMFCSEValue, stsnXCProtSlotNum=stsnXCProtSlotNum, ocnHistPMSlotIdx=ocnHistPMSlotIdx, shelfInvCommClear=shelfInvCommClear, dbChangeNotifications=dbChangeNotifications, amdCrntPMVOAValidity=amdCrntPMVOAValidity, stmnHistPMOTUBBEValue=stmnHistPMOTUBBEValue, oaHistPMFSOOPTValidity=oaHistPMFSOOPTValidity, vcnCrntPMHPUASTimeStamp=vcnCrntPMHPUASTimeStamp, actAlarmNotifIdx=actAlarmNotifIdx, stmnHistPMRSOFSValue=stmnHistPMRSOFSValue, envCondAttrInputType=envCondAttrInputType, stsnUnequippedCond=stsnUnequippedCond, ethL1IFHistPMPortTypeIdx=ethL1IFHistPMPortTypeIdx, envLwFuelClear=envLwFuelClear, xcvrXCDestTypeIdx=xcvrXCDestTypeIdx, fcLoopbackCond=fcLoopbackCond, stmnCrntPMMSESInitialize=stmnCrntPMMSESInitialize, xcvrCrntPMUASValidity=xcvrCrntPMUASValidity, geCrntPMSlotIdx=geCrntPMSlotIdx, ntpcEvtNotifications=ntpcEvtNotifications, stmnCrntPMUNCRCDWValue=stmnCrntPMUNCRCDWValue, ocnCrntPMSEFSSValue=ocnCrntPMSEFSSValue, ocnHistPMCVLValue=ocnHistPMCVLValue, stmnCrntPMOPTMinValidity=stmnCrntPMOPTMinValidity, xcvrHistPMSIZE65To127Value=xcvrHistPMSIZE65To127Value, xcvrXCType=xcvrXCType, pvxL2IFCrntPMSIZEOver1518Value=pvxL2IFCrntPMSIZEOver1518Value, vcgTimeSlotIndices=vcgTimeSlotIndices, fcOpticalPwrTransmittedMaxTh=fcOpticalPwrTransmittedMaxTh, ocnOpticalPwrReceivedMaxTh=ocnOpticalPwrReceivedMaxTh, fcCrntPMOPTMinValue=fcCrntPMOPTMinValue, pluggableInvUnsupportedCond=pluggableInvUnsupportedCond, xcvrHistPMOPRMaxValidity=xcvrHistPMOPRMaxValidity, ocnCrntPMCVSValidity=ocnCrntPMCVSValidity, stmnHistPMOPRAvgValidity=stmnHistPMOPRAvgValidity, briLpbkOpEntry=briLpbkOpEntry, ethL1IFCrntPMOTUBBETimeStamp=ethL1IFCrntPMOTUBBETimeStamp, ethIntfPhyPMMon=ethIntfPhyPMMon, xcvrCrntPMOPRAvgValidity=xcvrCrntPMOPRAvgValidity, xcvrPMThresholdFRDRValue=xcvrPMThresholdFRDRValue, xcvrHistPMSupplyVoltage2TimeStamp=xcvrHistPMSupplyVoltage2TimeStamp, xcvrHistPMOPRTimeStamp=xcvrHistPMOPRTimeStamp, stmnHistPMMSESInitialize=stmnHistPMMSESInitialize, ocnCrntPMOPTMinTimeStamp=ocnCrntPMOPTMinTimeStamp, fcHistPMOPTValue=fcHistPMOPTValue, oaOOBRSDOpTypeIdx=oaOOBRSDOpTypeIdx, stmnCrntPMOTUOFSValue=stmnCrntPMOTUOFSValue, vcnPMThresholdByPortSlotIdx=vcnPMThresholdByPortSlotIdx, xcvrHistPMIdx=xcvrHistPMIdx, ocnHistPMOPTMaxValue=ocnHistPMOPTMaxValue, vcnProtSwOpSlotIdx=vcnProtSwOpSlotIdx, geCrntPMOPTMaxValidity=geCrntPMOPTMaxValidity)
mibBuilder.exportSymbols("BTI-7000-MIB", pvxL2IFHistPMSIZE128To255Initialize=pvxL2IFHistPMSIZE128To255Initialize, xcvrCrntPMSEFSSValidity=xcvrCrntPMSEFSSValidity, xcvrHistPMTempTimeStamp=xcvrHistPMTempTimeStamp, stsnPMThresholdByPortTable=stsnPMThresholdByPortTable, geFiberType=geFiberType, cpUpgradeStage=cpUpgradeStage, dbBackupAndRestoreAddress=dbBackupAndRestoreAddress, envAirDryrClear=envAirDryrClear, ocnHistPMOPRAvgInitialize=ocnHistPMOPRAvgInitialize, pvxL2IntfSTpid=pvxL2IntfSTpid, stmnOTNPayloadMismatchClear=stmnOTNPayloadMismatchClear, briVendorPN2=briVendorPN2, stmnHistPMOTUBBEInitialize=stmnHistPMOTUBBEInitialize, xcvrCrntPMOPRMaxInitialize=xcvrCrntPMOPRMaxInitialize, stmnOpticalPwrReceivedMinClear=stmnOpticalPwrReceivedMinClear, geHistPMUSIZEValidity=geHistPMUSIZEValidity, ocnOpticalPwrTransmittedMaxTh=ocnOpticalPwrTransmittedMaxTh, fcBandwidthMismatchCond=fcBandwidthMismatchCond, fcOpticalPwrReceived=fcOpticalPwrReceived, netMgmtAdminStatus=netMgmtAdminStatus, ospfIfMetricValue=ospfIfMetricValue, xcvrMissingClear=xcvrMissingClear, envRectClear=envRectClear, tl1LogIdx=tl1LogIdx, geCrntPMOPTAvgValidity=geCrntPMOPTAvgValidity, shelfPowerFeedA=shelfPowerFeedA, briCrntPMShelfIdx=briCrntPMShelfIdx, geHistPMSIZE1024To1518TimeStamp=geHistPMSIZE1024To1518TimeStamp, ocnCustom1=ocnCustom1, geOperStatQlfr=geOperStatQlfr, stmnHistPMRSBBEInitialize=stmnHistPMRSBBEInitialize, shelfPowerFeedB=shelfPowerFeedB, oscSpeed=oscSpeed, xcvrCrntPMOPRMaxValidity=xcvrCrntPMOPRMaxValidity, ipExtIntfMode=ipExtIntfMode, xcvrCrntPMUASSValue=xcvrCrntPMUASSValue, ocnForcedSwitchToWorkingCond=ocnForcedSwitchToWorkingCond, xcvrHistPMOTNBERInitialize=xcvrHistPMOTNBERInitialize, fcOpticalPwrTransmittedMaxClear=fcOpticalPwrTransmittedMaxClear, ocnHistPMOPTMinInitialize=ocnHistPMOPTMinInitialize, vcnCrntPMHPESInitialize=vcnCrntPMHPESInitialize, geBandwidthMismatchCond=geBandwidthMismatchCond, ocnCrntPMNBYTCRInitialize=ocnCrntPMNBYTCRInitialize, xcvrHistPMSIZE128To255Initialize=xcvrHistPMSIZE128To255Initialize, xcvrHistPMFRGTInitialize=xcvrHistPMFRGTInitialize, shelfAdminStatus=shelfAdminStatus, pluggableInvMissingCond=pluggableInvMissingCond, briHistPMEntry=briHistPMEntry, ethL1IFCrntPMLBCTimeStamp=ethL1IFCrntPMLBCTimeStamp, geOperStatus=geOperStatus, geCrntPMOSIZEValidity=geCrntPMOSIZEValidity, swUpgradeAddress=swUpgradeAddress, olsOpticalPwrReceivedMinCond=olsOpticalPwrReceivedMinCond, xcvrHistPMFCSEValidity=xcvrHistPMFCSEValidity, passivePortShelfIdx=passivePortShelfIdx, xcvrHistPMOTUOFSInitialize=xcvrHistPMOTUOFSInitialize, shelfInvExpansionShelfCommDeviceUnsupportedClear=shelfInvExpansionShelfCommDeviceUnsupportedClear, ethL1IFCrntPMOTUUASValue=ethL1IFCrntPMOTUUASValue, ethL1IFTcaEvt=ethL1IFTcaEvt, geMTU=geMTU, stmnHistPMLBCTimeStamp=stmnHistPMLBCTimeStamp, ethL1IFHistPMOPTAvgTimeStamp=ethL1IFHistPMOPTAvgTimeStamp, ethL1IFHistPMSlotIdx=ethL1IFHistPMSlotIdx, stmnHistPMOTUOFSValue=stmnHistPMOTUOFSValue, briPhyPMMon=briPhyPMMon, stmnActAutoEnableTimer=stmnActAutoEnableTimer, stsnForcedSwitchToProtectionCond=stsnForcedSwitchToProtectionCond, stmnCrntPMRSBBETimeStamp=stmnCrntPMRSBBETimeStamp, briPortIdx=briPortIdx, geHistPMFRGTValue=geHistPMFRGTValue, ethL1IFHistPMNBYTCR64BitTimeStamp=ethL1IFHistPMNBYTCR64BitTimeStamp, stmnHistPMOPRAvgTimeStamp=stmnHistPMOPRAvgTimeStamp, geLossOfSignalClear=geLossOfSignalClear, fcCrntPMOPTMaxInitialize=fcCrntPMOPTMaxInitialize, ethIntfActAutoEnableTimer=ethIntfActAutoEnableTimer, xcvrCrntPMTBYCRXValue=xcvrCrntPMTBYCRXValue, ocnHistPMOPRMaxTimeStamp=ocnHistPMOPRMaxTimeStamp, geCrntPMJABRValidity=geCrntPMJABRValidity, stmnHistPMMSBBETimeStamp=stmnHistPMMSBBETimeStamp, xcvrCrntPMSIZE256To511TimeStamp=xcvrCrntPMSIZE256To511TimeStamp, envEngineCond=envEngineCond, ocnCrntPMOTUBBETimeStamp=ocnCrntPMOTUBBETimeStamp, geHistPMCVValue=geHistPMCVValue, fcCrntPMOPRAvgTimeStamp=fcCrntPMOPRAvgTimeStamp, oaOperStatus=oaOperStatus, vcnXCProtShelfNum=vcnXCProtShelfNum, gePMThresholdSESValue=gePMThresholdSESValue, condNotifCtrlEntry=condNotifCtrlEntry, geCrntPMOPRAvgValidity=geCrntPMOPRAvgValidity, stmnHistPMOPRMinTimeStamp=stmnHistPMOPRMinTimeStamp, stmnCrntPMOPTMinInitialize=stmnCrntPMOPTMinInitialize, xcvrCrntPMTBYCRXInitialize=xcvrCrntPMTBYCRXInitialize, xcvrIdx=xcvrIdx, pvxL2IFHistPMOSIZETimeStamp=pvxL2IFHistPMOSIZETimeStamp, cpPEC=cpPEC, slotInvMissingCond=slotInvMissingCond, pvxL2IFCrntPMMCSTTimeStamp=pvxL2IFCrntPMMCSTTimeStamp, xcvrCrntPMFCSEInitialize=xcvrCrntPMFCSEInitialize, amdLossOfSignalCond=amdLossOfSignalCond, ocnCrntPMOPRAvgTimeStamp=ocnCrntPMOPRAvgTimeStamp, actCondTable=actCondTable, ocnProtGrpWorkPortIdx=ocnProtGrpWorkPortIdx, xcvrHistPMOTNBERTimeStamp=xcvrHistPMOTNBERTimeStamp, ethL1IFHistPMOPRMinTimeStamp=ethL1IFHistPMOPRMinTimeStamp, ocnCrntPMOPTMinInitialize=ocnCrntPMOPTMinInitialize, geCrntPMTBYCRXValidity=geCrntPMTBYCRXValidity, pluggableInvTable=pluggableInvTable, odunXCDestPortIdx=odunXCDestPortIdx, neEvtNotifications=neEvtNotifications, pvxL2IFCrntPMMCSTValidity=pvxL2IFCrntPMMCSTValidity, stsnCondNotifications=stsnCondNotifications, geHistPMSESValidity=geHistPMSESValidity, cpInvalidProvCond=cpInvalidProvCond, briActAutoEnableTimer=briActAutoEnableTimer, xcvrCrntPMOPRValue=xcvrCrntPMOPRValue, geHistPMOPRAvgInitialize=geHistPMOPRAvgInitialize, pluggableInvCommCond=pluggableInvCommCond, geRemotePathFailureClear=geRemotePathFailureClear, geCrntPMEntry=geCrntPMEntry, oaLaser1Current=oaLaser1Current, xcvrHistPMLBCValidity=xcvrHistPMLBCValidity, xcvrHistPMOPRAvgTimeStamp=xcvrHistPMOPRAvgTimeStamp, amdAdminStatus=amdAdminStatus, xcvrHistPMRSBBETimeStamp=xcvrHistPMRSBBETimeStamp, xcvrXCDestShelfIdx=xcvrXCDestShelfIdx, tcaMontype=tcaMontype, pvxL2IFCrntPMTBYCRXTimeStamp=pvxL2IFCrntPMTBYCRXTimeStamp, geHistPMESValidity=geHistPMESValidity, ocnHistPMSESLInitialize=ocnHistPMSESLInitialize, xcvrHistPMESValue=xcvrHistPMESValue, ocnHistPMOTUOFSValue=ocnHistPMOTUOFSValue, ocnHistPMESLTimeStamp=ocnHistPMESLTimeStamp, geHistPMTPFCRXValue=geHistPMTPFCRXValue, briHistPMOPRValidity=briHistPMOPRValidity, stmnHistPMOTNAVGBERValue=stmnHistPMOTNAVGBERValue, odunXCProtNum=odunXCProtNum, stmnOpticalPwrTransmittedMaxClear=stmnOpticalPwrTransmittedMaxClear, stmnOTNPayloadMismatchCond=stmnOTNPayloadMismatchCond, geGfpMode=geGfpMode, oaBackReflectionSafetyTh=oaBackReflectionSafetyTh, stmnTOHTransparency=stmnTOHTransparency, xcvrHistPMTable=xcvrHistPMTable, ospfNbrAddressLessIndex=ospfNbrAddressLessIndex, stmnHistPMTempValidity=stmnHistPMTempValidity, stmnHistPMMSSESValidity=stmnHistPMMSSESValidity, fcSlotIdx=fcSlotIdx, fcPhyPMMon=fcPhyPMMon, ethL1IFHistPMNBYTCR64BitInitialize=ethL1IFHistPMNBYTCR64BitInitialize, dbChangeSecuEvt=dbChangeSecuEvt, vcnPMThresholdByPortHPSESValue=vcnPMThresholdByPortHPSESValue, xcvrCrntPMSupplyVoltageTimeStamp=xcvrCrntPMSupplyVoltageTimeStamp, stsnXCSrcShelfIdx=stsnXCSrcShelfIdx, xcvrHistPMSIZEOver1518TimeStamp=xcvrHistPMSIZEOver1518TimeStamp, cpSynchronizationSecRefProtStatus=cpSynchronizationSecRefProtStatus, slotInvPwrFeedAFuseFailCond=slotInvPwrFeedAFuseFailCond, xcvrReceivedLockoutClear=xcvrReceivedLockoutClear, xcvrPMThresholdOTUUASValue=xcvrPMThresholdOTUUASValue, oscLossOfSignalCond=oscLossOfSignalCond, envLwWtrCond=envLwWtrCond, geCrntPMTPFCRXValidity=geCrntPMTPFCRXValidity, xcvrHistPMNBYTCR64BitValidity=xcvrHistPMNBYTCR64BitValidity, fcCrntPMOPRMaxTimeStamp=fcCrntPMOPRMaxTimeStamp, xcvrCrntPMSupplyVoltageValue=xcvrCrntPMSupplyVoltageValue, briCrntPMLBCValidity=briCrntPMLBCValidity, ocnCrntPMCVLValue=ocnCrntPMCVLValue, tl1UserIdx=tl1UserIdx, xcvrProtGrpWorkShelfIdx=xcvrProtGrpWorkShelfIdx, ocnHistPMOPTValue=ocnHistPMOPTValue, geCrntPMTFRCRXTimeStamp=geCrntPMTFRCRXTimeStamp, cpOperations=cpOperations, xcvrHistPMNBYTCR64BitInitialize=xcvrHistPMNBYTCR64BitInitialize, ethL1IFCrntPMOTUBBEInitialize=ethL1IFCrntPMOTUBBEInitialize, geCrntPMOPTValue=geCrntPMOPTValue, shelfOperations=shelfOperations, ocnCrntPMSESSTimeStamp=ocnCrntPMSESSTimeStamp, xcvrCrntPMOPTAvgInitialize=xcvrCrntPMOPTAvgInitialize, briCrntPMOPTMinValidity=briCrntPMOPTMinValidity, ocnHistPMESSValidity=ocnHistPMESSValidity, ocnHistPMUASSValidity=ocnHistPMUASSValidity, fcLossOfSyncCond=fcLossOfSyncCond, vcgXCRowStatus=vcgXCRowStatus, stsnPMThresholdByPortSESPValue=stsnPMThresholdByPortSESPValue, fcCrntPMLBCValidity=fcCrntPMLBCValidity, briHistPMOPRMinInitialize=briHistPMOPRMinInitialize, fcHistPMSupplyVoltageValue=fcHistPMSupplyVoltageValue, xcvrCrntPMFCSEValidity=xcvrCrntPMFCSEValidity, oaRowStatus=oaRowStatus, ethL1IFHistPMNBITCR64BitValue=ethL1IFHistPMNBITCR64BitValue, slotInvHTASUnsupportedClear=slotInvHTASUnsupportedClear, xcvrCrntPMOTUESValue=xcvrCrntPMOTUESValue, slotInvPackSerialNum=slotInvPackSerialNum, xcvrHistPMSIZE64TimeStamp=xcvrHistPMSIZE64TimeStamp, pvxL2IFHistPMBCSTTimeStamp=pvxL2IFHistPMBCSTTimeStamp, xcvrCrntPMSupplyVoltageValidity=xcvrCrntPMSupplyVoltageValidity, xcvrCrntPMNBITCR64BitTimeStamp=xcvrCrntPMNBITCR64BitTimeStamp, geHistPMTBYCRXInitialize=geHistPMTBYCRXInitialize, pvxSlaMsmtEvtNotifications=pvxSlaMsmtEvtNotifications, ethIntfId1=ethIntfId1, briShelfIdx=briShelfIdx, ethL1IFHistPMOPRAvgTimeStamp=ethL1IFHistPMOPRAvgTimeStamp, briOpticalPwrReceivedMinCond=briOpticalPwrReceivedMinCond, envGenCond=envGenCond, stmnCrntPMOPTValidity=stmnCrntPMOPTValidity, shelfInvDiscoveredNEName=shelfInvDiscoveredNEName, vcnCrntPMIntervalTypeIdx=vcnCrntPMIntervalTypeIdx, oaMSInsertionLossClear=oaMSInsertionLossClear, vcnXCProtNum=vcnXCProtNum, ocnCrntPMSESLValue=ocnCrntPMSESLValue, fcPMThresholdShelfIdx=fcPMThresholdShelfIdx, xcvrCrntPMRSSESInitialize=xcvrCrntPMRSSESInitialize, amdOpticalPwrReceivedMinTh=amdOpticalPwrReceivedMinTh, ocnCrntPMESLTimeStamp=ocnCrntPMESLTimeStamp, pvxL2IFHistPMFCSEValue=pvxL2IFHistPMFCSEValue, ocnHistPMNBITCRInitialize=ocnHistPMNBITCRInitialize, xcvrCrntPMSIZE512To1023Validity=xcvrCrntPMSIZE512To1023Validity, xcvrHistPMLBCTimeStamp=xcvrHistPMLBCTimeStamp, dbBackupAndRestoreInvokeFilename=dbBackupAndRestoreInvokeFilename, briCustom1=briCustom1, cpDbRecoveryFailCond=cpDbRecoveryFailCond, geCrntPMLBCTimeStamp=geCrntPMLBCTimeStamp, envHiWindCond=envHiWindCond, ethIntfRemoteId=ethIntfRemoteId, xcvrHistPMLBCValue=xcvrHistPMLBCValue, xcvrPMThresholdRSESValue=xcvrPMThresholdRSESValue, stmnPMThresholdRSSESValue=stmnPMThresholdRSSESValue, stsnXCDestShelfIdx=stsnXCDestShelfIdx, ethL1IFCrntPMOTUOFSInitialize=ethL1IFCrntPMOTUOFSInitialize, fcLpbkOpShelfIdx=fcLpbkOpShelfIdx, vcnHistPMHPEBValidity=vcnHistPMHPEBValidity, oaBackReflectionSafetyClear=oaBackReflectionSafetyClear, ethL1IFHistPMOTNBERInitialize=ethL1IFHistPMOTNBERInitialize, stmnHistPMNBYTCRTimeStamp=stmnHistPMNBYTCRTimeStamp, cpHistPMTempValue=cpHistPMTempValue, ocnCrntPMPortIdx=ocnCrntPMPortIdx, ntpClient=ntpClient, xcvrPEC=xcvrPEC, fcTable=fcTable, briAutoEnableTimer=briAutoEnableTimer, ocnCrntPMNBITCR64BitInitialize=ocnCrntPMNBITCR64BitInitialize, geHistPMFRDRTimeStamp=geHistPMFRDRTimeStamp, fcHistPMOPTMinValidity=fcHistPMOPTMinValidity, pvxL2IFCrntPMUSIZEValidity=pvxL2IFCrntPMUSIZEValidity, xcvrTraceMismatchCond=xcvrTraceMismatchCond, ocnSlotIdx=ocnSlotIdx, vcnProtSwitchEvt=vcnProtSwitchEvt, geRemotePathFailureCond=geRemotePathFailureCond, ocnPMThresholdSEFSSValue=ocnPMThresholdSEFSSValue, geCrntPMTPFCRXTimeStamp=geCrntPMTPFCRXTimeStamp, shelfInvShortName=shelfInvShortName, xcvrHistPMOPRMinInitialize=xcvrHistPMOPRMinInitialize, xcvrHistPMOTUOFSValue=xcvrHistPMOTUOFSValue, ocnHistPMCVSValidity=ocnHistPMCVSValidity, pluggableInvCLEI=pluggableInvCLEI, vcnHistPMHPSESTimeStamp=vcnHistPMHPSESTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrCrntPMRSSESTimeStamp=xcvrCrntPMRSSESTimeStamp, vcnHistPMHPBBEValidity=vcnHistPMHPBBEValidity, ocnCrntPMNBITCR64BitValue=ocnCrntPMNBITCR64BitValue, ethL1IFHistPMESValidity=ethL1IFHistPMESValidity, pvxL2IFCrntPMSIZE1024To1518TimeStamp=pvxL2IFCrntPMSIZE1024To1518TimeStamp, shelfInvExpansionShelfCommLinkDownCond=shelfInvExpansionShelfCommLinkDownCond, ocnCrntPMNBITCRValue=ocnCrntPMNBITCRValue, vcnXCType=vcnXCType, ocnVendorPN1=ocnVendorPN1, xcvrHistPMOPRValidity=xcvrHistPMOPRValidity, xcvrHistPMRSUASValidity=xcvrHistPMRSUASValidity, ocnCrntPMUASLValidity=ocnCrntPMUASLValidity, stmnCrntPMOPTMaxTimeStamp=stmnCrntPMOPTMaxTimeStamp, ethL1IFHistPMNBITCR64BitInitialize=ethL1IFHistPMNBITCR64BitInitialize, tl1IpLockoutAddr=tl1IpLockoutAddr, geHistPMUASValidity=geHistPMUASValidity, briCrntPMOPRValidity=briCrntPMOPRValidity, xcvrHistPMTBYCRXValidity=xcvrHistPMTBYCRXValidity, stmnTcaEvt=stmnTcaEvt, feMACAddr=feMACAddr, slotInvCoolingUnitFailCond=slotInvCoolingUnitFailCond, olsSFPMismatchClear=olsSFPMismatchClear, briOpticalPwrTransmitted=briOpticalPwrTransmitted, ocnCrntPMOPRMaxInitialize=ocnCrntPMOPRMaxInitialize, neSecGateway=neSecGateway, condReportType=condReportType, snmpTrapRcvTable=snmpTrapRcvTable, stmnCrntPMRSOFSValidity=stmnCrntPMRSOFSValidity, administration=administration, stsnCrntPMSlotIdx=stsnCrntPMSlotIdx, amdCrntPMVOAValue=amdCrntPMVOAValue, ocnCrntPMUASSValidity=ocnCrntPMUASSValidity, ethL1IFPMThresholdESValue=ethL1IFPMThresholdESValue, ethL1IFHistPMOTUUASTimeStamp=ethL1IFHistPMOTUUASTimeStamp, geCrntPMSIZE128To255Initialize=geCrntPMSIZE128To255Initialize, odunXCProtPortNum=odunXCProtPortNum, swUpgradeFtpPswd=swUpgradeFtpPswd, envGenClear=envGenClear, geCrntPMSIZE1024To1518TimeStamp=geCrntPMSIZE1024To1518TimeStamp, ethL1IFCrntPMOPRAvgTimeStamp=ethL1IFCrntPMOPRAvgTimeStamp, xcvrHistPMOTUBBETimeStamp=xcvrHistPMOTUBBETimeStamp, ocnCrntPMCVLTimeStamp=ocnCrntPMCVLTimeStamp, envAirDryrCond=envAirDryrCond, pvxL2IFHistPMUSIZEInitialize=pvxL2IFHistPMUSIZEInitialize, oaHistPMVOAValue=oaHistPMVOAValue, ntpTimingRefUpdateEvt=ntpTimingRefUpdateEvt, fcCrntPMESTimeStamp=fcCrntPMESTimeStamp, geHistPMOPRMaxInitialize=geHistPMOPRMaxInitialize, notifications=notifications, ethL1IFCrntPMOTNBERTimeStamp=ethL1IFCrntPMOTNBERTimeStamp, dataCommsPingNumSuccesses=dataCommsPingNumSuccesses, olsOpticalPwrReceivedMaxCond=olsOpticalPwrReceivedMaxCond, oscIPAddr=oscIPAddr, geHistPMTPFCRXTimeStamp=geHistPMTPFCRXTimeStamp, slotInvPackTestDate=slotInvPackTestDate, xcvrCrntPMSIZE1024To1518TimeStamp=xcvrCrntPMSIZE1024To1518TimeStamp, ocnCrntPMTempTimeStamp=ocnCrntPMTempTimeStamp, stmnCrntPMTypeIdx=stmnCrntPMTypeIdx, ocnShelfIdx=ocnShelfIdx, xcvrCondNotifications=xcvrCondNotifications, vcnCrntPMIdx=vcnCrntPMIdx, amdCrntPMSlotIdx=amdCrntPMSlotIdx, geCrntPMMCSTValue=geCrntPMMCSTValue, oaCrntPMLaser2CurrentTimeStamp=oaCrntPMLaser2CurrentTimeStamp, pvxL2IFCrntPMSIZE65To127TimeStamp=pvxL2IFCrntPMSIZE65To127TimeStamp, fcCrntPMESValue=fcCrntPMESValue, fcHistPMPortIdx=fcHistPMPortIdx, neActiveGateway=neActiveGateway, ocnCrntPMSESLValidity=ocnCrntPMSESLValidity, oaCrntPMLaser1TempValidity=oaCrntPMLaser1TempValidity, ospfIfAreaId=ospfIfAreaId, stmnCrntPMOTUEBInitialize=stmnCrntPMOTUEBInitialize, envHiAirClear=envHiAirClear, xcvrCrntPMUASSValidity=xcvrCrntPMUASSValidity, fcAdminStatus=fcAdminStatus, gePMThresholdUSIZEValue=gePMThresholdUSIZEValue, geHistPMSIZEOver1518TimeStamp=geHistPMSIZEOver1518TimeStamp, stmnHistPMMSSESValue=stmnHistPMMSSESValue, ocnHistPMSupplyVoltageTimeStamp=ocnHistPMSupplyVoltageTimeStamp, ethL1IFPMThresholdOTUSESValue=ethL1IFPMThresholdOTUSESValue, pvxERPSSrvcEvtNotifications=pvxERPSSrvcEvtNotifications, pvxL2IFHistPMTFRCRXTimeStamp=pvxL2IFHistPMTFRCRXTimeStamp, pvxL2IntfPortIdx=pvxL2IntfPortIdx, stmnOpticalPwrReceivedMaxTh=stmnOpticalPwrReceivedMaxTh, ethL1IFCrntPMNBITCRValidity=ethL1IFCrntPMNBITCRValidity, odunTypeIdx=odunTypeIdx, xcvrHistPMOPTMaxInitialize=xcvrHistPMOPTMaxInitialize, stmnHistPMOTUESValue=stmnHistPMOTUESValue, xcvrCrntPMOTNBERValue=xcvrCrntPMOTNBERValue, briRowStatus=briRowStatus, pvxL2IFHistPMUSIZETimeStamp=pvxL2IFHistPMUSIZETimeStamp, geHistPMTPFCRXInitialize=geHistPMTPFCRXInitialize, pvxL2IFHistPMSlotIdx=pvxL2IFHistPMSlotIdx, briHistPMLBCValidity=briHistPMLBCValidity, ocnForcedSwitchToProtectionClear=ocnForcedSwitchToProtectionClear, oaHistPMLaser1CurrentValue=oaHistPMLaser1CurrentValue, stmnHistPMMSUASTimeStamp=stmnHistPMMSUASTimeStamp, briCrntPMOPRMaxValidity=briCrntPMOPRMaxValidity, ethIntfFiberType=ethIntfFiberType, ethL1IFCrntPMOPTMaxValidity=ethL1IFCrntPMOPTMaxValidity, oaHistPMVOAValidity=oaHistPMVOAValidity, fcId1=fcId1, xcvrCrntPMUSIZEValidity=xcvrCrntPMUSIZEValidity, ocnCrntPMOTNBERValidity=ocnCrntPMOTNBERValidity, geCrntPMMCSTTimeStamp=geCrntPMMCSTTimeStamp, actCondSummary=actCondSummary, vcnSignalDegradeClear=vcnSignalDegradeClear, geHistPMSIZE512To1023Validity=geHistPMSIZE512To1023Validity, cpUpgradeStageResultEvt=cpUpgradeStageResultEvt, ocnHistPMCVLValidity=ocnHistPMCVLValidity, briLpbkOpTable=briLpbkOpTable, oaCrntPMEffectiveGainTimeStamp=oaCrntPMEffectiveGainTimeStamp, xcvrOperStatQlfr=xcvrOperStatQlfr, envMiscClear=envMiscClear, briCrntPMTempValidity=briCrntPMTempValidity, xcvrCrntPMSIZE256To511Validity=xcvrCrntPMSIZE256To511Validity, xcvrHistPMNBITCR64BitValidity=xcvrHistPMNBITCR64BitValidity, xcvrCrntPMFRGTValue=xcvrCrntPMFRGTValue, geCrntPMSIZE256To511Initialize=geCrntPMSIZE256To511Initialize, geHistPMTPFCTXValue=geHistPMTPFCTXValue, briTxLockingClear=briTxLockingClear, pvxL2IFHistPMSIZE65To127TimeStamp=pvxL2IFHistPMSIZE65To127TimeStamp, briXcvrMismatchCond=briXcvrMismatchCond, xcvrProtSwOpShelfIdx=xcvrProtSwOpShelfIdx, ethL1IFHistPMOTUBBETimeStamp=ethL1IFHistPMOTUBBETimeStamp, ethL1IFPMThresholdUASValue=ethL1IFPMThresholdUASValue, briHistPMTable=briHistPMTable, slotInvCommCond=slotInvCommCond, fcCrntPMSESTimeStamp=fcCrntPMSESTimeStamp, xcvrCrntPMOTNBERTimeStamp=xcvrCrntPMOTNBERTimeStamp, pvxL2IFHistPMOSIZEValidity=pvxL2IFHistPMOSIZEValidity, stmnHistPMNBITCRValue=stmnHistPMNBITCRValue, dataCommsOperations=dataCommsOperations, ocnHistPMUNCRCDWValue=ocnHistPMUNCRCDWValue, briHistPMOPTMinInitialize=briHistPMOPTMinInitialize, stmnHistPMOTUOFSValidity=stmnHistPMOTUOFSValidity, geCrntPMOSIZEInitialize=geCrntPMOSIZEInitialize, snmpTrapRcvPort=snmpTrapRcvPort, vcnXCDestPortIdx=vcnXCDestPortIdx, pluggableInvVendorRev=pluggableInvVendorRev, vcnHistPMHPSESInitialize=vcnHistPMHPSESInitialize, shelfInvExpansionShelfIdMismatchClear=shelfInvExpansionShelfIdMismatchClear, fcOpticalPwrReceivedMinCond=fcOpticalPwrReceivedMinCond, envLwWtrClear=envLwWtrClear, xcvrCrntPMFCSEValue=xcvrCrntPMFCSEValue, neNum=neNum, geLossOfMultiframeCond=geLossOfMultiframeCond, envSmokeCond=envSmokeCond, stmnHistPMOTUEBValidity=stmnHistPMOTUEBValidity, ocnCrntPMSupplyVoltage2Value=ocnCrntPMSupplyVoltage2Value, ocnCrntPMESSTimeStamp=ocnCrntPMESSTimeStamp, stmnHistPMOPTMinInitialize=stmnHistPMOPTMinInitialize, geHistPMSIZEOver1518Validity=geHistPMSIZEOver1518Validity, fcHistPMCVValidity=fcHistPMCVValidity, ethL1IFCrntPMOPTMinTimeStamp=ethL1IFCrntPMOPTMinTimeStamp, xcvrCrntPMSESSInitialize=xcvrCrntPMSESSInitialize, stmnSignalDegradeClear=stmnSignalDegradeClear, ethL1IFCrntPMOPRMinValue=ethL1IFCrntPMOPRMinValue, olsSFPMismatchCond=olsSFPMismatchCond, xcvrCrntPMTBYCRXTimeStamp=xcvrCrntPMTBYCRXTimeStamp, ospfNbrState=ospfNbrState, stmnHistPMRSBBETimeStamp=stmnHistPMRSBBETimeStamp, pluggableInvUnpluginEvt=pluggableInvUnpluginEvt, pluggableInvTxFaultImpl=pluggableInvTxFaultImpl, stmnForcedSwitchToWorkingCond=stmnForcedSwitchToWorkingCond, oaLaserStatus=oaLaserStatus, oaCrntPMSSIOPRValue=oaCrntPMSSIOPRValue, shelfInvPwrFeedBFailCond=shelfInvPwrFeedBFailCond, stmnHistPMTempTimeStamp=stmnHistPMTempTimeStamp, xcvrHistPMESInitialize=xcvrHistPMESInitialize, xcvrTraceLabel=xcvrTraceLabel, xcvrHistPMSIZE512To1023Validity=xcvrHistPMSIZE512To1023Validity, shelfInvTestLoc=shelfInvTestLoc, xcvrCrntPMOPTMinInitialize=xcvrCrntPMOPTMinInitialize, xcvrCrntPMOPTMaxValue=xcvrCrntPMOPTMaxValue, fcHistPMOPRValue=fcHistPMOPRValue, envRectLoCond=envRectLoCond, pvxL2IntfPortTypeIdx=pvxL2IntfPortTypeIdx, xcvrPMThresholdShelfIdx=xcvrPMThresholdShelfIdx, xcvrStatusChangeEvt=xcvrStatusChangeEvt, stmnCrntPMRSESInitialize=stmnCrntPMRSESInitialize, stsnConcatMismatchCond=stsnConcatMismatchCond, ocnOperStatQlfr=ocnOperStatQlfr, oaOpticalPwrReceived=oaOpticalPwrReceived, xcvrHistPMNBITCR64BitValue=xcvrHistPMNBITCR64BitValue, vcnForcedSwitchToProtectionClear=vcnForcedSwitchToProtectionClear, pvxL2IFCrntPMFRGTValidity=pvxL2IFCrntPMFRGTValidity, pvxL2IFPMThresholdTable=pvxL2IFPMThresholdTable, geCrntPMOPTAvgInitialize=geCrntPMOPTAvgInitialize, vcnXCVcnTypeIdx=vcnXCVcnTypeIdx, slotInvVersionMismatchCond=slotInvVersionMismatchCond, stsnCrntPMCVPInitialize=stsnCrntPMCVPInitialize, briCrntPMOPTMinTimeStamp=briCrntPMOPTMinTimeStamp, xcvrHistPMOPTMinInitialize=xcvrHistPMOPTMinInitialize, stmnCrntPMOTNBERTimeStamp=stmnCrntPMOTNBERTimeStamp, stmnCrntPMOPRAvgValue=stmnCrntPMOPRAvgValue, ethL1IFHistPMOPRMaxValidity=ethL1IFHistPMOPRMaxValidity, xcvrHistPMOTUSESTimeStamp=xcvrHistPMOTUSESTimeStamp, pvxL2IFHistPMUSIZEValue=pvxL2IFHistPMUSIZEValue, oaCrntPMFSOOPTValidity=oaCrntPMFSOOPTValidity, geCrntPMSIZE256To511Validity=geCrntPMSIZE256To511Validity, pvxL2IFCrntPMTPFCRXValue=pvxL2IFCrntPMTPFCRXValue, fcOperStatQlfr=fcOperStatQlfr, xcvrHistPMSIZEOver1518Value=xcvrHistPMSIZEOver1518Value, amdHistPMLitChnValidity=amdHistPMLitChnValidity, geCrntPMESInitialize=geCrntPMESInitialize, geHistPMTBYCTXValidity=geHistPMTBYCTXValidity, geHistPMIntervalTypeIdx=geHistPMIntervalTypeIdx, ocnCrntPMESSValidity=ocnCrntPMESSValidity, pvxL2IFCrntPMFRDRInitialize=pvxL2IFCrntPMFRDRInitialize, ocnCrntPMSupplyVoltage2TimeStamp=ocnCrntPMSupplyVoltage2TimeStamp, xcvrHistPMShelfIdx=xcvrHistPMShelfIdx, xcvrCrntPMRSEBInitialize=xcvrCrntPMRSEBInitialize, vcnProtSwOpEntry=vcnProtSwOpEntry, xcvrXCTable=xcvrXCTable, ocnCrntPMOTUUASValidity=ocnCrntPMOTUUASValidity, swUpgradeCmd=swUpgradeCmd, ocnHistPMOTNBERTimeStamp=ocnHistPMOTNBERTimeStamp, geHistPMOPRMaxTimeStamp=geHistPMOPRMaxTimeStamp, ethL1IFPMThresholdOTUEBValue=ethL1IFPMThresholdOTUEBValue, ethL1IFHistPMUNCRCDWTimeStamp=ethL1IFHistPMUNCRCDWTimeStamp, condNotifDefaultSeverity=condNotifDefaultSeverity, cpDbApplyResultEvt=cpDbApplyResultEvt, olsOTNPayloadMismatchCond=olsOTNPayloadMismatchCond, fcHistPMOPTAvgInitialize=fcHistPMOPTAvgInitialize, stmnCrntPMMSUASValue=stmnCrntPMMSUASValue, stmnHistPMLBCValue=stmnHistPMLBCValue, geRemoteId=geRemoteId, stmnLossOfSecondaryTimingReferenceCond=stmnLossOfSecondaryTimingReferenceCond, fcLossOfMultiframeClear=fcLossOfMultiframeClear, xcvrCrntPMOTNAVGBERTimeStamp=xcvrCrntPMOTNAVGBERTimeStamp, stsnHistPMSESPValidity=stsnHistPMSESPValidity, pvxL2IFHistPMMCSTTimeStamp=pvxL2IFHistPMMCSTTimeStamp, oaCrntPMOBRTimeStamp=oaCrntPMOBRTimeStamp, xcvrOpticalPwrReceived=xcvrOpticalPwrReceived, xcvrHistPMOPRAvgValidity=xcvrHistPMOPRAvgValidity, slotInvDataNameIdx=slotInvDataNameIdx, ocnHistPMUASSValue=ocnHistPMUASSValue, ocnLpbkOpTypeIdx=ocnLpbkOpTypeIdx, geHistPMUASInitialize=geHistPMUASInitialize, envLwHumCond=envLwHumCond, geHistPMTPFCTXInitialize=geHistPMTPFCTXInitialize, ocnLossOfSecondaryTimingReferenceClear=ocnLossOfSecondaryTimingReferenceClear, geCrntPMOPTMaxTimeStamp=geCrntPMOPTMaxTimeStamp, vcnPMThresholdByPortHPBBEValue=vcnPMThresholdByPortHPBBEValue, ocnHistPMOPRAvgValidity=ocnHistPMOPRAvgValidity, pluggableInvPluginEvt=pluggableInvPluginEvt, xcvrForcedSwitchToWorkingCond=xcvrForcedSwitchToWorkingCond, ethL1IFCrntPMCVTimeStamp=ethL1IFCrntPMCVTimeStamp, xcvrPMThresholdRSOFSValue=xcvrPMThresholdRSOFSValue, netMgmtOperStatQlfr=netMgmtOperStatQlfr, ethL1IFCrntPMOPTMinValidity=ethL1IFCrntPMOPTMinValidity, xcvrCrntPMRSBBEValidity=xcvrCrntPMRSBBEValidity, xcvrHistPMOPTMinTimeStamp=xcvrHistPMOPTMinTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrSignalDegradeCond=xcvrSignalDegradeCond, pvxL2IFCrntPMPortTypeIdx=pvxL2IFCrntPMPortTypeIdx, xcvrCrntPMTempValue=xcvrCrntPMTempValue, ocnHistPMUNCRCDWInitialize=ocnHistPMUNCRCDWInitialize, gcc0ConfigAdminStatus=gcc0ConfigAdminStatus, ocnCrntPMOPTAvgValue=ocnCrntPMOPTAvgValue, stsnXCProtTypeNum=stsnXCProtTypeNum, oaCaseTempClear=oaCaseTempClear, envBatDschrdClear=envBatDschrdClear, vcnHistPMIntervalTypeIdx=vcnHistPMIntervalTypeIdx, fcHistPMOPTValidity=fcHistPMOPTValidity, xcvrRemoteFaultCond=xcvrRemoteFaultCond, ocnHistPMOPRMinValue=ocnHistPMOPRMinValue, condDateAndTime=condDateAndTime, geCrntPMOPRMinValue=geCrntPMOPRMinValue, ethL1IFHistPMOPTMaxValue=ethL1IFHistPMOPTMaxValue, pvxBridge=pvxBridge, odunPortIdx=odunPortIdx, ocnPMThresholdPortIdx=ocnPMThresholdPortIdx, xcvrHistPMNBITCRValidity=xcvrHistPMNBITCRValidity, stmnPMThresholdRSUASValue=stmnPMThresholdRSUASValue, snmpTrapRcvVersion=snmpTrapRcvVersion, geHistPMTable=geHistPMTable, xcvrCrntPMOPTMaxTimeStamp=xcvrCrntPMOPTMaxTimeStamp, envFirDetrClear=envFirDetrClear, cpUpgradeResult=cpUpgradeResult, ethL1IFCrntPMOTUESTimeStamp=ethL1IFCrntPMOTUESTimeStamp, pvxL2IFCrntPMSwitchIdx=pvxL2IFCrntPMSwitchIdx, xcvrHistPMFCSEInitialize=xcvrHistPMFCSEInitialize, xcvrCrntPMNBITCR64BitInitialize=xcvrCrntPMNBITCR64BitInitialize, briLossOfAlignmentCond=briLossOfAlignmentCond, ipExtIntfGateway=ipExtIntfGateway, xcvrLpbkOpEntry=xcvrLpbkOpEntry, xcvrBackwardDefectIndicatorCond=xcvrBackwardDefectIndicatorCond, ntpClientAssocTable=ntpClientAssocTable, xcvrHistPMJABRValidity=xcvrHistPMJABRValidity, conditionNotifications=conditionNotifications, xcvrCrntPMINVBLKTimeStamp=xcvrCrntPMINVBLKTimeStamp, ethL1IFCrntPMOTUESInitialize=ethL1IFCrntPMOTUESInitialize, oscIPMask=oscIPMask, amdHistPMLineIdx=amdHistPMLineIdx, stsnCrntPMESPValue=stsnCrntPMESPValue, xcvrOpticalPwrTransmittedMinCond=xcvrOpticalPwrTransmittedMinCond, mstpEvtNotifications=mstpEvtNotifications, stmnCrntPMRSOFSTimeStamp=stmnCrntPMRSOFSTimeStamp, stmnHistPMMSBBEInitialize=stmnHistPMMSBBEInitialize, pvxL2IFCrntPMTBYCRXValue=pvxL2IFCrntPMTBYCRXValue, pvxL2IFCrntPMSIZE1024To1518Value=pvxL2IFCrntPMSIZE1024To1518Value, olsLoopbackCond=olsLoopbackCond, geHistPMOPRMaxValue=geHistPMOPRMaxValue, shelfInvEntry=shelfInvEntry, ethL1IFHistPMOTNBERValidity=ethL1IFHistPMOTNBERValidity, xcvrHistPMSESSValidity=xcvrHistPMSESSValidity, stmnCrntPMOTUUASValidity=stmnCrntPMOTUUASValidity, stmnHistPMPortIdx=stmnHistPMPortIdx, dbBackupAndRestoreType=dbBackupAndRestoreType, vcnPMThresholdByPortHPEBValue=vcnPMThresholdByPortHPEBValue, ethL1IFCrntPMOPRAvgValue=ethL1IFCrntPMOPRAvgValue, actAlarmCodeType=actAlarmCodeType, xcvrOpticalPwrReceivedMinCond=xcvrOpticalPwrReceivedMinCond, xcvrLossOfLockCond=xcvrLossOfLockCond, xcvrLockoutWorkingCond=xcvrLockoutWorkingCond, pvxL2IFHistPMSIZE512To1023Validity=pvxL2IFHistPMSIZE512To1023Validity, ocnStatusChangeEvt=ocnStatusChangeEvt, ocnCrntPMOPRAvgInitialize=ocnCrntPMOPRAvgInitialize, stmnCrntPMRSOFSValue=stmnCrntPMRSOFSValue, briHistPMOPTValidity=briHistPMOPTValidity, olsOTUTrailTraceMismatchClear=olsOTUTrailTraceMismatchClear, serialPortIdx=serialPortIdx, stmnProtSwEvtType=stmnProtSwEvtType, shelfCustom1=shelfCustom1, geMACAddr=geMACAddr, ocnProtSwEvtType=ocnProtSwEvtType, ocnCrntPMOTUUASValue=ocnCrntPMOTUUASValue, stmnProtGrpEntry=stmnProtGrpEntry, ntpAssocAuthenFailedClear=ntpAssocAuthenFailedClear, xcvrAutoEnableTimer=xcvrAutoEnableTimer, ocnProtGrpProtShelfIdx=ocnProtGrpProtShelfIdx, condNotifCtrl=condNotifCtrl, ocnTable=ocnTable, ocnPhyPMMon=ocnPhyPMMon, stsnBERTh=stsnBERTh, stsnPMThresholdByPortUASPValue=stsnPMThresholdByPortUASPValue, geCrntPMTBYCRXValue=geCrntPMTBYCRXValue, xcvrXCSrcIdx=xcvrXCSrcIdx, xcvrHistPMRSOFSValue=xcvrHistPMRSOFSValue, ethL1IFHistPMOTUOFSInitialize=ethL1IFHistPMOTUOFSInitialize, briLpbkOpCmd=briLpbkOpCmd, ocnCrntPMUASSInitialize=ocnCrntPMUASSInitialize, briCrntPMOPTMaxValue=briCrntPMOPTMaxValue, briLossOfLockCond=briLossOfLockCond, oaCrntPMLaser1TempValue=oaCrntPMLaser1TempValue, stmnHistPMMSBBEValidity=stmnHistPMMSBBEValidity, ocnLineMapping=ocnLineMapping, ethL1IFCrntPMOTUSESValue=ethL1IFCrntPMOTUSESValue, xcvrCrntPMMCSTTimeStamp=xcvrCrntPMMCSTTimeStamp, geCrntPMJABRTimeStamp=geCrntPMJABRTimeStamp, xcvrRemoteFaultClear=xcvrRemoteFaultClear, slotInvDspCommClear=slotInvDspCommClear, stmnLockoutWorkingClear=stmnLockoutWorkingClear, pvxL2IFHistPMTPFCRXValidity=pvxL2IFHistPMTPFCRXValidity, passivePortCustom2=passivePortCustom2, xcvrCrntPMOPRMinInitialize=xcvrCrntPMOPRMinInitialize, briLossOfLockClear=briLossOfLockClear, xcvrHistPMBCSTValue=xcvrHistPMBCSTValue, ocnHistPMOPRMaxInitialize=ocnHistPMOPRMaxInitialize, stmnCrntPMRSEBTimeStamp=stmnCrntPMRSEBTimeStamp, oaHistPMCaseTempTimeStamp=oaHistPMCaseTempTimeStamp, xcvrPMThresholdFRGTValue=xcvrPMThresholdFRGTValue, briCrntPMSupplyVoltageValidity=briCrntPMSupplyVoltageValidity, shelfInvExpectedShelfNum=shelfInvExpectedShelfNum, ocnCrntPMOPRMinValidity=ocnCrntPMOPRMinValidity, cpRestartOpEntry=cpRestartOpEntry, geCrntPMSIZE128To255Value=geCrntPMSIZE128To255Value, ocnHistPMOTUUASInitialize=ocnHistPMOTUUASInitialize, neSWVersion=neSWVersion, stmnHistPMMSSESTimeStamp=stmnHistPMMSSESTimeStamp, ocnHistPMIntervalTypeIdx=ocnHistPMIntervalTypeIdx, xcvrCrntPMOTNBERInitialize=xcvrCrntPMOTNBERInitialize, geHistPMSIZE65To127Initialize=geHistPMSIZE65To127Initialize, pvxL2IntfShelfIdx=pvxL2IntfShelfIdx, geWavelength=geWavelength, ocnCrntPMOTNBERValue=ocnCrntPMOTNBERValue, ocnHistPMESSValue=ocnHistPMESSValue, xcvrHistPMRSOFSInitialize=xcvrHistPMRSOFSInitialize, oaCrntPMOPRValidity=oaCrntPMOPRValidity, xcvrHistPMCVValue=xcvrHistPMCVValue, pvxL2IFHistPMFRDRInitialize=pvxL2IFHistPMFRDRInitialize, vcnProtSwOpTypeIdx=vcnProtSwOpTypeIdx, xcvrCrntPMLBCTimeStamp=xcvrCrntPMLBCTimeStamp, amdCrntPMPortIdx=amdCrntPMPortIdx, stmnPMThresholdMSBBEValue=stmnPMThresholdMSBBEValue, xcvrHistPMINVBLKValidity=xcvrHistPMINVBLKValidity, xcvrRFIClear=xcvrRFIClear, xcvrTraceMismatchClear=xcvrTraceMismatchClear, odunPayloadMismatchCond=odunPayloadMismatchCond, networkNeighborIPAddr=networkNeighborIPAddr, ospfLsdbLsid=ospfLsdbLsid, stmnOperations=stmnOperations, geHistPMMCSTInitialize=geHistPMMCSTInitialize, fcLossOfSignalCond=fcLossOfSignalCond, stmnLockoutProtectionCond=stmnLockoutProtectionCond, vcnLockoutProtectionCond=vcnLockoutProtectionCond, ocnPMThresholdUASLValue=ocnPMThresholdUASLValue, stmnHistPMNBITCRInitialize=stmnHistPMNBITCRInitialize, fcHistPMOPRMaxValue=fcHistPMOPRMaxValue, geOpticalPwrReceivedMaxTh=geOpticalPwrReceivedMaxTh, ocnPMThresholdOTUOFSValue=ocnPMThresholdOTUOFSValue, geCrntPMOPTMinValue=geCrntPMOPTMinValue, geHistPMSIZE64TimeStamp=geHistPMSIZE64TimeStamp, ocnOpticalPwrReceivedMinTh=ocnOpticalPwrReceivedMinTh, networkNeighborIdx=networkNeighborIdx, oaHistPMSSIOPRValidity=oaHistPMSSIOPRValidity, xcvrCrntPMMCSTValue=xcvrCrntPMMCSTValue, oaSSIOpticalPwrReceived=oaSSIOpticalPwrReceived, ethL1IFCrntPMTempValue=ethL1IFCrntPMTempValue, stmnCrntPMNBYTCR64BitInitialize=stmnCrntPMNBYTCR64BitInitialize, geCrntPMTPFCRXInitialize=geCrntPMTPFCRXInitialize, pvxL2IFHistPMSIZE64Initialize=pvxL2IFHistPMSIZE64Initialize, pluggableInvMfgDate=pluggableInvMfgDate, oaShelfIdx=oaShelfIdx, xcvrCrntPMUASInitialize=xcvrCrntPMUASInitialize, evtCodeType=evtCodeType, olsInputLOSClear=olsInputLOSClear, cpRowStatus=cpRowStatus, evtDateAndTime=evtDateAndTime, stmnHistPMOPRMinValidity=stmnHistPMOPRMinValidity, fcHistPMTempTimeStamp=fcHistPMTempTimeStamp, vcnCrntPMHPSESTimeStamp=vcnCrntPMHPSESTimeStamp, oscIPBcast=oscIPBcast, fcPMThresholdPortIdx=fcPMThresholdPortIdx, pluggableInvWavelengthSpacing=pluggableInvWavelengthSpacing, pvxL2IFCrntPMTBYCTXValue=pvxL2IFCrntPMTBYCTXValue, pvxL2IFCrntPMOSIZETimeStamp=pvxL2IFCrntPMOSIZETimeStamp, ocnProtGrpProtPortIdx=ocnProtGrpProtPortIdx, ocnWavelengthNotAchievableCond=ocnWavelengthNotAchievableCond, xcvrFPSD=xcvrFPSD, vcnPortIdx=vcnPortIdx, pvxL2IFCrntPMEntry=pvxL2IFCrntPMEntry, xcvrHistPMRSESTimeStamp=xcvrHistPMRSESTimeStamp, ospfIfSubIdx=ospfIfSubIdx, stmnCrntPMNBITCRValidity=stmnCrntPMNBITCRValidity, olEvtNotifications=olEvtNotifications, netMgmtMediaRate=netMgmtMediaRate, vcnProtSwOpShelfIdx=vcnProtSwOpShelfIdx, briHistPMOPTMaxInitialize=briHistPMOPTMaxInitialize, slotInvUpgradeStageResultEvt=slotInvUpgradeStageResultEvt, olsSFPMissingClear=olsSFPMissingClear, stsnSlotIdx=stsnSlotIdx, stmnCrntPMMSBBETimeStamp=stmnCrntPMMSBBETimeStamp, pluggableInvConnectorType=pluggableInvConnectorType, geHistPMSIZE256To511Validity=geHistPMSIZE256To511Validity, dbBackupAndRestoreFtpPswd=dbBackupAndRestoreFtpPswd, xcvrMismatchClear=xcvrMismatchClear, xcvrCrntPMCVSValue=xcvrCrntPMCVSValue, stmnCrntPMOPTAvgValue=stmnCrntPMOPTAvgValue, stmnHistPMNBYTCR64BitTimeStamp=stmnHistPMNBYTCR64BitTimeStamp, xcvrHistPMMCSTValue=xcvrHistPMMCSTValue, ethL1IFCrntPMOPRMinValidity=ethL1IFCrntPMOPRMinValidity, fcHistPMOPTAvgValidity=fcHistPMOPTAvgValidity, envHiWindClear=envHiWindClear, ocnCrntPMSESSInitialize=ocnCrntPMSESSInitialize, pvxL2IntfAdminStatus=pvxL2IntfAdminStatus, pvxL2IFHistPMTBYCRXValue=pvxL2IFHistPMTBYCRXValue, pvxL2IFHistPMSIZE256To511Value=pvxL2IFHistPMSIZE256To511Value, stsnProtSwEvtType=stsnProtSwEvtType, oaCrntPMLaser1TempTimeStamp=oaCrntPMLaser1TempTimeStamp, condNotifCtrlTable=condNotifCtrlTable, ocnLossOfFrameClear=ocnLossOfFrameClear, ocnLossOfPrimaryTimingReferenceClear=ocnLossOfPrimaryTimingReferenceClear, geCrntPMOPRMaxValue=geCrntPMOPRMaxValue, ethL1IFHistPMSupplyVoltage2Value=ethL1IFHistPMSupplyVoltage2Value, xcvrHistPMCVValidity=xcvrHistPMCVValidity, ethL1IFPMThresholdTable=ethL1IFPMThresholdTable, stsnCrntPMFCPValidity=stsnCrntPMFCPValidity, networkNeighborRowStatus=networkNeighborRowStatus, fcCrntPMOPTValue=fcCrntPMOPTValue, xcvrHistPMNBYTCRValidity=xcvrHistPMNBYTCRValidity, vcnCrntPMHPESValue=vcnCrntPMHPESValue, stmnCrntPMOTUBBETimeStamp=stmnCrntPMOTUBBETimeStamp, oaNumChannels=oaNumChannels, passivePortCpTypeIdx=passivePortCpTypeIdx, stmnCrntPMOTNBERValidity=stmnCrntPMOTNBERValidity, fcHistPMSESTimeStamp=fcHistPMSESTimeStamp, stmnOpticalPwrTransmittedMinTh=stmnOpticalPwrTransmittedMinTh, amdCrntPMOPTValidity=amdCrntPMOPTValidity, geCrntPMCVValidity=geCrntPMCVValidity, geHistPMCVValidity=geHistPMCVValidity, pvxL2IFCrntPMTable=pvxL2IFCrntPMTable, xcvrHistPMSupplyVoltage2Value=xcvrHistPMSupplyVoltage2Value, amdCrntPMLitChnValidity=amdCrntPMLitChnValidity, stmnHistPMOTUEBValue=stmnHistPMOTUEBValue, ocnPMThresholdOTUEBValue=ocnPMThresholdOTUEBValue, geCrntPMOPRAvgValue=geCrntPMOPRAvgValue, ospfAreaBdrRtrStatus=ospfAreaBdrRtrStatus, oaOOBRSDOpSlotIdx=oaOOBRSDOpSlotIdx, stmnHistPMMSSESInitialize=stmnHistPMMSSESInitialize, stmnHistPMNBYTCR64BitInitialize=stmnHistPMNBYTCR64BitInitialize, condCodeType=condCodeType, vcnAlarmIndicationSignalClear=vcnAlarmIndicationSignalClear, ethL1IFHistPMTable=ethL1IFHistPMTable, olsOTNPayloadMismatchClear=olsOTNPayloadMismatchClear, xcvrCrntPMRSSESValidity=xcvrCrntPMRSSESValidity, fcCrntPMOPTAvgValidity=fcCrntPMOPTAvgValidity, gePMThresholdESValue=gePMThresholdESValue, stmnCrntPMOPRMinTimeStamp=stmnCrntPMOPRMinTimeStamp, condSeverity=condSeverity, stmnCrntPMPortIdx=stmnCrntPMPortIdx, fcHistPMCVTimeStamp=fcHistPMCVTimeStamp, ocnPMThresholdSESLValue=ocnPMThresholdSESLValue, vcnSlotIdx=vcnSlotIdx, cpCrntPMCpTypeIdx=cpCrntPMCpTypeIdx, stsnCrntPMFCPInitialize=stsnCrntPMFCPInitialize, oaLaser2Current=oaLaser2Current)
mibBuilder.exportSymbols("BTI-7000-MIB", oaCaseTempMaxTh=oaCaseTempMaxTh, pvxL2IntfCtrlFrmProfileName=pvxL2IntfCtrlFrmProfileName, shelfInvExpansionShelfIdMismatchCond=shelfInvExpansionShelfIdMismatchCond, vcgXCProtNum=vcgXCProtNum, xcvrHistPMESTimeStamp=xcvrHistPMESTimeStamp, stmnHistPMOTUUASValidity=stmnHistPMOTUUASValidity, cpRestartOpTable=cpRestartOpTable, xcvrTcaEvt=xcvrTcaEvt, pluggableInvUnknownCond=pluggableInvUnknownCond, geCrntPMFRGTValue=geCrntPMFRGTValue, opticalLayer=opticalLayer, xcvrProtGrpId=xcvrProtGrpId, ocnCrntPMOPTMaxValidity=ocnCrntPMOPTMaxValidity, ethIntfErrorCorrection=ethIntfErrorCorrection, stsnPMThresholdByPortShelfIdx=stsnPMThresholdByPortShelfIdx, slotInvUpgradeInProgressCond=slotInvUpgradeInProgressCond, actAlarmDescription=actAlarmDescription, oaHistPMOPTValidity=oaHistPMOPTValidity, pluggableInvRestartOpShelfIdx=pluggableInvRestartOpShelfIdx, geHistPMOPRMinValidity=geHistPMOPRMinValidity, stsnXCStsnTypeIdx=stsnXCStsnTypeIdx, pluggableInvRestartOpTable=pluggableInvRestartOpTable, pvxL2IntfBcastLimit=pvxL2IntfBcastLimit, geCrntPMFRDRValidity=geCrntPMFRDRValidity, DbBackupAndRestoreType=DbBackupAndRestoreType, oaCrntPMOPRTimeStamp=oaCrntPMOPRTimeStamp, ethIntfLinkStatus=ethIntfLinkStatus, cpCustom3=cpCustom3, oaVariableOpticalAttenuation=oaVariableOpticalAttenuation, xcvrOpticalPwrTransmittedMinClear=xcvrOpticalPwrTransmittedMinClear, setErrorCode=setErrorCode, geHistPMSIZE1024To1518Initialize=geHistPMSIZE1024To1518Initialize, xcvrHistPMSIZE64Initialize=xcvrHistPMSIZE64Initialize, xcvrSDBERTh=xcvrSDBERTh, ethL1IFCrntPMUASTimeStamp=ethL1IFCrntPMUASTimeStamp, xcvrLpbkOpCmd=xcvrLpbkOpCmd, fcHistPMOPRAvgInitialize=fcHistPMOPRAvgInitialize, stmnCrntPMOTUEBValidity=stmnCrntPMOTUEBValidity, vcgXCDestSlotIdx=vcgXCDestSlotIdx, pluggableInvMinBitRate=pluggableInvMinBitRate, ocnPMThresholdUASSValue=ocnPMThresholdUASSValue, oaHistPMEffectiveGainTimeStamp=oaHistPMEffectiveGainTimeStamp, xcvrProtGrpEntry=xcvrProtGrpEntry, xcvrHistPMUASInitialize=xcvrHistPMUASInitialize, cpCrntPMIntervalTypeIdx=cpCrntPMIntervalTypeIdx, pvxL2IntfTrustIncomingDscp=pvxL2IntfTrustIncomingDscp, ocnProtGrpId=ocnProtGrpId, oaCrntPMMSInsLossValidity=oaCrntPMMSInsLossValidity, pvxL2IFHistPMTBYCRXInitialize=pvxL2IFHistPMTBYCRXInitialize, vcnTypeIdx=vcnTypeIdx, stmnCrntPMOTUOFSValidity=stmnCrntPMOTUOFSValidity, stmnHistPMNBYTCRValue=stmnHistPMNBYTCRValue, ocnOpticalPwrTransmittedMinCond=ocnOpticalPwrTransmittedMinCond, ocnCrntPMNBYTCR64BitTimeStamp=ocnCrntPMNBYTCR64BitTimeStamp, ospfIfType=ospfIfType, fcHistPMESValue=fcHistPMESValue, amdOperStatQlfr=amdOperStatQlfr, pvxL2IFHistPMSIZE128To255TimeStamp=pvxL2IFHistPMSIZE128To255TimeStamp, geHistPMMCSTTimeStamp=geHistPMMCSTTimeStamp, xcvrHistPMOTUBBEValue=xcvrHistPMOTUBBEValue, vcnCrntPMHPEBValidity=vcnCrntPMHPEBValidity, xcvrCrntPMOTUEBInitialize=xcvrCrntPMOTUEBInitialize, fcHistPMOPRMinValue=fcHistPMOPRMinValue, geCondNotifications=geCondNotifications, ntpAssocSrvrNotReachableCond=ntpAssocSrvrNotReachableCond, geHistPMOPRTimeStamp=geHistPMOPRTimeStamp, oaHistPMOPRValue=oaHistPMOPRValue, xcvrHistPMMCSTValidity=xcvrHistPMMCSTValidity, xcvrCrntPMUNCRCDWInitialize=xcvrCrntPMUNCRCDWInitialize, stmnHistPMSupplyVoltage2Value=stmnHistPMSupplyVoltage2Value, ocnFiberType=ocnFiberType, stmnProtSwOpShelfIdx=stmnProtSwOpShelfIdx, fcHistPMLBCValue=fcHistPMLBCValue, briTxLockingCond=briTxLockingCond, netMgmtIPMask=netMgmtIPMask, geAdminStatus=geAdminStatus, ethIntfFPSD=ethIntfFPSD, olsLoopbackClear=olsLoopbackClear, ocnCrntPMOTUSESInitialize=ocnCrntPMOTUSESInitialize, geHistPMOPTMinValue=geHistPMOPTMinValue, envCondAttrTable=envCondAttrTable, envLwBatvgClear=envLwBatvgClear, pvxL2IFHistPMTFRCTXInitialize=pvxL2IFHistPMTFRCTXInitialize, xcvrCrntPMUSIZETimeStamp=xcvrCrntPMUSIZETimeStamp, amdActAutoEnableTimer=amdActAutoEnableTimer, fcVendorPN3=fcVendorPN3, briOperStatus=briOperStatus, ethL1IFCrntPMUNCRCDWValue=ethL1IFCrntPMUNCRCDWValue, pvxL2IFCrntPMTFRCRXValidity=pvxL2IFCrntPMTFRCRXValidity, pvxL2IntfMACAddr=pvxL2IntfMACAddr, pluggableInvDDiagImpl=pluggableInvDDiagImpl, xcvrHistPMRSESValue=xcvrHistPMRSESValue, ocnPMThresholdESSValue=ocnPMThresholdESSValue, xcvrId2=xcvrId2, xcvrHistPMNBITCR64BitInitialize=xcvrHistPMNBITCR64BitInitialize, oaOOBRSDOpIdx=oaOOBRSDOpIdx, pvxL2IFCrntPMFCSEInitialize=pvxL2IFCrntPMFCSEInitialize, oaLaser2Temp=oaLaser2Temp, pluggableInvWavelength=pluggableInvWavelength, xcvrOpticalPwrReceivedMaxClear=xcvrOpticalPwrReceivedMaxClear, netMgmtType=netMgmtType, stmnHistPMOTNBERValue=stmnHistPMOTNBERValue, envMiscCond=envMiscCond, geCrntPMSIZE128To255Validity=geCrntPMSIZE128To255Validity, pvxL2IFCrntPMSIZE64Value=pvxL2IFCrntPMSIZE64Value, adminCondNotifications=adminCondNotifications, briHistPMOPTTimeStamp=briHistPMOPTTimeStamp, cpHistPMTempValidity=cpHistPMTempValidity, xcvrCrntPMSEFSSInitialize=xcvrCrntPMSEFSSInitialize, vcgXCType=vcgXCType, xcvrCrntPMSIZEOver1518Validity=xcvrCrntPMSIZEOver1518Validity, geHistPMSESValue=geHistPMSESValue, geLoopbackCond=geLoopbackCond, oaFiberType=oaFiberType, stmnEntry=stmnEntry, stmnCrntPMOTUESValidity=stmnCrntPMOTUESValidity, oscLossOfSignalClear=oscLossOfSignalClear, ocnForcedSwitchToWorkingClear=ocnForcedSwitchToWorkingClear, stmnHistPMOPRMaxValue=stmnHistPMOPRMaxValue, xcvrCrntPMSIZE512To1023Value=xcvrCrntPMSIZE512To1023Value, geCrntPMSIZE256To511TimeStamp=geCrntPMSIZE256To511TimeStamp, stmnCrntPMOPTAvgTimeStamp=stmnCrntPMOPTAvgTimeStamp, fcCrntPMOPTAvgInitialize=fcCrntPMOPTAvgInitialize, ethL1IFCrntPMOPRMaxValidity=ethL1IFCrntPMOPRMaxValidity, xcvrHistPMFRDRValidity=xcvrHistPMFRDRValidity, xcvrHistPMOPTMinValidity=xcvrHistPMOPTMinValidity, fcHistPMCVInitialize=fcHistPMCVInitialize, amdTALNAClear=amdTALNAClear, xcvrHistPMCVSValue=xcvrHistPMCVSValue, condNotifSeverity=condNotifSeverity, geLaserStatus=geLaserStatus, oaWavelength=oaWavelength, geCrntPMSIZE512To1023Value=geCrntPMSIZE512To1023Value, gePhyPMMon=gePhyPMMon, fcCrntPMCVInitialize=fcCrntPMCVInitialize, actCondObjectType=actCondObjectType, vcnProtSwOpIdx=vcnProtSwOpIdx, cpCheckUpgradeResultEvt=cpCheckUpgradeResultEvt, feCustom1=feCustom1, geCrntPMSIZE1024To1518Initialize=geCrntPMSIZE1024To1518Initialize, vcnCrntPMTable=vcnCrntPMTable, geCrntPMSupplyVoltageValue=geCrntPMSupplyVoltageValue, geLossOfMultiframeClear=geLossOfMultiframeClear, stmnCrntPMOTUBBEValidity=stmnCrntPMOTUBBEValidity, stmnWavelength=stmnWavelength, stsnOperations=stsnOperations, geOpticalPwrTransmittedMaxTh=geOpticalPwrTransmittedMaxTh, geHistPMTPFCRXValidity=geHistPMTPFCRXValidity, fcHistPMOPRTimeStamp=fcHistPMOPRTimeStamp, stmnCrntPMOTNAVGBERInitialize=stmnCrntPMOTNAVGBERInitialize, tcaThreshold=tcaThreshold, ocnHistPMNBITCR64BitTimeStamp=ocnHistPMNBITCR64BitTimeStamp, ocnCrntPMOTUOFSTimeStamp=ocnCrntPMOTUOFSTimeStamp, xcvrCrntPMNBYTCRTimeStamp=xcvrCrntPMNBYTCRTimeStamp, stmnCrntPMOTUESTimeStamp=stmnCrntPMOTUESTimeStamp, shelfInvUnknownCond=shelfInvUnknownCond, ocnCrntPMOTUEBTimeStamp=ocnCrntPMOTUEBTimeStamp, xcvrHistPMSESValue=xcvrHistPMSESValue, ocnProtGrpTable=ocnProtGrpTable, geShelfIdx=geShelfIdx, pvxL2IntfIngressBandwidthProfile=pvxL2IntfIngressBandwidthProfile, dbBackupAndRestoreCheckAlm=dbBackupAndRestoreCheckAlm, geCrntPMUSIZETimeStamp=geCrntPMUSIZETimeStamp, oaCrntPMEntry=oaCrntPMEntry, fcCrntPMOPRMinInitialize=fcCrntPMOPRMinInitialize, briHistPMOPRMaxValue=briHistPMOPRMaxValue, pvxL2IFTcaEvt=pvxL2IFTcaEvt, amdHistPMEntry=amdHistPMEntry, oaTypeIdx=oaTypeIdx, pvxL2IntfMcastLimit=pvxL2IntfMcastLimit, pvxL2IFCrntPMTPFCTXTimeStamp=pvxL2IFCrntPMTPFCTXTimeStamp, ethL1IFHistPMNBITCR64BitValidity=ethL1IFHistPMNBITCR64BitValidity, pvxL2IFHistPMFCSEInitialize=pvxL2IFHistPMFCSEInitialize, vcgEntry=vcgEntry, fcCrntPMOPTMinTimeStamp=fcCrntPMOPTMinTimeStamp, ethL1IFHistPMSupplyVoltage2TimeStamp=ethL1IFHistPMSupplyVoltage2TimeStamp, cpSynchronizationSwEvtType=cpSynchronizationSwEvtType, xcvrHistPMNBITCRValue=xcvrHistPMNBITCRValue, ocnCrntPMESLValidity=ocnCrntPMESLValidity, ospfIfRtrPriority=ospfIfRtrPriority, xcvrHistPMNBYTCR64BitTimeStamp=xcvrHistPMNBYTCR64BitTimeStamp, pvxL2IFCrntPMFRGTInitialize=pvxL2IFCrntPMFRGTInitialize, vcnXCTable=vcnXCTable, stmnProtGrpRowStatus=stmnProtGrpRowStatus, pvxL2IFCrntPMOSIZEValue=pvxL2IFCrntPMOSIZEValue, slotInvHTSThreshExceededCond=slotInvHTSThreshExceededCond, envCpMajorClear=envCpMajorClear, oscEntry=oscEntry, geCrntPMSupplyVoltageValidity=geCrntPMSupplyVoltageValidity, ethIntfLldpRemPortId=ethIntfLldpRemPortId, ocnHistPMESSTimeStamp=ocnHistPMESSTimeStamp, geHistPMCVInitialize=geHistPMCVInitialize, geHistPMOPTAvgValidity=geHistPMOPTAvgValidity, pvxL2IFHistPMFRDRValidity=pvxL2IFHistPMFRDRValidity, stsnAlarmIndicationSignalClear=stsnAlarmIndicationSignalClear, serialEntry=serialEntry, ethL1IFHistPMINVBLKValue=ethL1IFHistPMINVBLKValue, shelfInvAssemblyPEC=shelfInvAssemblyPEC, shelfInvSerialNum=shelfInvSerialNum, ocnCrntPMNBYTCR64BitValue=ocnCrntPMNBYTCR64BitValue, amdOpticalPwrReceivedMinClear=amdOpticalPwrReceivedMinClear, xcvrForcedSwitchToProtectionCond=xcvrForcedSwitchToProtectionCond, amdGrid=amdGrid, passivePortRowStatus=passivePortRowStatus, geHistPMSupplyVoltageValidity=geHistPMSupplyVoltageValidity, cpAdminStatus=cpAdminStatus, stmnCustom1=stmnCustom1, geCrntPMTempValidity=geCrntPMTempValidity, oaHistPMLaser1PowerValidity=oaHistPMLaser1PowerValidity, amdHistPMTable=amdHistPMTable, ethL1IFCrntPMNBYTCRValidity=ethL1IFCrntPMNBYTCRValidity, tl1LogDateAndTime=tl1LogDateAndTime, briBandwidthMismatchClear=briBandwidthMismatchClear, xcvrCrntPMTypeIdx=xcvrCrntPMTypeIdx, xcvrCrntPMOTUBBEValidity=xcvrCrntPMOTUBBEValidity, geHistPMTFRCRXTimeStamp=geHistPMTFRCRXTimeStamp, fcCrntPMESValidity=fcCrntPMESValidity, xcvrCrntPMFCSETimeStamp=xcvrCrntPMFCSETimeStamp, ethL1IFHistPMOTUEBTimeStamp=ethL1IFHistPMOTUEBTimeStamp, pvxL2IFCrntPMTFRCRXValue=pvxL2IFCrntPMTFRCRXValue, geCrntPMOPTAvgTimeStamp=geCrntPMOPTAvgTimeStamp, ocnCrntPMOPRMaxTimeStamp=ocnCrntPMOPRMaxTimeStamp, fcHistPMUASTimeStamp=fcHistPMUASTimeStamp, geHistPMBCSTValidity=geHistPMBCSTValidity, oaActAutoEnableTimer=oaActAutoEnableTimer, oaOpticalPwrTransmittedMaxCond=oaOpticalPwrTransmittedMaxCond, pvxL2IFPMThresholdPortTypeIdx=pvxL2IFPMThresholdPortTypeIdx, xcvrCrntPMCVTimeStamp=xcvrCrntPMCVTimeStamp, xcvrCrntPMNBYTCRValidity=xcvrCrntPMNBYTCRValidity, pvxLldpEvtNotifications=pvxLldpEvtNotifications, actCondCodeType=actCondCodeType, ospfIfTable=ospfIfTable, pvxL2IntfSwitchIdx=pvxL2IntfSwitchIdx, xcvrOpticalPwrReceivedMaxCond=xcvrOpticalPwrReceivedMaxCond, ocnHistPMOPTMaxInitialize=ocnHistPMOPTMaxInitialize, amdCrntPMLitChnTimeStamp=amdCrntPMLitChnTimeStamp, ocnLpbkOpPortIdx=ocnLpbkOpPortIdx, geCrntPMUASValidity=geCrntPMUASValidity, oscUnmbrd=oscUnmbrd, xcvrCrntPMLBCValue=xcvrCrntPMLBCValue, ocnCrntPMESSInitialize=ocnCrntPMESSInitialize, geHistPMOPRValue=geHistPMOPRValue, ethL1IFCrntPMCVValue=ethL1IFCrntPMCVValue, shelfInvCondNotifications=shelfInvCondNotifications, ocnCrntPMUASLInitialize=ocnCrntPMUASLInitialize, xcvrHistPMTBYCRXTimeStamp=xcvrHistPMTBYCRXTimeStamp, oaHistPMMSInsLossTimeStamp=oaHistPMMSInsLossTimeStamp, xcvrCrntPMOPRMinTimeStamp=xcvrCrntPMOPRMinTimeStamp, pluggableInvWavelengthMin=pluggableInvWavelengthMin, pvxL2IFHistPMFCSETimeStamp=pvxL2IFHistPMFCSETimeStamp, pluggableInvEntry=pluggableInvEntry, actAlarmTable=actAlarmTable, envClFanClear=envClFanClear, geHistPMOPRAvgValue=geHistPMOPRAvgValue)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrHistPMCVSTimeStamp=xcvrHistPMCVSTimeStamp, ethL1IFHistPMOPRValidity=ethL1IFHistPMOPRValidity, stsnXCProtNum=stsnXCProtNum, fcHistPMIntervalIdx=fcHistPMIntervalIdx, ethL1IFPMThresholdPortTypeIdx=ethL1IFPMThresholdPortTypeIdx, tl1UserEntry=tl1UserEntry, envGenericCond=envGenericCond, xcvrCrntPMOSIZETimeStamp=xcvrCrntPMOSIZETimeStamp, ntpAssocSrvrNotRespondingCond=ntpAssocSrvrNotRespondingCond, gcc0ConfigEntry=gcc0ConfigEntry, stmnHistPMOTUOFSInitialize=stmnHistPMOTUOFSInitialize, feMTU=feMTU, xcvrCrntPMUNCRCDWValue=xcvrCrntPMUNCRCDWValue, envRectHiClear=envRectHiClear, xcvrHistPMSIZE256To511Value=xcvrHistPMSIZE256To511Value, stmnCrntPMOPRMinValue=stmnCrntPMOPRMinValue, amdRowStatus=amdRowStatus, pvxL2IntfCtrlFrmProfileId=pvxL2IntfCtrlFrmProfileId, xcvrHistPMSIZE1024To1518Validity=xcvrHistPMSIZE1024To1518Validity, xcvrHistPMOTUSESInitialize=xcvrHistPMOTUSESInitialize, oaOpticalPwrTransmittedMinCond=oaOpticalPwrTransmittedMinCond, stmnCrntPMSupplyVoltageValue=stmnCrntPMSupplyVoltageValue, geHistPMSIZE1024To1518Value=geHistPMSIZE1024To1518Value, geHistPMOPTMinValidity=geHistPMOPTMinValidity, ocnLaserStatus=ocnLaserStatus, pvxL2IFCrntPMSIZE128To255TimeStamp=pvxL2IFCrntPMSIZE128To255TimeStamp, shelfType=shelfType, stmnCrntPMRSESTimeStamp=stmnCrntPMRSESTimeStamp, stmnCrntPMNBITCRInitialize=stmnCrntPMNBITCRInitialize, pluggableInvUSI=pluggableInvUSI, stmnPMThresholdTable=stmnPMThresholdTable, vcnHistPMIdx=vcnHistPMIdx, dbBackupAndRestorePath=dbBackupAndRestorePath, shelfInvTempMaxClear=shelfInvTempMaxClear, stmnCondNotifications=stmnCondNotifications, geCrntPMMCSTValidity=geCrntPMMCSTValidity, pluggableInvEvtNotifications=pluggableInvEvtNotifications, ethIntfRowStatus=ethIntfRowStatus, stsnHistPMShelfIdx=stsnHistPMShelfIdx, xcvrLossOfFrameCond=xcvrLossOfFrameCond, stmnProtGrpWorkPortIdx=stmnProtGrpWorkPortIdx, ethIntfMTU=ethIntfMTU, geHistPMOPTValidity=geHistPMOPTValidity, xcvrCrntPMTempValidity=xcvrCrntPMTempValidity, oaGrid=oaGrid, olsOpticalPwrReceivedMinClear=olsOpticalPwrReceivedMinClear, oaHistPMOBRTimeStamp=oaHistPMOBRTimeStamp, stmnPhyPMMon=stmnPhyPMMon, ethIntfOpticalPwrReceivedMinTh=ethIntfOpticalPwrReceivedMinTh, geCrntPMTPFCTXValidity=geCrntPMTPFCTXValidity, ospfVersionNumber=ospfVersionNumber, geCrntPMCVValue=geCrntPMCVValue, pvxL2IFCrntPMSIZE256To511Value=pvxL2IFCrntPMSIZE256To511Value, briLossOfMultiframeCond=briLossOfMultiframeCond, cpCrntPMTempValidity=cpCrntPMTempValidity, slotInvPowerFailClear=slotInvPowerFailClear, vcnPMThresholdByPortShelfIdx=vcnPMThresholdByPortShelfIdx, slotInvDataValue=slotInvDataValue, stmnHistPMNBITCR64BitValidity=stmnHistPMNBITCR64BitValidity, fcVendorPN1=fcVendorPN1, oscRowStatus=oscRowStatus, oaCrntPMEffectiveGainValidity=oaCrntPMEffectiveGainValidity, ocnCrntPMOPRMinValue=ocnCrntPMOPRMinValue, vcnHistPMTypeIdx=vcnHistPMTypeIdx, ethL1IFHistPMOTUEBInitialize=ethL1IFHistPMOTUEBInitialize, ocnHistPMSupplyVoltage2Value=ocnHistPMSupplyVoltage2Value, oaHistPMEffectiveGainValue=oaHistPMEffectiveGainValue, briCrntPMOPRAvgValue=briCrntPMOPRAvgValue, xcvrAdminStatus=xcvrAdminStatus, stmnHistPMNBITCR64BitValue=stmnHistPMNBITCR64BitValue, ethL1IFHistPMOTUOFSValidity=ethL1IFHistPMOTUOFSValidity, pvxL2IFCrntPMIntervalTypeIdx=pvxL2IFCrntPMIntervalTypeIdx, stmnLpbkOpSlotIdx=stmnLpbkOpSlotIdx, oaHistPMLaser1PowerValue=oaHistPMLaser1PowerValue, xcvrCrntPMSIZE65To127Value=xcvrCrntPMSIZE65To127Value, xcvrPMThresholdEntry=xcvrPMThresholdEntry, trapSeqNum=trapSeqNum, fcCrntPMOPRAvgInitialize=fcCrntPMOPRAvgInitialize, stmnCrntPMNBITCR64BitValidity=stmnCrntPMNBITCR64BitValidity, dataCommsPingShelfIdx=dataCommsPingShelfIdx, xcvrProtGrpProtSlotIdx=xcvrProtGrpProtSlotIdx, cpSlotIdx=cpSlotIdx, briId1=briId1, ethIntfSlotIdx=ethIntfSlotIdx, ethL1IFCrntPMSupplyVoltage2Validity=ethL1IFCrntPMSupplyVoltage2Validity, ocnCrntPMLBCValidity=ocnCrntPMLBCValidity, operations=operations, ethL1IFCrntPMOTUUASTimeStamp=ethL1IFCrntPMOTUUASTimeStamp, ethL1IFHistPMOPRMaxTimeStamp=ethL1IFHistPMOPRMaxTimeStamp, ocnWavelengthNotAchievableClear=ocnWavelengthNotAchievableClear, stmnVendorPN3=stmnVendorPN3, geCrntPMFRGTInitialize=geCrntPMFRGTInitialize, amdShelfIdx=amdShelfIdx, ethL1IFPMThresholdEntry=ethL1IFPMThresholdEntry, dataCommsPingSlotIdx=dataCommsPingSlotIdx, briCrntPMOPRMaxValue=briCrntPMOPRMaxValue, pvxESrvcEvtNotifications=pvxESrvcEvtNotifications, ethIntfAdminStatus=ethIntfAdminStatus, envExplGsClear=envExplGsClear, ethL1IFHistPMOTUOFSTimeStamp=ethL1IFHistPMOTUOFSTimeStamp, xcvrCrntPMBCSTInitialize=xcvrCrntPMBCSTInitialize, stmnHistPMRSEBInitialize=stmnHistPMRSEBInitialize, fcCrntPMOPTMaxTimeStamp=fcCrntPMOPTMaxTimeStamp, fcTcaEvt=fcTcaEvt, xcvrCrntPMMCSTValidity=xcvrCrntPMMCSTValidity, xcvrHistPMTFRCRXValidity=xcvrHistPMTFRCRXValidity, pvxL2IFHistPMFRDRTimeStamp=pvxL2IFHistPMFRDRTimeStamp, stmnLpbkOpCmd=stmnLpbkOpCmd, stmnXcvrMismatchClear=stmnXcvrMismatchClear, stmnVendorPN2=stmnVendorPN2, ocnCrntPMNBYTCR64BitValidity=ocnCrntPMNBYTCR64BitValidity, ethL1IFCrntPMUNCRCDWValidity=ethL1IFCrntPMUNCRCDWValidity, vcnHistPMHPEBValue=vcnHistPMHPEBValue, geCrntPMSIZE256To511Value=geCrntPMSIZE256To511Value, vcnCrntPMShelfIdx=vcnCrntPMShelfIdx, stsnXCDestPortIdx=stsnXCDestPortIdx, oaOpticalPwrTransmittedMaxTh=oaOpticalPwrTransmittedMaxTh, ocnOpticalPwrReceivedMaxCond=ocnOpticalPwrReceivedMaxCond, amdHistPMSlotIdx=amdHistPMSlotIdx, ethL1IFCrntPMOPRMaxInitialize=ethL1IFCrntPMOPRMaxInitialize, briCrntPMOPTMinValue=briCrntPMOPTMinValue, odunXCType=odunXCType, pvxL2IFHistPMTBYCTXValidity=pvxL2IFHistPMTBYCTXValidity, stmnCrntPMRSUASTimeStamp=stmnCrntPMRSUASTimeStamp, pvxL2IFCrntPMTBYCTXInitialize=pvxL2IFCrntPMTBYCTXInitialize, ocnCrntPMUASSTimeStamp=ocnCrntPMUASSTimeStamp, shelfInvEvtNotifications=shelfInvEvtNotifications, feRemoteId=feRemoteId, geCrntPMESTimeStamp=geCrntPMESTimeStamp, amdAutoEnableTimer=amdAutoEnableTimer, cpDegradeClear=cpDegradeClear, xcvrCrntPMSIZE1024To1518Value=xcvrCrntPMSIZE1024To1518Value, oaDspCommClear=oaDspCommClear, gcc0ConfigSlotIdx=gcc0ConfigSlotIdx, stmnCrntPMOTNAVGBERTimeStamp=stmnCrntPMOTNAVGBERTimeStamp, ocnHistPMSupplyVoltageValue=ocnHistPMSupplyVoltageValue, briHistPMOPRAvgValue=briHistPMOPRAvgValue, oaCrntPMMSInsLossValue=oaCrntPMMSInsLossValue, envHiHumCond=envHiHumCond, fcCrntPMOPTAvgValue=fcCrntPMOPTAvgValue, ocnSignalDegradeClear=ocnSignalDegradeClear, ocnHistPMNBITCRValidity=ocnHistPMNBITCRValidity, xcvrSlotIdx=xcvrSlotIdx, SwUpgradeFileTransferType=SwUpgradeFileTransferType, xcvrCrntPMRSUASValue=xcvrCrntPMRSUASValue, briOpticalPwrReceived=briOpticalPwrReceived, geHistPMFRDRInitialize=geHistPMFRDRInitialize, stmnOpticalPwrReceived=stmnOpticalPwrReceived, xcvrHistPMOPRMaxInitialize=xcvrHistPMOPRMaxInitialize, stmnLossOfFrameCond=stmnLossOfFrameCond, pvxL2IFCrntPMTPFCTXValue=pvxL2IFCrntPMTPFCTXValue, ethL1IFHistPMLBCValidity=ethL1IFHistPMLBCValidity, geCrntPMTFRCRXInitialize=geCrntPMTFRCRXInitialize, amdHistPMLitChnTimeStamp=amdHistPMLitChnTimeStamp, xcvrHistPMOPTAvgValue=xcvrHistPMOPTAvgValue, ipExtIntfOperStatus=ipExtIntfOperStatus, geLpbkOpPortIdx=geLpbkOpPortIdx, xcvrHistPMSESInitialize=xcvrHistPMSESInitialize, ospfAreaId=ospfAreaId, odunIdx=odunIdx, stmnPMThresholdMSEBValue=stmnPMThresholdMSEBValue, geHistPMSIZEOver1518Initialize=geHistPMSIZEOver1518Initialize, cpDbDeletionInProgressClear=cpDbDeletionInProgressClear, amdOpticalPwrReceived=amdOpticalPwrReceived, oscMTU=oscMTU, fcPMThresholdEntry=fcPMThresholdEntry, oaCrntPMOBRValidity=oaCrntPMOBRValidity, envVentnCond=envVentnCond, xcvrCrntPMOSIZEValidity=xcvrCrntPMOSIZEValidity, xcvrHistPMSESSInitialize=xcvrHistPMSESSInitialize, slotInvPackTestLoc=slotInvPackTestLoc, shelfCondNotifications=shelfCondNotifications, stmnHistPMEntry=stmnHistPMEntry, gcc0ConfigPortIdx=gcc0ConfigPortIdx, neAutoProv=neAutoProv, xcvrHistPMNBYTCR64BitValue=xcvrHistPMNBYTCR64BitValue, stmnPMThresholdRSBBEValue=stmnPMThresholdRSBBEValue, fcHistPMOPTAvgValue=fcHistPMOPTAvgValue, stsnHistPMFCPInitialize=stsnHistPMFCPInitialize, stmnHistPMOPTMaxValidity=stmnHistPMOPTMaxValidity, slotInvHTThreshExceededCond=slotInvHTThreshExceededCond, xcvrCrntPMRSEBValidity=xcvrCrntPMRSEBValidity, envDoorOpenCond=envDoorOpenCond, briHistPMOPTMinValidity=briHistPMOPTMinValidity, vcnConcatMismatchCond=vcnConcatMismatchCond, xcvrHistPMOPRAvgInitialize=xcvrHistPMOPRAvgInitialize, xcvrProtGrpWorkSlotIdx=xcvrProtGrpWorkSlotIdx, ethL1IFCrntPMINVBLKValue=ethL1IFCrntPMINVBLKValue, geCrntPMBCSTValue=geCrntPMBCSTValue, geHistPMOPRMaxValidity=geHistPMOPRMaxValidity, ocnProtGrpProtTypeIdx=ocnProtGrpProtTypeIdx, dbChangeDateAndTime=dbChangeDateAndTime, xcvrHistPMSIZE128To255Validity=xcvrHistPMSIZE128To255Validity, fcHistPMOPTMaxInitialize=fcHistPMOPTMaxInitialize, xcvrHistPMINVBLKInitialize=xcvrHistPMINVBLKInitialize, stmnHistPMSupplyVoltage2Validity=stmnHistPMSupplyVoltage2Validity, shelfTable=shelfTable, ethL1IFHistPMUASValue=ethL1IFHistPMUASValue, geHistPMTFRCRXValue=geHistPMTFRCRXValue, pvxL2IntfDefaultPriority=pvxL2IntfDefaultPriority, oaCrntPMShelfIdx=oaCrntPMShelfIdx, ocnTransparencyChannel=ocnTransparencyChannel, geOpticalPwrTransmittedMinTh=geOpticalPwrTransmittedMinTh, oaCrntPMFSOOPTTimeStamp=oaCrntPMFSOOPTTimeStamp, pvxL2IFHistPMIntervalTypeIdx=pvxL2IFHistPMIntervalTypeIdx, ocnAlarmIndicationSignalClear=ocnAlarmIndicationSignalClear, stmnLpbkOpTable=stmnLpbkOpTable, oaCaseTempShutdownClear=oaCaseTempShutdownClear, shelfMismatchCond=shelfMismatchCond, vcnPMThresholdByPortTypeIdx=vcnPMThresholdByPortTypeIdx, olsOpticalPwrTransmittedMinClear=olsOpticalPwrTransmittedMinClear, neCondNotifications=neCondNotifications, xcvrCrntPMSESTimeStamp=xcvrCrntPMSESTimeStamp, stmnCrntPMOTUBBEValue=stmnCrntPMOTUBBEValue, ocnRowStatus=ocnRowStatus, stmnCrntPMOPRMinValidity=stmnCrntPMOPRMinValidity, fcCrntPMUASValue=fcCrntPMUASValue, ethL1IFCrntPMSESValue=ethL1IFCrntPMSESValue, ethL1IFHistPMUASTimeStamp=ethL1IFHistPMUASTimeStamp, briCrntPMLBCValue=briCrntPMLBCValue, slotInvDataEntry=slotInvDataEntry, oscType=oscType, geOperations=geOperations, oaHistPMVOATimeStamp=oaHistPMVOATimeStamp, stmnHistPMNBITCRValidity=stmnHistPMNBITCRValidity, ocnHistPMOPRValidity=ocnHistPMOPRValidity, ethL1IFHistPMSESTimeStamp=ethL1IFHistPMSESTimeStamp, pvxL2IFCrntPMTPFCTXInitialize=pvxL2IFCrntPMTPFCTXInitialize, cpRestartOpShelfIdx=cpRestartOpShelfIdx, pvxL2IntfSchedProfName=pvxL2IntfSchedProfName, xcvrCrntPMSIZEOver1518TimeStamp=xcvrCrntPMSIZEOver1518TimeStamp, envOpenDrClear=envOpenDrClear, stmnBERTh=stmnBERTh, oaHistPMLaser2CurrentValue=oaHistPMLaser2CurrentValue, ocnOTNPayloadMismatchClear=ocnOTNPayloadMismatchClear, stmnHistPMRSEBValue=stmnHistPMRSEBValue, ethIntfVendorPN3=ethIntfVendorPN3, ipExtIntfRowStatus=ipExtIntfRowStatus, ocnOpticalPwrTransmittedMaxCond=ocnOpticalPwrTransmittedMaxCond, xcvrCrntPMCVValue=xcvrCrntPMCVValue, stmnCrntPMRSBBEInitialize=stmnCrntPMRSBBEInitialize, pvxL2IFCrntPMFRGTTimeStamp=pvxL2IFCrntPMFRGTTimeStamp, pvxL2IFHistPMSIZE65To127Initialize=pvxL2IFHistPMSIZE65To127Initialize, stmnCrntPMMSSESValidity=stmnCrntPMMSSESValidity, tl1LogMsgCode=tl1LogMsgCode, briCrntPMOPRAvgTimeStamp=briCrntPMOPRAvgTimeStamp, xcvrCrntPMOTUSESInitialize=xcvrCrntPMOTUSESInitialize, ethL1IFCrntPMOTUESValue=ethL1IFCrntPMOTUESValue, geHistPMJABRValidity=geHistPMJABRValidity, gePMThresholdSlotIdx=gePMThresholdSlotIdx, vcgPortIdx=vcgPortIdx, geFPSD=geFPSD, stsnProtSwOpSlotIdx=stsnProtSwOpSlotIdx, xcvrHistPMCVTimeStamp=xcvrHistPMCVTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", pvxL2IFHistPMTFRCRXInitialize=pvxL2IFHistPMTFRCRXInitialize, fcHistPMOPRMaxTimeStamp=fcHistPMOPRMaxTimeStamp, pvxL2IFPMThresholdFRGTValue=pvxL2IFPMThresholdFRGTValue, ethL1IFCrntPMCVValidity=ethL1IFCrntPMCVValidity, slotInvEvtNotifications=slotInvEvtNotifications, ethL1IFHistPMOTUSESInitialize=ethL1IFHistPMOTUSESInitialize, dataCommsPingNumAttempts=dataCommsPingNumAttempts, xcvrPMThresholdTypeIdx=xcvrPMThresholdTypeIdx, xcvrHistPMOTUESTimeStamp=xcvrHistPMOTUESTimeStamp, stmnPMThresholdTypeIdx=stmnPMThresholdTypeIdx, fcCrntPMUASValidity=fcCrntPMUASValidity, pvxL2IFHistPMTable=pvxL2IFHistPMTable, pvxL2IFPMThresholdSwitchIdx=pvxL2IFPMThresholdSwitchIdx, cpRestartOpCmd=cpRestartOpCmd, DbBackupAndRestoreCmd=DbBackupAndRestoreCmd, stsnCrntPMESPTimeStamp=stsnCrntPMESPTimeStamp, ethL1IFHistPMCVInitialize=ethL1IFHistPMCVInitialize, cpRestartOpTypeIdx=cpRestartOpTypeIdx, stmnOpticalPwrTransmittedMinCond=stmnOpticalPwrTransmittedMinCond, oaCustom1=oaCustom1, pvxL2IntfIngressFiltering=pvxL2IntfIngressFiltering, facilities=facilities, fcOpticalPwrTransmitted=fcOpticalPwrTransmitted, gcc0ConfigOperStatus=gcc0ConfigOperStatus, geCrntPMOPTAvgValue=geCrntPMOPTAvgValue, stmnHistPMRSBBEValue=stmnHistPMRSBBEValue, vcnCrntPMHPBBETimeStamp=vcnCrntPMHPBBETimeStamp, oaCrntPMFSOOPTValue=oaCrntPMFSOOPTValue, ethL1IFCrntPMOTUEBValue=ethL1IFCrntPMOTUEBValue, xcvrHistPMSlotIdx=xcvrHistPMSlotIdx, ipExtInterfaceTableEntry=ipExtInterfaceTableEntry, stmnHistPMSlotIdx=stmnHistPMSlotIdx, pvxL2IFCrntPMFCSETimeStamp=pvxL2IFCrntPMFCSETimeStamp, geHistPMUSIZEInitialize=geHistPMUSIZEInitialize, briStatusChangeEvt=briStatusChangeEvt, cpStorageCardFailClear=cpStorageCardFailClear, geCrntPMSIZE65To127TimeStamp=geCrntPMSIZE65To127TimeStamp, xcvrOpticalPwrTransmitted=xcvrOpticalPwrTransmitted, pvxL2IFCrntPMOSIZEValidity=pvxL2IFCrntPMOSIZEValidity, briHistPMSlotIdx=briHistPMSlotIdx, ocnCrntPMNBITCRTimeStamp=ocnCrntPMNBITCRTimeStamp, envFirDetrCond=envFirDetrCond, xcvrHistPMRSBBEValue=xcvrHistPMRSBBEValue, fcLpbkOpPortIdx=fcLpbkOpPortIdx, fcRemotePathFailureCond=fcRemotePathFailureCond, geHistPMTBYCTXValue=geHistPMTBYCTXValue, xcvrCrntPMOPTAvgValue=xcvrCrntPMOPTAvgValue, slotInvPwrFeedAFuseFailClear=slotInvPwrFeedAFuseFailClear, xcvrCrntPMOTNAVGBERValue=xcvrCrntPMOTNAVGBERValue, pvxL2IFHistPMSwitchIdx=pvxL2IFHistPMSwitchIdx, xcvrHistPMSIZEOver1518Initialize=xcvrHistPMSIZEOver1518Initialize, oaHistPMLaser2PowerValue=oaHistPMLaser2PowerValue, dbChangeNotificationsObjects=dbChangeNotificationsObjects, ocnCrntPMOPRMaxValidity=ocnCrntPMOPRMaxValidity, envAirComprCond=envAirComprCond, ocnHistPMNBYTCR64BitValue=ocnHistPMNBYTCR64BitValue, xcvrPhyPMMon=xcvrPhyPMMon, ocnProtGrpWorkSlotIdx=ocnProtGrpWorkSlotIdx, slotInvUpgradeResult=slotInvUpgradeResult, oaLaser1Power=oaLaser1Power, fcHistPMUASValidity=fcHistPMUASValidity, actAlarmInstanceIdx=actAlarmInstanceIdx, stmnPMThresholdEntry=stmnPMThresholdEntry, xcvrCrntPMOPTMinValidity=xcvrCrntPMOPTMinValidity, fcCrntPMOPRMinValue=fcCrntPMOPRMinValue, briCrntPMOPTMaxInitialize=briCrntPMOPTMaxInitialize, xcvrHistPMJABRInitialize=xcvrHistPMJABRInitialize, stmnHistPMOPTTimeStamp=stmnHistPMOPTTimeStamp, netMgmtOperStatus=netMgmtOperStatus, pvxL2IFHistPMTPFCRXValue=pvxL2IFHistPMTPFCRXValue, vcnProtSwOpPortIdx=vcnProtSwOpPortIdx, geCrntPMFCSETimeStamp=geCrntPMFCSETimeStamp, briCrntPMPortIdx=briCrntPMPortIdx, ocnHistPMESLValidity=ocnHistPMESLValidity, stsnHistPMESPValue=stsnHistPMESPValue, fcHistPMOPTMinTimeStamp=fcHistPMOPTMinTimeStamp, stmnHistPMOTNAVGBERTimeStamp=stmnHistPMOTNAVGBERTimeStamp, pvxL2IFCrntPMFRDRValidity=pvxL2IFCrntPMFRDRValidity, geOpticalPwrTransmittedMaxClear=geOpticalPwrTransmittedMaxClear, ethL1IFHistPMNBITCR64BitTimeStamp=ethL1IFHistPMNBITCR64BitTimeStamp, pluggableInvRestartOpEntry=pluggableInvRestartOpEntry, vcnCrntPMTypeIdx=vcnCrntPMTypeIdx, fcHistPMSupplyVoltageTimeStamp=fcHistPMSupplyVoltageTimeStamp, cpHistPMTempTimeStamp=cpHistPMTempTimeStamp, geHistPMTempTimeStamp=geHistPMTempTimeStamp, geOpticalPwrReceivedMinTh=geOpticalPwrReceivedMinTh, xcvrRowStatus=xcvrRowStatus, xcvrHistPMOTNAVGBERValue=xcvrHistPMOTNAVGBERValue, xcvrHistPMOSIZEInitialize=xcvrHistPMOSIZEInitialize, pvxL2IFCrntPMTPFCTXValidity=pvxL2IFCrntPMTPFCTXValidity, stmnCrntPMMSEBValue=stmnCrntPMMSEBValue, xcvrHistPMSIZE64Validity=xcvrHistPMSIZE64Validity, stsnPMThresholdByPortSlotIdx=stsnPMThresholdByPortSlotIdx, ethL1IFCrntPMOPRTimeStamp=ethL1IFCrntPMOPRTimeStamp, geCrntPMOPTMinValidity=geCrntPMOPTMinValidity, pvxL2IFHistPMBCSTValue=pvxL2IFHistPMBCSTValue, ethIntfPortTypeIdx=ethIntfPortTypeIdx, xcvrHistPMOPRMinTimeStamp=xcvrHistPMOPRMinTimeStamp, xcvrCrntPMOTUSESTimeStamp=xcvrCrntPMOTUSESTimeStamp, ethL1IFPMThresholdShelfIdx=ethL1IFPMThresholdShelfIdx, ethIntfVendorPN2=ethIntfVendorPN2, ospfIfAdminStat=ospfIfAdminStat, xcvrHistPMOPTMaxValue=xcvrHistPMOPTMaxValue, ocnHistPMOPRMinValidity=ocnHistPMOPRMinValidity, pvxL2IFPMThresholdSlotIdx=pvxL2IFPMThresholdSlotIdx, stmnHistPMOTUSESValue=stmnHistPMOTUSESValue, geCrntPMTFRCRXValidity=geCrntPMTFRCRXValidity, oaOpticalPwrTransmittedMinTh=oaOpticalPwrTransmittedMinTh, stmnTypeIdx=stmnTypeIdx, ocnPMThresholdOTUSESValue=ocnPMThresholdOTUSESValue, geCrntPMUSIZEValue=geCrntPMUSIZEValue, geCrntPMSIZE512To1023Initialize=geCrntPMSIZE512To1023Initialize, oaOOBRSDOpCmd=oaOOBRSDOpCmd, ocnHistPMOTUESTimeStamp=ocnHistPMOTUESTimeStamp, stmnHistPMTypeIdx=stmnHistPMTypeIdx, netMgmtSpeed=netMgmtSpeed, pvxL2IFCrntPMSIZE512To1023Validity=pvxL2IFCrntPMSIZE512To1023Validity, xcvrLossOfSignalClear=xcvrLossOfSignalClear, xcvrHistPMUASSInitialize=xcvrHistPMUASSInitialize, actCondSeverity=actCondSeverity, amdOperStatus=amdOperStatus, pvxL2IntfRateLimit=pvxL2IntfRateLimit, fcCrntPMCVValue=fcCrntPMCVValue, ethL1IFCrntPMOTNAVGBERTimeStamp=ethL1IFCrntPMOTNAVGBERTimeStamp, vcnCrntPMHPUASValue=vcnCrntPMHPUASValue, oaMSInsertionLossCond=oaMSInsertionLossCond, xcvrCrntPMNBYTCR64BitInitialize=xcvrCrntPMNBYTCR64BitInitialize, ocnHistPMOPRMinTimeStamp=ocnHistPMOPRMinTimeStamp, geHistPMFRGTValidity=geHistPMFRGTValidity, pvxL2IFHistPMUSIZEValidity=pvxL2IFHistPMUSIZEValidity, fcBandwidthMismatchClear=fcBandwidthMismatchClear, xcvrShelfIdx=xcvrShelfIdx, shelfInvPwrBrownoutCond=shelfInvPwrBrownoutCond, passivePortCustom1=passivePortCustom1, stsnPMThresholdByPortEntry=stsnPMThresholdByPortEntry, vcnForcedSwitchToWorkingCond=vcnForcedSwitchToWorkingCond, stmnCrntPMSupplyVoltage2Value=stmnCrntPMSupplyVoltage2Value, stmnHistPMOTUBBETimeStamp=stmnHistPMOTUBBETimeStamp, ethL1IFCrntPMOTUESValidity=ethL1IFCrntPMOTUESValidity, briHistPMOPTMaxValidity=briHistPMOPTMaxValidity, xcvrCrntPMOTUESValidity=xcvrCrntPMOTUESValidity, setErrorInfo=setErrorInfo, briLossOfSequenceClear=briLossOfSequenceClear, stmnHistPMOPTValue=stmnHistPMOPTValue, olsWavelengthNotAchievableClear=olsWavelengthNotAchievableClear, xcvrCrntPMRSUASTimeStamp=xcvrCrntPMRSUASTimeStamp, briOperations=briOperations, pvxL2IFHistPMSIZE256To511Initialize=pvxL2IFHistPMSIZE256To511Initialize, stmnHistPMOPRTimeStamp=stmnHistPMOPRTimeStamp, geHistPMLBCValidity=geHistPMLBCValidity, xcvrCrntPMFRDRInitialize=xcvrCrntPMFRDRInitialize, stmnHistPMMSUASValidity=stmnHistPMMSUASValidity, olsWavelengthNotAchievableCond=olsWavelengthNotAchievableCond, geLossOfAlignmentCond=geLossOfAlignmentCond, xcvrCrntPMSIZE65To127Initialize=xcvrCrntPMSIZE65To127Initialize, oaMSInsertionLoss=oaMSInsertionLoss, xcvrPMThresholdESValue=xcvrPMThresholdESValue, fcCrntPMOPRTimeStamp=fcCrntPMOPRTimeStamp, ocnHistPMNBITCRValue=ocnHistPMNBITCRValue, stsnHistPMSESPInitialize=stsnHistPMSESPInitialize, SwUpgradeCmd=SwUpgradeCmd, briLossOfSignalCond=briLossOfSignalCond, stmnCrntPMOPRValue=stmnCrntPMOPRValue, oaCrntPMCaseTempTimeStamp=oaCrntPMCaseTempTimeStamp, ocnHistPMNBYTCR64BitInitialize=ocnHistPMNBYTCR64BitInitialize, ethIntfBouncingStateChangeCount=ethIntfBouncingStateChangeCount, envClFanCond=envClFanCond, ipExtIntfSubnetMask=ipExtIntfSubnetMask, xcvrCustom2=xcvrCustom2, ocnCrntPMNBYTCR64BitInitialize=ocnCrntPMNBYTCR64BitInitialize, evtNotificationObjects=evtNotificationObjects, envHiWtrCond=envHiWtrCond, passivePortRemoteId=passivePortRemoteId, oaHistPMOBRValue=oaHistPMOBRValue, stmnXcvrMismatchCond=stmnXcvrMismatchCond, shelfOperStatus=shelfOperStatus, ocnHistPMOTUBBEValue=ocnHistPMOTUBBEValue, briHistPMTempTimeStamp=briHistPMTempTimeStamp, vcnXCDestIdx=vcnXCDestIdx, xcvrHistPMNBITCRInitialize=xcvrHistPMNBITCRInitialize, stsnHistPMESPTimeStamp=stsnHistPMESPTimeStamp, ocnHistPMOTNBERValidity=ocnHistPMOTNBERValidity, oaDspCommCond=oaDspCommCond, pvxL2IFHistPMSIZE1024To1518Value=pvxL2IFHistPMSIZE1024To1518Value, briHistPMOPRTimeStamp=briHistPMOPRTimeStamp, xcvrCrntPMOTUOFSValidity=xcvrCrntPMOTUOFSValidity, ntpTimeAndDateUpdateEvt=ntpTimeAndDateUpdateEvt, geTcaEvt=geTcaEvt, xcvrCrntPMTable=xcvrCrntPMTable, envGenericClear=envGenericClear, briHistPMOPRMinTimeStamp=briHistPMOPRMinTimeStamp, xcvrCrntPMNBITCR64BitValue=xcvrCrntPMNBITCR64BitValue, actAlarmEntry=actAlarmEntry, stmnHistPMMSEBValue=stmnHistPMMSEBValue, stsnSignalDegradeClear=stsnSignalDegradeClear, ntpClientAuthKey=ntpClientAuthKey, stmnLoopbackClear=stmnLoopbackClear, oscStatusChangeEvt=oscStatusChangeEvt, stmnAdminStatus=stmnAdminStatus, oaCrntPMCaseTempValue=oaCrntPMCaseTempValue, geCrntPMTBYCRXInitialize=geCrntPMTBYCRXInitialize, xcvrCustom1=xcvrCustom1, oaCrntPMLaser1PowerValue=oaCrntPMLaser1PowerValue, stmnCrntPMOTUUASTimeStamp=stmnCrntPMOTUUASTimeStamp, stmnLpbkOpTypeIdx=stmnLpbkOpTypeIdx, geCrntPMSIZE64TimeStamp=geCrntPMSIZE64TimeStamp, stmnProtSwOpCmd=stmnProtSwOpCmd, ethL1IFCrntPMINVBLKInitialize=ethL1IFCrntPMINVBLKInitialize, stsnHistPMIntervalIdx=stsnHistPMIntervalIdx, ocnCrntPMSEFSSInitialize=ocnCrntPMSEFSSInitialize, pvxL2IFCrntPMSIZE64TimeStamp=pvxL2IFCrntPMSIZE64TimeStamp, xcvrCrntPMSESValue=xcvrCrntPMSESValue, geOpticalPwrReceivedMinCond=geOpticalPwrReceivedMinCond, xcvrHistPMEntry=xcvrHistPMEntry, fcOpticalPwrReceivedMaxCond=fcOpticalPwrReceivedMaxCond, xcvrHistPMUASTimeStamp=xcvrHistPMUASTimeStamp, equipment=equipment, pvxL2IFHistPMSIZE128To255Value=pvxL2IFHistPMSIZE128To255Value, geCrntPMOPRAvgTimeStamp=geCrntPMOPRAvgTimeStamp, fcOpticalPwrReceivedMaxTh=fcOpticalPwrReceivedMaxTh, stmnCrntPMOTUBBEInitialize=stmnCrntPMOTUBBEInitialize, ethL1IFHistPMOTUESValue=ethL1IFHistPMOTUESValue, slotInvPackCLEI=slotInvPackCLEI, xcvrCrntPMOTUESTimeStamp=xcvrCrntPMOTUESTimeStamp, xcvrHistPMSIZEOver1518Validity=xcvrHistPMSIZEOver1518Validity, xcvrPMThresholdIdx=xcvrPMThresholdIdx, serialParity=serialParity, ethL1IFHistPMOTUOFSValue=ethL1IFHistPMOTUOFSValue, pvxL2IFHistPMTBYCTXTimeStamp=pvxL2IFHistPMTBYCTXTimeStamp, ocnCrntPMCVLInitialize=ocnCrntPMCVLInitialize, xcvrCrntPMTFRCRXValidity=xcvrCrntPMTFRCRXValidity, xcvrHistPMOPTValue=xcvrHistPMOPTValue, xcvrHistPMOSIZEValue=xcvrHistPMOSIZEValue, fcPMThresholdCVValue=fcPMThresholdCVValue, ocnWavelength=ocnWavelength, amdTable=amdTable, olsTemperatureMaxClear=olsTemperatureMaxClear, stmnHistPMOTUBBEValidity=stmnHistPMOTUBBEValidity, condServiceAffecting=condServiceAffecting, olsAlarmIndicationSignalCond=olsAlarmIndicationSignalCond, ocnCrntPMNBITCR64BitTimeStamp=ocnCrntPMNBITCR64BitTimeStamp, feTable=feTable, fcHistPMESInitialize=fcHistPMESInitialize, oaHistPMLaser2CurrentValidity=oaHistPMLaser2CurrentValidity, fcHistPMOPRMinValidity=fcHistPMOPRMinValidity, netMgmtIPAddr=netMgmtIPAddr, xcvrHistPMOPTMinValue=xcvrHistPMOPTMinValue, xcvrHistPMJABRTimeStamp=xcvrHistPMJABRTimeStamp, xcvrOpticalPwrTransmittedMaxTh=xcvrOpticalPwrTransmittedMaxTh, oaEntry=oaEntry, shelfOperStatQlfr=shelfOperStatQlfr, oaCrntPMSlotIdx=oaCrntPMSlotIdx, geCrntPMOPTMinTimeStamp=geCrntPMOPTMinTimeStamp, ethL1IFCrntPMNBYTCR64BitValidity=ethL1IFCrntPMNBYTCR64BitValidity)
mibBuilder.exportSymbols("BTI-7000-MIB", amdCrntPMOPRTimeStamp=amdCrntPMOPRTimeStamp, stmnHistPMOPRValidity=stmnHistPMOPRValidity, stmnSignalDegradeCond=stmnSignalDegradeCond, oaOpticalBackReflection=oaOpticalBackReflection, vcnLossOfPointerClear=vcnLossOfPointerClear, stmnHistPMOTNBERValidity=stmnHistPMOTNBERValidity, fcPMThresholdTable=fcPMThresholdTable, ipExtIntfMTUSize=ipExtIntfMTUSize, xcvrLFCond=xcvrLFCond, envAttrUnsupportedClear=envAttrUnsupportedClear, stmnCrntPMRSOFSInitialize=stmnCrntPMRSOFSInitialize, olsTemperatureMaxCond=olsTemperatureMaxCond, ipExtIntfDescription=ipExtIntfDescription, oaTiltCompSetting=oaTiltCompSetting, pvxL2IFHistPMSIZE1024To1518Validity=pvxL2IFHistPMSIZE1024To1518Validity, ethL1IFCrntPMSupplyVoltage2Value=ethL1IFCrntPMSupplyVoltage2Value, slotInvUnknownClear=slotInvUnknownClear, pluggableInvVendorPartNum=pluggableInvVendorPartNum, fcHistPMUASInitialize=fcHistPMUASInitialize, pvxL2IFHistPMFRGTValidity=pvxL2IFHistPMFRGTValidity, pvxL2IntfPCPCodingProfName=pvxL2IntfPCPCodingProfName, oaOpticalPwrTransmittedMinClear=oaOpticalPwrTransmittedMinClear, ocnPMThresholdTypeIdx=ocnPMThresholdTypeIdx, xcvrLoopbackCond=xcvrLoopbackCond, vcgXCSrcSlotIdx=vcgXCSrcSlotIdx, geHistPMJABRTimeStamp=geHistPMJABRTimeStamp, stsnBER=stsnBER, geCrntPMTFRCTXInitialize=geCrntPMTFRCTXInitialize, briBitRate=briBitRate, ocnForcedSwitchToProtectionCond=ocnForcedSwitchToProtectionCond, pluggableInvMaxBitRate=pluggableInvMaxBitRate, odunXCProtSlotNum=odunXCProtSlotNum, stmnPMThresholdShelfIdx=stmnPMThresholdShelfIdx, geHistPMSIZE512To1023Value=geHistPMSIZE512To1023Value, pvxL2IFHistPMSIZE512To1023TimeStamp=pvxL2IFHistPMSIZE512To1023TimeStamp, geCrntPMFCSEInitialize=geCrntPMFCSEInitialize, geCrntPMSIZE64Initialize=geCrntPMSIZE64Initialize, ocnHistPMLBCValidity=ocnHistPMLBCValidity, stmnHistPMOTUOFSTimeStamp=stmnHistPMOTUOFSTimeStamp, ocnEvtNotifications=ocnEvtNotifications, cpSynchronizationShelfIdx=cpSynchronizationShelfIdx, stmnStatusChangeEvt=stmnStatusChangeEvt, stmnCrntPMIntervalTypeIdx=stmnCrntPMIntervalTypeIdx, ospfIdx=ospfIdx, slotInvPwrFeedBFuseFailClear=slotInvPwrFeedBFuseFailClear, shelfInvConfig=shelfInvConfig, stmnProtSwOpIdx=stmnProtSwOpIdx, ocnCrntPMNBITCR64BitValidity=ocnCrntPMNBITCR64BitValidity, xcvrHistPMESValidity=xcvrHistPMESValidity, amdOpticalPwrTransmittedTarget=amdOpticalPwrTransmittedTarget, xcvrHistPMRSOFSTimeStamp=xcvrHistPMRSOFSTimeStamp, xcvrHistPMOPRMaxValue=xcvrHistPMOPRMaxValue, passivePortTable=passivePortTable, oaFSOOpticalPwrTransmitted=oaFSOOpticalPwrTransmitted, xcvrHistPMOPTMaxValidity=xcvrHistPMOPTMaxValidity, gePortIdx=gePortIdx, ocnCrntPMOTUSESValidity=ocnCrntPMOTUSESValidity, ethL1IFHistPMUNCRCDWValue=ethL1IFHistPMUNCRCDWValue, actCondReportType=actCondReportType, xcvrHistPMSEFSSValue=xcvrHistPMSEFSSValue, actCondServiceAffecting=actCondServiceAffecting, ethL1IFHistPMESTimeStamp=ethL1IFHistPMESTimeStamp, slotInvCoolingUnitMismatchClear=slotInvCoolingUnitMismatchClear, notificationObjects=notificationObjects, shelfCustom3=shelfCustom3, fcLaserStatus=fcLaserStatus, cpUpgradeInProgressCond=cpUpgradeInProgressCond, stmnCrntPMNBYTCR64BitTimeStamp=stmnCrntPMNBYTCR64BitTimeStamp, pvxL2IFPMThresholdFRDRValue=pvxL2IFPMThresholdFRDRValue, vcnConcatMismatchClear=vcnConcatMismatchClear, envPowerClear=envPowerClear, ethL1IFHistPMNBYTCRTimeStamp=ethL1IFHistPMNBYTCRTimeStamp, vcnPMThresholdByPortEntry=vcnPMThresholdByPortEntry, pvxL2IFHistPMShelfIdx=pvxL2IFHistPMShelfIdx, ethL1IFHistPMESValue=ethL1IFHistPMESValue, pluggableInvRestartOpSlotIdx=pluggableInvRestartOpSlotIdx, ocnVendorPN2=ocnVendorPN2, oaCrntPMLaser2TempValidity=oaCrntPMLaser2TempValidity, ethL1IFCrntPMTempTimeStamp=ethL1IFCrntPMTempTimeStamp, geHistPMSIZE65To127Validity=geHistPMSIZE65To127Validity, ethIntfWavelength=ethIntfWavelength, xcvrCrntPMJABRTimeStamp=xcvrCrntPMJABRTimeStamp, ethL1IFCrntPMOPTMinValue=ethL1IFCrntPMOPTMinValue, geCrntPMTPFCRXValue=geCrntPMTPFCRXValue, notifObjects=notifObjects, pvxL2IFHistPMTBYCRXTimeStamp=pvxL2IFHistPMTBYCRXTimeStamp, xcvrHistPMSESValidity=xcvrHistPMSESValidity, ocnCrntPMUNCRCDWValue=ocnCrntPMUNCRCDWValue, ocnHistPMOTUSESValidity=ocnHistPMOTUSESValidity, xcvrCrntPMESInitialize=xcvrCrntPMESInitialize, ocnHistPMESLInitialize=ocnHistPMESLInitialize, briCrntPMTable=briCrntPMTable, ospfIfShelfIdx=ospfIfShelfIdx, xcvrPMThresholdTable=xcvrPMThresholdTable, fcHistPMLBCTimeStamp=fcHistPMLBCTimeStamp, xcvrPMThresholdINVBLKValue=xcvrPMThresholdINVBLKValue, miscellaneous=miscellaneous, vcnCrntPMHPSESInitialize=vcnCrntPMHPSESInitialize, gcc0ConfigTable=gcc0ConfigTable, oaCustom2=oaCustom2, vcnHistPMSlotIdx=vcnHistPMSlotIdx, geCrntPMFRGTValidity=geCrntPMFRGTValidity, xcvrHistPMOTUESValidity=xcvrHistPMOTUESValidity, xcvrCrntPMINVBLKValidity=xcvrCrntPMINVBLKValidity, fcPayloadMismatchClear=fcPayloadMismatchClear, xcvrCrntPMSESSValidity=xcvrCrntPMSESSValidity, ocnCrntPMLBCValue=ocnCrntPMLBCValue, ethL1IFCrntPMINVBLKTimeStamp=ethL1IFCrntPMINVBLKTimeStamp, pvxL2PortCondNotifications=pvxL2PortCondNotifications, briCrntPMOPRAvgInitialize=briCrntPMOPRAvgInitialize, stmnCrntPMOPTValue=stmnCrntPMOPTValue, ocnProtGrpProtSlotIdx=ocnProtGrpProtSlotIdx, ntpClientStratum=ntpClientStratum, ethL1IFHistPMIntervalTypeIdx=ethL1IFHistPMIntervalTypeIdx, geHistPMEntry=geHistPMEntry, oaOpticalPwrTransmittedMaxClear=oaOpticalPwrTransmittedMaxClear, stmnHistPMOPTMaxValue=stmnHistPMOPTMaxValue, ocnCrntPMUNCRCDWTimeStamp=ocnCrntPMUNCRCDWTimeStamp, oaHistPMLaser2TempValidity=oaHistPMLaser2TempValidity, xcvrOTNPayloadMismatchClear=xcvrOTNPayloadMismatchClear, geCrntPMOPRMaxInitialize=geCrntPMOPRMaxInitialize, xcvrCrntPMCVSInitialize=xcvrCrntPMCVSInitialize, fcCrntPMLBCTimeStamp=fcCrntPMLBCTimeStamp, ethL1IFCrntPMOPTMaxValue=ethL1IFCrntPMOPTMaxValue, xcvrRemoteId=xcvrRemoteId, vcnCrntPMHPEBValue=vcnCrntPMHPEBValue, xcvrCrntPMLBCValidity=xcvrCrntPMLBCValidity, geHistPMSIZE64Initialize=geHistPMSIZE64Initialize, shelfId=shelfId, dbBackupAndRestoreFtpUser=dbBackupAndRestoreFtpUser, ocnAdminStatus=ocnAdminStatus, xcvrHistPMSIZE65To127TimeStamp=xcvrHistPMSIZE65To127TimeStamp, gePMThresholdShelfIdx=gePMThresholdShelfIdx, ospfIfRetransInterval=ospfIfRetransInterval, xcvrCrntPMESSInitialize=xcvrCrntPMESSInitialize, fcCrntPMSESValue=fcCrntPMSESValue, ocnCrntPMOTUUASTimeStamp=ocnCrntPMOTUUASTimeStamp, ospfLsdbSequence=ospfLsdbSequence, oaAmplifierConditioningCond=oaAmplifierConditioningCond, ethL1IFHistPMOPTValidity=ethL1IFHistPMOPTValidity, xcvrProtSwOpSlotIdx=xcvrProtSwOpSlotIdx, stsnXCSrcSlotIdx=stsnXCSrcSlotIdx, briCrntPMOPRMinValue=briCrntPMOPRMinValue, xcvrHistPMUSIZETimeStamp=xcvrHistPMUSIZETimeStamp, geHistPMSIZE128To255Value=geHistPMSIZE128To255Value, ocnCrntPMOTNAVGBERValidity=ocnCrntPMOTNAVGBERValidity, stsnXCSrcIdx=stsnXCSrcIdx, stmnCrntPMSupplyVoltage2TimeStamp=stmnCrntPMSupplyVoltage2TimeStamp, gePMThresholdFRDRValue=gePMThresholdFRDRValue, fcCrntPMSESValidity=fcCrntPMSESValidity, ethL1IFHistPMSESValidity=ethL1IFHistPMSESValidity, shelfProvConfig=shelfProvConfig, xcvrProtGrpProtShelfIdx=xcvrProtGrpProtShelfIdx, xcvrCrntPMRSOFSInitialize=xcvrCrntPMRSOFSInitialize, ipExtIntfMACAddr=ipExtIntfMACAddr, olsLinkDownCond=olsLinkDownCond, stsnCrntPMEntry=stsnCrntPMEntry, pvxL2IFCrntPMTFRCRXTimeStamp=pvxL2IFCrntPMTFRCRXTimeStamp, stsnProtSwOpCmd=stsnProtSwOpCmd, amdStatusChangeEvt=amdStatusChangeEvt, ethIntfLagId=ethIntfLagId, fcCrntPMTempValue=fcCrntPMTempValue, vcnHistPMTable=vcnHistPMTable, fcHistPMOPRMinInitialize=fcHistPMOPRMinInitialize, briCrntPMOPTAvgTimeStamp=briCrntPMOPTAvgTimeStamp, xcvrHistPMOPRMinValue=xcvrHistPMOPRMinValue, ocnCrntPMOPTAvgValidity=ocnCrntPMOPTAvgValidity, fcLpbkOpTable=fcLpbkOpTable, ocnHistPMNBITCR64BitInitialize=ocnHistPMNBITCR64BitInitialize, cpSynchronizationPrimRefSrcPortNum=cpSynchronizationPrimRefSrcPortNum, pvxL2IFCrntPMMCSTValue=pvxL2IFCrntPMMCSTValue, stmnOpticalPwrReceivedMaxCond=stmnOpticalPwrReceivedMaxCond, fcXcvrMismatchCond=fcXcvrMismatchCond, briLoopbackCond=briLoopbackCond, oaHistPMLaser1TempValidity=oaHistPMLaser1TempValidity, xcvrEvtNotifications=xcvrEvtNotifications, stsnCrntPMCVPValue=stsnCrntPMCVPValue, amdId2=amdId2, ocnPMThresholdESLValue=ocnPMThresholdESLValue, briHistPMOPTMinTimeStamp=briHistPMOPTMinTimeStamp, geCrntPMJABRInitialize=geCrntPMJABRInitialize, cpCrntPMEntry=cpCrntPMEntry, ocnCrntPMOTUBBEInitialize=ocnCrntPMOTUBBEInitialize, geCrntPMOPRTimeStamp=geCrntPMOPRTimeStamp, xcvrLpbkOpShelfIdx=xcvrLpbkOpShelfIdx, xcvrHistPMNBYTCRInitialize=xcvrHistPMNBYTCRInitialize, envSmokeClear=envSmokeClear, xcvrCrntPMOPTValidity=xcvrCrntPMOPTValidity, stmnCrntPMOTUOFSInitialize=stmnCrntPMOTUOFSInitialize, slotInvPowerFailCond=slotInvPowerFailCond, gcc0ConfigRowStatus=gcc0ConfigRowStatus, cpSynchronizationPrimProtStatQlfr=cpSynchronizationPrimProtStatQlfr, ntpRefIP=ntpRefIP, pvxL2IFHistPMTFRCRXValidity=pvxL2IFHistPMTFRCRXValidity, geCrntPMSIZEOver1518TimeStamp=geCrntPMSIZEOver1518TimeStamp, slotInvDataTable=slotInvDataTable, ethL1IFCrntPMOPTAvgValidity=ethL1IFCrntPMOPTAvgValidity, briBandwidthMismatchCond=briBandwidthMismatchCond, xcvrLossOfSignalCond=xcvrLossOfSignalCond, stmnHistPMLBCValidity=stmnHistPMLBCValidity, fcRate=fcRate, lagCondNotifications=lagCondNotifications, xcvrHistPMSEFSSInitialize=xcvrHistPMSEFSSInitialize, xcvrHistPMOTUUASValidity=xcvrHistPMOTUUASValidity, stmnCrntPMRSUASValidity=stmnCrntPMRSUASValidity, ospfIfSlotIdx=ospfIfSlotIdx, olsBackwardDefectIndicatorClear=olsBackwardDefectIndicatorClear, geCrntPMOPRMaxTimeStamp=geCrntPMOPRMaxTimeStamp, stmnCrntPMNBITCR64BitValue=stmnCrntPMNBITCR64BitValue, oaHistPMEffectiveGainValidity=oaHistPMEffectiveGainValidity, envAttrUnsupportedCond=envAttrUnsupportedCond, geCrntPMSIZE64Validity=geCrntPMSIZE64Validity, neTimeZone=neTimeZone, vcnCrntPMHPBBEValue=vcnCrntPMHPBBEValue, ocnCrntPMOTUESTimeStamp=ocnCrntPMOTUESTimeStamp, fcCrntPMUASInitialize=fcCrntPMUASInitialize, briOpticalPwrTransmittedMaxClear=briOpticalPwrTransmittedMaxClear, envCondAttrSeverity=envCondAttrSeverity, ocnCrntPMEntry=ocnCrntPMEntry, fcCrntPMSlotIdx=fcCrntPMSlotIdx, briCrntPMOPRMinValidity=briCrntPMOPRMinValidity, ocnHistPMUNCRCDWTimeStamp=ocnHistPMUNCRCDWTimeStamp, pvxL2IntfPvid=pvxL2IntfPvid, setErrorDesc=setErrorDesc, xcvrCrntPMESSValue=xcvrCrntPMESSValue, stmnCrntPMOPTTimeStamp=stmnCrntPMOPTTimeStamp, fcCrntPMSupplyVoltageTimeStamp=fcCrntPMSupplyVoltageTimeStamp, ethIntfLldpRemChassisId=ethIntfLldpRemChassisId, pvxL2IFHistPMSIZE256To511Validity=pvxL2IFHistPMSIZE256To511Validity, ethL1IFPMThresholdSESValue=ethL1IFPMThresholdSESValue, briWavelength=briWavelength, stmnHistPMOTUEBTimeStamp=stmnHistPMOTUEBTimeStamp, stmnPMThresholdOTUESValue=stmnPMThresholdOTUESValue, ocnHistPMOTNAVGBERValue=ocnHistPMOTNAVGBERValue, geHistPMSIZE65To127TimeStamp=geHistPMSIZE65To127TimeStamp, ipExtIntfSecondaryState=ipExtIntfSecondaryState, stmnLockoutWorkingCond=stmnLockoutWorkingCond, ocnCrntPMOPTValue=ocnCrntPMOPTValue, ntpClientAssocEntry=ntpClientAssocEntry, ocnProtSwOpEntry=ocnProtSwOpEntry, passivePortLineIdx=passivePortLineIdx, ocnHistPMCVLInitialize=ocnHistPMCVLInitialize, oaOpticalPwrReceivedMaxCond=oaOpticalPwrReceivedMaxCond, stmnLockoutProtectionClear=stmnLockoutProtectionClear, feShelfIdx=feShelfIdx, xcvrPMThresholdUNCRCDWValue=xcvrPMThresholdUNCRCDWValue, erpsCondNotifications=erpsCondNotifications, ocnPMThresholdIntervalTypeIdx=ocnPMThresholdIntervalTypeIdx, stmnHistPMRSOFSTimeStamp=stmnHistPMRSOFSTimeStamp, ethL1IFHistPMOPRValue=ethL1IFHistPMOPRValue, ocnHistPMESSInitialize=ocnHistPMESSInitialize, ipExtIntfSpeed=ipExtIntfSpeed, oaHistPMFSOOPTTimeStamp=oaHistPMFSOOPTTimeStamp, oaHistPMLaser2TempTimeStamp=oaHistPMLaser2TempTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", slotInvCoolingUnitMismatchCond=slotInvCoolingUnitMismatchCond, vcgRowStatus=vcgRowStatus, ethL1IFHistPMNBYTCRValue=ethL1IFHistPMNBYTCRValue, xcvrHistPMESSInitialize=xcvrHistPMESSInitialize, pvxERPSSrvcNNIEvtNotifications=pvxERPSSrvcNNIEvtNotifications, xcvrOpticalPwrReceivedMaxTh=xcvrOpticalPwrReceivedMaxTh, stmnCrntPMRSUASInitialize=stmnCrntPMRSUASInitialize, geCrntPMLBCValue=geCrntPMLBCValue, fcCrntPMSupplyVoltageValidity=fcCrntPMSupplyVoltageValidity, stmnAutoEnableTimer=stmnAutoEnableTimer, stsnXCType=stsnXCType, ethIntfShelfIdx=ethIntfShelfIdx, gePMThresholdFCSEValue=gePMThresholdFCSEValue, xcvrHistPMNBYTCRTimeStamp=xcvrHistPMNBYTCRTimeStamp, ocnHistPMSEFSSInitialize=ocnHistPMSEFSSInitialize, vcnCrntPMHPESTimeStamp=vcnCrntPMHPESTimeStamp, ocnHistPMOTNBERInitialize=ocnHistPMOTNBERInitialize, geCrntPMTBYCTXTimeStamp=geCrntPMTBYCTXTimeStamp, briCrntPMOPTAvgInitialize=briCrntPMOPTAvgInitialize, geRowStatus=geRowStatus, briSlotIdx=briSlotIdx, fcCrntPMOPTValidity=fcCrntPMOPTValidity, pvxL2IFCrntPMSIZEOver1518TimeStamp=pvxL2IFCrntPMSIZEOver1518TimeStamp, cpFanFeedFailCond=cpFanFeedFailCond, ocnCrntPMOPRValue=ocnCrntPMOPRValue, xcvrCrntPMSupplyVoltage2Validity=xcvrCrntPMSupplyVoltage2Validity, vcgIdx=vcgIdx, amdOpticalPwrTransmitted=amdOpticalPwrTransmitted, xcvrCrntPMOTUSESValue=xcvrCrntPMOTUSESValue, ocnCrntPMOTUUASInitialize=ocnCrntPMOTUUASInitialize, ocnOpticalPwrTransmitted=ocnOpticalPwrTransmitted, envHiTempClear=envHiTempClear, xcvrHistPMUSIZEValue=xcvrHistPMUSIZEValue, xcvrHistPMOTUEBValidity=xcvrHistPMOTUEBValidity, xcvrGrid=xcvrGrid, geHistPMShelfIdx=geHistPMShelfIdx, geFlowControl=geFlowControl, pvxL2IFHistPMTPFCTXValue=pvxL2IFHistPMTPFCTXValue, pvxL2IFPMThresholdShelfIdx=pvxL2IFPMThresholdShelfIdx, xcvrHistPMFRGTTimeStamp=xcvrHistPMFRGTTimeStamp, geLossOfSignalCond=geLossOfSignalCond, xcvrCrntPMOPRValidity=xcvrCrntPMOPRValidity, passivePortTypeIdx=passivePortTypeIdx, netMgmtTable=netMgmtTable, oaLaser1Temp=oaLaser1Temp, fcHistPMOPTMaxValue=fcHistPMOPTMaxValue, briCrntPMOPRMaxTimeStamp=briCrntPMOPRMaxTimeStamp, odunXCSrcShelfIdx=odunXCSrcShelfIdx, xcvrProtGrpTable=xcvrProtGrpTable, shelfInvExpectedIPAddress=shelfInvExpectedIPAddress, tcaIntervalType=tcaIntervalType, oaLaser2Power=oaLaser2Power, ocnLpbkOpTable=ocnLpbkOpTable, geLossOfSequenceCond=geLossOfSequenceCond, stmnCrntPMMSSESInitialize=stmnCrntPMMSSESInitialize, geCrntPMOPRMaxValidity=geCrntPMOPRMaxValidity, geHistPMTBYCTXInitialize=geHistPMTBYCTXInitialize, pvxL2IFHistPMFRGTInitialize=pvxL2IFHistPMFRGTInitialize, geCrntPMUASTimeStamp=geCrntPMUASTimeStamp, geCrntPMSIZE1024To1518Validity=geCrntPMSIZE1024To1518Validity, stmnTable=stmnTable, xcvrCrntPMFRDRValue=xcvrCrntPMFRDRValue, fcHistPMUASValue=fcHistPMUASValue, xcvrHistPMUNCRCDWValidity=xcvrHistPMUNCRCDWValidity, DataCommsPingCmd=DataCommsPingCmd, ocnHistPMNBITCR64BitValidity=ocnHistPMNBITCR64BitValidity, xcvrCrntPMTFRCRXTimeStamp=xcvrCrntPMTFRCRXTimeStamp, ocnHistPMOPRMaxValidity=ocnHistPMOPRMaxValidity, ethIntfMACAddr=ethIntfMACAddr, ethL1IFCrntPMOTUUASValidity=ethL1IFCrntPMOTUUASValidity, oscSfpMissingCond=oscSfpMissingCond, geVendorPN1=geVendorPN1, geLossOfSyncCond=geLossOfSyncCond, stmnHistPMUNCRCDWTimeStamp=stmnHistPMUNCRCDWTimeStamp, ethL1IFHistPMSupplyVoltage2Validity=ethL1IFHistPMSupplyVoltage2Validity, stsnTable=stsnTable, pvxL2IFHistPMSIZEOver1518Validity=pvxL2IFHistPMSIZEOver1518Validity, swUpgradeFtpUser=swUpgradeFtpUser, amdId1=amdId1, fcCrntPMUASTimeStamp=fcCrntPMUASTimeStamp, swUpgradeInactiveRelNum=swUpgradeInactiveRelNum, fcLpbkOpCmd=fcLpbkOpCmd, ocnLossOfSignalClear=ocnLossOfSignalClear, ethL1IFCrntPMNBYTCR64BitValue=ethL1IFCrntPMNBYTCR64BitValue, oaHistPMLaser1CurrentValidity=oaHistPMLaser1CurrentValidity, ocnCrntPMOTUSESTimeStamp=ocnCrntPMOTUSESTimeStamp, geHistPMJABRValue=geHistPMJABRValue, xcvrProtGrpRowStatus=xcvrProtGrpRowStatus, eventNotifState=eventNotifState, ethL1IFHistPMTempValidity=ethL1IFHistPMTempValidity, ethL1IFHistPMOTUESTimeStamp=ethL1IFHistPMOTUESTimeStamp, geHistPMCVTimeStamp=geHistPMCVTimeStamp, slotInvPackMfgLoc=slotInvPackMfgLoc, cpCrntPMTempTimeStamp=cpCrntPMTempTimeStamp, geOpticalPwrReceivedMinClear=geOpticalPwrReceivedMinClear, oaHistPMOPTTimeStamp=oaHistPMOPTTimeStamp, oaEvtNotifications=oaEvtNotifications, ethL1IFCrntPMSupplyVoltageValue=ethL1IFCrntPMSupplyVoltageValue, ethL1IFCrntPMOPTAvgInitialize=ethL1IFCrntPMOPTAvgInitialize, xcvrCrntPMSIZEOver1518Initialize=xcvrCrntPMSIZEOver1518Initialize, ocnPMThresholdEntry=ocnPMThresholdEntry, geHistPMSIZE64Value=geHistPMSIZE64Value, xcvrHistPMOTUOFSValidity=xcvrHistPMOTUOFSValidity, xcvrCrntPMOTUEBValidity=xcvrCrntPMOTUEBValidity, xcvrCrntPMTempTimeStamp=xcvrCrntPMTempTimeStamp, xcvrHistPMSIZE1024To1518TimeStamp=xcvrHistPMSIZE1024To1518TimeStamp, amdHistPMOPRValue=amdHistPMOPRValue, ocnCrntPMOPRValidity=ocnCrntPMOPRValidity, ocnHistPMSESSTimeStamp=ocnHistPMSESSTimeStamp, fcActAutoEnableTimer=fcActAutoEnableTimer, fcRemoteId=fcRemoteId, xcvrHistPMOTUUASTimeStamp=xcvrHistPMOTUUASTimeStamp, stmnCrntPMMSEBValidity=stmnCrntPMMSEBValidity, ethL1IFHistPMINVBLKValidity=ethL1IFHistPMINVBLKValidity, stsnHistPMCVPValue=stsnHistPMCVPValue, stmnCrntPMNBYTCRValue=stmnCrntPMNBYTCRValue, briHistPMShelfIdx=briHistPMShelfIdx, briHistPMLBCValue=briHistPMLBCValue, xcvrHistPMSIZE128To255Value=xcvrHistPMSIZE128To255Value, slotInvCondNotifications=slotInvCondNotifications, pvxL2IFHistPMFCSEValidity=pvxL2IFHistPMFCSEValidity, fcLossOfMultiframeCond=fcLossOfMultiframeCond, ethL1IFHistPMSupplyVoltageValue=ethL1IFHistPMSupplyVoltageValue, vcnHistPMHPESValue=vcnHistPMHPESValue, pvxL2IFHistPMFRDRValue=pvxL2IFHistPMFRDRValue, pvxL2IFHistPMTBYCRXValidity=pvxL2IFHistPMTBYCRXValidity, shelfInvUnpluginEvt=shelfInvUnpluginEvt, pvxL2IFHistPMIntervalIdx=pvxL2IFHistPMIntervalIdx, briProtocol=briProtocol, ocnBERTh=ocnBERTh, pvxL2IntfEntry=pvxL2IntfEntry, fcStatusChangeEvt=fcStatusChangeEvt, pvxL2IntfSubPortNumber=pvxL2IntfSubPortNumber, ocnHistPMTable=ocnHistPMTable, xcvrCrntPMNBYTCR64BitValue=xcvrCrntPMNBYTCR64BitValue, xcvrHistPMSIZE256To511Validity=xcvrHistPMSIZE256To511Validity, ethL1IFHistPMOPRMinValidity=ethL1IFHistPMOPRMinValidity, cpCustom2=cpCustom2, amdCrntPMIntervalTypeIdx=amdCrntPMIntervalTypeIdx, stmnCrntPMTable=stmnCrntPMTable, ethL1IFCrntPMOTUBBEValidity=ethL1IFCrntPMOTUBBEValidity, oaCrntPMLaser1PowerValidity=oaCrntPMLaser1PowerValidity, ocnHistPMNBYTCRValue=ocnHistPMNBYTCRValue, stmnCrntPMLBCValidity=stmnCrntPMLBCValidity, ocnHistPMEntry=ocnHistPMEntry, gePMThresholdFRGTValue=gePMThresholdFRGTValue, dataCommsPingAddress=dataCommsPingAddress, oaOpticalPwrReceivedMinTh=oaOpticalPwrReceivedMinTh, ospfLsdbTable=ospfLsdbTable, slotInvHTASUnsupportedCond=slotInvHTASUnsupportedCond, xcvrCrntPMOTUUASInitialize=xcvrCrntPMOTUUASInitialize, pluggableInvUnsupportedClear=pluggableInvUnsupportedClear, xcvrOpticalPwrTransmittedMaxClear=xcvrOpticalPwrTransmittedMaxClear, shelfPEC=shelfPEC, stsnHistPMESPValidity=stsnHistPMESPValidity, ethL1IFCrntPMSESValidity=ethL1IFCrntPMSESValidity, ntpClientAssocIdx=ntpClientAssocIdx, xcvrLockoutWorkingClear=xcvrLockoutWorkingClear, stmnVendorPN1=stmnVendorPN1, xcvrHistPMSupplyVoltageTimeStamp=xcvrHistPMSupplyVoltageTimeStamp, passivePortId2=passivePortId2, amdHistPMShelfIdx=amdHistPMShelfIdx, oaOperations=oaOperations, ethIntfLldpAdminStatus=ethIntfLldpAdminStatus, xcvrHistPMINVBLKTimeStamp=xcvrHistPMINVBLKTimeStamp, xcvrHistPMNBITCRTimeStamp=xcvrHistPMNBITCRTimeStamp, passivePortGrid=passivePortGrid, amdTPLNACond=amdTPLNACond, pvxL2IFCrntPMSIZE1024To1518Initialize=pvxL2IFCrntPMSIZE1024To1518Initialize, stmnCrntPMOTUEBValue=stmnCrntPMOTUEBValue, fcLpbkOpEntry=fcLpbkOpEntry, evtDescription=evtDescription, stmnHistPMMSBBEValue=stmnHistPMMSBBEValue, pluggableInvVendorName=pluggableInvVendorName, xcvrCrntPMOPRAvgValue=xcvrCrntPMOPRAvgValue, ospfLsdbAge=ospfLsdbAge, stmnWavelengthNotAchievableCond=stmnWavelengthNotAchievableCond, geHistPMSIZE128To255Validity=geHistPMSIZE128To255Validity, stsnCrntPMFCPValue=stsnCrntPMFCPValue, ocnPEC=ocnPEC, xcvrHistPMNBYTCRValue=xcvrHistPMNBYTCRValue, xcvrProtSwitchEvt=xcvrProtSwitchEvt, stmnHistPMUNCRCDWValidity=stmnHistPMUNCRCDWValidity, ocnCrntPMESLValue=ocnCrntPMESLValue, ocnHistPMOTUESInitialize=ocnHistPMOTUESInitialize, stmnCrntPMSupplyVoltageValidity=stmnCrntPMSupplyVoltageValidity, stmnHistPMNBYTCR64BitValidity=stmnHistPMNBYTCR64BitValidity, xcvrCrntPMNBYTCRValue=xcvrCrntPMNBYTCRValue, geCrntPMSIZE65To127Initialize=geCrntPMSIZE65To127Initialize, vcnHistPMHPBBEInitialize=vcnHistPMHPBBEInitialize, geHistPMOSIZEInitialize=geHistPMOSIZEInitialize, vcnHistPMShelfIdx=vcnHistPMShelfIdx, fcRemotePathFailureClear=fcRemotePathFailureClear, briOpticalPwrReceivedMinClear=briOpticalPwrReceivedMinClear, stmnAlarmIndicationSignalCond=stmnAlarmIndicationSignalCond, ocnCrntPMOPTMinValue=ocnCrntPMOPTMinValue, xcvrBackwardDefectIndicatorClear=xcvrBackwardDefectIndicatorClear, shelfInvChassisPEC=shelfInvChassisPEC, ethIntfLaserStatus=ethIntfLaserStatus, envIntruderClear=envIntruderClear, oaSSIOpticalPwrReceivedMaxCond=oaSSIOpticalPwrReceivedMaxCond, ethL1IFCrntPMOPTMaxTimeStamp=ethL1IFCrntPMOPTMaxTimeStamp, ocnHistPMCVLTimeStamp=ocnHistPMCVLTimeStamp, xcvrHistPMTempValidity=xcvrHistPMTempValidity, vcnXCSrcIdx=vcnXCSrcIdx, stmnHistPMOTUUASTimeStamp=stmnHistPMOTUUASTimeStamp, stsnConcatMismatchClear=stsnConcatMismatchClear, networkNeighborEntry=networkNeighborEntry, stmnCrntPMOTUSESValidity=stmnCrntPMOTUSESValidity, ethL1IFHistPMOPTAvgInitialize=ethL1IFHistPMOPTAvgInitialize, odunXCRowStatus=odunXCRowStatus, xcvrCrntPMINVBLKValue=xcvrCrntPMINVBLKValue, ocnAlarmIndicationSignalCond=ocnAlarmIndicationSignalCond, xcvrCrntPMSESValidity=xcvrCrntPMSESValidity, pvxL2IFCrntPMTBYCTXValidity=pvxL2IFCrntPMTBYCTXValidity, geHistPMOPTAvgValue=geHistPMOPTAvgValue, xcvrCrntPMRSESValidity=xcvrCrntPMRSESValidity, xcvrHistPMOTUUASValue=xcvrHistPMOTUUASValue, ipExtIntfBroadcastAddress=ipExtIntfBroadcastAddress, oaOOBRSDOpTable=oaOOBRSDOpTable, shelfInvExpectedNEName=shelfInvExpectedNEName, ethL1IFCrntPMSESTimeStamp=ethL1IFCrntPMSESTimeStamp, briHistPMOPRMaxInitialize=briHistPMOPRMaxInitialize, briLpbkOpSlotIdx=briLpbkOpSlotIdx, cpCustom1=cpCustom1, geHistPMFCSEValidity=geHistPMFCSEValidity, vcnXCDestShelfIdx=vcnXCDestShelfIdx, pvxL2IntfAllowedFrames=pvxL2IntfAllowedFrames, xcvrHistPMMCSTInitialize=xcvrHistPMMCSTInitialize, pvxL2IFHistPMTFRCTXValue=pvxL2IFHistPMTFRCTXValue, slotInvFailCond=slotInvFailCond, ethIntfTable=ethIntfTable, briHistPMOPTAvgTimeStamp=briHistPMOPTAvgTimeStamp, stsnHistPMIntervalTypeIdx=stsnHistPMIntervalTypeIdx, ethL1IFCrntPMOTUUASInitialize=ethL1IFCrntPMOTUUASInitialize, xcvrCrntPMOTUEBValue=xcvrCrntPMOTUEBValue, shelfInvPluginEvt=shelfInvPluginEvt, stsnHistPMTable=stsnHistPMTable, ocnCrntPMOPTAvgTimeStamp=ocnCrntPMOPTAvgTimeStamp, geCrntPMTempValue=geCrntPMTempValue, xcvrHistPMFRGTValidity=xcvrHistPMFRGTValidity, pvxL2IFHistPMTPFCTXInitialize=pvxL2IFHistPMTPFCTXInitialize, envRectHiCond=envRectHiCond, ntpNewTimeAndDate=ntpNewTimeAndDate, xcvrXCDestSlotIdx=xcvrXCDestSlotIdx, ocnPMThresholdOTUUASValue=ocnPMThresholdOTUUASValue, stmnHistPMMSESTimeStamp=stmnHistPMMSESTimeStamp, pluggableInvRestartOpTypeIdx=pluggableInvRestartOpTypeIdx, pvxL2IFCrntPMBCSTValidity=pvxL2IFCrntPMBCSTValidity, ocnCrntPMOTNAVGBERTimeStamp=ocnCrntPMOTNAVGBERTimeStamp, serialStopBits=serialStopBits, xcvrHistPMRSSESValidity=xcvrHistPMRSSESValidity, actAlarmObjectType=actAlarmObjectType, vcnAlarmIndicationSignalCond=vcnAlarmIndicationSignalCond)
mibBuilder.exportSymbols("BTI-7000-MIB", pluggableInvType=pluggableInvType, ocnSignalDegradeCond=ocnSignalDegradeCond, xcvrCrntPMSESInitialize=xcvrCrntPMSESInitialize, vcnPMThresholdByPortIdx=vcnPMThresholdByPortIdx, geHistPMFRGTTimeStamp=geHistPMFRGTTimeStamp, vcnPMThresholdByPortHPESValue=vcnPMThresholdByPortHPESValue, vcgXCProtSlotNum=vcgXCProtSlotNum, evtObjectType=evtObjectType, xcvrPMThresholdUSIZEValue=xcvrPMThresholdUSIZEValue, vcnHistPMHPUASInitialize=vcnHistPMHPUASInitialize, xcvrLaserStatus=xcvrLaserStatus, stmnProtGrpProtShelfIdx=stmnProtGrpProtShelfIdx, olsSignalDegradeClear=olsSignalDegradeClear, oaHistPMOPRValidity=oaHistPMOPRValidity, stmnHistPMOPRMaxTimeStamp=stmnHistPMOPRMaxTimeStamp, fcCrntPMOPRMaxValue=fcCrntPMOPRMaxValue, cpHistPMIntervalTypeIdx=cpHistPMIntervalTypeIdx, xcvrHistPMOPRMinValidity=xcvrHistPMOPRMinValidity, ocnHistPMOPTMinValidity=ocnHistPMOPTMinValidity, stmnId1=stmnId1, fcHistPMSlotIdx=fcHistPMSlotIdx, xcvrHistPMOTUOFSTimeStamp=xcvrHistPMOTUOFSTimeStamp, inventory=inventory, pvxL2IFPMThresholdOSIZEValue=pvxL2IFPMThresholdOSIZEValue, cpUpgradeTransferResultEvt=cpUpgradeTransferResultEvt, stmnHistPMOTNBERInitialize=stmnHistPMOTNBERInitialize, briCondNotifications=briCondNotifications, geCrntPMShelfIdx=geCrntPMShelfIdx, dataCommsPingCpTypeIdx=dataCommsPingCpTypeIdx, geCrntPMUSIZEValidity=geCrntPMUSIZEValidity, pvxL2IntfUseDei=pvxL2IntfUseDei, geCrntPMTBYCTXValidity=geCrntPMTBYCTXValidity, fcHistPMESTimeStamp=fcHistPMESTimeStamp, xcvrLFClear=xcvrLFClear, ethL1IFPMThresholdOTUESValue=ethL1IFPMThresholdOTUESValue, geCrntPMTBYCRXTimeStamp=geCrntPMTBYCRXTimeStamp, oaModeSetting=oaModeSetting, geCrntPMSIZE512To1023TimeStamp=geCrntPMSIZE512To1023TimeStamp, odunXCDestIdx=odunXCDestIdx, xcvrCrntPMOTUESInitialize=xcvrCrntPMOTUESInitialize, ocnTypeIdx=ocnTypeIdx, stmnLoopbackCond=stmnLoopbackCond, ethL1IFHistPMOTNBERValue=ethL1IFHistPMOTNBERValue, ospfLsdbAreaId=ospfLsdbAreaId, ocnPMThresholdSlotIdx=ocnPMThresholdSlotIdx, stmnHistPMOPTMinValue=stmnHistPMOPTMinValue, stsnCrntPMUASPValue=stsnCrntPMUASPValue, amdTypeIdx=amdTypeIdx, ethL1IFCrntPMNBYTCR64BitTimeStamp=ethL1IFCrntPMNBYTCR64BitTimeStamp, stmnCrntPMOPTAvgValidity=stmnCrntPMOPTAvgValidity, geCrntPMUASInitialize=geCrntPMUASInitialize, oaHistPMIntervalIdx=oaHistPMIntervalIdx, xcvrOpticalPwrReceivedMinClear=xcvrOpticalPwrReceivedMinClear, pvxL2IFCrntPMSIZE512To1023Value=pvxL2IFCrntPMSIZE512To1023Value, xcvrCrntPMUASSInitialize=xcvrCrntPMUASSInitialize, fcPMThresholdSESValue=fcPMThresholdSESValue, gcc0ConfigCpTypeIdx=gcc0ConfigCpTypeIdx, amdCrntPMOPRValidity=amdCrntPMOPRValidity, amdCrntPMOPTTimeStamp=amdCrntPMOPTTimeStamp, oaCrntPMMSInsLossTimeStamp=oaCrntPMMSInsLossTimeStamp, stmnCrntPMRSSESValue=stmnCrntPMRSSESValue, neHTAutoShutdown=neHTAutoShutdown, oaId1=oaId1, xcvrCrntPMOTUBBETimeStamp=xcvrCrntPMOTUBBETimeStamp, xcvrLossOfFrameClear=xcvrLossOfFrameClear, xcvrOTNPayloadMismatchCond=xcvrOTNPayloadMismatchCond, pvxL2IFHistPMMCSTValidity=pvxL2IFHistPMMCSTValidity, serialBaudRate=serialBaudRate, slotInvUnsupportedPackCond=slotInvUnsupportedPackCond, oaHistPMOaTypeIdx=oaHistPMOaTypeIdx, xcvrCrntPMESSTimeStamp=xcvrCrntPMESSTimeStamp, shelfInvExpansionShelfCommLinkDownClear=shelfInvExpansionShelfCommLinkDownClear, fcHistPMOPTMinValue=fcHistPMOPTMinValue, stsnCrntPMTable=stsnCrntPMTable, objects=objects, ocnXcvrMismatchClear=ocnXcvrMismatchClear, stmnPMThresholdPortIdx=stmnPMThresholdPortIdx, netMgmtCustom1=netMgmtCustom1, oaCrntPMSSIOPRValidity=oaCrntPMSSIOPRValidity, oaCrntPMLaser2PowerValidity=oaCrntPMLaser2PowerValidity, ospfLsdbType=ospfLsdbType, eventNotifCtrl=eventNotifCtrl, stmnHistPMOPRAvgInitialize=stmnHistPMOPRAvgInitialize, oaLaserMaxTempShutdownClear=oaLaserMaxTempShutdownClear, xcvrCrntPMOPRMaxTimeStamp=xcvrCrntPMOPRMaxTimeStamp, xcvrCrntPMFRGTValidity=xcvrCrntPMFRGTValidity, xcvrHistPMESSValidity=xcvrHistPMESSValidity, oaCrntPMEffectiveGainValue=oaCrntPMEffectiveGainValue, ocnCrntPMOPTMaxInitialize=ocnCrntPMOPTMaxInitialize, fcLoopbackClear=fcLoopbackClear, geHistPMOPRMinTimeStamp=geHistPMOPRMinTimeStamp, ethL1IFHistPMLBCTimeStamp=ethL1IFHistPMLBCTimeStamp, oscTable=oscTable, ethL1IFCrntPMSupplyVoltage2TimeStamp=ethL1IFCrntPMSupplyVoltage2TimeStamp, fcLossOfSyncClear=fcLossOfSyncClear, ethL1IFHistPMINVBLKInitialize=ethL1IFHistPMINVBLKInitialize, stmnCrntPMLBCValue=stmnCrntPMLBCValue, xcvrCrntPMCVValidity=xcvrCrntPMCVValidity, geSlotIdx=geSlotIdx, cpSynchronizationTable=cpSynchronizationTable, shelfInvPwrFeedBFailClear=shelfInvPwrFeedBFailClear, xcvrHistPMFCSETimeStamp=xcvrHistPMFCSETimeStamp, stmnPEC=stmnPEC, fcHistPMOPRMaxValidity=fcHistPMOPRMaxValidity, odunXCSrcPortIdx=odunXCSrcPortIdx, stsnCrntPMPortIdx=stsnCrntPMPortIdx, pvxL2IFHistPMEntry=pvxL2IFHistPMEntry, oaCrntPMOPTValidity=oaCrntPMOPTValidity, shelfInvUnknownClear=shelfInvUnknownClear, slotInvOperations=slotInvOperations, shelfInvSysCommClear=shelfInvSysCommClear, stmnCrntPMOPRMinInitialize=stmnCrntPMOPRMinInitialize, stmnHistPMOTNBERTimeStamp=stmnHistPMOTNBERTimeStamp, geHistPMTBYCTXTimeStamp=geHistPMTBYCTXTimeStamp, envFuseCond=envFuseCond, ethL1IFCrntPMOPTMinInitialize=ethL1IFCrntPMOPTMinInitialize, amdCrntPMTypeIdx=amdCrntPMTypeIdx, stsnHistPMFCPValue=stsnHistPMFCPValue, pvxL2IntfEgressBandwidthProfile=pvxL2IntfEgressBandwidthProfile, fcOpticalPwrReceivedMinTh=fcOpticalPwrReceivedMinTh, stmnHistPMRSEBTimeStamp=stmnHistPMRSEBTimeStamp, ntpRefStratum=ntpRefStratum, ethL1IFHistPMSESInitialize=ethL1IFHistPMSESInitialize, ocnHistPMOTUSESInitialize=ocnHistPMOTUSESInitialize, amdOpticalPwrReceivedMinCond=amdOpticalPwrReceivedMinCond, stmnOpticalPwrReceivedMaxClear=stmnOpticalPwrReceivedMaxClear, stmnCrntPMOPTMinTimeStamp=stmnCrntPMOPTMinTimeStamp, xcvrHistPMRSUASValue=xcvrHistPMRSUASValue, ethL1IFCrntPMOPRAvgValidity=ethL1IFCrntPMOPRAvgValidity, ethL1IFHistPMESInitialize=ethL1IFHistPMESInitialize, shelfStatusChangeEvt=shelfStatusChangeEvt, odunOpenConnectionIndicatorClear=odunOpenConnectionIndicatorClear, ethL1IFHistPMSESValue=ethL1IFHistPMSESValue, ethL1IFCrntPMNBITCR64BitValue=ethL1IFCrntPMNBITCR64BitValue, stsnSignalDegradeCond=stsnSignalDegradeCond, ipExtIntfLastChange=ipExtIntfLastChange, stmnLpbkOpShelfIdx=stmnLpbkOpShelfIdx, pvxL2IFHistPMFRGTValue=pvxL2IFHistPMFRGTValue, oaHistPMLaser2TempValue=oaHistPMLaser2TempValue, ipExtIntfPrimaryState=ipExtIntfPrimaryState, xcvrHistPMRSUASTimeStamp=xcvrHistPMRSUASTimeStamp, ethL1IFHistPMOTUEBValue=ethL1IFHistPMOTUEBValue, stmnCrntPMOPRMaxValidity=stmnCrntPMOPRMaxValidity, ethL1IFHistPMNBITCRTimeStamp=ethL1IFHistPMNBITCRTimeStamp, ethL1IFCrntPMUASInitialize=ethL1IFCrntPMUASInitialize, cpConnectorMismatchClear=cpConnectorMismatchClear, briHistPMOPRMinValidity=briHistPMOPRMinValidity, geOpticalPwrTransmitted=geOpticalPwrTransmitted, xcvrHistPMOTNAVGBERInitialize=xcvrHistPMOTNAVGBERInitialize, geHistPMOSIZEValue=geHistPMOSIZEValue, olsAlarmIndicationSignalClear=olsAlarmIndicationSignalClear, stmnPMThresholdOTUBBEValue=stmnPMThresholdOTUBBEValue, xcvrPMThresholdRSBBEValue=xcvrPMThresholdRSBBEValue, pvxL2IFCrntPMFRDRTimeStamp=pvxL2IFCrntPMFRDRTimeStamp, briLossOfMultiframeClear=briLossOfMultiframeClear, fcHistPMLBCValidity=fcHistPMLBCValidity, slotInvDataRecordIdx=slotInvDataRecordIdx, xcvrHistPMSIZE512To1023TimeStamp=xcvrHistPMSIZE512To1023TimeStamp, ocnCrntPMOTUOFSInitialize=ocnCrntPMOTUOFSInitialize, ocnCrntPMOPRAvgValidity=ocnCrntPMOPRAvgValidity, cpHistPMShelfIdx=cpHistPMShelfIdx, envCondAttrHKIIdx=envCondAttrHKIIdx, oaAdminStatus=oaAdminStatus, stmnOperStatus=stmnOperStatus, stmnHistPMNBITCRTimeStamp=stmnHistPMNBITCRTimeStamp, vcgShelfIdx=vcgShelfIdx, fcOperStatus=fcOperStatus, swUpgradeInvokeRelNum=swUpgradeInvokeRelNum, xcvrAlarmIndicationSignalClear=xcvrAlarmIndicationSignalClear, fcHistPMOPRMaxInitialize=fcHistPMOPRMaxInitialize, xcvrCrntPMTBYCRXValidity=xcvrCrntPMTBYCRXValidity, slotInvFailClear=slotInvFailClear, stmnEvtNotifications=stmnEvtNotifications, gePMThresholdPortIdx=gePMThresholdPortIdx, geHistPMFRDRValidity=geHistPMFRDRValidity, fcCrntPMIntervalTypeIdx=fcCrntPMIntervalTypeIdx, vcnEntry=vcnEntry, gcc0ConfigMode=gcc0ConfigMode, xcvrHistPMUASSValidity=xcvrHistPMUASSValidity, ocnHistPMSupplyVoltageValidity=ocnHistPMSupplyVoltageValidity, stmnCrntPMMSSESTimeStamp=stmnCrntPMMSSESTimeStamp, xcvrLoopbackType=xcvrLoopbackType, neFPDetect=neFPDetect, stmnCrntPMRSSESTimeStamp=stmnCrntPMRSSESTimeStamp, fcCrntPMOPTMinValidity=fcCrntPMOPTMinValidity, pluggableInvWavelengthMax=pluggableInvWavelengthMax, oaHistPMCaseTempValue=oaHistPMCaseTempValue, ocnCrntPMOTUEBValue=ocnCrntPMOTUEBValue, geCrntPMFCSEValue=geCrntPMFCSEValue, xcvrCrntPMINVBLKInitialize=xcvrCrntPMINVBLKInitialize, stmnProtGrpWorkShelfIdx=stmnProtGrpWorkShelfIdx, stsnTcaEvt=stsnTcaEvt, oscShelfIdx=oscShelfIdx, oaPwrSetting=oaPwrSetting, xcvrHistPMRSEBValue=xcvrHistPMRSEBValue, ethL1IFHistPMNBITCRValue=ethL1IFHistPMNBITCRValue, geCrntPMTFRCTXTimeStamp=geCrntPMTFRCTXTimeStamp, ethL1IFHistPMOTUESValidity=ethL1IFHistPMOTUESValidity, pluggableInvMedia=pluggableInvMedia, tl1LogSysName=tl1LogSysName, geHistPMTempValue=geHistPMTempValue, slotInvSWVersion=slotInvSWVersion, fcHistPMEntry=fcHistPMEntry, vcnBER=vcnBER, geLpbkOpShelfIdx=geLpbkOpShelfIdx, envOpenDrCond=envOpenDrCond, xcvrExpectedTraceLabel=xcvrExpectedTraceLabel, vcnCrntPMSlotIdx=vcnCrntPMSlotIdx, geHistPMFCSETimeStamp=geHistPMFCSETimeStamp, ethL1IFHistPMIntervalIdx=ethL1IFHistPMIntervalIdx, stsnPMThresholdByPortFCPValue=stsnPMThresholdByPortFCPValue, PYSNMP_MODULE_ID=bti7000Mib, vcnHistPMHPUASValidity=vcnHistPMHPUASValidity, oaStatus=oaStatus, ethL1IFPMThresholdOTUBBEValue=ethL1IFPMThresholdOTUBBEValue, ocnEntry=ocnEntry, geHistPMTBYCRXTimeStamp=geHistPMTBYCRXTimeStamp, stmnHistPMOTUSESInitialize=stmnHistPMOTUSESInitialize, ethL1IFHistPMSupplyVoltageValidity=ethL1IFHistPMSupplyVoltageValidity, ethL1IFPMThresholdOTUUASValue=ethL1IFPMThresholdOTUUASValue, pvxL2IFCrntPMTPFCRXTimeStamp=pvxL2IFCrntPMTPFCRXTimeStamp, shelfInvExpansionShelfCommLOSClear=shelfInvExpansionShelfCommLOSClear, geEvtNotifications=geEvtNotifications, xcvrHistPMOTUESValue=xcvrHistPMOTUESValue, ocnHistPMCVSTimeStamp=ocnHistPMCVSTimeStamp, stsnHistPMFCPValidity=stsnHistPMFCPValidity, pvxL2IFHistPMSIZE128To255Validity=pvxL2IFHistPMSIZE128To255Validity, geCrntPMOPRMinInitialize=geCrntPMOPRMinInitialize, xcvrPMThresholdSlotIdx=xcvrPMThresholdSlotIdx, xcvrHistPMSEFSSValidity=xcvrHistPMSEFSSValidity, pvxLldpRemTablesChangeEvt=pvxLldpRemTablesChangeEvt, stmnHistPMOTUESInitialize=stmnHistPMOTUESInitialize, xcvrCrntPMOPTValue=xcvrCrntPMOPTValue, oaHistPMSSIOPRValue=oaHistPMSSIOPRValue, ocnHistPMCVSValue=ocnHistPMCVSValue, oaAmplifierConditioningClear=oaAmplifierConditioningClear, shelfInvCommCond=shelfInvCommCond, ocnHistPMUASLValue=ocnHistPMUASLValue, ocnProtSwOpCmd=ocnProtSwOpCmd, geCrntPMTBYCTXValue=geCrntPMTBYCTXValue, ethL1IFHistPMShelfIdx=ethL1IFHistPMShelfIdx, ocnCrntPMTempValue=ocnCrntPMTempValue, ocnCrntPMNBYTCRValue=ocnCrntPMNBYTCRValue, geCrntPMOPTMaxValue=geCrntPMOPTMaxValue, feDuplex=feDuplex, geHistPMJABRInitialize=geHistPMJABRInitialize, xcvrLossOfSyncCond=xcvrLossOfSyncCond, amdTPLNAClear=amdTPLNAClear, ocnOperStatus=ocnOperStatus, ocnXcvrMismatchCond=ocnXcvrMismatchCond, slotInvPackName=slotInvPackName, envHiAirCond=envHiAirCond, envCondAttrCodeType=envCondAttrCodeType, ocnLossOfPrimaryTimingReferenceCond=ocnLossOfPrimaryTimingReferenceCond)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrLpbkOpTypeIdx=xcvrLpbkOpTypeIdx, ethIntfOpticalPwrTransmittedMaxTh=ethIntfOpticalPwrTransmittedMaxTh, oaHistPMSlotIdx=oaHistPMSlotIdx, stsnXCDestIdx=stsnXCDestIdx, pvxL2IFCrntPMShelfIdx=pvxL2IFCrntPMShelfIdx, snmpTrapRcvTTL=snmpTrapRcvTTL, fcOpticalPwrTransmittedMaxCond=fcOpticalPwrTransmittedMaxCond, ethIntfOperStatus=ethIntfOperStatus, xcvrCrntPMOPTMinTimeStamp=xcvrCrntPMOPTMinTimeStamp, vcnProtSwOpCmd=vcnProtSwOpCmd, cpSoftwareBankBFailClear=cpSoftwareBankBFailClear, stsnProtSwOpTable=stsnProtSwOpTable, stmnProtGrpProtTypeIdx=stmnProtGrpProtTypeIdx, envPowerCond=envPowerCond, xcvrCrntPMSupplyVoltage2Value=xcvrCrntPMSupplyVoltage2Value, geHistPMTFRCRXValidity=geHistPMTFRCRXValidity, ocnDCCTransparency=ocnDCCTransparency, serialTable=serialTable, ocnHistPMOTNAVGBERTimeStamp=ocnHistPMOTNAVGBERTimeStamp, vcgXCSrcPortIdx=vcgXCSrcPortIdx, xcvrCrntPMNBITCRValue=xcvrCrntPMNBITCRValue, passivePortNumChannels=passivePortNumChannels, xcvrCrntPMRSBBEValue=xcvrCrntPMRSBBEValue, stmnHistPMRSOFSInitialize=stmnHistPMRSOFSInitialize, slotInvShelfIdx=slotInvShelfIdx, xcvrCrntPMESSValidity=xcvrCrntPMESSValidity, vcnHistPMHPUASTimeStamp=vcnHistPMHPUASTimeStamp, dbBackupAndRestoreFilename=dbBackupAndRestoreFilename, briLaserStatus=briLaserStatus, fcCrntPMOPRMaxInitialize=fcCrntPMOPRMaxInitialize, oaBackReflectionSafetyCond=oaBackReflectionSafetyCond, xcvrCrntPMNBYTCR64BitValidity=xcvrCrntPMNBYTCR64BitValidity, xcvrXCRowStatus=xcvrXCRowStatus, vcnForcedSwitchToProtectionCond=vcnForcedSwitchToProtectionCond, shelfInvUSI=shelfInvUSI, pvxESrvcBWPrflEvtNotifications=pvxESrvcBWPrflEvtNotifications, netMgmtMTU=netMgmtMTU, olCondNotifications=olCondNotifications, xcvrCrntPMJABRValue=xcvrCrntPMJABRValue, cpHistPMCpTypeIdx=cpHistPMCpTypeIdx, stmnCrntPMOPRMaxValue=stmnCrntPMOPRMaxValue, cpMismatchClear=cpMismatchClear, ethL1IFCrntPMOPTValidity=ethL1IFCrntPMOPTValidity, shelfInvPwrFeedAFailCond=shelfInvPwrFeedAFailCond, ocnHistPMNBYTCRTimeStamp=ocnHistPMNBYTCRTimeStamp, netMgmtDuplex=netMgmtDuplex, geCrntPMTable=geCrntPMTable, vcgXCDestIdx=vcgXCDestIdx, oaHistPMCaseTempValidity=oaHistPMCaseTempValidity, briHistPMOPRAvgValidity=briHistPMOPRAvgValidity, cpHistPMIntervalIdx=cpHistPMIntervalIdx, fcCrntPMCVValidity=fcCrntPMCVValidity, stmnCrntPMOTUESValue=stmnCrntPMOTUESValue, envIceBuildupClear=envIceBuildupClear, oaCaseTempShutdownCond=oaCaseTempShutdownCond, slotInvHTSThreshExceededClear=slotInvHTSThreshExceededClear, vcnUnequippedCond=vcnUnequippedCond, xcvrFiberType=xcvrFiberType, xcvrCrntPMOPTAvgValidity=xcvrCrntPMOPTAvgValidity, shelfMismatchClear=shelfMismatchClear, ethL1IFHistPMOPRMinValue=ethL1IFHistPMOPRMinValue, pluggableInvCondNotifications=pluggableInvCondNotifications, stsnPMThresholdByPortCVPValue=stsnPMThresholdByPortCVPValue, stmnPMThresholdOTUSESValue=stmnPMThresholdOTUSESValue, shelfInvMissingClear=shelfInvMissingClear, stmnDCCTransparency=stmnDCCTransparency, fcOpticalPwrTransmittedMinCond=fcOpticalPwrTransmittedMinCond, ocnVendorPN3=ocnVendorPN3, xcvrPMThresholdRSUASValue=xcvrPMThresholdRSUASValue, ocnCrntPMOPTValidity=ocnCrntPMOPTValidity, oaTable=oaTable, xcvrHistPMSIZE65To127Initialize=xcvrHistPMSIZE65To127Initialize, xcvrPMThresholdRSEBValue=xcvrPMThresholdRSEBValue, ocnPMThresholdSESSValue=ocnPMThresholdSESSValue, briOpticalPwrTransmittedMaxTh=briOpticalPwrTransmittedMaxTh, stmnHistPMRSEBValidity=stmnHistPMRSEBValidity, geCrntPMJABRValue=geCrntPMJABRValue, shelfInvPwrBrownoutClear=shelfInvPwrBrownoutClear, stmnCrntPMOTUOFSTimeStamp=stmnCrntPMOTUOFSTimeStamp, ethL1IFCrntPMOTNBERValue=ethL1IFCrntPMOTNBERValue, swUpgradeActiveRelNum=swUpgradeActiveRelNum, ocnCrntPMOTUBBEValidity=ocnCrntPMOTUBBEValidity, xcvrHistPMRSEBTimeStamp=xcvrHistPMRSEBTimeStamp, cpFanFeedFailClear=cpFanFeedFailClear, stmnCrntPMOTNAVGBERValue=stmnCrntPMOTNAVGBERValue, shelfRowStatus=shelfRowStatus, ethL1IFCrntPMOTUBBEValue=ethL1IFCrntPMOTUBBEValue, pluggableInvRestartOpCmd=pluggableInvRestartOpCmd, vcnCrntPMHPEBInitialize=vcnCrntPMHPEBInitialize, fcHistPMOPTAvgTimeStamp=fcHistPMOPTAvgTimeStamp, ospfIfSwitchId=ospfIfSwitchId, vcnXCEntry=vcnXCEntry, olsRemoteFaultClear=olsRemoteFaultClear, ocnHistPMUASLTimeStamp=ocnHistPMUASLTimeStamp, slotInvUpgradeFailureClear=slotInvUpgradeFailureClear, envPumpClear=envPumpClear, ocnHistPMOPRAvgTimeStamp=ocnHistPMOPRAvgTimeStamp, mstpNotificationObjects=mstpNotificationObjects, fcPEC=fcPEC, fcHistPMTable=fcHistPMTable, stmnPMThresholdRSEBValue=stmnPMThresholdRSEBValue, oaSSIOpticalPwrReceivedMaxTh=oaSSIOpticalPwrReceivedMaxTh, xcvrHistPMRSUASInitialize=xcvrHistPMRSUASInitialize, geHistPMBCSTValue=geHistPMBCSTValue, pvxL2IFHistPMSIZE256To511TimeStamp=pvxL2IFHistPMSIZE256To511TimeStamp, ethL1IFCrntPMOTUSESValidity=ethL1IFCrntPMOTUSESValidity, ethL1IFHistPMOPRMaxInitialize=ethL1IFHistPMOPRMaxInitialize, pvxL2IFHistPMSIZE1024To1518Initialize=pvxL2IFHistPMSIZE1024To1518Initialize, stmnHistPMRSUASValue=stmnHistPMRSUASValue, oaCrntPMLaser2TempTimeStamp=oaCrntPMLaser2TempTimeStamp, ocnHistPMLBCTimeStamp=ocnHistPMLBCTimeStamp, ethL1IFCrntPMOTUOFSValidity=ethL1IFCrntPMOTUOFSValidity, stmnHistPMRSUASInitialize=stmnHistPMRSUASInitialize, xcvrCrntPMOSIZEInitialize=xcvrCrntPMOSIZEInitialize, briEntry=briEntry, ethL1IFPMThresholdCVValue=ethL1IFPMThresholdCVValue, ocnHistPMOTUOFSValidity=ocnHistPMOTUOFSValidity, ocnLockoutProtectionCond=ocnLockoutProtectionCond, pvxL2IFCrntPMTPFCRXInitialize=pvxL2IFCrntPMTPFCRXInitialize, swUpgrade=swUpgrade, geHistPMOPTMinTimeStamp=geHistPMOPTMinTimeStamp, ethL1IFPMThresholdPortIdx=ethL1IFPMThresholdPortIdx, fcCrntPMOPRAvgValue=fcCrntPMOPRAvgValue, amdHistPMOPTTimeStamp=amdHistPMOPTTimeStamp, feId1=feId1, ocnHistPMTempTimeStamp=ocnHistPMTempTimeStamp, amdHistPMLitChnValue=amdHistPMLitChnValue, ethL1IFHistPMOPTMinValidity=ethL1IFHistPMOPTMinValidity, geLossOfSequenceClear=geLossOfSequenceClear, briHistPMOPRMaxTimeStamp=briHistPMOPRMaxTimeStamp, xcvrCrntPMUASSTimeStamp=xcvrCrntPMUASSTimeStamp, vcnHistPMIntervalIdx=vcnHistPMIntervalIdx, xcvrPMThresholdOTUESValue=xcvrPMThresholdOTUESValue, ethL1IFCrntPMOPTAvgTimeStamp=ethL1IFCrntPMOPTAvgTimeStamp, amdHistPMOPTValidity=amdHistPMOPTValidity, gcc0ConfigShelfIdx=gcc0ConfigShelfIdx, fcLossOfAlignmentCond=fcLossOfAlignmentCond, xcvrCrntPMTFRCRXInitialize=xcvrCrntPMTFRCRXInitialize, stsnCrntPMTypeIdx=stsnCrntPMTypeIdx, pvxL2IFCrntPMBCSTTimeStamp=pvxL2IFCrntPMBCSTTimeStamp, geLpbkOpEntry=geLpbkOpEntry, oaCrntPMLaser2TempValue=oaCrntPMLaser2TempValue, pvxL2IntfIsUNI=pvxL2IntfIsUNI, slotInvPackPEC=slotInvPackPEC, ocnCrntPMSESSValidity=ocnCrntPMSESSValidity, xcvrHistPMTempValue=xcvrHistPMTempValue, oaCrntPMOBRValue=oaCrntPMOBRValue, stmnHistPMOPRValue=stmnHistPMOPRValue, fcCrntPMShelfIdx=fcCrntPMShelfIdx, xcvrHistPMBCSTValidity=xcvrHistPMBCSTValidity, ethL1IFCrntPMNBYTCRInitialize=ethL1IFCrntPMNBYTCRInitialize, ethL1IFHistPMOPRAvgInitialize=ethL1IFHistPMOPRAvgInitialize, ethL1IFHistPMOPTMaxValidity=ethL1IFHistPMOPTMaxValidity, pvxL2IFHistPMTBYCTXValue=pvxL2IFHistPMTBYCTXValue, ospfNbrOptions=ospfNbrOptions, ntpAssocSrvrNotRespondingClear=ntpAssocSrvrNotRespondingClear, oaHistPMOaIdx=oaHistPMOaIdx, snmpTrapRcvRowStatus=snmpTrapRcvRowStatus, ethL1IFPMThresholdOTUOFSValue=ethL1IFPMThresholdOTUOFSValue, stsnPMThresholdByPortIdx=stsnPMThresholdByPortIdx, tl1UserLockoutCond=tl1UserLockoutCond, xcvrCrntPMSIZE128To255Initialize=xcvrCrntPMSIZE128To255Initialize, ethIntfOpticalPwrTransmittedMinTh=ethIntfOpticalPwrTransmittedMinTh, stsnCrntPMUASPInitialize=stsnCrntPMUASPInitialize, briCrntPMOPTTimeStamp=briCrntPMOPTTimeStamp, geHistPMESInitialize=geHistPMESInitialize, ocnCrntPMOPTMaxValue=ocnCrntPMOPTMaxValue, ospfIfRtrDeadInterval=ospfIfRtrDeadInterval, xcvrCrntPMRSEBValue=xcvrCrntPMRSEBValue, briCrntPMTempTimeStamp=briCrntPMTempTimeStamp, geHistPMMCSTValue=geHistPMMCSTValue, ethL1IFHistPMOPRTimeStamp=ethL1IFHistPMOPRTimeStamp, amdWavelength=amdWavelength, stmnRemoteId=stmnRemoteId, ocnCrntPMOTNBERInitialize=ocnCrntPMOTNBERInitialize, stmnLossOfPrimaryTimingReferenceClear=stmnLossOfPrimaryTimingReferenceClear, ocnCrntPMOTUEBInitialize=ocnCrntPMOTUEBInitialize, stsnCrntPMUASPValidity=stsnCrntPMUASPValidity, stsnXCRowStatus=stsnXCRowStatus, ocnLockoutWorkingClear=ocnLockoutWorkingClear, oaLaserMinTempShutdownCond=oaLaserMinTempShutdownCond, stmnProtSwOpEntry=stmnProtSwOpEntry, xcvrMissingCond=xcvrMissingCond, amdTALNACond=amdTALNACond, stmnHistPMOTUEBInitialize=stmnHistPMOTUEBInitialize, xcvrPMThresholdUASSValue=xcvrPMThresholdUASSValue, ethL1IFPMThresholdUNCRCDWValue=ethL1IFPMThresholdUNCRCDWValue, geHistPMSIZE512To1023TimeStamp=geHistPMSIZE512To1023TimeStamp, stmnLossOfFrameClear=stmnLossOfFrameClear, oaHistPMLaser1CurrentTimeStamp=oaHistPMLaser1CurrentTimeStamp, geCrntPMSIZEOver1518Initialize=geCrntPMSIZEOver1518Initialize, cpRestartOpSlotIdx=cpRestartOpSlotIdx, geHistPMFRDRValue=geHistPMFRDRValue, geDuplex=geDuplex, cpCrntPMTempValue=cpCrntPMTempValue, pvxL2IFCrntPMUSIZETimeStamp=pvxL2IFCrntPMUSIZETimeStamp, envLwPresCond=envLwPresCond, oaBackReflectionHighThresholdClear=oaBackReflectionHighThresholdClear, briCrntPMEntry=briCrntPMEntry, geCrntPMOSIZETimeStamp=geCrntPMOSIZETimeStamp, stmnCrntPMMSBBEValue=stmnCrntPMMSBBEValue, ocnCrntPMOPRMinInitialize=ocnCrntPMOPRMinInitialize, geCrntPMFCSEValidity=geCrntPMFCSEValidity, ethL1IFCrntPMOTUEBValidity=ethL1IFCrntPMOTUEBValidity, pvxL2IFHistPMSIZEOver1518Value=pvxL2IFHistPMSIZEOver1518Value, oaHistPMOPTValue=oaHistPMOPTValue, ocnProtGrpWorkShelfIdx=ocnProtGrpWorkShelfIdx, oaCrntPMLaser2PowerValue=oaCrntPMLaser2PowerValue, briCrntPMOPTAvgValue=briCrntPMOPTAvgValue, ospfNbrPriority=ospfNbrPriority, oaHistPMIntervalTypeIdx=oaHistPMIntervalTypeIdx, xcvrCrntPMShelfIdx=xcvrCrntPMShelfIdx, amdCrntPMVOATimeStamp=amdCrntPMVOATimeStamp, xcvrCrntPMIntervalTypeIdx=xcvrCrntPMIntervalTypeIdx, geHistPMOPRAvgTimeStamp=geHistPMOPRAvgTimeStamp, xcvrVendorPN3=xcvrVendorPN3, ocnHistPMOPTAvgValidity=ocnHistPMOPTAvgValidity, vcnCondNotifications=vcnCondNotifications, ospfLsdbEntry=ospfLsdbEntry, xcvrXCSrcTypeIdx=xcvrXCSrcTypeIdx, ethIntfDuplex=ethIntfDuplex, stmnHistPMOPTMinValidity=stmnHistPMOPTMinValidity, ocnOTNPayloadMismatchCond=ocnOTNPayloadMismatchCond, stsnHistPMESPInitialize=stsnHistPMESPInitialize, shelfInvTable=shelfInvTable, ethL1IFCrntPMOPTTimeStamp=ethL1IFCrntPMOPTTimeStamp, actCondNotifIdx=actCondNotifIdx, odunOpenConnectionIndicatorCond=odunOpenConnectionIndicatorCond, ethL1IFHistPMOPTValue=ethL1IFHistPMOPTValue, stmnCrntPMOPRMaxTimeStamp=stmnCrntPMOPRMaxTimeStamp, ethL1IFCrntPMESValue=ethL1IFCrntPMESValue, ocnCrntPMOPTAvgInitialize=ocnCrntPMOPTAvgInitialize, xcvrCrntPMNBITCRTimeStamp=xcvrCrntPMNBITCRTimeStamp, vcnProtSwEvtType=vcnProtSwEvtType, fcHistPMSESValidity=fcHistPMSESValidity, stsnCrntPMUASPTimeStamp=stsnCrntPMUASPTimeStamp, neAutoDST=neAutoDST, slotInvEntry=slotInvEntry, tl1LogEntry=tl1LogEntry, passivePortId1=passivePortId1, vcnHistPMHPESTimeStamp=vcnHistPMHPESTimeStamp, briHistPMIntervalTypeIdx=briHistPMIntervalTypeIdx, ocnCrntPMIntervalTypeIdx=ocnCrntPMIntervalTypeIdx, vcgXCTable=vcgXCTable, oaCrntPMIntervalTypeIdx=oaCrntPMIntervalTypeIdx, shelfInvName=shelfInvName, stmnHistPMTempValue=stmnHistPMTempValue, envBatteryClear=envBatteryClear, briLossOfSignalClear=briLossOfSignalClear, ocnCrntPMESLInitialize=ocnCrntPMESLInitialize, stmnCrntPMNBYTCRValidity=stmnCrntPMNBYTCRValidity, vcnHistPMHPUASValue=vcnHistPMHPUASValue, xcvrCrntPMCVSTimeStamp=xcvrCrntPMCVSTimeStamp, ethL1IFCrntPMIntervalTypeIdx=ethL1IFCrntPMIntervalTypeIdx)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrCrntPMSIZE256To511Initialize=xcvrCrntPMSIZE256To511Initialize, ocnProtGrpWorkTypeIdx=ocnProtGrpWorkTypeIdx, slotInvDspCommCond=slotInvDspCommCond, stmnProtGrpId=stmnProtGrpId, briCrntPMOPRValue=briCrntPMOPRValue, geHistPMOPTMinInitialize=geHistPMOPTMinInitialize, stmnCrntPMEntry=stmnCrntPMEntry, ocnHistPMSESLTimeStamp=ocnHistPMSESLTimeStamp, odunXCDestShelfIdx=odunXCDestShelfIdx, odunPayloadMismatchClear=odunPayloadMismatchClear, xcvrCrntPMSIZE1024To1518Initialize=xcvrCrntPMSIZE1024To1518Initialize, stmnForcedSwitchToProtectionClear=stmnForcedSwitchToProtectionClear, netMgmtIdx=netMgmtIdx, briHistPMOPTAvgValidity=briHistPMOPTAvgValidity, stmnHistPMOTUSESValidity=stmnHistPMOTUSESValidity, ocnOpticalPwrReceivedMinCond=ocnOpticalPwrReceivedMinCond, ntpAssocSrvrNotReachableClear=ntpAssocSrvrNotReachableClear, ocnCrntPMSupplyVoltageValidity=ocnCrntPMSupplyVoltageValidity, stsnPMThresholdByPortESPValue=stsnPMThresholdByPortESPValue, pluggableInvUnknownClear=pluggableInvUnknownClear, xcvrRFICond=xcvrRFICond, ethIntfEntry=ethIntfEntry, ospfNbrIpAddr=ospfNbrIpAddr, vcnLockoutProtectionClear=vcnLockoutProtectionClear, pvxL2IFCrntPMSIZE512To1023Initialize=pvxL2IFCrntPMSIZE512To1023Initialize, xcvrCrntPMNBITCR64BitValidity=xcvrCrntPMNBITCR64BitValidity, xcvrPMThresholdSESValue=xcvrPMThresholdSESValue, amdCrntPMOPTValue=amdCrntPMOPTValue, xcvrProtSwOpEntry=xcvrProtSwOpEntry, stmnCrntPMOPTMaxValue=stmnCrntPMOPTMaxValue, stmnHistPMOPTAvgValidity=stmnHistPMOPTAvgValidity, stmnCrntPMRSSESInitialize=stmnCrntPMRSSESInitialize, geHistPMOPRValidity=geHistPMOPRValidity, dataCommsEvtNotifications=dataCommsEvtNotifications, oaOpticalPwrReceivedMinCond=oaOpticalPwrReceivedMinCond, geHistPMTFRCTXTimeStamp=geHistPMTFRCTXTimeStamp, ethIntfCustom1=ethIntfCustom1, xcvrHistPMFRDRTimeStamp=xcvrHistPMFRDRTimeStamp, pvxL2IFCrntPMSIZEOver1518Validity=pvxL2IFCrntPMSIZEOver1518Validity, ocnHistPMOTUEBInitialize=ocnHistPMOTUEBInitialize, olsLossOfSyncCond=olsLossOfSyncCond, ocnHistPMOTUSESTimeStamp=ocnHistPMOTUSESTimeStamp, stmnCrntPMNBYTCRInitialize=stmnCrntPMNBYTCRInitialize, stmnHistPMMSUASValue=stmnHistPMMSUASValue, stmnCrntPMOPRValidity=stmnCrntPMOPRValidity, pvxL2IFCrntPMTPFCRXValidity=pvxL2IFCrntPMTPFCRXValidity, oaHistPMMSInsLossValidity=oaHistPMMSInsLossValidity, slotInvPackShortName=slotInvPackShortName, xcvrCrntPMNBYTCR64BitTimeStamp=xcvrCrntPMNBYTCR64BitTimeStamp, stmnHistPMMSEBInitialize=stmnHistPMMSEBInitialize, xcvrCrntPMUASTimeStamp=xcvrCrntPMUASTimeStamp, ethL1IFHistPMOTNAVGBERTimeStamp=ethL1IFHistPMOTNAVGBERTimeStamp, condObjectType=condObjectType, oaCaseTemp=oaCaseTemp, fcCrntPMOPTMaxValue=fcCrntPMOPTMaxValue, ospfIfTransitDelay=ospfIfTransitDelay, ocnCrntPMNBYTCRValidity=ocnCrntPMNBYTCRValidity, adminEvtNotifications=adminEvtNotifications, shelfInvMfgDate=shelfInvMfgDate, oaHistPMLaser2PowerValidity=oaHistPMLaser2PowerValidity, xcvrCrntPMOTUUASValidity=xcvrCrntPMOTUUASValidity, stmnCrntPMRSSESValidity=stmnCrntPMRSSESValidity, oaSSIOpticalPwrReceivedMaxClear=oaSSIOpticalPwrReceivedMaxClear, xcvrCrntPMOTNAVGBERValidity=xcvrCrntPMOTNAVGBERValidity, xcvrCrntPMSEFSSValue=xcvrCrntPMSEFSSValue, xcvrHistPMOPTTimeStamp=xcvrHistPMOPTTimeStamp, briLossOfSequenceCond=briLossOfSequenceCond, xcvrProtGrpProtTypeIdx=xcvrProtGrpProtTypeIdx, vcnCrntPMHPUASValidity=vcnCrntPMHPUASValidity, xcvrHistPMSEFSSTimeStamp=xcvrHistPMSEFSSTimeStamp, vcnCrntPMHPEBTimeStamp=vcnCrntPMHPEBTimeStamp, ethL1IFCrntPMUNCRCDWInitialize=ethL1IFCrntPMUNCRCDWInitialize, stmnCrntPMMSESValidity=stmnCrntPMMSESValidity, fcPMThresholdUASValue=fcPMThresholdUASValue, ethL1IFCrntPMOPRMinInitialize=ethL1IFCrntPMOPRMinInitialize, pvxL2IFCrntPMMCSTInitialize=pvxL2IFCrntPMMCSTInitialize, stsnIdx=stsnIdx, ospfIfHelloInterval=ospfIfHelloInterval, briAdminStatus=briAdminStatus, briHistPMOPTAvgInitialize=briHistPMOPTAvgInitialize, stmnHistPMOPTMaxTimeStamp=stmnHistPMOPTMaxTimeStamp, vcnCrntPMHPUASInitialize=vcnCrntPMHPUASInitialize, ocnHistPMCVSInitialize=ocnHistPMCVSInitialize, ethL1IFHistPMOTUSESTimeStamp=ethL1IFHistPMOTUSESTimeStamp, xcvrCrntPMUSIZEInitialize=xcvrCrntPMUSIZEInitialize, shelfConfigurationMismatchClear=shelfConfigurationMismatchClear, ocnLossOfSecondaryTimingReferenceCond=ocnLossOfSecondaryTimingReferenceCond, cpSynchronizationPrimRefProtStatus=cpSynchronizationPrimRefProtStatus, xcvrCustom3=xcvrCustom3, shelfInvMissingCond=shelfInvMissingCond, cpSynchronizationSlotIdx=cpSynchronizationSlotIdx, passivePortFiberType=passivePortFiberType, stmnHistPMTable=stmnHistPMTable, vcnEvtNotifications=vcnEvtNotifications, geCrntPMSIZE512To1023Validity=geCrntPMSIZE512To1023Validity)
