#
# PySNMP MIB module CISCO-DLSW-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DLSW-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
DlciNumber, = mibBuilder.importSymbols("CISCO-FRAME-RELAY-MIB", "DlciNumber")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SAPType, = mibBuilder.importSymbols("CISCO-TC", "SAPType")
dlswCircuitEntry, dlswTConnTcpConfigEntry, dlswTConnOperState, MacAddressNC, LFSize, dlswCircuitState, dlswIfEntry, dlswTConnOperEntry, TAddress, dlswTConnConfigEntry, dlswTConnConfigIndex, DlcType = mibBuilder.importSymbols("DLSW-MIB", "dlswCircuitEntry", "dlswTConnTcpConfigEntry", "dlswTConnOperState", "MacAddressNC", "LFSize", "dlswCircuitState", "dlswIfEntry", "dlswTConnOperEntry", "TAddress", "dlswTConnConfigEntry", "dlswTConnConfigIndex", "DlcType")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, Unsigned32, ModuleIdentity, Counter32, TimeTicks, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "Unsigned32", "ModuleIdentity", "Counter32", "TimeTicks", "iso", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoDlswExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 74))
ciscoDlswExtMIB.setRevisions(('1997-03-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDlswExtMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDlswExtMIB.setLastUpdated('9703110000Z')
if mibBuilder.loadTexts: ciscoDlswExtMIB.setOrganization('Cisco IBU Engineering Working Group')
if mibBuilder.loadTexts: ciscoDlswExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dlsw@cisco.com')
if mibBuilder.loadTexts: ciscoDlswExtMIB.setDescription('The MIB module for management of Cisco specific Data Link Switching protocol enhancements. DLSw is described in RFC 1795 and RFC 2024. DLSw+ Defined Data link switching Plus (DLSw+) is a means of transporting Systems Network Architecture (SNA) and NetBIOS traffic over an IP network. The end systems can attach to the network over Token Ring, Ethernet, Synchronous Data Link Control (SDLC) protocol, or Qualified Logical Link Control (QLLC). DLSw+ switches between diverse media, and locally terminates the data links, keeping acknowledgments, keepalives, and polling off of the WAN. Local termination of data links also eliminates data link control time-outs that can occur during transient network congestion or when rerouting around failed links. Finally, DLSw+ provides a mechanism for dynamically searching a network for SNA or NetBIOS resources and includes caching algorithms that minimize the broadcast traffic required. In this document, DLSw+ routers are referred to as peers, or partners. The connection between two DLSw+ routers is referred to as a peer connection. A DLSw circuit is comprised of the data link control connection between the originating end system and the originating router, the connection between the two routers (typically a TCP connection), and the data link control connection between the target router and the target end system. A single peer connection can carry multiple circuits. The transport connection between DLSw+ routers can vary according to the needs of the network and is not tied to TCP/IP as the DLSw standard is. Cisco supports four different transport protocols between DLSw+ routers: TCP/IP-for transport of SNA and NetBIOS traffic across WANs where local acknowledgment is required to minimize unnecessary traffic and prevent data-link control timeouts and where non-disruptive rerouting around link failures is critical. This transport option is required when DLSw+ is operating in DLSw standards mode. FST/IP-for transport across WANs with an arbitrary topology and with sufficient bandwidth to accommodate SNA and NetBIOS traffic. This solution allows for rerouting around link failures, but recovery may be disruptive depending on the time required to find an alternate path. This option does not support local acknowledgment of frames. Direct-encapsulation for transport across a point-to-point or Frame Relay connection where the benefits of an arbitrary topology are not important and where nondisruptive rerouting around link failures is not required. This option does not support local acknowledgment of frames. DLSw Lite-also known as Logical Link Control, Type2 (LLC2) encapsulation -for transport across a point-to-point connection (currently only Frame Relay is supported) where local acknowledgment and reliable transport are important, but where nondisruptive rerouting around link failures is not required. DLSw Lite uses RFC 1490 encapsulation of LLC2.')
ciscoDlswExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1))
cdeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 1))
cdeNode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2))
cdeTConn = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3))
cdeInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 4))
cdeCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5))
cdeFast = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6))
cdeTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 7))
class TDomainType(TextualConvention, Integer32):
    description = 'The type of DLSw encapsulation in use on this peer connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("tcp", 1), ("fst", 2), ("directHdlc", 3), ("directFrameRelay", 4), ("llc2", 5))

class Cost(TextualConvention, Integer32):
    description = 'Allows a cost to be assigned to a peer. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5)

class KeepaliveInterval(TextualConvention, Integer32):
    description = 'The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. The keepalive interval is measured in seconds. If set to zero, no keepalives are sent.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1200)

class TCPQueueMax(TextualConvention, Integer32):
    description = 'For DLSw over TCP encapsulation, packets may be queued due to congestion of the TCP network. The TCPQueueMax is used to set the output queue maximum of the underlying TCP connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(25, 2000)

cdeFSTDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 1, 1))
cdeDirectHdlcDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 1, 2))
cdeDirectFrameRelayDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 1, 3))
cdeLlc2Domain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 1, 4))
cdeNodeTAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 1), TAddress().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeTAddr.setStatus('current')
if mibBuilder.loadTexts: cdeNodeTAddr.setDescription('The local peer IP address; required for Fast-Sequenced Transport (FST) and TCP. If no local peer IP address is configured then this object will be the empty string.')
cdeNodeGroup = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeGroup.setStatus('current')
if mibBuilder.loadTexts: cdeNodeGroup.setDescription('Peer group number for this router. Peer groups are arbitrary groups of routers with one or more designated border peers. Border peers form peer connections with every router in their group and with border peers in other groups. The role of a border peer is to forward explorers on behalf of other routers. A value of zero means no group has been set and the DLSw is not a group member.')
cdeNodeBorder = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeBorder.setStatus('current')
if mibBuilder.loadTexts: cdeNodeBorder.setDescription('This variable indicates if this DLSw is capable of operating as a border peer. True indicates that it is capable, false indicates that it is not. Border peers form peer connections with every router in their group and with border peers in other groups. The role of a border peer is to forward explorers on behalf of other DLSw routers.')
cdeNodeCost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 4), Cost().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeCost.setStatus('current')
if mibBuilder.loadTexts: cdeNodeCost.setDescription('Peer cost advertised to remote peers in the capabilities exchange. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination. A value of zero means no cost has been set and that cost will not be considered during circuit establishment.')
cdeNodeKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 5), KeepaliveInterval().clone(30)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: cdeNodeKeepaliveInterval.setDescription('Default remote peer keepalive interval in seconds. The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. If set to zero, no keepalives are sent.')
cdeNodePassiveConnect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePassiveConnect.setStatus('current')
if mibBuilder.loadTexts: cdeNodePassiveConnect.setDescription('This variable indicates if DLSw will not initiate remote peer connections to configured peers. True indicates that it will not initiate remote peer connections, false indicates that it will initiate remote peer connections. In other words a passive peer will wait for the remote peer to initiate a peer connection')
cdeNodeBiuSegment = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeBiuSegment.setStatus('current')
if mibBuilder.loadTexts: cdeNodeBiuSegment.setDescription('This variable indicates if DLSw will spoof the maximum receivable Basic Information Unit (frame) size in XID so that each end station sends the largest frame it can. True indicates that it will spoof, false indicates that it will not.')
cdeNodeInitPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(20)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeInitPacingWindow.setStatus('current')
if mibBuilder.loadTexts: cdeNodeInitPacingWindow.setDescription('Initial pacing window size. This is the starting size of the pacing window. DLSw uses an adaptive pacing flow control algorithm that automatically adjusts to congestion levels in the network. Pacing windows are used to control how many packets may be sent to a peer before acknowlegement.')
cdeNodeMaxPacingWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(50)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodeMaxPacingWindow.setStatus('current')
if mibBuilder.loadTexts: cdeNodeMaxPacingWindow.setDescription('Maximum pacing window size. This is the largest size that the pacing window will grow to. DLSw uses an adaptive pacing flow control algorithm that automatically adjusts to congestion levels in the network. Pacing windows are used to control how many packets may be sent to a peer before acknowlegement.')
cdeNodePromiscuous = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromiscuous.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromiscuous.setDescription('This variable indicates if DLSw will accept connections from non-configured remote peers. Promiscuous routers will accept peer connection requests from routers that are not preconfigured. This feature allows central site routers to remain unchanged when branch offices are added or deleted. It also minimizes required coordination of configurations. True indicates that it will accept connections, false indicates that it will not.')
cdeNodePromPeerDefaultsCost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 11), Cost().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsCost.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsCost.setDescription('This variable indicates the cost that will be used with promiscuous peers. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination.')
cdeNodePromPeerDefaultsDestMac = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 12), MacAddressNC().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsDestMac.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsDestMac.setDescription('Permits the promiscuous peer connection to be established only when there is an explorer frame destined for the specified 48-bit MAC address. If no default destination mac is configured then this object will be the empty string.')
cdeNodePromPeerDefaultsKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 13), KeepaliveInterval().clone(30)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsKeepaliveInterval.setDescription('Default promiscuous peer keepalive interval in seconds. The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. If set to zero, no keepalives are sent.')
cdeNodePromPeerDefaultsLFSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 14), LFSize().clone('lfs17749')).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsLFSize.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsLFSize.setDescription('The default Largest Frame Size associated with the default promiscuous peer transport connection. In other words its the largest size of the INFO field (including DLC header, not including any MAC-level or framing octets).')
cdeNodePromPeerDefaultsTCPQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 15), TCPQueueMax().clone(200)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsTCPQueueMax.setStatus('current')
if mibBuilder.loadTexts: cdeNodePromPeerDefaultsTCPQueueMax.setDescription('Default promiscuous peer maximum output TCP queue size. For DLSw over TCP encapsulation, packets may be queued due to congestion of the TCP network. This variable is used to set the output queue maximum of the underlying TCP connection, by default on a promiscuous peer transport connection.')
cdeNodePeerOnDemandDefaultsCost = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 16), Cost().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsCost.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsCost.setDescription('This variable indicates the cost that will be used with peer on demand peers. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination.')
cdeNodePeerOnDemandDefaultsFst = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsFst.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsFst.setDescription('This variable indicates if Fast-Sequenced Transport (FST) will be for peer on demand peers. True indicates that FST will be used, false indicates that it will not.')
cdeNodePeerOnDemandDefaultsInactivityInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(10)).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsInactivityInterval.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsInactivityInterval.setDescription('This variable indicates the length of time a peer on demand connection can be idle before shutting down this peer on demand connection. If set to zero, the peer on demand connection will not be closed due to inactivity.')
cdeNodePeerOnDemandDefaultsKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 19), KeepaliveInterval().clone(30)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsKeepaliveInterval.setDescription('Default peer on demand keepalive interval in seconds. The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. If set to zero, no keepalives are sent.')
cdeNodePeerOnDemandDefaultsLFSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 20), LFSize().clone('lfs17749')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsLFSize.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsLFSize.setDescription('The default Largest Frame Size associated with the default peer on demand transport connections. In other words its the largest size of the INFO field (including DLC header, not including any MAC-level or framing octets).')
cdeNodePeerOnDemandDefaultsPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsPriority.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsPriority.setDescription('This variable indicates if circuit prioritization will be used for peer-on-demand peers. True indicates that circuit prioritization specified by the dlswCircuitPriority object in the DLSW-MIB (RFC 2024) will be used, false indicates that there will be no circuit prioritization.')
cdeNodePeerOnDemandDefaultsTCPQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 2, 22), TCPQueueMax().clone(200)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsTCPQueueMax.setStatus('current')
if mibBuilder.loadTexts: cdeNodePeerOnDemandDefaultsTCPQueueMax.setDescription('Default peer-on-demand Maximum output TCP queue size. For DLSw over TCP encapsulation, packets may be queued due to congestion of the TCP network. This variable is used to set the output queue maximum of the underlying TCP connection, by default on a peer on demand transport connection.')
cdeTConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1), )
if mibBuilder.loadTexts: cdeTConnConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigTable.setDescription("This table defines the peer transport connections that will be initiated or accepted by this DLSw. Structure of masks allows wildcard definition for a collection of transport connections by a conceptual row. For a specific transport connection, there may be multiple conceptual rows that match the transport address. The `best' match will be the one to determine the characteristics of the transport connection. This table augments dlswTConnConfigTable.")
cdeTConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1), )
dlswTConnConfigEntry.registerAugmentions(("CISCO-DLSW-EXT-MIB", "cdeTConnConfigEntry"))
cdeTConnConfigEntry.setIndexNames(*dlswTConnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cdeTConnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigEntry.setDescription('A list of objects that define specific configuration for a DLSw peer transport connection.')
cdeTConnConfigTDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 1), TDomainType().clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigTDomainType.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigTDomainType.setDescription('The type of DLSw encapsulation in use on this peer connection.')
cdeTConnConfigLocalAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigLocalAck.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigLocalAck.setDescription('Reflects whether the peer connection is locally acknowledged. Locally acknoledgement means terminating the DLC connections at the router, eliminating the requirement for link-layer acknowledgements and keepalive messages to flow across the WAN. In addition because link-layer frames are acknowledged locally, link-layer time-outs should not occur. In general ciscoDlswTConnConfigLocalAck will be true when the domain type is tcp, false when the domain type is fst, direct-hdlc, or direct-frame-relay. Configuring the remote-peer as pass-thru, the remote peer will not use local acknowlegement.')
cdeTConnConfigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 3), Cost().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigCost.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigCost.setDescription('The cost associated with the transport connection, assigned to this conceptual row representing a peer. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination.')
cdeTConnConfigLFSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 4), LFSize().clone('lfs17749')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigLFSize.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigLFSize.setDescription('The Largest Frame Size associated with the transport connection. In other words its the largest size of the INFO field (including DLC header, not including any MAC-level or framing octets).')
cdeTConnConfigKeepaliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 5), KeepaliveInterval().clone(30)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigKeepaliveInterval.setDescription('The amount of time between keepalive messages on a transport connection. The keepalive parameter refers to how often DLSw peers send peer keep alives to each other. These periodic messages allow DLSw to keep track of the state of all peers. If set to zero, no keepalives are sent.')
cdeTConnConfigBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigBackup.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigBackup.setDescription('This variable indicates if this peer is defined as a backup to an existing peer. A backup peer is used to provide an alternate path in case an existing peer becomes unavailable. A backup peer will not enter the connected state until the primary peer that it backs up becomes disconnected. True indicates that this conecptual row is a backup peer to a pre-existing peer, false indicates this peer is not a backup peer.')
cdeTConnConfigBackupTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 7), TAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigBackupTAddr.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigBackupTAddr.setDescription("The primary peer's IP address that this entry backs up. Valid only when ciscoDlswTConnConfigBackup is true.")
cdeTConnConfigBackupLinger = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigBackupLinger.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigBackupLinger.setDescription('This variable indicates whether the backup peer will remain connected after the primary peer connection has been re-established. True indicates that the backup peer will remain connected after the primary peer connection has been re-established, for the length of time specified in cdeTConnConfigBackupLingerInterval. False indicates that the backup peer will remain connected until all circuits on the backup peer connection have been disconnected.')
cdeTConnConfigBackupLingerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('Minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigBackupLingerInterval.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigBackupLingerInterval.setDescription('This variable indicates the length of time the backup peer remains connected after the primary peer connection has been re-established. If this variable is zero, the backup peer will be disconnected immediately after the primary peer connection has been re-established. If greater than zero the backup will stay connected for the number of minutes indicated by this variable, after the primary peer connection has been re-established. Note that the linger interval is only used when cdeTConnConfigBackupLinger is true.')
cdeTConnConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigPriority.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigPriority.setDescription('Indicator of whether this peer connection supports priority. When priority is configured for the remote peer, DLSw+ will automatically activate four TCP connections to that remote peer (ports 2065, 1981, 1982, and 1983). Priority only needs to be configured if you need to prioritize between SNA and NetBIOS, or within SNA by LOCADDR or MAC/SAP pair (known as SAP prioritization). In addition, this granular packet classification is only possible when TCP encapsulation is selected for a specific remote peer. By default DLSw+ assigns certain traffic to specific TCP ports.')
cdeTConnConfigDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 11), MacAddressNC().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigDestMac.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigDestMac.setDescription('Permits the peer connection to be established only when there is an explorer frame destined for the specified 48-bit MAC address. If no expolorer traffic with a destination address of cdeTConnConfigDestMac is received by DLSw, the peer reprented by this conceptual row will not be connected.')
cdeTConnConfigDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigDynamic.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigDynamic.setDescription('Indicates the peer connection is to be established only when there is DLSw+ data to send.')
cdeTConnConfigDynamicNoLlc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('Minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigDynamicNoLlc.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigDynamicNoLlc.setDescription('This variable indicates the length of time a dynamic peer remains connected after all LLC2 circuits are gone.')
cdeTConnConfigDynamicInactivityInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('Minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnConfigDynamicInactivityInterval.setStatus('current')
if mibBuilder.loadTexts: cdeTConnConfigDynamicInactivityInterval.setDescription('Indicates the length of time a connection can be idle before closing the dynamic peer connection. If set to zero, the dynamic peer connection will not be closed due to inactivity.')
cdeTConnOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2), )
if mibBuilder.loadTexts: cdeTConnOperTable.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperTable.setDescription('A list of peer transport connections. Each connected peer will create a conceptual row in the table. When the peer disconnects, the row will be deleted from the table. This table augments dlswTConnOperTable.')
cdeTConnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1), )
dlswTConnOperEntry.registerAugmentions(("CISCO-DLSW-EXT-MIB", "cdeTConnOperEntry"))
cdeTConnOperEntry.setIndexNames(*dlswTConnOperEntry.getIndexNames())
if mibBuilder.loadTexts: cdeTConnOperEntry.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperEntry.setDescription('A list of objects that contain spefific operational information for a DLSw peer transport connection.')
cdeTConnOperPartnerCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1, 1), Cost().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeTConnOperPartnerCost.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperPartnerCost.setDescription("The partner's cost on this peer connection, as received through capabilities exchange. If an end station can be reached through more than one peer, the cost of each peer will be considered when a circuit is established. A lower cost indicates that peer will be the preferred choice if there is more than one path to the destination.")
cdeTConnOperPartnerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeTConnOperPartnerPriority.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperPartnerPriority.setDescription("The partner's priority setting on this peer connection, as received through capabilities exchange. When priority is enabled for the remote peer, DLSw+ will automatically activate four TCP connections to that remote peer (ports 2065, 1981, 1982, and 1983). Priority only needs to be configured if you need to prioritize between SNA and NetBIOS, or within SNA by LOCADDR or MAC/SAP pair (known as SAP prioritization). In addition, this granular packet classification is only possible when TCP encapsulation is selected for a specific remote peer. By default DLSw+ assigns certain traffic to specific TCP ports.")
cdeTConnOperPartnerBorderPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeTConnOperPartnerBorderPeer.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperPartnerBorderPeer.setDescription('This variable indicates if the partner DLSw is capable of operating as a border peer, as received through capabilities exchange. True indicates that it is capable, false indicates that it is not. Border peers form peer connections with every router in their group and with border peers in other groups. The role of a border peer is to forward explorers on behalf of other DLSw routers.')
cdeTConnOperPartnerGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeTConnOperPartnerGroupNum.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperPartnerGroupNum.setDescription("This variable indicates the partner's group number, as received through capabilities exchange. Peer groups are arbitrary groups of routers with one or more designated border peers. Border peers form peer connections with every router in their group and with border peers in other groups. The role of a border peer is to forward explorers on behalf of other routers. A value of zero means no group has been set and the DLSw is not a group member.")
cdeTConnOperTDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 2, 1, 5), TDomainType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeTConnOperTDomainType.setStatus('current')
if mibBuilder.loadTexts: cdeTConnOperTDomainType.setDescription('The type of DLSw encapsulation in use on this peer connection.')
cdeTConnSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3))
cdeTConnTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 1))
cdeTConnDirect = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2))
cdeTConnTcpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: cdeTConnTcpConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdeTConnTcpConfigTable.setDescription('This table defines the TCP transport connections that will be either initiated by or accepted by this DSLw. It augments the entries in dlswTConnConfigTable whose domain is dlswTCPDomain. In other words for each conceptual row in the dlswTConnConfigTable, if the dlswTConnConfigTDomain is dlswTCPDomain, that conceptual row will be augmented by this table. dlswTCPDomain, dlswTConnConfigTable, and dlswTConnConfigTDomain are all imported from DLSW-MIB (RFC 2024). This table augments dlswTConnTcpConfigTable.')
cdeTConnTcpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 1, 1, 1), )
dlswTConnTcpConfigEntry.registerAugmentions(("CISCO-DLSW-EXT-MIB", "cdeTConnTcpConfigEntry"))
cdeTConnTcpConfigEntry.setIndexNames(*dlswTConnTcpConfigEntry.getIndexNames())
if mibBuilder.loadTexts: cdeTConnTcpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdeTConnTcpConfigEntry.setDescription('A list of objects that define spefific configuration for a DLSw peer transport connection within the dlswTCPDomain. dlswTCPDomain is imported from DLSW-MIB (RFC 2024).')
cdeTConnTcpConfigQueueMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 1, 1, 1, 1), TCPQueueMax().clone(200)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnTcpConfigQueueMax.setStatus('current')
if mibBuilder.loadTexts: cdeTConnTcpConfigQueueMax.setDescription('Maximum output TCP queue size for this remote peer. For DLSw over TCP encapsulation, packets may be queued due to congestion of the TCP network. This variable is used to set the output queue maximum of the underlying TCP connection for the peer represented by the conceptual row.')
cdeTConnDirectConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: cdeTConnDirectConfigTable.setStatus('current')
if mibBuilder.loadTexts: cdeTConnDirectConfigTable.setDescription('This table contains direct peer media-specific configuration information. An entry is maintained for every peer in the cdeTConnConfigTable whose domain is either cdeDirectHdlcDomain, cdeDirectFrameRelayDomain, or cdeLlc2Domain. In other words, for each conceptual row in the dlswTConnConfigTable, if the dlswTConnConfigTDomain is either cdeDirectHdlcDomain, cdeDirectFrameRelayDomain, or cdeLlc2Domain, there will be an entry in this table. dlswTConnConfigTable, and dlswTConnConfigTDomain are imported from DLSW-MIB (RFC 2024).')
cdeTConnDirectConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "DLSW-MIB", "dlswTConnConfigIndex"))
if mibBuilder.loadTexts: cdeTConnDirectConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cdeTConnDirectConfigEntry.setDescription('Each conceptual row defines parameters that are specific to peer transport connections whose domain is either cdeDirectHdlcDomain, cdeDirectFrameRelayDomain, or cdeLlc2Domain.')
cdeTConnDirectConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnDirectConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: cdeTConnDirectConfigIfIndex.setDescription('The IfEntry index of the local interface, on which the direct peer can be reached.')
cdeTConnDirectConfigMediaEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("directHdlc", 1), ("directFrameRelay", 2), ("llc2", 3))).clone('directHdlc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnDirectConfigMediaEncap.setStatus('current')
if mibBuilder.loadTexts: cdeTConnDirectConfigMediaEncap.setDescription('The type of media encapsulation to be used on this peer connection. When using DLSw Direct-encapsulation or DLSw Lite (Frame Relay) encapsulation, the peer transport connection is defined as either directHdlc or directFrameRelay, respectively. Hdlc peer transport encapsulation does not support local acknowledgment of frames. Logical Link Control, Type2 (LLC2) peer transport encapsulation -for transport across a point-to-point connection (currently only Frame Relay is supported) provides local acknowledgment and reliable transport.')
cdeTConnDirectConfigFrameRelayDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 3, 3, 2, 1, 1, 3), DlciNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdeTConnDirectConfigFrameRelayDlci.setStatus('current')
if mibBuilder.loadTexts: cdeTConnDirectConfigFrameRelayDlci.setDescription('The Data Link Connection Identifier for the virtual circuit on this interface. This object will only be valid if the value of cdeTConnDirectConfigMediaEncap is llc2.')
cdeIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 4, 1), )
if mibBuilder.loadTexts: cdeIfTable.setStatus('current')
if mibBuilder.loadTexts: cdeIfTable.setDescription('The list of interfaces on which DLSw is active. This table augments dlswIfTable.')
cdeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 4, 1, 1), )
dlswIfEntry.registerAugmentions(("CISCO-DLSW-EXT-MIB", "cdeIfEntry"))
cdeIfEntry.setIndexNames(*dlswIfEntry.getIndexNames())
if mibBuilder.loadTexts: cdeIfEntry.setStatus('current')
if mibBuilder.loadTexts: cdeIfEntry.setDescription('Each conceptual row represents an interface.')
cdeIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 4, 1, 1, 1), DlcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeIfType.setStatus('current')
if mibBuilder.loadTexts: cdeIfType.setDescription('The DLC protocol in use on this DLSw interface.')
cdeCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1), )
if mibBuilder.loadTexts: cdeCircuitTable.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitTable.setDescription('A list of circuits. Each new circuit will create a conceptual row in the table. When the circuit disconnects, the row will be deleted from the table. End station 1 (S1) and End station 2 (S2) are used to represent the two end stations of the circuit. S1 is always an end station which is locally attached. S2 may be locally attached or remote. This table augments the dlswCircuitTable.')
cdeCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1, 1), )
dlswCircuitEntry.registerAugmentions(("CISCO-DLSW-EXT-MIB", "cdeCircuitEntry"))
cdeCircuitEntry.setIndexNames(*dlswCircuitEntry.getIndexNames())
if mibBuilder.loadTexts: cdeCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitEntry.setDescription('A list of objects that contain specific information for a DLSw circuit.')
cdeCircuitS1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeCircuitS1Name.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitS1Name.setDescription('Represents the PU Name of End Station 1 (S1), if available.')
cdeCircuitS2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeCircuitS2Name.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitS2Name.setDescription('Represents the PU Name of End Station 2 (S2), if available.')
cdeCircuitS1IdBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeCircuitS1IdBlock.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitS1IdBlock.setDescription('The block number is the first three digits of the SNA Node id of End Station 1 (S1), if available. These 3 hexadecimal digits identify the product.')
cdeCircuitS1IdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeCircuitS1IdNum.setStatus('current')
if mibBuilder.loadTexts: cdeCircuitS1IdNum.setDescription('The ID number is the last 5 digits of the SNA Node id of End Station 1 (S1), if available. These 5 hexadecimal digits are administratively defined and combined with the 3 digit block number form the Node id. This Node id is used to identify the local node and is included in SNA XIDs.')
cdeFastTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1), )
if mibBuilder.loadTexts: cdeFastTable.setStatus('current')
if mibBuilder.loadTexts: cdeFastTable.setDescription('A table containing fast cache entries. The table contains cache information for FST peers or direct encapsulation peers (without local acknowledgement enabled). When using these encapsulation types, a fast-switching cache must be built. The first frame between two end stations will be process switched, and during this process an entry will be made in the fast-switching cache so that subsequent frames between those end stations may be fast switched. End station 1 (S1) and End station 2 (S2) are used to represent the two end stations of the faat cache entry. S1 is always an end station which is locally attached. S2 is always an end station which is remote.')
cdeFastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-DLSW-EXT-MIB", "cdeFastS1Mac"), (0, "CISCO-DLSW-EXT-MIB", "cdeFastS1Sap"), (0, "CISCO-DLSW-EXT-MIB", "cdeFastS2Mac"), (0, "CISCO-DLSW-EXT-MIB", "cdeFastS2Sap"))
if mibBuilder.loadTexts: cdeFastEntry.setStatus('current')
if mibBuilder.loadTexts: cdeFastEntry.setDescription('A list of objects that define specific information for a DLSw fast cache entry.')
cdeFastS1Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 1), MacAddressNC())
if mibBuilder.loadTexts: cdeFastS1Mac.setStatus('current')
if mibBuilder.loadTexts: cdeFastS1Mac.setDescription('The MAC Address of End Station 1 (S1) used for this cache entry.')
cdeFastS1Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 2), SAPType())
if mibBuilder.loadTexts: cdeFastS1Sap.setStatus('current')
if mibBuilder.loadTexts: cdeFastS1Sap.setDescription('The SAP at End Station 1 (S1) used for this cache entry.')
cdeFastS2Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 3), MacAddressNC())
if mibBuilder.loadTexts: cdeFastS2Mac.setStatus('current')
if mibBuilder.loadTexts: cdeFastS2Mac.setDescription('The MAC Address of End Station 2 (S2) used for this cache entry.')
cdeFastS2Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 4), SAPType())
if mibBuilder.loadTexts: cdeFastS2Sap.setStatus('current')
if mibBuilder.loadTexts: cdeFastS2Sap.setDescription('The SAP at End Station 2 (S2) used for this cache entry.')
cdeFastS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS1IfIndex.setStatus('current')
if mibBuilder.loadTexts: cdeFastS1IfIndex.setDescription('The ifEntry index of the local interface through which S1 can be reached.')
cdeFastS1RouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS1RouteInfo.setStatus('current')
if mibBuilder.loadTexts: cdeFastS1RouteInfo.setDescription('If source-route bridging is in use between the DLSw and S1, this is the routing information field describing the path between the two devices. Otherwise the value will be an OCTET STRING of zero length.')
cdeFastS1CacheId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS1CacheId.setStatus('current')
if mibBuilder.loadTexts: cdeFastS1CacheId.setDescription('The Cache ID assigned by this DLSw to this fast cache entry. Every Fast cache entry will have a unique id. A management station could use this object by periodically polling this table, and determine whether the same cache entries were present or absent.')
cdeFastS2TDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS2TDomain.setStatus('current')
if mibBuilder.loadTexts: cdeFastS2TDomain.setDescription('This object contains the transport domain of the peer transport protocol that the fast cache entry is running over.')
cdeFastS2TAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 9), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS2TAddress.setStatus('current')
if mibBuilder.loadTexts: cdeFastS2TAddress.setDescription('This object contains the transport address of the partner DLSw.')
cdeFastS2CacheId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastS2CacheId.setStatus('current')
if mibBuilder.loadTexts: cdeFastS2CacheId.setDescription('The Cache ID assigned to this fast cache entry by the partner DLSw. Every Fast cache entry will have a unique id. A management station could use this object by periodically polling this table, and determine whether the same cache entries were present or absent.')
cdeFastOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s1", 1), ("s2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastOrigin.setStatus('current')
if mibBuilder.loadTexts: cdeFastOrigin.setDescription('This object specifies which of the two end stations initiated the establishment of this circuit.')
cdeFastTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 6, 1, 1, 12), TimeTicks()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdeFastTimeToLive.setStatus('current')
if mibBuilder.loadTexts: cdeFastTimeToLive.setDescription('The amount of time (in hundredths of a second) remaining before this fast cache entry will be removed from the table. After 5 minutes of inactivity, the fast cache entry will be deleted.')
cdeTrapCntlTConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeTrapCntlTConn.setStatus('current')
if mibBuilder.loadTexts: cdeTrapCntlTConn.setDescription("Indicates whether DLSw is permitted to emit transport connection up and down traps. With the value of `true' DLSw will emit traps when connections enter `connected' and `disconnected' states. With the value of `false' DLSw will not emit traps when connections enter `connected' and `disconnected' states. The changes take effect immediately.")
cdeTrapCntlCircuit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 74, 1, 7, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdeTrapCntlCircuit.setStatus('current')
if mibBuilder.loadTexts: cdeTrapCntlCircuit.setDescription("Indicates whether the DLSw is permitted to generate circuit up and down traps. With the value of `true' the DLSw will emit traps when circuits enter `connected' and `disconnected' states. With the value of `false' the DLSw will not emit traps when circuits enter `connected' and `disconnected' states. The changes take effect immediately.")
cdeTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 2))
cdeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 2, 0))
cdeTrapTConnUpDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 74, 2, 0, 1)).setObjects(("DLSW-MIB", "dlswTConnOperState"))
if mibBuilder.loadTexts: cdeTrapTConnUpDown.setStatus('current')
if mibBuilder.loadTexts: cdeTrapTConnUpDown.setDescription("This trap is sent each time a transport connection changes state to `connected' or `disconnected'. The emission of this trap is controlled by cdeTrapCntlTConn.")
cdeTrapCircuitUpDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 74, 2, 0, 2)).setObjects(("DLSW-MIB", "dlswCircuitState"))
if mibBuilder.loadTexts: cdeTrapCircuitUpDown.setStatus('current')
if mibBuilder.loadTexts: cdeTrapCircuitUpDown.setDescription("This trap is sent each time a circuit changes state to `connected' or `disconnected'. the emission of this trap is controlled by cdeTrapCntlCircuit.")
cdeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 3))
cdeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 1))
cdeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2))
cdeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 1, 1)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeMIBNodeGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBTConnConfigGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBTConnOperGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBTConnTcpConfigGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBTConnDirectConfigGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBInterfaceGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBCircuitGroup"), ("CISCO-DLSW-EXT-MIB", "cdeMIBFastGroup"), ("CISCO-DLSW-EXT-MIB", "cdeTrapControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBCompliance = cdeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cdeMIBCompliance.setDescription('The compliance statement for all Cisco DLSw+ implementations.')
cdeMIBNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 1)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeNodeTAddr"), ("CISCO-DLSW-EXT-MIB", "cdeNodeGroup"), ("CISCO-DLSW-EXT-MIB", "cdeNodeBorder"), ("CISCO-DLSW-EXT-MIB", "cdeNodeCost"), ("CISCO-DLSW-EXT-MIB", "cdeNodeKeepaliveInterval"), ("CISCO-DLSW-EXT-MIB", "cdeNodePassiveConnect"), ("CISCO-DLSW-EXT-MIB", "cdeNodeBiuSegment"), ("CISCO-DLSW-EXT-MIB", "cdeNodeInitPacingWindow"), ("CISCO-DLSW-EXT-MIB", "cdeNodeMaxPacingWindow"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromiscuous"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromPeerDefaultsCost"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromPeerDefaultsDestMac"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromPeerDefaultsKeepaliveInterval"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromPeerDefaultsLFSize"), ("CISCO-DLSW-EXT-MIB", "cdeNodePromPeerDefaultsTCPQueueMax"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsCost"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsFst"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsInactivityInterval"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsKeepaliveInterval"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsLFSize"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsPriority"), ("CISCO-DLSW-EXT-MIB", "cdeNodePeerOnDemandDefaultsTCPQueueMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBNodeGroup = cdeMIBNodeGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBNodeGroup.setDescription('Conformance group for DLSw Node general information.')
cdeMIBTConnConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 2)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeTConnConfigTDomainType"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigLocalAck"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigCost"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigLFSize"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigKeepaliveInterval"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigBackup"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigBackupTAddr"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigBackupLinger"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigBackupLingerInterval"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigPriority"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigDestMac"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigDynamic"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigDynamicNoLlc"), ("CISCO-DLSW-EXT-MIB", "cdeTConnConfigDynamicInactivityInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBTConnConfigGroup = cdeMIBTConnConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBTConnConfigGroup.setDescription('Conformance group for the configuration of transport connections.')
cdeMIBTConnOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 3)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeTConnOperPartnerCost"), ("CISCO-DLSW-EXT-MIB", "cdeTConnOperPartnerPriority"), ("CISCO-DLSW-EXT-MIB", "cdeTConnOperPartnerBorderPeer"), ("CISCO-DLSW-EXT-MIB", "cdeTConnOperPartnerGroupNum"), ("CISCO-DLSW-EXT-MIB", "cdeTConnOperTDomainType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBTConnOperGroup = cdeMIBTConnOperGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBTConnOperGroup.setDescription('Conformance group for operation information for transport connections.')
cdeMIBTConnTcpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 4)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeTConnTcpConfigQueueMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBTConnTcpConfigGroup = cdeMIBTConnTcpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBTConnTcpConfigGroup.setDescription('Conformance group for configuration information for transport connections using TCP.')
cdeMIBTConnDirectConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 5)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeTConnDirectConfigIfIndex"), ("CISCO-DLSW-EXT-MIB", "cdeTConnDirectConfigMediaEncap"), ("CISCO-DLSW-EXT-MIB", "cdeTConnDirectConfigFrameRelayDlci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBTConnDirectConfigGroup = cdeMIBTConnDirectConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBTConnDirectConfigGroup.setDescription('Conformance group for configuration information for transport connections using Direct or FST.')
cdeMIBInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 6)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeIfType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBInterfaceGroup = cdeMIBInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBInterfaceGroup.setDescription('Conformance group for DLSw interfaces.')
cdeMIBCircuitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 7)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeCircuitS1Name"), ("CISCO-DLSW-EXT-MIB", "cdeCircuitS2Name"), ("CISCO-DLSW-EXT-MIB", "cdeCircuitS1IdBlock"), ("CISCO-DLSW-EXT-MIB", "cdeCircuitS1IdNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBCircuitGroup = cdeMIBCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBCircuitGroup.setDescription('Conformance group for DLSw circuits.')
cdeMIBFastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 8)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeFastS1IfIndex"), ("CISCO-DLSW-EXT-MIB", "cdeFastS1RouteInfo"), ("CISCO-DLSW-EXT-MIB", "cdeFastS1CacheId"), ("CISCO-DLSW-EXT-MIB", "cdeFastS2TDomain"), ("CISCO-DLSW-EXT-MIB", "cdeFastS2TAddress"), ("CISCO-DLSW-EXT-MIB", "cdeFastS2CacheId"), ("CISCO-DLSW-EXT-MIB", "cdeFastOrigin"), ("CISCO-DLSW-EXT-MIB", "cdeFastTimeToLive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeMIBFastGroup = cdeMIBFastGroup.setStatus('current')
if mibBuilder.loadTexts: cdeMIBFastGroup.setDescription('Conformance group for DLSw Fast Cache entries.')
cdeTrapControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 74, 3, 2, 9)).setObjects(("CISCO-DLSW-EXT-MIB", "cdeTrapCntlTConn"), ("CISCO-DLSW-EXT-MIB", "cdeTrapCntlCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdeTrapControlGroup = cdeTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: cdeTrapControlGroup.setDescription('Conformance group for DLSw Trap Control.')
mibBuilder.exportSymbols("CISCO-DLSW-EXT-MIB", KeepaliveInterval=KeepaliveInterval, cdeTrapsPrefix=cdeTrapsPrefix, Cost=Cost, cdeNodePromPeerDefaultsCost=cdeNodePromPeerDefaultsCost, cdeIfEntry=cdeIfEntry, cdeTConnOperPartnerPriority=cdeTConnOperPartnerPriority, cdeCircuitS1Name=cdeCircuitS1Name, cdeTrapCircuitUpDown=cdeTrapCircuitUpDown, cdeTConnConfigDynamic=cdeTConnConfigDynamic, cdeTConnTcp=cdeTConnTcp, cdeMIBFastGroup=cdeMIBFastGroup, cdeNodeMaxPacingWindow=cdeNodeMaxPacingWindow, cdeMIBNodeGroup=cdeMIBNodeGroup, cdeTConnConfigBackup=cdeTConnConfigBackup, cdeFastOrigin=cdeFastOrigin, PYSNMP_MODULE_ID=ciscoDlswExtMIB, cdeNodePeerOnDemandDefaultsLFSize=cdeNodePeerOnDemandDefaultsLFSize, cdeTConnDirectConfigEntry=cdeTConnDirectConfigEntry, cdeNodePromPeerDefaultsLFSize=cdeNodePromPeerDefaultsLFSize, cdeFastTable=cdeFastTable, cdeNodeInitPacingWindow=cdeNodeInitPacingWindow, cdeMIBTConnConfigGroup=cdeMIBTConnConfigGroup, ciscoDlswExtMIBObjects=ciscoDlswExtMIBObjects, cdeDirectHdlcDomain=cdeDirectHdlcDomain, cdeTConnOperTable=cdeTConnOperTable, cdeTConnDirectConfigIfIndex=cdeTConnDirectConfigIfIndex, cdeFastS1CacheId=cdeFastS1CacheId, cdeFastS1IfIndex=cdeFastS1IfIndex, cdeMIBCompliance=cdeMIBCompliance, cdeTConnConfigBackupTAddr=cdeTConnConfigBackupTAddr, cdeNodeKeepaliveInterval=cdeNodeKeepaliveInterval, cdeCircuit=cdeCircuit, cdeTConnDirectConfigFrameRelayDlci=cdeTConnDirectConfigFrameRelayDlci, cdeNodeGroup=cdeNodeGroup, cdeTConnOperPartnerBorderPeer=cdeTConnOperPartnerBorderPeer, cdeNodePromPeerDefaultsDestMac=cdeNodePromPeerDefaultsDestMac, cdeTConnConfigPriority=cdeTConnConfigPriority, cdeTConnConfigDynamicNoLlc=cdeTConnConfigDynamicNoLlc, cdeTConnConfigDynamicInactivityInterval=cdeTConnConfigDynamicInactivityInterval, cdeNodePeerOnDemandDefaultsCost=cdeNodePeerOnDemandDefaultsCost, cdeMIBInterfaceGroup=cdeMIBInterfaceGroup, cdeMIBTConnOperGroup=cdeMIBTConnOperGroup, cdeCircuitEntry=cdeCircuitEntry, cdeFastS1RouteInfo=cdeFastS1RouteInfo, cdeTConnTcpConfigEntry=cdeTConnTcpConfigEntry, cdeNodePeerOnDemandDefaultsFst=cdeNodePeerOnDemandDefaultsFst, cdeTConnConfigBackupLingerInterval=cdeTConnConfigBackupLingerInterval, cdeLlc2Domain=cdeLlc2Domain, cdeTrapTConnUpDown=cdeTrapTConnUpDown, cdeFastS2TAddress=cdeFastS2TAddress, cdeFastS2Mac=cdeFastS2Mac, cdeDomains=cdeDomains, cdeTraps=cdeTraps, cdeTConnConfigBackupLinger=cdeTConnConfigBackupLinger, cdeTrapCntlCircuit=cdeTrapCntlCircuit, cdeFastEntry=cdeFastEntry, cdeMIBTConnDirectConfigGroup=cdeMIBTConnDirectConfigGroup, cdeTrapCntlTConn=cdeTrapCntlTConn, cdeTConnDirect=cdeTConnDirect, cdeInterface=cdeInterface, cdeTConnOperTDomainType=cdeTConnOperTDomainType, cdeTConnConfigEntry=cdeTConnConfigEntry, cdeTConnDirectConfigTable=cdeTConnDirectConfigTable, cdeFastS1Mac=cdeFastS1Mac, cdeTConnConfigDestMac=cdeTConnConfigDestMac, cdeIfType=cdeIfType, TCPQueueMax=TCPQueueMax, cdeTConnSpecific=cdeTConnSpecific, cdeNodePeerOnDemandDefaultsInactivityInterval=cdeNodePeerOnDemandDefaultsInactivityInterval, cdeTConnConfigTDomainType=cdeTConnConfigTDomainType, cdeCircuitTable=cdeCircuitTable, cdeNodePromiscuous=cdeNodePromiscuous, cdeIfTable=cdeIfTable, cdeFastS2CacheId=cdeFastS2CacheId, cdeTConnTcpConfigTable=cdeTConnTcpConfigTable, cdeTConnDirectConfigMediaEncap=cdeTConnDirectConfigMediaEncap, cdeMIBGroups=cdeMIBGroups, cdeNodePassiveConnect=cdeNodePassiveConnect, cdeNodeBiuSegment=cdeNodeBiuSegment, cdeFSTDomain=cdeFSTDomain, cdeTConnConfigTable=cdeTConnConfigTable, cdeTConn=cdeTConn, cdeFast=cdeFast, cdeNodeTAddr=cdeNodeTAddr, cdeMIBTConnTcpConfigGroup=cdeMIBTConnTcpConfigGroup, cdeTrapControlGroup=cdeTrapControlGroup, cdeNodePromPeerDefaultsTCPQueueMax=cdeNodePromPeerDefaultsTCPQueueMax, cdeFastS1Sap=cdeFastS1Sap, cdeNode=cdeNode, cdeDirectFrameRelayDomain=cdeDirectFrameRelayDomain, cdeMIBConformance=cdeMIBConformance, cdeTConnOperPartnerCost=cdeTConnOperPartnerCost, cdeTConnConfigKeepaliveInterval=cdeTConnConfigKeepaliveInterval, cdeNodeBorder=cdeNodeBorder, cdeCircuitS2Name=cdeCircuitS2Name, cdeMIBCircuitGroup=cdeMIBCircuitGroup, cdeMIBCompliances=cdeMIBCompliances, cdeTConnConfigLocalAck=cdeTConnConfigLocalAck, ciscoDlswExtMIB=ciscoDlswExtMIB, cdeTConnOperPartnerGroupNum=cdeTConnOperPartnerGroupNum, cdeCircuitS1IdNum=cdeCircuitS1IdNum, TDomainType=TDomainType, cdeNodePeerOnDemandDefaultsTCPQueueMax=cdeNodePeerOnDemandDefaultsTCPQueueMax, cdeFastTimeToLive=cdeFastTimeToLive, cdeTConnConfigCost=cdeTConnConfigCost, cdeTConnOperEntry=cdeTConnOperEntry, cdeFastS2Sap=cdeFastS2Sap, cdeNodePeerOnDemandDefaultsPriority=cdeNodePeerOnDemandDefaultsPriority, cdeNodeCost=cdeNodeCost, cdeCircuitS1IdBlock=cdeCircuitS1IdBlock, cdeNodePromPeerDefaultsKeepaliveInterval=cdeNodePromPeerDefaultsKeepaliveInterval, cdeTConnConfigLFSize=cdeTConnConfigLFSize, cdeNodePeerOnDemandDefaultsKeepaliveInterval=cdeNodePeerOnDemandDefaultsKeepaliveInterval, cdeFastS2TDomain=cdeFastS2TDomain, cdeTrapControl=cdeTrapControl, cdeTConnTcpConfigQueueMax=cdeTConnTcpConfigQueueMax)
