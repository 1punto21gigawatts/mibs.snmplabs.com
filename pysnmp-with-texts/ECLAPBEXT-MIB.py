#
# PySNMP MIB module ECLAPBEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECLAPBEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, MibIdentifier, enterprises, ModuleIdentity, IpAddress, TimeTicks, NotificationType, Bits, Counter64, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "MibIdentifier", "enterprises", "ModuleIdentity", "IpAddress", "TimeTicks", "NotificationType", "Bits", "Counter64", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
lapbext = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1))
class BandwidthStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("normal", 1), ("tx-usage-high", 2), ("rx-usage-high", 3), ("tx-and-rx-usage-high", 4), ("undefined", 5))

lapbCountersTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: lapbCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountersTable.setDescription('Runtime counters table, one row per port')
lapbCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "ECLAPBEXT-MIB", "lapbCountPortRef"))
if mibBuilder.loadTexts: lapbCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountEntry.setDescription('The set of counters for one port. Can be reset to 0.')
lapbCountPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountPortRef.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountPortRef.setDescription('The port number, the same as lapbParmPortRef from the lapbParmTable.')
lapbCountRetransmis = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRetransmis.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountRetransmis.setDescription('The number of times a frame has been retransmitted')
lapbCountSABMTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountSABMTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountSABMTxs.setDescription('The number of Set Asynchronous Balanced Mode frames sent')
lapbCountSABMRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountSABMRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountSABMRxs.setDescription('The number of Set Asynchronous Balanced Mode frames received')
lapbCountDISCTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountDISCTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountDISCTxs.setDescription('The number of Disconnect frames sent')
lapbCountDISCRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountDISCRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountDISCRxs.setDescription('The number of Disconnect frames received')
lapbCountDMsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountDMsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountDMsTxs.setDescription('The number of Disconnected Mode frames sent')
lapbCountDMsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountDMsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountDMsRxs.setDescription('The number of Disconnected Mode frames received')
lapbCountRNRsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRNRsTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountRNRsTxs.setDescription('The number of Receiver Not Ready frames sent')
lapbCountRNRsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRNRsRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountRNRsRxs.setDescription('The number of Receiver Not Ready frames received')
lapbCountUATxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountUATxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountUATxs.setDescription('The number of Unnumbered Acknowledgement frames transmitted.')
lapbCountUARxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountUARxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountUARxs.setDescription('The number of Unnumbered Acknowledgement frames received.')
lapbCountRRTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRRTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountRRTxs.setDescription('The number of Receiver Ready frames transmitted. ')
lapbCountRRRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountRRRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountRRRxs.setDescription('The number of Receiver Ready frames received.')
lapbCountFRMRTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountFRMRTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountFRMRTxs.setDescription('The number of Frame Reject frames sent.')
lapbCountFRMRRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountFRMRRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountFRMRRxs.setDescription('The number of Frame Reject frames received.')
lapbCountBadCRCTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountBadCRCTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountBadCRCTxs.setDescription('The number of frames sent with bad CRC.')
lapbCountBadCRCRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountBadCRCRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountBadCRCRxs.setDescription('The number of frames received with bad CRC.')
lapbCountAbortTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountAbortTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountAbortTxs.setDescription('The number of frames sent with Abort indication.')
lapbCountAbortRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountAbortRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountAbortRxs.setDescription('The number of frames received with Abort indication.')
lapbCountBadTypeTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountBadTypeTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountBadTypeTxs.setDescription('The number of Unknown frames sent.')
lapbCountBadTypeRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountBadTypeRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountBadTypeRxs.setDescription('The number of Unknown frames received.')
lapbCountInfoFrameTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountInfoFrameTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountInfoFrameTxs.setDescription('The number of Information frames sent.')
lapbCountInfoFrameRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountInfoFrameRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountInfoFrameRxs.setDescription('The number of Information frames received.')
lapbCountUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountUnderrun.setDescription('The number of times that more frames have been transmitted than the receiver can handle.')
lapbCountOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountOverrun.setDescription('The number of times that the EiconCard could not handle incoming frames.')
lapbCountXIDTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountXIDTxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountXIDTxs.setDescription('The number of Exchange Station Identification frames sent.')
lapbCountXIDRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbCountXIDRxs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbCountXIDRxs.setDescription('The number of Exchange Station Identification frames received.')
lapbBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2), )
if mibBuilder.loadTexts: lapbBandwidthTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthTable.setDescription('The table of configurable and informational parameters with respect to the bandwidth traps for lapb interfaces')
lapbBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1), ).setIndexNames((0, "ECLAPBEXT-MIB", "lapbBandwidthIndex"))
if mibBuilder.loadTexts: lapbBandwidthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthEntry.setDescription('The set of configurable and informational parameters to support the bandwidth traps for each lapb interface')
lapbBandwidthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbBandwidthIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthIndex.setDescription('The identifier of the EiconPort assigned by the agent.')
lapbBandwidthHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbBandwidthHigh.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthHigh.setDescription('The higher configurable threshold for the lapbTrapBandwidthShortage. If the percentage of bandwidth being used exceeds this amount over a configurable number of seconds (lapbBandwidthSecs) for a configurable number of consecutive periods, (lapbBandwidthNumPeriods), then the trap is sent and the lapbBandwidthTrapsStatus is changed accordingly')
lapbBandwidthLow = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbBandwidthLow.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthLow.setDescription('The lower configurable threshold for the lapbTrapBandwidthClear. If the percentage of bandwidth being used drops below this amount, subsequent to a lapbTrapBandwidthShortage, then the trap is sent and the lapbBadwidthTrapsStatus is changed accordingly. Note that this value MUST be below that for labpBandwidthHigh')
lapbBandwidthSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbBandwidthSecs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthSecs.setDescription('The number of seconds over which the bandwidth is calculated.')
lapbBandwidthNumPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbBandwidthNumPeriods.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthNumPeriods.setDescription('The number of consecutive periods, each of length lapbBandwidthSecs seconds, that the condition must be present for before the lapbBandwidthShortage trap is sent.')
lapbBandwidthTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbBandwidthTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthTrapState.setDescription('This variable indicates whether the agent should generate the lapbTrapBandwidthShortage and lapbTrapBandwidthClear traps if the relevant conditions arise. Set this value to disabled to stop these traps being generated')
lapbBandwidthTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 7), BandwidthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbBandwidthTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthTrapStatus.setDescription('The status of the bandwidth traps. This value should be polled to determine whether or not the bandwidth shortage condition is present and a trap has been sent.')
lapbBandwidthRxInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbBandwidthRxInUse.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthRxInUse.setDescription('The percentage of bandwidth that is currently in use receiving incoming traffic.')
lapbBandwidthTxInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbBandwidthTxInUse.setStatus('mandatory')
if mibBuilder.loadTexts: lapbBandwidthTxInUse.setDescription('The percentage of bandwidth that is currently in use transmitting outgoing traffic.')
lapbOperTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3), )
if mibBuilder.loadTexts: lapbOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTable.setDescription('This table contains configuration information about interface parameters currently set in the interface. Many of these objects have corresponding objects in the lapbAdmnTable.')
lapbOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1), ).setIndexNames((0, "ECLAPBEXT-MIB", "lapbOperIndex"))
if mibBuilder.loadTexts: lapbOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperEntry.setDescription('Currently set parameter values for a specific LAPB.')
lapbOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperIndex.setDescription('The ifIndex value for the LAPB interface.')
lapbOperStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperStationType.setReference('ISO 7776 section 3.1')
if mibBuilder.loadTexts: lapbOperStationType.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperStationType.setDescription('Identifies the current operating station type of this interface. A value of dxe (3) indicates XID negotiation has not yet taken place.')
lapbOperControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperControlField.setReference('ISO 7776 section 3.3')
if mibBuilder.loadTexts: lapbOperControlField.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperControlField.setDescription('The current operating size of the sequence numbers used to number frames.')
lapbOperTransmitN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 4), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setReference('ISO 7776 section 5.7.3')
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTransmitN1FrameSize.setDescription('The current operating N1 frame size used for the maximum number of bits in a frame this DTE can transmit. This excludes flags and 0 bits inserted for transparency.')
lapbOperReceiveN1FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperReceiveN1FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperReceiveN1FrameSize.setDescription('The current operating N1 frame size used for the maximum number of bits in a frame the DCE/remote DTE can transmit. This excludes flags and 0 bits inserted for transparency.')
lapbOperTransmitKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setReference('ISO 7776 section 5.7.4')
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperTransmitKWindowSize.setDescription('The current PDU window size this Interface uses to transmit. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from this DTE at any one time.')
lapbOperReceiveKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setReference('ISO 7776 section 5.7.4')
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperReceiveKWindowSize.setDescription('The current receive PDU window size for this Interface. This is the maximum number of unacknowledged sequenced PDUs that may be outstanding from the DCE/remote DTE at any one time.')
lapbOperN2RxmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setReference('ISO 7776 section 5.7.2')
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperN2RxmitCount.setDescription('The current N2 retry counter used for this interface. This specifies the number of times a PDU will be resent after the T1 timer expires without an acknowledgement for the PDU.')
lapbOperT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 9), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT1AckTimer.setReference('ISO 7776 section 5.7.1.1')
if mibBuilder.loadTexts: lapbOperT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT1AckTimer.setDescription('The current T1 timer for this interface. This specifies the maximum time in Milliseconds to wait for acknowledgment of a PDU.')
lapbOperT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 10), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setReference('ISO 7776 section 5.7.1.2')
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT2AckDelayTimer.setDescription('The current T2 timer for this interface. This specifies the maximum time in Milliseconds to wait before sending an acknowledgment for a sequenced PDU. A value of zero means there will be no delay in acknowledgement generation.')
lapbOperT3DisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 11), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setReference('ISO 7776 section 5.7.1.3')
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT3DisconnectTimer.setDescription('The current T3 timer for this interface. This specifies the time in Milliseconds to wait before considering the link disconnected. A value of zero indicates the link will be considered disconnected upon completion of the frame exchange to disconnect the link.')
lapbOperT4IdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 12), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setReference('ISO 7776 section 5.7.1.4')
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperT4IdleTimer.setDescription('The current T4 timer for this interface. This specifies the maximum time in Milliseconds to allow without frames being exchanged on the data link. A value of 2147483647 indicates no idle timer is being kept.')
lapbOperPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperPortId.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperPortId.setDescription('This object identifies an instance of the index object in the first group of objects in the MIB specific to the physical device or interface used to send and receive frames. If an agent does not support any such objects, it should return nullSpec OBJECT IDENTIFIER {0 0}.')
lapbOperProtocolVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 3, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbOperProtocolVersionId.setStatus('mandatory')
if mibBuilder.loadTexts: lapbOperProtocolVersionId.setDescription('This object identifies the version of the lapb protocol implemented by this interface.')
lapbFlowTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4), )
if mibBuilder.loadTexts: lapbFlowTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowTable.setDescription('This table defines the objects recorded by LAPB to provide information about the traffic flow through the interface.')
lapbFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1), ).setIndexNames((0, "ECLAPBEXT-MIB", "lapbFlowIfIndex"))
if mibBuilder.loadTexts: lapbFlowEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowEntry.setDescription('The information regarding the effects of flow controls in LAPB.')
lapbFlowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowIfIndex.setDescription('The ifIndex value for the LAPB Interface.')
lapbFlowStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowStateChanges.setDescription('The number of LAPB State Changes, including resets.')
lapbFlowChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notStarted", 1), ("abmEntered", 2), ("abmeEntered", 3), ("abmReset", 4), ("abmeReset", 5), ("dmReceived", 6), ("dmSent", 7), ("discReceived", 8), ("discSent", 9), ("frmrReceived", 10), ("frmrSent", 11), ("n2Timeout", 12), ("other", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowChangeReason.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowChangeReason.setDescription('The reason for the most recent incrementing of lapbFlowStateChanges. A DM or DISC frame generated to initiate link set-up does not alter this object. When the MIB-II object ifOperStatus does not have a value of testing, there exists a correlation between this object and ifOperStatus. IfOperStatus will have a value of up when this object contains: abmEntered, abmeEntered, abmReset, or abmeReset. IfOperStatus will have a value of down when this object has a value of notStarted, or dmReceived through n2Timeout. There is no correlation when this object has the value other.')
lapbFlowCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("disconnected", 1), ("linkSetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("rejFrameSent", 6), ("waitingAcknowledgement", 7), ("stationBusy", 8), ("remoteStationBusy", 9), ("bothStationsBusy", 10), ("waitingAckStationBusy", 11), ("waitingAckRemoteBusy", 12), ("waitingAckBothBusy", 13), ("rejFrameSentRemoteBusy", 14), ("xidFrameSent", 15), ("error", 16), ("other", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowCurrentMode.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowCurrentMode.setDescription('The current condition of the conversation.')
lapbFlowBusyDefers = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowBusyDefers.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowBusyDefers.setDescription('The number of times this device was unable to transmit a frame due to a perceived remote busy condition. Busy conditions can result from the receipt of an RNR from the remote device, the lack of valid sequence number space (window saturation), or other conditions.')
lapbFlowRejOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowRejOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowRejOutPkts.setDescription('The number of REJ or SREJ frames sent by this station.')
lapbFlowRejInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowRejInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowRejInPkts.setDescription('The number of REJ or SREJ frames received by this station.')
lapbFlowT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowT1Timeouts.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowT1Timeouts.setDescription('The number of times a re-transmission was effected by the T1 Timer expiring.')
lapbFlowFrmrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowFrmrSent.setReference('ISO 7776 Section 4.3.9, tables 7 and 8')
if mibBuilder.loadTexts: lapbFlowFrmrSent.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowFrmrSent.setDescription("The Information Field of the FRMR most recently sent. If no FRMR has been sent (the normal case) or the information isn't available, this will be an OCTET STRING of zero length.")
lapbFlowFrmrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setReference('ISO 7776 Section 4.3.9, tables 7 and 8')
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowFrmrReceived.setDescription("The Information Field of the FRMR most recently received. If no FRMR has been received (the normal case) or the information isn't available, this will be an OCTET STRING of zero length.")
lapbFlowXidReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 1, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8206))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbFlowXidReceived.setReference('ISO 8885')
if mibBuilder.loadTexts: lapbFlowXidReceived.setStatus('mandatory')
if mibBuilder.loadTexts: lapbFlowXidReceived.setDescription('The Information Field of the XID frame most recently received. If no XID frame has been received, this will be an OCTET STRING of zero length.')
lapbTrapBandwidthShortage = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,411)).setObjects(("ECLAPBEXT-MIB", "lapbBandwidthIndex"), ("ECLAPBEXT-MIB", "lapbBandwidthRxInUse"), ("ECLAPBEXT-MIB", "lapbBandwidthTxInUse"), ("ECLAPBEXT-MIB", "lapbBandwidthTrapStatus"))
if mibBuilder.loadTexts: lapbTrapBandwidthShortage.setDescription('This trap indicates that the amount of bandwidth used on the specified port has risen above lapbBandwidthHigh percent over lapbBandwidthNumPeriods of lapbBandwidthSecs. The next two parameters indicate the percentage of the total bandwidth used in each direction (Transmitting or Receiving) over the last lapbBandwidthSecs number of seconds. The final parameter indicates the direction(s) in which the bandwidth threshold has been exceeded')
lapbTrapBandwidthClear = NotificationType((1, 3, 6, 1, 4, 1, 434) + (0,412)).setObjects(("ECLAPBEXT-MIB", "lapbBandwidthIndex"), ("ECLAPBEXT-MIB", "lapbBandwidthRxInUse"), ("ECLAPBEXT-MIB", "lapbBandwidthTxInUse"), ("ECLAPBEXT-MIB", "lapbBandwidthTrapStatus"))
if mibBuilder.loadTexts: lapbTrapBandwidthClear.setDescription('This trap indicates that the condition causing a previous lapbTrapBandwidthShortage no longer applies; in particular that the bandwidth being used on the specified port has dropped to below lapbBandwidthLow percent over the last lapbBandwidthSecs number of seconds The final parameter indicates the direction(s) in which the bandwidth exceeded condition has been cleared')
mibBuilder.exportSymbols("ECLAPBEXT-MIB", lapbCountersTable=lapbCountersTable, lapbCountAbortTxs=lapbCountAbortTxs, lapbFlowStateChanges=lapbFlowStateChanges, lapbOperControlField=lapbOperControlField, IfIndexType=IfIndexType, lapbCountUARxs=lapbCountUARxs, lapbCountBadTypeRxs=lapbCountBadTypeRxs, lapbCountRetransmis=lapbCountRetransmis, lapbCountInfoFrameRxs=lapbCountInfoFrameRxs, lapbCountDMsTxs=lapbCountDMsTxs, lapbOperTransmitN1FrameSize=lapbOperTransmitN1FrameSize, lapbCountEntry=lapbCountEntry, lapbCountInfoFrameTxs=lapbCountInfoFrameTxs, lapbCountOverrun=lapbCountOverrun, lapbCountAbortRxs=lapbCountAbortRxs, lapbBandwidthSecs=lapbBandwidthSecs, lapbOperPortId=lapbOperPortId, mibv2=mibv2, lapbCountSABMRxs=lapbCountSABMRxs, lapbOperTransmitKWindowSize=lapbOperTransmitKWindowSize, lapbFlowChangeReason=lapbFlowChangeReason, lapbCountBadCRCTxs=lapbCountBadCRCTxs, lapbCountRNRsTxs=lapbCountRNRsTxs, lapbFlowXidReceived=lapbFlowXidReceived, lapbBandwidthIndex=lapbBandwidthIndex, lapbOperProtocolVersionId=lapbOperProtocolVersionId, lapbFlowFrmrSent=lapbFlowFrmrSent, BandwidthStatus=BandwidthStatus, lapbOperT2AckDelayTimer=lapbOperT2AckDelayTimer, lapbBandwidthTable=lapbBandwidthTable, lapbBandwidthLow=lapbBandwidthLow, lapbOperStationType=lapbOperStationType, lapbCountXIDRxs=lapbCountXIDRxs, lapbBandwidthHigh=lapbBandwidthHigh, lapbCountBadTypeTxs=lapbCountBadTypeTxs, lapbFlowRejInPkts=lapbFlowRejInPkts, lapbOperReceiveN1FrameSize=lapbOperReceiveN1FrameSize, lapbCountRNRsRxs=lapbCountRNRsRxs, lapbOperTable=lapbOperTable, lapbTrapBandwidthClear=lapbTrapBandwidthClear, lapbOperT4IdleTimer=lapbOperT4IdleTimer, lapbCountDISCTxs=lapbCountDISCTxs, lapbOperT3DisconnectTimer=lapbOperT3DisconnectTimer, eicon=eicon, lapbCountRRRxs=lapbCountRRRxs, lapbBandwidthEntry=lapbBandwidthEntry, lapbBandwidthRxInUse=lapbBandwidthRxInUse, lapbOperN2RxmitCount=lapbOperN2RxmitCount, lapbFlowIfIndex=lapbFlowIfIndex, lapbCountUATxs=lapbCountUATxs, lapbFlowRejOutPkts=lapbFlowRejOutPkts, lapbFlowFrmrReceived=lapbFlowFrmrReceived, lapbOperReceiveKWindowSize=lapbOperReceiveKWindowSize, lapbCountPortRef=lapbCountPortRef, lapbTrapBandwidthShortage=lapbTrapBandwidthShortage, lapbFlowCurrentMode=lapbFlowCurrentMode, lapbFlowEntry=lapbFlowEntry, lapbCountUnderrun=lapbCountUnderrun, lapbBandwidthTrapState=lapbBandwidthTrapState, lapbBandwidthNumPeriods=lapbBandwidthNumPeriods, lapbBandwidthTxInUse=lapbBandwidthTxInUse, PositiveInteger=PositiveInteger, management=management, lapbOperIndex=lapbOperIndex, lapbOperEntry=lapbOperEntry, lapbext=lapbext, lapbFlowT1Timeouts=lapbFlowT1Timeouts, lapbCountFRMRRxs=lapbCountFRMRRxs, lapbCountFRMRTxs=lapbCountFRMRTxs, lapbCountDISCRxs=lapbCountDISCRxs, lapbCountDMsRxs=lapbCountDMsRxs, lapbOperT1AckTimer=lapbOperT1AckTimer, lapbFlowTable=lapbFlowTable, lapbCountBadCRCRxs=lapbCountBadCRCRxs, lapbCountRRTxs=lapbCountRRTxs, lapbFlowBusyDefers=lapbFlowBusyDefers, module=module, lapbBandwidthTrapStatus=lapbBandwidthTrapStatus, lapbCountSABMTxs=lapbCountSABMTxs, lapbCountXIDTxs=lapbCountXIDTxs)
