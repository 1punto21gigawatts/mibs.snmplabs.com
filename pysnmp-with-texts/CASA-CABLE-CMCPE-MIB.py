#
# PySNMP MIB module CASA-CABLE-CMCPE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CASA-CABLE-CMCPE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
casa, = mibBuilder.importSymbols("CASA-MIB", "casa")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, IpAddress, ModuleIdentity, NotificationType, Gauge32, Bits, Counter64, TimeTicks, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "NotificationType", "Gauge32", "Bits", "Counter64", "TimeTicks", "Unsigned32", "iso")
TruthValue, MacAddress, DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention", "PhysAddress")
casaCmtsCmCpeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 20858, 10, 12))
if mibBuilder.loadTexts: casaCmtsCmCpeMib.setLastUpdated('200812021453Z')
if mibBuilder.loadTexts: casaCmtsCmCpeMib.setOrganization('Casa Systems Inc')
if mibBuilder.loadTexts: casaCmtsCmCpeMib.setContactInfo('Guangzhou Casa Communications Ltd. No.206 YueHe Bld,Huacui Str. Tianhe Industrial Park Guangzhou China TEL:020 85545002/85577786 ext.212 FAX:020 85545002 ext.230 E-mail: huangxiaole@casachina.com.cn ')
if mibBuilder.loadTexts: casaCmtsCmCpeMib.setDescription('This is the enterprise MIB Module for CASA systems CMTS.')
casaMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 20858, 10))
casaCmtsCmCpeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1))
casaCmtsUSModemTable = MibTable((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 1), )
if mibBuilder.loadTexts: casaCmtsUSModemTable.setStatus('current')
if mibBuilder.loadTexts: casaCmtsUSModemTable.setDescription('Modem count for each upstream channel.')
casaCmtsUSModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casaCmtsUSModemEntry.setStatus('current')
if mibBuilder.loadTexts: casaCmtsUSModemEntry.setDescription('Index of the table is logical uptream channel ifIndex .')
casaCmtsUSActiveModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsUSActiveModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsUSActiveModemCount.setDescription('Active modem count for each upstream channel.')
casaCmtsUSRegisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsUSRegisteredModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsUSRegisteredModemCount.setDescription('Registered modem count for each upstream channel.')
casaCmtsUSTotalModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsUSTotalModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsUSTotalModemCount.setDescription('Modem total for each upstream channel.')
casaCmtsDSModemTable = MibTable((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 2), )
if mibBuilder.loadTexts: casaCmtsDSModemTable.setStatus('current')
if mibBuilder.loadTexts: casaCmtsDSModemTable.setDescription('Modem count for each downstream channel.')
casaCmtsDSModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: casaCmtsDSModemEntry.setStatus('current')
if mibBuilder.loadTexts: casaCmtsDSModemEntry.setDescription('Index of the table is downstream channel ifIndex .')
casaCmtsDSActiveModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsDSActiveModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsDSActiveModemCount.setDescription('Active modem count for each downstream channel.')
casaCmtsDSRegisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsDSRegisteredModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsDSRegisteredModemCount.setDescription('Registered modem count for each downstream channel.')
casaCmtsDSTotalModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsDSTotalModemCount.setStatus('current')
if mibBuilder.loadTexts: casaCmtsDSTotalModemCount.setDescription('Modem total for each downstream channel.')
casaCmtsCmCpeTable = MibTable((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3), )
if mibBuilder.loadTexts: casaCmtsCmCpeTable.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeTable.setDescription('Describes the relation between CPE and CM. ')
casaCmtsCmCpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1), ).setIndexNames((0, "CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeMacAddress"))
if mibBuilder.loadTexts: casaCmtsCmCpeEntry.setReference('Data-Over-Cable Service Interface Specifications (DOCSIS) Radio Frequency Interface Specification (SP-RFI-I04-980724.) docsIfCmtsCmStatusTable, docsIfCmtsServiceTable in DOCS-IF-MIB.my. ')
if mibBuilder.loadTexts: casaCmtsCmCpeEntry.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeEntry.setDescription('The list contains information for a cable modem (CM) or a Customer Premises Equipment (CPE). An entry exist for each cable modem supported by CMTS and each Customer Premises Equipment connected to a cable modem supported by CMTS. ')
casaCmtsCmCpeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: casaCmtsCmCpeMacAddress.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeMacAddress.setDescription('The Mac address to identify a cable modem or a Customer Premises Equipment.')
casaCmtsCmCpeType = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cm", 1), ("cpe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCmCpeType.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeType.setDescription('ndicate this entry is for cable modem or Customer Premises Equipment. The enumerations are: cm(1): cable modem cpe(2): Customer Premises Equipment')
casaCmtsCmCpeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCmCpeIpAddress.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeIpAddress.setDescription('Ip address of the cable modem or Customer Premises Equipment.')
casaCmtsCmCpeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCmCpeIfIndex.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeIfIndex.setDescription('The CMTS cable MAC interface index (ifType of docsCableMaclayer(127)) that cable modem or Customer Premises Equipment connects to. Use casaCmtsCmCpeIfIndex and casaCmtsCmCpeCmtsServiceId to identify an entry in docsIfCmtsServiceTable. ')
casaCmtsCmCpeCmtsServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCmCpeCmtsServiceId.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeCmtsServiceId.setDescription("The cable modem's primary Service ID if the type is cm. The primary Service ID for the CM which the CPE connects if the type is cpe. Use casaCmtsCmCpeIfIndex and casaCmtsCmCpeCmtsServiceId to identify an entry in docsIfCmtsServiceTable.")
casaCmtsCmCpeCmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCmCpeCmStatusIndex.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeCmStatusIndex.setDescription('Pointer to an entry in docsIfCmtsCmStatusTable identifying status of the CM (which the CPE connects to.)')
casaCmtsCmCpeResetNow = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casaCmtsCmCpeResetNow.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmCpeResetNow.setDescription("Setting this object to true(1) causes the device to reset. Reading this object always returns false(2). For casaCmtsCmCpeType value cm(1), CMTS removes the CM from the Station Maintenance List and would cause the CM to reset its interface. For casaCmtsCmCpeType value cpe(2), CMTS removes the CPE's MAC address from the internal address table. It then rediscovers and associates the CPE with the correct CM during the next DHCP lease cycle. By resetting the CPE, the user can replace an existing CPE or change its network interface card (NIC)")
casaCmtsCpeIpNetToPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4), )
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalTable.setDescription('The IP Address Translation table used for mapping from IP addresses to physical addresses. ')
casaCmtsCpeIpNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1), ).setIndexNames((0, "CASA-CABLE-CMCPE-MIB", "casaCmtsCpeIpNetToPhysicalIfIndex"), (0, "CASA-CABLE-CMCPE-MIB", "casaCmtsCpeIpNetToPhysicalNetAddressType"), (0, "CASA-CABLE-CMCPE-MIB", "casaCmtsCpeIpNetToPhysicalNetAddress"))
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalEntry.setDescription("Each entry contains one IP address to `physical' address equivalence.. ")
casaCmtsCpeIpNetToPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalIfIndex.setDescription("The index value that uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex. ")
casaCmtsCpeIpNetToPhysicalNetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalNetAddressType.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalNetAddressType.setDescription('The type of casaCmtsCpeIpNetToPhysicalNetAddress.')
casaCmtsCpeIpNetToPhysicalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1, 3), InetAddress())
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalNetAddress.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalNetAddress.setDescription("The IP Address corresponding to the media-dependent `physical' address. The address type of this object is specified in casaCmtsCpeIpNetToPhysicalAddressType. ")
casaCmtsCpeIpNetToPhysicalCmPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalCmPhysAddress.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalCmPhysAddress.setDescription('The CM MAC address.')
casaCmtsCpeIpNetToPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalType.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCpeIpNetToPhysicalType.setDescription("The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the ipNetToPhysicalTable. That is, it effectively dis- associates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant ipNetToPhysicalType object. The 'dynamic(3)' type indicates that the IP address to physical addresses mapping has been dynamically resolved using e.g., IPv4 ARP or the IPv6 Neighbor Discovery protocol. The 'static(4)' type indicates that the mapping has been statically configured. Both of these refer to entries that provide mappings for other entities addresses. The 'local(5)' type indicates that the mapping is provided for an entity's own interface address. As the entries in this table are typically not persistent when this object is written the entity SHOULD NOT save the change to non-volatile storage. ")
casaCmtsCmReset = MibIdentifier((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 5))
casaCmtsCmResetByIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casaCmtsCmResetByIpAddr.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmResetByIpAddr.setDescription('to reset cable modem by ip address')
casaCmtsCmResetByMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 5, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casaCmtsCmResetByMacAddr.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmResetByMacAddr.setDescription('to reset cable modem by mac address')
casaCmtsCmResetAll = MibScalar((1, 3, 6, 1, 4, 1, 20858, 10, 12, 1, 5, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casaCmtsCmResetAll.setStatus('current')
if mibBuilder.loadTexts: casaCmtsCmResetAll.setDescription(" If set to 'true', all cable modem are reset. Reading this object always returns 'false'.")
casaCmCpeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 20858, 10, 12, 2))
casaCmCpeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20858, 10, 12, 2, 1)).setObjects(("CASA-CABLE-CMCPE-MIB", "casaCmtsUSActiveModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsUSRegisteredModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsUSTotalModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsDSActiveModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsDSRegisteredModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsDSTotalModemCount"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmResetAll"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmResetByMacAddr"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmResetByIpAddr"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeResetNow"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeCmStatusIndex"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeCmtsServiceId"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeIfIndex"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCpeIpNetToPhysicalType"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeType"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCmCpeIpAddress"), ("CASA-CABLE-CMCPE-MIB", "casaCmtsCpeIpNetToPhysicalCmPhysAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    casaCmCpeGroup = casaCmCpeGroup.setStatus('current')
if mibBuilder.loadTexts: casaCmCpeGroup.setDescription('Description.')
casaCmCpeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 20858, 10, 12, 3))
casaCmCpeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 20858, 10, 12, 3, 1)).setObjects(("CASA-CABLE-CMCPE-MIB", "casaCmCpeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    casaCmCpeCompliance = casaCmCpeCompliance.setStatus('current')
if mibBuilder.loadTexts: casaCmCpeCompliance.setDescription('Description.')
mibBuilder.exportSymbols("CASA-CABLE-CMCPE-MIB", casaCmtsCmCpeIfIndex=casaCmtsCmCpeIfIndex, casaCmtsCpeIpNetToPhysicalCmPhysAddress=casaCmtsCpeIpNetToPhysicalCmPhysAddress, casaCmtsCmCpeMib=casaCmtsCmCpeMib, casaCmtsCpeIpNetToPhysicalNetAddress=casaCmtsCpeIpNetToPhysicalNetAddress, casaCmtsUSActiveModemCount=casaCmtsUSActiveModemCount, casaCmtsDSModemTable=casaCmtsDSModemTable, casaCmtsDSActiveModemCount=casaCmtsDSActiveModemCount, casaMgmt=casaMgmt, casaCmtsCmCpeObjects=casaCmtsCmCpeObjects, casaCmtsCpeIpNetToPhysicalIfIndex=casaCmtsCpeIpNetToPhysicalIfIndex, casaCmtsCmCpeMacAddress=casaCmtsCmCpeMacAddress, casaCmtsCmResetByIpAddr=casaCmtsCmResetByIpAddr, casaCmtsUSTotalModemCount=casaCmtsUSTotalModemCount, casaCmtsCmReset=casaCmtsCmReset, casaCmtsCpeIpNetToPhysicalEntry=casaCmtsCpeIpNetToPhysicalEntry, casaCmtsUSModemTable=casaCmtsUSModemTable, casaCmtsDSModemEntry=casaCmtsDSModemEntry, casaCmtsCmCpeCmStatusIndex=casaCmtsCmCpeCmStatusIndex, casaCmtsCpeIpNetToPhysicalTable=casaCmtsCpeIpNetToPhysicalTable, PYSNMP_MODULE_ID=casaCmtsCmCpeMib, casaCmCpeCompliances=casaCmCpeCompliances, casaCmCpeCompliance=casaCmCpeCompliance, casaCmtsCmCpeResetNow=casaCmtsCmCpeResetNow, casaCmtsUSModemEntry=casaCmtsUSModemEntry, casaCmCpeGroup=casaCmCpeGroup, casaCmtsCpeIpNetToPhysicalNetAddressType=casaCmtsCpeIpNetToPhysicalNetAddressType, casaCmtsCmResetByMacAddr=casaCmtsCmResetByMacAddr, casaCmtsCmResetAll=casaCmtsCmResetAll, casaCmCpeGroups=casaCmCpeGroups, casaCmtsDSTotalModemCount=casaCmtsDSTotalModemCount, casaCmtsCmCpeEntry=casaCmtsCmCpeEntry, casaCmtsCmCpeCmtsServiceId=casaCmtsCmCpeCmtsServiceId, casaCmtsCmCpeType=casaCmtsCmCpeType, casaCmtsDSRegisteredModemCount=casaCmtsDSRegisteredModemCount, casaCmtsCmCpeTable=casaCmtsCmCpeTable, casaCmtsCpeIpNetToPhysicalType=casaCmtsCpeIpNetToPhysicalType, casaCmtsUSRegisteredModemCount=casaCmtsUSRegisteredModemCount, casaCmtsCmCpeIpAddress=casaCmtsCmCpeIpAddress)
