#
# PySNMP MIB module HUAWEI-ISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
mlsr, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "mlsr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, ObjectIdentity, ModuleIdentity, iso, TimeTicks, Unsigned32, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "iso", "TimeTicks", "Unsigned32", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Integer32", "IpAddress")
TimeStamp, DateAndTime, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DateAndTime", "DisplayString", "TextualConvention", "RowStatus")
hwIsdnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9))
if mibBuilder.loadTexts: hwIsdnMib.setLastUpdated('200112200000Z')
if mibBuilder.loadTexts: hwIsdnMib.setOrganization('Huawei Technologies Co., Ltd')
if mibBuilder.loadTexts: hwIsdnMib.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085')
if mibBuilder.loadTexts: hwIsdnMib.setDescription('This file describes the huawei mib implementation of ISDN')
hwIsdnMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1))
isdnChannelB = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1))
hwChanbIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1), )
if mibBuilder.loadTexts: hwChanbIsdnTable.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnTable.setDescription("This table is used to describe the router's B Channels infomation")
hwChanbIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-ISDN-MIB", "hwChanbIsdnIf"))
if mibBuilder.loadTexts: hwChanbIsdnEntry.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnEntry.setDescription(' A single B channels')
hwChanbIsdnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnIf.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnIf.setDescription(' this object is used to describe the virtual interface value associated with one neighbor. ')
hwChanbIsdnPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("callOut", 1), ("callIn", 2), ("callBidirection", 3))).clone('callBidirection')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnPermit.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnPermit.setDescription(' this object is used to describe the call permissions.')
hwChanbIsdnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnAddr.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnAddr.setDescription('this object is used to descirbe the call address by which we call one nieghbor.')
hwChanbIsdnCallerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallerAddr.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallerAddr.setDescription('this object is used to describe the callser address which will be known by B channels.')
hwChanbIsdnCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nocall", 0), ("call", 1), ("answer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallType.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallType.setDescription('this object is used to describe that whether it is an incoming call or an outging call.')
hwChanbIsdnInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("unrestrDigit", 3), ("unrestrDigit56", 4), ("restrictDigit", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("swithchedPacket", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnInfoType.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnInfoType.setDescription('this object is used to describe the information type on the call')
hwChanbIsdnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("connecting", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnState.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnState.setDescription('this object is used to manage the call by NMS')
hwChanbIsdnCallFreeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallFreeReason.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallFreeReason.setDescription('this object is used to describe the reason why last call is cleard')
hwChanbIsdnCallFreeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallFreeCode.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallFreeCode.setDescription('this object is used to describe the reason code for the last call down.')
hwChanbIsdnCallAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallAccept.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallAccept.setDescription('this object is used to describe the accepted call number from the B channels')
hwChanbIsdnCallReject = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallReject.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallReject.setDescription('this object is used to describe the refused call number from B channels .')
hwChanbIsdnCallSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallSuccess.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallSuccess.setDescription('this object is used to describe the successful call number to B channels after system restart.')
hwChanbIsdnCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnCallFailure.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCallFailure.setDescription('this object is used to describe the failing call number to B channels after system restart')
hwChanbIsdnMaxKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 14), Integer32().clone(2147483647)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnMaxKeepTime.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnMaxKeepTime.setDescription('This object is used to descirbe the maximum duration time in milliseconds.')
hwChanbIsdnLastKeepTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 15), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnLastKeepTime.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnLastKeepTime.setDescription('this object is used to describe the last call duration time in milliseconds')
hwChanbIsdnLastCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 1, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChanbIsdnLastCallTime.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnLastCallTime.setDescription('this object is used to describe the sysUpTime after last call attempt was made.')
hwChanbTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwChanbTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwChanbTrapEnable.setDescription('This object is used to control sending trap')
isdnQ931 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2))
hwQ931IsdnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 1))
hwQ931CallSetupTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQ931CallSetupTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwQ931CallSetupTrapEnable.setDescription('This object is used to control sending callsetup trap.')
hwQ931CallClearTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQ931CallClearTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwQ931CallClearTrapEnable.setDescription('This object is used to control sending callclear trap')
hwQ931IsdnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2), )
if mibBuilder.loadTexts: hwQ931IsdnTable.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnTable.setDescription('This table describes B channel information for the use of Q931')
hwQ931IsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-ISDN-MIB", "hwQ931IsdnOpIndex"))
if mibBuilder.loadTexts: hwQ931IsdnEntry.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnEntry.setDescription('A B channel entry in the Q931.')
hwQ931IsdnOpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwQ931IsdnOpIndex.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnOpIndex.setDescription('Index of the B ISDN channel interface managed by Q93')
hwQ931IsdnLastCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnLastCalled.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnLastCalled.setDescription('This object describes the called ISDN number. When an outgoing call is established successfully, the value of this node is the call number of this device, otherwise the value is null string')
hwQ931IsdnLastCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnLastCalling.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnLastCalling.setDescription('This object describes the calling ISDN number. When an incoming call is established successfully, the value of this node is the call number of peer device, otherwise the value is null string.')
hwQ931IsdnLastCauseDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("normCallClr", 2), ("noRouteToTransNet", 3), ("noRouteToDest", 4), ("switchEquCongest", 5), ("netOutofOrder", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnLastCauseDisc.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnLastCauseDisc.setDescription('This object describes last cause of disconnection. In hwQ931IsdnCallClear trap, the value of this node is the reason of disconnection, this node is only valid for hwQ931IsdnCallClear trap, the value of this node is unknown in other situation. unknown: unknown error. normCallClr: normal call clearing. noRouteToTransNet: no route to specified transit network. noRouteToDest: no route to destination. switchEquCongest: switching equipment congestion. netOutofOrder: network out of order.')
hwQ931IsdnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnCallDirection.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnCallDirection.setDescription('This object describes the direction of the current call.')
hwQ931IsdnCallTimeOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnCallTimeOpen.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnCallTimeOpen.setDescription('This object describes the start time of this call. start time is the time of an existent call that has just been established.')
hwQ931IsdnCallTimeClose = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 2, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQ931IsdnCallTimeClose.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnCallTimeClose.setDescription('This object describes the close time of this call. This node is only vaild for hwQ931IsdnCallClear trap. In other situation the value of this node is zero. In hwQ931IsdnCallClear trap, this node provides the time of an existent call that the call has just been cleared.')
hwIsdnLapd = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3))
hwLapdIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1), )
if mibBuilder.loadTexts: hwLapdIsdnTable.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnTable.setDescription('This table is used to describe the config of ISDN D channel.')
hwLapdIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-ISDN-MIB", "hwLapdIsdnIf"))
if mibBuilder.loadTexts: hwLapdIsdnEntry.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnEntry.setDescription('ISDN D channel config')
hwLapdIsdnIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLapdIsdnIf.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnIf.setDescription('This object is used to describe the D channel interface value associated with one neighbor.')
hwLapdIsdnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dss1", 1), ("qsig", 2), ("etsi", 3), ("ess5", 4), ("ansi", 5), ("ni2", 6), ("ntt", 7), ("att", 8), ("ni", 9))).clone('dss1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLapdIsdnProtocol.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnProtocol.setDescription('This object is used to describe the protocol D channel applied. For E1, the protocol may be dss1, qsig, etsi. For T1, the protocol may be ess5, ansi, att, dss1, etsi, ni2, ntt, qsig. For BRI, the protocol may be ansi, dss1, etsi, ni, ntt.')
hwLapdIsdnIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userSide", 1), ("networkSide", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLapdIsdnIfMode.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnIfMode.setDescription('The physical interface mode. For TE mode, the value of this object is userSide. For NT mode, the value of this object is networkSide.')
hwLapdIsdnLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("l1Active", 2), ("l2Active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLapdIsdnLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnLinkStatus.setDescription('The operational status of this interface: inactive all layers are inactive. l1Active layer 1 is activated, layer 2 datalink not established. l2Active layer 1 is activated, layer 2 datalink established. ')
hwLapdIsdnControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 2))
hwLapdStatusTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLapdStatusTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwLapdStatusTrapEnable.setDescription('This object is used to control sending hwLapdIsdnStatusChange trap.')
hwIsdnMibTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 2))
hwChanbIsdnCall = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 2, 1)).setObjects(("HUAWEI-ISDN-MIB", "hwChanbIsdnIf"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnAddr"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnCallType"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnCallerAddr"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnInfoType"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnLastKeepTime"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnCallFreeReason"), ("HUAWEI-ISDN-MIB", "hwChanbIsdnCallFreeCode"))
if mibBuilder.loadTexts: hwChanbIsdnCall.setStatus('current')
if mibBuilder.loadTexts: hwChanbIsdnCall.setDescription('When one call is setup ,cleard or determined , the trap is sent to NMS')
hwQ931IsdnCallSetup = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 2, 2)).setObjects(("HUAWEI-ISDN-MIB", "hwQ931IsdnOpIndex"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnLastCalled"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnLastCalling"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnCallDirection"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnCallTimeOpen"))
if mibBuilder.loadTexts: hwQ931IsdnCallSetup.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnCallSetup.setDescription('This trap/inform is sent to the manager whenever a call is established successfully.')
hwQ931IsdnCallClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 2, 3)).setObjects(("HUAWEI-ISDN-MIB", "hwQ931IsdnOpIndex"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnLastCalled"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnLastCalling"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnLastCauseDisc"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnCallDirection"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnCallTimeOpen"), ("HUAWEI-ISDN-MIB", "hwQ931IsdnCallTimeClose"))
if mibBuilder.loadTexts: hwQ931IsdnCallClear.setStatus('current')
if mibBuilder.loadTexts: hwQ931IsdnCallClear.setDescription('This trap/inform is sent to the manager under the following conditions: - an existent call is normally cleared. - an existent call is determined to have ultimately failed, and has been cleared. - the existent call is cleared when the BRI/PRI port is down. - the existent call is cleared when the dialer rule is down.')
hwLapdIsdnStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 2, 33, 9, 2, 4)).setObjects(("HUAWEI-ISDN-MIB", "hwLapdIsdnIf"), ("HUAWEI-ISDN-MIB", "hwLapdIsdnLinkStatus"))
if mibBuilder.loadTexts: hwLapdIsdnStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwLapdIsdnStatusChange.setDescription('This trap/inform is sent to the manager whenever the D-channel of an interface changes state.')
mibBuilder.exportSymbols("HUAWEI-ISDN-MIB", isdnChannelB=isdnChannelB, hwIsdnMibObjects=hwIsdnMibObjects, hwQ931IsdnCallTimeOpen=hwQ931IsdnCallTimeOpen, hwQ931IsdnCallSetup=hwQ931IsdnCallSetup, hwChanbIsdnLastKeepTime=hwChanbIsdnLastKeepTime, hwChanbIsdnCallFailure=hwChanbIsdnCallFailure, hwLapdIsdnControl=hwLapdIsdnControl, hwChanbIsdnCallSuccess=hwChanbIsdnCallSuccess, hwChanbIsdnCallFreeCode=hwChanbIsdnCallFreeCode, hwChanbIsdnCallerAddr=hwChanbIsdnCallerAddr, hwChanbIsdnMaxKeepTime=hwChanbIsdnMaxKeepTime, hwQ931CallSetupTrapEnable=hwQ931CallSetupTrapEnable, hwQ931IsdnControl=hwQ931IsdnControl, hwQ931IsdnCallDirection=hwQ931IsdnCallDirection, hwLapdIsdnTable=hwLapdIsdnTable, hwLapdIsdnProtocol=hwLapdIsdnProtocol, hwQ931IsdnTable=hwQ931IsdnTable, hwChanbIsdnCall=hwChanbIsdnCall, hwLapdIsdnIf=hwLapdIsdnIf, hwChanbIsdnIf=hwChanbIsdnIf, hwChanbIsdnCallType=hwChanbIsdnCallType, hwChanbIsdnInfoType=hwChanbIsdnInfoType, hwChanbIsdnEntry=hwChanbIsdnEntry, hwChanbTrapEnable=hwChanbTrapEnable, hwIsdnMib=hwIsdnMib, hwChanbIsdnPermit=hwChanbIsdnPermit, hwLapdIsdnLinkStatus=hwLapdIsdnLinkStatus, hwQ931IsdnEntry=hwQ931IsdnEntry, hwQ931IsdnLastCauseDisc=hwQ931IsdnLastCauseDisc, hwChanbIsdnLastCallTime=hwChanbIsdnLastCallTime, hwQ931IsdnOpIndex=hwQ931IsdnOpIndex, hwQ931IsdnLastCalling=hwQ931IsdnLastCalling, hwIsdnLapd=hwIsdnLapd, hwLapdIsdnEntry=hwLapdIsdnEntry, hwIsdnMibTraps=hwIsdnMibTraps, hwQ931IsdnCallClear=hwQ931IsdnCallClear, hwLapdIsdnIfMode=hwLapdIsdnIfMode, isdnQ931=isdnQ931, hwChanbIsdnCallAccept=hwChanbIsdnCallAccept, hwChanbIsdnCallReject=hwChanbIsdnCallReject, hwQ931CallClearTrapEnable=hwQ931CallClearTrapEnable, hwQ931IsdnLastCalled=hwQ931IsdnLastCalled, hwLapdIsdnStatusChange=hwLapdIsdnStatusChange, hwChanbIsdnTable=hwChanbIsdnTable, hwChanbIsdnState=hwChanbIsdnState, hwQ931IsdnCallTimeClose=hwQ931IsdnCallTimeClose, hwLapdStatusTrapEnable=hwLapdStatusTrapEnable, hwChanbIsdnCallFreeReason=hwChanbIsdnCallFreeReason, hwChanbIsdnAddr=hwChanbIsdnAddr, PYSNMP_MODULE_ID=hwIsdnMib)
