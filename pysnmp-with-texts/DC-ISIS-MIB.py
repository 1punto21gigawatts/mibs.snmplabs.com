#
# PySNMP MIB module DC-ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DC-ISIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
IfOperStatus, IgpShortcutMetricType, NumericIndex, EntityIndexOrZero, AuthUserDataString = mibBuilder.importSymbols("DC-MASTER-TC", "IfOperStatus", "IgpShortcutMetricType", "NumericIndex", "EntityIndexOrZero", "AuthUserDataString")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressIPv4, InetAddressType, InetAddress, InetAddressPrefixLength, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressType", "InetAddress", "InetAddressPrefixLength", "InetAddressIPv6")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter64, Integer32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, TimeTicks, ObjectIdentity, Counter32, ModuleIdentity, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Integer32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "TimeTicks", "ObjectIdentity", "Counter32", "ModuleIdentity", "IpAddress", "NotificationType")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
dcIsisMib = ModuleIdentity((1, 2, 826, 0, 1, 1578918, 5, 63, 1))
dcIsisMib.setRevisions(('2014-07-03 00:00', '2011-07-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dcIsisMib.setRevisionsDescriptions(('PROD00216772 - Set isisSysLspFullSuppress to None and isisSysLspFullSetDBOL to False in case of 256 LSP over spill', 'Change default value of isisSysCalcSoonAfterCircChange from false to true',))
if mibBuilder.loadTexts: dcIsisMib.setLastUpdated('201407030000Z')
if mibBuilder.loadTexts: dcIsisMib.setOrganization('Data Connection Ltd.')
if mibBuilder.loadTexts: dcIsisMib.setContactInfo('Postal: Data Connection Ltd. 100 Church Street Enfield Middlesex EN2 6BQ United Kingdom Tel: +44 20 83661177 E-mail: dcisis@dataconnection.com')
if mibBuilder.loadTexts: dcIsisMib.setDescription('The MIB module for management of the DC-ISIS product. This is closely based on the draft standard MIB draft-ietf-isis-wg-mib-16.')
isisObjects = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1))
isisNotifications = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2))
isisConformance = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3))
isisSystem = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1))
isisSysLevel = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2))
isisCirc = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3))
isisCircLevelValues = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4))
isisCounters = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5))
isisISAdj = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6))
isisReachAddr = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 7))
isisIPReachAddr = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8))
isisLSPDataBase = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9))
isisNotification = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10))
isisPmObjects = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11))
isisSdObjects = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12))
class OSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, SNPA, or Network Entity Title'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class SystemID(TextualConvention, OctetString):
    description = 'A system ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class LinkStatePDUID(TextualConvention, OctetString):
    description = 'A Link State PDU Identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class AdminState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row. Values match those in RFC 2863.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class LSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for LSP size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 16000)

class LevelState(TextualConvention, Integer32):
    description = 'States of the IS-IS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3), ("overloaded", 4))

class SupportedProtocol(TextualConvention, Integer32):
    description = 'Types of network protocol supported by Integrated IS-IS. The values for ISO8473 and IP are those registered for these protocols in ISO TR9577.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 142, 204))
    namedValues = NamedValues(("iso8473", 129), ("ipV6", 142), ("ip", 204))

class DefaultMetric(TextualConvention, Integer32):
    description = "Integer sub-range for default metric for single hop. ISO 10589 provides for 4 types of metric. Only the 'default' metric is used in practice."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class WideMetric(TextualConvention, Unsigned32):
    description = 'Wide Metric for IS Neighbors. ISO 10589 provides a 6 bit metric. Traffic Engineering extensions provide 24 bit metrics.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 16777215)

class FullMetric(TextualConvention, Unsigned32):
    description = 'Full Metric for IP Routes. Traffic Engineering extensions provide 32 bit metrics.'
    status = 'current'

class MetricType(TextualConvention, Integer32):
    description = 'Is this an Internal or External Metric?'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class MetricStyle(TextualConvention, Integer32):
    description = 'Do we use 1195 style Metrics or wide metrics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("narrow", 1), ("wide", 2), ("both", 3))

class ISLevel(TextualConvention, Integer32):
    description = 'Identifies a level.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("area", 1), ("domain", 2))

class IsisAdjLevel(TextualConvention, Integer32):
    description = 'Identifies one or more levels.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("reserved", 0), ("level1", 1), ("level2", 2), ("level1and2", 3))

class IsisPDUHeader(TextualConvention, OctetString):
    description = 'A block to contain the header from a PDU.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class CircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 7), )
class ISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for IS-IS priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class Unsigned16TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 16 Bits. Note that the ASN.1 BER encoding may still require 24 Bits for some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Unsigned8TC(TextualConvention, Unsigned32):
    description = 'An Unsigned32 further restricted to 8 Bits. Note that the ASN.1 BER encoding may still require 16 Bits for some values.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class IsisAdminStatus(TextualConvention, Integer32):
    description = 'The desired administrative state of a DC-ISIS entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adminStatusUp", 1), ("adminStatusDown", 2))

class IsisOperStatus(TextualConvention, Integer32):
    description = 'The current operational state of a DC-ISIS entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operStatusUp", 1), ("operStatusDown", 2), ("operStatusGoingUp", 3), ("operStatusGoingDown", 4), ("operStatusActFailed", 5))

class IsisMjStatus(TextualConvention, Integer32):
    description = 'The status of a Master Join.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("mjNotJoined", 1), ("mjSentAddJoin", 2), ("mjSentRegister", 3), ("mjJoinActive", 4), ("mjSentDelJoin", 5), ("mjSentUnregister", 6), ("mjJoinGone", 7), ("mjFailedToRegister", 8), ("mjFailingOver", 9), ("mjFailed", 10))

class IsisSjStatus(TextualConvention, Integer32):
    description = 'The status of a Slave Join.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("sjNotJoined", 1), ("sjJoined", 2), ("sjJoinActive", 3), ("sjJoinUnreg", 4), ("sjJoinGone", 5), ("sjFailingOver", 6), ("sjFailed", 7))

class IsisPmInterfaceId(TextualConvention, Integer32):
    description = 'The type of interface to which a PM join applies.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ifInterfaceInfo", 1), ("ifRtProtoInput", 2), ("ifCSPF", 3), ("ifSDC", 4))

class IsisSdInterfaceId(TextualConvention, Integer32):
    description = 'The type of interface to which an SD join applies.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ifDataLink", 1), ("ifSubnetDependent", 2), ("ifBidirectionalForwarding", 3))

class IsisSdEntityType(TextualConvention, Integer32):
    description = 'The type of entity to which an SDC Subnetwork Dependent join applies.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ifProtocolManager", 1), ("ifPDUInjectionTool", 2))

class IsisAddrType(TextualConvention, Integer32):
    description = 'The type of address used on an RPI join.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("ipv4", 1), ("ipv6", 2), ("nsap", 3), ("ipx", 4))

class IsisAddrTypeBits(TextualConvention, Bits):
    description = 'The type of address supported.'
    status = 'current'
    namedValues = NamedValues(("none", 0), ("ipv4", 1), ("ipv6", 2))

class IsisSysRestartType(TextualConvention, Integer32):
    description = 'The type of restart procedures to follow when DC-ISIS activates.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("start", 1), ("restart", 2))

isisSysTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1), )
if mibBuilder.loadTexts: isisSysTable.setStatus('current')
if mibBuilder.loadTexts: isisSysTable.setDescription('The set of instances of the Integrated IS-IS protocol existing on the system.')
isisSysEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"))
if mibBuilder.loadTexts: isisSysEntry.setReference('{ISIS.poi cLNSISISBasic-P (1)}')
if mibBuilder.loadTexts: isisSysEntry.setStatus('current')
if mibBuilder.loadTexts: isisSysEntry.setDescription('Each row defines information specific to a single instance of the IS-IS protocol existing on the system.')
isisSysInstance = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: isisSysInstance.setStatus('current')
if mibBuilder.loadTexts: isisSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behavior.')
isisSysVersion = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("one", 1))).clone('one')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysVersion.setReference('{ISIS.aoi version (1)}')
if mibBuilder.loadTexts: isisSysVersion.setStatus('current')
if mibBuilder.loadTexts: isisSysVersion.setDescription('The version number of the IS-IS protocol that is implemented.')
isisSysType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("level1IS", 1), ("level2IS", 2), ("level1L2IS", 3))).clone('level1L2IS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysType.setReference('{ISIS.aoi iSType (2)}')
if mibBuilder.loadTexts: isisSysType.setStatus('current')
if mibBuilder.loadTexts: isisSysType.setDescription('At which levels is the Intermediate System running? This object follows the replaceOnlyWhileDisabled behavior.')
isisSysID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 4), SystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysID.setReference('{ISIS.aoi systemId (119)}')
if mibBuilder.loadTexts: isisSysID.setStatus('current')
if mibBuilder.loadTexts: isisSysID.setDescription('The ID for this instance of the Integrated IS-IS protocol. This value is appended to each of the area addresses to form the Network Entity Titles. The derivation of a value for this object is implementation-specific. Some implementations may automatically assign values and not permit an SNMP write, while others may require the value to be set manually. For the DC-ISIS implementation, this field is set through the MIB. This object follows the replaceOnlyWhileDisabled behavior.')
isisSysMaxPathSplits = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxPathSplits.setReference('{ISIS.aoi maximumPathSplits (3)}')
if mibBuilder.loadTexts: isisSysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value which it is permitted to split between. Note that, when IGP shortcut interfaces are in use, this maximum applies individually to IGP shortcut paths and non-IGP shortcut paths. That is, there may be a total of 2 * isisSysMaxPathSplits paths for a single route. This object follows the replaceOnlyWhileDisabled behavior.')
isisSysMaxLSPGenInt = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65235)).clone(900)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setReference('{ISIS.aoi maximumLSPGenerationInterval (6)}')
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs by this instance of the protocol. This object follows the resettingTimer behavior. The value must be greater than any value configured for isisSysLevelMinLSPGenInt, and should be at least 300 seconds less than isisSysMaxAge. Note that this value is specified in seconds whereas isisSysLevelMinLSPGenInt is specified in milliseconds.')
isisSysPollESHelloRate = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 7), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysPollESHelloRate.setReference('{ISIS.aoi pollESHelloRate (13)}')
if mibBuilder.loadTexts: isisSysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: isisSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration.')
isisSysWaitTime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 8), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysWaitTime.setReference('{ISIS.aoi waitingTime (15)}')
if mibBuilder.loadTexts: isisSysWaitTime.setStatus('current')
if mibBuilder.loadTexts: isisSysWaitTime.setDescription('Number of seconds to delay in waiting state before entering on state. This object follows the resettingTimer behavior.')
isisSysAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 9), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysAdminState.setStatus('current')
if mibBuilder.loadTexts: isisSysAdminState.setDescription("The administrative state of this instance of the Integrated IS-IS protocol. Setting this object to the value 'on' when its current value is 'off' enables operation of this instance of the Integrated IS-IS protocol.")
isisSysL2toL1Leaking = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysL2toL1Leaking.setStatus('current')
if mibBuilder.loadTexts: isisSysL2toL1Leaking.setDescription('If true, allow the router to leak L2 routes into L1.')
isisSysMaxAge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 11), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(350, 65535)).clone(1200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxAge.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxAge.setDescription('Value to place in RemainingLifeTime field of the LSPs we generate. This should be at least 300 seconds greater than isisSysMaxLSPGenInt.')
isisSysReceiveLSPBufferSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 12), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1492, 16000)).clone(1492)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysReceiveLSPBufferSize.setStatus('current')
if mibBuilder.loadTexts: isisSysReceiveLSPBufferSize.setDescription('Size of the largest Buffer we are designed or configured to store. This should be at least as big as the maximum isisSysOrigLSPBuffSize supported by the system. If resources allow, we will store and flood LSPs larger than isisSysReceiveLSPBufferSize, as this can help avoid problems in networks with different values for isisSysOrigLSPBuffSize.')
isisSysExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysExistState.setStatus('current')
if mibBuilder.loadTexts: isisSysExistState.setDescription("The state of the IS-IS router. Turning this to state 'destroy' forces the router to forget all the current configuration. Setting the state to 'notInService' stops protocol processing, but retains the configuration.")
isisSysOperStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 14), IsisOperStatus().clone('operStatusDown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysOperStatus.setStatus('current')
if mibBuilder.loadTexts: isisSysOperStatus.setDescription('The current operational status of this instance of the Protocol Manager component of DC-ISIS. Note that DC-ISIS can only activate if there is at least one active entry in the isisManAreaAddrTable.')
isisSysAllowAutoI3Config = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysAllowAutoI3Config.setStatus('current')
if mibBuilder.loadTexts: isisSysAllowAutoI3Config.setDescription("If 'true' then add IP addresses received from the I3 stub to the isisCircIPAddrTable with admin state 'on'. If 'false' then add them with admin state 'off'. This field follows the replaceOnlyWhileDisabled behavior.")
isisSysCalcMaxDelay = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 16), Unsigned32().clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcMaxDelay.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcMaxDelay.setDescription('The maximum delay before the Routing Table is recalculated following a change to the Link State Database. (Recalculation is delayed to reduce the frequency of recalculations of the Routing Table). This parameter has units of milliseconds. A value of 0 indicates that a routing calculation will immediately follow an update to the database.')
isisSysCalcThrshUpdStart = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcThrshUpdStart.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcThrshUpdStart.setDescription('This parameter can be used to override the routing calculation delay indicated by the isisSysCalcMaxDelay parameter when the number of updates to the Link State Database reaches a threshold value. This parameter specifies the threshold number of updates that can be made to the Link State Database such that any subsequent update to the database causes a full routing calculation to start immediately. - 0 indicates that a routing calculation will immediately follow an update to the database. - 0xFFFFFFFF indicates that this threshold is infinite, and hence the timing of a routing calculation is determined solely by the configured calculation delay.')
isisSysCalcThrshUpdRestart = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcThrshUpdRestart.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcThrshUpdRestart.setDescription('This parameter can be used to interrupt a full routing calculation when the number of pending updates to the Link State Database has reached a threshold value. This parameter specifies the threshold number of updates that can be made to the Link State Database such that any subsequent update to the database causes the current routing calculation to be interrupted, and a new calculation to start using an up to date Link State Database. - 0 indicates that an update to the Link State Database will cause any current routing calculation to be interrupted and a new one to start. - 0xFFFFFFFF indicates that this threshold is infinite, and hence no number of pending updates to the database will cause a routing calculation to be interrupted.')
isisSysCalcThrshRestartLimit = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcThrshRestartLimit.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcThrshRestartLimit.setDescription('This parameter limits the number of consecutive times a routing calculation can be interrupted by new updates. This guarantees that the routing calculation will actually complete. - 1 indicates that once a calculation has been interrupted once, it will not be interrupted again. - 0xFFFFFFFF indicates that the calculation can always be interrupted.')
isisSysCalcPauseFreq = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcPauseFreq.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcPauseFreq.setDescription('This value determines how regularly a Routing Calculation is paused. It is measured in points. The points scale roughly maps to a time scale, so that the larger this value is, the longer the Routing Calculation runs before pausing. See the DC-ISIS Configuration and Management Interface Specification for more information on how to set this parameter. - 0 indicates that the routing calculation is paused after every calculation step. - 0xFFFFFFFF indicates that the Routing Calculation is never paused.')
isisSysCheckChecksums = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 21), Unsigned32().clone(900)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCheckChecksums.setStatus('current')
if mibBuilder.loadTexts: isisSysCheckChecksums.setDescription('This value determines how often the checksums of LSPs in the Link State Database are checked. If 0, no checksums in the database are checked.')
isisSysZeroAgeLifetime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 22), Integer32().clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysZeroAgeLifetime.setStatus('current')
if mibBuilder.loadTexts: isisSysZeroAgeLifetime.setDescription('This is the minimum amount of time in seconds for which the header of an expired LSP shall be retained after it has been flooded with zero Remaining Lifetime. All that is required is that the header be retained until the zero Remaining Lifetime LSP has been safely propagated to all the neighbors.')
isisSysNumUpdPending = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysNumUpdPending.setStatus('current')
if mibBuilder.loadTexts: isisSysNumUpdPending.setDescription('The number of updates that are pending addition to the Link State Database.')
isisSysNumUpdMerged = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysNumUpdMerged.setStatus('current')
if mibBuilder.loadTexts: isisSysNumUpdMerged.setDescription('The number of updates that have been merged into the Link State Database since the last routing calculation.')
isisSysNumCksumsPending = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysNumCksumsPending.setStatus('current')
if mibBuilder.loadTexts: isisSysNumCksumsPending.setDescription('The number of LSPs in the Link State Database which are now due to have their checksum checked.')
isisSysTEMetricPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysTEMetricPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysTEMetricPcntge.setDescription('The Traffic Engineering metric is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of the TE metric that causes a new LSP to be originated.')
isisSysMaxBwidthPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxBwidthPcntge.setDescription('The maximum bandwidth on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of maximum bandwidth that causes a new LSP to be originated.')
isisSysMaxResBwidthPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxResBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxResBwidthPcntge.setDescription('The maximum reservable bandwidth on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of maximum reservable bandwidth that causes a new LSP to be originated.')
isisSysUnresBwidthPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysUnresBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysUnresBwidthPcntge.setDescription('The unreserved bandwidth on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of unreserved bandwidth that causes a new LSP to be originated.')
isisSysMaxLSPBwidthPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxLSPBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxLSPBwidthPcntge.setDescription('The maximum LSP bandwidth for the various switching descriptors on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of maximum LSP bandwidth that causes a new LSP to be originated.')
isisSysMinLSPBwidthPcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMinLSPBwidthPcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysMinLSPBwidthPcntge.setDescription('The minimum LSP bandwidth for the various switching descriptors on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of minmimum LSP bandwidth that causes a new LSP to be originated.')
isisSysMTUSizePcntge = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMTUSizePcntge.setStatus('current')
if mibBuilder.loadTexts: isisSysMTUSizePcntge.setDescription('The Maximum Transmission Unit size for the various switching descriptors on an interface is updated in real-time by the I3 Stub. In order to increase performance and reduce network traffic, this parameter determines the minimal percentage change of the Maximum Transmission Unit that causes a new LSP to be originated.')
isisSysTERouterID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 33), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysTERouterID.setStatus('current')
if mibBuilder.loadTexts: isisSysTERouterID.setDescription("The Local IPv4 TE Router ID. This is a single stable IPv4 address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces. This object must be set if isisSysLevelTEEnabled is 'true' at either level, but is otherwise ignored.")
isisSysIPv6TERouterID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 34), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysIPv6TERouterID.setStatus('current')
if mibBuilder.loadTexts: isisSysIPv6TERouterID.setDescription("The Local IPv6 TE Router ID. This is a single stable IPv6 global address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces. This object must be set if isisSysLevelIPv6TEEnabled is 'true' at level 1, but is otherwise ignored.")
isisSysMaxExternalRoutes = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 35), Unsigned32().clone(4294967295)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxExternalRoutes.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxExternalRoutes.setDescription('The maximum number of static routes and routes redistributed from other protocols that DC-ISIS will accept. The action that DC-ISIS will take when the maximum is exceeded is controlled by isisSysMaxExternalRoutesAction. 0xFFFFFFFF is a special value indicating that the threshold is infinite.')
isisSysMaxExternalRoutesAction = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("suppressExternal", 2))).clone('suppressExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxExternalRoutesAction.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxExternalRoutesAction.setDescription("The action that DC-ISIS will take when the number of external routes exceeds isisSysMaxExternalRoutes. If set to 'log', DC-ISIS will alert the administrator by logging that the limit has been exceeded. If set to 'suppressExternal', DC-ISIS will remove all external routes from the local LSP (at all active levels) in addition to logging the problem. In both cases, the administrator is responsible for correcting the configuration in each Address Family Manager (for example, DC-RTM), to reduce the number of redistributed external routes. In the 'suppressExternal' case, the Address Family Manager is responsible for resynchronizing the set of routes with DC-ISIS.")
isisSysLspFullSuppress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("none", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLspFullSuppress.setStatus('current')
if mibBuilder.loadTexts: isisSysLspFullSuppress.setDescription("The set of routes (if any) that will be removed from the local LSP by DC-ISIS when the local LSP becomes full at either level. When set to 'external', all static routes and routes redistributed from other protocols will be removed from the local LSP (at all active levels) when the local LSP is full. If set to 'none', DC-ISIS will be unable to accept any additional configuration that may increase the size of the local LSP. The system administrator should modify the system configuration to reduce the local LSP size - for example, by reducing the number of addresses redistributed from other routing protocols, or by deleting circuit configuration. Once this has been done, if isisSysLspFullSuppress is set to 'external', the Address Family Manager is responsible for resynchronizing the set of routes with DC-ISIS.")
isisSysLspFullSetDBOL = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLspFullSetDBOL.setStatus('current')
if mibBuilder.loadTexts: isisSysLspFullSetDBOL.setDescription("If set to 'true', DC-ISIS will set the database overload flag in the local LSP (at all active levels) when the local LSP becomes full (at either level). The administrator can clear the database overload flag for a level by setting isisSysLevelSetOverload to 'false' for that level.")
isisSysRestartHelpPeer = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 39), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRestartHelpPeer.setStatus('current')
if mibBuilder.loadTexts: isisSysRestartHelpPeer.setDescription('Indicates whether DC-ISIS implements the procedures defined in the IS-IS restart RFC (3847) for helping a peer to restart. Note that this object has no effect on the local restart behavior, and so may be set independently of isisSysRestartActivationType and isisSysRestartAutoResetType.')
isisSysRestartActivationType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 40), IsisSysRestartType().clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRestartActivationType.setStatus('current')
if mibBuilder.loadTexts: isisSysRestartActivationType.setDescription("This object is only used when DC-ISIS is manually activated or deactivated (in other words, enters or leaves the state with row status 'active' and admin status 'on'), and indicates which restart procedures (if any) are followed. During the activation period, DC-ISIS will use the value that was configured at the start of activation. The value may be changed at any time, but the new value will only take effect the next time that manual activation takes place. During deactivation, DC-ISIS will purge the local LSP from remote nodes if this object is set to 'none' or 'start'. Setting the object to 'restart' before deactivation will prevent the local LSP from being purged. A planned restart may be initiated by setting isisSysAdminState to 'off' and later to 'on'. Graceful restart procedures will only function correctly if the local LSP has not been purged, and so to initiate a planned restart, isisSysRestartActivationType should be set to 'restart' before deactivation.")
isisSysRestartAutoResetType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 41), IsisSysRestartType().clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRestartAutoResetType.setStatus('current')
if mibBuilder.loadTexts: isisSysRestartAutoResetType.setDescription('There are cases where the IS-IS protocol requires the local node to automatically deactivate and later reactivate. This object indicates which restart procedures (if any) are followed during such an automatic reset. During the activation period, DC-ISIS will use the value that was configured at the start of activation. The value may be changed at any time, but the new value will only take effect the next time that automatic re-activation takes place.')
isisSysRestartAdjacencyWait = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRestartAdjacencyWait.setStatus('current')
if mibBuilder.loadTexts: isisSysRestartAdjacencyWait.setDescription("This object is only used when DC-ISIS activates with the activation type (isisSysRestartActivationType or isisSysRestartAutoResetType) set to 'start' or 'restart'. It defines how long DC-ISIS will wait to establish adjacencies before completing the start/restart. This object follows the resettingTimer behavior.")
isisSysMaxRecoveryTime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxRecoveryTime.setDescription("This object is only used when DC-ISIS activates with the activation type (isisSysRestartActivationType or isisSysRestartAutoResetType) set to 'restart'. It defines the maximum time that DC-ISIS will take before completing restart procedures. The value specified puts an upper bound on the duration of the T3 timer described in the IS-IS restart RFC (3847). The actual duration of the timer is the minimum of the value specified and the minimum remaining holding time received on an adjacency. This object follows the resettingTimer behavior.")
isisSysClearStats = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 44), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysClearStats.setStatus('current')
if mibBuilder.loadTexts: isisSysClearStats.setDescription("Set to 'true' to clear all system statistics, including the isisSystemCounter and isisPacketCounter tables. Note that isisSysStatsLSPCount is not reset by this object. Reading the value of this field has no meaning.")
isisSysSetAttached = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("attachNoOverlapOrRedist", 1), ("attachNoOverlapOnly", 2), ("attachSet", 3), ("attachClear", 4))).clone('attachNoOverlapOrRedist')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysSetAttached.setStatus('current')
if mibBuilder.loadTexts: isisSysSetAttached.setDescription("If DC-ISIS is operating at both level 1 and level 2, this field indicates how DC-ISIS should decide whether to set the attached bit in its level 1 LSP. - 'attachNoOverlapOrRedist' indicates that the attached bit should be set if either of the following are true. - The IS can reach at least one other area (the IS is adjacent with a L2 router whose area addresses do not overlap with the area addresses we know about at L1). - The IS is redistributing one or more external routes into the AS. - 'attachNoOverlapOnly' indicates that the attached bit should be set only if the IS can reach at least one other area. - 'attachSet' indicates that the attached bit should always be set. - 'attachClear' indicates that the attached bit should never be set.")
isisSysProtSupported = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 46), IsisAddrTypeBits().clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysProtSupported.setStatus('current')
if mibBuilder.loadTexts: isisSysProtSupported.setDescription('This attribute contains the set of protocols supported by this Intermediate System.')
isisSysRestrictLanAdjsToSubnet = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 47), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRestrictLanAdjsToSubnet.setStatus('current')
if mibBuilder.loadTexts: isisSysRestrictLanAdjsToSubnet.setDescription("This object only affects IPv4 broadcast circuits. If this is set to 'true', DC-ISIS will only form adjacencies with intermediate systems that are on the same subnet as the local circuit. This object only has effect when the I3 Stub is used to determine subnet addresses and is ignored otherwise.")
isisSysHostName = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 48), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysHostName.setStatus('current')
if mibBuilder.loadTexts: isisSysHostName.setDescription('The string that this instance of IS-IS will use as the local hostname. This is advertised to other Intermediate Systems in the Dynamic Hostname TLV.')
isisSysCalcSoonAfterCircChange = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 49), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysCalcSoonAfterCircChange.setStatus('current')
if mibBuilder.loadTexts: isisSysCalcSoonAfterCircChange.setDescription("Set this object to 'true' to minimize the delay before triggering a routing calculation that includes any relevant circuit change. This means a change to the local neighbors (including pseudonodes), or to the reachable addresses received from the I3 stub. There are two aspects to minimizing the delay. - DC-ISIS overrides the setting of the isisSysLevelMinLSPGenInt object when such a change occurs, and usually regenerates the local LSP(s) immediately. The only exception is when DC-ISIS is performing restart procedures as defined in RFC3847. This RFC specifies when DC-ISIS can update the local LSP during a restart. - DC-ISIS overrides all of the objects that affect the scheduling of routing calculations, with the exception of the isisSysCalcThrshRestartLimit object. It ensures that a routing calculation including the updated LSPs takes place as soon as possible. It abandons an existing route calculation if necessary, unless more than isisSysCalcThrshRestartLimit successive calculations would have been interrupted.")
isisSysSendNotifications = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 50), Bits().clone(namedValues=NamedValues(("circuitIndication", 0), ("databaseOverload", 1), ("manualAreaAddressDrops", 2), ("idLengthMismatch", 3), ("maxAreaAddressMismatch", 4), ("ownLspPurge", 5), ("areaMismatch", 6), ("rejectedAdjacency", 7), ("adjacencyChange", 8), ("lspErrorDetected", 9), ("attemptToExceedMaxSequence", 10), ("sequenceNumberSkip", 11), ("extPassCircuitInd", 12), ("operStateChange", 13), ("disChange", 14), ("lspAuthFailure", 15), ("helloAuthFailure", 16), ("attachStateChange", 17))).clone(namedValues=NamedValues(("circuitIndication", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysSendNotifications.setStatus('current')
if mibBuilder.loadTexts: isisSysSendNotifications.setDescription('This attribute contains the set of notifications generated by this Intermediate System. The notifications that may be enabled are the isisCircIndTable, isisDatabaseOverload, isisManualAddressDrops, isisIDLenMismatch, isisMaxAreaAddressesMismatch, isisOwnLSPPurge, isisAreaMismatch, isisRejectedAdjacency, isisAdjacencyChange, isisLSPErrorDetected, isisAttemptToExceedMaxSequence, isisSequenceNumberSkip, isisDisChange, isisOperStateChange, isisLspAuthFailure, isisHelloAuthFailure, isisExtPassCircuitInd and isisAttachStateChange notifications.')
isisSysEnableIgpShortcut = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 51), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysEnableIgpShortcut.setStatus('current')
if mibBuilder.loadTexts: isisSysEnableIgpShortcut.setDescription("Set isisSysEnableIgpShortcut to 'true' to enable IS-IS routing over IGP shortcut interfaces. Set isisSysEnableIgpShortcut to 'false' to disable IS-IS routing over IGP shortcut interfaces. IS-IS will ignore any interface that is identified as an IGP shortcut.")
isisSysI3EntityIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 52), NumericIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysI3EntityIndex.setStatus('current')
if mibBuilder.loadTexts: isisSysI3EntityIndex.setDescription('Identifies the I3 stub instance to which this IS-IS instance should join. The status of the join is given by the row in the isisPmMjTable with isisPmMjInterface equal to ifInterfaceInfo. Note that IS-IS will not become active unless the join to the specified I3 stub is activated successfully. This field follows the replaceOnlyWhileDisabled behavior.')
isisSysRtmPurgeTime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysRtmPurgeTime.setStatus('current')
if mibBuilder.loadTexts: isisSysRtmPurgeTime.setDescription('This object defines the maximum time that DC-ISIS will wait when a Routing Table Manager (such as DC-RTM) fails before purging routes. In some systems, the Routing Table Manager may restart independently of DC-ISIS. For example, it may be administratively deactivated and reactivated, or may be distributed to a separate process that can restart independently of the DC-ISIS process. If such a restart does not affect the forwarding table, then DC-ISIS should continue to advertise routes that it has learnt from the Routing Table Manager. This is achieved by setting isisSysRtmPurgeTime to a value that gives the Routing Table Manager sufficient time to restart. A value of zero indicates that routes will be purged as soon as the join to RTM fails. Any change to the configured timer value will take effect when the timer is next started. RTM purge timers that are already running will not be affected by the change.')
isisMtSysTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8), )
if mibBuilder.loadTexts: isisMtSysTable.setStatus('current')
if mibBuilder.loadTexts: isisMtSysTable.setDescription('A row in this table represents the level of support for a topology on this instance of the Integrated IS-IS protocol. This table is only used when multi-topology IS-IS is supported.')
isisMtSysEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisMtSysMtId"))
if mibBuilder.loadTexts: isisMtSysEntry.setStatus('current')
if mibBuilder.loadTexts: isisMtSysEntry.setDescription('Each row defines information specific to a single topology on a single instance of the IS-IS protocol existing on the system.')
isisMtSysMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisMtSysMtId.setStatus('current')
if mibBuilder.loadTexts: isisMtSysMtId.setDescription('The topology that this row represents.')
isisMtSysExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtSysExistState.setStatus('current')
if mibBuilder.loadTexts: isisMtSysExistState.setDescription("The state of the MIB row. Turning this to state 'destroy' forces the router to forget all the current topology configuration. Setting the state to 'notInService' stops protocol processing for this topology, but retains the configuration. For multi-topology ID zero (the base topology), this field is read only. The row for the base topology is automatically created and destroyed along with the corresponding isisSysTable row.")
isisMtSysAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 4), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtSysAdminState.setStatus('current')
if mibBuilder.loadTexts: isisMtSysAdminState.setDescription("The desired operational state of this topology on this instance of the Integrated IS-IS protocol. Setting this object to the value 'on' when its current value is 'off' enables operation of this topology for this instance of the Integrated IS-IS protocol.")
isisMtSysOperState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 5), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisMtSysOperState.setStatus('current')
if mibBuilder.loadTexts: isisMtSysOperState.setDescription("The current operational status of this topology on this instance of the Integrated IS-IS protocol. If this is 'down' then the topology is not supported.")
isisMtSysProtSupported = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 6), IsisAddrTypeBits().clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtSysProtSupported.setStatus('current')
if mibBuilder.loadTexts: isisMtSysProtSupported.setDescription('This attribute contains the set of protocols supported by this topology on this Intermediate System. Note that RFC 5120 assigns certain topologies to serve pre-determined purposes (MT IDs 0 - 5). This limits the set of allowed values this field should take.')
isisMtSysDefaultActive = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 8, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtSysDefaultActive.setStatus('current')
if mibBuilder.loadTexts: isisMtSysDefaultActive.setDescription("When set to 'true', corresponding rows in the isisMtCircStatusTable have oper status 'up', unless a corresponding row exists in the isisMtCircManConfigTable. When set to 'false', corresponding rows in the isisMtCircStatusTable have oper status 'down', unless a corresponding row exists in the isisMtCircManConfigTable.")
isisManAreaAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 2), )
if mibBuilder.loadTexts: isisManAreaAddrTable.setReference('{ISIS.aoi manualAreaAddresses (10)}')
if mibBuilder.loadTexts: isisManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrTable.setDescription('The set of manual area addresses configured on this Intermediate System.')
isisManAreaAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisManAreaAddr"))
if mibBuilder.loadTexts: isisManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrEntry.setDescription('Each entry contains one area address manually configured on this system')
isisManAreaAddr = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 2, 1, 1), OSINSAddress())
if mibBuilder.loadTexts: isisManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddr.setDescription('A manually configured area address for this system. This object follows the index behavior. Note: an index for the entry {1, {49.0001} active} in this table would be the ordered pair (1, (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the OID. For the DC-ISIS implementation, the area address must have a non-zero length.')
isisManAreaAddrExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrExistState.setDescription("The state of the isisManAreaAddrEntry. This object follows the Row Status behavior. If the isisSysAdminState for this instance of the IS-IS protocol is 'on', and an attempt is made to set this object to the value 'destroy' or 'notInService' when this is the only isisManAreaAddrEntry in state 'active' for this instance of the IS-IS protocol should return inconsistentValue.")
isisAreaAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 3), )
if mibBuilder.loadTexts: isisAreaAddrTable.setReference('{ISIS.aoi areaAddresses (18)}')
if mibBuilder.loadTexts: isisAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddrTable.setDescription('The union of the sets of area addresses reported in all Level 1 LSPs with segment number zero received by this instance of the protocol from Intermediate Systems which are reachable via Level 1 routing.')
isisAreaAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 3, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisAreaAddr"))
if mibBuilder.loadTexts: isisAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddrEntry.setDescription('Each entry contains one area address reported in a Level 1 LSP received by this instance of the IS-IS protocol. The DC-ISIS implementation ignores received area addresses with a length of zero.')
isisAreaAddr = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 3, 1, 1), OSINSAddress())
if mibBuilder.loadTexts: isisAreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddr.setDescription('An area address reported in a Level 1 LSP received by this instance of the IS-IS protocol. The DC-ISIS implementation ignores received area addresses with a length of zero.')
isisAreaAddrInLSP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisAreaAddrInLSP.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddrInLSP.setDescription("Following ISO10589 section 7.1.5, we advertise the three numerically lowest level 1 area addresses in the level 2 LSP fragment zero. If 'true', then this area address is one of the three numerically lowest area addresses, and if this router is active at level 2, it is therefore one of those area addresses advertised in the level 2 LSP fragment 0.")
isisSummAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5), )
if mibBuilder.loadTexts: isisSummAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrTable.setDescription('The set of IP summary addresses to use in forming summary TLVs originated by this Intermediate System. An administrator may use a summary address to combine and modify IP Reachability announcements. If the Intermediate system can reach any subset of the summary address, the summary address will be announced instead, at the configured metric.')
isisSummAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisSummAddrMtId"), (0, "DC-ISIS-MIB", "isisSummAddressType"), (0, "DC-ISIS-MIB", "isisSummAddress"), (0, "DC-ISIS-MIB", "isisSummAddrPrefixLen"))
if mibBuilder.loadTexts: isisSummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrEntry.setDescription('Each entry contains one IP summary address.')
isisSummAddrMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisSummAddrMtId.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrMtId.setDescription('The topology that this summary address applies to. This should be set to zero if multi-topology IS-IS is not enabled. This object follows the index behavior.')
isisSummAddressType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisSummAddressType.setStatus('current')
if mibBuilder.loadTexts: isisSummAddressType.setDescription('The Type of IP address for this summary address. This object follows the index behavior.')
isisSummAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisSummAddress.setStatus('current')
if mibBuilder.loadTexts: isisSummAddress.setDescription('The IP Address value for this summary address. This object follows the index behavior. The address must not contain any set host bits (bits set after the address prefix determined by isisSummAddrPrefixLen).')
isisSummAddrPrefixLen = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisSummAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
isisSummAddrExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrExistState.setDescription('The existence state of this summary address. This object follows the row status behavior.')
isisSummAddrMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrMetric.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrMetric.setDescription('The metric value to announce this summary address with in LSPs generated by this system.')
isisSummAddrFullMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 5, 1, 6), FullMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrFullMetric.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrFullMetric.setDescription('The wide metric value to announce this summary address with in LSPs generated by this system.')
isisRedistributeAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6), )
if mibBuilder.loadTexts: isisRedistributeAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrTable.setDescription('This table provides criteria to decide if a route should be leaked from L2 to L1 when Domain Wide Prefix leaking is enabled. Addresses that match the summary mask in the table will be announced at L1 by routers when isisSysL2toL1Leaking is enabled. Routes that fall into the ranges specified are announced as is, without being summarized. Routes that do not match a summary mask are not announced.')
isisRedistributeAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisRedistributeAddrMtId"), (0, "DC-ISIS-MIB", "isisRedistributeAddrType"), (0, "DC-ISIS-MIB", "isisRedistributeAddrAddress"), (0, "DC-ISIS-MIB", "isisRedistributeAddrPrefixLen"))
if mibBuilder.loadTexts: isisRedistributeAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrEntry.setDescription('Each entry contains one IP summary address to manage leaking L2 addresses into L1.')
isisRedistributeAddrMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisRedistributeAddrMtId.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrMtId.setDescription('The topology that this redistribution address applies to. This should be set to zero if multi-topology IS-IS is not enabled. This object follows the index behavior.')
isisRedistributeAddrType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisRedistributeAddrType.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrType.setDescription('The Type of IP address for this summary address. This object follows the index behavior.')
isisRedistributeAddrAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisRedistributeAddrAddress.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrAddress.setDescription('The IP Address value for this summary address. This object follows the index behavior. The address must not contain any set host bits (bits set after the address prefix determined by isisRedistributeAddrPrefixLen).')
isisRedistributeAddrPrefixLen = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisRedistributeAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
isisRedistributeAddrExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRedistributeAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisRedistributeAddrExistState.setDescription('The existence state of this summary address. This object follows the row status behavior.')
isisRouterTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7), )
if mibBuilder.loadTexts: isisRouterTable.setStatus('current')
if mibBuilder.loadTexts: isisRouterTable.setDescription('The set of hostnames and router ID.')
isisRouterEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisRouterSysID"), (0, "DC-ISIS-MIB", "isisRouterLevel"))
if mibBuilder.loadTexts: isisRouterEntry.setStatus('current')
if mibBuilder.loadTexts: isisRouterEntry.setDescription('Each entry tracks information about one peer at one level.')
isisRouterSysID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1, 1), SystemID())
if mibBuilder.loadTexts: isisRouterSysID.setStatus('current')
if mibBuilder.loadTexts: isisRouterSysID.setDescription('The System ID of the Router Peer.')
isisRouterLevel = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1, 2), ISLevel())
if mibBuilder.loadTexts: isisRouterLevel.setStatus('current')
if mibBuilder.loadTexts: isisRouterLevel.setDescription('The level of this Intermediate System.')
isisRouterHostName = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisRouterHostName.setStatus('current')
if mibBuilder.loadTexts: isisRouterHostName.setDescription('The hostname listed in LSP, or NULL if none.')
isisRouterID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisRouterID.setStatus('current')
if mibBuilder.loadTexts: isisRouterID.setDescription('The Router ID of the Peer found in LSP, or NULL if none.')
isisRouterIPv6ID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 1, 7, 1, 5), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisRouterIPv6ID.setStatus('current')
if mibBuilder.loadTexts: isisRouterIPv6ID.setDescription('The IPv6 TE Router ID found in the LSP, if any.')
isisSysLevelTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1), )
if mibBuilder.loadTexts: isisSysLevelTable.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelTable.setDescription('Level specific information about an instance of IS-IS.')
isisSysLevelEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisSysLevelIndex"))
if mibBuilder.loadTexts: isisSysLevelEntry.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelEntry.setDescription('Describe variables defined for Area or Domain.')
isisSysLevelIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisSysLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelIndex.setDescription('The level that this entry describes.')
isisSysLevelOrigLSPBuffSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 2), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelOrigLSPBuffSize.setReference('{ISIS.aoi originatingL1LSPBufferSize (9)}')
if mibBuilder.loadTexts: isisSysLevelOrigLSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelOrigLSPBuffSize.setDescription('The maximum size of LSPs and SNPs originated by this Intermediate System at this level. This object follows the replaceOnlyWhileDisabled behavior.')
isisSysLevelMinLSPGenInt = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535000)).clone(30)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelMinLSPGenInt.setReference('{ISIS.aoi minimumLSPGenerationInterval (11)}')
if mibBuilder.loadTexts: isisSysLevelMinLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelMinLSPGenInt.setDescription('Minimum interval, in milliseconds, between successive generation of LSPs with the same LSPID at this level by this instance of the protocol. This object follows the resettingTimer behavior.')
isisSysLevelOverloadState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 4), LevelState().clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysLevelOverloadState.setReference('{ISIS.aoi l1State (17)}')
if mibBuilder.loadTexts: isisSysLevelOverloadState.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelOverloadState.setDescription("The Overload state of the database at this level. The value 'overloaded' indicates a database that is low on an essential resource, such as memory. The administrator may indirectly force the state to 'waiting' when the router is initializing by setting the object isisSysLevelSetOverload. If the state is waiting or overloaded, we originate LSPs with the Overload bit set.")
isisSysLevelSetOverload = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelSetOverload.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelSetOverload.setDescription('Administratively set the overload bit for the level. The overload bit will continue to be set if the implementation runs out of memory, independent of this variable.')
isisSysLevelSetOverloadUntil = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 6), TimeTicks()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelSetOverloadUntil.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelSetOverloadUntil.setDescription('If set, the overload bit should be set, and cleared after sysUpTime exceeds this value.')
isisSysLevelMetricStyle = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 7), MetricStyle().clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelMetricStyle.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelMetricStyle.setDescription('Which style of Metric do we generate in our LSPs at this level?')
isisSysLevelSPFConsiders = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 8), MetricStyle().clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelSPFConsiders.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelSPFConsiders.setDescription('Which style of Metric do we consider in our SPF computation at this level?')
isisSysLevelTEEnabled = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelTEEnabled.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelTEEnabled.setDescription("Do we do Traffic Engineering for IPv4 at this level? If Traffic Engineering is enabled, isisSysLevelMetricStyle must be set to 'wide' or 'both' for this level, and a value must be configured for isisSysTERouterID. When Traffic Engineering is enabled for IPv4, this IS will advertise the IPv4 TE router ID in the local LSP, and will advertise traffic engineering parameters (where available) for links configured to support IPv4. This object is ignored if the 'ipv4' bit is not set in the value of isisSysProtSupported.")
isisSysLevelIPv6TEEnabled = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelIPv6TEEnabled.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelIPv6TEEnabled.setDescription("Do we do Traffic Engineering for IPv6 at this level? DC-ISIS only supports Traffic Engineering for IPv6 at level 1. If Traffic Engineering is enabled, a value must be configured for isisSysIPv6TERouterID. When Traffic Engineering is enabled for IPv6, this IS will advertise the IPv6 TE router ID in the local LSP, and will advertise traffic engineering parameters (where available) for links configured to support IPv6. This object is ignored if the 'ipv6' bit is not set in the value of isisSysProtSupported.")
isisSysLevelRestartT2Duration = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelRestartT2Duration.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelRestartT2Duration.setDescription("This object is only used when DC-ISIS activates with the activation type (isisSysRestartActivationType or isisSysRestartAutoResetType) set to 'start' or 'restart'. It defines how long DC-ISIS will wait to complete database synchronization at this level before completing the start/restart. This object follows the resettingTimer behavior.")
isisSysLevelAuthUser = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 2, 1, 1, 12), AuthUserDataString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLevelAuthUser.setStatus('current')
if mibBuilder.loadTexts: isisSysLevelAuthUser.setDescription('Authentication user data for area/domain level authentication. This data is passed opaquely to the Metaswitch authentication interface where it can be used to assist with authentication decisions.')
isisCircTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2), )
if mibBuilder.loadTexts: isisCircTable.setStatus('current')
if mibBuilder.loadTexts: isisCircTable.setDescription('The table of circuits used by each instance of Integrated IS-IS on this system.')
isisCircEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"))
if mibBuilder.loadTexts: isisCircEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircEntry.setDescription('An isisCircEntry exists for each circuit used by Integrated IS-IS on this system.')
isisCircIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: isisCircIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIndex.setDescription('The identifier of this circuit, unique within the instance of the IS-IS protocol. This object follows the index behavior. This is for SNMP Indexing purposes only and need not have any relation to any protocol value. In DC-ISIS this is always equal to the circuit ifIndex.')
isisCircIfIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIfIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIfIndex.setDescription('The value of ifIndex for the interface to which this circuit corresponds. This object cannot be modified after creation. In DC-ISIS this is also used as the 3-way circuit ID on point-to-point circuits, and must equal isisCircIndex. The default value is the same as isisCircIndex. A create request using any other value will fail.')
isisCircIfSubIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which this circuit corresponds, such as a DLCI or VPI/VCI. This object cannot be modified after creation. In DC-ISIS this field is ignored.')
isisCircAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 4), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircAdminState.setStatus('current')
if mibBuilder.loadTexts: isisCircAdminState.setDescription("The administrative state of the circuit. This object follows the AdminState behavior. In DC-ISIS the default admin state for a new automatic circuit is 'on' if the isisSysAllowAutoI3Config field is 'true', otherwise the default admin state is 'off'.")
isisCircExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircExistState.setStatus('current')
if mibBuilder.loadTexts: isisCircExistState.setDescription("The existence state of this circuit. This object follows the Row Status behavior. Setting the state to 'notInService' halts the generation and processing of IS-IS protocol PDUs on this circuit. Setting the state to destroy will also erase any configuration associated with the circuit. In DC-ISIS, automatic circuits from the I3 stub appear as passive circuits with existence state 'active'. These circuits can be configured via the MIB like manual circuits, except that they will survive a Destroy request, with all fields reset to their automatic values. MIB configuration overrides automatic configuration.")
isisCircType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircType.setReference('{ISIS.aoi type (33)}')
if mibBuilder.loadTexts: isisCircType.setStatus('current')
if mibBuilder.loadTexts: isisCircType.setDescription("The type of the circuit. This object follows the replaceOnlyWhileDisabled behavior. The type specified must be compatible with the type of the interface defined by the value of isisCircIfIndex. In DC-ISIS only 'broadcast' and 'ptToPt' circuits are supported. An automatic circuit can have type 'unknown' until the correct MIB type is defined.")
isisCircExtDomain = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircExtDomain.setReference('{ISIS.aoi externalDomain (46)}')
if mibBuilder.loadTexts: isisCircExtDomain.setStatus('current')
if mibBuilder.loadTexts: isisCircExtDomain.setDescription('If true, suppress normal transmission of and interpretation of Intra-domain IS-IS PDUs on this circuit.')
isisCircLevel = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevel.setStatus('current')
if mibBuilder.loadTexts: isisCircLevel.setDescription('Indicates which type of packets will be sent and accepted on this circuit. The values used will be modified by the settings of isisSysType. This object follows the replaceOnlyWhileDisabled behavior.')
isisCircPassiveCircuit = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: isisCircPassiveCircuit.setDescription("Should we include this interface in LSPs, even if it is not running the IS-IS Protocol? In DC-ISIS, circuits with isisCircExtDomain 'true' will only be included in LSPs if this field is also 'true', and the circuit is active.")
isisCircMeshGroupEnabled = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked? Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group.')
isisCircMeshGroup = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircMeshGroup.setReference('{ RFC 2973 }')
if mibBuilder.loadTexts: isisCircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: isisCircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group. If isisCircMeshGroupEnabled is inactive or blocked, this value is ignored.')
isisCircSmallHellos = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: isisCircSmallHellos.setDescription('Can we send unpadded hellos on LAN circuits? False means LAN Hellos must be padded. Implementations should allow the administrator to read this value. An implementation need not be able to support unpadded hellos to be conformant. DC-ISIS does support unpadded hellos.')
isisCircLastUpTime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 13), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLastUpTime.setStatus('current')
if mibBuilder.loadTexts: isisCircLastUpTime.setDescription('If the circuit is enabled, the value of sysUpTime when isisCircAdminState most recently entered the state on. If the circuit is not on, the value of sysUpTime when the circuit last entered state on, 0 if the circuit has never been on.')
isisCirc3WayEnabled = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCirc3WayEnabled.setStatus('current')
if mibBuilder.loadTexts: isisCirc3WayEnabled.setDescription('Is this circuit enabled to run 3Way handshake? DC-ISIS will always run the 3-way handshake on point to point circuits, and so this object is read-only.')
isisCircExtendedCircID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: isisCircExtendedCircID.setDescription('The value to be used as the extended circuit ID in 3Way handshake. This value is only used if isisCirc3WayEnabled is true, and must be unique across all circuits on this IS. DC-ISIS uses the value for isisCircIndex as the extended circuit ID, and so this object is read-only.')
isisCircOperState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 16), IsisOperStatus().clone('operStatusDown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircOperState.setStatus('current')
if mibBuilder.loadTexts: isisCircOperState.setDescription('The operational state of this circuit.')
isisCircSdEntityIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircSdEntityIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircSdEntityIndex.setDescription('Identifies the SDC entity which will handle this circuit. This object must be specified before the circuit can run the IS-IS protocol. It cannot be changed after it has been specified.')
isisCircDlBuffPoolSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 18), Unsigned32().clone(150)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircDlBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: isisCircDlBuffPoolSize.setDescription('Capacity of the buffer pool used by the DL stub to send data signals to the SDC. This object follows the replaceOnlyWhileDisabled behavior.')
isisCircSdPDUBuffPoolSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 19), Unsigned32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircSdPDUBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: isisCircSdPDUBuffPoolSize.setDescription('Capacity of the buffer pool into which SDC transfers data signals from the DL Stub. This object follows the replaceOnlyWhileDisabled behavior.')
isisCircSdIndBuffPoolSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 20), Unsigned32().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircSdIndBuffPoolSize.setStatus('current')
if mibBuilder.loadTexts: isisCircSdIndBuffPoolSize.setDescription('Capacity of the buffer pool used by SDC to send indications to PM. This object follows the replaceOnlyWhileDisabled behavior.')
isisCircDataLinkBlockSize = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 21), Unsigned32().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircDataLinkBlockSize.setStatus('current')
if mibBuilder.loadTexts: isisCircDataLinkBlockSize.setDescription('Maximum size of PDU that can be sent or received over this circuit (MTU). This object follows the replaceOnlyWhileDisabled behavior.')
isisCircPhysicalAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: isisCircPhysicalAddress.setDescription('The physical address of the network interface (for example a MAC address on an Ethernet card). This value is only relevant to a broadcast circuit and is ignored on a point-to-point circuit. It needs to be specified in the MIB if the information is not obtained from the I3 stub. This object follows the replaceOnlyWhileDisabled behavior.')
isisCircManualOrAutomatic = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("both", 3))).clone('manual')).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircManualOrAutomatic.setStatus('current')
if mibBuilder.loadTexts: isisCircManualOrAutomatic.setDescription("Has this circuit been configured by MIB (manual), I3 information (automatic) or both? MIB configuration overrides I3 configuration. Automatic circuits cannot be destroyed. Destroying a manual circuit removes all configuration from that circuit from DC-ISIS. Destroying a circuit in state 'both' destroys any MIB configuration and returns the circuit to automatic state.")
isisCircT1TimerRunning = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircT1TimerRunning.setStatus('current')
if mibBuilder.loadTexts: isisCircT1TimerRunning.setDescription("Is the T1 timer running on this circuit? This object is only valid on a circuit that is currently running the IS-IS protocol (isisCircExtDomain is 'false' and isisCircOperState is 'operStatusUp'). When set to 'true', this indicates that the local node is running starting or restarting node procedures.")
isisCircProtSupported = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 25), IsisAddrTypeBits().clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircProtSupported.setStatus('current')
if mibBuilder.loadTexts: isisCircProtSupported.setDescription("Which protocols are supported on this circuit? Note that the configured value is used in conjunction with the value of isisSysProtSupported. In particular: - IPv4 is supported on the circuit if both isisSysProtSupported and this object have the 'ipv4' bit set - IPv6 is supported on the circuit if both isisSysProtSupported and this object have the 'ipv6' bit set.")
isisCircPtToPtOverLAN = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircPtToPtOverLAN.setStatus('current')
if mibBuilder.loadTexts: isisCircPtToPtOverLAN.setDescription("Allows a broadcast circuit to be configured to operate point-to-point over LAN procedures. This is used in conjunction with the isisCircType object as follows. - If isisCircType = 'ptToPt', the circuit is a standard point-point circuit, and isisCircPtToPtOverLAN is ignored. - If isisCircType = 'broadcast' and isisCircPtToPtOverLAN is 'false', the circuit is used as a normal LAN. - If isisCircType = 'broadcast' and isisCircPtToPtOverLAN is 'true', point-point over LAN procedures are followed. Point-to-point over LAN procedures should only be configured when there are just two Intermediate Systems operating on the LAN. This object follows the replaceOnlyWhileDisabled behavior.")
isisCircProtBfdDesired = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 2, 1, 28), IsisAddrTypeBits()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircProtBfdDesired.setStatus('current')
if mibBuilder.loadTexts: isisCircProtBfdDesired.setDescription('Indicates the protocols running on this circuit for which Bidirectional Forwarding Detection (BFD) is desired. If isisCircProtBfdDesired is clear for an address type, then BFD sessions are not established to peers for that address type. If isisCircProtBfdDesired is set for an address type, then a BFD session is established to each peer that supports BFD for that address type. The object isisISAdjProtSuppBfdStatus provides BFD status for each address type. This object can be modified at any time.')
isisMtCircManConfigTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4), )
if mibBuilder.loadTexts: isisMtCircManConfigTable.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManConfigTable.setDescription('A row in this table represents the manual configuration of support for a topology on this circuit. Rows in this table are created and destroyed by an administrator to provide per-circuit multi-topology configuration. Note that the presence of a row in this table overrides the default multi-topology settings for the given circuit and topology.')
isisMtCircManConfigEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisMtCircManMtId"))
if mibBuilder.loadTexts: isisMtCircManConfigEntry.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManConfigEntry.setDescription('An isisMtCircManConfigEntry is created to provide multi-topology specifc circuit configuration.')
isisMtCircManMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisMtCircManMtId.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManMtId.setDescription('The topology that this row represents.')
isisMtCircManExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtCircManExistState.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManExistState.setDescription("The state of the MIB row. Turning this to state 'destroy' forces the router to forget the manually configured multi-topology configuration for this circuit. Setting the state to 'notInService' stops the manual multi-topology configuration being used, but retains the configuration.")
isisMtCircManAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 5), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtCircManAdminState.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManAdminState.setDescription("The desired operational state for the manual configuration of this topology on this circuit. Setting this object to the value 'on' when its current value is 'off' enables use of the manual configuration for this topology on this circuit.")
isisMtCircManOperState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 6), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisMtCircManOperState.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManOperState.setDescription('The current operational status of the manual configuration for this topology on this circuit.')
isisMtCircManL1WideMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 7), WideMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtCircManL1WideMetric.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManL1WideMetric.setDescription('The level 1 wide metric value of this circuit for this topology. Note that topologies other than MT ID 0 always use wide metrics. For multi-topology ID zero (the base topology), this field is read only. The level 1 metric for the base topology is configured using the isisCircLevelWideMetric field in the isisCircLevelTable.')
isisMtCircManL2WideMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 4, 1, 8), WideMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisMtCircManL2WideMetric.setStatus('current')
if mibBuilder.loadTexts: isisMtCircManL2WideMetric.setDescription('The level 2 wide metric value of this circuit for this topology. Note that topologies other than MT ID 0 always use wide metrics. For multi-topology ID zero (the base topology), this field is read only. The level 2 metric for the base topology is configured using the isisCircLevelWideMetric field in the isisCircLevelTable.')
isisMtCircStatusTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5), )
if mibBuilder.loadTexts: isisMtCircStatusTable.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusTable.setDescription('A row in this table represents the current support for a topology on this circuit. A row exists in this table for every row in the isisCircTable and every row in the isisMtSysTable.')
isisMtCircStatusEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisMtCircStatusMtId"))
if mibBuilder.loadTexts: isisMtCircStatusEntry.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusEntry.setDescription('An isisMtCircStatusEntry details the status of a topology on a circuit.')
isisMtCircStatusMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisMtCircStatusMtId.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusMtId.setDescription('The topology that this row represents.')
isisMtCircStatusOperState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5, 1, 4), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisMtCircStatusOperState.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusOperState.setDescription('The current operational state of this topology on this circuit. If no corresponding row exists in the isisMtCircManConfigTable then this is derived from the isisMtSysDefaultActive field in the isisMtSysTable row. Otherwise, this is derived from a combination of the isisMtSysOperState field in the isisMtSysTable and the isisMtCircManOperState field in the isisMtCircManConfigTable row.')
isisMtCircStatusL1WideMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5, 1, 5), WideMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisMtCircStatusL1WideMetric.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusL1WideMetric.setDescription('The level 1 wide metric value of this circuit for this topology. Note that topologies other than MT ID 0 always use wide metrics. If no corresponding row exists in the isisMtCircManConfigTable then this is derived from the isisCircLevelWideMetric field in the level 1 isisCircLevelTable. Otherwise, this is derived from the isisMtCircManL1WideMetric field in the isisMtCircManConfigTable row.')
isisMtCircStatusL2WideMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 5, 1, 6), WideMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisMtCircStatusL2WideMetric.setStatus('current')
if mibBuilder.loadTexts: isisMtCircStatusL2WideMetric.setDescription('The level 2 wide metric value of this circuit for this topology. Note that topologies other than MT ID 0 always use wide metrics. If no corresponding row exists in the isisMtCircManConfigTable then this is derived from the isisCircLevelWideMetric field in the level 2 isisCircLevelTable. Otherwise, this is derived from the isisMtCircManL2WideMetric field in the isisMtCircManConfigTable row.')
isisCircIPAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3), )
if mibBuilder.loadTexts: isisCircIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrTable.setDescription('This table contains the set of IP Addresses configured on all circuits.')
isisCircIPAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisCircIPAddrManOrAuto"), (0, "DC-ISIS-MIB", "isisCircIPAddrIndex"))
if mibBuilder.loadTexts: isisCircIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrEntry.setDescription('Each entry contains one IP Address configured on a circuit.')
isisCircIPAddrManOrAuto = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("both", 3))))
if mibBuilder.loadTexts: isisCircIPAddrManOrAuto.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrManOrAuto.setDescription('The type of IP address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of interface information from the I3 stub. This object cannot be modified after creation, and follows the manualOrAutomatic behavior.')
isisCircIPAddrIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisCircIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrIndex.setDescription('An index to this table which identifies the IP addresss to which this entry belongs. This object follows the manualOrAutomatic behavior.')
isisCircIPAddrRowStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIPAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrRowStatus.setDescription('The existence state of this IP address. This object follows the RowStatus and manualOrAutomatic behaviors.')
isisCircIPAddrAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 4), AdminState().clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIPAddrAdminState.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrAdminState.setDescription("Administrative state of this IP address. This object follows the AdminState and manualOrAutomatic behaviors. The system level isisSysAllowAutoI3Config field defines the initial administrative state for IP addresses that are configured automatically from the I3 stub. If isisSysAllowAutoI3Config is 'true' then automatic addresses initially have administrative state 'on'; otherwise they initially have administrative state 'off'.")
isisCircIPAddrAddressType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIPAddrAddressType.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrAddressType.setDescription('The Inet type of this IP Address. This object follows the manualOrAutomatic behavior.')
isisCircIPAddrAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIPAddrAddress.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrAddress.setDescription('One IP Address configured on this circuit. This field must be present on row creation and cannot be modified after creation. This address must be unique among all manual IP addresses configured on this circuit. If a manual address matches an automatic IP address on this circuit then the manual address takes precedence, and the automatic address is not used by DC-ISIS. This address is guaranteed to be unique among all automatic addresses on this circuit.')
isisCircIPAddrInLSP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 3, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIPAddrInLSP.setStatus('current')
if mibBuilder.loadTexts: isisCircIPAddrInLSP.setDescription('Is this IP address advertised in TLV 132 in LSPs sent out by this intermediate system? This object follows the manualOrAutomatic behavior.')
isisCircLevelTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1), )
if mibBuilder.loadTexts: isisCircLevelTable.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelTable.setDescription('Level specific information about circuits used by IS-IS.')
isisCircLevelEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisCircLevelIndex"))
if mibBuilder.loadTexts: isisCircLevelEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelEntry.setDescription('An isisCircLevelEntry exists for each level on each circuit used by Integrated IS-IS on this system.')
isisCircLevelIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisCircLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelIndex.setDescription('The level that this entry describes.')
isisCircLevelMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelMetric.setReference('{ISIS.aoi l1DefaultMetric (35)}')
if mibBuilder.loadTexts: isisCircLevelMetric.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelMetric.setDescription('The metric value of this circuit for this level.')
isisCircLevelWideMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 3), WideMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelWideMetric.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelWideMetric.setDescription('The wide metric value of this circuit for this level.')
isisCircLevelISPriority = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 4), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelISPriority.setReference('{ISIS.aoi l2IntermediateSystemPriority (73)}')
if mibBuilder.loadTexts: isisCircLevelISPriority.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelISPriority.setDescription('The priority for becoming LAN Designated Intermediate System at this level.')
isisCircLevelIDOctet = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelIDOctet.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelIDOctet.setDescription('A one byte identifier for the circuit selected by the Intermediate System. On point-to-point circuits, the value is used as the Local Circuit ID in point-to-point IIH PDUs transmitted on this circuit. In this case, values of isisCircLevelIDOctet do not need to be unique. For broadcast circuits, the value is used to generate the LAN ID that will be used if this Intermediate System is elected as the Designated IS on this circuit. The value is required to differ on LANs where the Intermediate System is the Designated Intermediate System.')
isisCircLevelID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 6), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelID.setReference('{ISIS.aoi ptPtCircuitID (51)}')
if mibBuilder.loadTexts: isisCircLevelID.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelID.setDescription('On a point to point circuit with a fully initialized adjacency to a peer IS, the value of this object is the circuit ID negotiated during adjacency initialization. On a point to point circuit without such an adjacency, the value is the concatenation of the local system ID and the one byte isisCircLevelIDOctet for this circuit i.e. the value that would be proposed for the circuit ID. On other circuit types, the value returned is the zero length OCTET STRING.')
isisCircLevelDesIS = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 7), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelDesIS.setReference('{ISIS.aoi l2DesignatedIntermediateSystem (75)}')
if mibBuilder.loadTexts: isisCircLevelDesIS.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDesIS.setDescription('The ID of the LAN Designated Intermediate System on this circuit at this level. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
isisCircLevelHelloMultiplier = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS.')
isisCircLevelHelloTimer = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs on multiaccess networks at this level for LANs. The value at L1 is used as the period between Hellos on L1L2 point to point circuits. Setting this value at level 2 on an L1L2 point to point circuit will result in an error of InconsistentValue. This object follows the resettingTimer behavior.')
isisCircLevelDRHelloTimer = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setReference('{ISIS.aoi iSISHelloTimer (45)}')
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on multiaccess networks when this IS is the Designated Intermediate System. This object follows the resettingTimer behavior.')
isisCircLevelLSPThrottle = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 11), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setReference('{ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setDescription('Minimal interval of time, in milliseconds, between transmissions of LSPs on an interface at this level.')
isisCircLevelMinLSPRetransInt = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300000)).clone(5)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setReference('{ISIS.aoi minimumLSPTransmissionInterval (5)}')
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setDescription('Minimum interval, in milliseconds, between re-transmission of an LSP at this level. This object follows the resettingTimer behavior. Note that isisCircLevelLSPThrottle controls how fast we send back to back LSPs. This variable controls how fast we re-send the same LSP.')
isisCircLevelCSNPInterval = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setReference('{ISIS.aoi completeSNPInterval (8)}')
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setDescription('Interval of time, in seconds, between periodic transmission of a complete set of CSNPs on multiaccess networks if this router is the designated router at this level. This object follows the resettingTimer behavior.')
isisCircLevelPartSNPInterval = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setReference('{ISIS.aoi partialSNPInterval (14)}')
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setDescription('Minimum interval in seconds between sending Partial Sequence Number PDUs at this level. This object follows the resettingTimer behavior.')
isisCircLevelStickyDIS = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelStickyDIS.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelStickyDIS.setDescription('Boost to add to the priority of this router (up to the maximum permitted value) when it becomes DIS at this level to make it more likely to remain DIS.')
isisCircLevelAuthUser = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 16), AuthUserDataString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelAuthUser.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelAuthUser.setDescription("Authentication user data for this level's authentication. This data is passed opaquely to the Metaswitch authentication interface where it can be used to assist with authentication decisions.")
isisCircLevelIDHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelIDHostname.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelIDHostname.setDescription('The hostname corresponding to the system ID part of the isisCircLevelID object. This is the null string if the isisCircLevelID object is null, or if no hostname is known.')
isisCircLevelDesISHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelDesISHostname.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDesISHostname.setDescription('The hostname corresponding to the system ID part of the isisCircLevelDesIS object. This is the null string if the isisCircLevelDesIS object is null, or if no hostname is known.')
isisCircLevelMinLSPArrivalInt = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelMinLSPArrivalInt.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelMinLSPArrivalInt.setDescription('The minimum interval between reception of new instances of a particular LSP. LSP instances received at higher frequencies are discarded. If set to zero then no check is made on the frequency of LSP reception. This object follows the resettingTimer behavior.')
isisSystemCounterTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1), )
if mibBuilder.loadTexts: isisSystemCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisSystemCounterTable.setDescription('System wide counters for one instance of the IS-IS protocol on the system.')
isisSystemCounterEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisSysStatLevel"))
if mibBuilder.loadTexts: isisSystemCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisSystemCounterEntry.setDescription('System-wide IS-IS counters.')
isisSysStatLevel = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisSysStatLevel.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLevel.setDescription('The level that this entry describes.')
isisSysStatCorrLSPs = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatCorrLSPs.setReference('{ISIS.aoi corruptedLSPsDetected (19)}')
if mibBuilder.loadTexts: isisSysStatCorrLSPs.setStatus('current')
if mibBuilder.loadTexts: isisSysStatCorrLSPs.setDescription('Number of corrupted in-memory LSPs detected. LSPs received from the wire with a bad checksum are silently dropped and not counted. LSPs received from the wire with parse errors are counted by isisSysStatLSPError.')
isisSysStatAuthTypeFails = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: isisSysStatAuthTypeFails.setDescription('The number of authentication type mismatches recognized by this instance of the protocol.')
isisSysStatAuthFails = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatAuthFails.setStatus('current')
if mibBuilder.loadTexts: isisSysStatAuthFails.setDescription('The number of authentication failures recognized by this instance of the protocol.')
isisSysStatLSPDbaseOloads = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPDbaseOloads.setReference('{ISIS.aoi lSPL1DatabaseOverloads (20)}')
if mibBuilder.loadTexts: isisSysStatLSPDbaseOloads.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPDbaseOloads.setDescription('Number of times the LSP database has become overloaded.')
isisSysStatManAddrDropFromAreas = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatManAddrDropFromAreas.setReference('{ISIS.aoi manualAddressesDroppedFromArea (21)}')
if mibBuilder.loadTexts: isisSysStatManAddrDropFromAreas.setStatus('current')
if mibBuilder.loadTexts: isisSysStatManAddrDropFromAreas.setDescription('Number of times a manual address has been dropped from the area.')
isisSysStatAttmptToExMaxSeqNums = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatAttmptToExMaxSeqNums.setReference('{ISIS.aoi attemptsToExceedmaximumSequenceNumber (22)}')
if mibBuilder.loadTexts: isisSysStatAttmptToExMaxSeqNums.setStatus('current')
if mibBuilder.loadTexts: isisSysStatAttmptToExMaxSeqNums.setDescription('Number of times the IS has attempted to exceed the maximum sequence number.')
isisSysStatSeqNumSkips = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatSeqNumSkips.setReference('{ISIS.aoi sequenceNumberSkips (23)}')
if mibBuilder.loadTexts: isisSysStatSeqNumSkips.setStatus('current')
if mibBuilder.loadTexts: isisSysStatSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
isisSysStatOwnLSPPurges = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatOwnLSPPurges.setReference('{ISIS.aoi ownLSPPurges (24)}')
if mibBuilder.loadTexts: isisSysStatOwnLSPPurges.setStatus('current')
if mibBuilder.loadTexts: isisSysStatOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP is received from some other node.")
isisSysStatIDFieldLenMismatches = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisSysStatIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisSysStatIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value for ID field length to that of the receiving system.')
isisSysStatPartChanges = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPartChanges.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPartChanges.setDescription('Partition changes.')
isisSysStatSPFRuns = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatSPFRuns.setStatus('current')
if mibBuilder.loadTexts: isisSysStatSPFRuns.setDescription('Number of times we ran SPF at this level.')
isisSysStatLSPError = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPError.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPError.setDescription('The count of badly formed LSPs discarded by the PM component of DC-ISIS.')
isisSysStatCSNPError = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatCSNPError.setStatus('current')
if mibBuilder.loadTexts: isisSysStatCSNPError.setDescription('The count of badly formed CSNPs discarded by the PM component of DC-ISIS.')
isisSysStatPSNPError = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPSNPError.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPSNPError.setDescription('The count of badly formed PSNPs discarded by the PM component of DC-ISIS.')
isisSysStatLSPQueueLen = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPQueueLen.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPQueueLen.setDescription('The count of received LSPs that are queued internally in the PM component of DC-ISIS, awaiting processing.')
isisSysStatFragsRebuilt = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatFragsRebuilt.setStatus('current')
if mibBuilder.loadTexts: isisSysStatFragsRebuilt.setDescription('Number of LSP fragments that the local system has generated.')
isisSysStatLSPRexmits = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPRexmits.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPRexmits.setDescription('Number of LSPs that have been retransmitted.')
isisSysStatLSPRegens = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPRegens.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPRegens.setDescription('Number of LSPs that have been regenerated. An LSP is regenerated when it is nearing the end of its lifetime and it has not changed.')
isisSysStatPurgesInitiated = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesInitiated.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesInitiated.setDescription('Number of LSP purges that have been initiated by this instance of IS-IS.')
isisSysStatLSPCount = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatLSPCount.setStatus('current')
if mibBuilder.loadTexts: isisSysStatLSPCount.setDescription('The number of LSPs in the database at this level.')
isisSysStatPurgesIniLocal = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesIniLocal.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesIniLocal.setDescription('Number of LSP purges initiated by this instance of IS-IS, of LSPs that were originated locally. This field behaves like an SNMP counter. It only increases, never decreases, and is subject to wrap. The absolute value of an SNMP counter has no meaning. Applications use the difference between counter values at different times to display count changes. The absolute value of this counter does have meaning, until it first wraps.')
isisSysStatPurgesIniRemote = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesIniRemote.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesIniRemote.setDescription('Number of LSP purges initiated by this instance of IS-IS, of LSPs that were originated remotely. This field behaves like an SNMP counter. It only increases, never decreases, and is subject to wrap. The absolute value of an SNMP counter has no meaning. Applications use the difference between counter values at different times to display count changes. The absolute value of this counter does have meaning, until it first wraps.')
isisSysStatPurgesIniRemSNP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesIniRemSNP.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesIniRemSNP.setDescription('Number of LSP purges initiated by this instance of IS-IS, of LSPs that were originated remotely, due to receiving a SNP. This field behaves like an SNMP counter. It only increases, never decreases, and is subject to wrap. The absolute value of an SNMP counter has no meaning. Applications use the difference between counter values at different times to display count changes. The absolute value of this counter does have meaning, until it first wraps.')
isisSysStatPurgesIniRemExp = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesIniRemExp.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesIniRemExp.setDescription('Number of LSP purges initiated by this instance of IS-IS, of LSPs that were originated remotely, because they have expired. This field behaves like an SNMP counter. It only increases, never decreases, and is subject to wrap. The absolute value of an SNMP counter has no meaning. Applications use the difference between counter values at different times to display count changes. The absolute value of this counter does have meaning, until it first wraps.')
isisSysStatPurgesIniRemPrs = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysStatPurgesIniRemPrs.setStatus('current')
if mibBuilder.loadTexts: isisSysStatPurgesIniRemPrs.setDescription('Number of LSP purges initiated by this instance of IS-IS, of LSPs that were originated remotely, due to peer restart. This field behaves like an SNMP counter. It only increases, never decreases, and is subject to wrap. The absolute value of an SNMP counter has no meaning. Applications use the difference between counter values at different times to display count changes. The absolute value of this counter does have meaning, until it first wraps.')
isisCircuitCounterTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2), )
if mibBuilder.loadTexts: isisCircuitCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisCircuitCounterTable.setDescription('Circuit specific counters for this Intermediate System.')
isisCircuitCounterEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisCircuitType"))
if mibBuilder.loadTexts: isisCircuitCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircuitCounterEntry.setDescription('An isisCircuitCounterEntry exists for each circuit used by Integrated IS-IS on this system.')
isisCircuitType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lanlevel1", 1), ("lanlevel2", 2), ("p2pcircuit", 3))))
if mibBuilder.loadTexts: isisCircuitType.setStatus('current')
if mibBuilder.loadTexts: isisCircuitType.setDescription('What type of circuit saw these counts? The point to point Hello PDU includes both L1 and L2, and ISs form a single adjacency on point to point links. Thus we combine counts on point to point links into one group.')
isisCircAdjChanges = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircAdjChanges.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: isisCircAdjChanges.setStatus('current')
if mibBuilder.loadTexts: isisCircAdjChanges.setDescription('The number of times an adjacency state change has occurred on this circuit.')
isisCircNumAdj = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircNumAdj.setReference('{ISIS.aoi changesInAdjacencyState (40)}')
if mibBuilder.loadTexts: isisCircNumAdj.setStatus('current')
if mibBuilder.loadTexts: isisCircNumAdj.setDescription('The number of adjacencies on this circuit.')
isisCircInitFails = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircInitFails.setStatus('current')
if mibBuilder.loadTexts: isisCircInitFails.setDescription('The number of times initialization of this circuit has failed. This counts events such as PPP NCP failures. Failures to form an adjacency are counted by isisCircRejAdjs.')
isisCircRejAdjs = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircRejAdjs.setReference('{ISIS.aoi rejectedAdjacencies (42)}')
if mibBuilder.loadTexts: isisCircRejAdjs.setStatus('current')
if mibBuilder.loadTexts: isisCircRejAdjs.setDescription('The number of times an adjacency has been rejected on this circuit.')
isisCircIDFieldLenMismatches = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID field length different to that for this system has been received.')
isisCircMaxAreaAddrMismatches = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircMaxAreaAddrMismatches.setReference('{ISIS.aoi iDFieldLengthMismatches (25)}')
if mibBuilder.loadTexts: isisCircMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: isisCircMaxAreaAddrMismatches.setDescription('The number of times an IS-IS control PDU with a max area address field different to that for this system has been received.')
isisCircAuthTypeFails = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircAuthTypeFails.setStatus('current')
if mibBuilder.loadTexts: isisCircAuthTypeFails.setDescription('The number of times an IS-IS control PDU with an auth type field different to that for this system has been received.')
isisCircAuthFails = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircAuthFails.setStatus('current')
if mibBuilder.loadTexts: isisCircAuthFails.setDescription('The number of times an IS-IS control PDU with the correct auth type has failed to pass authentication validation.')
isisCircLANDesISChanges = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLANDesISChanges.setStatus('current')
if mibBuilder.loadTexts: isisCircLANDesISChanges.setDescription('The number of times the Designated IS has changed on this circuit at this level. If the circuit is point to point, this count is zero.')
isisPacketCounterTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3), )
if mibBuilder.loadTexts: isisPacketCounterTable.setStatus('current')
if mibBuilder.loadTexts: isisPacketCounterTable.setDescription('Information about IS-IS protocol traffic at one level on one circuit in one direction.')
isisPacketCounterEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisPacketCountLevel"), (0, "DC-ISIS-MIB", "isisPacketCountDirection"))
if mibBuilder.loadTexts: isisPacketCounterEntry.setStatus('current')
if mibBuilder.loadTexts: isisPacketCounterEntry.setDescription('Information about IS-IS protocol traffic at one level on one circuit in one direction')
isisPacketCountLevel = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: isisPacketCountLevel.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountLevel.setDescription('The level at which these PDU counts have been collected.')
isisPacketCountDirection = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("receiving", 2))))
if mibBuilder.loadTexts: isisPacketCountDirection.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDirection.setDescription('Were we sending or receiving these PDUs?')
isisPacketCountIIHello = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountIIHello.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisPacketCountIIHello.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountIIHello.setDescription('The number of IS-IS Hello PDUs seen in this direction at this level. Point-to-Point IIH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
isisPacketCountISHello = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountISHello.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountISHello.setDescription('The number of ES-IS Hello PDUs seen in this direction. ISH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
isisPacketCountESHello = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountESHello.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountESHello.setDescription('The number of ES Hello PDUs seen in this direction. ESH PDUs are counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at L2 otherwise.')
isisPacketCountLSP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 6), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountLSP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisPacketCountLSP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountLSP.setDescription('The number of IS-IS LSPs seen in this direction at this level.')
isisPacketCountCSNP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 7), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountCSNP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisPacketCountCSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountCSNP.setDescription('The number of IS-IS CSNPs seen in this direction at this level.')
isisPacketCountPSNP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 8), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountPSNP.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisPacketCountPSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountPSNP.setDescription('The number of IS-IS PSNPs seen in this direction at this level.')
isisPacketCountUnknown = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 9), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountUnknown.setReference('{ISIS.aoi iSISControlPDUsSent (43)}')
if mibBuilder.loadTexts: isisPacketCountUnknown.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountUnknown.setDescription('The number of unknown IS-IS PDUs seen at this level.')
isisPacketCountDiscardedIIH = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 10), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountDiscardedIIH.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDiscardedIIH.setDescription('The number of IIH PDUs that have been discarded. This field is always zero for outgoing PDUs.')
isisPacketCountDiscardedLSP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 11), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountDiscardedLSP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDiscardedLSP.setDescription('The number of LSP PDUs that have been discarded by the SDC component of DC-ISIS. This field is always zero for outgoing PDUs.')
isisPacketCountDiscardedCSNP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 12), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountDiscardedCSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDiscardedCSNP.setDescription('The number of CSNP PDUs that have been discarded by the SDC component of DC-ISIS. This field is always zero for outgoing PDUs.')
isisPacketCountDiscardedPSNP = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 5, 3, 1, 13), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountDiscardedPSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDiscardedPSNP.setDescription('The number of PSNP PDUs that have been discarded by the SDC component of DC-ISIS. This field is always zero for outgoing PDUs.')
isisISAdjTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1), )
if mibBuilder.loadTexts: isisISAdjTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
isisISAdjEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisISAdjIndex"))
if mibBuilder.loadTexts: isisISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjEntry.setDescription('Each entry corresponds to one adjacency to an Intermediate System on this system.')
isisISAdjIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIndex.setDescription('A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is automatically assigned by the system when the adjacency is created.')
isisISAdjState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjState.setReference('{ISIS.aoi adjacencyState (78)}')
if mibBuilder.loadTexts: isisISAdjState.setStatus('current')
if mibBuilder.loadTexts: isisISAdjState.setDescription('The state of the adjacency.')
isisISAdj3WayState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("up", 0), ("initializing", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdj3WayState.setReference('{ RFC 3373 }')
if mibBuilder.loadTexts: isisISAdj3WayState.setStatus('current')
if mibBuilder.loadTexts: isisISAdj3WayState.setDescription('The 3Way state of the adjacency. These are picked to match the historical on-the-wire representation of the 3Way state, and are not intended to match isisISAdjState.')
isisISAdjNeighSNPAAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 4), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setReference('{ISIS.aoi neighbourSNPAAddress (79)}')
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
isisISAdjNeighSysType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l1IntermediateSystem", 1), ("l2IntermediateSystem", 2), ("l1L2IntermediateSystem", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSysType.setReference('{ISIS.aoi neighbourSystemType (80)}')
if mibBuilder.loadTexts: isisISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSysType.setDescription('The type of the neighboring system.')
isisISAdjNeighSysID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 6), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSysID.setReference('{ISIS.aoi neighbourSystemIds (83)}')
if mibBuilder.loadTexts: isisISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSysID.setDescription('The system ID of the neighboring Intermediate System.')
isisISAdjNbrExtendedCircID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNbrExtendedCircID.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNbrExtendedCircID.setDescription('The 4 byte Extended Circuit ID learned from the Neighbor during 3-way handshake, or 0.')
isisISAdjUsage = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reserved", 0), ("level1", 1), ("level2", 2), ("level1and2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjUsage.setReference('{ISIS.aoi adjacencyUsage (82)}')
if mibBuilder.loadTexts: isisISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: isisISAdjUsage.setDescription('How is the adjacency used? On a point-to-point link, this might be level1and2, but on a LAN, the usage will be level1 on the adjacency between peers at L1, and level2 for the adjacency between peers at L2.')
isisISAdjHoldTimer = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 9), Unsigned16TC().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjHoldTimer.setReference('{ISIS.aoi holdingTimer (85)}')
if mibBuilder.loadTexts: isisISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: isisISAdjHoldTimer.setDescription('The holding time in seconds for this adjacency. This value is based on received IIH PDUs and the elapsed time since receipt.')
isisISAdjNeighPriority = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 10), ISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighPriority.setReference('{ISIS.aoi lANPriority (86)}')
if mibBuilder.loadTexts: isisISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for becoming the Designated Intermediate System.')
isisISAdjLastUpTime = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 11), TimeTicks()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjLastUpTime.setStatus('current')
if mibBuilder.loadTexts: isisISAdjLastUpTime.setDescription("If the isisISAdjState is in state 'up', the value of sysUpTime when the adjacency most recently entered the state 'up', or 0 if it has never been in state 'up'.")
isisISAdjRestartCapable = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjRestartCapable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjRestartCapable.setDescription("Does the neighbor support restart signalling? This object is set to 'true' if the peer includes the restart TLV in IIH PDUs.")
isisISAdjPeerRestartState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("restartingNoHelp", 2), ("helpingRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjPeerRestartState.setStatus('current')
if mibBuilder.loadTexts: isisISAdjPeerRestartState.setDescription("Is the peer currently restarting? Set to 'notRestarting' if the neighbor is not restarting (is not including a restart TLV in the IIH, or is not setting the RR bit). Set to 'restartingNoHelp' if the neighbor is restarting (is including a restart TLV with the RR bit in IIH PDUs), but the local node is not helping the restart. Set to 'helpingRestart' if the neighbor is restarting and the local node is helping the restart.")
isisISAdjSuppressed = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjSuppressed.setStatus('current')
if mibBuilder.loadTexts: isisISAdjSuppressed.setDescription("Has the peer requested that the adjacency be suppressed? If set to 'true', the adjacency will not be added to the local LSP. This object is set to 'true' if the peer sets the SA bit in the restart TLV in IIH PDUs.")
isisISAdjNeighLanID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighLanID.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighLanID.setDescription('On a broadcast circuit, the LAN ID reported by the neighbor for the Designated Intermediate System on this circuit at this level. For a non-broadcast circuit, or if, for any reason, the neighbor is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
isisISAdjNeighHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighHostname.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighHostname.setDescription("The hostname corresponding to isisISAdjNeighSysID. This is the null string if isisSdEntMapHostnames is 'false' or if no hostname is known.")
isisISAdjNeighLanIDHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 1, 1, 17), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighLanIDHostname.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighLanIDHostname.setDescription("The hostname corresponding to the system ID part of the isisISAdjNeighLanID object. This is the null string if the isisISAdjNeighLanID object is null, if isisSdEntMapHostnames is 'false', or if no hostname is known.")
isisISAdjMtSupportedTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 5), )
if mibBuilder.loadTexts: isisISAdjMtSupportedTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjMtSupportedTable.setDescription('This table contains the set of topologies supported by neighboring Intermediate Systems as reported in received IIH PDUs.')
isisISAdjMtSupportedEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 5, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisISAdjIndex"), (0, "DC-ISIS-MIB", "isisISAdjMtSuppMtId"))
if mibBuilder.loadTexts: isisISAdjMtSupportedEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjMtSupportedEntry.setDescription('Each entry contains one topology reported by a neighboring Intermediate System in its IIH PDUs.')
isisISAdjMtSuppMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisISAdjMtSuppMtId.setStatus('current')
if mibBuilder.loadTexts: isisISAdjMtSuppMtId.setDescription('A topology that is supported on this adjacency.')
isisISAdjMtSuppLocalSupport = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 5, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjMtSuppLocalSupport.setStatus('current')
if mibBuilder.loadTexts: isisISAdjMtSuppLocalSupport.setDescription("Whether this topology is also supported locally on this circuit. The value is 'true' if there is a corresponding row in the isisMtCircStatusTable with isisMtCircStatusOperState set to 'operStatusUp'. In this case, IS-IS will advertise reachability to this neighbor in this topology.")
isisISAdjAreaAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 2), )
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setReference('{ISIS.aoi areaAddressesOfNeighbour (84)}')
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
isisISAdjAreaAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisISAdjIndex"), (0, "DC-ISIS-MIB", "isisISAdjAreaAddrIndex"))
if mibBuilder.loadTexts: isisISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs.')
isisISAdjAreaAddrIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjAreaAddrIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrIndex.setDescription('An index for the areas associated with one neighbor. This provides a simple way to walk the table.')
isisISAdjAreaAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 2, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from the neighbor.')
isisISAdjIPAddrTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 3), )
if mibBuilder.loadTexts: isisISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrTable.setDescription("This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs. If the isisSysRestrictLanAdjsToSubnet object in isisSysTable is set to 'true' then for an IPv4 broadcast circuit, only IP addresses on the same subnet as the local circuit are included in this table.")
isisISAdjIPAddrEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 3, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisISAdjIndex"), (0, "DC-ISIS-MIB", "isisISAdjIPAddrIndex"))
if mibBuilder.loadTexts: isisISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs.')
isisISAdjIPAddrIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjIPAddrIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrIndex.setDescription('An index to this table which identifies the IP addresss to which this entry belongs.')
isisISAdjIPAddrType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjIPAddrType.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrType.setDescription('The type of one IP Address as reported in IIH PDUs received from the neighbor.')
isisISAdjIPAddrAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjIPAddrAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrAddress.setDescription('One IP Address as reported in IIH PDUs received from the neighbor.')
isisISAdjProtSuppTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 4), )
if mibBuilder.loadTexts: isisISAdjProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs.')
isisISAdjProtSuppEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 4, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisCircIndex"), (0, "DC-ISIS-MIB", "isisISAdjIndex"), (0, "DC-ISIS-MIB", "isisISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: isisISAdjProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs.')
isisISAdjProtSuppProtocol = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 4, 1, 1), SupportedProtocol())
if mibBuilder.loadTexts: isisISAdjProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received from the neighbor.')
isisISAdjProtSuppLocalSupport = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjProtSuppLocalSupport.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppLocalSupport.setDescription("Whether local configuration allows use of this protocol to this neighbor. The value 'false' indicates that the protocol is unusable.")
isisISAdjProtSuppBfdStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notRequired", 0), ("active", 1), ("inactive", 2), ("adminDown", 3), ("noContact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjProtSuppBfdStatus.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppBfdStatus.setDescription('BFD session state for this protocol. The state inactive(2) indicates that the protocol is unusable for forwarding because a BFD session cannot be established or has failed.')
isisIPRATable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1), )
if mibBuilder.loadTexts: isisIPRATable.setStatus('current')
if mibBuilder.loadTexts: isisIPRATable.setDescription('The table of IP Reachable Addresses to networks, subnetworks or hosts, learned automatically. DC-ISIS does not support the manual addition of entries using this table. This table is read-only. In order to specify reachable addresses manually, configure a static route in the Address Family Manager, and configure the AFM to pass the static route into DC-ISIS. In DC-RTM, this can be done using the static routes table (rtmStaticRtTable), and the redistribution table (rtmRedistTable).')
isisIPRAEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisIPRADestType"), (0, "DC-ISIS-MIB", "isisIPRADest"), (0, "DC-ISIS-MIB", "isisIPRADestPrefixLen"), (0, "DC-ISIS-MIB", "isisIPRANextHopIndex"))
if mibBuilder.loadTexts: isisIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: isisIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network, subnetwork or host. Each IP Reachable Address may have multiple entries in the table, one for each equal cost path to the reachable address.')
isisIPRADestType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisIPRADestType.setStatus('current')
if mibBuilder.loadTexts: isisIPRADestType.setDescription('The type of this IP Reachable Address.')
isisIPRADest = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisIPRADest.setStatus('current')
if mibBuilder.loadTexts: isisIPRADest.setDescription('The destination of this IP Reachable Address. This is either a network address, subnetwork address or host address.')
isisIPRADestPrefixLen = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisIPRADestPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisIPRADestPrefixLen.setDescription('The length of the IP Netmask for Reachability Address.')
isisIPRANextHopIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: isisIPRANextHopIndex.setStatus('current')
if mibBuilder.loadTexts: isisIPRANextHopIndex.setDescription('Index of next hop. Used when there are multiple Equal Cost Multipath alternatives for the same destination.')
isisIPRANextHopType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRANextHopType.setStatus('current')
if mibBuilder.loadTexts: isisIPRANextHopType.setDescription('The type of the IP next hop address. For the DC-ISIS implementation, this field is not stored and is therefore not returned in GETs for this MIB.')
isisIPRANextHop = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRANextHop.setStatus('current')
if mibBuilder.loadTexts: isisIPRANextHop.setDescription('The IP next hop to this destination. For the DC-ISIS implementation, this field is not stored and is therefore not returned in GETs for this MIB.')
isisIPRAType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAType.setStatus('current')
if mibBuilder.loadTexts: isisIPRAType.setDescription('The type of this IP Reachable Address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol. DC-ISIS only supports automatic entries in this table. These are learnt from an Address Family Manager (for example, DC-RTM), or from the I3 stub.')
isisIPRAExistState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAExistState.setStatus('current')
if mibBuilder.loadTexts: isisIPRAExistState.setDescription('The state of this IP Reachable Address. This object follows the ExistenceState behavior.')
isisIPRAAdminState = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 9), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAAdminState.setStatus('current')
if mibBuilder.loadTexts: isisIPRAAdminState.setDescription('The administrative state of the IP Reachable Address. This object follows the AdminState behavior.')
isisIPRAMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 10), DefaultMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAMetric.setStatus('current')
if mibBuilder.loadTexts: isisIPRAMetric.setDescription('The metric value for reaching the specified destination over this circuit.')
isisIPRAMetricType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 11), MetricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAMetricType.setStatus('current')
if mibBuilder.loadTexts: isisIPRAMetricType.setDescription('Indicates whether the metric is internal or external.')
isisIPRAFullMetric = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 12), FullMetric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAFullMetric.setStatus('current')
if mibBuilder.loadTexts: isisIPRAFullMetric.setDescription('The wide metric value for reaching the specified destination over this circuit.')
isisIPRASNPAAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 13), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisIPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. DC-ISIS does not support this field.')
isisIPRASourceType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("static", 1), ("direct", 2), ("ospfv2", 3), ("ospfv3", 4), ("isis", 5), ("rip", 6), ("igrp", 7), ("eigrp", 8), ("bgp", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRASourceType.setStatus('current')
if mibBuilder.loadTexts: isisIPRASourceType.setDescription('The origin of this route.')
isisIPRAMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisIPRAMtId.setStatus('current')
if mibBuilder.loadTexts: isisIPRAMtId.setDescription('The topology that this reachable address is in.')
isisLSPSummaryTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1), )
if mibBuilder.loadTexts: isisLSPSummaryTable.setStatus('current')
if mibBuilder.loadTexts: isisLSPSummaryTable.setDescription('The table of LSP Headers.')
isisLSPSummaryEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisLSPLevel"), (0, "DC-ISIS-MIB", "isisLSPID"))
if mibBuilder.loadTexts: isisLSPSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: isisLSPSummaryEntry.setDescription('Each entry provides a summary describing an LSP currently stored in the system.')
isisLSPLevel = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 1), ISLevel())
if mibBuilder.loadTexts: isisLSPLevel.setStatus('current')
if mibBuilder.loadTexts: isisLSPLevel.setDescription('At which level does this LSP appear?')
isisLSPID = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 2), LinkStatePDUID())
if mibBuilder.loadTexts: isisLSPID.setStatus('current')
if mibBuilder.loadTexts: isisLSPID.setDescription('The 8 byte LSP ID, consisting of the SystemID, Circuit ID, and Fragment Number.')
isisLSPSeq = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPSeq.setStatus('current')
if mibBuilder.loadTexts: isisLSPSeq.setDescription('The sequence number for this LSP.')
isisLSPZeroLife = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPZeroLife.setStatus('current')
if mibBuilder.loadTexts: isisLSPZeroLife.setDescription('Is this LSP being purged by this System?')
isisLSPChecksum = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 5), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPChecksum.setStatus('current')
if mibBuilder.loadTexts: isisLSPChecksum.setDescription('The 16 bit Fletcher Checksum.')
isisLSPLifetimeRemain = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 6), Unsigned16TC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPLifetimeRemain.setStatus('current')
if mibBuilder.loadTexts: isisLSPLifetimeRemain.setDescription("The remaining lifetime in seconds for this LSP. For a current LSP (isisLSPZeroLife is 'false'), this indicates the time remaining before the LSP will expire. For an LSP being purged from the system (isisLSPZeroLife is 'true'), the LSP remains in the database for ZeroAgeLifetime, and this will indicate the time remaining before final deletion of the LSP.")
isisLSPPDULength = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 7), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPPDULength.setStatus('current')
if mibBuilder.loadTexts: isisLSPPDULength.setDescription('The length of this LSP.')
isisLSPAttributes = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 8), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPAttributes.setStatus('current')
if mibBuilder.loadTexts: isisLSPAttributes.setDescription('Flags carried by the LSP.')
isisLSPIDHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPIDHostname.setStatus('current')
if mibBuilder.loadTexts: isisLSPIDHostname.setDescription('The hostname corresponding to the system ID part of the isisLSPID object. This is the null string if no hostname is known.')
isisLSPTLVTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2), )
if mibBuilder.loadTexts: isisLSPTLVTable.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVTable.setDescription('The contents of each LSP.')
isisLSPTLVEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisLSPLevel"), (0, "DC-ISIS-MIB", "isisLSPID"), (0, "DC-ISIS-MIB", "isisLSPTLVIndex"))
if mibBuilder.loadTexts: isisLSPTLVEntry.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVEntry.setDescription('Each entry describes an LSP current stored in the system.')
isisLSPTLVIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: isisLSPTLVIndex.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVIndex.setDescription('The index of this TLV in the LSP. The first TLV has index 1 and the Nth TLV has an index of N.')
isisLSPTLVSeq = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVSeq.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVSeq.setDescription('The sequence number for this LSP.')
isisLSPTLVChecksum = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 3), Unsigned16TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVChecksum.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVChecksum.setDescription('The 16 bit Fletcher Checksum.')
isisLSPTLVType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 4), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVType.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVType.setDescription('The type of this TLV.')
isisLSPTLVLen = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 5), Unsigned8TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVLen.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVLen.setDescription('The length of this TLV.')
isisLSPTLVValue = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVValue.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVValue.setDescription('The value of this TLV.')
isisLSPTLVHostname = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 9, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisLSPTLVHostname.setStatus('current')
if mibBuilder.loadTexts: isisLSPTLVHostname.setDescription('The hostname corresponding to the system ID part of the isisLSPID object. This is the null string if no hostname is known.')
isisPmSjTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 1), )
if mibBuilder.loadTexts: isisPmSjTable.setStatus('current')
if mibBuilder.loadTexts: isisPmSjTable.setDescription('This table contains information on joins on which the Protocol Manager acts as a slave. Each row in this table represents one slave join in the Protocol Manager.')
isisPmSjEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisPmSjInterface"), (0, "DC-ISIS-MIB", "isisPmSjMasterEntity"))
if mibBuilder.loadTexts: isisPmSjEntry.setStatus('current')
if mibBuilder.loadTexts: isisPmSjEntry.setDescription('Represents a join for which the Protocol Manager is slave.')
isisPmSjInterface = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 1, 1, 1), IsisPmInterfaceId())
if mibBuilder.loadTexts: isisPmSjInterface.setStatus('current')
if mibBuilder.loadTexts: isisPmSjInterface.setDescription('Identifies the interface provided on this slave join.')
isisPmSjMasterEntity = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: isisPmSjMasterEntity.setStatus('current')
if mibBuilder.loadTexts: isisPmSjMasterEntity.setDescription('Index which uniquely identifies the master entity among other entities of the same component within this instance of DC-ISIS.')
isisPmSjJoinStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 1, 1, 3), IsisSjStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPmSjJoinStatus.setStatus('current')
if mibBuilder.loadTexts: isisPmSjJoinStatus.setDescription('The status of the slave join.')
isisPmMjTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2), )
if mibBuilder.loadTexts: isisPmMjTable.setStatus('current')
if mibBuilder.loadTexts: isisPmMjTable.setDescription('This table controls which entities the Protocol Manager should join to as master. Each join is represented by a row in this table. The status of each join is represented by a read-only object within each row. Only routing protocol joins may be configured in this MIB. Rows in this table for other join types are read only.')
isisPmMjEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisPmMjInterface"), (0, "DC-ISIS-MIB", "isisPmMjSlaveEntity"), (0, "DC-ISIS-MIB", "isisPmMjAddrType"), (0, "DC-ISIS-MIB", "isisPmMjMtId"))
if mibBuilder.loadTexts: isisPmMjEntry.setStatus('current')
if mibBuilder.loadTexts: isisPmMjEntry.setDescription('Represents a join for which the Protocol Manager is master.')
isisPmMjInterface = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 1), IsisPmInterfaceId())
if mibBuilder.loadTexts: isisPmMjInterface.setStatus('current')
if mibBuilder.loadTexts: isisPmMjInterface.setDescription('Identifies the interface required of this master join. This object follows the index behavior.')
isisPmMjSlaveEntity = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: isisPmMjSlaveEntity.setStatus('current')
if mibBuilder.loadTexts: isisPmMjSlaveEntity.setDescription('Identifies the slave entity to join with. This index is used in the join user data, to enable FTI-specific code within System Manager to select a suitable slave entity. This object follows the index behavior.')
isisPmMjAddrType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 3), IsisAddrType())
if mibBuilder.loadTexts: isisPmMjAddrType.setStatus('current')
if mibBuilder.loadTexts: isisPmMjAddrType.setDescription("Identifies the slave entity to join with. This is used along with the isisPmMjSlaveEntity (with address subtype 'none') in the join user data on an RPI join, to enable FTI-specific code within System Manager to select a suitable slave entity. The value is 'none' if isisPmMjInterface is not ifRtProtoInput. This object follows the index behavior.")
isisPmMjMtId = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: isisPmMjMtId.setStatus('current')
if mibBuilder.loadTexts: isisPmMjMtId.setDescription('The topology that this join is for. Note that this only applies to RPI joins. If multi-topology IS-IS is not supported then this field should be set to zero. This object follows the index behavior.')
isisPmMjRowStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisPmMjRowStatus.setStatus('current')
if mibBuilder.loadTexts: isisPmMjRowStatus.setDescription('The row status for this master join, used to create and destroy table entries.')
isisPmMjAdminStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 5), IsisAdminStatus().clone('adminStatusUp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisPmMjAdminStatus.setStatus('current')
if mibBuilder.loadTexts: isisPmMjAdminStatus.setDescription('The administrative status of this master join, used to start and stop the join.')
isisPmMjOperStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 6), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPmMjOperStatus.setStatus('current')
if mibBuilder.loadTexts: isisPmMjOperStatus.setDescription('The current operational status of this master join.')
isisPmMjJoinStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 7), IsisMjStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPmMjJoinStatus.setStatus('current')
if mibBuilder.loadTexts: isisPmMjJoinStatus.setDescription('The status of the master join.')
isisPmMjSubAddrFamily = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisPmMjSubAddrFamily.setStatus('current')
if mibBuilder.loadTexts: isisPmMjSubAddrFamily.setDescription('Identifies the sub address family this join is for. Note that this only applies to RPI joins. The value is ignored if isisPmMjInterface is not ifRtProtoInput.')
isisIgpShortcutTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3), )
if mibBuilder.loadTexts: isisIgpShortcutTable.setStatus('current')
if mibBuilder.loadTexts: isisIgpShortcutTable.setDescription('The table of IGP shortcut tunnel interfaces known to DC-ISIS.')
isisIgpShortcutEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSysInstance"), (0, "DC-ISIS-MIB", "isisShortcutIfIndex"))
if mibBuilder.loadTexts: isisIgpShortcutEntry.setStatus('current')
if mibBuilder.loadTexts: isisIgpShortcutEntry.setDescription('Each entry corresponds to one IGP shortcut tunnel interface known to DC-ISIS on this system.')
isisShortcutIfIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: isisShortcutIfIndex.setStatus('current')
if mibBuilder.loadTexts: isisShortcutIfIndex.setDescription('The value of ifIndex for the IGP shortcut tunnel interface.')
isisShortcutRemoteAddressType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: isisShortcutRemoteAddressType.setDescription('The Type of IP address for this remote address.')
isisShortcutRemoteAddress = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: isisShortcutRemoteAddress.setDescription('The IP Address value for this remote address.')
isisShortcutMetricType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 4), IgpShortcutMetricType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutMetricType.setStatus('current')
if mibBuilder.loadTexts: isisShortcutMetricType.setDescription("The type of metric value assigned to this IGP shortcut. The type of metric value can be one of the following. - 'metricTypeAbsolute'; the metric defined by isisShortcutMetricValue is used as the cost of the IGP shortcut. - 'metricTypeRelative'; the metric value defined by isisShortcutMetricValue is added to the IGP-calculated cost of reaching the egress of the shortcut to determine the cost of the IGP shortcut. Note that, in this case, the metric value may be zero, positive or negative. Note also that a minimum value of 1 is defined for the result of the sum of the IGP-calculated cost and a relative metric value.")
isisShortcutMetricValue = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutMetricValue.setStatus('current')
if mibBuilder.loadTexts: isisShortcutMetricValue.setDescription("The metric assigned to this IGP shortcut. If isisShortcutMetricType is set to 'metricTypeAbsolute' then this field takes a value in the range of 1 - 16777215. If isisShortcutMetricType is set to 'metricTypeRelative' then this field takes a value in the range of -16777214 to 16777215.")
isisShortcutOperStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 6), IfOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutOperStatus.setStatus('current')
if mibBuilder.loadTexts: isisShortcutOperStatus.setDescription("The operational status of the IGP shortcut interface. The IGP shortcut interface is only usable by DC-ISIS if isisShortcutOperStatus is set to 'up'.")
isisShortcutPendingDeletion = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 11, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisShortcutPendingDeletion.setStatus('current')
if mibBuilder.loadTexts: isisShortcutPendingDeletion.setDescription("If 'true' then the IGP shortcut interface has been deleted but has not yet been removed from DC-ISIS because it might still be in use as a TE-tunnel next hop.")
isisSdEntTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1), )
if mibBuilder.loadTexts: isisSdEntTable.setStatus('current')
if mibBuilder.loadTexts: isisSdEntTable.setDescription('Each entry in this table represents an SDC entity.')
isisSdEntEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSdEntIndex"))
if mibBuilder.loadTexts: isisSdEntEntry.setStatus('current')
if mibBuilder.loadTexts: isisSdEntEntry.setDescription('Each entry represents an SDC entity.')
isisSdEntIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: isisSdEntIndex.setStatus('current')
if mibBuilder.loadTexts: isisSdEntIndex.setDescription('Non-zero index which identifies an SDC entity.')
isisSdEntRowStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntRowStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdEntRowStatus.setDescription('The row status for this SDC Entity Table entry, used to create and destroy table entries.')
isisSdEntAdminStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 3), IsisAdminStatus().clone('adminStatusUp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntAdminStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdEntAdminStatus.setDescription('The administrative status of this SDC entity, used to activate and deactivate SDC.')
isisSdEntOperStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 4), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSdEntOperStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdEntOperStatus.setDescription('The current operational status of this SDC entity.')
isisSdEntMapHostnames = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntMapHostnames.setStatus('current')
if mibBuilder.loadTexts: isisSdEntMapHostnames.setDescription("Should SDC map system IDs to hostnames? If 'true', SDC will fill in the isisISAdjNeighHostname and isisISAdjNeighLanIDHostname objects (if a hostname is known), and will map system IDs to hostnames in PD logs. Setting this object to 'true' will cause a small occupancy increase, because SDC will set up a database of mappings between the system IDs and the corresponding hostnames.")
isisSdEntAuthSNPs = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntAuthSNPs.setStatus('current')
if mibBuilder.loadTexts: isisSdEntAuthSNPs.setDescription("Should SDC authenticate SNP packets? If 'false', SDC will not check the authentication on SNP packets. If 'true' then it will. Setting this field is sometimes required for interoperability with other routers.")
isisSdEntBfdProviderIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 7), EntityIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntBfdProviderIndex.setStatus('current')
if mibBuilder.loadTexts: isisSdEntBfdProviderIndex.setDescription('The entity index for the Bidirectional Forwarding Detection (BFD) provider to which this SDC entity should join. Zero indicates that no BFD provider is available, or that SDC should not join to any BFD provider. This field follows the replaceOnlyWhileDisabled behavior.')
isisSdEntStopAdjDuplIDs = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdEntStopAdjDuplIDs.setStatus('current')
if mibBuilder.loadTexts: isisSdEntStopAdjDuplIDs.setDescription('Flag indicating whether this SDC should prevent an adjacency forming to a neighbor with the same System ID but a different SNPA address as an existing neighbor over the same circuit and level. This field can be changed while SDC is active. Doing so will not affect existing adjacencies, but will affect whether further adjacencies form.')
isisSdMjTable = MibTable((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2), )
if mibBuilder.loadTexts: isisSdMjTable.setStatus('current')
if mibBuilder.loadTexts: isisSdMjTable.setDescription('This table controls which entities an SDC entity should join to as master. Each join is represented by a row in this table. The status of each join is represented by a read-only object within each row.')
isisSdMjEntry = MibTableRow((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1), ).setIndexNames((0, "DC-ISIS-MIB", "isisSdEntIndex"), (0, "DC-ISIS-MIB", "isisSdMjInterface"))
if mibBuilder.loadTexts: isisSdMjEntry.setStatus('current')
if mibBuilder.loadTexts: isisSdMjEntry.setDescription('Represents a join for which this SDC entity is master.')
isisSdMjInterface = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 1), IsisSdInterfaceId())
if mibBuilder.loadTexts: isisSdMjInterface.setStatus('current')
if mibBuilder.loadTexts: isisSdMjInterface.setDescription('Identifies the interface required of this master join. Since an SDC only has a single join on any of its interfaces, this serves with the SDC entity index in uniquely identifying the join. This field follows the replaceOnlyWhileDisabled behavior.')
isisSdMjRowStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdMjRowStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdMjRowStatus.setDescription('The row status for this master join, used to create and destroy table entries.')
isisSdMjAdminStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 3), IsisAdminStatus().clone('adminStatusUp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdMjAdminStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdMjAdminStatus.setDescription('The administrative status of this master join, used to start and stop the join.')
isisSdMjOperStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 4), IsisOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSdMjOperStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdMjOperStatus.setDescription('The current operational status of this master join.')
isisSdMjEntityIndex = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdMjEntityIndex.setStatus('current')
if mibBuilder.loadTexts: isisSdMjEntityIndex.setDescription('Identifies the slave entity to join with. This index (possibly along with isisSdMjEntityType - see below) is used in the join user data, to enable FTI-specific code within System Manager to select a suitable slave entity. This field follows the replaceOnlyWhileDisabled behavior.')
isisSdMjEntityType = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 6), IsisSdEntityType().clone('ifProtocolManager')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSdMjEntityType.setStatus('current')
if mibBuilder.loadTexts: isisSdMjEntityType.setDescription('If isisSdMjInterface is ifSubnetDependent, this field indicates the type of entity to join with. This index along with isisSdMjEntityType is used in the join user data to enable FTI-specific code within System Manager to select a suitable slave entity. This field follows the replaceOnlyWhileDisabled behavior.')
isisSdMjJoinStatus = MibTableColumn((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 12, 2, 1, 7), IsisMjStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSdMjJoinStatus.setStatus('current')
if mibBuilder.loadTexts: isisSdMjJoinStatus.setDescription('The status of the master join.')
isisNotificationEntry = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1))
isisPduLspId = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 1), LinkStatePDUID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisPduLspId.setStatus('current')
if mibBuilder.loadTexts: isisPduLspId.setDescription('An Octet String that uniquely identifies a Link State PDU.')
isisPduFragment = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 2), IsisPDUHeader()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisPduFragment.setStatus('current')
if mibBuilder.loadTexts: isisPduFragment.setDescription('Holds up to 64 initial bytes of a PDU that triggered the notification.')
isisPduFieldLen = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 3), Unsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisPduFieldLen.setStatus('current')
if mibBuilder.loadTexts: isisPduFieldLen.setDescription('Holds the System ID length reported in PDU we received.')
isisPduMaxAreaAddress = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 4), Unsigned8TC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisPduMaxAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisPduMaxAreaAddress.setDescription('Holds the Max Area Addresses reported in a PDU we received.')
isisAdjState = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("initializing", 2), ("up", 3), ("failed", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisAdjState.setStatus('current')
if mibBuilder.loadTexts: isisAdjState.setDescription('The current state of an adjacency.')
isisErrorOffset = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisErrorOffset.setStatus('current')
if mibBuilder.loadTexts: isisErrorOffset.setDescription('An offset to a problem in a PDU. If the problem is a malformed TLV, this points to the begining of the TLV. If the problem is in the header, this points to the byte that is suspicious.')
isisErrorTLVType = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisErrorTLVType.setStatus('current')
if mibBuilder.loadTexts: isisErrorTLVType.setDescription('The type for a malformed TLV.')
isisNotificationSysInstance = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationSysInstance.setStatus('current')
if mibBuilder.loadTexts: isisNotificationSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance for this notification.')
isisNotificationSysLevelIndex = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 9), IsisAdjLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationSysLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisNotificationSysLevelIndex.setDescription('The system level for this notification.')
isisNotificationAreaAddress = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 10), OSINSAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisNotificationAreaAddress.setDescription('An Area Address.')
isisNotificationISAdjIndex = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisNotificationISAdjIndex.setDescription('A unique value identifying the IS adjacency from all other such adjacencies on this circuit.')
isisNotificationDisState = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("none", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationDisState.setStatus('current')
if mibBuilder.loadTexts: isisNotificationDisState.setDescription('The current state of the DIS.')
isisNotificationAttachedState = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attached", 1), ("notAttached", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationAttachedState.setStatus('current')
if mibBuilder.loadTexts: isisNotificationAttachedState.setDescription('The current state of attachment.')
isisNotificationNeighSysID = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 14), SystemID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationNeighSysID.setStatus('current')
if mibBuilder.loadTexts: isisNotificationNeighSysID.setDescription('The system ID of the neighboring Intermediate System.')
isisNotificationMtId = MibScalar((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: isisNotificationMtId.setStatus('current')
if mibBuilder.loadTexts: isisNotificationMtId.setDescription('The topology for which the IS-IS instance is entering or leaving attached state.')
isisTrapPrefix = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0))
isisDatabaseOverload = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 1)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisSysLevelOverloadState"))
if mibBuilder.loadTexts: isisDatabaseOverload.setStatus('current')
if mibBuilder.loadTexts: isisDatabaseOverload.setDescription('This notification is generated when the system enters or leaves the Overload state. The number of times this has been generated and cleared is kept track of by isisSysStatLSPDbaseOloads.')
isisManualAddressDrops = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 2)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationAreaAddress"))
if mibBuilder.loadTexts: isisManualAddressDrops.setStatus('current')
if mibBuilder.loadTexts: isisManualAddressDrops.setDescription('This notification is generated when one of the manual areaAddresses assigned to this system is ignored when computing routes. The object isisNotificationAreaAddress describes the area that has been dropped. The number of times this event has been generated is counted by isisSysManAddrDropFromAreas. This notification is edge triggered, and should not be regenerated until an address that was used in the previous computation has been dropped.')
isisIDLenMismatch = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 3)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisPduFieldLen"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduFragment"))
if mibBuilder.loadTexts: isisIDLenMismatch.setStatus('current')
if mibBuilder.loadTexts: isisIDLenMismatch.setDescription('A notification sent when we receive a PDU with a different value of the System ID Length. This notification includes an index to identify the circuit where we saw the PDU and the header of the PDU which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received on the same circuit.')
isisMaxAreaAddressesMismatch = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 4)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisPduMaxAreaAddress"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduFragment"))
if mibBuilder.loadTexts: isisMaxAreaAddressesMismatch.setStatus('current')
if mibBuilder.loadTexts: isisMaxAreaAddressesMismatch.setDescription('A notification sent when we receive a PDU with a different value of the Maximum Area Addresses. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
isisOwnLSPPurge = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 5)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduLspId"))
if mibBuilder.loadTexts: isisOwnLSPPurge.setStatus('current')
if mibBuilder.loadTexts: isisOwnLSPPurge.setDescription('A notification sent when we receive a PDU with our systemID and zero age. This notification includes the circuit Index and router ID from the LSP, if available, which may help a network manager identify the source of the confusion.')
isisAreaMismatch = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 6)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduFragment"))
if mibBuilder.loadTexts: isisAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: isisAreaMismatch.setDescription('A notification sent when we receive a Hello PDU from an IS which does not share any area address. This notification includes the header of the packet, which may help a network manager identify the source of the confusion. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the same circuit.')
isisRejectedAdjacency = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 7)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduFragment"))
if mibBuilder.loadTexts: isisRejectedAdjacency.setStatus('current')
if mibBuilder.loadTexts: isisRejectedAdjacency.setDescription('A notification sent when we receive a Hello PDU from an IS, but do not establish an adjacency for some reason. This should be an edge-triggered notification. We should not send a second notification about PDUs received from the circuit.')
isisAdjacencyChange = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 8)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduLspId"), ("DC-ISIS-MIB", "isisAdjState"), ("DC-ISIS-MIB", "isisNotificationISAdjIndex"), ("DC-ISIS-MIB", "isisISAdjNeighSNPAAddress"))
if mibBuilder.loadTexts: isisAdjacencyChange.setStatus('current')
if mibBuilder.loadTexts: isisAdjacencyChange.setDescription('A notification sent when an adjacency changes state, entering or leaving state up. The first 6 bytes of the isisPduLspId are the SystemID of the adjacent IS. The isisAdjState is the new state of the adjacency.')
isisLSPErrorDetected = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 9)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisPduLspId"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduFragment"), ("DC-ISIS-MIB", "isisErrorOffset"), ("DC-ISIS-MIB", "isisErrorTLVType"))
if mibBuilder.loadTexts: isisLSPErrorDetected.setStatus('current')
if mibBuilder.loadTexts: isisLSPErrorDetected.setDescription('This notification is generated when we receive an LSP with a parse error. The isisCircIfIndex holds in index of the circuit on which the PDU arrived. The isisPduFragment holds start of the LSP, and the isisErrorOffset points to the problem. If the problem is a malformed TLV, isisErrorOffset points to start of the TLV and isisErrorTLVType holds the value of the type. If the problem is with the LSP header, isisErrorOffset points to the suspicious byte. The number of such LSPs is accumulated in isisSysStatLSPErrors.')
isisAttemptToExceedMaxSequence = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 10)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisPduLspId"))
if mibBuilder.loadTexts: isisAttemptToExceedMaxSequence.setStatus('current')
if mibBuilder.loadTexts: isisAttemptToExceedMaxSequence.setDescription('When the sequence number on an LSP we generate wraps the 32-bit sequence counter, we purge and wait to re-announce this information. This notification describes that event. Since these should not be generated rapidly, we generate an event each time this happens. While the first 6 bytes of the LSPID are ours, the other two contain useful information.')
isisSequenceNumberSkip = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 11)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduLspId"))
if mibBuilder.loadTexts: isisSequenceNumberSkip.setStatus('current')
if mibBuilder.loadTexts: isisSequenceNumberSkip.setDescription('When we receive an LSP with our System ID and different contents, we may need to reissue the LSP with a higher sequence number. We send this notification if we need to increase the sequence number by more than one. If two Intermediate Systems are configured with the same System ID, this notification will fire.')
isisCircIndTable = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 12)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisCircExistState"), ("DC-ISIS-MIB", "isisCircAdminState"), ("DC-ISIS-MIB", "isisCircOperState"), ("DC-ISIS-MIB", "isisCircT1TimerRunning"), ("DC-ISIS-MIB", "isisCircLevel"))
if mibBuilder.loadTexts: isisCircIndTable.setStatus('current')
if mibBuilder.loadTexts: isisCircIndTable.setDescription('A notification sent when the value of isisCircOperState for a circuit changes to operStatusUp, operStatusDown or operStatusActFailed.')
isisExtPassCircuitInd = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 13)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisCircExistState"), ("DC-ISIS-MIB", "isisCircAdminState"), ("DC-ISIS-MIB", "isisCircOperState"), ("DC-ISIS-MIB", "isisCircLevel"))
if mibBuilder.loadTexts: isisExtPassCircuitInd.setStatus('current')
if mibBuilder.loadTexts: isisExtPassCircuitInd.setDescription('A notification sent when the value of isisCircOperState for a circuit not configured to run the IS-IS protocol (such as an external, TE-only or passive circuit) changes to operStatusUp, operStatusDown or operStatusActFailed.')
isisOperStateChange = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 14)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisSysOperStatus"))
if mibBuilder.loadTexts: isisOperStateChange.setStatus('current')
if mibBuilder.loadTexts: isisOperStateChange.setDescription('This notification is generated when the IS-IS system changes operational state to operStatusUp, operStatusDown or operStatusActFailed.')
isisLspAuthFailure = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 15)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisPduLspId"))
if mibBuilder.loadTexts: isisLspAuthFailure.setStatus('current')
if mibBuilder.loadTexts: isisLspAuthFailure.setDescription('An IS-IS instance sends this notification if a received LSP has failed to authenticate.')
isisHelloAuthFailure = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 16)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisNotificationNeighSysID"))
if mibBuilder.loadTexts: isisHelloAuthFailure.setStatus('current')
if mibBuilder.loadTexts: isisHelloAuthFailure.setDescription('An IS-IS instance sends this notification if a received Hello has failed to authenticate.')
isisAttachedStateChange = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 17)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationMtId"), ("DC-ISIS-MIB", "isisNotificationAttachedState"))
if mibBuilder.loadTexts: isisAttachedStateChange.setStatus('current')
if mibBuilder.loadTexts: isisAttachedStateChange.setDescription('This notification is generated when the Attached state for a topology changes and the topology is operationally up.')
isisDisChange = NotificationType((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 2, 0, 18)).setObjects(("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisNotificationDisState"), ("DC-ISIS-MIB", "isisCircLevelDesIS"))
if mibBuilder.loadTexts: isisDisChange.setStatus('current')
if mibBuilder.loadTexts: isisDisChange.setDescription('An IS-IS instance sends this notification if the DIS changes at level 1 or level 2.')
isisGroups = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1))
isisCompliances = MibIdentifier((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 2))
isisCompliance = ModuleCompliance((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 2, 1)).setObjects(("DC-ISIS-MIB", "isisSystemGroup"), ("DC-ISIS-MIB", "isisCircuitGroup"), ("DC-ISIS-MIB", "isisISAdjGroup"), ("DC-ISIS-MIB", "isisNotificationObjectGroup"), ("DC-ISIS-MIB", "isisNotificationGroup"), ("DC-ISIS-MIB", "isisDCAdditionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisCompliance = isisCompliance.setStatus('current')
if mibBuilder.loadTexts: isisCompliance.setDescription('The compliance statement for agents that support the IS-IS MIB')
isisAdvancedCompliance = ModuleCompliance((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 2, 2)).setObjects(("DC-ISIS-MIB", "isisSystemGroup"), ("DC-ISIS-MIB", "isisCircuitGroup"), ("DC-ISIS-MIB", "isisISAdjGroup"), ("DC-ISIS-MIB", "isisNotificationObjectGroup"), ("DC-ISIS-MIB", "isisNotificationGroup"), ("DC-ISIS-MIB", "isisISPDUCounterGroup"), ("DC-ISIS-MIB", "isisISIPRADestGroup"), ("DC-ISIS-MIB", "isisLSPGroup"), ("DC-ISIS-MIB", "isisDCAdditionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisAdvancedCompliance = isisAdvancedCompliance.setStatus('current')
if mibBuilder.loadTexts: isisAdvancedCompliance.setDescription('The advanced compliance statement for agents that support the IS-IS MIB')
isisSystemGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 1)).setObjects(("DC-ISIS-MIB", "isisSysVersion"), ("DC-ISIS-MIB", "isisSysType"), ("DC-ISIS-MIB", "isisSysID"), ("DC-ISIS-MIB", "isisSysMaxPathSplits"), ("DC-ISIS-MIB", "isisSysMaxLSPGenInt"), ("DC-ISIS-MIB", "isisSysPollESHelloRate"), ("DC-ISIS-MIB", "isisSysWaitTime"), ("DC-ISIS-MIB", "isisSysAdminState"), ("DC-ISIS-MIB", "isisSysL2toL1Leaking"), ("DC-ISIS-MIB", "isisSysMaxAge"), ("DC-ISIS-MIB", "isisSysLevelOrigLSPBuffSize"), ("DC-ISIS-MIB", "isisSysLevelMinLSPGenInt"), ("DC-ISIS-MIB", "isisSysLevelOverloadState"), ("DC-ISIS-MIB", "isisSysLevelSetOverload"), ("DC-ISIS-MIB", "isisSysLevelSetOverloadUntil"), ("DC-ISIS-MIB", "isisSysLevelMetricStyle"), ("DC-ISIS-MIB", "isisSysLevelSPFConsiders"), ("DC-ISIS-MIB", "isisSysLevelTEEnabled"), ("DC-ISIS-MIB", "isisSysReceiveLSPBufferSize"), ("DC-ISIS-MIB", "isisManAreaAddrExistState"), ("DC-ISIS-MIB", "isisAreaAddrInLSP"), ("DC-ISIS-MIB", "isisSummAddrExistState"), ("DC-ISIS-MIB", "isisSummAddrMetric"), ("DC-ISIS-MIB", "isisSummAddrFullMetric"), ("DC-ISIS-MIB", "isisRedistributeAddrExistState"), ("DC-ISIS-MIB", "isisRouterHostName"), ("DC-ISIS-MIB", "isisRouterID"), ("DC-ISIS-MIB", "isisSysStatCorrLSPs"), ("DC-ISIS-MIB", "isisSysStatLSPDbaseOloads"), ("DC-ISIS-MIB", "isisSysStatManAddrDropFromAreas"), ("DC-ISIS-MIB", "isisSysStatAttmptToExMaxSeqNums"), ("DC-ISIS-MIB", "isisSysStatSeqNumSkips"), ("DC-ISIS-MIB", "isisSysStatOwnLSPPurges"), ("DC-ISIS-MIB", "isisSysStatIDFieldLenMismatches"), ("DC-ISIS-MIB", "isisSysStatPartChanges"), ("DC-ISIS-MIB", "isisSysStatSPFRuns"), ("DC-ISIS-MIB", "isisSysStatAuthTypeFails"), ("DC-ISIS-MIB", "isisSysStatAuthFails"), ("DC-ISIS-MIB", "isisSysStatLSPError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisSystemGroup = isisSystemGroup.setStatus('current')
if mibBuilder.loadTexts: isisSystemGroup.setDescription('The collections of objects used to manage an IS-IS router.')
isisCircuitGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 2)).setObjects(("DC-ISIS-MIB", "isisCircIfIndex"), ("DC-ISIS-MIB", "isisCircIfSubIndex"), ("DC-ISIS-MIB", "isisCircAdminState"), ("DC-ISIS-MIB", "isisCircExistState"), ("DC-ISIS-MIB", "isisCircType"), ("DC-ISIS-MIB", "isisCircExtDomain"), ("DC-ISIS-MIB", "isisCircAdjChanges"), ("DC-ISIS-MIB", "isisCircNumAdj"), ("DC-ISIS-MIB", "isisCircInitFails"), ("DC-ISIS-MIB", "isisCircRejAdjs"), ("DC-ISIS-MIB", "isisCircIDFieldLenMismatches"), ("DC-ISIS-MIB", "isisCircMaxAreaAddrMismatches"), ("DC-ISIS-MIB", "isisCircAuthTypeFails"), ("DC-ISIS-MIB", "isisCircAuthFails"), ("DC-ISIS-MIB", "isisCircLANDesISChanges"), ("DC-ISIS-MIB", "isisCircLevel"), ("DC-ISIS-MIB", "isisCircPassiveCircuit"), ("DC-ISIS-MIB", "isisCircMeshGroupEnabled"), ("DC-ISIS-MIB", "isisCircMeshGroup"), ("DC-ISIS-MIB", "isisCircSmallHellos"), ("DC-ISIS-MIB", "isisCircLastUpTime"), ("DC-ISIS-MIB", "isisCirc3WayEnabled"), ("DC-ISIS-MIB", "isisCircExtendedCircID"), ("DC-ISIS-MIB", "isisCircLevelMetric"), ("DC-ISIS-MIB", "isisCircLevelWideMetric"), ("DC-ISIS-MIB", "isisCircLevelISPriority"), ("DC-ISIS-MIB", "isisCircLevelIDOctet"), ("DC-ISIS-MIB", "isisCircLevelID"), ("DC-ISIS-MIB", "isisCircLevelDesIS"), ("DC-ISIS-MIB", "isisCircLevelHelloMultiplier"), ("DC-ISIS-MIB", "isisCircLevelHelloTimer"), ("DC-ISIS-MIB", "isisCircLevelDRHelloTimer"), ("DC-ISIS-MIB", "isisCircLevelLSPThrottle"), ("DC-ISIS-MIB", "isisCircLevelMinLSPRetransInt"), ("DC-ISIS-MIB", "isisCircLevelCSNPInterval"), ("DC-ISIS-MIB", "isisCircLevelPartSNPInterval"), ("DC-ISIS-MIB", "isisCircIPAddrRowStatus"), ("DC-ISIS-MIB", "isisCircIPAddrAdminState"), ("DC-ISIS-MIB", "isisCircIPAddrAddressType"), ("DC-ISIS-MIB", "isisCircIPAddrAddress"), ("DC-ISIS-MIB", "isisCircIPAddrInLSP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisCircuitGroup = isisCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: isisCircuitGroup.setDescription('The collection of objects used to describe an IS-IS Circuit.')
isisISAdjGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 3)).setObjects(("DC-ISIS-MIB", "isisISAdjState"), ("DC-ISIS-MIB", "isisISAdj3WayState"), ("DC-ISIS-MIB", "isisISAdjNeighSNPAAddress"), ("DC-ISIS-MIB", "isisISAdjNeighSysType"), ("DC-ISIS-MIB", "isisISAdjNeighSysID"), ("DC-ISIS-MIB", "isisISAdjNbrExtendedCircID"), ("DC-ISIS-MIB", "isisISAdjUsage"), ("DC-ISIS-MIB", "isisISAdjHoldTimer"), ("DC-ISIS-MIB", "isisISAdjNeighPriority"), ("DC-ISIS-MIB", "isisISAdjLastUpTime"), ("DC-ISIS-MIB", "isisISAdjAreaAddress"), ("DC-ISIS-MIB", "isisISAdjIPAddrType"), ("DC-ISIS-MIB", "isisISAdjIPAddrAddress"), ("DC-ISIS-MIB", "isisISAdjProtSuppLocalSupport"), ("DC-ISIS-MIB", "isisISAdjProtSuppBfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISAdjGroup = isisISAdjGroup.setStatus('current')
if mibBuilder.loadTexts: isisISAdjGroup.setDescription('The collections of objects used to manage an IS-IS Adjacency.')
isisNotificationObjectGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 4)).setObjects(("DC-ISIS-MIB", "isisPduLspId"), ("DC-ISIS-MIB", "isisPduFragment"), ("DC-ISIS-MIB", "isisPduFieldLen"), ("DC-ISIS-MIB", "isisPduMaxAreaAddress"), ("DC-ISIS-MIB", "isisAdjState"), ("DC-ISIS-MIB", "isisErrorOffset"), ("DC-ISIS-MIB", "isisErrorTLVType"), ("DC-ISIS-MIB", "isisNotificationSysInstance"), ("DC-ISIS-MIB", "isisNotificationSysLevelIndex"), ("DC-ISIS-MIB", "isisNotificationAreaAddress"), ("DC-ISIS-MIB", "isisNotificationISAdjIndex"), ("DC-ISIS-MIB", "isisNotificationDisState"), ("DC-ISIS-MIB", "isisNotificationAttachedState"), ("DC-ISIS-MIB", "isisNotificationNeighSysID"), ("DC-ISIS-MIB", "isisNotificationMtId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisNotificationObjectGroup = isisNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: isisNotificationObjectGroup.setDescription('The objects used to record notification parameters.')
isisNotificationGroup = NotificationGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 5)).setObjects(("DC-ISIS-MIB", "isisDatabaseOverload"), ("DC-ISIS-MIB", "isisManualAddressDrops"), ("DC-ISIS-MIB", "isisIDLenMismatch"), ("DC-ISIS-MIB", "isisMaxAreaAddressesMismatch"), ("DC-ISIS-MIB", "isisOwnLSPPurge"), ("DC-ISIS-MIB", "isisAreaMismatch"), ("DC-ISIS-MIB", "isisRejectedAdjacency"), ("DC-ISIS-MIB", "isisAdjacencyChange"), ("DC-ISIS-MIB", "isisLSPErrorDetected"), ("DC-ISIS-MIB", "isisAttemptToExceedMaxSequence"), ("DC-ISIS-MIB", "isisSequenceNumberSkip"), ("DC-ISIS-MIB", "isisCircIndTable"), ("DC-ISIS-MIB", "isisExtPassCircuitInd"), ("DC-ISIS-MIB", "isisDisChange"), ("DC-ISIS-MIB", "isisOperStateChange"), ("DC-ISIS-MIB", "isisHelloAuthFailure"), ("DC-ISIS-MIB", "isisLspAuthFailure"), ("DC-ISIS-MIB", "isisAttachedStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisNotificationGroup = isisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: isisNotificationGroup.setDescription('The collections of notifications sent by an IS.')
isisISPDUCounterGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 6)).setObjects(("DC-ISIS-MIB", "isisPacketCountIIHello"), ("DC-ISIS-MIB", "isisPacketCountISHello"), ("DC-ISIS-MIB", "isisPacketCountESHello"), ("DC-ISIS-MIB", "isisPacketCountLSP"), ("DC-ISIS-MIB", "isisPacketCountCSNP"), ("DC-ISIS-MIB", "isisPacketCountPSNP"), ("DC-ISIS-MIB", "isisPacketCountUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISPDUCounterGroup = isisISPDUCounterGroup.setStatus('current')
if mibBuilder.loadTexts: isisISPDUCounterGroup.setDescription('The collections of objects used to count protocol PDUs.')
isisISIPRADestGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 8)).setObjects(("DC-ISIS-MIB", "isisIPRANextHopType"), ("DC-ISIS-MIB", "isisIPRANextHop"), ("DC-ISIS-MIB", "isisIPRAType"), ("DC-ISIS-MIB", "isisIPRAExistState"), ("DC-ISIS-MIB", "isisIPRAAdminState"), ("DC-ISIS-MIB", "isisIPRAMetric"), ("DC-ISIS-MIB", "isisIPRAFullMetric"), ("DC-ISIS-MIB", "isisIPRAMetricType"), ("DC-ISIS-MIB", "isisIPRASNPAAddress"), ("DC-ISIS-MIB", "isisIPRASourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISIPRADestGroup = isisISIPRADestGroup.setStatus('current')
if mibBuilder.loadTexts: isisISIPRADestGroup.setDescription('The collections of objects used to manage configured IP addresses.')
isisLSPGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 9)).setObjects(("DC-ISIS-MIB", "isisLSPSeq"), ("DC-ISIS-MIB", "isisLSPZeroLife"), ("DC-ISIS-MIB", "isisLSPChecksum"), ("DC-ISIS-MIB", "isisLSPLifetimeRemain"), ("DC-ISIS-MIB", "isisLSPPDULength"), ("DC-ISIS-MIB", "isisLSPAttributes"), ("DC-ISIS-MIB", "isisLSPTLVSeq"), ("DC-ISIS-MIB", "isisLSPTLVChecksum"), ("DC-ISIS-MIB", "isisLSPTLVType"), ("DC-ISIS-MIB", "isisLSPTLVLen"), ("DC-ISIS-MIB", "isisLSPTLVValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisLSPGroup = isisLSPGroup.setStatus('current')
if mibBuilder.loadTexts: isisLSPGroup.setDescription('The collections of objects used to observe the LSP Data Base.')
isisDCAdditionGroup = ObjectGroup((1, 2, 826, 0, 1, 1578918, 5, 63, 1, 3, 1, 10)).setObjects(("DC-ISIS-MIB", "isisSysExistState"), ("DC-ISIS-MIB", "isisSysOperStatus"), ("DC-ISIS-MIB", "isisSysAllowAutoI3Config"), ("DC-ISIS-MIB", "isisSysCalcMaxDelay"), ("DC-ISIS-MIB", "isisSysCalcThrshUpdStart"), ("DC-ISIS-MIB", "isisSysCalcThrshUpdRestart"), ("DC-ISIS-MIB", "isisSysCalcThrshRestartLimit"), ("DC-ISIS-MIB", "isisSysCalcPauseFreq"), ("DC-ISIS-MIB", "isisSysCheckChecksums"), ("DC-ISIS-MIB", "isisSysZeroAgeLifetime"), ("DC-ISIS-MIB", "isisSysNumUpdPending"), ("DC-ISIS-MIB", "isisSysNumUpdMerged"), ("DC-ISIS-MIB", "isisSysNumCksumsPending"), ("DC-ISIS-MIB", "isisSysTEMetricPcntge"), ("DC-ISIS-MIB", "isisSysMaxBwidthPcntge"), ("DC-ISIS-MIB", "isisSysMaxResBwidthPcntge"), ("DC-ISIS-MIB", "isisSysUnresBwidthPcntge"), ("DC-ISIS-MIB", "isisSysMaxLSPBwidthPcntge"), ("DC-ISIS-MIB", "isisSysMinLSPBwidthPcntge"), ("DC-ISIS-MIB", "isisSysMTUSizePcntge"), ("DC-ISIS-MIB", "isisSysTERouterID"), ("DC-ISIS-MIB", "isisSysIPv6TERouterID"), ("DC-ISIS-MIB", "isisSysMaxExternalRoutes"), ("DC-ISIS-MIB", "isisSysMaxExternalRoutesAction"), ("DC-ISIS-MIB", "isisSysLspFullSuppress"), ("DC-ISIS-MIB", "isisSysLspFullSetDBOL"), ("DC-ISIS-MIB", "isisSysRestartHelpPeer"), ("DC-ISIS-MIB", "isisSysRestartActivationType"), ("DC-ISIS-MIB", "isisSysRestartAutoResetType"), ("DC-ISIS-MIB", "isisSysRestartAdjacencyWait"), ("DC-ISIS-MIB", "isisSysMaxRecoveryTime"), ("DC-ISIS-MIB", "isisSysClearStats"), ("DC-ISIS-MIB", "isisSysSetAttached"), ("DC-ISIS-MIB", "isisSysProtSupported"), ("DC-ISIS-MIB", "isisSysRestrictLanAdjsToSubnet"), ("DC-ISIS-MIB", "isisSysHostName"), ("DC-ISIS-MIB", "isisSysCalcSoonAfterCircChange"), ("DC-ISIS-MIB", "isisSysSendNotifications"), ("DC-ISIS-MIB", "isisSysEnableIgpShortcut"), ("DC-ISIS-MIB", "isisSysI3EntityIndex"), ("DC-ISIS-MIB", "isisSysRtmPurgeTime"), ("DC-ISIS-MIB", "isisRouterIPv6ID"), ("DC-ISIS-MIB", "isisSysLevelIPv6TEEnabled"), ("DC-ISIS-MIB", "isisSysLevelRestartT2Duration"), ("DC-ISIS-MIB", "isisSysLevelAuthUser"), ("DC-ISIS-MIB", "isisCircOperState"), ("DC-ISIS-MIB", "isisCircSdEntityIndex"), ("DC-ISIS-MIB", "isisCircDlBuffPoolSize"), ("DC-ISIS-MIB", "isisCircSdPDUBuffPoolSize"), ("DC-ISIS-MIB", "isisCircSdIndBuffPoolSize"), ("DC-ISIS-MIB", "isisCircDataLinkBlockSize"), ("DC-ISIS-MIB", "isisCircPhysicalAddress"), ("DC-ISIS-MIB", "isisCircManualOrAutomatic"), ("DC-ISIS-MIB", "isisCircT1TimerRunning"), ("DC-ISIS-MIB", "isisCircProtSupported"), ("DC-ISIS-MIB", "isisCircPtToPtOverLAN"), ("DC-ISIS-MIB", "isisCircProtBfdDesired"), ("DC-ISIS-MIB", "isisCircLevelStickyDIS"), ("DC-ISIS-MIB", "isisCircLevelAuthUser"), ("DC-ISIS-MIB", "isisCircLevelIDHostname"), ("DC-ISIS-MIB", "isisCircLevelDesISHostname"), ("DC-ISIS-MIB", "isisCircLevelMinLSPArrivalInt"), ("DC-ISIS-MIB", "isisSysStatPSNPError"), ("DC-ISIS-MIB", "isisSysStatCSNPError"), ("DC-ISIS-MIB", "isisSysStatLSPQueueLen"), ("DC-ISIS-MIB", "isisSysStatFragsRebuilt"), ("DC-ISIS-MIB", "isisSysStatLSPRexmits"), ("DC-ISIS-MIB", "isisSysStatLSPRegens"), ("DC-ISIS-MIB", "isisSysStatPurgesInitiated"), ("DC-ISIS-MIB", "isisSysStatLSPCount"), ("DC-ISIS-MIB", "isisSysStatPurgesIniLocal"), ("DC-ISIS-MIB", "isisSysStatPurgesIniRemote"), ("DC-ISIS-MIB", "isisSysStatPurgesIniRemSNP"), ("DC-ISIS-MIB", "isisSysStatPurgesIniRemExp"), ("DC-ISIS-MIB", "isisSysStatPurgesIniRemPrs"), ("DC-ISIS-MIB", "isisPacketCountDiscardedIIH"), ("DC-ISIS-MIB", "isisPacketCountDiscardedLSP"), ("DC-ISIS-MIB", "isisPacketCountDiscardedCSNP"), ("DC-ISIS-MIB", "isisPacketCountDiscardedPSNP"), ("DC-ISIS-MIB", "isisISAdjRestartCapable"), ("DC-ISIS-MIB", "isisISAdjPeerRestartState"), ("DC-ISIS-MIB", "isisISAdjSuppressed"), ("DC-ISIS-MIB", "isisISAdjNeighLanID"), ("DC-ISIS-MIB", "isisISAdjNeighHostname"), ("DC-ISIS-MIB", "isisISAdjNeighLanIDHostname"), ("DC-ISIS-MIB", "isisLSPIDHostname"), ("DC-ISIS-MIB", "isisLSPTLVHostname"), ("DC-ISIS-MIB", "isisPmSjJoinStatus"), ("DC-ISIS-MIB", "isisPmMjRowStatus"), ("DC-ISIS-MIB", "isisPmMjAdminStatus"), ("DC-ISIS-MIB", "isisPmMjOperStatus"), ("DC-ISIS-MIB", "isisPmMjJoinStatus"), ("DC-ISIS-MIB", "isisSdEntRowStatus"), ("DC-ISIS-MIB", "isisSdEntAdminStatus"), ("DC-ISIS-MIB", "isisSdEntOperStatus"), ("DC-ISIS-MIB", "isisSdEntMapHostnames"), ("DC-ISIS-MIB", "isisSdEntAuthSNPs"), ("DC-ISIS-MIB", "isisSdEntBfdProviderIndex"), ("DC-ISIS-MIB", "isisSdEntStopAdjDuplIDs"), ("DC-ISIS-MIB", "isisSdMjRowStatus"), ("DC-ISIS-MIB", "isisSdMjAdminStatus"), ("DC-ISIS-MIB", "isisSdMjOperStatus"), ("DC-ISIS-MIB", "isisSdMjEntityIndex"), ("DC-ISIS-MIB", "isisSdMjEntityType"), ("DC-ISIS-MIB", "isisSdMjJoinStatus"), ("DC-ISIS-MIB", "isisMtSysExistState"), ("DC-ISIS-MIB", "isisMtSysAdminState"), ("DC-ISIS-MIB", "isisMtSysOperState"), ("DC-ISIS-MIB", "isisMtSysProtSupported"), ("DC-ISIS-MIB", "isisMtSysDefaultActive"), ("DC-ISIS-MIB", "isisMtCircManExistState"), ("DC-ISIS-MIB", "isisMtCircManAdminState"), ("DC-ISIS-MIB", "isisMtCircManOperState"), ("DC-ISIS-MIB", "isisMtCircManL1WideMetric"), ("DC-ISIS-MIB", "isisMtCircManL2WideMetric"), ("DC-ISIS-MIB", "isisMtCircStatusOperState"), ("DC-ISIS-MIB", "isisMtCircStatusL1WideMetric"), ("DC-ISIS-MIB", "isisMtCircStatusL2WideMetric"), ("DC-ISIS-MIB", "isisISAdjMtSuppLocalSupport"), ("DC-ISIS-MIB", "isisIPRAMtId"), ("DC-ISIS-MIB", "isisPmMjSubAddrFamily"), ("DC-ISIS-MIB", "isisShortcutRemoteAddressType"), ("DC-ISIS-MIB", "isisShortcutRemoteAddress"), ("DC-ISIS-MIB", "isisShortcutMetricType"), ("DC-ISIS-MIB", "isisShortcutMetricValue"), ("DC-ISIS-MIB", "isisShortcutOperStatus"), ("DC-ISIS-MIB", "isisShortcutPendingDeletion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisDCAdditionGroup = isisDCAdditionGroup.setStatus('current')
if mibBuilder.loadTexts: isisDCAdditionGroup.setDescription('The collection of Data Connection additions to the MIB.')
mibBuilder.exportSymbols("DC-ISIS-MIB", isisGroups=isisGroups, isisMtSysDefaultActive=isisMtSysDefaultActive, isisSysLevelOverloadState=isisSysLevelOverloadState, isisCircManualOrAutomatic=isisCircManualOrAutomatic, isisManAreaAddrTable=isisManAreaAddrTable, isisMtSysOperState=isisMtSysOperState, isisReachAddr=isisReachAddr, isisPmMjSlaveEntity=isisPmMjSlaveEntity, isisNotificationSysInstance=isisNotificationSysInstance, isisTrapPrefix=isisTrapPrefix, isisSummAddrMetric=isisSummAddrMetric, isisCircLevelHelloMultiplier=isisCircLevelHelloMultiplier, isisSystemGroup=isisSystemGroup, isisCircIndTable=isisCircIndTable, isisRedistributeAddrMtId=isisRedistributeAddrMtId, isisLSPTLVHostname=isisLSPTLVHostname, isisLSPPDULength=isisLSPPDULength, isisISAdjNeighPriority=isisISAdjNeighPriority, isisSysLevelSetOverloadUntil=isisSysLevelSetOverloadUntil, isisNotificationNeighSysID=isisNotificationNeighSysID, isisPmMjInterface=isisPmMjInterface, isisISAdjIPAddrAddress=isisISAdjIPAddrAddress, isisCircAuthFails=isisCircAuthFails, AdminState=AdminState, isisRouterSysID=isisRouterSysID, isisISAdjSuppressed=isisISAdjSuppressed, isisSysCheckChecksums=isisSysCheckChecksums, isisISAdjNeighLanID=isisISAdjNeighLanID, isisISAdj3WayState=isisISAdj3WayState, isisNotifications=isisNotifications, ISLevel=ISLevel, isisRouterIPv6ID=isisRouterIPv6ID, isisCircIPAddrRowStatus=isisCircIPAddrRowStatus, isisPacketCountDiscardedCSNP=isisPacketCountDiscardedCSNP, isisISAdjProtSuppProtocol=isisISAdjProtSuppProtocol, isisSysNumUpdPending=isisSysNumUpdPending, isisSysCalcThrshRestartLimit=isisSysCalcThrshRestartLimit, isisNotificationObjectGroup=isisNotificationObjectGroup, isisISAdjProtSuppEntry=isisISAdjProtSuppEntry, isisSysPollESHelloRate=isisSysPollESHelloRate, CircuitID=CircuitID, isisLSPDataBase=isisLSPDataBase, LSPBuffSize=LSPBuffSize, isisMtSysAdminState=isisMtSysAdminState, isisSysLevelSetOverload=isisSysLevelSetOverload, isisCirc3WayEnabled=isisCirc3WayEnabled, isisAreaAddrTable=isisAreaAddrTable, isisIPRASourceType=isisIPRASourceType, isisRedistributeAddrEntry=isisRedistributeAddrEntry, isisConformance=isisConformance, isisIPRADestPrefixLen=isisIPRADestPrefixLen, isisMtSysTable=isisMtSysTable, isisNotification=isisNotification, isisShortcutRemoteAddress=isisShortcutRemoteAddress, isisLSPTLVChecksum=isisLSPTLVChecksum, isisMtCircStatusOperState=isisMtCircStatusOperState, isisSysReceiveLSPBufferSize=isisSysReceiveLSPBufferSize, isisLSPChecksum=isisLSPChecksum, IsisMjStatus=IsisMjStatus, isisSysRestartActivationType=isisSysRestartActivationType, isisMtCircStatusMtId=isisMtCircStatusMtId, isisISPDUCounterGroup=isisISPDUCounterGroup, isisCircLevelWideMetric=isisCircLevelWideMetric, IsisOperStatus=IsisOperStatus, IsisSysRestartType=IsisSysRestartType, isisSysLevelOrigLSPBuffSize=isisSysLevelOrigLSPBuffSize, isisSysProtSupported=isisSysProtSupported, isisSysStatPurgesIniRemSNP=isisSysStatPurgesIniRemSNP, isisMtCircStatusL2WideMetric=isisMtCircStatusL2WideMetric, isisShortcutMetricValue=isisShortcutMetricValue, isisPmMjSubAddrFamily=isisPmMjSubAddrFamily, isisMtCircManConfigTable=isisMtCircManConfigTable, isisCircLevel=isisCircLevel, isisSystemCounterEntry=isisSystemCounterEntry, isisSysStatLSPRegens=isisSysStatLSPRegens, isisRedistributeAddrType=isisRedistributeAddrType, isisRedistributeAddrTable=isisRedistributeAddrTable, isisCircLevelMinLSPRetransInt=isisCircLevelMinLSPRetransInt, isisManualAddressDrops=isisManualAddressDrops, isisSysSetAttached=isisSysSetAttached, LinkStatePDUID=LinkStatePDUID, isisIPRADestType=isisIPRADestType, isisSdMjOperStatus=isisSdMjOperStatus, isisSysStatAttmptToExMaxSeqNums=isisSysStatAttmptToExMaxSeqNums, isisSummAddrPrefixLen=isisSummAddrPrefixLen, isisLSPErrorDetected=isisLSPErrorDetected, isisPacketCountLSP=isisPacketCountLSP, isisSystemCounterTable=isisSystemCounterTable, isisCircNumAdj=isisCircNumAdj, isisSysTEMetricPcntge=isisSysTEMetricPcntge, isisSysCalcMaxDelay=isisSysCalcMaxDelay, isisPacketCounterTable=isisPacketCounterTable, isisSysSendNotifications=isisSysSendNotifications, isisCircuitCounterTable=isisCircuitCounterTable, isisIPRADest=isisIPRADest, isisIPRAMetricType=isisIPRAMetricType, isisLSPLifetimeRemain=isisLSPLifetimeRemain, isisMtSysMtId=isisMtSysMtId, isisCircMeshGroup=isisCircMeshGroup, isisCircIPAddrTable=isisCircIPAddrTable, IsisSjStatus=IsisSjStatus, OSINSAddress=OSINSAddress, isisPacketCountUnknown=isisPacketCountUnknown, isisISAdjMtSupportedTable=isisISAdjMtSupportedTable, isisCircLevelDesISHostname=isisCircLevelDesISHostname, isisNotificationGroup=isisNotificationGroup, isisShortcutIfIndex=isisShortcutIfIndex, isisCircLevelIndex=isisCircLevelIndex, isisSysTable=isisSysTable, isisExtPassCircuitInd=isisExtPassCircuitInd, isisISAdjNeighHostname=isisISAdjNeighHostname, isisDisChange=isisDisChange, isisLSPZeroLife=isisLSPZeroLife, ISPriority=ISPriority, isisSysRestartAdjacencyWait=isisSysRestartAdjacencyWait, isisISAdjIPAddrTable=isisISAdjIPAddrTable, isisIPReachAddr=isisIPReachAddr, isisMtCircStatusL1WideMetric=isisMtCircStatusL1WideMetric, isisSdEntEntry=isisSdEntEntry, isisPduFragment=isisPduFragment, isisSysLevelAuthUser=isisSysLevelAuthUser, isisCircSdPDUBuffPoolSize=isisCircSdPDUBuffPoolSize, IsisAdminStatus=IsisAdminStatus, isisLSPTLVType=isisLSPTLVType, isisSummAddrExistState=isisSummAddrExistState, isisSysStatOwnLSPPurges=isisSysStatOwnLSPPurges, isisSysStatPSNPError=isisSysStatPSNPError, isisIPRASNPAAddress=isisIPRASNPAAddress, isisCircLANDesISChanges=isisCircLANDesISChanges, isisMaxAreaAddressesMismatch=isisMaxAreaAddressesMismatch, isisSysLevelIndex=isisSysLevelIndex, isisSdEntAuthSNPs=isisSdEntAuthSNPs, isisMtCircManConfigEntry=isisMtCircManConfigEntry, isisSysLevelMetricStyle=isisSysLevelMetricStyle, isisCircEntry=isisCircEntry, isisShortcutOperStatus=isisShortcutOperStatus, isisPduLspId=isisPduLspId, PYSNMP_MODULE_ID=dcIsisMib, isisCompliance=isisCompliance, isisSdMjAdminStatus=isisSdMjAdminStatus, isisErrorTLVType=isisErrorTLVType, isisSysStatPartChanges=isisSysStatPartChanges, isisCircLevelPartSNPInterval=isisCircLevelPartSNPInterval, isisISAdjNeighLanIDHostname=isisISAdjNeighLanIDHostname, MetricType=MetricType, isisPmSjEntry=isisPmSjEntry, isisPacketCountESHello=isisPacketCountESHello, isisSysStatLSPQueueLen=isisSysStatLSPQueueLen, isisMtSysExistState=isisMtSysExistState, isisAreaAddrInLSP=isisAreaAddrInLSP, isisPmMjAdminStatus=isisPmMjAdminStatus, isisRouterHostName=isisRouterHostName, isisCounters=isisCounters, isisISAdjProtSuppBfdStatus=isisISAdjProtSuppBfdStatus, isisLSPSummaryEntry=isisLSPSummaryEntry, IsisAddrTypeBits=IsisAddrTypeBits, isisSysCalcThrshUpdRestart=isisSysCalcThrshUpdRestart, isisLSPSummaryTable=isisLSPSummaryTable, isisSysMaxResBwidthPcntge=isisSysMaxResBwidthPcntge, isisISAdjIPAddrType=isisISAdjIPAddrType, isisSummAddrEntry=isisSummAddrEntry, isisMtCircManAdminState=isisMtCircManAdminState, isisSdMjInterface=isisSdMjInterface, isisSysStatPurgesIniRemPrs=isisSysStatPurgesIniRemPrs, isisSysNumUpdMerged=isisSysNumUpdMerged, isisCircProtBfdDesired=isisCircProtBfdDesired, isisSysRestrictLanAdjsToSubnet=isisSysRestrictLanAdjsToSubnet, isisRedistributeAddrPrefixLen=isisRedistributeAddrPrefixLen, isisCirc=isisCirc, isisPacketCountDiscardedIIH=isisPacketCountDiscardedIIH, isisShortcutPendingDeletion=isisShortcutPendingDeletion, isisIPRANextHopIndex=isisIPRANextHopIndex, isisCircIfSubIndex=isisCircIfSubIndex, isisSysAllowAutoI3Config=isisSysAllowAutoI3Config, isisSysL2toL1Leaking=isisSysL2toL1Leaking, isisSysStatIDFieldLenMismatches=isisSysStatIDFieldLenMismatches, isisCircLevelHelloTimer=isisCircLevelHelloTimer, isisIPRAEntry=isisIPRAEntry, isisISAdjPeerRestartState=isisISAdjPeerRestartState, isisLSPTLVValue=isisLSPTLVValue, isisAdjacencyChange=isisAdjacencyChange, isisISAdjIPAddrEntry=isisISAdjIPAddrEntry, isisMtCircManL2WideMetric=isisMtCircManL2WideMetric, isisCircT1TimerRunning=isisCircT1TimerRunning, isisSysRestartHelpPeer=isisSysRestartHelpPeer, isisObjects=isisObjects, isisSysWaitTime=isisSysWaitTime, isisSysStatAuthFails=isisSysStatAuthFails, isisIPRAMtId=isisIPRAMtId, isisSummAddrTable=isisSummAddrTable, isisPacketCountISHello=isisPacketCountISHello, isisSdMjEntityType=isisSdMjEntityType, isisCircLastUpTime=isisCircLastUpTime, isisPmSjInterface=isisPmSjInterface, isisSysMaxExternalRoutes=isisSysMaxExternalRoutes, IsisPmInterfaceId=IsisPmInterfaceId, isisSysMinLSPBwidthPcntge=isisSysMinLSPBwidthPcntge, isisISAdjAreaAddrEntry=isisISAdjAreaAddrEntry, isisSdMjEntityIndex=isisSdMjEntityIndex, isisOperStateChange=isisOperStateChange, isisCircPassiveCircuit=isisCircPassiveCircuit, isisSysStatAuthTypeFails=isisSysStatAuthTypeFails, SupportedProtocol=SupportedProtocol, IsisAddrType=IsisAddrType, isisCircLevelLSPThrottle=isisCircLevelLSPThrottle, isisCircTable=isisCircTable, isisPacketCountLevel=isisPacketCountLevel, isisSysMaxLSPBwidthPcntge=isisSysMaxLSPBwidthPcntge, isisPmMjAddrType=isisPmMjAddrType, isisCircLevelMetric=isisCircLevelMetric, isisCircLevelValues=isisCircLevelValues, isisSysMaxExternalRoutesAction=isisSysMaxExternalRoutesAction, isisCircIPAddrIndex=isisCircIPAddrIndex, isisSysTERouterID=isisSysTERouterID, isisRedistributeAddrExistState=isisRedistributeAddrExistState, isisISAdjMtSupportedEntry=isisISAdjMtSupportedEntry, isisSystem=isisSystem, isisErrorOffset=isisErrorOffset, isisSysI3EntityIndex=isisSysI3EntityIndex, isisRouterLevel=isisRouterLevel, isisNotificationISAdjIndex=isisNotificationISAdjIndex, isisCircIPAddrAdminState=isisCircIPAddrAdminState, isisIgpShortcutTable=isisIgpShortcutTable, isisSysLevelRestartT2Duration=isisSysLevelRestartT2Duration, isisISAdjLastUpTime=isisISAdjLastUpTime, isisManAreaAddr=isisManAreaAddr, isisSysCalcThrshUpdStart=isisSysCalcThrshUpdStart, isisPacketCountIIHello=isisPacketCountIIHello, isisRouterID=isisRouterID, SystemID=SystemID, isisSysStatManAddrDropFromAreas=isisSysStatManAddrDropFromAreas, isisSdEntRowStatus=isisSdEntRowStatus, isisSdMjRowStatus=isisSdMjRowStatus, isisNotificationAttachedState=isisNotificationAttachedState, isisNotificationAreaAddress=isisNotificationAreaAddress, isisCircIndex=isisCircIndex, isisPacketCountDiscardedPSNP=isisPacketCountDiscardedPSNP, isisAreaAddr=isisAreaAddr, isisISAdjProtSuppLocalSupport=isisISAdjProtSuppLocalSupport, isisLSPAttributes=isisLSPAttributes, isisCircLevelCSNPInterval=isisCircLevelCSNPInterval, isisISAdj=isisISAdj, isisPacketCounterEntry=isisPacketCounterEntry, isisShortcutRemoteAddressType=isisShortcutRemoteAddressType, isisAttachedStateChange=isisAttachedStateChange, isisAreaMismatch=isisAreaMismatch, isisSdEntAdminStatus=isisSdEntAdminStatus, isisPmSjJoinStatus=isisPmSjJoinStatus, isisCircDlBuffPoolSize=isisCircDlBuffPoolSize, isisISAdjProtSuppTable=isisISAdjProtSuppTable, isisCircAdminState=isisCircAdminState, isisISAdjNeighSysType=isisISAdjNeighSysType, isisLSPID=isisLSPID, isisISAdjAreaAddrTable=isisISAdjAreaAddrTable)
mibBuilder.exportSymbols("DC-ISIS-MIB", isisOwnLSPPurge=isisOwnLSPPurge, isisSysLspFullSetDBOL=isisSysLspFullSetDBOL, isisSysExistState=isisSysExistState, isisPmObjects=isisPmObjects, isisCircPtToPtOverLAN=isisCircPtToPtOverLAN, isisCircLevelIDOctet=isisCircLevelIDOctet, isisSysClearStats=isisSysClearStats, isisNotificationDisState=isisNotificationDisState, isisSysStatLSPError=isisSysStatLSPError, isisSdEntIndex=isisSdEntIndex, isisMtCircManExistState=isisMtCircManExistState, isisSdEntMapHostnames=isisSdEntMapHostnames, Unsigned8TC=Unsigned8TC, isisCircIPAddrManOrAuto=isisCircIPAddrManOrAuto, IsisSdEntityType=IsisSdEntityType, Unsigned16TC=Unsigned16TC, isisISAdjAreaAddress=isisISAdjAreaAddress, isisCircLevelStickyDIS=isisCircLevelStickyDIS, isisISIPRADestGroup=isisISIPRADestGroup, isisSysMaxRecoveryTime=isisSysMaxRecoveryTime, isisLSPTLVLen=isisLSPTLVLen, isisCircIPAddrInLSP=isisCircIPAddrInLSP, isisSysStatPurgesIniRemote=isisSysStatPurgesIniRemote, isisMtSysEntry=isisMtSysEntry, isisCircRejAdjs=isisCircRejAdjs, isisSysMaxAge=isisSysMaxAge, isisIgpShortcutEntry=isisIgpShortcutEntry, isisPmMjEntry=isisPmMjEntry, isisCircuitGroup=isisCircuitGroup, isisCircIPAddrEntry=isisCircIPAddrEntry, isisPduMaxAreaAddress=isisPduMaxAreaAddress, WideMetric=WideMetric, isisSysVersion=isisSysVersion, LevelState=LevelState, dcIsisMib=dcIsisMib, isisPacketCountDirection=isisPacketCountDirection, isisCircSdIndBuffPoolSize=isisCircSdIndBuffPoolSize, isisCircLevelID=isisCircLevelID, isisSdMjTable=isisSdMjTable, isisMtCircStatusTable=isisMtCircStatusTable, isisSdEntTable=isisSdEntTable, isisMtSysProtSupported=isisMtSysProtSupported, isisCompliances=isisCompliances, isisLSPTLVIndex=isisLSPTLVIndex, isisPmMjRowStatus=isisPmMjRowStatus, isisSysLevelEntry=isisSysLevelEntry, isisLSPLevel=isisLSPLevel, isisCircLevelIDHostname=isisCircLevelIDHostname, isisISAdjIPAddrIndex=isisISAdjIPAddrIndex, isisNotificationSysLevelIndex=isisNotificationSysLevelIndex, isisISAdjGroup=isisISAdjGroup, isisAreaAddrEntry=isisAreaAddrEntry, isisSysLevelSPFConsiders=isisSysLevelSPFConsiders, isisSysLspFullSuppress=isisSysLspFullSuppress, isisSdMjEntry=isisSdMjEntry, isisManAreaAddrExistState=isisManAreaAddrExistState, isisShortcutMetricType=isisShortcutMetricType, isisISAdjRestartCapable=isisISAdjRestartCapable, isisPduFieldLen=isisPduFieldLen, isisSysMaxBwidthPcntge=isisSysMaxBwidthPcntge, isisCircDataLinkBlockSize=isisCircDataLinkBlockSize, isisSysStatSPFRuns=isisSysStatSPFRuns, isisIPRAExistState=isisIPRAExistState, isisSdEntOperStatus=isisSdEntOperStatus, isisSysEntry=isisSysEntry, isisPacketCountDiscardedLSP=isisPacketCountDiscardedLSP, isisCircExtendedCircID=isisCircExtendedCircID, isisIDLenMismatch=isisIDLenMismatch, isisAttemptToExceedMaxSequence=isisAttemptToExceedMaxSequence, isisSdEntBfdProviderIndex=isisSdEntBfdProviderIndex, isisCircuitType=isisCircuitType, isisCircLevelDRHelloTimer=isisCircLevelDRHelloTimer, isisSummAddrFullMetric=isisSummAddrFullMetric, isisISAdjUsage=isisISAdjUsage, isisSummAddressType=isisSummAddressType, isisSysInstance=isisSysInstance, isisCircMeshGroupEnabled=isisCircMeshGroupEnabled, isisSysStatPurgesIniLocal=isisSysStatPurgesIniLocal, isisSysEnableIgpShortcut=isisSysEnableIgpShortcut, isisCircOperState=isisCircOperState, isisSysRestartAutoResetType=isisSysRestartAutoResetType, isisCircSmallHellos=isisCircSmallHellos, isisLSPTLVSeq=isisLSPTLVSeq, isisSysStatFragsRebuilt=isisSysStatFragsRebuilt, isisLSPTLVEntry=isisLSPTLVEntry, isisLSPSeq=isisLSPSeq, isisSysZeroAgeLifetime=isisSysZeroAgeLifetime, isisPmMjTable=isisPmMjTable, isisMtCircManMtId=isisMtCircManMtId, isisLspAuthFailure=isisLspAuthFailure, DefaultMetric=DefaultMetric, isisPmMjMtId=isisPmMjMtId, isisSdMjJoinStatus=isisSdMjJoinStatus, isisLSPTLVTable=isisLSPTLVTable, isisSysLevelTEEnabled=isisSysLevelTEEnabled, isisSysStatLSPCount=isisSysStatLSPCount, isisCircExistState=isisCircExistState, isisPacketCountPSNP=isisPacketCountPSNP, isisISAdjEntry=isisISAdjEntry, isisCircLevelDesIS=isisCircLevelDesIS, isisSysID=isisSysID, isisSysMaxPathSplits=isisSysMaxPathSplits, isisCircLevelISPriority=isisCircLevelISPriority, isisPmSjMasterEntity=isisPmSjMasterEntity, isisMtCircManL1WideMetric=isisMtCircManL1WideMetric, isisPacketCountCSNP=isisPacketCountCSNP, isisCircLevelMinLSPArrivalInt=isisCircLevelMinLSPArrivalInt, isisSdEntStopAdjDuplIDs=isisSdEntStopAdjDuplIDs, isisSysAdminState=isisSysAdminState, isisCircInitFails=isisCircInitFails, isisRejectedAdjacency=isisRejectedAdjacency, isisISAdjTable=isisISAdjTable, isisCircIPAddrAddressType=isisCircIPAddrAddressType, isisCircLevelTable=isisCircLevelTable, isisCircMaxAreaAddrMismatches=isisCircMaxAreaAddrMismatches, isisRouterEntry=isisRouterEntry, isisIPRANextHopType=isisIPRANextHopType, isisCircLevelAuthUser=isisCircLevelAuthUser, isisISAdjNeighSNPAAddress=isisISAdjNeighSNPAAddress, isisPmMjOperStatus=isisPmMjOperStatus, isisNotificationMtId=isisNotificationMtId, isisIPRAType=isisIPRAType, isisISAdjAreaAddrIndex=isisISAdjAreaAddrIndex, isisSdObjects=isisSdObjects, isisCircAuthTypeFails=isisCircAuthTypeFails, isisSysIPv6TERouterID=isisSysIPv6TERouterID, isisCircType=isisCircType, IsisAdjLevel=IsisAdjLevel, isisIPRAFullMetric=isisIPRAFullMetric, isisSysHostName=isisSysHostName, isisSummAddrMtId=isisSummAddrMtId, isisSysStatLevel=isisSysStatLevel, isisSummAddress=isisSummAddress, isisISAdjMtSuppMtId=isisISAdjMtSuppMtId, isisSysUnresBwidthPcntge=isisSysUnresBwidthPcntge, isisSysOperStatus=isisSysOperStatus, isisRedistributeAddrAddress=isisRedistributeAddrAddress, isisManAreaAddrEntry=isisManAreaAddrEntry, isisSysLevelMinLSPGenInt=isisSysLevelMinLSPGenInt, isisSysStatSeqNumSkips=isisSysStatSeqNumSkips, isisSysRtmPurgeTime=isisSysRtmPurgeTime, isisCircIPAddrAddress=isisCircIPAddrAddress, MetricStyle=MetricStyle, isisCircuitCounterEntry=isisCircuitCounterEntry, isisSysStatPurgesIniRemExp=isisSysStatPurgesIniRemExp, isisSysStatPurgesInitiated=isisSysStatPurgesInitiated, isisSysLevelTable=isisSysLevelTable, isisSysStatCSNPError=isisSysStatCSNPError, isisIPRAAdminState=isisIPRAAdminState, isisISAdjMtSuppLocalSupport=isisISAdjMtSuppLocalSupport, isisAdjState=isisAdjState, isisHelloAuthFailure=isisHelloAuthFailure, isisSysNumCksumsPending=isisSysNumCksumsPending, IsisPDUHeader=IsisPDUHeader, isisISAdjIndex=isisISAdjIndex, FullMetric=FullMetric, isisSequenceNumberSkip=isisSequenceNumberSkip, isisSysStatCorrLSPs=isisSysStatCorrLSPs, isisMtCircStatusEntry=isisMtCircStatusEntry, isisISAdjHoldTimer=isisISAdjHoldTimer, isisISAdjNbrExtendedCircID=isisISAdjNbrExtendedCircID, isisISAdjNeighSysID=isisISAdjNeighSysID, isisSysMaxLSPGenInt=isisSysMaxLSPGenInt, isisDatabaseOverload=isisDatabaseOverload, isisSysLevel=isisSysLevel, isisSysStatLSPDbaseOloads=isisSysStatLSPDbaseOloads, isisSysMTUSizePcntge=isisSysMTUSizePcntge, IsisSdInterfaceId=IsisSdInterfaceId, isisSysLevelIPv6TEEnabled=isisSysLevelIPv6TEEnabled, isisCircAdjChanges=isisCircAdjChanges, isisNotificationEntry=isisNotificationEntry, isisSysCalcPauseFreq=isisSysCalcPauseFreq, isisSysCalcSoonAfterCircChange=isisSysCalcSoonAfterCircChange, isisSysStatLSPRexmits=isisSysStatLSPRexmits, isisSysType=isisSysType, isisISAdjState=isisISAdjState, isisPmMjJoinStatus=isisPmMjJoinStatus, isisCircIfIndex=isisCircIfIndex, isisLSPGroup=isisLSPGroup, isisIPRATable=isisIPRATable, isisIPRANextHop=isisIPRANextHop, isisLSPIDHostname=isisLSPIDHostname, isisCircSdEntityIndex=isisCircSdEntityIndex, isisCircPhysicalAddress=isisCircPhysicalAddress, isisIPRAMetric=isisIPRAMetric, isisDCAdditionGroup=isisDCAdditionGroup, isisCircIDFieldLenMismatches=isisCircIDFieldLenMismatches, isisAdvancedCompliance=isisAdvancedCompliance, isisMtCircManOperState=isisMtCircManOperState, isisCircProtSupported=isisCircProtSupported, isisCircExtDomain=isisCircExtDomain, isisCircLevelEntry=isisCircLevelEntry, isisPmSjTable=isisPmSjTable, isisRouterTable=isisRouterTable)
