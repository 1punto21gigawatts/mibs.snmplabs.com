#
# PySNMP MIB module XLDV20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XLDV20-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
onu, = mibBuilder.importSymbols("AN-MIB", "onu")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, NotificationType, Unsigned32, Integer32, iso, Counter64, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Bits, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "NotificationType", "Unsigned32", "Integer32", "iso", "Counter64", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Bits", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xldv20 = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4))
class Xldv20ControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("requestIdle", 1), ("requestBusy", 2), ("requestPassed", 3), ("requestFailed", 4))

class Xldv20OperState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class Xldv20SlotStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("used", 1), ("empty", 2))

class Xldv20AdminState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unlocked", 1), ("locked", 2))

class Xldv20AvailStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))
    namedValues = NamedValues(("available", 1), ("failed", 2), ("degraded", 3), ("offline", 4), ("notInstalled", 5), ("dependency", 7))

class Xldv20LinkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 255))
    namedValues = NamedValues(("quiet", 0), ("idle", 1), ("train", 2), ("active", 3), ("download", 4), ("remoteDownload", 6), ("sleepMode", 7), ("unknown", 255))

class Xldv20DbuReadStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7081, 7082, 7083, 7084))
    namedValues = NamedValues(("dbuReadComplete", 7081), ("dbuReadFailed", 7082), ("dbuFileCreationFailed", 7083), ("dbuFileTransmissionFailed", 7084))

class Xldv20TelnetAccess(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("read", 1), ("trace", 2), ("write", 3), ("noAccess", 4))

class Xldv20TvTelnetSessionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("running", 1), ("stopped", 2))

class Xldv20EndpointType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("source", 1), ("sink", 2), ("both", 3))

class Xldv20RstResult(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4))
    namedValues = NamedValues(("requestFailed", 4))

class Xldv20ImaGroupState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupported", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class Xldv20ImaGroupFailureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidValueNe", 4), ("invalidValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class Xldv20ImaGroupTxClkMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class Xldv20ImaGroupSymmetry(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3))

class Xldv20ImaFrameLength(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256))
    namedValues = NamedValues(("m32", 32), ("m64", 64), ("m128", 128), ("m256", 256))

class Xldv20ImaLinkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class Xldv20ImaLinkFailureStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class DisplayString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class Unsigned16(TextualConvention, Integer32):
    description = 'Textual convention for a 16 bit integer value. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class MilliSeconds(Integer32):
    pass

class Xldv20HwUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("equipment", 1), ("equipmentHolder", 2), ("plugInUnit", 3))

class Xldv20IfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 107))
    namedValues = NamedValues(("s1n", 1), ("s1f", 2), ("adc", 3), ("adr", 4), ("ibm", 5), ("tca", 6), ("pon", 7), ("vdc", 8), ("vdr", 9), ("eth", 10), ("d3n", 11), ("d3f", 12), ("e3n", 13), ("e3f", 14), ("s3n", 15), ("s3f", 16), ("e1nIma", 20), ("e1fIma", 21), ("d1nIma", 22), ("d1fIma", 23), ("sdc", 24), ("sdr", 25), ("atmIma", 107))

class Xldv20AlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 105, 114, 115, 116, 117, 123, 130, 131, 132, 141, 407, 408, 409, 410, 411, 412, 413, 450, 451, 452, 453, 454, 455, 456))
    namedValues = NamedValues(("noAlarm", 0), ("hpEBER", 1), ("hpUNEQ", 2), ("lcd", 3), ("lof", 4), ("lop", 5), ("los", 6), ("msAIS", 7), ("msEBER", 8), ("msRDI", 9), ("msSD", 10), ("pAIS", 11), ("pRDI", 12), ("rsEBER", 13), ("slm", 14), ("tim", 15), ("actFault", 16), ("xmissionErr", 105), ("ais", 114), ("rdi", 115), ("plcpLof", 116), ("plcpRDI", 117), ("internalFault", 123), ("immMNR", 130), ("lpr", 131), ("lol", 132), ("wrongServiceConfigData", 141), ("excBER", 407), ("lif", 408), ("lods", 409), ("txUnusableFe", 410), ("rxUnusableFe", 411), ("rfiIma", 412), ("rai", 413), ("startUpFe", 450), ("configAbort", 451), ("configAbortFe", 452), ("insufficientLinks", 453), ("insufficientLinksFe", 454), ("blockedFe", 455), ("imaMinNumOfLinks", 456))

class Xldv20SuppressionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noTraps", 1), ("allTraps", 2), ("noEvents", 3), ("noAlarms", 4))

class Xldv20TrafficType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("cbr", 1), ("ubr", 2), ("nrtVbr", 3), ("rtVbr", 4))

class Xldv20TrafficDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("bidirectional", 1), ("upstream", 2), ("downstream", 3))

class Xldv20EqhType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("shelf", 1), ("slot", 2), ("basicShelf", 3), ("extendedShelf", 4), ("ntAdslShelf", 5), ("ntVdslShelf", 6), ("cpeShelf", 7))

class Xldv20LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("other", 1), ("shortSingleMode", 2), ("mediumSingleMode", 3), ("longSingleMode", 4), ("coax", 5), ("utp", 6), ("e3direct", 7), ("ds3plcp", 8))

class Xldv20S1nS3nEberThreshold(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))
    namedValues = NamedValues(("exp10E3", 1), ("exp10E4", 2), ("exp10E5", 3), ("noSupervision", 255))

class Xldv20S1nS3nSDThreshold(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 255))
    namedValues = NamedValues(("exp10E5", 3), ("exp10E6", 4), ("exp10E7", 5), ("exp10E8", 6), ("exp10E9", 7), ("noSupervision", 255))

class Xldv20AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("noAlarming", 5))

class Xldv20AlmSevProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 40)

class Xldv20AlmFiltProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 40)

class Xldv20RiResultType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("riRemoteInventoryComplete", 1), ("riFileCreationFailed", 2), ("riFileTransmissionFailed", 3))

class Xldv20RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("create", 1), ("delete", 2))

class Xldv20CodingType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("e3HDB3", 1), ("dsx3B3ZS", 2))

class Xldv20ExtAlarmActivityState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undeterminate", 0), ("on", 1), ("off", 2))

class Xldv20EmptyCellType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("idle", 1), ("unassigned", 2))

class Xldv20LogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("hwmLog", 1), ("sweLog", 2), ("swTraceLog", 3))

class Xldv20SucAllOfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("sucUpgrSingle", 1), ("sucUpgrAll", 2), ("sucLoadTypeUnknown", 10))

class Xldv20ResetLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("plugInUnit", 3), ("system", 4))

class Xldv20VdcRateDn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 12, 16, 24, 32, 48, 64))
    namedValues = NamedValues(("rateDn2", 2), ("rateDn4", 4), ("rateDn6", 6), ("rateDn8", 8), ("rateDn12", 12), ("rateDn16", 16), ("rateDn24", 24), ("rateDn32", 32), ("rateDn48", 48), ("rateDn64", 64))

class Xldv20VdcRateUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16))
    namedValues = NamedValues(("rateUp1", 1), ("rateUp2", 2), ("rateUp4", 4), ("rateUp8", 8), ("rateUp12", 12), ("rateUp16", 16))

class Xldv20VdcLatencyDn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 12, 16, 20, 32))
    namedValues = NamedValues(("latencyDn0", 0), ("latencyDn2", 2), ("latencyDn4", 4), ("latencyDn8", 8), ("latencyDn12", 12), ("latencyDn16", 16), ("latencyDn20", 20), ("latencyDn32", 32))

class Xldv20VdcLatencyUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 10, 20))
    namedValues = NamedValues(("latencyUp0", 0), ("latencyUp2", 2), ("latencyUp4", 4), ("latencyUp8", 8), ("latencyUp10", 10), ("latencyUp20", 20))

class Xldv20VdcPowerBoostAdaptationType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("suEnabled", 1), ("ntEnabled", 2), ("bothEnabled", 3), ("bothDisabled", 4))

class Xldv20VdcVdslMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("adslFriendly", 1), ("vdslEfficient", 2))

class Xldv20VdcPsdMask(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("m1", 1), ("m2", 2))

class Xldv20EthNtMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4))
    namedValues = NamedValues(("bridging", 1), ("routing", 2), ("currentConfiguration", 4))

class Xldv20E3nPayloadType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unequipped", 1), ("nonSpecific", 2), ("atm", 3))

class Xldv20CallpAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noAlarm", 1), ("alarmPresent", 2))

class Xldv20TpAlarmState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAlarm", 1), ("upstreamAlarm", 2), ("downstreamAlarm", 3), ("upAndDownstreamAlarm", 4))

class Xldv20Latency(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 256))
    namedValues = NamedValues(("interleavedLow", 0), ("interleavedHigh", 1), ("fast", 256))

class Xldv20TestType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("segment", 1), ("endToEnd", 2))

class Xldv20FlowDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("inwards", 2), ("outwards", 3))

class Xldv20OamLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("f1", 1), ("f2", 2), ("f3", 3), ("f4", 4), ("f5", 5))

class Xldv20TrapIds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 44, 45, 46, 100, 101, 105, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 200, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 450, 451, 452, 453, 454, 455, 456, 457, 458))
    namedValues = NamedValues(("trNoTrapId", 0), ("trHpExcBER", 1), ("trHpUNEQ", 2), ("trLcd", 3), ("trLof", 4), ("trLop", 5), ("trLos", 6), ("trMsAIS", 7), ("trMsExcBER", 8), ("trMsRDI", 9), ("trMsSD", 10), ("trPAIS", 11), ("trPRDI", 12), ("trRsExcBER", 13), ("trSlm", 14), ("trTim", 15), ("trActFault", 16), ("trReplaceableUnitTypeMismatch", 17), ("trReplaceableUnitFailure", 18), ("trReplaceableUnitProblem", 19), ("trReplaceableUnitNotInstalled", 20), ("trReplaceableUnitSwMismatch", 21), ("trReplaceableUnitReset", 22), ("trReplaceableUnitResetEnd", 23), ("trStartupEnd", 24), ("trLctSession", 25), ("trAgentRunning", 26), ("trRstResult", 27), ("trPltTestResult", 28), ("trStateChangeAdmin", 29), ("trStateChangeOper", 30), ("trChangeRate", 31), ("trCmuReadyForReset", 32), ("trAltTestResult", 33), ("trActivateLoadResult", 34), ("trPUUpgradeSucc", 35), ("trUpgradeCancelled", 36), ("trFtpError", 38), ("trSweLogRead", 40), ("trHwmLogRead", 41), ("trTraceLogRead", 42), ("trActCcReload", 44), ("trVplCcCreation", 45), ("trVplCcDeletion", 46), ("trObjCreate", 100), ("trObjDelete", 101), ("trXmissionErr", 105), ("trExternalAlarm", 110), ("trUnitReadyForReset", 111), ("trHwuControl", 112), ("trReplaceableUnitRemoved", 113), ("trAIS", 114), ("trRDI", 115), ("trPlcpLof", 116), ("trPlcpRDI", 117), ("trRemInvReady", 118), ("trDbBackup", 119), ("trSwVersionSet", 120), ("trReadSAPSContentFileReady", 121), ("trReplaceableUnitSwMissing", 122), ("trInternalFault", 123), ("trAttributeValueChange", 124), ("trVclCcCreation", 127), ("trVclCcDeletion", 128), ("trImmMNR", 130), ("trLpr", 131), ("trLol", 132), ("trAtmLayerMultiAlarm", 135), ("trTelnetSession", 136), ("trVplCACProblem", 137), ("trVclCACProblem", 139), ("trVplTpReload", 140), ("trWrongServiceConfigData", 141), ("trReplaceableUnitPlugged", 142), ("trReplaceableUnitUnplugged", 143), ("trStateChangeOperExt", 144), ("trLOC", 145), ("trDbRestore", 150), ("trUpgradeEndRequestResult", 151), ("trUnitUpgradeNotRequested", 152), ("trThresholdCrossingAlert", 200), ("trVpcTpCreation", 400), ("trVpcTpDeletion", 401), ("trVpcTpCACProblem", 402), ("trContinuityCheckVpEntryCreated", 403), ("trContinuityCheckVpEntryDeleted", 404), ("trContinuityCheckVcEntryCreated", 405), ("trContinuityCheckVcEntryDeleted", 406), ("trExcBER", 407), ("trLif", 408), ("trLods", 409), ("trTxUnusableFe", 410), ("trRxUnusableFe", 411), ("trRfiIma", 412), ("trRAI", 413), ("trStartUpFe", 450), ("trConfigAbort", 451), ("trConfigAbortFe", 452), ("trInsufficientLinks", 453), ("trInsufficientLinksFe", 454), ("trBlockedFe", 455), ("trImaMinNumOfLinks", 456), ("trStateChangeAvail", 457), ("trMaxTrapId", 458))

class Xldv20Requester(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tmn", 1), ("hwm", 2))

class Xldv20TimeZone(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44))
    namedValues = NamedValues(("gmt-12Eniwetok", 1), ("gmt-11MidwayIslandsSamoa", 2), ("gmt-10Hawaii", 3), ("gmt-9Alaska", 4), ("gmt-8TijuanaLosAngelesSeattleVancouver", 5), ("gmt-7ArizonaDenverSaltLakeCityCalgary", 6), ("gmt-6ChicagoDallasKansasCityWinnipeg", 7), ("gmt-6MexicoCityTegucigalpaSaskatchewan", 8), ("gmt-5BogotaLimaQuito", 9), ("gmt-5IndianaEast", 10), ("gmt-5NewYorkMiamiAtlantaDetroitToronto", 11), ("gmt-4CaracasLaPazMontrealQuebec", 12), ("gmt-330Neufundland", 13), ("gmt-3BrasiliaBuenosAiresGeorgetown", 14), ("gmt-2MiddleAtlantic", 15), ("gmt-1AzorenKaverdIslands", 16), ("gmtCasablancaDublinLissabonLondon", 17), ("gmt1AmsterdamMadridParisBelgradZagreb", 18), ("gmt1BerlinBernRomeStockholmVienna", 19), ("gmt1BudapestPrahaBratislavaWarschau", 20), ("gmt2AthensIstanbulMinskBukarest", 21), ("gmt2HararePretoriaHelsinkiRevalRiga", 22), ("gmt2IsraelKairo", 23), ("gmt3BagdadKuwaitErRiad", 24), ("gmt3MoskowStPetersburgWolgograd", 25), ("gmt3Nairobi", 26), ("gmt330Teheran", 27), ("gmt4AbuDhabiMuskatBakuTiflis", 28), ("gmt430Kabul", 29), ("gmt5IslamabadKarartschiTaschkent", 30), ("gmt5Jekaterinburg", 31), ("gmt530BombayKaluttaMadrasNewDehli", 32), ("gmt6AkmolaAlmaAtaDhakaColombo", 33), ("gmt7BangkokHanoiJakarta", 34), ("gmt8PekingChongqingHongkongUrumchi", 35), ("gmt8PerthSingapurTaipeh", 36), ("gmt9IrkutskOsakaSapporoTokyoSeoul", 37), ("gmt930AdelaideDarwin", 38), ("gmt10BrisbaneCanberraMlebourneSydney", 39), ("gmt10GuamPortMoresbyHobart", 40), ("gmt10Wladiwostok", 41), ("gmt11MagadanSalomonenNewCaledonia", 42), ("gmt12AucklandWellington", 43), ("gmt12FidschiKamtschatkaMarschallIslands", 44))

class Xldv20DayLightSavingTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("summerTime1", 1), ("summerTime2", 2), ("winterTime", 10))

class Xldv20AdslMargin(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127), SingleValueConstraint(128, 32766, 32767))
    namedValues = NamedValues(("dB-127", -127), ("dB-126", -126), ("dB-125", -125), ("dB-124", -124), ("dB-123", -123), ("dB-122", -122), ("dB-121", -121), ("dB-120", -120), ("dB-119", -119), ("dB-118", -118), ("dB-117", -117), ("dB-116", -116), ("dB-115", -115), ("dB-114", -114), ("dB-113", -113), ("dB-112", -112), ("dB-111", -111), ("dB-110", -110), ("dB-109", -109), ("dB-108", -108), ("dB-107", -107), ("dB-106", -106), ("dB-105", -105), ("dB-104", -104), ("dB-103", -103), ("dB-102", -102), ("dB-101", -101), ("dB-100", -100), ("dB-99", -99), ("dB-98", -98), ("dB-97", -97), ("dB-96", -96), ("dB-95", -95), ("dB-94", -94), ("dB-93", -93), ("dB-92", -92), ("dB-91", -91), ("dB-90", -90), ("dB-89", -89), ("dB-88", -88), ("dB-87", -87), ("dB-86", -86), ("dB-85", -85), ("dB-84", -84), ("dB-83", -83), ("dB-82", -82), ("dB-81", -81), ("dB-80", -80), ("dB-79", -79), ("dB-78", -78), ("dB-77", -77), ("dB-76", -76), ("dB-75", -75), ("dB-74", -74), ("dB-73", -73), ("dB-72", -72), ("dB-71", -71), ("dB-70", -70), ("dB-69", -69), ("dB-68", -68), ("dB-67", -67), ("dB-66", -66), ("dB-65", -65), ("dB-64", -64), ("dB-63", -63), ("dB-62", -62), ("dB-61", -61), ("dB-60", -60), ("dB-59", -59), ("dB-58", -58), ("dB-57", -57), ("dB-56", -56), ("dB-55", -55), ("dB-54", -54), ("dB-53", -53), ("dB-52", -52), ("dB-51", -51), ("dB-50", -50), ("dB-49", -49), ("dB-48", -48), ("dB-47", -47), ("dB-46", -46), ("dB-45", -45), ("dB-44", -44), ("dB-43", -43), ("dB-42", -42), ("dB-41", -41), ("dB-40", -40), ("dB-39", -39), ("dB-38", -38), ("dB-37", -37), ("dB-36", -36), ("dB-35", -35), ("dB-34", -34), ("dB-33", -33), ("dB-32", -32), ("dB-31", -31), ("dB-30", -30), ("dB-29", -29), ("dB-28", -28), ("dB-27", -27), ("dB-26", -26), ("dB-25", -25), ("dB-24", -24), ("dB-23", -23), ("dB-22", -22), ("dB-21", -21), ("dB-20", -20), ("dB-19", -19), ("dB-18", -18), ("dB-17", -17), ("dB-16", -16), ("dB-15", -15), ("dB-14", -14), ("dB-13", -13), ("dB-12", -12), ("dB-11", -11), ("dB-10", -10), ("dB-9", -9), ("dB-8", -8), ("dB-7", -7), ("dB-6", -6), ("dB-5", -5), ("dB-4", -4), ("dB-3", -3), ("dB-2", -2), ("dB-1", -1), ("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3), ("dB4", 4), ("dB5", 5), ("dB6", 6), ("dB7", 7), ("dB8", 8), ("dB9", 9), ("dB10", 10), ("dB11", 11), ("dB12", 12), ("dB13", 13), ("dB14", 14), ("dB15", 15), ("dB16", 16), ("dB17", 17), ("dB18", 18), ("dB19", 19), ("dB20", 20), ("dB21", 21), ("dB22", 22), ("dB23", 23), ("dB24", 24), ("dB25", 25), ("dB26", 26), ("dB27", 27), ("dB28", 28), ("dB29", 29), ("dB30", 30), ("dB31", 31), ("dB32", 32), ("dB33", 33), ("dB34", 34), ("dB35", 35), ("dB36", 36), ("dB37", 37), ("dB38", 38), ("dB39", 39), ("dB40", 40), ("dB41", 41), ("dB42", 42), ("dB43", 43), ("dB44", 44), ("dB45", 45), ("dB46", 46), ("dB47", 47), ("dB48", 48), ("dB49", 49), ("dB50", 50), ("dB51", 51), ("dB52", 52), ("dB53", 53), ("dB54", 54), ("dB55", 55), ("dB56", 56), ("dB57", 57), ("dB58", 58), ("dB59", 59), ("dB60", 60), ("dB61", 61), ("dB62", 62), ("dB63", 63), ("dB64", 64), ("dB65", 65), ("dB66", 66), ("dB67", 67), ("dB68", 68), ("dB69", 69), ("dB70", 70), ("dB71", 71), ("dB72", 72), ("dB73", 73), ("dB74", 74), ("dB75", 75), ("dB76", 76), ("dB77", 77), ("dB78", 78), ("dB79", 79), ("dB80", 80), ("dB81", 81), ("dB82", 82), ("dB83", 83), ("dB84", 84), ("dB85", 85), ("dB86", 86), ("dB87", 87), ("dB88", 88), ("dB89", 89), ("dB90", 90), ("dB91", 91), ("dB92", 92), ("dB93", 93), ("dB94", 94), ("dB95", 95), ("dB96", 96), ("dB97", 97), ("dB98", 98), ("dB99", 99), ("dB100", 100), ("dB101", 101), ("dB102", 102), ("dB103", 103), ("dB104", 104), ("dB105", 105), ("dB106", 106), ("dB107", 107), ("dB108", 108), ("dB109", 109), ("dB110", 110), ("dB111", 111), ("dB112", 112), ("dB113", 113), ("dB114", 114), ("dB115", 115), ("dB116", 116), ("dB117", 117), ("dB118", 118), ("dB119", 119), ("dB120", 120), ("dB121", 121), ("dB122", 122), ("dB123", 123), ("dB124", 124), ("dB125", 125), ("dB126", 126), ("dB127", 127)) + NamedValues(("dB128", 128), ("marginNotApplicable", 32766), ("marginInvalid", 32767))

class Xldv20AdslAttenuation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 32766, 32767))
    namedValues = NamedValues(("dB0", 0), ("dB0Dot5", 1), ("dB1", 2), ("dB1Dot5", 3), ("dB2", 4), ("dB2Dot5", 5), ("dB3", 6), ("dB3Dot5", 7), ("dB4", 8), ("dB4Dot5", 9), ("dB5", 10), ("dB5Dot5", 11), ("dB6", 12), ("dB6Dot5", 13), ("dB7", 14), ("dB7Dot5", 15), ("dB8", 16), ("dB8Dot5", 17), ("dB9", 18), ("dB9Dot5", 19), ("dB10", 20), ("dB10Dot5", 21), ("dB11", 22), ("dB11Dot5", 23), ("dB12", 24), ("dB12Dot5", 25), ("dB13", 26), ("dB13Dot5", 27), ("dB14", 28), ("dB14Dot5", 29), ("dB15", 30), ("dB15Dot5", 31), ("dB16", 32), ("dB16Dot5", 33), ("dB17", 34), ("dB17Dot5", 35), ("dB18", 36), ("dB18Dot5", 37), ("dB19", 38), ("dB19Dot5", 39), ("dB20", 40), ("dB20Dot5", 41), ("dB21", 42), ("dB21Dot5", 43), ("dB22", 44), ("dB22Dot5", 45), ("dB23", 46), ("dB23Dot5", 47), ("dB24", 48), ("dB24Dot5", 49), ("dB25", 50), ("dB25Dot5", 51), ("dB26", 52), ("dB26Dot5", 53), ("dB27", 54), ("dB27Dot5", 55), ("dB28", 56), ("dB28Dot5", 57), ("dB29", 58), ("dB29Dot5", 59), ("dB30", 60), ("dB30Dot5", 61), ("dB31", 62), ("dB31Dot5", 63), ("dB32", 64), ("dB32Dot5", 65), ("dB33", 66), ("dB33Dot5", 67), ("dB34", 68), ("dB34Dot5", 69), ("dB35", 70), ("dB35Dot5", 71), ("dB36", 72), ("dB36Dot5", 73), ("dB37", 74), ("dB37Dot5", 75), ("dB38", 76), ("dB38Dot5", 77), ("dB39", 78), ("dB39Dot5", 79), ("dB40", 80), ("dB40Dot5", 81), ("dB41", 82), ("dB41Dot5", 83), ("dB42", 84), ("dB42Dot5", 85), ("dB43", 86), ("dB43Dot5", 87), ("dB44", 88), ("dB44Dot5", 89), ("dB45", 90), ("dB45Dot5", 91), ("dB46", 92), ("dB46Dot5", 93), ("dB47", 94), ("dB47Dot5", 95), ("dB48", 96), ("dB48Dot5", 97), ("dB49", 98), ("dB49Dot5", 99), ("dB50", 100), ("dB50Dot5", 101), ("dB51", 102), ("dB51Dot5", 103), ("dB52", 104), ("dB52Dot5", 105), ("dB53", 106), ("dB53Dot5", 107), ("dB54", 108), ("dB54Dot5", 109), ("dB55", 110), ("dB55Dot5", 111), ("dB56", 112), ("dB56Dot5", 113), ("dB57", 114), ("dB57Dot5", 115), ("dB58", 116), ("dB58Dot5", 117), ("dB59", 118), ("dB59Dot5", 119), ("dB60", 120), ("dB60Dot5", 121), ("dB61", 122), ("dB61Dot5", 123), ("dB62", 124), ("dB62Dot5", 125), ("dB63", 126), ("dB63Dot5", 127), ("dB64", 128), ("dB64Dot5", 129), ("dB65", 130), ("dB65Dot5", 131), ("dB66", 132), ("dB66Dot5", 133), ("dB67", 134), ("dB67Dot5", 135), ("dB68", 136), ("dB68Dot5", 137), ("dB69", 138), ("dB69Dot5", 139), ("dB70", 140), ("dB70Dot5", 141), ("dB71", 142), ("dB71Dot5", 143), ("dB72", 144), ("dB72Dot5", 145), ("dB73", 146), ("dB73Dot5", 147), ("dB74", 148), ("dB74Dot5", 149), ("dB75", 150), ("dB75Dot5", 151), ("dB76", 152), ("dB76Dot5", 153), ("dB77", 154), ("dB77Dot5", 155), ("dB78", 156), ("dB78Dot5", 157), ("dB79", 158), ("dB79Dot5", 159), ("dB80", 160), ("dB80Dot5", 161), ("dB81", 162), ("dB81Dot5", 163), ("dB82", 164), ("dB82Dot5", 165), ("dB83", 166), ("dB83Dot5", 167), ("dB84", 168), ("dB84Dot5", 169), ("dB85", 170), ("dB85Dot5", 171), ("dB86", 172), ("dB86Dot5", 173), ("dB87", 174), ("dB87Dot5", 175), ("dB88", 176), ("dB88Dot5", 177), ("dB89", 178), ("dB89Dot5", 179), ("dB90", 180), ("dB90Dot5", 181), ("dB91", 182), ("dB91Dot5", 183), ("dB92", 184), ("dB92Dot5", 185), ("dB93", 186), ("dB93Dot5", 187), ("dB94", 188), ("dB94Dot5", 189), ("dB95", 190), ("dB95Dot5", 191), ("dB96", 192), ("dB96Dot5", 193), ("dB97", 194), ("dB97Dot5", 195), ("dB98", 196), ("dB98Dot5", 197), ("dB99", 198), ("dB99Dot5", 199), ("dB100", 200), ("dB100Dot5", 201), ("dB101", 202), ("dB101Dot5", 203), ("dB102", 204), ("dB102Dot5", 205), ("dB103", 206), ("dB103Dot5", 207), ("dB104", 208), ("dB104Dot5", 209), ("dB105", 210), ("dB105Dot5", 211), ("dB106", 212), ("dB106Dot5", 213), ("dB107", 214), ("dB107Dot5", 215), ("dB108", 216), ("dB108Dot5", 217), ("dB109", 218), ("dB109Dot5", 219), ("dB110", 220), ("dB110Dot5", 221), ("dB111", 222), ("dB111Dot5", 223), ("dB112", 224), ("dB112Dot5", 225), ("dB113", 226), ("dB113Dot5", 227), ("dB114", 228), ("dB114Dot5", 229), ("dB115", 230), ("dB115Dot5", 231), ("dB116", 232), ("dB116Dot5", 233), ("dB117", 234), ("dB117Dot5", 235), ("dB118", 236), ("dB118Dot5", 237), ("dB119", 238), ("dB119Dot5", 239), ("dB120", 240), ("dB120Dot5", 241), ("dB121", 242), ("dB121Dot5", 243), ("dB122", 244), ("dB122Dot5", 245), ("dB123", 246), ("dB123Dot5", 247), ("dB124", 248), ("dB124Dot5", 249), ("dB125", 250), ("dB125Dot5", 251), ("dB126", 252), ("dB126Dot5", 253), ("dB127", 254)) + NamedValues(("dB127Dot5", 255), ("attenuationNotApplicable", 32766), ("attenuationInvalid", 32767))

class Xldv20AdslMinMargin(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))
    namedValues = NamedValues(("dB-6", -6), ("dB-5", -5), ("dB-4", -4), ("dB-3", -3), ("dB-2", -2), ("dB-1", -1), ("dB0", 0), ("dB1", 1), ("dB2", 2), ("dB3", 3), ("dB4", 4), ("dB5", 5), ("dB6", 6), ("dB7", 7), ("dB8", 8), ("dB9", 9), ("dB10", 10), ("dB11", 11), ("dB12", 12), ("auto", 255))

class Xldv20AdslOutputPower(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32767))
    namedValues = NamedValues(("dBm-31", -31), ("dBm-30", -30), ("dBm-29", -29), ("dBm-28", -28), ("dBm-27", -27), ("dBm-26", -26), ("dBm-25", -25), ("dBm-24", -24), ("dBm-23", -23), ("dBm-22", -22), ("dBm-21", -21), ("dBm-20", -20), ("dBm-19", -19), ("dBm-18", -18), ("dBm-17", -17), ("dBm-16", -16), ("dBm-15", -15), ("dBm-14", -14), ("dBm-13", -13), ("dBm-12", -12), ("dBm-11", -11), ("dBm-10", -10), ("dBm-9", -9), ("dBm-8", -8), ("dBm-7", -7), ("dBm-6", -6), ("dBm-5", -5), ("dBm-4", -4), ("dBm-3", -3), ("dBm-2", -2), ("dBm-1", -1), ("dBm0", 0), ("dBm1", 1), ("dBm2", 2), ("dBm3", 3), ("dBm4", 4), ("dBm5", 5), ("dBm6", 6), ("dBm7", 7), ("dBm8", 8), ("dBm9", 9), ("dBm10", 10), ("dBm11", 11), ("dBm12", 12), ("dBm13", 13), ("dBm14", 14), ("dBm15", 15), ("dBm16", 16), ("dBm17", 17), ("dBm18", 18), ("dBm19", 19), ("dBm20", 20), ("dBm21", 21), ("dBm22", 22), ("dBm23", 23), ("dBm24", 24), ("dBm25", 25), ("dBm26", 26), ("dBm27", 27), ("dBm28", 28), ("dBm29", 29), ("dBm30", 30), ("dBm31", 31), ("dBm32", 32), ("outputPowerInvalid", 32767))

class Xldv20StartupResult(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("suFinished", 1), ("suFailed", 2), ("suStandaloneStartupFinished", 3), ("suInProgress", 4))

class Xldv20StartupType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(6300, 6301, 6302, 6303, 6304))
    namedValues = NamedValues(("warm", 6300), ("cold", 6301), ("reload", 6302), ("cmuUpgrade", 6303), ("powerUp", 6304))

class Xldv20SnmLctSession(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("sessionCancelled", 3), ("sessionTimeout", 4), ("onuCutSession", 5))

class Xldv20RepSource(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("hwm", 1), ("tlm", 2), ("vplNni", 3), ("vplUni", 4), ("extAlarm", 5), ("vccTp", 6), ("vpcTp", 7), ("vclTp", 9), ("vplTp", 10), ("vclNni", 11), ("vclUni", 12), ("vplCC", 13), ("vclCC", 14))

class Xldv20PollingFlagType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("flagSet", 1), ("flagNotSet", 2))

class Xldv20TerminalType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("tmn", 1), ("lct", 2), ("unknown", 10))

class Xldv20ChannelType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("inband", 1), ("outband", 2), ("unknown", 10))

class Xldv20XdslServiceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gDotHsMode", 1), ("ansiT1Dot413", 2), ("gDotLiteMode", 3), ("gDotAll", 4))

class Xldv20XdslServiceTypeCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))
    namedValues = NamedValues(("gDotDmtMode", 1), ("ansiT1Dot413", 2), ("gDotLiteMode", 3), ("serviceTypeUnknown", 10))

class Xldv20LoopMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("loopAndForward", 2))

class Xldv20XdslInitStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 255))
    namedValues = NamedValues(("ntNotPresent", 1), ("communicationFailed", 2), ("fastRetrainProfileError", 3), ("rateParameterConfigurationError", 4), ("serviceTypeAdrRequestRejected", 5), ("serviceTypeAdcRequestRejected", 6), ("configuredRatesOutOfRange", 7), ("configuredMinMaxRelationInvalid", 8), ("channelRatesExceedsSystemLimits", 9), ("adaptationCombinationInvalid", 10), ("configuredDualChannelInvalid", 11), ("marginLessThanMinMargin", 12), ("adrNotCapableOfDualLatency", 13), ("reserved1", 14), ("reserved2", 15), ("trainingBlockedBySu", 16), ("trainingBlockedByCi", 17), ("ntNotPresentDetectedOnCi", 18), ("gliteModeNotPossibleInPCM", 19), ("alarmsDetected", 20), ("initStatusUnknown", 21), ("noInitError", 255))

class Xldv20AdcTrainingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("enableParallelTraining", 1), ("avoidParallelTrainingOnCI", 2), ("avoidParallelTrainingOnSU", 3), ("combinedTraining", 4))

class Xldv20SdslServiceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("diamondLaneFraming", 1), ("clearChannelFraming", 2), ("ituFraming", 3))

class Xldv20AdslDataRateDown(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("kbps800Cps1886", 25), ("kbps832Cps1962", 26), ("kbps864Cps2037", 27), ("kbps896Cps2113", 28), ("kbps928Cps2188", 29), ("kbps960Cps2264", 30), ("kbps992Cps2339", 31), ("kbps1024Cps2415", 32), ("kbps1056Cps2490", 33), ("kbps1088Cps2566", 34), ("kbps1120Cps2641", 35), ("kbps1152Cps2716", 36), ("kbps1184Cps2792", 37), ("kbps1216Cps2867", 38), ("kbps1248Cps2943", 39), ("kbps1280Cps3018", 40), ("kbps1312Cps3094", 41), ("kbps1344Cps3169", 42), ("kbps1376Cps3245", 43), ("kbps1408Cps3320", 44), ("kbps1440Cps3396", 45), ("kbps1472Cps3471", 46), ("kbps1504Cps3547", 47), ("kbps1536Cps3622", 48), ("kbps1568Cps3698", 49), ("kbps1600Cps3773", 50), ("kbps1632Cps3849", 51), ("kbps1664Cps3924", 52), ("kbps1696Cps4000", 53), ("kbps1728Cps4075", 54), ("kbps1760Cps4150", 55), ("kbps1792Cps4226", 56), ("kbps1824Cps4301", 57), ("kbps1856Cps4377", 58), ("kbps1888Cps4452", 59), ("kbps1920Cps4528", 60), ("kbps1952Cps4603", 61), ("kbps1984Cps4679", 62), ("kbps2016Cps4754", 63), ("kbps2048Cps4830", 64), ("kbps2080Cps4905", 65), ("kbps2112Cps4981", 66), ("kbps2144Cps5056", 67), ("kbps2176Cps5132", 68), ("kbps2208Cps5207", 69), ("kbps2240Cps5283", 70), ("kbps2272Cps5358", 71), ("kbps2304Cps5433", 72), ("kbps2336Cps5509", 73), ("kbps2368Cps5584", 74), ("kbps2400Cps5660", 75), ("kbps2432Cps5735", 76), ("kbps2464Cps5811", 77), ("kbps2496Cps5886", 78), ("kbps2528Cps5962", 79), ("kbps2560Cps6037", 80), ("kbps2592Cps6113", 81), ("kbps2624Cps6188", 82), ("kbps2656Cps6264", 83), ("kbps2688Cps6339", 84), ("kbps2720Cps6415", 85), ("kbps2752Cps6490", 86), ("kbps2784Cps6566", 87), ("kbps2816Cps6641", 88), ("kbps2848Cps6716", 89), ("kbps2880Cps6792", 90), ("kbps2912Cps6867", 91), ("kbps2944Cps6943", 92), ("kbps2976Cps7018", 93), ("kbps3008Cps7094", 94), ("kbps3040Cps7169", 95), ("kbps3072Cps7245", 96), ("kbps3104Cps7320", 97), ("kbps3136Cps7396", 98), ("kbps3168Cps7471", 99), ("kbps3200Cps7547", 100), ("kbps3232Cps7622", 101), ("kbps3264Cps7698", 102), ("kbps3296Cps7773", 103), ("kbps3328Cps7849", 104), ("kbps3360Cps7924", 105), ("kbps3392Cps8000", 106), ("kbps3424Cps8075", 107), ("kbps3456Cps8150", 108), ("kbps3488Cps8226", 109), ("kbps3520Cps8301", 110), ("kbps3552Cps8377", 111), ("kbps3584Cps8452", 112), ("kbps3616Cps8528", 113), ("kbps3648Cps8603", 114), ("kbps3680Cps8679", 115), ("kbps3712Cps8754", 116), ("kbps3744Cps8830", 117), ("kbps3776Cps8905", 118), ("kbps3808Cps8981", 119), ("kbps3840Cps9056", 120), ("kbps3872Cps9132", 121), ("kbps3904Cps9207", 122), ("kbps3936Cps9283", 123), ("kbps3968Cps9358", 124), ("kbps4000Cps9433", 125), ("kbps4032Cps9509", 126), ("kbps4064Cps9584", 127), ("kbps4096Cps9660", 128), ("kbps4128Cps9735", 129), ("kbps4160Cps9811", 130), ("kbps4192Cps9886", 131), ("kbps4224Cps9962", 132), ("kbps4256Cps10037", 133), ("kbps4288Cps10113", 134), ("kbps4320Cps10188", 135), ("kbps4352Cps10264", 136), ("kbps4384Cps10339", 137), ("kbps4416Cps10415", 138), ("kbps4448Cps10490", 139), ("kbps4480Cps10566", 140), ("kbps4512Cps10641", 141), ("kbps4544Cps10716", 142), ("kbps4576Cps10792", 143), ("kbps4608Cps10867", 144), ("kbps4640Cps10943", 145), ("kbps4672Cps11018", 146), ("kbps4704Cps11094", 147), ("kbps4736Cps11169", 148), ("kbps4768Cps11245", 149), ("kbps4800Cps11320", 150), ("kbps4832Cps11396", 151), ("kbps4864Cps11471", 152), ("kbps4896Cps11547", 153), ("kbps4928Cps11622", 154), ("kbps4960Cps11698", 155), ("kbps4992Cps11773", 156), ("kbps5024Cps11849", 157), ("kbps5056Cps11924", 158), ("kbps5088Cps12000", 159), ("kbps5120Cps12075", 160), ("kbps5152Cps12150", 161), ("kbps5184Cps12226", 162), ("kbps5216Cps12301", 163), ("kbps5248Cps12377", 164), ("kbps5280Cps12452", 165), ("kbps5312Cps12528", 166), ("kbps5344Cps12603", 167), ("kbps5376Cps12679", 168), ("kbps5408Cps12754", 169), ("kbps5440Cps12830", 170), ("kbps5472Cps12905", 171), ("kbps5504Cps12981", 172), ("kbps5536Cps13056", 173), ("kbps5568Cps13132", 174), ("kbps5600Cps13207", 175), ("kbps5632Cps13283", 176), ("kbps5664Cps13358", 177), ("kbps5696Cps13433", 178), ("kbps5728Cps13509", 179), ("kbps5760Cps13584", 180), ("kbps5792Cps13660", 181), ("kbps5824Cps13735", 182), ("kbps5856Cps13811", 183), ("kbps5888Cps13886", 184), ("kbps5920Cps13962", 185), ("kbps5952Cps14037", 186), ("kbps5984Cps14113", 187), ("kbps6016Cps14188", 188), ("kbps6048Cps14264", 189), ("kbps6080Cps14339", 190), ("kbps6112Cps14415", 191), ("kbps6144Cps14490", 192), ("kbps6176Cps14566", 193), ("kbps6208Cps14641", 194), ("kbps6240Cps14716", 195), ("kbps6272Cps14792", 196), ("kbps6304Cps14867", 197), ("kbps6336Cps14943", 198), ("kbps6368Cps15018", 199), ("kbps6400Cps15094", 200), ("kbps6432Cps15169", 201), ("kbps6464Cps15245", 202), ("kbps6496Cps15320", 203), ("kbps6528Cps15396", 204), ("kbps6560Cps15471", 205), ("kbps6592Cps15547", 206), ("kbps6624Cps15622", 207), ("kbps6656Cps15698", 208), ("kbps6688Cps15773", 209), ("kbps6720Cps15849", 210), ("kbps6752Cps15924", 211), ("kbps6784Cps16000", 212), ("kbps6816Cps16075", 213), ("kbps6848Cps16150", 214), ("kbps6880Cps16226", 215), ("kbps6912Cps16301", 216), ("kbps6944Cps16377", 217), ("kbps6976Cps16452", 218), ("kbps7008Cps16528", 219), ("kbps7040Cps16603", 220), ("kbps7072Cps16679", 221), ("kbps7104Cps16754", 222), ("kbps7136Cps16830", 223), ("kbps7168Cps16905", 224), ("kbps7200Cps16981", 225), ("kbps7232Cps17056", 226), ("kbps7264Cps17132", 227), ("kbps7296Cps17207", 228), ("kbps7328Cps17283", 229), ("kbps7360Cps17358", 230), ("kbps7392Cps17433", 231), ("kbps7424Cps17509", 232), ("kbps7456Cps17584", 233), ("kbps7488Cps17660", 234), ("kbps7520Cps17735", 235), ("kbps7552Cps17811", 236), ("kbps7584Cps17886", 237), ("kbps7616Cps17962", 238), ("kbps7648Cps18037", 239), ("kbps7680Cps18113", 240), ("kbps7712Cps18188", 241), ("kbps7744Cps18264", 242), ("kbps7776Cps18339", 243), ("kbps7808Cps18415", 244), ("kbps7840Cps18490", 245), ("kbps7872Cps18566", 246), ("kbps7904Cps18641", 247), ("kbps7936Cps18716", 248), ("kbps7968Cps18792", 249), ("kbps8000Cps18867", 250), ("kbps8032Cps18943", 251), ("kbps8064Cps19018", 252), ("kbps8096Cps19094", 253))

class Xldv20AdslDataRateUp(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24))

class Xldv20AdslDataRateDownCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 32767))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("kbps800Cps1886", 25), ("kbps832Cps1962", 26), ("kbps864Cps2037", 27), ("kbps896Cps2113", 28), ("kbps928Cps2188", 29), ("kbps960Cps2264", 30), ("kbps992Cps2339", 31), ("kbps1024Cps2415", 32), ("kbps1056Cps2490", 33), ("kbps1088Cps2566", 34), ("kbps1120Cps2641", 35), ("kbps1152Cps2716", 36), ("kbps1184Cps2792", 37), ("kbps1216Cps2867", 38), ("kbps1248Cps2943", 39), ("kbps1280Cps3018", 40), ("kbps1312Cps3094", 41), ("kbps1344Cps3169", 42), ("kbps1376Cps3245", 43), ("kbps1408Cps3320", 44), ("kbps1440Cps3396", 45), ("kbps1472Cps3471", 46), ("kbps1504Cps3547", 47), ("kbps1536Cps3622", 48), ("kbps1568Cps3698", 49), ("kbps1600Cps3773", 50), ("kbps1632Cps3849", 51), ("kbps1664Cps3924", 52), ("kbps1696Cps4000", 53), ("kbps1728Cps4075", 54), ("kbps1760Cps4150", 55), ("kbps1792Cps4226", 56), ("kbps1824Cps4301", 57), ("kbps1856Cps4377", 58), ("kbps1888Cps4452", 59), ("kbps1920Cps4528", 60), ("kbps1952Cps4603", 61), ("kbps1984Cps4679", 62), ("kbps2016Cps4754", 63), ("kbps2048Cps4830", 64), ("kbps2080Cps4905", 65), ("kbps2112Cps4981", 66), ("kbps2144Cps5056", 67), ("kbps2176Cps5132", 68), ("kbps2208Cps5207", 69), ("kbps2240Cps5283", 70), ("kbps2272Cps5358", 71), ("kbps2304Cps5433", 72), ("kbps2336Cps5509", 73), ("kbps2368Cps5584", 74), ("kbps2400Cps5660", 75), ("kbps2432Cps5735", 76), ("kbps2464Cps5811", 77), ("kbps2496Cps5886", 78), ("kbps2528Cps5962", 79), ("kbps2560Cps6037", 80), ("kbps2592Cps6113", 81), ("kbps2624Cps6188", 82), ("kbps2656Cps6264", 83), ("kbps2688Cps6339", 84), ("kbps2720Cps6415", 85), ("kbps2752Cps6490", 86), ("kbps2784Cps6566", 87), ("kbps2816Cps6641", 88), ("kbps2848Cps6716", 89), ("kbps2880Cps6792", 90), ("kbps2912Cps6867", 91), ("kbps2944Cps6943", 92), ("kbps2976Cps7018", 93), ("kbps3008Cps7094", 94), ("kbps3040Cps7169", 95), ("kbps3072Cps7245", 96), ("kbps3104Cps7320", 97), ("kbps3136Cps7396", 98), ("kbps3168Cps7471", 99), ("kbps3200Cps7547", 100), ("kbps3232Cps7622", 101), ("kbps3264Cps7698", 102), ("kbps3296Cps7773", 103), ("kbps3328Cps7849", 104), ("kbps3360Cps7924", 105), ("kbps3392Cps8000", 106), ("kbps3424Cps8075", 107), ("kbps3456Cps8150", 108), ("kbps3488Cps8226", 109), ("kbps3520Cps8301", 110), ("kbps3552Cps8377", 111), ("kbps3584Cps8452", 112), ("kbps3616Cps8528", 113), ("kbps3648Cps8603", 114), ("kbps3680Cps8679", 115), ("kbps3712Cps8754", 116), ("kbps3744Cps8830", 117), ("kbps3776Cps8905", 118), ("kbps3808Cps8981", 119), ("kbps3840Cps9056", 120), ("kbps3872Cps9132", 121), ("kbps3904Cps9207", 122), ("kbps3936Cps9283", 123), ("kbps3968Cps9358", 124), ("kbps4000Cps9433", 125), ("kbps4032Cps9509", 126), ("kbps4064Cps9584", 127), ("kbps4096Cps9660", 128), ("kbps4128Cps9735", 129), ("kbps4160Cps9811", 130), ("kbps4192Cps9886", 131), ("kbps4224Cps9962", 132), ("kbps4256Cps10037", 133), ("kbps4288Cps10113", 134), ("kbps4320Cps10188", 135), ("kbps4352Cps10264", 136), ("kbps4384Cps10339", 137), ("kbps4416Cps10415", 138), ("kbps4448Cps10490", 139), ("kbps4480Cps10566", 140), ("kbps4512Cps10641", 141), ("kbps4544Cps10716", 142), ("kbps4576Cps10792", 143), ("kbps4608Cps10867", 144), ("kbps4640Cps10943", 145), ("kbps4672Cps11018", 146), ("kbps4704Cps11094", 147), ("kbps4736Cps11169", 148), ("kbps4768Cps11245", 149), ("kbps4800Cps11320", 150), ("kbps4832Cps11396", 151), ("kbps4864Cps11471", 152), ("kbps4896Cps11547", 153), ("kbps4928Cps11622", 154), ("kbps4960Cps11698", 155), ("kbps4992Cps11773", 156), ("kbps5024Cps11849", 157), ("kbps5056Cps11924", 158), ("kbps5088Cps12000", 159), ("kbps5120Cps12075", 160), ("kbps5152Cps12150", 161), ("kbps5184Cps12226", 162), ("kbps5216Cps12301", 163), ("kbps5248Cps12377", 164), ("kbps5280Cps12452", 165), ("kbps5312Cps12528", 166), ("kbps5344Cps12603", 167), ("kbps5376Cps12679", 168), ("kbps5408Cps12754", 169), ("kbps5440Cps12830", 170), ("kbps5472Cps12905", 171), ("kbps5504Cps12981", 172), ("kbps5536Cps13056", 173), ("kbps5568Cps13132", 174), ("kbps5600Cps13207", 175), ("kbps5632Cps13283", 176), ("kbps5664Cps13358", 177), ("kbps5696Cps13433", 178), ("kbps5728Cps13509", 179), ("kbps5760Cps13584", 180), ("kbps5792Cps13660", 181), ("kbps5824Cps13735", 182), ("kbps5856Cps13811", 183), ("kbps5888Cps13886", 184), ("kbps5920Cps13962", 185), ("kbps5952Cps14037", 186), ("kbps5984Cps14113", 187), ("kbps6016Cps14188", 188), ("kbps6048Cps14264", 189), ("kbps6080Cps14339", 190), ("kbps6112Cps14415", 191), ("kbps6144Cps14490", 192), ("kbps6176Cps14566", 193), ("kbps6208Cps14641", 194), ("kbps6240Cps14716", 195), ("kbps6272Cps14792", 196), ("kbps6304Cps14867", 197), ("kbps6336Cps14943", 198), ("kbps6368Cps15018", 199), ("kbps6400Cps15094", 200), ("kbps6432Cps15169", 201), ("kbps6464Cps15245", 202), ("kbps6496Cps15320", 203), ("kbps6528Cps15396", 204), ("kbps6560Cps15471", 205), ("kbps6592Cps15547", 206), ("kbps6624Cps15622", 207), ("kbps6656Cps15698", 208), ("kbps6688Cps15773", 209), ("kbps6720Cps15849", 210), ("kbps6752Cps15924", 211), ("kbps6784Cps16000", 212), ("kbps6816Cps16075", 213), ("kbps6848Cps16150", 214), ("kbps6880Cps16226", 215), ("kbps6912Cps16301", 216), ("kbps6944Cps16377", 217), ("kbps6976Cps16452", 218), ("kbps7008Cps16528", 219), ("kbps7040Cps16603", 220), ("kbps7072Cps16679", 221), ("kbps7104Cps16754", 222), ("kbps7136Cps16830", 223), ("kbps7168Cps16905", 224), ("kbps7200Cps16981", 225), ("kbps7232Cps17056", 226), ("kbps7264Cps17132", 227), ("kbps7296Cps17207", 228), ("kbps7328Cps17283", 229), ("kbps7360Cps17358", 230), ("kbps7392Cps17433", 231), ("kbps7424Cps17509", 232), ("kbps7456Cps17584", 233), ("kbps7488Cps17660", 234), ("kbps7520Cps17735", 235), ("kbps7552Cps17811", 236), ("kbps7584Cps17886", 237), ("kbps7616Cps17962", 238), ("kbps7648Cps18037", 239), ("kbps7680Cps18113", 240), ("kbps7712Cps18188", 241), ("kbps7744Cps18264", 242), ("kbps7776Cps18339", 243), ("kbps7808Cps18415", 244), ("kbps7840Cps18490", 245), ("kbps7872Cps18566", 246), ("kbps7904Cps18641", 247), ("kbps7936Cps18716", 248), ("kbps7968Cps18792", 249), ("kbps8000Cps18867", 250), ("kbps8032Cps18943", 251), ("kbps8064Cps19018", 252), ("kbps8096Cps19094", 253), ("rateInvalid", 32767))

class Xldv20AdslDataRateUpCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32767))
    namedValues = NamedValues(("kbps32Cps75", 1), ("kbps64Cps150", 2), ("kbps96Cps226", 3), ("kbps128Cps301", 4), ("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps224Cps528", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps416Cps981", 13), ("kbps448Cps1056", 14), ("kbps480Cps1132", 15), ("kbps512Cps1207", 16), ("kbps544Cps1283", 17), ("kbps576Cps1358", 18), ("kbps608Cps1433", 19), ("kbps640Cps1509", 20), ("kbps672Cps1584", 21), ("kbps704Cps1660", 22), ("kbps736Cps1735", 23), ("kbps768Cps1811", 24), ("rateInvalid", 32767))

class Xldv20SdslDataRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 36, 37, 48, 49, 54, 72))
    namedValues = NamedValues(("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps208Cps490", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps400Cps943", 13), ("kbps768Cps1811", 24), ("kbps784Cps1849", 25), ("kbps1152Cps2716", 36), ("kbps1168Cps2754", 37), ("kbps1536Cps3622", 48), ("kbps1552Cps3660", 49), ("kbps1744Cps4113", 54), ("kbps2320Cps5471", 72))

class Xldv20SdslDataRateCurrent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 36, 37, 48, 49, 54, 72, 32767))
    namedValues = NamedValues(("kbps160Cps377", 5), ("kbps192Cps452", 6), ("kbps208Cps490", 7), ("kbps256Cps603", 8), ("kbps288Cps679", 9), ("kbps320Cps754", 10), ("kbps352Cps830", 11), ("kbps384Cps905", 12), ("kbps400Cps943", 13), ("kbps768Cps1811", 24), ("kbps784Cps1849", 25), ("kbps1152Cps2716", 36), ("kbps1168Cps2754", 37), ("kbps1536Cps3622", 48), ("kbps1552Cps3660", 49), ("kbps1744Cps4113", 54), ("kbps2320Cps5471", 72), ("rateInvalid", 32767))

class Xldv20ControlReq(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 5, 11, 12, 13, 14, 15, 16, 1000, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2100, 2101, 2102, 2103, 2106, 2107, 2108, 2109, 2110, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142, 2143, 2144, 2150, 2151, 2152, 2153, 2200, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2300, 2351, 2352, 2353, 2354, 2355, 2356, 2400, 2451, 2452, 2453, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 3000, 3001, 3002, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 4000, 4001, 5000, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5119, 5161, 5162, 5500, 5600, 5901, 5902, 6000, 6211, 6213, 6214, 6300, 6301, 6302, 6303, 6353, 6354, 6355, 6356, 6980, 7000, 7081, 7082, 7083, 7084, 8000, 8001, 8003, 8004, 8006, 8050, 8051, 8052, 8053, 8054, 8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8336, 8337, 8400, 8401, 8402, 8404, 8408, 8416, 8432, 8464, 9000, 9050, 9051, 9052, 9053, 9054, 9055, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107, 9108, 9109, 9200, 9201, 9202, 9203))
    namedValues = NamedValues(("noRequest", 1), ("commExecStarted", 5), ("paramFaulty", 11), ("requestBusy", 12), ("setDataFailed", 13), ("aswTimeout", 14), ("commandFailed", 15), ("commandSucceeded", 16), ("snmUpdateSnmpConfigFile", 1000), ("snmUpdateComplete", 1051), ("snmUpdateFailed", 1052), ("snmFtpError", 1053), ("snmUpFtpIpAddrFailed", 1054), ("snmUpFtpAccountFailed", 1055), ("snmUpFtpPasswdFailed", 1056), ("snmUpFtpDescPathFailed", 1057), ("createVplCC", 2001), ("deleteVplCC", 2002), ("createEthVplCC", 2003), ("deleteEthVplCC", 2004), ("createVpcTp", 2005), ("deleteVpcTp", 2006), ("createEthVpcTp", 2007), ("deleteEthVpcTp", 2008), ("createVclCC", 2009), ("deleteVclCC", 2010), ("createEthVclCC", 2011), ("deleteEthVclCC", 2012), ("modifyNumberOfVcs", 2013), ("actVpiNniFaulty", 2100), ("actVpiUniFaulty", 2101), ("actPortLocationIdFaulty", 2102), ("actControlReqFaulty", 2103), ("actPeakCellRateUpstreamFaulty", 2106), ("actPeakCellRateDownstreamFaulty", 2107), ("actCellDelayVariationUpstreamFaulty", 2108), ("actCellDelayVariationDownstreamFaulty", 2109), ("actTrafficTypeFaulty", 2110), ("actSCRUpstreamFaulty", 2114), ("actSCRDownstreamFaulty", 2115), ("actMBSUpstreamFaulty", 2116), ("actMBSDownstreamFaulty", 2117), ("actVpcTpNotExisting", 2118), ("actTrafficDirectionFaulty", 2119), ("actVciNniFaulty", 2120), ("actVciUniFaulty", 2121), ("actLineBlocked", 2122), ("actVpcTpExists", 2123), ("actWrongLiType", 2132), ("actSegmentEndPointUniFaulty", 2133), ("actSegmentEndPointNniFaulty", 2134), ("actVclCCExists", 2135), ("actNumberOfVcsFaulty", 2136), ("actVbrCDVTUpstreamFaulty", 2137), ("actVbrCDVTDownstreamFaulty", 2138), ("actMaxCcsPerPortExceeded", 2140), ("actMaxNumberOfVcsToSmall", 2141), ("actSegmentEndPointNtFaulty", 2142), ("actMaxNrOfCcsInDbExceeded", 2143), ("actMaxNrOfCcsOnHwExceeded", 2144), ("lineNotEnabled", 2150), ("ccExists", 2151), ("vpiUniNotExisting", 2152), ("vciTrafficTypeInvalid", 2153), ("configEth", 2200), ("configEthFailed", 2251), ("ethModeInvalid", 2252), ("ethVpiUniNotExisting", 2253), ("ethVciUniNotExisting", 2254), ("ethVciTrafficTypeFaulty", 2255), ("ethVciPeakCellRateUpstreamFaulty", 2256), ("actEthVpcTpDeletionNotAllowed", 2257), ("continuityCheckRequest", 2300), ("continuityCheckAlreadyEnabled", 2351), ("continuityCheckAlreadyDisabled", 2352), ("continuityCheckReject", 2353), ("continuityCheckTestTypeConflict", 2354), ("continuityCheckNotSupportedOnNt", 2355), ("continuityCheckTrafficDirectionConflict", 2356), ("configInbandTmn", 2400), ("configInbandTmnFailed", 2451), ("inbandVpiExists", 2452), ("inbandVciExists", 2453), ("cacBwOverflowUp", 2551), ("cacBwOverflowDown", 2552), ("cacLineBlockedByTlm", 2553), ("cacTrafficTypeConflict", 2554), ("cacTrafficDirectionConflict", 2555), ("cacMbsOverflowUp", 2556), ("cacMbsOverflowDown", 2557), ("cacBwWarningUp", 2558), ("cacBwWarningDown", 2559), ("cacMbsWarningUp", 2560), ("cacMbsWarningDown", 2561), ("cacMbsScrError", 2562), ("cacInternalError", 2563), ("createHwUnit", 3000), ("deleteHwUnit", 3001), ("changeHwUnitForced", 3002), ("hwuParamFaulty", 3100), ("hwuCommandFailed", 3101), ("hwuObjExists", 3102), ("hwuEquTypeNotAvail", 3103), ("hwuEqhTypeNotAvail", 3104), ("hwuPiuTypeNotAvail", 3105), ("hwuPiuTypeNotAccepted", 3106), ("hwuContainingUnitNotAvail", 3107), ("hwuObjNotAvail", 3108), ("hwuObjNotEmpty", 3109), ("hwuObjNotLocked", 3110), ("hwuObjNotValid", 3111), ("hwuOk", 3112), ("hwuCreateHwUnitComplete", 3113), ("hwuCcExisting", 3114), ("hwuForcedChangeNotAllowed", 3115), ("hwuUpgradeRunning", 3116), ("riSingleBoard", 4000), ("riAllData", 4001), ("activateData", 5000), ("resourceProblem", 5150), ("vpProblem", 5151), ("resourceProblemUpstream", 5152), ("resourceProblemDownstream", 5153), ("vpProblemUpstream", 5154), ("vpProblemDownstream", 5155), ("bandwidthUpstreamWarning", 5156), ("bandwidthDownstreamWarning", 5157), ("mbsUpstreamWarning", 5158), ("mbsDownstreamWarning", 5119), ("wrongAdminState", 5161), ("wrongXdslServiceType", 5162), ("loopDiagRequest", 5500), ("loopTestRequest", 5600), ("loopTestReject", 5901), ("loopTestBusy", 5902), ("updateAlmList", 6000), ("updateFiltList", 6211), ("startSendingAlarms", 6213), ("noCurrentAlarms", 6214), ("warm", 6300), ("cold", 6301), ("reload", 6302), ("dbReload", 6303), ("rjUpgRunning", 6353), ("rjRstRunning", 6354), ("rjPiuNotAvail", 6355), ("rjResetNotSupported", 6356), ("rstRequestFailed", 6980), ("dbuReadRequest", 7000), ("dbuReadComplete", 7081), ("dbuReadFailed", 7082), ("dbuFileCreationFailed", 7083), ("dbuFileTransmissionFailed", 7084), ("sucUpgrStartRequest", 8000), ("sucActivateLoad", 8001), ("sucReadSAPSContentFile", 8003), ("sucGetSwVersions", 8004), ("sucUpgrEndRequest", 8006), ("sucUpgrTaskCreationFault", 8050), ("sucUpgrDbAccessFault", 8051), ("sucGetSwVersionsFailed", 8052), ("sucUpgrMissParameter", 8053), ("sucAlreadyLoaded", 8054), ("sucOk", 8320), ("sucNotOk", 8321), ("sucDbAccessFailed", 8322), ("sucPiuUnlocked", 8323), ("sucTransmissionError", 8324), ("sucWrongSwVersion", 8325), ("sucUnitTypeMismatch", 8326), ("sucFtpTransError", 8327), ("sucFtpCrcError", 8328), ("sucSwHwMismatch", 8329), ("sucUpgrWrongAvState", 8330), ("sucFepromCopyFault", 8331), ("sucUpdateDescFileFailed", 8332), ("sucFtpServerNoteAvailable", 8333), ("sucFtpSendError", 8334), ("sucDbBackupFault", 8335), ("sucUpgradeComplete", 8336), ("sucUpgradeNotComplete", 8337), ("sutInitialized", 8400), ("sutToDo", 8401), ("sutStarted", 8402), ("sutCrashed", 8404), ("sutFtpDone", 8408), ("sutDone", 8416), ("sutReadyForReset", 8432), ("sutObsolete", 8464), ("backupDb", 9000), ("localBackupOk", 9050), ("remoteBackupOk", 9051), ("localBackupFailed", 9052), ("remoteBackupFailed", 9053), ("flashAccessFailed", 9054), ("dbReadFailed", 9055), ("dbmLocalBackupOk", 9100), ("dbmRemoteBackupOk", 9101), ("dbmLocalBackupFailed", 9102), ("dbmRemoteBackupFailed", 9103), ("dbmFlashAccessFailed", 9104), ("dbmDbReadFailed", 9105), ("dbmLocalBackupFileFaulty", 9106), ("dbmRemoteBackupFileFaulty", 9107), ("dbmRestoreFailed", 9108), ("dbmRestoreOk", 9109), ("imaSetMinNumTxLinks", 9200), ("imaBwError", 9201), ("imaSetMinNumOk", 9202), ("imaSetMinNumFailed", 9203))

xldv20SnmpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1))
xldv20CallP = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2))
xldv20Hwm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3))
xldv20Tlm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4))
xldv20TlmOam = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5))
xldv20Alarming = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6))
xldv20Swm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7))
xldv20Dbm = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8))
xldv20TlmIma = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9))
xldv20Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10))
xldv20SnmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1))
xldv20SnmTmnTrapFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 1), Xldv20SuppressionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmTmnTrapFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmTmnTrapFlowControl.setDescription(' TMN specific flag to suppress or not autonomous messages to TMN-OS. Default is noTraps after reload or first time power up. ')
xldv20SnmLctTrapFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 2), Xldv20SuppressionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctTrapFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmLctTrapFlowControl.setDescription(' TMN specific flag to suppress or not autonomous messages to LCT. Default is noTraps after reload or first time power up. ')
xldv20SnmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 3), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmControlReq.setDescription(' The user command to start an update of SNMP configuration file . ')
xldv20SnmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 4), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmControlStatus.setDescription(' The status of control request. The start of an update of the configuration file will only be started if the SnmControlStatus is not requestBusy. ')
xldv20SnmLctConnected = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctConnected.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmLctConnected.setDescription(' If a LCT is connected to the DSLAM the attribute will be set . ')
xldv20SnmTmnConnected = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmTmnConnected.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmTmnConnected.setDescription(" The attribute is set by TMN-OS to indicate the receipt of the trap 'startupEnd' . ")
xldv20SnmMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmMaxResponseTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmMaxResponseTime.setDescription(' TMN-OS maximum wait time in seconds for responses . ')
xldv20SnmTmnMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 8), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmTmnMaxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmTmnMaxNumber.setDescription(' The maximum number of TMNs which can be connected. ')
xldv20SnmTmnSpecificIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 9), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmTmnSpecificIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmTmnSpecificIndex.setDescription(' The specific index of a TMN which can be connected. ')
xldv20SnmCallpPollingFlag = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 10), Xldv20PollingFlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmCallpPollingFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmCallpPollingFlag.setDescription(' The TMN can poll this global alarm flag to see whether for any COH object an alarm is present. ')
xldv20SnmLctSessionPollingFlag = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 11), Xldv20PollingFlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SnmLctSessionPollingFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmLctSessionPollingFlag.setDescription(' The TMN can poll this flag to see whether an LCT session has been terminated within the last polling period (value set). During the LCT session DSLAM configuration data may have been changed and therefore the TMN database is inconsistent. The TMN can perform a discovery to sychronize the data. The TMN should set the value to notSet before the discovery. ')
xldv20SnmControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 12), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmControlReqResult.setDescription(' Result of the last user command. ')
xldv20SnmStartupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 13), Xldv20StartupResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmStartupResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmStartupResult.setDescription(' Result of the last startup . ')
xldv20SnmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SnmControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SnmControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20TmnTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2), )
if mibBuilder.loadTexts: xldv20TmnTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnTable.setDescription(' Table for TMN specific data. Instances of this managed entity shall be automatically SNMP configuration file has been read. ')
xldv20TmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20TmnIndex"))
if mibBuilder.loadTexts: xldv20TmnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnEntry.setDescription(' An entry in the xldv20TmnTable. Notifications : none. ')
xldv20TmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnIndex.setDescription(' Index of TmnTable. Entries of the table with same index belong to the same TMN. ')
xldv20TmnOrLctTerminal = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 2), Xldv20TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnOrLctTerminal.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnOrLctTerminal.setDescription(' Specifies a LCT or TMN terminal. ')
xldv20TmnInOrOutBand = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 3), Xldv20ChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnInOrOutBand.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnInOrOutBand.setDescription(' Specifies whether communication is in or outband. ')
xldv20TmnConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnConnected.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnConnected.setDescription(' The attribute indicates whether this TMN/LCT is connected. ')
xldv20TmnTrapFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 5), Xldv20SuppressionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnTrapFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnTrapFlowControl.setDescription(' To suppress or not autonomous messages to TMN-OS. Default : noTraps after reload or first time power up. ')
xldv20TmnLctSessionPollingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 1, 2, 1, 6), Xldv20PollingFlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20TmnLctSessionPollingFlag.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TmnLctSessionPollingFlag.setDescription(' TMN specific LCT session polling flag. ')
xldv20AtmCcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1))
xldv20ActOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 1), Xldv20OperState())
if mibBuilder.loadTexts: xldv20ActOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActOperationalState.setDescription(' Unused. ')
xldv20ActControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 2), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActControlReq.setDescription(' COH (Connection Handling) user commands. Notifications : xldv20TrStateChangeOper. xldv20TrActCcCreation. xldv20TrActCcDeletion. xldv20TrActCcReload . ')
xldv20ActControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 3), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActControlStatus.setDescription(' Indicates the status of a control request. ')
xldv20ActVpiNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVpiNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVpiNni.setDescription(' Identifies the VPI value associated with the Local Exchange. ')
xldv20ActVpiUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVpiUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVpiUni.setDescription(' The VPI value associated with the Network Termination. ')
xldv20ActVciNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVciNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVciNni.setDescription(' The VCI value associated with the Local Exchange. ')
xldv20ActVciUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVciUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVciUni.setDescription(' The VCI value associated with the Network Termination. ')
xldv20ActIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 8), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActIfIndex.setDescription(' The relevant interface index of the connected PPTP . ')
xldv20ActPeakCellRateUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActPeakCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActPeakCellRateUpstream.setDescription(' The upstream peak cell rate in bit/sec of the cross connect. ( Bit rate per ATM cell is 53*8 bit/sec ). ')
xldv20ActPeakCellRateDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActPeakCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActPeakCellRateDownstream.setDescription(' The peak cell rate in downstream direction of the cross connect. ')
xldv20ActCellDelayVariationToleranceUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceUpstream.setDescription(' The cell delay variation tolerance (in micro seconds) in upstream direction of the cross connect. ')
xldv20ActCellDelayVariationToleranceDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActCellDelayVariationToleranceDownstream.setDescription(' The cell delay variation tolerance (in micro seconds) in downstream direction of the cross connect. ')
xldv20ActTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 13), Xldv20TrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActTrafficType.setDescription(' The traffic type of the cross connect. Supported traffic types are : cbr : Constant bit rate. ubr : Unspecified bit rate. nrtVbr : Non real time variable bit rate. rtVbr : Real time variable bit rate. ')
xldv20ActTrafficDirection = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 14), Xldv20TrafficDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTrafficDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActTrafficDirection.setDescription(' The traffic direction. ')
xldv20ActSustainableCellRateUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSustainableCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActSustainableCellRateUpstream.setDescription(' The upstream sustainable cell rate in bit/sec for nrtVbr traffic. ')
xldv20ActSustainableCellRateDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSustainableCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActSustainableCellRateDownstream.setDescription(' The downstream sustainable cell rate in bit/sec for nrtVbr traffic. ')
xldv20ActMaximumBurstSizeUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeUpstream.setDescription(' The upstream maximum burst size in cells for nrtVbr traffic. ')
xldv20ActMaximumBurstSizeDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActMaximumBurstSizeDownstream.setDescription(' The downstream maximum burst size in cells for nrtVbr traffic. ')
xldv20ActSegmentEndPointNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNni.setDescription(' Specifies whether the NNI VplTp/VclTp/VpcTp is a segment endpoint (yes) or a connecting point (no) ')
xldv20ActSegmentEndPointUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActSegmentEndPointUni.setDescription(' Specifies whether the UNI VplTp/VclTp/VpcTp is a segment endpoint (yes) or a connecting point (no) ')
xldv20ActEthMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 21), Xldv20EthNtMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthMode.setDescription(' The operational mode of the ethernet configuration: Available modes: bridging, routing, currentCofiguration (default) . In version V20 the Ethernet configuration is performed already when a NT is created. The option currentConfiguration keeps the current configuration data during cross connect creation. ')
xldv20ActEthE164Isp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthE164Isp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthE164Isp.setDescription(' The telephon number of the Internet Service Provider. ')
xldv20ActEthIpAddressNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthIpAddressNt.setDescription(' The IP Address of the NT.')
xldv20ActEthIpAddressSubnetMaskNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskNt.setDescription(' The subnet mask of the NT. ')
xldv20ActEthIpAddressCo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressCo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthIpAddressCo.setDescription(' The IP Address of the destination NT (office side). ')
xldv20ActEthIpAddressSubnetMaskCo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskCo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthIpAddressSubnetMaskCo.setDescription(' The subnet mask of the CO. ')
xldv20ActEthIpAddressRemoteRouter = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEthIpAddressRemoteRouter.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEthIpAddressRemoteRouter.setDescription(' The subnet mask of the ISP router. ')
xldv20ActTestTypeNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 28), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActTestTypeNni.setDescription(' The type of continuity check on NNI side. On F5 level (VC) segment only . ')
xldv20ActContinuityCheckNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 29), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActContinuityCheckNni.setDescription(' Specifies whether or not the continuity check at NNI side should be enabled for this instance of the ATM Cross Connection managed entity . ')
xldv20ActEndpointTypeNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 30), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEndpointTypeNni.setDescription(' Specifies whether the NNI termination point VplTp/VclTp/VpcTp during countinuity check should be a source or sink or both (bidirectional connection only). ')
xldv20ActTestTypeUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 31), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActTestTypeUni.setDescription(' The type of continuity check on UNI side. On F5 level (VC) only segment. ')
xldv20ActContinuityCheckUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 32), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActContinuityCheckUni.setDescription(' Specifies whether or not the continuity check at UNI should be enabled for this instance of the ATM Cross Connection managed entity. ')
xldv20ActEndpointTypeUni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 33), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeUni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEndpointTypeUni.setDescription(' Specifies whether the UNI termination point VplTp/VclTp/VpcTp during countinuity check should be source or sink or both (bidirectional connection only). ')
xldv20ActControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 34), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActControlReqResult.setDescription(' The result of the last user command. ')
xldv20ActInbandVpi = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActInbandVpi.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActInbandVpi.setDescription(' The value of the configured inband Vpi. The configured Vpi will be effective only after next reload. ')
xldv20ActInbandVci = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActInbandVci.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActInbandVci.setDescription(' The value of the configured inband Vci. The configured Vci will be effective only after next reload. ')
xldv20ActCallpTableIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActCallpTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActCallpTableIndex.setDescription(' After a successfull creation or deletion of a cross connect COH provides the index of the created or deleted object. ')
xldv20ActMaxVciValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActMaxVciValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActMaxVciValue.setDescription(" Configures the amount of VC's and their VCI values which are created within a VpcTp. Minimum VCI value is 32. Maximum VCI value is 3500 (due to HW limits). ")
xldv20ActVbrCDVTUpstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVbrCDVTUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVbrCDVTUpstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in upstream direction. ')
xldv20ActVbrCDVTDownstream = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActVbrCDVTDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActVbrCDVTDownstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in downstream direction. ')
xldv20ActControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 41), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ActControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20ActSegmentEndPointNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActSegmentEndPointNt.setDescription(' Specifies whether the VplTp/VpcTp at the NT is a segment endpoint (yes) or a connecting point (no). ')
xldv20ActTestTypeNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 43), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActTestTypeNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActTestTypeNt.setDescription(' The type of continuity check at NT (segment or endToEnd) . ')
xldv20ActContinuityCheckNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 44), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActContinuityCheckNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActContinuityCheckNt.setDescription(' Specifies whether or not the continuity check at NT should be enabled . NOTE : continuity check not supported at VccTp (F5 level) .')
xldv20ActEndpointTypeNt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 45), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActEndpointTypeNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActEndpointTypeNt.setDescription(' Specifies whether the endpoint VplTp/VpcTp at NT should be a source or sink or both (bidirectional connection only) for continuity check cells. ')
xldv20ActCDVTAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ActCDVTAutoConfig.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ActCDVTAutoConfig.setDescription(' If yes is selected the policing parameter CDVT (cell delay variation tolerance) is determined automatically depending on the configured cell rate. ')
xldv20AtmCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2), )
if mibBuilder.loadTexts: xldv20AtmCrossConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AtmCrossConnectTable.setDescription(' The ATM VP cross connect table. This managed entity is used to represent the cross-connect relationship between two Vpl termination points. Instances of this managed entity shall be automatically created and deleted during ATM Connect and ATM Disconnect actions. ')
xldv20AtmCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AccVpiNniIndex"))
if mibBuilder.loadTexts: xldv20AtmCrossConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AtmCrossConnectEntry.setDescription(' An entry in the ATM cross connect table. ')
xldv20AccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccOperationalState.setDescription(" Identifies whether or not this instance of the ATM Cross Connection managed entity is capable of performing its normal function ( i.e. switching cells ). Altering this attribute is without reporting this state change via the trap 'xldv20TrStateChangeOper'. ")
xldv20AccTerminationPointA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccTerminationPointA.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccTerminationPointA.setDescription(' The instance of the VPL termination point within the DSLAM at the LE side. ')
xldv20AccTerminationPointZ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccTerminationPointZ.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccTerminationPointZ.setDescription(' The instance of the VPL termination point within the DSLAM at the NT side. ')
xldv20AccLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccLineIndex.setDescription(' The external line index. The TLM interfaces (see IFTable) with same line index blong to the same line. ')
xldv20AccEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccEthVpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccEthVpcIndex.setDescription(' For cross connects at the LIETH a pointer to the belonging VpcTp. The value is the entry number in the xldv20VpcTpTable. For all other cross connects the value is always 0. ')
xldv20AccEthVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccEthVccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccEthVccIndex.setDescription(' For cross connects at the LIETH a pointer to the belonging VccTp. The value is the entry number in the xldv20VccTpTable. For all other cross connects the value is always 0. ')
xldv20AccVpiNniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccVpiNniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccVpiNniIndex.setDescription(' Index of this table. ')
xldv20AccAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 8), Xldv20CallpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccAlarmState.setDescription(' Indicates whether for the cross connect an alarm is present or not. ')
xldv20AccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 9), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AccAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccAdminState.setDescription(' This attribute is used to activate (unlock) and deactivate (lock) the VPL cross connection. The cross connect is removed within the ATM ASIC, the configuration data of the cross connect are still available within the DSLAM . ')
xldv20AccAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AccAtmfVplIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AccAtmfVplIndex.setDescription(' For cross connects at the ATMF port of NT this value identifies the belonging VplTp . The value is the entry number in the xldv20VplTpTable. For all other cross connects the value is always 0. ')
xldv20VplTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3), )
if mibBuilder.loadTexts: xldv20VplTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplTpTable.setDescription(' This table contains the entries for Vpl termination points (VplTp). ')
xldv20VplTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VplIndex"))
if mibBuilder.loadTexts: xldv20VplTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplTpEntry.setDescription(' Represent the VPL termination points on an ATM NE. ')
xldv20VplOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplOperationalState.setDescription(' This read-only attribute identifies whether or not the VPL termination is capable of performing its normal functions (in-service or out-of-service). ')
xldv20VplVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplVpiValue.setDescription(' The VPI value associated with the VP link being terminated. ')
xldv20VplHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplHwUnitIndex.setDescription(' The HwUnitIndex of HWM sublayer: LU for VplNNi or SU for VplUNI. ')
xldv20VplIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplIfIndex.setDescription(' The TLM interface index of the connected PPTP. ')
xldv20VplPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplPeakCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplPeakCellRateUpstream.setDescription(' The upstream peak cell rate in bit/sec. ')
xldv20VplPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplPeakCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplPeakCellRateDownstream.setDescription(' The downstream peak cell rate in bit/sec. ')
xldv20VplCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceUpstream.setDescription(' The cell delay variation (in micro seconds). ')
xldv20VplCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplCellDelayVariationToleranceDownstream.setDescription(' The cell delay variation (in micro seconds). ')
xldv20VplTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 9), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplTrafficType.setDescription(' The traffic type. ')
xldv20VplTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 10), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplTrafficDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplTrafficDirection.setDescription(' The traffic direction. ')
xldv20VplConnectivityPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 11), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplConnectivityPointer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplConnectivityPointer.setDescription(' This attribute serves as a pointer to the instance of the VPL termination point managed entity instance (in the ATM NE) it is cross connected to. ')
xldv20VplLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplLineIndex.setDescription(' This value identifies the belonging line. ')
xldv20VplSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSegmentEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplSegmentEndPoint.setDescription(' This value specifies whether the VplTp is a segment endpoint (yes) or a connecting point (no). ')
xldv20VplSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSustainableCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplSustainableCellRateUpstream.setDescription(' The sustainable upstream cell rate in bits/sec for nrtVbr traffic. ')
xldv20VplSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplSustainableCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplSustainableCellRateDownstream.setDescription(' The sustainable downstream cell rate in bits/sec for nrtVbr traffic. ')
xldv20VplMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeUpstream.setDescription(' The maximum upstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VplMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplMaximumBurstSizeDownstream.setDescription(' The maximum downstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VplAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 18), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VplAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplAlarmSeverityIndex.setDescription(' It is a pointer to the instance of the alarm severity assignment profile managed entity that contains the severity assignments for the alarms reported by this managed entity. ')
xldv20VplAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 19), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VplAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. (Not implemented) ')
xldv20VplCvpIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplCvpIndexSegment.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplCvpIndexSegment.setDescription(' The index of of the related entry in the ContinuityCheckVpTable. The entry is created when the COC is enabled (via command or during cross connect creation). ')
xldv20VplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplIndex.setDescription(' The Index of this table. ')
xldv20VplLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 22), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplLOCAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplLOCAlarm.setDescription(' Indicates an LOC alarm and its direction. ')
xldv20VplVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVbrCDVTUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplVbrCDVTUpstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in upstream direction of the VP cross connect. ')
xldv20VplVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VplVbrCDVTDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VplVbrCDVTDownstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in downstream direction of the VP cross connect. ')
xldv20VpcTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4), )
if mibBuilder.loadTexts: xldv20VpcTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcTpTable.setDescription(' This table contains the entries for VPC termination points. ')
xldv20VpcTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VpcIndex"))
if mibBuilder.loadTexts: xldv20VpcTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcTpEntry.setDescription('Each entry represents the point in the switch where the VPC and its associated overhead (F4 OAM cells) are terminated or originated. Instances of this managed entity may be created automatically by the ATM NE when VP or VC cross connects are created at at an Ethernet port. Or they are created by command. Similarly instances of this managed entity may be deleted automatically by the ATM NE or as a result of an ATM Cross Connect release request. Notifications : xldv20TrRDI. xldv20TrAIS alarms when fault is detected or cleared. xldv20TrStateChangeOper. ')
xldv20VpcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcOperationalState.setDescription(' The operational state identifies whether or not the VpcTp is capable of performing its normal functions. ')
xldv20VpcVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcVpiValue.setDescription(' Identifies the VPI value associated with the VP link being terminated. ')
xldv20VpcHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcHwUnitIndex.setDescription(' The unique identifier for hardware units, here the HWM sublayer (LU* or or SU or LI*). ')
xldv20VpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcIfIndex.setDescription(' The interface index of the connected PPTP. For Vpc at LU the PPTP in the LU. For Vpc at SU and LI the PPTP at the LI. ')
xldv20VpcPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcPeakCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcPeakCellRateUpstream.setDescription(' The upstream peak cell rate in bit/sec of the VP cross connect. ')
xldv20VpcPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcPeakCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcPeakCellRateDownstream.setDescription(' The downstream peak cell rate in bit/sec of the VP cross connect. ')
xldv20VpcCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceUpstream.setDescription(' The upstream cell delay variation (in micro seconds) of the VpcTp . ')
xldv20VpcCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcCellDelayVariationToleranceDownstream.setDescription(' The downstream cell delay variation (in micro seconds) of the VpcTp. ')
xldv20VpcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 9), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcTrafficType.setDescription(' The traffic type. ')
xldv20VpcTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 10), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcTrafficDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcTrafficDirection.setDescription(' The traffic direction. ')
xldv20VpcLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 11), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcLineIndex.setDescription(' The belonging line. ')
xldv20VpcSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSegmentEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcSegmentEndPoint.setDescription(' This value specifies whether the VpcTp is a segment endpoint (yes) or a connecting point (no). ')
xldv20VpcSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateUpstream.setDescription(' The sustainable upstream cell rate in bits/sec for nrtVbr traffic. ')
xldv20VpcSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcSustainableCellRateDownstream.setDescription(' The sustainable downstream cell rate in cells/sec for nrtVbr traffic. ')
xldv20VpcMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeUpstream.setDescription(' The maximum upstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VpcMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcMaximumBurstSizeDownstream.setDescription(' The maximum downstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VpcAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 17), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VpcAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcAlarmSeverityIndex.setDescription(' It is a pointer to the instance of the alarm severity assignment profile managed entity that contains the severity assignments for the alarms reported by this managed entity. ')
xldv20VpcAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 18), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VpcAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. (Not implemented) ')
xldv20VpcCvpIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCvpIndexSegment.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcCvpIndexSegment.setDescription(' The index of related entry in ContinuityCheckVpcTpTable concerning an enabled continuity check on segment level. ')
xldv20VpcCvpIndexEndToEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcCvpIndexEndToEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcCvpIndexEndToEnd.setDescription(' The index of related entry in ContinuityCheckVpcTpTable concerning a enabled endToEnd continuity check. ')
xldv20VpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcIndex.setDescription(' The Index of this table. ')
xldv20VpcAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 22), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcAISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcAISAlarm.setDescription(' Indicates an AIS alarm and its direction. ')
xldv20VpcRDIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 23), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcRDIAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcRDIAlarm.setDescription(' Indicates an RDI alarm and its direction. ')
xldv20VpcLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 24), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcLOCAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcLOCAlarm.setDescription(' Indicates an LOC alarm and its direction. ')
xldv20VpcNumberOfVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3469))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcNumberOfVcs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcNumberOfVcs.setDescription(' The number of VCs which are created within the VpcTp. The range of VCI values : 32 plus this number - 1.')
xldv20VpcVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVbrCDVTUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcVbrCDVTUpstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in upstream direction of the VpcTp. ')
xldv20VpcVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcVbrCDVTDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcVbrCDVTDownstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in downstream direction of the VpcTp. ')
xldv20VpcEmSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 28), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VpcEmSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcEmSpecific.setDescription(' EM 45020 specific attribute. ')
xldv20VpcEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcEthVpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcEthVpcIndex.setDescription(' Used to address the corresponding entry in the VpcTpTable. Default is 0. ')
xldv20VpcAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VpcAtmfVplIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VpcAtmfVplIndex.setDescription(' Used to address the corresponding entry in the VplTpTable. Default is 0. ')
xldv20VccTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5), )
if mibBuilder.loadTexts: xldv20VccTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccTpTable.setDescription(' VccTp table for VC termination points. Entries are created for Ethernet NTs when cross connects are created. Entries are deleted with the cross connect. ')
xldv20VccTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VccIndex"))
if mibBuilder.loadTexts: xldv20VccTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccTpEntry.setDescription('Each entry represents the point in the switch where the VCC and its associated overhead (F4 OAM cells) are terminated or originated. Instances of this managed entity may be created automatically by the ATM NE or as a result of an Vpl and Vcl cross connect request at an Ethernet port. Similarly instances of this managed entity may be deleted automatically by the ATM NE as a result of an cross connect deletion request. Notifications : xldv20TrStateChangeOper. xldv20TrObjCreate. xldv20TrObjDelete. xldv20TrRDI. xldv20TrAIS. xldv20TrLOC alarms when fault is detected or cleared. ')
xldv20VccOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccOperationalState.setDescription(' The operational state identifies whether or not the VPL termination is capable of performing its normal functions (in-service or out-of-service). ')
xldv20VccVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccVciValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccVciValue.setDescription(' This attribute identifies the VCI value associated with the VC link being terminated. ')
xldv20VccVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccVpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccVpcIndex.setDescription(' Index of the related VpcTp. ')
xldv20VccHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccHwUnitIndex.setDescription(' HwUnitIndex of the dependent PIU (LI). ')
xldv20VccAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VccAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccAlarmSeverityIndex.setDescription(' It is a pointer to the instance of the alarm severity assignment profile managed entity that contains the severity assignments for the alarms reported by this managed entity. ')
xldv20VccAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. (Not supported yet). ')
xldv20VccLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 7), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccLineIndex.setDescription(' This value identifies the belonging line . ')
xldv20VccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccIndex.setDescription(' A unique value to identify an entry in the VCC TP table. ')
xldv20VccAISAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 9), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccAISAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccAISAlarm.setDescription(' Indicates an AIS alarm and its direction. ')
xldv20VccRDIAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 10), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccRDIAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccRDIAlarm.setDescription(' Indicates an RDI alarm and its direction. ')
xldv20VccLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 11), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccLOCAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccLOCAlarm.setDescription(' Indicates an LOC alarm and its direction. ')
xldv20VccCvcIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccCvcIndexSegment.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccCvcIndexSegment.setDescription(' The index of the related entry in the xldv20ContinuityCheckVcTable for an enabled continuity check on segment level. ')
xldv20VccCvcIndexEndToEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 5, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VccCvcIndexEndToEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VccCvcIndexEndToEnd.setDescription(' The index of the related entry in the xldv20ContinuityCheckVcTable for an enabled endToEnd continuity check. ')
xldv20VcCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6), )
if mibBuilder.loadTexts: xldv20VcCrossConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcCrossConnectTable.setDescription(' The VC cross connect table for Virtual Channel point-to-point cross connections. This managed entity is used to represent the VC-cross-connect relationship between two termination points. Instances of this managed entity shall be automatically created and deleted on VCX Connect and VCX Disconnect actions . ')
xldv20VcCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VcxIndex"))
if mibBuilder.loadTexts: xldv20VcCrossConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcCrossConnectEntry.setDescription(' An entry in the VC cross connect table. Notifications : xldv20TrStateChangeOper. ')
xldv20VcxOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxOperationalState.setDescription(' The Operational State of Vc cross connect. ')
xldv20VcxTerminationPointA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxTerminationPointA.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxTerminationPointA.setDescription(' Identifies the instance of the VCL termination point that represents the VCL at the LE side. ')
xldv20VcxTerminationPointZ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxTerminationPointZ.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxTerminationPointZ.setDescription(' Identifies the instance of the VCL termination point that represents the VCL at the NT side. ')
xldv20VcxLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxLineIndex.setDescription(' The belonging line index. ')
xldv20VcxEthVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxEthVpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxEthVpcIndex.setDescription(' Used to address the corresponding entry in the VpcTpTable. Default is 0. ')
xldv20VcxEthVccIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxEthVccIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxEthVccIndex.setDescription(' Used to address the corresponding entry in the VccTP Table. Default is 0. ')
xldv20VcxVpcNniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 7), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxVpcNniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxVpcNniIndex.setDescription(' Used to address the corresponding entry at NNI in the VpcTpTable. Default is 0. ')
xldv20VcxVpcUniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 8), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxVpcUniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxVpcUniIndex.setDescription(' Used to address the corresponding entry at UNI in the VpcTP Table. Default is 0. ')
xldv20VcxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxIndex.setDescription(' Index of VcCrossConnectTable. ')
xldv20VcxAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 10), Xldv20CallpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxAlarmState.setDescription(' This attribute indicates whether for the cross connect an alarm is present or not. ')
xldv20VcxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 11), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VcxAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxAdminState.setDescription(' This attribute is used to activate (unlock) and deactivate (lock) the VCL cross connection. The cross connect is removed within the ATM ASIC, the configuration data of the cross connect are still available within the DSLAM . ')
xldv20VcxAtmfVplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VcxAtmfVplIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VcxAtmfVplIndex.setDescription(' For cross connects at the ATMF port of NT this value identifies the belonging VplTp . The value is the entry number in the xldv20VplTpTable. For all other cross connects the value is always 0. ')
xldv20VclTpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7), )
if mibBuilder.loadTexts: xldv20VclTpTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclTpTable.setDescription(' This table contains the entries for the VC links. ')
xldv20VclTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20VclIndex"))
if mibBuilder.loadTexts: xldv20VclTpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclTpEntry.setDescription(' The entries represent the termination of VCLs on an ATM NE. An instance of the VC Cross Connection managed entity may be used to relate two instances of the VCL Termination Point managed entity (i.e. for point-to-point cross connection). Instances of this managed entity may be created automatically by the ATM NE or as a result of an VC cross connect request. Similarly instances of this managed entity may be deleted automatically by the ATM NE or as a result of an VC Cross Connect release request. Notifications: xldv20TrStateChangeOper. ')
xldv20VclOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 1), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclOperationalState.setDescription(' The operational state of VclTp. ')
xldv20VclVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclVpiValue.setDescription(' The VPI value associated with the VC link being terminated. ')
xldv20VclVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 3500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVciValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclVciValue.setDescription(' The VCI value associated with the VC link being terminated. ')
xldv20VclHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclHwUnitIndex.setDescription(' The HwUnitIndex of the dependent HW unit. Here the HWM sublayer: the SU for VclUni or the LU for VclNni . ')
xldv20VclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 5), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclIfIndex.setDescription(' The interface index of the connected PPTP. It is the PPTP at the LU for VclUni. The PPTP at the LI for VclNni. ')
xldv20VclPeakCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclPeakCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclPeakCellRateUpstream.setDescription(' The upstream peak cell rate in bit/sec of the VC cross connect. ')
xldv20VclPeakCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclPeakCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclPeakCellRateDownstream.setDescription(' The downstream peak cell rate in bit/sec of the VC cross connect. ')
xldv20VclCellDelayVariationToleranceUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceUpstream.setDescription(' The upstream cell delay variation (in micro seconds) of the VC cross connect. ')
xldv20VclCellDelayVariationToleranceDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclCellDelayVariationToleranceDownstream.setDescription(' The downstream cell delay variation (in micro seconds) of the VC cross connect. ')
xldv20VclTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 10), Xldv20TrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclTrafficType.setDescription(' This attribute identifies the traffic type of the VC cross connect. ')
xldv20VclTrafficDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 11), Xldv20TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclTrafficDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclTrafficDirection.setDescription(' The traffic direction. ')
xldv20VclConnectivityPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclConnectivityPointer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclConnectivityPointer.setDescription(' A pointer to the instance of VclTp it is cross connected to. ')
xldv20VclLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclLineIndex.setDescription(' Identifies the belonging line. ')
xldv20VclSegmentEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSegmentEndPoint.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclSegmentEndPoint.setDescription(' Specifies whether the VclTp is a segment endpoint (yes) or a connecting point (no). ')
xldv20VclSustainableCellRateUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSustainableCellRateUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclSustainableCellRateUpstream.setDescription(' The sustainable upstream cell rate in bits/sec for nrtVbr traffic. ')
xldv20VclSustainableCellRateDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclSustainableCellRateDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclSustainableCellRateDownstream.setDescription(' The sustainable downstream cell rate in bits/sec for nrtVbr traffic. ')
xldv20VclMaximumBurstSizeUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeUpstream.setDescription(' The maximum upstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VclMaximumBurstSizeDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclMaximumBurstSizeDownstream.setDescription(' The maximum downstream burst size tolerance in cells for nrtVbr traffic. ')
xldv20VclAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 19), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VclAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclAlarmSeverityIndex.setDescription(' It is a pointer to the instance of the alarm severity assignment profile managed entity that contains the severity assignments for the alarms reported by this managed entity. ')
xldv20VclAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 20), Xldv20AlmFiltProfileIndex())
if mibBuilder.loadTexts: xldv20VclAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. (Not implemented) ')
xldv20VclCvcIndexSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 21), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclCvcIndexSegment.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclCvcIndexSegment.setDescription(' The index of iof the related entry in the xldv20ContinuityCheckVclTpTable. The entry is created when the continuity check is enabled on segment level. ')
xldv20VclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclIndex.setDescription(' Index of this table. ')
xldv20VclLOCAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 23), Xldv20TpAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclLOCAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclLOCAlarm.setDescription(' Indicates an LOC alarm and its direction. ')
xldv20VclVpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVpcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclVpcIndex.setDescription(' A pointer to the belonging VpcTP in the VpcTp table. ')
xldv20VclVbrCDVTUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVbrCDVTUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclVbrCDVTUpstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in upstream direction of the VclTp. ')
xldv20VclVbrCDVTDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 504000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20VclVbrCDVTDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VclVbrCDVTDownstream.setDescription(' The cell delay variation (in micro seconds) for VBR traffic in downstream direction of the VclTp. ')
xldv20EthernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10), )
if mibBuilder.loadTexts: xldv20EthernetConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthernetConfigTable.setDescription(' The Ethernet Configuration Table. ')
xldv20EthernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20EthernetConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthernetConfigEntry.setDescription(' The entry of the Ethernet Configuration Table. ')
xldv20EthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 1), Xldv20EthNtMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthMode.setDescription(' The operational mode of the ethernet configuration: Available modes: bridging, routing. ')
xldv20EthE164Isp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthE164Isp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthE164Isp.setDescription(' The telephon number of the Internet Service Provider, parameter for ipForwarding- mode')
xldv20EthIpAddressNt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthIpAddressNt.setDescription(' The IP Address of the NT, parameter for ipForwarding - mode. ')
xldv20EthIpAddressSubnetMaskNt = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskNt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskNt.setDescription(' The subnet mask of the NT , parameter for ipForwarding- mode. ')
xldv20EthIpAddressCo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressCo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthIpAddressCo.setDescription(' The IP Address of the destination NT (office side), parameter for ipForwarding- mode. ')
xldv20EthIpAddressSubnetMaskCo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskCo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthIpAddressSubnetMaskCo.setDescription(' The subnet mask of the CO , parameter for ipForwarding- mode. ')
xldv20EthIpAddressRemoteRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EthIpAddressRemoteRouter.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EthIpAddressRemoteRouter.setDescription(' The subnet mask of the ISP router , parameter for ipForwarding- mode. ')
xldv20ContinuityCheckVpTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11), )
if mibBuilder.loadTexts: xldv20ContinuityCheckVpTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ContinuityCheckVpTable.setDescription(' The Continuity Check VP table. Holds entries for enabled continuity checks at VP level. Entries are created when Vpl cross connects or VpcTps with enabled continuity check are created or when continuity check is enabled via command. Entries are deleted when the continuity check is disabled (via xldv20ContinuityCheckControl) . ')
xldv20ContinuityCheckVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20CvpIndex"))
if mibBuilder.loadTexts: xldv20ContinuityCheckVpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ContinuityCheckVpEntry.setDescription(' The entry represents the attributes of an enabled continuity check at a VplTp or VpcTp. Notifications : none. ')
xldv20CvpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpIndex.setDescription(' The Index of this table. ')
xldv20CvpEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 2), Xldv20EndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpEndpointType.setDescription(' The configured endpoint type (source or sink or both) for countinuity check . ')
xldv20CvpTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 3), Xldv20TestType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpTestType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpTestType.setDescription(' The configured type of continuity check (segment or endToEnd) . ')
xldv20CvpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 4), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpOperationalState.setDescription(' Identifies whether an enabled continuity check is is working (value enabled) or not. ')
xldv20CvpVpTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpVpTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpVpTpIndex.setDescription(' Index of the related VplTp or VpcTp . ')
xldv20CvpObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 11, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvpObjectType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvpObjectType.setDescription(' Specifies the type of related COH object ( VplTp or VpcTp ) . ')
xldv20ContinuityCheckVcTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12), )
if mibBuilder.loadTexts: xldv20ContinuityCheckVcTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ContinuityCheckVcTable.setDescription(' The continuity check configuration table for COC on VC level. Entries in this table are created when Vcl cross connects with enabled continuity check are created or when the continuity check is enabled via command. Entries are deleted when the continuity check is disabled (via xldv20ContinuityCheckControl) . ')
xldv20ContinuityCheckVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20CvcIndex"))
if mibBuilder.loadTexts: xldv20ContinuityCheckVcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ContinuityCheckVcEntry.setDescription(' The entry represents the attributes of an enabled continuity check . Notifications : none. ')
xldv20CvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcIndex.setDescription(' Index of table. ')
xldv20CvcEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 2), Xldv20EndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcEndpointType.setDescription(' The configured endpoint type ( source or sink or both) for countinuity check . ')
xldv20CvcTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 3), Xldv20TestType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcTestType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcTestType.setDescription(' The type of continuity check segment or endToEnd . ')
xldv20CvcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 4), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcOperationalState.setDescription(' This read-only attribute identifies whether or not a continuitycheck is enabled . ')
xldv20CvcVcTpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcVcTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcVcTpIndex.setDescription(' Index of the related VC object (currently VclTp only) . ')
xldv20CvcObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 12, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CvcObjectType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CvcObjectType.setDescription(' Specifies the type of related COH VC object ( VclTp ) . ')
xldv20ContinuityCheckControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13))
xldv20CocControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocControlReq.setDescription('Control group for activating/deactivating the continuity check at the source/sink of a VPL or VCL connection. The user command attribute to activate a continuity check (continuityCheckRequest) or to deactivate (noRequest). Notifications : none . ')
xldv20CocControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocControlStatus.setDescription(' The status of the control request. The value requestIdle will be set after startup/recovery or after a running test was aborted by the SNMP manager. ')
xldv20CocEndpointType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 3), Xldv20EndpointType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocEndpointType.setDescription(' This attribute specifies whether the source or sink of a should be enabled/disabled for countinuity check . ')
xldv20CocObjectType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 4), Xldv20RepSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocObjectType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocObjectType.setDescription(' Selects the type of COH object. ')
xldv20CocTestType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 5), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocTestType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocTestType.setDescription(' The type of continuity check (segment or endToEnd) . ')
xldv20CocIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 6), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20CocIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocIndex.setDescription(' If the continuity check should be enabled it is the index of the selected COH object. If the continuity check should be disabled it is the index xldv20VplCvpIndexSegment or xldv20VpcCvpIndexSegment. xldv20VpcCvpIndexEndToEnd or xldv20VclCvcIndexSegment. ')
xldv20CocControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocControlReqResult.setDescription(' The result of the last user command. ')
xldv20CocControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 13, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20CocControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20CocControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20InbandTmn = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14))
xldv20InbandVpiCurrent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVpiCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20InbandVpiCurrent.setDescription(' Inband TMN configuration object. Identifies the current VPI value of inband TMN channel. ')
xldv20InbandVciCurrent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVciCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20InbandVciCurrent.setDescription(' Identifies the current Vci value of inband TMN channel. ')
xldv20InbandVpiConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVpiConfig.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20InbandVpiConfig.setDescription(' Identifies the configured Vpi value of inband TMN channel which becomes effective only after reload. ')
xldv20InbandVciConfig = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20InbandVciConfig.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20InbandVciConfig.setDescription(' Identifies the configured Vci value of inband TMN channel which becomes effective only after reload. ')
xldv20AtmNe = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1))
xldv20NeLocation = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeLocation.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeLocation.setDescription(' Describes the location of the NetElement, e.g. Hofmannstr. 51 . ')
xldv20NeVendor = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeVendor.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeVendor.setDescription(' Contains the vendor of the NetElement, Siemens AG . ')
xldv20NeVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeVersion.setDescription(' Contains the version of the NetElement, XLD V20 ')
xldv20NeExternalTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeExternalTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeExternalTime.setDescription(' The external Time of the NetElement in seconds from January 1st 1970. The TMN-OS should set this time after firsttime power up, coldstart, warmstart or reload and to refresh it once a day. ')
xldv20NeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 5), Xldv20TimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeTimeZone.setDescription(' Specifies the time zone of the netelement as time difference to Greenwich Mean Time (GMT), e.g. GMT+1 or GMT-5. ')
xldv20NeDescriptorFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20NeDescriptorFileName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeDescriptorFileName.setDescription(' The name of the descriptor file. Initialized after reload by SW upgrade . ')
xldv20NeExternalTime45020 = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 7), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeExternalTime45020.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeExternalTime45020.setDescription(' The external Time of the NetElement in seconds. The TMN-45020 sets this time after first time power up, coldstart, warmstart or reload and refreshes the time in a period of 24h . The basis is January 1st 1999, 0:00')
xldv20NeSummerTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 1, 8), Xldv20DayLightSavingTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20NeSummerTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20NeSummerTime.setDescription(' Specifies whether summer time (day light saving time DST) or winter time is valid. Normally the clock is turned 1 hour ahead at begin of summer time and 1 hour back at end. Default is winterTime.')
xldv20HwUnitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: xldv20HwUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitTable.setDescription(' The XLD hardware unit table. This table models the Equipment, Equipment Holder and Plug-In Unit management entities . ')
xldv20HwUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitEntry.setDescription(' An entry in the xldv20HwUnitTable. Notifications : none. ')
xldv20HwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitIndex.setDescription(' A unique value to identify a hardware unit within the ATM agent. It is used as index for the tables xldv20HwEquipTable, xldv20HwEquipHolderTable and xldv20HwPlugInUnitTable . ')
xldv20HwUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 2, 1, 2), Xldv20HwUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitType.setDescription(' Identifies the general type of this hardware unit. The values are equipment, equipmentHolder and plugInUnit . ')
xldv20HwContainmentTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3), )
if mibBuilder.loadTexts: xldv20HwContainmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwContainmentTable.setDescription(' The hardware unit containment table. This table describes the containment relationships that maintain between Equipment, Equipment Holder and Plug-In Unit entities . ')
xldv20HwContainmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwContainingUnitIndex"), (0, "XLDV20-MIB", "xldv20HwContainedUnitAddr"))
if mibBuilder.loadTexts: xldv20HwContainmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwContainmentEntry.setDescription(' An entry in the hardware unit containment table. Each entry of this type identifies two hardware units, one of which is contained directly within the other . Notifications : none. ')
xldv20HwContainingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwContainingUnitIndex.setDescription(' The HwUnitIndex (in the xldv20HwUnitTable), of the containing hardware unit in this pair . ')
xldv20HwContainedUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainedUnitAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwContainedUnitAddr.setDescription(' A number uniquely identifying, within the containing hardware unit, the contained unit. Contained unit should be addressed starting at 1. If the contained component is an Equipment Holder, this object represents its physical location (e.g. slot number). If a single piece of Equipment contains both Equipment Holder and other Equipment objects, the Equipment Holders should have the lowest-valued addresses, so this relationship can be maintained. A Plug-In Unit always has an address of 1 . ')
xldv20HwContainedUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwContainedUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwContainedUnitIndex.setDescription(' The hwUnitIndex of the contained unit. ')
xldv20HwEquipTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4), )
if mibBuilder.loadTexts: xldv20HwEquipTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwEquipTable.setDescription(' The hardware equipment table. ')
xldv20HwEquipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwEquipEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwEquipEntry.setDescription(' Entry of the HW equipment table. The entries represent the various manageable physical components of the ATM NE that are not modelled via the Plug-In Unit managed entity. An instance of this managed entity shall be automati- cally created by the ATM NE immediately following the initialization/installation of the externally manageable physical component in the ATM NE. Notifications : xldv20TrObjCreate. xldv20TrObjDelete . ')
xldv20EquType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EquType.setDescription(' Indicates whether the equipment is a DSLAM, ntAdsl, ntVdsl or a ntCpe ( customer premise equipment) . ')
xldv20EquLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20EquLocation.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EquLocation.setDescription(' Identifies the specific or general location of the ATM NE component . ')
xldv20EquUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20EquUserLabel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EquUserLabel.setDescription(' Assignis user friendly name to the associated managed entity . ')
xldv20EquConnectedPiuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquConnectedPiuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EquConnectedPiuIndex.setDescription(' This attribute is used to show the PIU to which the NT is connected (HwUnitIndex) . In case of DSLAM value is 0. ')
xldv20EquConnectedPiuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EquConnectedPiuPort.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EquConnectedPiuPort.setDescription(' The port ID of the connected PIU. ')
xldv20HwEquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5), )
if mibBuilder.loadTexts: xldv20HwEquipHolderTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwEquipHolderTable.setDescription(' The equipment holder table . ')
xldv20HwEquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwEquipHolderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwEquipHolderEntry.setDescription(' Entry of the equipment holder table. The entries represent physical resources of the ATM NE holding other physical resources. Examples of resources represented by instances of this managed entity are shelves and slots. An instance of this managed entity shall exist for each shelf and slot of the ATM NE. Instances shall be auto- matically created and reported by the ATM NE once system initialization is complete. Notifications : xldv20TrObjCreate . xldv20TrObjDelete . xldv20TrSwVersionSet when xldv20EqhSwVersion. xldv20EqhMnemoCode,xldv20EqhFwItemNumber set. ')
xldv20EqhType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 1), Xldv20EqhType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhType.setDescription(' Type of the equipment holder. ')
xldv20EqhAccPiuTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhAccPiuTypes.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhAccPiuTypes.setDescription(" Accepted PIU Types of this slot. This attribute identifies the types of Plug-In Units to be supported by this slot. They are separated by newline characters. That means 'CR LF'. This attribute only supplies if the Equipment holder instance represents a slot. ")
xldv20EqhSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 3), Xldv20SlotStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhSlotStatus.setDescription(' Indicates whether a slot is empty or used. This attribute only supplies if the Equipment holder instance represents a slot. ')
xldv20EqhSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhSwVersion.setDescription(' Identifies the software load of this PIU. This attribute identifies the software load, if there is any, which is currently designated as the one to be loaded to the plug-in-unit whenever an automatic reload of software is needed. This attribute only applies if the equipment holder instance represents a slot. Default value for not loadable units is \\0 . ')
xldv20EqhMnemoCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhMnemoCode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhMnemoCode.setDescription(' The mnemo code used to retrieve the SW loadfile for the plug-in unit. Default value for not loadable units is \\0 . ')
xldv20EqhFwCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhFwCode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhFwCode.setDescription(' The FW code used to retrieve the SW loadfile for the plug-in unit. Default value for not loadable units is \\0 . ')
xldv20EqhRiMnemoCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiMnemoCode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiMnemoCode.setDescription(' This attribute specifies the mnemo code of the currently plugged PIU. ')
xldv20EqhRiFwItemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiFwItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiFwItemNumber.setDescription(' This attribute specifies the FW item number of the currently plugged PIU. ')
xldv20EqhRiFwIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiFwIssue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiFwIssue.setDescription(' This attribute specifies the FW item issue of the currently plugged PIU. ')
xldv20EqhRiHwItemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiHwItemNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiHwItemNumber.setDescription(' This attribute specifies the HW item number of the currently plugged PIU. ')
xldv20EqhRiHwIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiHwIssue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiHwIssue.setDescription(' This attribute specifies the HW item issue of the currently plugged PIU. ')
xldv20EqhRiSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20EqhRiSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20EqhRiSerialNumber.setDescription(' This attribute specifies the Serial Number of the currently plugged PIU. ')
xldv20HwPlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6), )
if mibBuilder.loadTexts: xldv20HwPlugInUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwPlugInUnitTable.setDescription(' Table containing the plug-in unit entries . ')
xldv20HwPlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwUnitIndex"))
if mibBuilder.loadTexts: xldv20HwPlugInUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwPlugInUnitEntry.setDescription(' Entry of plug in unit table. Each entry is used to represent equipment that is inserted (plugged into) and removed from slots of the ATM NE . Notifications : xldv20TrStateChangeOper. xldv20TrStateChangeAdmin. xldv20TrTrObjCreate. xldv20TrObjDelete. Alarm traps when a fault has been detected or cleared. ')
xldv20PiuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 1), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PiuAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuAdminState.setDescription(' This attribute is used to activate (unlock) and deactivate (lock) the functions performed by the plug-in unit. Default is locked except for LU155:OM, LU155:OL, LUPON:O, LUDSX3:C. For LU155:OM, LU155:OL, LUPON:O, LUDSX3:C locking is only allowed from LCT. In the transition from lock to unlock the Plug-In Unit is diagnosed. ')
xldv20PiuAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 2), Xldv20AvailStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuAvailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuAvailStatus.setDescription(' The availability status of a plug-in unit is described with this attribute. ')
xldv20PiuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 3), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuOperState.setDescription(' The operational state of plug in unit. ')
xldv20PiuType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuType.setDescription(' Identifier for the type of a plug-in unit. See description of xldv20EqhAccPiuTypes for possible string values. ')
xldv20PiuAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PiuAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuAlarmSeverityIndex.setDescription(' It is a pointer to the instance of the alarm severity assignment profile managed entity that contains the severity assignments for the alarms reported by this managed entity. Default is 1. ')
xldv20PiuAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. (Not implemented yet) . ')
xldv20PiuUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 6, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PiuUpgradeResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PiuUpgradeResult.setDescription(' Informs about the status of the SW upgrade task during loading and the result at the end of loading the current plug-in unit. ')
xldv20HwuControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7))
xldv20HwuControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuControlReq.setDescription(' This attribute identifies the control command for creating or deleting a HW unit. Notifications : xldv20TrHwuControl when command is finished. ')
xldv20HwuControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuControlStatus.setDescription(' The status of a control request. ')
xldv20HwuUnitType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 3), Xldv20HwUnitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuUnitType.setDescription(' Identifies the type of hardware unit which should be created. The values are equipment, equipmentHolder and plugInUnit . The following entities can not be created: atmNe. equipment (DSLAM). equipmentHolder (basic shelf). equipmentHolder (slot1-slot32 of basic shelf). ')
xldv20HwuEquType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuEquType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuEquType.setDescription(' Indicates the equipment which should be created (ntAdsl or ntVdsl or ntCpe). Default is \\0. ')
xldv20HwuEqhType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 5), Xldv20EqhType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuEqhType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuEqhType.setDescription(' Indicates the equipmentHolder which should be created (extendedShelf or ntAdslShelf or ntVdslShelf) . ')
xldv20HwuPiuType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuPiuType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuPiuType.setDescription(' Identifies the type of a plug-in unit which should be created. The following entities cannot be created or deleted : LU*, and CI . Default is \\0. ')
xldv20HwuContainingUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 7), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuContainingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuContainingUnitIndex.setDescription(' Identifies the managed entity which contains the created unit . ')
xldv20HwuContainedUnitAddr = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuContainedUnitAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuContainedUnitAddr.setDescription(' Identifies the index of the contained unit, which should be created, within the containing unit . ')
xldv20HwuUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 9), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20HwuUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuUnitIndex.setDescription(' Identifies the HW Unit which should be deleted . ')
xldv20HwuControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuControlTimer.setDescription(' The maximum wait time for the manager when a create or delete HW unit request cannot be executed immediately ( value commExecStarted in GetResponse for xldv20HwuControlReq ). ')
xldv20HwuControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 11), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuControlReqResult.setDescription(' The result of the last user command. ')
xldv20HwuControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 7, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwuControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwuControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20RemoteInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9))
xldv20RiControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiControlReq.setDescription(' Feature not supported. This attribute identifies the control commands to get information about the boards currently plugged into the XLD system. On a request from TMN-OS or LCT, the Product Identification Data (PID) and location data (rack, row, slot) of either a single board or of all boards plugged are collected. These data are sent to to a file at the FTP server. Notifications : xldv20TrRemInvReady when the remote inventory data have been collected and the resulting file has been sent to the FTP server. ')
xldv20RiControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiControlStatus.setDescription(' The status of a control request. ')
xldv20RiControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiControlTimer.setDescription(' The maximum wait time for the manager when remote inventory data retrieve request cannot be executed immediately (value commExecStarted in the result attribute xldv20RiControlReqResult). The manager reads this value from the DSLAM. The end of request indicates the trap xldv20TrRemInvReady . ')
xldv20RiResultFilePath = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiResultFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiResultFilePath.setDescription(' The destination path where the file containing the remote inventory data should be stored on the FTP server. If this attribute does not contain a valid path name no remote inventory data will be transmitted . ')
xldv20RiHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 5), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RiHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiHwUnitIndex.setDescription(' The HwUnitIndex of the requested board. if remote inventory data for a single board are requested. ')
xldv20RiControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiControlReqResult.setDescription(' The result of the last user command. ')
xldv20RiControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 9, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RiControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RiControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20HwUnitMappingTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10), )
if mibBuilder.loadTexts: xldv20HwUnitMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitMappingTable.setDescription(" The table maps hardware units ('HwUnitIndex') to TLM interfaces ('IfIndex') accociated to this hardware. ")
xldv20HwUnitMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20HwmHwUnitIndex"), (0, "XLDV20-MIB", "xldv20HwmIfIndex"))
if mibBuilder.loadTexts: xldv20HwUnitMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwUnitMappingEntry.setDescription(' An entry of the xldv20HwUnitMappingTable. ')
xldv20HwmHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwmHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwmHwUnitIndex.setDescription(" The 'HwUnitIndex' of the selected hardware unit. ")
xldv20HwmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 3, 10, 1, 2), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20HwmIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20HwmIfIndex.setDescription(" The 'IfIndex' of a TLM interface on the selected hardware unit. ")
xldv20IfTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1), )
if mibBuilder.loadTexts: xldv20IfTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfTable.setDescription(' The TLM interface table. ')
xldv20IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20IfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfEntry.setDescription(' An entry in the TLM interface table. Each entry represents either a physical path termination point (PPTP) or a TC adaptor (tcAdaptor). Notifications : alarm traps when a fault has been detected or cleared. xldv20TrStateChangeOper. xldv20TrStateChangeAdmin. ')
xldv20IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfIndex.setDescription(' Index of the table. Identifier of a TLM interface . ')
xldv20IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 2), Xldv20IfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfType.setDescription(' The type of a TLM interface. Supported interface types : s1n, s1f. adc, adr. ibm, eth. s3n, s3f. d3n, d3f. e3n, e3f. e1nIma, e1fIma. d1nIma, d1fIma. sdc, sdr. atmIma (IMA group). tca. In XLDV20 unused : pon. vdc. vdr. d1nIma. d1fIma. ')
xldv20IfLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfLineIndex.setDescription(' A unique value to identify interfaces belonging to the same line. ')
xldv20IfHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 4), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfHwUnitIndex.setDescription(' The index to identify the hardware unit the physical path/TC layer terminates on. ')
xldv20IfHwPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfHwPortId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfHwPortId.setDescription(' For PPTP it is the associated HW port ID. For TC adaptor it is the IfIndex of the PPTP the TC adaptor is connected to. ')
xldv20IfConnectivityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 6), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfConnectivityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfConnectivityIndex.setDescription(' For PPTP it is the associated HW port ID. For TC adaptor it is the IfIndex of the PPTP the TC adaptor is connected to. ')
xldv20IfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 7), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfOperState.setDescription(' The operational state of this unit. ')
xldv20IfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 8), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IfAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfAdminState.setDescription(' Activates(unlock) or deactivates(lock) the functionality of this managed entity. It must be locked before physical looptest has been started. The attribute is not configurable during looptest. The PPTP of type s1f, s3f, e3f, d3f, e1nIma, e1fIma, d1nIma, d1fIma and atmIma and the associated tcAdaptors can only be locked from a connected LCT. ')
xldv20IfAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 9), Xldv20AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfAlarmState.setDescription(' The nature of an alarm at a TLM interface. Values correspond to alarm trap ID`s. Default is noAlarm. ')
xldv20IfAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 10), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IfAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfAlarmSeverityIndex.setDescription(' The index of the associated entry in the alarm severity profile table. These entries contain the severity assigments for the alarms reported by this managed entity. The range of values is: 1,.., 10: for possible pre-configured alarm severity profiles . Default is profile 1. ')
xldv20IfAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 1, 1, 11), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20IfAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IfAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. ')
xldv20AdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2))
xldv20AdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlControlReq.setDescription(' ADSL control request object to activate a configured set of data (command: activateData), which includes minimum and maximum bandwidth in upstream and downstream direction, latency and margin. ')
xldv20AdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlControlStatus.setDescription(' The status of a control request. ')
xldv20AdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 3), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlIfIndex.setDescription(' It is the relevant interface index of the ADSL central PPTP. ')
xldv20AdcCtrlMinRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 4), Xldv20AdslDataRateDown()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateDn.setDescription(' Desired lower limit of downstream data rate. The data rate ranges from 32 to 8096 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 19094 cells/sec. Default is 1 (32 kbps/75 cps). ')
xldv20AdcCtrlMinRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 5), Xldv20AdslDataRateUp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMinRateUp.setDescription(' Desired lower limit of upstream data rate. The data rate ranges from 32 to 768 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is 1 (32 kbps/75 cps). ')
xldv20AdcCtrlMaxRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 6), Xldv20AdslDataRateDown()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateDn.setDescription(' Desired upper limit of downstream data rate. The data rate ranges from 32 and 8096 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 19094 cells/sec. Default is 253 (8096 kbps/19094 cps). ')
xldv20AdcCtrlMaxRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 7), Xldv20AdslDataRateUp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMaxRateUp.setDescription(' Desired upper limit of upstream data rate. The data rate ranges from 32 and 768 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is 24 (768 kbps/1811 cps). ')
xldv20AdcCtrlMarginDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMarginDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMarginDn.setDescription(' Desired downstream margin in units of dB. ')
xldv20AdcCtrlMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMarginUp.setDescription(' Desired upstream margin in units of dB . ')
xldv20AdcCtrlLatencyDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 10), Xldv20Latency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyDn.setDescription(' Selects fast mode or interleaved mode downstream. 0 = interleavedLow (default). 1 = interleavedHigh . 256 = fast mode. ')
xldv20AdcCtrlLatencyUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 11), Xldv20Latency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlLatencyUp.setDescription(' Selects fast mode or interleaved mode upstream. 0 = interleavedLow (default). 1 = interleavedHigh . 256 = fast mode. ')
xldv20AdcCtrlMinMarginDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 12), Xldv20AdslMinMargin()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginDn.setDescription(' Threshold for downstream margin when an alarm should be sent. In units of dB. The value auto is the default value and means that the threshold is calculated from the configured margin : threshold margin down = configured margin down - 6 dB. ')
xldv20AdcCtrlMinMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 13), Xldv20AdslMinMargin()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlMinMarginUp.setDescription(' Threshold for upstream margin when an alarm should be sent. In units of dB. The value auto is the default value and means that the threshold is calculated from the configured margin : threshold margin up = configured margin up - 6 dB. ')
xldv20AdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 14), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlControlReqResult.setDescription(' The result of the last user command. ')
xldv20AdcCtrlXdslServiceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 15), Xldv20XdslServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlXdslServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlXdslServiceType.setDescription(' The service mode for the DSL line according to ITU norm. Supported modes are : - gDotHsMode (handshake mode) for automatic link up either to ADSL equipment . or to UDSL equipment (G9941). - or ansiT1Dot413 for ADSL equipment (fullRateMode, ITU G9921). - or gDotLiteMode for UDSL equipment (uawgMode, ITU G9922). - or gDotAll to allow any NT/CPE service type (is determined by the central modem) .')
xldv20AdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcCtrlControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20AdcCtrlTrainingMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 2, 17), Xldv20AdcTrainingMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcCtrlTrainingMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcCtrlTrainingMode.setDescription(' Selects between different training modes for ADSL modems. ')
xldv20VdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3))
xldv20VdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 1), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20VdcCtrlControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlControlReq.setDescription(' Feature not supported. This attribute marks the command to activate a configured set of (command: activateData), which includes minimum and maximum bandwidth in upstream and downstream direction, latency and some additional modem parameters (power boost, warmstart, VDSL mode, Sleep mode, PSD mask, power adaptation). ')
xldv20VdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 2), Xldv20ControlStatus())
if mibBuilder.loadTexts: xldv20VdcCtrlControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlControlStatus.setDescription(' This attribute indicates the status of a control request. requestIdle, requestBusy, requestPassed, requestFailed . ')
xldv20VdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 3), Unsigned16())
if mibBuilder.loadTexts: xldv20VdcCtrlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlIfIndex.setDescription(' It is the relevant interface index of the VDSL-C PPTP. ')
xldv20VdcCtrlMinRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 4), Xldv20VdcRateDn()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateDn.setDescription(' The desired lower limit of the downstream data rate. ')
xldv20VdcCtrlMinRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 5), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlMinRateUp.setDescription(' The desired lower limit of the upstream data rate. ')
xldv20VdcCtrlMaxRateDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 6), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateDn.setDescription(' The upper limit of the downstream data rate. ')
xldv20VdcCtrlMaxRateUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 7), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlMaxRateUp.setDescription(' The upper limit of the upstream data rate. ')
xldv20VdcCtrlLatencyDn = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 8), Xldv20VdcLatencyDn())
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyDn.setDescription(' Selects interleave depth (i.e. latency time) used for error correction in downstream direction. ')
xldv20VdcCtrlLatencyUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 9), Xldv20VdcLatencyUp())
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlLatencyUp.setDescription(' Selects interleave depth (i.e. latency time) used for error correction in upstream direction. ')
xldv20VdcCtrlPowerBoost = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 10), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcCtrlPowerBoost.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlPowerBoost.setDescription(' Configured power boost mode. ')
xldv20VdcCtrlWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 11), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcCtrlWarmStart.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlWarmStart.setDescription(' Configured warmstart option. ')
xldv20VdcCtrlVdslMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 12), Xldv20VdcVdslMode())
if mibBuilder.loadTexts: xldv20VdcCtrlVdslMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlVdslMode.setDescription(' Configured VDSL mode option. ')
xldv20VdcCtrlSleepMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 13), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcCtrlSleepMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlSleepMode.setDescription(' Configured sleep mode option. ')
xldv20VdcCtrlPsdMask = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 14), Xldv20VdcPsdMask())
if mibBuilder.loadTexts: xldv20VdcCtrlPsdMask.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlPsdMask.setDescription(' Configured PSD mask option (electro-magnetic interference effects, M1 for strong and M2 for weak effects). ')
xldv20VdcCtrlPowerAdaptation = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 15), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcCtrlPowerAdaptation.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlPowerAdaptation.setDescription(' Configured power adaptation option. ')
xldv20VdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 16), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20VdcCtrlControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlControlReqResult.setDescription(' This read-only attribute informs about the result of the last user command. ')
xldv20VdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 3, 17), TimeTicks())
if mibBuilder.loadTexts: xldv20VdcCtrlControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcCtrlControlTimeStamp.setDescription(' This read-only attribute informs about the time stamp of the last command (end of command). ')
xldv20AdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4), )
if mibBuilder.loadTexts: xldv20AdcPPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcPPTPTable.setDescription(' The physical path termination point table for ADSL Central interface. ')
xldv20AdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20AdcPPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcPPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20AdcMinRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 1), Xldv20AdslDataRateDown()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinRateDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMinRateDnCfg.setDescription(' The desired lower value of the downstream data rate. The data rate ranges from 32 to 8096 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 19094 cells/sec. Default is 1 (32 kbps/75 cps). ')
xldv20AdcMinRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 2), Xldv20AdslDataRateUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinRateUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMinRateUpCfg.setDescription(' The desired lower value of the upstream data rate. The data rate ranges from 32 and 768 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is 1 (32 kbps/75 cps). ')
xldv20AdcMaxRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 3), Xldv20AdslDataRateDown()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMaxRateDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMaxRateDnCfg.setDescription(' The desired upper value of the downstream data rate. The data rate ranges from 32 and 8160 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is 253 (8096 kbps/19094 cps). ')
xldv20AdcMaxRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 4), Xldv20AdslDataRateUp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMaxRateUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMaxRateUpCfg.setDescription(' The desired upper value of the upstream data rate. The data rate ranges from 32 and 768 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is 24 (768 kbps/1811 cps). ')
xldv20AdcMarginDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMarginDnCfg.setDescription(' Desired downstream margin. The unit of measurement is dB. ')
xldv20AdcMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMarginUpCfg.setDescription(' Desired upstream margin. The unit of measurement is dB. ')
xldv20AdcMinMarginDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 7), Xldv20AdslMinMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinMarginDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMinMarginDnCfg.setDescription(' Desired threshold for downstream margin in units of dB. If the value auto is selected during configuration the threshold is calculated from the configured margin : threshold margin down = configured margin down - 6 dB. ')
xldv20AdcMinMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 8), Xldv20AdslMinMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMinMarginUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMinMarginUpCfg.setDescription(' Desired threshold for upstream margin in units of dB. If the value auto is selected during configuration the threshold is calculated from the configured margin : threshold margin up = configured margin up - 6 dB. ')
xldv20AdcLatencyDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 10), Xldv20Latency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLatencyDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcLatencyDnCfg.setDescription(' The configured fast mode or interleaved mode downstream. 0 = interleavedLow (default). 1 = interleavedHigh . 256 = fast mode. ')
xldv20AdcLatencyUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 11), Xldv20Latency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLatencyUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcLatencyUpCfg.setDescription(' The configured fast mode or interleaved mode upstream. 0 = interleavedLow (default). 1 = interleavedHigh . 256 = fast mode. ')
xldv20AdcRateDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 12), Xldv20AdslDataRateDownCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcRateDn.setDescription(' The current downstream data rate. The data rate ranges from 32 and 8096 Kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 19094 cells/sec. Default is rateInvalid (32767). ')
xldv20AdcRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 13), Xldv20AdslDataRateUpCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcRateUp.setDescription(' The current upstream data rate. The data rate ranges from 32 and 768 kbit/sec and is splitted into units of 32 Kbit/sec. This corresponds to a cell rate between 75 and 1811 cells/sec. Default is rateInvalid (32767). ')
xldv20AdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 14), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMarginDn.setDescription(' The current downstream margin in units of dB. Default is marginInvalid. ')
xldv20AdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 15), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcMarginUp.setDescription(' The current upstream margin in units of dB. Default is marginInvalid. ')
xldv20AdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 16), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcAttenuationDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcAttenuationDn.setDescription(' The current downstream attenuation in steps of 0,5 dB. Default is attenuationInvalid . ')
xldv20AdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 17), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcAttenuationUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcAttenuationUp.setDescription(' The current upstream attenuation in steps of 0,5 dB. Default is attenuationInvalid . ')
xldv20AdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 18), Xldv20LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcLinkState.setDescription(' The attribute reflects upon the internal states of the Central Office Modem. ')
xldv20AdcAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 19), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcAISOnLOS.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcAISOnLOS.setDescription(' Enables or disables the VP-AIS generation after defect LOS. ')
xldv20AdcAISOnACT = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 20), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AdcAISOnACT.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcAISOnACT.setDescription(' Enables or disables the VP-AIS generation after link activation fault. ')
xldv20AdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcGuaranteedBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcGuaranteedBandwidthUsage.setDescription(' Garanteed bandwidth in percent. ')
xldv20AdcXdslServiceTypeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 22), Xldv20XdslServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcXdslServiceTypeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcXdslServiceTypeCfg.setDescription(' The configured service mode for XDSL line. ')
xldv20AdcInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 23), Xldv20XdslInitStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcInitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcInitStatus.setDescription(' The initialization status field of an ADSL line. Describes the initalization error in case of an activation problem on an ADSL line . ')
xldv20AdcTransceiverOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 24), Xldv20AdslOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcTransceiverOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcTransceiverOutputPower.setDescription(' The ADSL tranceiver output power. Granularity 1.0 dBm. Default value is outputPowerInvalid. ')
xldv20AdcFirstUsedSubCarrierUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierUpstream.setDescription(' The first used sub carrier in upstream direction. Default value is 64 (unknown). ')
xldv20AdcFirstUsedSubCarrierDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcFirstUsedSubCarrierDownstream.setDescription(' The first used sub carrier in downstream direction. Default value is 256 (unknown). ')
xldv20AdcLastUsedSubCarrierUpstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierUpstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierUpstream.setDescription(' The last used sub carrier in upstream direction. Default value is 64 (unknown). ')
xldv20AdcLastUsedSubCarrierDownstream = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierDownstream.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcLastUsedSubCarrierDownstream.setDescription(' The last used sub carrier in downstream direction. Default value is 256 (unknown). ')
xldv20AdcXdslServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 4, 1, 29), Xldv20XdslServiceTypeCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AdcXdslServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AdcXdslServiceType.setDescription(' The current service type resulting from the configured service type. It depends on the actual hardware. Configuring gDotHsMode can result either in gDotLiteMode or gDotDmtMode. gDotAll can result in gDotDmtMode, ansiT1dot413 or gDotLiteMode. Default value is serviceTypeUnknown (10). ')
xldv20VdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5), )
if mibBuilder.loadTexts: xldv20VdcPPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcPPTPTable.setDescription(' Feature not supported. The physical path termination point table for VDSL C. ')
xldv20VdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20VdcPPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcPPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20VdcMinRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 1), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcMinRateDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMinRateDnCfg.setDescription(' The lower limit of the downstream data rate. ')
xldv20VdcMinRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 2), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcMinRateUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMinRateUpCfg.setDescription(' The lower limit of the upstream data rate. ')
xldv20VdcMaxRateDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 3), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcMaxRateDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMaxRateDnCfg.setDescription(' The upper limit of the downstream data rate. ')
xldv20VdcMaxRateUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 4), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcMaxRateUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMaxRateUpCfg.setDescription(' The upper limit of the upstream data rate. ')
xldv20VdcLatencyDnCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 5), Xldv20VdcLatencyDn())
if mibBuilder.loadTexts: xldv20VdcLatencyDnCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcLatencyDnCfg.setDescription(' Desired interleave depth (i.e. latency time) used for error correction in downstream direction. ')
xldv20VdcLatencyUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 6), Xldv20VdcLatencyUp())
if mibBuilder.loadTexts: xldv20VdcLatencyUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcLatencyUpCfg.setDescription(' Desired interleave depth (i.e. latency time) used for error correction in upstream direction. ')
xldv20VdcPowerBoostCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 7), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcPowerBoostCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcPowerBoostCfg.setDescription(' Desired power boost mode. ')
xldv20VdcWarmStartCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 8), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcWarmStartCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcWarmStartCfg.setDescription(' Configured warmstart option. ')
xldv20VdcVdslModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 9), Xldv20VdcVdslMode())
if mibBuilder.loadTexts: xldv20VdcVdslModeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcVdslModeCfg.setDescription(' Configured VDSL mode option. ')
xldv20VdcSleepModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 10), Xldv20OperState())
if mibBuilder.loadTexts: xldv20VdcSleepModeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcSleepModeCfg.setDescription(' Desired sleep mode option. ')
xldv20VdcPsdMaskCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 11), Xldv20VdcPsdMask())
if mibBuilder.loadTexts: xldv20VdcPsdMaskCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcPsdMaskCfg.setDescription(' Desired PSD mask option (electro-magnetic interference effects, M1 for strong and M2 for weak effects). ')
xldv20VdcPowerAdaptationCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 12), Xldv20VdcPowerBoostAdaptationType())
if mibBuilder.loadTexts: xldv20VdcPowerAdaptationCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcPowerAdaptationCfg.setDescription(' Desired power adaptation option. ')
xldv20VdcRateDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 13), Xldv20VdcRateDn())
if mibBuilder.loadTexts: xldv20VdcRateDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcRateDn.setDescription(' The current downstream data rate. ')
xldv20VdcRateUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 14), Xldv20VdcRateUp())
if mibBuilder.loadTexts: xldv20VdcRateUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcRateUp.setDescription(' The current upstream data rate. ')
xldv20VdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 15), Integer32())
if mibBuilder.loadTexts: xldv20VdcMarginDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMarginDn.setDescription(' The current downstream margin in units of dB. ')
xldv20VdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 16), Integer32())
if mibBuilder.loadTexts: xldv20VdcMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcMarginUp.setDescription(' The current upstream margin in units of dB. ')
xldv20VdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 17), Integer32())
if mibBuilder.loadTexts: xldv20VdcAttenuationDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcAttenuationDn.setDescription(' The current downstream attenuation in units of dB. ')
xldv20VdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 18), Integer32())
if mibBuilder.loadTexts: xldv20VdcAttenuationUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcAttenuationUp.setDescription(' The current upstream attenuation in units of dB. ')
xldv20VdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 19), Xldv20LinkState())
if mibBuilder.loadTexts: xldv20VdcLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcLinkState.setDescription(' Current internal states of the Central Office VDSL Modem. ')
xldv20VdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20VdcGuaranteedBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20VdcGuaranteedBandwidthUsage.setDescription(' used bandwidth in percent. ')
xldv20IbmPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6), )
if mibBuilder.loadTexts: xldv20IbmPPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IbmPPTPTable.setDescription(' The physical path termination point table for the IBM IF. ')
xldv20IbmPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20IbmPPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IbmPPTPEntry.setDescription(' An entry describing a termination point in the IbmPPTP table. Notifications : see xldv20IfEntry. ')
xldv20IbmAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1, 1), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IbmAISOnLOS.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IbmAISOnLOS.setDescription(' To enable/disable (default) the VP-AIS generation on defect LOS. ')
xldv20IbmVpAISFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 6, 1, 2), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20IbmVpAISFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20IbmVpAISFiltering.setDescription(' To enable or disable (default) the VP-AIS cell filtering function in the NT. In case of enable no VP-AIS cells are passed to the subscriber. ')
xldv20Ds3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7), )
if mibBuilder.loadTexts: xldv20Ds3NePPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Ds3NePPTPTable.setDescription(' The near end physical path termination point table for the DS3 interface. ')
xldv20Ds3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Ds3NePPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Ds3NePPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20D3nType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20D3nType.setDescription(' The interface type of the line used for transmission. ')
xldv20D3nCodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 2), Xldv20CodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nCodingType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20D3nCodingType.setDescription(' The coding type of the line used for transmission. Value: dsx3B3ZS . ')
xldv20D3nPayloadScramblingActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20D3nPayloadScramblingActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20D3nPayloadScramblingActivate.setDescription(' Enables (default) / disables the payload scrambling . ')
xldv20D3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 4), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20D3nEmptyCellType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20D3nEmptyCellType.setDescription(' The type of empty cells. ')
xldv20D3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20D3nBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20D3nBandwidthUsage.setDescription(' Used bandwidth in percent. ')
xldv20E3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8), )
if mibBuilder.loadTexts: xldv20E3NePPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3NePPTPTable.setDescription(' The physical path termination point table for the E3 IF. ')
xldv20E3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20E3NePPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3NePPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20E3nType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nType.setDescription(' The interface type of the line used for transmission. ')
xldv20E3nCodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 2), Xldv20CodingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nCodingType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nCodingType.setDescription(' The coding type of the line used for transmission. ')
xldv20E3nTrailTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceSend.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nTrailTraceSend.setDescription(' The pattern to be sent to LE for the trail trace send functionality. ')
xldv20E3nTrailTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 4), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceSendDefault.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nTrailTraceSendDefault.setDescription(' To configure the trail trace send functionality. A default trace value (enabled) or the pattern defined in the xldv20E3nTrailTraceSend attribute (disabled) will be sent. ')
xldv20E3nTrailTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceExpect.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nTrailTraceExpect.setDescription(' The expected pattern. It will be compared with the value of the E3nTrailTraceReceive attribute provided that the attribute E3nTrailTraceTIMDetection is enabled. ')
xldv20E3nTrailTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 6), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nTrailTraceTIMDetectionActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nTrailTraceTIMDetectionActivate.setDescription(' Enables / disables (default) signal comparison of the signals E3nTrailTraceExpect and E3nTrailTraceReceive. ')
xldv20E3nTrailTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nTrailTraceReceive.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nTrailTraceReceive.setDescription(' The received trail trace value from the LE. ')
xldv20E3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 8), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20E3nEmptyCellType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nEmptyCellType.setDescription(' Type of empty cells. ')
xldv20E3nPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 9), Xldv20E3nPayloadType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nPayloadType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nPayloadType.setDescription(' The received payload type. ')
xldv20E3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20E3nBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20E3nBandwidthUsage.setDescription(' Used bandwidth in percent. ')
xldv20Stm1NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9), )
if mibBuilder.loadTexts: xldv20Stm1NePPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Stm1NePPTPTable.setDescription(' The physical path termination point table for the STM1 IF. ')
xldv20Stm1NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Stm1NePPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Stm1NePPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20S1nLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nLineType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nLineType.setDescription(' The physical medium of the line used for transmission. ')
xldv20S1nPathTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceSend.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nPathTraceSend.setDescription(' Pattern to be sent to the LE (CRC + 15 bytes) used for the path trace send functionality. ')
xldv20S1nPathTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceSendDefault.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nPathTraceSendDefault.setDescription(' To configure the path trace send functionality. A default path trace value (enabled) or the pattern defined in the xldv20S1nPathTraceSend attribute (disabled) will be sent. ')
xldv20S1nPathTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceExpect.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nPathTraceExpect.setDescription(' The expected result of a path trace operation. This signal will be compared with the S1nPathTraceReceive, when the Attribute S1nPathTraceTIMDetectionActivate is enabled. If the comparison detects unequality an alarm notification (TIM) is sent. ')
xldv20S1nPathTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 5), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nPathTraceTIMDetectionActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nPathTraceTIMDetectionActivate.setDescription(' Enables / disables (default) the comparison of xldv20S1nPathTraceExpect and xldv20S1nPathTraceReceive attribute. ')
xldv20S1nPathTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nPathTraceReceive.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nPathTraceReceive.setDescription(' Received path trace value from the LE. ')
xldv20S1nHpEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 7), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nHpEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nHpEberThreshold.setDescription(' The threshold for the higher-order path excessive bit error check. ')
xldv20S1nMsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 8), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nMsEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nMsEberThreshold.setDescription(' The threshold for the multiplexer section excessive bit error check. ')
xldv20S1nRsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 9), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nRsEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nRsEberThreshold.setDescription(' The threshold for the repeater section excessive bit error check. ')
xldv20S1nSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 10), Xldv20S1nS3nSDThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nSDThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nSDThreshold.setDescription(' The threshold for the signal degration check. ')
xldv20S1nRDIAISOnEber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 11), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nRDIAISOnEber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nRDIAISOnEber.setDescription(' Enables (default) / disables the RDI-and VP-AIS generation on defect excessive bit ratio. ')
xldv20S1nSignalLabelReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nSignalLabelReceive.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nSignalLabelReceive.setDescription(' Received signal label from the LE. ')
xldv20S1nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 13), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S1nEmptyCellType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nEmptyCellType.setDescription(' The type of empty cells. ')
xldv20S1nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S1nBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S1nBandwidthUsage.setDescription(' Used bandwidth in percent. ')
xldv20Sts3NePPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10), )
if mibBuilder.loadTexts: xldv20Sts3NePPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Sts3NePPTPTable.setDescription(' The physical path termination point table for the STS3c IF. ')
xldv20Sts3NePPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Sts3NePPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Sts3NePPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20S3nLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 1), Xldv20LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nLineType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nLineType.setDescription(' The physical medium of the line used for transmission. ')
xldv20S3nPathTraceSend = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSend.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceSend.setDescription(' The input signal used for the path trace send functionality. ')
xldv20S3nPathTraceSendDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 3), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSendDefault.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceSendDefault.setDescription(' Enables/disables the path trace send functionality. A default path trace value (enabled) or the pattern defined in the xldv20S3nPathTraceSend attribute (disabled) will be sent. ')
xldv20S3nPathTraceExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceExpect.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceExpect.setDescription(' The expected result of a path trace operation. This signal will be compared with the S3nPathTraceReceive, when the attribute S3nPathTraceTIMDetectionActivate is enabled. If the comparison detects unequality an alarm notification (TIM) is sent. When CRC is activated, only the first 15 bytes are compared. ')
xldv20S3nPathTraceTIMDetectionActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 5), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceTIMDetectionActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceTIMDetectionActivate.setDescription(' Enables/disables the comparsion of the signals S3nPathTraceExpect and S3nPathTraceReceive. ')
xldv20S3nPathTraceReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nPathTraceReceive.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceReceive.setDescription(' Received path trace value from the LE. ')
xldv20S3nPathTraceSync = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 7), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSync.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceSync.setDescription(' Enables/disables the path trace synchronization (the sync-bit generation for the path trace send attribute). ')
xldv20S3nPathTraceSendCRCActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 8), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceSendCRCActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceSendCRCActivate.setDescription(' Enables/disbales the CRC generation for the path trace send attribute. First Trace Send byte ignored and used for CRC when CRC is enabled. ')
xldv20S3nPathTraceReceiveCRCActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 9), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nPathTraceReceiveCRCActivate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nPathTraceReceiveCRCActivate.setDescription(' Enables/disables the CRC generation for the path trace reveive attribute. ')
xldv20S3nHpEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 10), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nHpEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nHpEberThreshold.setDescription(' Threshold for the higher-order path excessive bit error check. ')
xldv20S3nMsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 11), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nMsEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nMsEberThreshold.setDescription(' Threshold for the multiplexer section excessive bit error check. ')
xldv20S3nRsEberThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 12), Xldv20S1nS3nEberThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nRsEberThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nRsEberThreshold.setDescription(' Threshold for the repeater section excessive bit error check. ')
xldv20S3nSDThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 13), Xldv20S1nS3nSDThreshold()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nSDThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nSDThreshold.setDescription(' Threshold for the signal degration check. ')
xldv20S3nSignalLabelReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nSignalLabelReceive.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nSignalLabelReceive.setDescription(' Received signal label value from the LE. ')
xldv20S3nEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 15), Xldv20EmptyCellType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20S3nEmptyCellType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nEmptyCellType.setDescription(' Type of empty cells. ')
xldv20S3nBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20S3nBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20S3nBandwidthUsage.setDescription(' Used bandwidth in percent. ')
xldv20Dsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11), )
if mibBuilder.loadTexts: xldv20Dsx1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1ConfigTable.setDescription('The DS1 Configuration table. ')
xldv20Dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20Dsx1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1ConfigEntry.setDescription('An entry in the DS1 Configuration table (RFC1406) . Index is IfIndex of dsx1nePPTP (e1nIma). ')
xldv20Dsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1-CRC", 5), ("dsx1E1-MF", 6), ("dsx1E1-CRC-MF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1LineType.setDescription(' This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence. dsx1ESF Extended SuperFrame DS1. dsx1D4 AT&T D4 format DS1. dsx1E1 CCITT Recommendation G704 (Table 4a). dsx1E1-CRC CCITT Recommendation G704 (Table 4b). dsxE1-MF G704 (Table 4a) with TS16 multiframing enabled. dsx1E1-CRC-MF G704 (Table 4b) with TS16. multiframing enabled. ')
xldv20Dsx1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. dsx1JBZS refers the Jammed Bit Zero Suppres- sion, in which the AT&T specification of at least one pulse every 8 bit periods is literal- ly implemented by forcing a pulse in bit 8 of each channel. Thus, only seven bits per chan- nel, or 1.344 Mbps, is available for data. dsx1B8ZS refers to the use of a specified pat- tern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. ANSI Clear Channels may use dsx1ZBTSI, or Zero Byte Time Slot Interchange. E1 links, with or without CRC, use dsx1HDB3 or dsx1AMI. dsx1AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data. ')
xldv20Dsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1LoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1LoopbackConfig.setDescription("This variable represents the loopback confi- guration of the DS1 interface. Agents support- ing read/write access should return badValue in response to a requested loopback state that the interface does not support. The values mean:. dsx1NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. dsx1PayloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for re- transmission after it has passed through the device's framing function. dsx1LineLoop The received signal at this interface does not go through the device (minimum pene- tration) but is looped back out. dsx1OtherLoop Loopbacks that are not defined here. ")
xldv20Dsx1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1SignalMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1SignalMode.setDescription(" The signal mode. 'none' indicates that no bits are reserved for signaling on this channel. 'robbedBit' indicates that T1 Robbed Bit Sig- naling is in use. 'bitOriented' indicates that E1 Channel Asso- ciated Signaling is in use. 'messageOriented' indicates that Common Chan- nel Signaling is in use either on channel 16 of an E1 link or channel 24 of a T1. ")
xldv20Dsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1TransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1TransmitClockSource.setDescription("The source of Transmit Clock. 'loopTiming' indicates that the recovered re- ceive clock is used as the transmit clock. 'localTiming' indicates that a local clock source is used. 'throughTiming' indicates that recovered re- ceive clock from another interface is used as the transmit clock. ")
xldv20Dsx1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8))).clone(namedValues=NamedValues(("other", 1), ("dsx1Ansi-T1-403", 2), ("dsx1Att-54016", 4), ("dsx1Fdl-none", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20Dsx1Fdl.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20Dsx1Fdl.setDescription("This bitmap describes the use of the facili- ties data link, and is the sum of the capabili- ties: 'other' indicates that a protocol other than one following is used. 'dsx1Ansi-T1-403' refers to the FDL exchange recommended by ANSI. 'dsx1Att-54016' refers to ESF FDL exchanges. 'dsx1Fdl-none' indicates that the device does not use the FDL. ")
xldv20SdcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12))
xldv20SdcCtrlControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlControlReq.setDescription(' To activate a configured set of data (command: activateData). ')
xldv20SdcCtrlControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlControlStatus.setDescription(' Indicates the status of a control request. ')
xldv20SdcCtrlIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 3), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlIfIndex.setDescription(' Index to identify a sdc PPTP. ')
xldv20SdcCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 4), Xldv20SdslDataRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlRate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlRate.setDescription(' Desired SDSL data rate. The supported line rates ranges from 160 and 2320 Kbit/sec. The cell rate range is between 377 and 5471 cells/sec. Default is 5 ( 160 kbps/377cps). ')
xldv20SdcCtrlXdslServiceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 5), Xldv20SdslServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlXdslServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlXdslServiceType.setDescription(' The service mode for the SDSL line. ')
xldv20SdcCtrlControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlControlReqResult.setDescription(' The result of the last user command. ')
xldv20SdcCtrlControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcCtrlControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20SdcCtrlMinMarginUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 12, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcCtrlMinMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcCtrlMinMarginUp.setDescription(' The desired threshold for upstream margin when an alarm should be sent (in units of dB). ')
xldv20SdcPPTPTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13), )
if mibBuilder.loadTexts: xldv20SdcPPTPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcPPTPTable.setDescription(' The physical path termination point table for SDSL C. ')
xldv20SdcPPTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20SdcPPTPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcPPTPEntry.setDescription(' An entry describing a termination point in the PPTP table. Notifications : see xldv20IfEntry. ')
xldv20SdcRateCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 1), Xldv20SdslDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcRateCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcRateCfg.setDescription(' The desired data rate. The data rate ranges from 160 to 2320 Kbit/sec. The cell rate ranges between 377 and 5471 cells/sec. Default is 5 ( 160 kbps/377cps). ')
xldv20SdcXdslServiceTypeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 2), Xldv20SdslServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcXdslServiceTypeCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcXdslServiceTypeCfg.setDescription(' The configured service mode for SDSL line. ')
xldv20SdcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 3), Xldv20SdslDataRateCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcRate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcRate.setDescription(' The current downstream data rate. The data rate ranges from 160 to 2320 Kbit/sec. The cell rate ranges between 377 and 5471 cells/sec. Default is 5 ( 160 kbps/377cps). ')
xldv20SdcMarginDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 4), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMarginDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcMarginDn.setDescription(' Not applicable. GetRequest returns marginNotApplicable . ')
xldv20SdcMarginUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 5), Xldv20AdslMargin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMarginUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcMarginUp.setDescription(' The current upstream margin in units of dB. Default is marginInvalid . ')
xldv20SdcAttenuationDn = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 6), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcAttenuationDn.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcAttenuationDn.setDescription(' Not applicable. GetRequest returns attenuationNotApplicable. ')
xldv20SdcAttenuationUp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 7), Xldv20AdslAttenuation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcAttenuationUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcAttenuationUp.setDescription(' The current upstream attenuation in steps of 0,5 dB. Default is attenuationInvalid. ')
xldv20SdcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 8), Xldv20LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcLinkState.setDescription(' The link states of the SDSL Central Office Modem. ')
xldv20SdcAISOnLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 9), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcAISOnLOS.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcAISOnLOS.setDescription(' The attribute enables or disables the VP-AIS generation after defect LOS. ')
xldv20SdcAISOnACT = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 10), Xldv20OperState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SdcAISOnACT.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcAISOnACT.setDescription(' The attribute enables or disables the VP-AIS generation after link activation fault. ')
xldv20SdcGuaranteedBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcGuaranteedBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcGuaranteedBandwidthUsage.setDescription(' The guaranteed bandwidth in percent. ')
xldv20SdcInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 12), Xldv20XdslInitStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcInitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcInitStatus.setDescription(' The initialization status field of an SDSL line. Describes the initalization error in case of an activation problem on an SDSL line . ')
xldv20SdcMinMarginUpCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcMinMarginUpCfg.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcMinMarginUpCfg.setDescription(' The desired threshold for upstream margin when an alarm should be sent (in units of dB). ')
xldv20SdcTransceiverOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 14), Xldv20AdslOutputPower()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcTransceiverOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcTransceiverOutputPower.setDescription(' The SDSL tranceiver output power. Granularity 1.0 dBm. Default value is outputPowerInvalid. ')
xldv20SdcXdslServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 4, 13, 1, 15), Xldv20XdslServiceTypeCurrent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SdcXdslServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SdcXdslServiceType.setDescription(' The current service type resulting from the configured service type. It depends on the actual hardware. Configuring gDotHsMode can result either in gDotLiteMode or gDotDmtMode. gDotAll can result in gDotDmtMode, ansiT1dot413 or gDotLiteMode. Default value is serviceTypeUnknown (10). ')
xldv20ImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1))
xldv20ImaGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNumber.setDescription(' The number of IMA groups configured on this system. ')
xldv20ImaControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2))
xldv20ImaControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlReq.setDescription(' The IMA control request object for IMA MIB objects. ')
xldv20ImaControlMinNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlMinNumLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlMinNumLinks.setDescription(' The required minimum number of IMA links . ')
xldv20ImaControlGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaControlGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlGroupIndex.setDescription(' The index of the IMA group. ')
xldv20ImaControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 4), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlReqResult.setDescription(' The result of the last user command. ')
xldv20ImaControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20ImaControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 6), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlStatus.setDescription(' The status of the control request. ')
xldv20ImaControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaControlTimer.setDescription(' The maximum wait time for the manager when changing the minimum number of active links. As the LUIMA performs a restart the command cannot be processed immediately ( value commExecStarted in GetResponse for xldv20ImaControlReq ). ')
xldv20ImaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3), )
if mibBuilder.loadTexts: xldv20ImaGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupTable.setDescription(' The IMA Group configuration Table. Index is ImaGroupIndex. ')
xldv20ImaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20ImaGroupIndex"))
if mibBuilder.loadTexts: xldv20ImaGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupEntry.setDescription(' An entry in the IMA Group table. ')
xldv20ImaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupIndex.setDescription(' The index of the table identifying an IMA Group. ')
xldv20ImaGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 2), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupRowStatus.setDescription(' The imaGroupRowStatus object allows create, change, and delete operations on imaGroupTable entries. In the first version only one IMA group for the LU-IMA will be created during start-up. ')
xldv20ImaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupIfIndex.setDescription(' The IfIndex of the IMA group. ')
xldv20ImaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 4), Xldv20ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNeState.setDescription(' The current operational state of the near-end IMA Group State Machine. ')
xldv20ImaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 5), Xldv20ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupFeState.setDescription(' The current operational state of the far-end IMA Group State Machine. ')
xldv20ImaGroupFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 6), Xldv20ImaGroupFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupFailureStatus.setDescription(' The current failure status of the IMA group (the reason why the GTSM is in the down state). ')
xldv20ImaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 7), Xldv20ImaGroupSymmetry()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupSymmetry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupSymmetry.setDescription(' Symmetry of the IMA group. ')
xldv20ImaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMinNumTxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupMinNumTxLinks.setDescription(' Minimum number of transmit links required to be Active for the IMA group to be in the Operational state. ')
xldv20ImaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMinNumRxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupMinNumRxLinks.setDescription(' Minimum number of receive links required to be Active for the IMA group to be in the Operational state. ')
xldv20ImaGroupNeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 10), Xldv20ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeTxClkMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNeTxClkMode.setDescription(' Transmit clocking mode used by the near-end IMA group. ')
xldv20ImaGroupFeTxClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 11), Xldv20ImaGroupTxClkMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeTxClkMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupFeTxClkMode.setDescription(' Transmit clocking mode used by the far-end IMA group. ')
xldv20ImaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 12), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupTxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupTxTimingRefLink.setDescription(' The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery from the ATM layer. ')
xldv20ImaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 13), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxTimingRefLink.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupRxTimingRefLink.setDescription(' The ifIndex of the transmit timing reference link to be used by the near-end for IMA data cell clock recovery toward the ATM layer. ')
xldv20ImaGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupLastChange.setDescription(' The time stamp the IMA group last changed operational state ( value of imaGroupNeState changed). ')
xldv20ImaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ImaGroupTxImaId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupTxImaId.setDescription(' The IMA ID currently in use by the near-end IMA function. ')
xldv20ImaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxImaId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupRxImaId.setDescription(' The IMA ID currently in use by the far-end IMA function. ')
xldv20ImaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 17), Xldv20ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupTxFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupTxFrameLength.setDescription(' The frame length to be used by the IMA group in the transmit direction. ')
xldv20ImaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 18), Xldv20ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRxFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupRxFrameLength.setDescription(' Value of IMA frame length as received from remote IMA function. ')
xldv20ImaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 19), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMax.setDescription(' The maximum number of milliseconds of differential delay among the links that will be tolerated on this interface. ')
xldv20ImaGroupLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 20), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupLeastDelayLink.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupLeastDelayLink.setDescription(' The ifIndex of the link configured in the IMA group which has the smallest link propagation delay. This value has meaning only if at least one link has been configured in the IMA group. ')
xldv20ImaGroupDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 21), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMaxObs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupDiffDelayMaxObs.setDescription(' The latest maximum differential delay observed (in milliseconds) between the links having the least and most link propagation delay, among the receive links that are currently configured in the IMA group. ')
xldv20ImaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupAlphaValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupAlphaValue.setDescription(" This indicates the 'alpha' value used to specify the number of consecutive invalid ICP cells to be detected before moving to the IMA Hunt state from the IMA Sync state. ")
xldv20ImaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupBetaValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupBetaValue.setDescription(" This indicates the 'beta' value used to specify the number of consecutive errored ICP cells to be detected before moving to the IMA Hunt state from the IMA Sync state. ")
xldv20ImaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupGammaValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupGammaValue.setDescription(" This indicates the 'gamma' value used to specify the number of consecutive valid ICP cells to be detected before moving to the IMA Sync state from the IMA PreSync state. ")
xldv20ImaGroupRunningSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupRunningSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupRunningSecs.setDescription(' The amount of time (in seconds) since this IMA group has been in the operation (up or down). ')
xldv20ImaGroupUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupUnavailSecs.setDescription(' Count of one second intervals where the IMA Group Traffic State Machine is Down. ')
xldv20ImaGroupNeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNeNumFailures.setDescription(' The number of times a near-end group failure (Config-Aborted, Insufficient-Links) has been reported since power-up or reboot. ')
xldv20ImaGroupFeNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupFeNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupFeNumFailures.setDescription(' The number of times a far-end group failure (Config-Aborted, Insufficient-Links) has been reported since power-up or reboot. ')
xldv20ImaGroupNumTxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumTxCfgLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNumTxCfgLinks.setDescription(' The number of links that are configured to transmit in this IMA group. This attribute overwrites the value of the imaGroupNumRxActLinks attribute when the IMA group is configured in the Symmetrical Configuration group symmetry mode. ')
xldv20ImaGroupNumRxCfgLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumRxCfgLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNumRxCfgLinks.setDescription(' The number of links that are configured to receive in this IMA group. This attribute is overwritten by the value of the imaGroupNumTxActLinks attribute when the IMA group is configured in the Symmetrical Configuration group symmetry mode. ')
xldv20ImaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumTxActLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNumTxActLinks.setDescription(' The number of links which are configured to transmit and are currently Active in this IMA group. ')
xldv20ImaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupNumRxActLinks.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupNumRxActLinks.setDescription(' The number of links which are configured to receive and are currently Active in this IMA group. ')
xldv20ImaGroupBandwidthUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupBandwidthUsage.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupBandwidthUsage.setDescription(' Used bandwidth in percent. ')
xldv20ImaGroupMappingTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4), )
if mibBuilder.loadTexts: xldv20ImaGroupMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupMappingTable.setDescription(" A table mapping the 'ifIndex' values of 'imaGroupIfIndex' to the 'imaGroupIndex' values of the corresponding IMA group. Index is ifIndex of IMA group (atmIma). ")
xldv20ImaGroupMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20ImaGroupMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupMappingEntry.setDescription(' An entry in the IMA Group Mapping table. ')
xldv20ImaGroupMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaGroupMappingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaGroupMappingIndex.setDescription(' The imaGroupIndex of the IMA Group which implements the specified interface. ')
xldv20ImaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5), )
if mibBuilder.loadTexts: xldv20ImaLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkTable.setDescription(' The IMA group Link Status and Configuration table. ')
xldv20ImaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20ImaLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkEntry.setDescription(' An entry in the IMA Group Link table. Index is IfIndex of dsx1nePPTP (e1nIma). ')
xldv20ImaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 1), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkRowStatus.setDescription(' The imaLinkRowStatus object allows create, change, and delete operations on imaLinkTable entries. In the first version the IMA links for the LU-IMA will be created during start-up. ')
xldv20ImaLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkGroupIndex.setDescription(' The value which identifies the IMA group (imaGroupIndex) of which this link is a member. ')
xldv20ImaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 3), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeTxState.setDescription(' The current state of the near-end transmit link. ')
xldv20ImaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 4), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeRxState.setDescription(' The current state of the near-end receive link. ')
xldv20ImaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 5), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeTxState.setDescription(' The current state of the far-end transmit link as reported via ICP cells. ')
xldv20ImaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 6), Xldv20ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeRxState.setDescription(' The current state of the far-end receive link as reported via ICP cells. ')
xldv20ImaLinkNeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 7), Xldv20ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeRxFailureStatus.setDescription(' The current link failure status of the near-end receive link as reported via ICP cells. ')
xldv20ImaLinkFeRxFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 8), Xldv20ImaLinkFailureStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeRxFailureStatus.setDescription(' The current link failure status of the far-end receive link as reported via ICP cells. ')
xldv20ImaLinkTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkTxLid.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkTxLid.setDescription(' The outgoing LID used currently on the link by the local end. This value has meaning only if the link belongs to an IMA group. ')
xldv20ImaLinkRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRxLid.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkRxLid.setDescription(' The outgoing LID used currently on the link by the remote end. This value has meaning only if the link belongs to an IMA group. ')
xldv20ImaLinkImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkImaViolations.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkImaViolations.setDescription(' ICP violations: count of errored, invalid or missing ICP cells, except during SES-IMA or UAS-IMA conditions. ')
xldv20ImaLinkOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkOifAnomalies.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkOifAnomalies.setDescription(' The number of OIF anomalies, except during SES-IMA or UAS-IMA conditions, at the near-end. This is an optional attribute. ')
xldv20ImaLinkNeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeSevErroredSecs.setDescription(' Count of one second intervals containing >= 30% of the ICP cells counted as IV-IMAs, or one or more link defects (e.g., LOS, OOF/LOF, AIS, or LCD), LIF defects, or LODS defects, except during UAS-IMA condition. ')
xldv20ImaLinkFeSevErroredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeSevErroredSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeSevErroredSecs.setDescription(' Count of one second intervals containing one or more RDI-IMA defects, except during UAS-IMA-FE condition. ')
xldv20ImaLinkNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeUnavailSecs.setDescription(' Count of unavailable seconds at near-end: unavailability begins at the onset of 10 contiguous SES-IMA and ends at the onset of 10 contiguous seconds with no SES-IMA. ')
xldv20ImaLinkFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeUnavailSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeUnavailSecs.setDescription(' Count of unavailable seconds at near-end: unavailability begins at the onset of 10 contiguous SES-IMA-FE and ends at the onset of 10 contiguous seconds with no SES-IMA-FE. ')
xldv20ImaLinkNeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeTxUnusableSecs.setDescription(' Tx Unusable seconds: count of Tx Unusable seconds at the near-end Tx LSM. ')
xldv20ImaLinkNeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeRxUnusableSecs.setDescription(' Rx Unusable seconds: count of Rx Unusable seconds at the near-end Rx LSM. ')
xldv20ImaLinkFeTxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeTxUnusableSecs.setDescription(' Tx Unusable seconds: count of Tx Unusable seconds at the far-end Tx LSM. ')
xldv20ImaLinkFeRxUnusableSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxUnusableSecs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeRxUnusableSecs.setDescription(' Rx Unusable seconds: count of Rx Unusable seconds at the far-end Rx LSM. ')
xldv20ImaLinkNeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeTxNumFailures.setDescription(' The number of times a near-end transmit failure alarm condition has been entered on this link (i.e., some form of implementation specific transmit fault). ')
xldv20ImaLinkNeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkNeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkNeRxNumFailures.setDescription(' The number of times a near-end receive failure alarm condition has been entered on this link (i.e., LIF, LODS, RFI-IMA, Mis-Connected or some form of implementation specific receive fault). ')
xldv20ImaLinkFeTxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeTxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeTxNumFailures.setDescription(' The number of times a far-end transmit failure alarm condition has been entered on this link (i.e., Tx-Unusable-FE). This is an optional attribute. ')
xldv20ImaLinkFeRxNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkFeRxNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkFeRxNumFailures.setDescription(' The number of times a far-end receive failure alarm condition has been entered on this link (i.e., Rx-Unusable-FE). This is an optional attribute. ')
xldv20ImaLinkTxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkTxStuffs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkTxStuffs.setDescription(' Count of stuff events inserted in the transmit direction. This is an optional attribute. ')
xldv20ImaLinkRxStuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 9, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ImaLinkRxStuffs.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ImaLinkRxStuffs.setDescription(' Count of stuff events inserted in the receive direction. This is an optional attribute. ')
xldv20LoopBackPointTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1), )
if mibBuilder.loadTexts: xldv20LoopBackPointTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20LoopBackPointTable.setDescription(' The loop back point table')
xldv20LbpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20IfIndex"))
if mibBuilder.loadTexts: xldv20LbpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20LbpEntry.setDescription(' An entry in the loop back point table. The entry holds parameters of loop back points (as the loop location ID for loop back points or the loop mode). Loopback points are either the TCA at the LU* or SU or the IMA group at the LUIMA (within the DSLAM), or the TCA of adrPPTP at the NTAD. Notifications : see xldv20IfEntry. ')
xldv20LbpLoopLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20LbpLoopLocId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20LbpLoopLocId.setDescription(' A unique number known by the crafts person specifying the location where the OAM loopback cell shall be looped back. Loopback point is either the TCA at the LU* or SU (within the DSLAM) or the TCA of adrPPTP at NTAD. NOTE : Due to the functionality of ASPEN at SU the loop location ID only of port 1 is configurable. The IDs for port2-16 are calculated from this value by the ASPEN. TMN will store these values to the corresponding table entries . ')
xldv20LbpLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 1, 1, 2), Xldv20LoopMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20LbpLoopMode.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20LbpLoopMode.setDescription(' This attribute selects for connecting points whether the received loopback cell shall be forwarded or forwarded and looped back . ')
xldv20PhyLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2))
xldv20PltIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PltIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltIfIndex.setDescription(' This attribute labels the location of the physical loopback. It can be the ifIndex of a PPTP at LI25, LU, SU . ')
xldv20PltControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 2), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20PltControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltControlReq.setDescription(' The received command to start an OAM cell loopback test (loopDiagRequest). Notifications : xldv20TrPltTestResult . ')
xldv20PltControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 3), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltControlStatus.setDescription(' The status of the control request. ')
xldv20PltControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltControlTimer.setDescription(" This is the maximum duration of a physical loop diagnosis. It is required by the SNMP manager to detect the end of a physical loop diagnosis in case of the response 'xldv20TrPltTestResult' was not received in time. ")
xldv20PltControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 5), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltControlReqResult.setDescription(' The result of the last user command. ')
xldv20PltControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20PltControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20PltControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20AtmLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3))
xldv20AltIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 1), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltIfIndex.setDescription(" The TLM interface where OAM cells are inserted. It can be the 'IfIndex' of a PPTP at a LU or SU. ")
xldv20AltVpi = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltVpi.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltVpi.setDescription(' Identifies the VPI which shall be tested. It is VPINni when test in LE direction or it is VPIUni when test in NT direction. ')
xldv20AltLoopLocId = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltLoopLocId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltLoopLocId.setDescription(' Test cell loopback location. It is an identifier known by the crafts person identifying a ATM node in the ATM network. For EndToEnd loop test the default value is valid. ')
xldv20AltControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 4), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltControlReq.setDescription(' The received command to start an OAM cell loopback test (loopTestRequest). Reject reasons are faulty parameters from the agent (response: paramFaulty, commExecStarted, loopTestReject, commandFailed) or a loop request during a running test (response: loopTestBusy). Notifications : xldv20TrAltTestResult . ')
xldv20AltControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 5), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltControlStatus.setDescription(' The status of the command handling. ')
xldv20AltControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltControlTimer.setDescription(" The maximum duration of loop- back test. It is required by the SNMP manager to detect the end of loopback test in case of the response'xldv20TrAltTestResult' was not received in time. ")
xldv20AltOamLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 7), Xldv20OamLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltOamLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltOamLevel.setDescription(' The OAM level for loop test on VP/VC level. Valid: f4 (for VP ) f5 (for VC). ')
xldv20AltLoopTestType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 8), Xldv20TestType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltLoopTestType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltLoopTestType.setDescription(' The type of loop test . For EndToEnd loop test loop location ID is FF..FF. ')
xldv20AltVci = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltVci.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltVci.setDescription(' Insertion point for OAM cells for F5 level ')
xldv20AltControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 10), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltControlReqResult.setDescription(' The result of the last user command. ')
xldv20AltFlowDirection = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 11), Xldv20FlowDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AltFlowDirection.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltFlowDirection.setDescription(" Labels the flow direction of loop back cells. 'inwards' meanxing towards cellbus. 'outwards' meaning towards UTOPIA interface . ")
xldv20AltControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 3, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AltControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AltControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20MultipleLoopbackResultTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4), )
if mibBuilder.loadTexts: xldv20MultipleLoopbackResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20MultipleLoopbackResultTable.setDescription(' The Multiple Loopback Result table. Used for the multiple loopback functionality to collect the IDs of connecting points which looped back to the XLD. When an ATM looptest is started the table is empty. An entry is created when an OAM cell is received from a connecting point. ')
xldv20MlbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20MlbIndex"))
if mibBuilder.loadTexts: xldv20MlbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20MlbEntry.setDescription(' An entry in the Multiple Loopback Result Table. ')
xldv20MlbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20MlbIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20MlbIndex.setDescription(' The index of this table. ')
xldv20MlbLoopLocId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20MlbLoopLocId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20MlbLoopLocId.setDescription(' A unique number known by the crafts person specifying the ID of a connecting point which looped back an OAM cell to the originating point (SU or LU) within the XLD. ')
xldv20ExternalAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1), )
if mibBuilder.loadTexts: xldv20ExternalAlarmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExternalAlarmsTable.setDescription(' The entities of the table are used to control the forwarding of external alarms to the TMN-OS and LCT. ')
xldv20ExternalAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20ExtAlarmIndex"))
if mibBuilder.loadTexts: xldv20ExternalAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExternalAlarmEntry.setDescription(' Entry of external alarm table. Notifications : xldv20TrExternalAlarm. ')
xldv20ExtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmIndex.setDescription(' A unique number identifying an entry of the external alarm table. ')
xldv20ExtAlarmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 2), Xldv20AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmAdminState.setDescription(' This attribute is used to activate (unlock) and deactivate (lock) the forwarding of the external alarm towards the manager. ')
xldv20ExtAlarmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 3), Xldv20OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmOperState.setDescription(' Indicates whether or not the external alarm is capable of performing its normal functions. ')
xldv20ExtAlarmActivityState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 4), Xldv20ExtAlarmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmActivityState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmActivityState.setDescription(' The status of the external alarm. Only if the operational state is enabled and the alarm state is on, an external alarm is generated for this object. ')
xldv20ExtAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 5), Xldv20AlmSevProfileIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmSeverityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmSeverityIndex.setDescription(' The index of the associated entry in the alarm severity profile table. These entries contain the severity assigments for the alarms reported by this managed entity. ')
xldv20ExtAlarmFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 6), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20ExtAlarmFilteringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmFilteringIndex.setDescription(' It is a pointer to the instance of the alarm filtering assignment profile managed entity that contains the filtering assignments for the alarms reported by this managed entity. ')
xldv20ExtAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20ExtAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20ExtAlarmName.setDescription(' Describe the input line and the type of external alarm. Default values on startup are : index=1 : Fan 1 Fail index=2 : Fan 2 Fail index=3 : High Temperature. ')
xldv20AlarmSeverityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2), )
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileTable.setDescription(' The table of alarm severity profiles. Profiles can be created or deleted dynamically. Creating or deleting an entry in this table automatically creates or deletes the corresponding entries in the xldv20AlarmSevTable. ')
xldv20AlarmSeverityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmSevProfileIndex"))
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmSeverityProfileEntry.setDescription(' A group of severities, one for each alarm type in the communications alarm group. ')
xldv20AlmSevProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1, 1), Xldv20AlmSevProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSevProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSevProfileIndex.setDescription(' A number identifying this alarm severity profile. ')
xldv20AlmSevProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 2, 1, 2), Xldv20RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmSevProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSevProfileRowStatus.setDescription(' Used to create a new row or to delete an existing row in the table. Default value: xldv20AlmSevProfileIndex = 1..10: created xldv20AlmSevProfileIndex = 11..40: deleted . ')
xldv20AlarmSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3), )
if mibBuilder.loadTexts: xldv20AlarmSeverityTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmSeverityTable.setDescription(' The alarm severity table associates profile index and trap ID pairs with severities to be used for alarm traps that have occurred. (Note that this table does not apply to cleared alarms). ')
xldv20AlarmSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmSevProfileIndex"), (0, "XLDV20-MIB", "xldv20AlmSevTrapId"))
if mibBuilder.loadTexts: xldv20AlarmSeverityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmSeverityEntry.setDescription(" An entry in this table associates an alarm severity profile index/trap ID pair with a severity to be used for alarm traps. The alarm severity profile index is referenced by the 'Alarm Severity assignment Profile Pointer' attribute in the alarm-reporting managed entity e.g. plug-in unit and TLM interface (tcAdaptor, Physical Path Termination Point etc.). Notifications : none. ")
xldv20AlmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1, 1), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSevTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSevTrapId.setDescription(' The trap ID of the alarm trap type this entry applies to. NOTE : the severity of xldv20TrAtmLayerMultiAlarm is not configurable. ')
xldv20AlmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 3, 1, 2), Xldv20AlarmSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSeverity.setDescription(' The severity to be used for this trap type when the entry is selected. ')
xldv20AlarmFilteringProfileTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4), )
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileTable.setDescription(' The table of alarm filtering profiles. Creating or deleting an entry in this table automatically creates or deletes the corresponding entries in the xldv20AlarmFilteringTable. ')
xldv20AlarmFilteringProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmFiltProfileIndex"))
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmFilteringProfileEntry.setDescription(' An entry of the alarm filtering profile table. ')
xldv20AlmFiltProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1, 1), Xldv20AlmFiltProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmFiltProfileIndex.setDescription(' A number identifying this alarm filtering profile. ')
xldv20AlmFiltProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 4, 1, 2), Xldv20RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmFiltProfileRowStatus.setDescription(' This object is used to create a new row or to delete an existing row in the table. Default value: xldv20AlmFiltProfileIndex = 1: created xldv20AlmFiltProfileIndex = 2 .. 300: deleted . ')
xldv20AlarmFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5), )
if mibBuilder.loadTexts: xldv20AlarmFilteringTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmFilteringTable.setDescription(' The alarm filtering table is used for temporairy filtering of alarms. ')
xldv20AlarmFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmFiltProfileIndex"), (0, "XLDV20-MIB", "xldv20AlmFiltTrapId"))
if mibBuilder.loadTexts: xldv20AlarmFilteringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmFilteringEntry.setDescription(' An entry in this table associates a trap id/ temporal filter parameter with a xldv20AlmFiltProfileIndex. ')
xldv20AlmFiltTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1, 1), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFiltTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmFiltTrapId.setDescription(' The ID of the trap type this entry applies to. ')
xldv20AlmTempFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmTempFilter.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmTempFilter.setDescription(' The temporal filtering period in seconds. The value 0 means no filtering. ')
xldv20AlarmListTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6), )
if mibBuilder.loadTexts: xldv20AlarmListTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmListTable.setDescription(' The alarm list table is used to store all reported alarms. ')
xldv20AlarmListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20AlmIndex"))
if mibBuilder.loadTexts: xldv20AlarmListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlarmListEntry.setDescription(' Entry of the alarm list table. Notifications : none. ')
xldv20AlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 700))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmIndex.setDescription(' Unique value to identify an entry in the alarm list when the entry is read or cleared, when the entry is created. ')
xldv20AlmNatureOfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 2), Xldv20TrapIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmNatureOfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmNatureOfAlarm.setDescription(' Generic trouble description of an alarm (the trap ID). ')
xldv20AlmSpecProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSpecProblem.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSpecProblem.setDescription(' Description of further information about an alarm. ')
xldv20AlmSpecProblemText = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSpecProblemText.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSpecProblemText.setDescription(' Description of further information about an alarm in text form. ')
xldv20AlmRepEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmRepEntityId.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmRepEntityId.setDescription(' The managed entity that reported the alarm. In case of a HWM / TLM / COH / GFH object it is the HW unit index / interface index / vpcTP or vccTp index / External Alarm index. ')
xldv20AlmRepSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 6), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmRepSource.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmRepSource.setDescription(' Source reporting the alarm. ')
xldv20AlmFailedComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFailedComponent.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmFailedComponent.setDescription(' The managed entity which is defective. ')
xldv20AlmFailedComponentRepSource = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 8), Xldv20RepSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmFailedComponentRepSource.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmFailedComponentRepSource.setDescription(' The SW application isolating the failed component. ')
xldv20AlmSeverityOfFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 9), Xldv20AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmSeverityOfFailure.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmSeverityOfFailure.setDescription(' The severity of an alarm. ')
xldv20AlmPropRepairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmPropRepairAction.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmPropRepairAction.setDescription(' Suggestion of solutions to fix the problem. ')
xldv20AlmTimeAndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmTimeAndDate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmTimeAndDate.setDescription(' Entry time of the report into the log. ')
xldv20AlmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7))
xldv20AlmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20AlmControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmControlReq.setDescription(' Marks the received command to update the alarm list (updateAlmList) or the alarming filtering table (updateFiltList) or the request of Atm layer multi alarm traps (startSendingAlarms). ')
xldv20AlmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmControlStatus.setDescription(' The status of the control request. The value requestIdle will be set after startup/recovery or after a running test was aborted by the SNMP manager. ')
xldv20AlmControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 3), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmControlReqResult.setDescription(' The result of the last user command. ')
xldv20AlmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 7, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20AlmControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20AlmControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20Reset = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8))
xldv20RstControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstControlReq.setDescription(' Request to perform a reset. Notifications : xldv20TrReplaceableUnitReset at beginning of reset PIU. xldv20TrReplaceableUnitResetEnd at end of reset PIU. xldv20TrRstResult for reset of CI in case of a failure occured after the reset has been accepted. ')
xldv20RstControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstControlStatus.setDescription(' The actual status of the reset procedure. ')
xldv20RstLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 3), Xldv20ResetLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstLevel.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstLevel.setDescription(' The reset level. With this attribute the TMN-OS can deside to make a reset for one unit or the whole system. ')
xldv20RstHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 4), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20RstHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstHwUnitIndex.setDescription(' The (HwUnitIndex) of the plugin unit which should get the reset. ')
xldv20RstControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstControlTimer.setDescription(' Timer value for the trap response. Only valid if xldv20RstControlStatus indicates requestBusy. ')
xldv20RstControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstControlReqResult.setDescription(' The result of the last user command. ')
xldv20RstControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 6, 8, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20RstControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20RstControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20SwmLogHandler = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1))
xldv20DbuControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuControlReq.setDescription(' This attribute serves to launch a read request on either the Software Errorlog, the Software Tracelog or the Hardware Maintenancelog on the CI . From XLDV2.0 error logs and trace logs of PIUs of type SU,IL and LU are provided. Notifications : xldv20TrSweLogRead. xldv20TrHwmLogRead. xldv20TrTraceLogRead . ')
xldv20DbuControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuControlStatus.setDescription(' The status of the current read request. ')
xldv20DbuResultFilePath = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuResultFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuResultFilePath.setDescription(' The path (including the file name) where the file resulting from the read request should be stored. If this attribute does not contain a valid path the results will be printed on screen. ')
xldv20DbuLogType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 4), Xldv20LogType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuLogType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuLogType.setDescription(' The log to be read by the read request. ')
xldv20DbuNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuNumEntries.setDescription(' The number of log entries to be read. If it is 0 or if the passed number exceeds the number of entries mandatoryly in the log, the entire log will be read. ')
xldv20DbuControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuControlTimer.setDescription(' The timer value for trap response. ')
xldv20DbuControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuControlReqResult.setDescription(' The result of the last user command. ')
xldv20DbuHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 8), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbuHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuHwUnitIndex.setDescription(' The HwUnitIndex of the plug-in unit which log should be read. ')
xldv20DbuControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbuControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbuControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20SwmUpgradeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2))
xldv20SucUnit = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucUnit.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucUnit.setDescription(' The plug-in unit type to be upgraded. ')
xldv20SucAllOfType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 2), Xldv20SucAllOfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucAllOfType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucAllOfType.setDescription(' Indicates that the loading for the dedicated unit type may be started n-times ( sucUpgrAll ) regarding to the number of boards of the same type within the DSLAM or for a single unit (sucUpgrSingle ). ')
xldv20SucVersionNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucVersionNo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucVersionNo.setDescription(' String containing the APS version coded into the load for the different board types (destination version). Default value is \\0. Then the default SW version should be loaded. ')
xldv20SucHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 4), Unsigned16()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucHwUnitIndex.setDescription(' The hardware unit index of the plug-in unit to be loaded in case of an single upgrade. ')
xldv20SucPathName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 121))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucPathName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucPathName.setDescription(' The pathname of SAPS content file. ')
xldv20SucFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucFileName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucFileName.setDescription(' The filename of SAPS content file. ')
xldv20SucControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 7), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20SucControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucControlReq.setDescription(' SW upgrade command requests from TMN. Notifications : xldv20TrCmuReadyForReset. xldv20TrUnitReadyForReset. xldv20TrActivateLoadResult. xldv20TrPuUpgradeResult. xldv20TrFTPError. xldv20TrUpgradeCanceled. xldv20TrSwVersionsSet. xldv20TrReadSAPSContentFileReady. xldv20TrUpgradeEndRequestResult. xldv20TrUnitUpgradeNotRequested. ')
xldv20SucControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 8), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucControlStatus.setDescription(' The status of the current request. ')
xldv20SucControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucControlTimer.setDescription(' Wait time in seconds after complete upgrade for a unit type. ')
xldv20SucNumberOfTraps = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucNumberOfTraps.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucNumberOfTraps.setDescription(' Number of traps which have to be expected. ')
xldv20SucDefaultSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucDefaultSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucDefaultSwVersion.setDescription(' The default SW version. Result of the command GetSwVersions. ')
xldv20SucPredecessorSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucPredecessorSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucPredecessorSwVersion.setDescription(' The predecessor Sw version. Result of the command GetSwVersions. ')
xldv20SucPrePredecessorSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucPrePredecessorSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucPrePredecessorSwVersion.setDescription(' The pre predecessor Sw version. Result of the command GetSwVersions. ')
xldv20SucControlReqResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 14), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlReqResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucControlReqResult.setDescription(' The result of the last user command. ')
xldv20SucControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 2, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SucControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SucControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20SwUpgradeTaskTable = MibTable((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3), )
if mibBuilder.loadTexts: xldv20SwUpgradeTaskTable.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SwUpgradeTaskTable.setDescription(' Table of the current active or failed tasks of SW upgrade. Entries for successfull loading tasks are removed from the table. This table is used to display the upgrade status for single plugin units at the TMN. ')
xldv20SutTaskTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1), ).setIndexNames((0, "XLDV20-MIB", "xldv20SutIndex"))
if mibBuilder.loadTexts: xldv20SutTaskTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutTaskTableEntry.setDescription(' Entry of the SW upgrade task table. Notifications : none. ')
xldv20SutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 1), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutIndex.setDescription(' Unique value to identify an entry of this table. ')
xldv20SutPiuType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutPiuType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutPiuType.setDescription(' Indicates the plug-in unit type to be upgraded. ')
xldv20SutHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 3), Unsigned16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutHwUnitIndex.setDescription(' The HwUnitIndex of PIU to be loaded. From this value the TMN calculates the location shelf/slot of the plug-in unit and displays it at the GUI. ')
xldv20SutSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutSwVersion.setDescription(' String containing the APS version which is loaded into the plug-in unit . ')
xldv20SutRequester = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 5), Xldv20Requester()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutRequester.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutRequester.setDescription(' Identifies the requesting unit of the current upgrade task. ')
xldv20SutUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutUpgradeState.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutUpgradeState.setDescription(' Identifies the current processing state of the upgrade task. ')
xldv20SutUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutUpgradeResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutUpgradeResult.setDescription(' This read-only attribute informs about the result of the performes upgrade (in case of failed upgrade the error reason). ')
xldv20SutTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20SutTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20SutTimeStamp.setDescription(' The time stamp of the task. It is updated anytime the upgrade task state changes. ')
xldv20StcSecureTelnetControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 4))
xldv20StcTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 7, 4, 1), Xldv20TelnetAccess()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20StcTelnetAccess.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20StcTelnetAccess.setDescription(' Feature not supported. The access mode of a telnet session. The setting of values read, trace, write will enable a secure telnet session with the corresponding access right. The setting of value noAccess will disable a telnet session. ')
xldv20DbmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1))
xldv20DbmControlReq = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 1), Xldv20ControlReq()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmControlReq.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlReq.setDescription(' The command to store the database (backupDb) into the FEPROM of the DSLAM. The return value commExecStarted indicates the beginning of DB storage. Notifications : xldv20TrDbBackup indicates the end and the result of the database storage. ')
xldv20DbmControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 2), Xldv20ControlStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlStatus.setDescription(' The status of the control request. ')
xldv20DbmControlTimer = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlTimer.setDescription(' The maximum wait time for the manager when a DB storage request cannot be executed immediately (value commExecStarted in the result attribute xldv20DbmControlReqResult). The manager reads this value from the DSLAM. The end of request indicates the trap xldv20TrDbBackup. ')
xldv20DbmBackupPeriod = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmBackupPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmBackupPeriod.setDescription(' Interval between two backup operations in hours. ')
xldv20DbmBackupStartTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmBackupStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmBackupStartTime.setDescription(' Start time of next DB backup in seconds. ')
xldv20DbmControlReqResultLocal = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 6), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlReqResultLocal.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlReqResultLocal.setDescription(' The result of the local backup request. ')
xldv20DbmControlReqResultRemote = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 7), Xldv20ControlReq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlReqResultRemote.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlReqResultRemote.setDescription(' The result of the last remote backup request. ')
xldv20DbmPathAndFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xldv20DbmPathAndFileName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmPathAndFileName.setDescription(' The path and filename (relative to the FTP root) of the DB backup file needed for the remote backup feature. ')
xldv20DbmControlTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 8, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xldv20DbmControlTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20DbmControlTimeStamp.setDescription(' The time stamp of the last command (end of command). ')
xldv20TrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1))
xldv20TvStartupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 1), Xldv20StartupResult())
if mibBuilder.loadTexts: xldv20TvStartupResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStartupResult.setDescription(' Indicates the result at end of startup. ')
xldv20TvStartupType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 2), Xldv20StartupType())
if mibBuilder.loadTexts: xldv20TvStartupType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStartupType.setDescription(' Indicates the kind of performed restart. ')
xldv20TvSnmLctSession = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 3), Xldv20SnmLctSession())
if mibBuilder.loadTexts: xldv20TvSnmLctSession.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSnmLctSession.setDescription(' Indicates the state of a LCT session . ')
xldv20TvRepEntity = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 4), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRepEntity.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRepEntity.setDescription(' The hardware unit index (HWM) or interface index (TLM) or index of COH reporting entities. ')
xldv20TvRepSource = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 5), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvRepSource.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRepSource.setDescription(' Indicates the source of a reporting entity. ')
xldv20TvTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 6), Integer32())
if mibBuilder.loadTexts: xldv20TvTimeAndDate.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvTimeAndDate.setDescription(' The time stamp in seconds. ')
xldv20TvActCcReloadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("notOk", 2), ("lineIndexFaulty", 3))))
if mibBuilder.loadTexts: xldv20TvActCcReloadResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvActCcReloadResult.setDescription(' The result of the cross connection reload. ')
xldv20TvActCcStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 8), Integer32())
if mibBuilder.loadTexts: xldv20TvActCcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvActCcStatus.setDescription(' The index (xldv20ActVpiNni) of faulty cross connect in the table xldv20AtmCrossConnectTable. ')
xldv20TvAlmNatureOfAlarm = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 9), Xldv20TrapIds())
if mibBuilder.loadTexts: xldv20TvAlmNatureOfAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmNatureOfAlarm.setDescription(' The nature of an alarm. Corresponds to xldv20AlarmSevTrapID. ')
xldv20TvAlmSpecProblem = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 10), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmSpecProblem.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmSpecProblem.setDescription(' The specific problem reported by alarming. ')
xldv20TvAlmFailedComponent = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 11), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmFailedComponent.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmFailedComponent.setDescription(' Describes the failed component. ')
xldv20TvAlmSeverityOfFailure = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 12), Xldv20AlarmSeverity())
if mibBuilder.loadTexts: xldv20TvAlmSeverityOfFailure.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmSeverityOfFailure.setDescription(' The severity of the repoprted failure. ')
xldv20TvAlmStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("present", 0), ("cleared", 1))))
if mibBuilder.loadTexts: xldv20TvAlmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmStatus.setDescription(' Flag indicating whether alarm appears or is cleared. ')
xldv20TvAlmPropRepairAction = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 14), Integer32())
if mibBuilder.loadTexts: xldv20TvAlmPropRepairAction.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmPropRepairAction.setDescription(' Indicates proposed repair actions reported by the agent for the problem identified by the alarm. ')
xldv20TvAlmFailedComponentRepSource = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 15), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentRepSource.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentRepSource.setDescription(' Indicates the source of the reporting entity. ')
xldv20TvStcOldAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 16), Xldv20AdminState())
if mibBuilder.loadTexts: xldv20TvStcOldAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcOldAdminStatus.setDescription(' The old administrative status of the entity changing its state. ')
xldv20TvStcNewAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 17), Xldv20AdminState())
if mibBuilder.loadTexts: xldv20TvStcNewAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcNewAdminStatus.setDescription(' The new administrative status of the entity changing its state. ')
xldv20TvStcOldOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 18), Xldv20OperState())
if mibBuilder.loadTexts: xldv20TvStcOldOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcOldOperStatus.setDescription(' The old operational state of the reporting entity. ')
xldv20TvStcNewOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 19), Xldv20OperState())
if mibBuilder.loadTexts: xldv20TvStcNewOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcNewOperStatus.setDescription(' The new operational state of the reporting entity. ')
xldv20TvTsrControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 20), Xldv20ControlStatus())
if mibBuilder.loadTexts: xldv20TvTsrControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvTsrControlStatus.setDescription(' The control status of the test result. ')
xldv20TvRstResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 21), Xldv20RstResult())
if mibBuilder.loadTexts: xldv20TvRstResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRstResult.setDescription(' This value indicates the result of a reset request. ')
xldv20TvRstHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 22), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRstHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRstHwUnitIndex.setDescription(' This value indicates the hardware unit of a reset request. ')
xldv20TvHweResetType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 23), Xldv20StartupType())
if mibBuilder.loadTexts: xldv20TvHweResetType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvHweResetType.setDescription(' The reset type of a hardware event. ')
xldv20TvAdcControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 24), Integer32())
if mibBuilder.loadTexts: xldv20TvAdcControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAdcControlStatus.setDescription(' The result of the changeRate request. ')
xldv20TvSucResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 25), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvSucResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucResult.setDescription(' Result of software upgrade. ')
xldv20TvSucUnit = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvSucUnit.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucUnit.setDescription(' corresponds to the attribute xldSwmUpgradeControl. ')
xldv20TvSucHwUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 27), Unsigned16())
if mibBuilder.loadTexts: xldv20TvSucHwUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucHwUnitIndex.setDescription(' This attribute corresponds to the one in the group xldSwmUpgradeControl. ')
xldv20TvSucVersionNo = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: xldv20TvSucVersionNo.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucVersionNo.setDescription(' This attribute corresponds to the one in the group xldSwmUpgradeControl. Default value: \\0 ')
xldv20TvSucPathName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 150)))
if mibBuilder.loadTexts: xldv20TvSucPathName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucPathName.setDescription(' This attribute corresponds to the one in the group xldSwmUpgradeControl. ')
xldv20TvSucFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)))
if mibBuilder.loadTexts: xldv20TvSucFileName.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSucFileName.setDescription(' This attribute corresponds to the one in the group xldSwmUpgradeControl. ')
xldv20TvDbuSweLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 31), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuSweLogReadResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvDbuSweLogReadResult.setDescription(' The value indicates the read result of the software error log. ')
xldv20TvDbuHwmLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 32), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuHwmLogReadResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvDbuHwmLogReadResult.setDescription(' The value indicates the read result of the hardware maintenance log. ')
xldv20TvDbuSwTraceLogReadResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 33), Xldv20DbuReadStatus())
if mibBuilder.loadTexts: xldv20TvDbuSwTraceLogReadResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvDbuSwTraceLogReadResult.setDescription(' The value indicates the read result of the software trace log. ')
xldv20TvHwUnitType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 34), Xldv20HwUnitType())
if mibBuilder.loadTexts: xldv20TvHwUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvHwUnitType.setDescription(' The type of the created or deleted Hwm object. ')
xldv20TvHwContainingUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 35), Unsigned16())
if mibBuilder.loadTexts: xldv20TvHwContainingUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvHwContainingUnitIndex.setDescription(' HwUnitIndex of the created or deleted Hwm object. ')
xldv20TvHwContainedUnitAddr = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: xldv20TvHwContainedUnitAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvHwContainedUnitAddr.setDescription(' A number of the contained Unit ')
xldv20TvHwuControlResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 37), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvHwuControlResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvHwuControlResult.setDescription(' The result of the request xldv20HwuControlReq. ')
xldv20TvRiRemInvResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 38), Xldv20RiResultType())
if mibBuilder.loadTexts: xldv20TvRiRemInvResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRiRemInvResult.setDescription(' The result of the Remote Inventory Data reading. ')
xldv20TvVersionNrCmuLoad = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvVersionNrCmuLoad.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVersionNrCmuLoad.setDescription(' The version number of the current CI load. ')
xldv20TvBackupResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 40), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvBackupResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvBackupResult.setDescription(' The result of the request xldv20DbmControlReq. ')
xldv20TvVpiNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 41), Integer32())
if mibBuilder.loadTexts: xldv20TvVpiNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpiNni.setDescription(' The VpiNni value of the cross connect. ')
xldv20TvVpiNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 42), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpiNniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpiNniIndex.setDescription(' The index of the cross connect in the ATM cross connect table. ')
xldv20TvVplTerminationPointA = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 43), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTerminationPointA.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVplTerminationPointA.setDescription(' For a point-to-point cross connect this attribute identifies the instance of the VPL termination point that represents the VPL at the LE side. ')
xldv20TvVplTerminationPointZ = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 44), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTerminationPointZ.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVplTerminationPointZ.setDescription(' For a point-to-point cross connect this attribute identifies the instance of the VPL termination point that represents the VPL at the NT side. ')
xldv20TvSnmMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: xldv20TvSnmMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSnmMibVersion.setDescription(' The version number of the current MIB . ')
xldv20TvSnmAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: xldv20TvSnmAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvSnmAgentVersion.setDescription(' The version number of the current Agent SW . ')
xldv20TvVciNni = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 49), Integer32())
if mibBuilder.loadTexts: xldv20TvVciNni.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVciNni.setDescription(' VciNni ')
xldv20TvVciNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 50), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVciNniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVciNniIndex.setDescription(' Index of a VciNni ')
xldv20TvVclTerminationPointA = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 51), Integer32())
if mibBuilder.loadTexts: xldv20TvVclTerminationPointA.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVclTerminationPointA.setDescription(' Index of a Vcl termination point at NNI side. ')
xldv20TvVclTerminationPointZ = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 52), Integer32())
if mibBuilder.loadTexts: xldv20TvVclTerminationPointZ.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVclTerminationPointZ.setDescription(' Index of a Vcl termination point at UNI side. ')
xldv20TvVpcTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 53), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpcTpIndex.setDescription(' Index of a VpcTp ')
xldv20TvVpcNniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 54), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcNniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpcNniIndex.setDescription(' Index of a VpcTp at NNI side . ')
xldv20TvVpcUniIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 55), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVpcUniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpcUniIndex.setDescription(' Index of a VpcTp at UNI side . ')
xldv20TvEthVccTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 56), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthVccTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvEthVccTpIndex.setDescription(' Index of a VccTp . ')
xldv20TvVpiValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 57), Integer32())
if mibBuilder.loadTexts: xldv20TvVpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpiValue.setDescription(' VPI value ')
xldv20TvVciValue = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 58), Unsigned16())
if mibBuilder.loadTexts: xldv20TvVciValue.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVciValue.setDescription(' VCI value ')
xldv20TvVplTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 59), Integer32())
if mibBuilder.loadTexts: xldv20TvVplTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVplTpIndex.setDescription(' Index of a VplTp. ')
xldv20TvVplIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 60), Integer32())
if mibBuilder.loadTexts: xldv20TvVplIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVplIfIndex.setDescription(' IfIndex of PPTP associated to a VplTp. ')
xldv20TvAlmFailedComponentString = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 100)))
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentString.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmFailedComponentString.setDescription(" Up 50 times indeces of VpcTp's or VccTp's. ")
xldv20TvTelnetSession = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 62), Xldv20TvTelnetSessionStatus())
if mibBuilder.loadTexts: xldv20TvTelnetSession.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvTelnetSession.setDescription(' Signalizes the status of a telnet session. ')
xldv20TvEthIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 63), Integer32())
if mibBuilder.loadTexts: xldv20TvEthIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvEthIfIndex.setDescription(' Index of configured Eth Entry. ')
xldv20TvCACProblemType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 64), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvCACProblemType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvCACProblemType.setDescription(' problem type when CAC problem . ')
xldv20TvCACBandwidthUsageUp = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageUp.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageUp.setDescription('used bandwidth in percent of guaranteed bandwidth (without UBR traffic). ')
xldv20TvEthVpcTpIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 66), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthVpcTpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvEthVpcTpIndex.setDescription(' Index of VpcTp at Ethernet port. ')
xldv20TvEthEntryIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 68), Unsigned16())
if mibBuilder.loadTexts: xldv20TvEthEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvEthEntryIndex.setDescription('used within TrVplCcDeletion. ')
xldv20TvRepEntityExt = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 69), Unsigned16())
if mibBuilder.loadTexts: xldv20TvRepEntityExt.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRepEntityExt.setDescription(' The hardware unit index (HWM) or interface index (TLM) or index of COH reporting ext. entities. ')
xldv20TvTelnetSessionUser = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: xldv20TvTelnetSessionUser.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvTelnetSessionUser.setDescription(' The Telnet user name currently logged. ')
xldv20TvIndexSegment = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 71), Unsigned16())
if mibBuilder.loadTexts: xldv20TvIndexSegment.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvIndexSegment.setDescription(' Index of entry in Xldv20ContinuityCheckVpTable or Xldv20ContinuityCheckVcTable for continuity check on segment level. ')
xldv20TvIndexEndToEnd = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 72), Unsigned16())
if mibBuilder.loadTexts: xldv20TvIndexEndToEnd.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvIndexEndToEnd.setDescription(' Index of entry in Xldv20ContinuityCheckVpTable or Xldv20ContinuityCheckVcTable for endToEnd continuity check. ')
xldv20TvRestoreResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 75), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvRestoreResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvRestoreResult.setDescription(' The result of the DB restoration after reload. ')
xldv20TvCACBandwidthUsageDown = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageDown.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvCACBandwidthUsageDown.setDescription('used bandwidth downstream in percent of guaranteed bandwidth. ')
xldv20TvCallpObjectType = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 77), Xldv20RepSource())
if mibBuilder.loadTexts: xldv20TvCallpObjectType.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvCallpObjectType.setDescription(' Specifies the type of COH Object . ')
xldv20TvVpcTpIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9192)))
if mibBuilder.loadTexts: xldv20TvVpcTpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvVpcTpIfIndex.setDescription(' new for V2.0')
xldv20TvAlmSpecProblemText = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)))
if mibBuilder.loadTexts: xldv20TvAlmSpecProblemText.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvAlmSpecProblemText.setDescription(' Textual description of specific problem reported by alarming. ')
xldv20TvImaSetNumResult = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 81), Xldv20ControlReq())
if mibBuilder.loadTexts: xldv20TvImaSetNumResult.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvImaSetNumResult.setDescription(' Result of command imaSetMinNumTxLinks . ')
xldv20TvStcOldAvailStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 82), Xldv20AvailStatus())
if mibBuilder.loadTexts: xldv20TvStcOldAvailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcOldAvailStatus.setDescription(' The old availability state of the reporting entity. ')
xldv20TvStcNewAvailStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 1, 83), Xldv20AvailStatus())
if mibBuilder.loadTexts: xldv20TvStcNewAvailStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xldv20TvStcNewAvailStatus.setDescription(' The new availability state of the reporting entity. ')
xldv20TrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10, 2))
xldv20TrHpExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,1)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrHpExcBER.setDescription(' Excessive bit error rate at high order path. ')
xldv20TrHpUNEQ = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,2)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrHpUNEQ.setDescription(' Unequipped at higher order path. ')
xldv20TrLcd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,3)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLcd.setDescription(' Loss of cell delineation. ')
xldv20TrLof = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,4)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLof.setDescription(' Los of frame. ')
xldv20TrLop = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,5)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLop.setDescription(' Loss of pointer. ')
xldv20TrLos = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,6)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLos.setDescription(' Loss of signal. ')
xldv20TrMsAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,7)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrMsAIS.setDescription(' Alarm indication signal at multiplexer section. ')
xldv20TrMsExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,8)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrMsExcBER.setDescription(' Excessive bit error rate at multiplexer section. ')
xldv20TrMsRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,9)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrMsRDI.setDescription(' Remote defect indication at multiplexer section. ')
xldv20TrMsSD = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,10)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrMsSD.setDescription(' Signal degrade at multiplexer section. ')
xldv20TrPAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,11)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrPAIS.setDescription(' Alarm indication signal at path. ')
xldv20TrPRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,12)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrPRDI.setDescription(' Remote defect indication at path. ')
xldv20TrRsExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,13)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrRsExcBER.setDescription(' Excessive bit error rate at repeater section. ')
xldv20TrSlm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,14)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrSlm.setDescription(' Signal label mismatch. ')
xldv20TrTim = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,15)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrTim.setDescription(' Trace identification mismatch. ')
xldv20TrActFault = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,16)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrActFault.setDescription(' The ADSL C PPTP reports a link activation fault. ')
xldv20TrReplaceableUnitTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,17)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitTypeMismatch.setDescription(' Trap to indicate that a wrong unit is plugged. ')
xldv20TrReplaceableUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,18)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitFailure.setDescription(' Indicates a unit Out Of Service. ')
xldv20TrReplaceableUnitProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,19)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitProblem.setDescription(' Indicates a unit partly Out Of Service. ')
xldv20TrReplaceableUnitNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,20)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitNotInstalled.setDescription(' Indicates that the unit is not plugged. ')
xldv20TrReplaceableUnitSwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,21)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitSwMismatch.setDescription(' The SW version in the inventory data mismatches with the configured version in the equipment holder. ')
xldv20TrReplaceableUnitReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,22)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvHweResetType"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitReset.setDescription(' A replaceable unit is performing a reset. ')
xldv20TrReplaceableUnitResetEnd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,23)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitResetEnd.setDescription(' A replaceable unit finished a reset. ')
xldv20TrStartupEnd = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,24)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvStartupResult"), ("XLDV20-MIB", "xldv20TvStartupType"), ("XLDV20-MIB", "xldv20TvSnmMibVersion"), ("XLDV20-MIB", "xldv20TvSnmAgentVersion"), ("XLDV20-MIB", "xldv20TvVersionNrCmuLoad"))
if mibBuilder.loadTexts: xldv20TrStartupEnd.setDescription(' End of startup. ')
xldv20TrLctSession = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,25)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSnmLctSession"))
if mibBuilder.loadTexts: xldv20TrLctSession.setDescription(' Event concerning a LCT session . ')
xldv20TrSnmAgentRunning = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,26)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSnmMibVersion"), ("XLDV20-MIB", "xldv20TvSnmAgentVersion"))
if mibBuilder.loadTexts: xldv20TrSnmAgentRunning.setDescription(' SNMP agent is active now. ')
xldv20TrRstResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,27)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRstResult"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRstHwUnitIndex"))
if mibBuilder.loadTexts: xldv20TrRstResult.setDescription(' Result of reset. ')
xldv20TrPltTestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,28)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTsrControlStatus"))
if mibBuilder.loadTexts: xldv20TrPltTestResult.setDescription(' Result of loop test. ')
xldv20TrStateChangeAdmin = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,29)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldAdminStatus"), ("XLDV20-MIB", "xldv20TvStcNewAdminStatus"))
if mibBuilder.loadTexts: xldv20TrStateChangeAdmin.setDescription(' The administrative state of the reporting entity has changed. ')
xldv20TrStateChangeOper = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,30)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldOperStatus"), ("XLDV20-MIB", "xldv20TvStcNewOperStatus"))
if mibBuilder.loadTexts: xldv20TrStateChangeOper.setDescription(' The operational state of the reporting entity has changed. ')
xldv20TrChangeRate = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,31)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvAdcControlStatus"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
if mibBuilder.loadTexts: xldv20TrChangeRate.setDescription(' This trap indicates the end of change rate request. ')
xldv20TrCmuReadyForReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,32)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"))
if mibBuilder.loadTexts: xldv20TrCmuReadyForReset.setDescription(' Indicates upgrade end. Unit is ready for reset. ')
xldv20TrAltTestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,33)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTsrControlStatus"))
if mibBuilder.loadTexts: xldv20TrAltTestResult.setDescription(' Result of ATM loop test. ')
xldv20TrActivateLoadResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,34)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"))
if mibBuilder.loadTexts: xldv20TrActivateLoadResult.setDescription(' This trap indicates that a replaceable unit is performing a reset. ')
xldv20TrPuUpgradeSucc = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,35)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
if mibBuilder.loadTexts: xldv20TrPuUpgradeSucc.setDescription(' Upgrade ended successfully. ')
xldv20TrUpgradeCancelled = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,36)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"), ("XLDV20-MIB", "xldv20TvSucResult"))
if mibBuilder.loadTexts: xldv20TrUpgradeCancelled.setDescription(' The upgrade request has been cancelled. ')
xldv20TrFtpError = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,38)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucPathName"), ("XLDV20-MIB", "xldv20TvSucFileName"), ("XLDV20-MIB", "xldv20TvSucResult"))
if mibBuilder.loadTexts: xldv20TrFtpError.setDescription(' Sw upgrade reports a problem with FTP. ')
xldv20TrSweLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,40)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuSweLogReadResult"))
if mibBuilder.loadTexts: xldv20TrSweLogRead.setDescription(' End of SWE log reading. ')
xldv20TrHwmLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,41)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuHwmLogReadResult"))
if mibBuilder.loadTexts: xldv20TrHwmLogRead.setDescription(' End of HWM log reading. ')
xldv20TrTraceLogRead = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,42)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvDbuSwTraceLogReadResult"))
if mibBuilder.loadTexts: xldv20TrTraceLogRead.setDescription(' End of trace log reading. ')
xldv20TrVplCcCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,45)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVpiNniIndex"), ("XLDV20-MIB", "xldv20TvVplTerminationPointA"), ("XLDV20-MIB", "xldv20TvVplTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
if mibBuilder.loadTexts: xldv20TrVplCcCreation.setDescription(' The resulting indeces of a VPC creation command. ')
xldv20TrVplCcDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,46)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVpiNniIndex"), ("XLDV20-MIB", "xldv20TvVplTerminationPointA"), ("XLDV20-MIB", "xldv20TvVplTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
if mibBuilder.loadTexts: xldv20TrVplCcDeletion.setDescription(' The resulting indeces of a VPC deletion command. ')
xldv20TrObjCreate = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,100)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvHwUnitType"), ("XLDV20-MIB", "xldv20TvHwContainingUnitIndex"), ("XLDV20-MIB", "xldv20TvHwContainedUnitAddr"))
if mibBuilder.loadTexts: xldv20TrObjCreate.setDescription(' Create object event. The varBinds xldv20TvHwUnitType and xldv20TvHwContainingUnitIndex only occure when xldv20TvRepSource = hwm. ')
xldv20TrObjDelete = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,101)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvHwUnitType"), ("XLDV20-MIB", "xldv20TvHwContainingUnitIndex"), ("XLDV20-MIB", "xldv20TvHwContainedUnitAddr"))
if mibBuilder.loadTexts: xldv20TrObjDelete.setDescription(' Delete object event. The varBinds xldv20TvHwUnitType and xldv20TvHwContainingUnitIndex only occure when xldv20TvRepSource = hwm. ')
xldv20TrXmissionErr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,105)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrXmissionErr.setDescription(' Transmission Error from LIETH:S. ')
xldv20TrExternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,110)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrExternalAlarm.setDescription(' External alarm. ')
xldv20TrUnitReadyForReset = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,111)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
if mibBuilder.loadTexts: xldv20TrUnitReadyForReset.setDescription(' Indicates upgrade end. Unit is ready for reset. ')
xldv20TrHwuControl = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,112)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvHwuControlResult"))
if mibBuilder.loadTexts: xldv20TrHwuControl.setDescription(' End of xldv20HwuControlReq. ')
xldv20TrReplaceableUnitRemoved = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,113)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitRemoved.setDescription(' Replaceable unit removed. ')
xldv20TrAIS = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,114)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrAIS.setDescription(' Alarm indication signal at E3/DS3. ')
xldv20TrRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,115)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrRDI.setDescription(' Remote defect indication at E3/DS3/dsx1f. ')
xldv20TrPlcpLof = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,116)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrPlcpLof.setDescription(' Loss of Plcp frame at E3/DS3. ')
xldv20TrPlcpRDI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,117)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrPlcpRDI.setDescription(' Plcp Remote defect indication at E3/DS3. ')
xldv20TrRemInvReady = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,118)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRiRemInvResult"))
if mibBuilder.loadTexts: xldv20TrRemInvReady.setDescription(' Remote inventory ready. ')
xldv20TrDbBackup = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,119)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvBackupResult"))
if mibBuilder.loadTexts: xldv20TrDbBackup.setDescription(' Result of Storage of DB. ')
xldv20TrSwVersionSet = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,120)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvRepEntity"))
if mibBuilder.loadTexts: xldv20TrSwVersionSet.setDescription(' Equipment holder data updated. ')
xldv20TrReadSAPSContentFileReady = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,121)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"))
if mibBuilder.loadTexts: xldv20TrReadSAPSContentFileReady.setDescription(' End of SAPS content file reading. ')
xldv20TrReplaceableUnitSwMissing = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,122)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitSwMissing.setDescription(' No SW load found in content file corresponding to mnemo code and FW item number in equipHolder entry. ')
xldv20TrInternalFault = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,123)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrInternalFault.setDescription(' Internal SW/HW fault. ')
xldv20TrVclCcCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,127)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVciNni"), ("XLDV20-MIB", "xldv20TvVciNniIndex"), ("XLDV20-MIB", "xldv20TvVclTerminationPointA"), ("XLDV20-MIB", "xldv20TvVclTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
if mibBuilder.loadTexts: xldv20TrVclCcCreation.setDescription(' The resulting indeces of a VC CC creation command. ')
xldv20TrVclCcDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,128)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiNni"), ("XLDV20-MIB", "xldv20TvVciNni"), ("XLDV20-MIB", "xldv20TvVciNniIndex"), ("XLDV20-MIB", "xldv20TvVclTerminationPointA"), ("XLDV20-MIB", "xldv20TvVclTerminationPointZ"), ("XLDV20-MIB", "xldv20TvEthVpcTpIndex"), ("XLDV20-MIB", "xldv20TvEthVccTpIndex"), ("XLDV20-MIB", "xldv20TvEthEntryIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"))
if mibBuilder.loadTexts: xldv20TrVclCcDeletion.setDescription(' The resulting indeces of a VCL CC deletion command. ')
xldv20TrImmMNR = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,130)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrImmMNR.setDescription(' Immediate Margin Not Reached Fault ')
xldv20TrLpr = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,131)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLpr.setDescription(' Loss of Power (dying gasp) ')
xldv20TrLol = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,132)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLol.setDescription(' Loss of Link (ADC Los without preceding ADR Lpr) ')
xldv20TrAtmLayerMultiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,135)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentString"))
if mibBuilder.loadTexts: xldv20TrAtmLayerMultiAlarm.setDescription(' Atm Layer Multi Alarm ')
xldv20TrTelnetSession = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,136)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvTelnetSession"), ("XLDV20-MIB", "xldv20TvTelnetSessionUser"))
if mibBuilder.loadTexts: xldv20TrTelnetSession.setDescription(' Signalizes an established / stopped telnet session. ')
xldv20TrVplCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,137)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVplIfIndex"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
if mibBuilder.loadTexts: xldv20TrVplCACProblem.setDescription(' Indicates a warning for a resource problem by creating a VplCC. ')
xldv20TrVclCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,139)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVplIfIndex"), ("XLDV20-MIB", "xldv20TvVplTpIndex"), ("XLDV20-MIB", "xldv20TvVciValue"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
if mibBuilder.loadTexts: xldv20TrVclCACProblem.setDescription(' Indicates a warning for a resource problem while creating a VclCC. ')
xldv20TrWrongServiceConfigData = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,141)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrWrongServiceConfigData.setDescription(' Config Adc Rates out of Range for UDSL. ')
xldv20TrReplaceableUnitPlugged = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,142)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitPlugged.setDescription(' Notification: A PIU has been plugged. ')
xldv20TrReplaceableUnitUnplugged = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,143)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"))
if mibBuilder.loadTexts: xldv20TrReplaceableUnitUnplugged.setDescription(' Notification: A PIU has been unplugged. ')
xldv20TrStateChangeOperExt = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,144)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntityExt"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldOperStatus"), ("XLDV20-MIB", "xldv20TvStcNewOperStatus"))
if mibBuilder.loadTexts: xldv20TrStateChangeOperExt.setDescription(' The operational state of the reporting external entity has changed. ')
xldv20TrLOC = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,145)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLOC.setDescription(' Loss of continuity. ')
xldv20TrDbRestore = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,150)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRestoreResult"))
if mibBuilder.loadTexts: xldv20TrDbRestore.setDescription(' DB restoration result. ')
xldv20TrUpgradeEndRequestResult = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,151)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucResult"))
if mibBuilder.loadTexts: xldv20TrUpgradeEndRequestResult.setDescription(' Result of sucUpgrEndRequest command. ')
xldv20TrUnitUpgradeNotRequested = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,152)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvSucUnit"), ("XLDV20-MIB", "xldv20TvSucHwUnitIndex"), ("XLDV20-MIB", "xldv20TvSucVersionNo"))
if mibBuilder.loadTexts: xldv20TrUnitUpgradeNotRequested.setDescription(' Result of sucUpgrEndRequest command. ')
xldv20TrVpcTpCreation = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,400)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIndex"))
if mibBuilder.loadTexts: xldv20TrVpcTpCreation.setDescription(' VpcTp created ')
xldv20TrVpcTpDeletion = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,401)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIndex"))
if mibBuilder.loadTexts: xldv20TrVpcTpDeletion.setDescription(' VpcTp deleted ')
xldv20TrVpcTpCACProblem = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,402)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvVpiValue"), ("XLDV20-MIB", "xldv20TvVpcTpIfIndex"), ("XLDV20-MIB", "xldv20TvCACProblemType"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageUp"), ("XLDV20-MIB", "xldv20TvCACBandwidthUsageDown"))
if mibBuilder.loadTexts: xldv20TrVpcTpCACProblem.setDescription(' Indicates a warning for a resource problem while creating a VpcTP ')
xldv20TrContinuityCheckVpEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,403)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
if mibBuilder.loadTexts: xldv20TrContinuityCheckVpEntryCreated.setDescription(' Xldv20ContinuityCheckVpEntry created . ')
xldv20TrContinuityCheckVpEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,404)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
if mibBuilder.loadTexts: xldv20TrContinuityCheckVpEntryDeleted.setDescription(' Xldv20ContinuityCheckVpEntry deleted . ')
xldv20TrContinuityCheckVcEntryCreated = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,405)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
if mibBuilder.loadTexts: xldv20TrContinuityCheckVcEntryCreated.setDescription(' Xldv20ContinuityCheckVcEntry created . ')
xldv20TrContinuityCheckVcEntryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,406)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvCallpObjectType"), ("XLDV20-MIB", "xldv20TvIndexSegment"), ("XLDV20-MIB", "xldv20TvIndexEndToEnd"))
if mibBuilder.loadTexts: xldv20TrContinuityCheckVcEntryDeleted.setDescription(' Xldv20ContinuityCheckVcEntry deleted . ')
xldv20TrExcBER = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,407)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrExcBER.setDescription(' Excessive Bit Error Ratio at near-end dsx1 PPTP. ')
xldv20TrLif = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,408)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLif.setDescription(' Loss of IMA frame at near-end dsx1 PPTP. ')
xldv20TrLods = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,409)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrLods.setDescription(' Link out of Delay Sychronisation at near-end dsx1 PPTP. ')
xldv20TrTxUnusableFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,410)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrTxUnusableFe.setDescription(' Tx is unusable at far-end dsx1 PPTP. ')
xldv20TrRxUnusableFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,411)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrRxUnusableFe.setDescription(' Rx is unusable at far-end dsx1 PPTP. ')
xldv20TrRfiIma = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,412)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrRfiIma.setDescription(' Remote failure indication defect at far-end dsx1 PPTP. ')
xldv20TrRAI = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,413)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrRAI.setDescription(' Far-end ds1 IMA PPTP reports remote alarm indication. ')
xldv20TrStartUpFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,450)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrStartUpFe.setDescription(" IMA group isn't able to finish startup at far-end. ")
xldv20TrConfigAbort = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,451)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrConfigAbort.setDescription(' Far-end tries to use unacceptable configuration parameter. ')
xldv20TrConfigAbortFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,452)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrConfigAbortFe.setDescription(' Far-end reports unacceptable configuration parameters. ')
xldv20TrInsufficientLinks = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,453)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrInsufficientLinks.setDescription(' IMA group reports less than minimum number of links are active (detected on far-end). ')
xldv20TrInsufficientLinksFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,454)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrInsufficientLinksFe.setDescription(' Less than minimum number of links are active for IMA group (detected on far-end). ')
xldv20TrBlockedFe = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,455)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvAlmSpecProblem"), ("XLDV20-MIB", "xldv20TvAlmNatureOfAlarm"), ("XLDV20-MIB", "xldv20TvAlmFailedComponent"), ("XLDV20-MIB", "xldv20TvAlmFailedComponentRepSource"), ("XLDV20-MIB", "xldv20TvAlmSeverityOfFailure"), ("XLDV20-MIB", "xldv20TvAlmStatus"), ("XLDV20-MIB", "xldv20TvAlmPropRepairAction"), ("XLDV20-MIB", "xldv20TvAlmSpecProblemText"))
if mibBuilder.loadTexts: xldv20TrBlockedFe.setDescription(' Far-end reports that it is blocked. ')
xldv20TrImaMinNumOfLinks = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,456)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvImaSetNumResult"))
if mibBuilder.loadTexts: xldv20TrImaMinNumOfLinks.setDescription(' Result of imaSetMinNumTxLinks command . ')
xldv20TrStateChangeAvail = NotificationType((1, 3, 6, 1, 4, 1, 231, 7, 1, 2, 1, 1, 4, 10) + (0,457)).setObjects(("XLDV20-MIB", "xldv20TvTimeAndDate"), ("XLDV20-MIB", "xldv20TvRepEntity"), ("XLDV20-MIB", "xldv20TvRepSource"), ("XLDV20-MIB", "xldv20TvStcOldAvailStatus"), ("XLDV20-MIB", "xldv20TvStcNewAvailStatus"))
if mibBuilder.loadTexts: xldv20TrStateChangeAvail.setDescription(' The availablity state of the reporting entity has changed. ')
mibBuilder.exportSymbols("XLDV20-MIB", xldv20AdcControl=xldv20AdcControl, xldv20AdcFirstUsedSubCarrierDownstream=xldv20AdcFirstUsedSubCarrierDownstream, xldv20AccVpiNniIndex=xldv20AccVpiNniIndex, xldv20AlmSevProfileIndex=xldv20AlmSevProfileIndex, xldv20TrExcBER=xldv20TrExcBER, xldv20VcxAlarmState=xldv20VcxAlarmState, xldv20TrRsExcBER=xldv20TrRsExcBER, DisplayString=DisplayString, xldv20Ds3NePPTPTable=xldv20Ds3NePPTPTable, xldv20InbandVpiCurrent=xldv20InbandVpiCurrent, xldv20AdcCtrlControlTimeStamp=xldv20AdcCtrlControlTimeStamp, Xldv20EqhType=Xldv20EqhType, xldv20ImaControlReq=xldv20ImaControlReq, xldv20MlbEntry=xldv20MlbEntry, xldv20TvStcOldOperStatus=xldv20TvStcOldOperStatus, xldv20IfHwPortId=xldv20IfHwPortId, xldv20TrInsufficientLinksFe=xldv20TrInsufficientLinksFe, xldv20ActMaximumBurstSizeDownstream=xldv20ActMaximumBurstSizeDownstream, xldv20VccCvcIndexEndToEnd=xldv20VccCvcIndexEndToEnd, xldv20InbandVpiConfig=xldv20InbandVpiConfig, xldv20HwuPiuType=xldv20HwuPiuType, xldv20ImaGroupTable=xldv20ImaGroupTable, xldv20AlarmSeverityProfileTable=xldv20AlarmSeverityProfileTable, xldv20CvcOperationalState=xldv20CvcOperationalState, xldv20SucVersionNo=xldv20SucVersionNo, xldv20SdcMinMarginUpCfg=xldv20SdcMinMarginUpCfg, xldv20ActTestTypeUni=xldv20ActTestTypeUni, xldv20TrConfigAbort=xldv20TrConfigAbort, Xldv20StartupResult=Xldv20StartupResult, xldv20TvSucResult=xldv20TvSucResult, xldv20HwPlugInUnitTable=xldv20HwPlugInUnitTable, xldv20SdcAttenuationUp=xldv20SdcAttenuationUp, xldv20HwuContainingUnitIndex=xldv20HwuContainingUnitIndex, Xldv20XdslServiceTypeCurrent=Xldv20XdslServiceTypeCurrent, xldv20TrStateChangeAdmin=xldv20TrStateChangeAdmin, xldv20HwuControl=xldv20HwuControl, xldv20DbuControlTimeStamp=xldv20DbuControlTimeStamp, Xldv20EthNtMode=Xldv20EthNtMode, xldv20CocControlReqResult=xldv20CocControlReqResult, xldv20HwuControlTimer=xldv20HwuControlTimer, xldv20MultipleLoopbackResultTable=xldv20MultipleLoopbackResultTable, xldv20AlarmSeverityEntry=xldv20AlarmSeverityEntry, xldv20TvImaSetNumResult=xldv20TvImaSetNumResult, xldv20LbpEntry=xldv20LbpEntry, xldv20AltOamLevel=xldv20AltOamLevel, xldv20S3nHpEberThreshold=xldv20S3nHpEberThreshold, xldv20EthIpAddressRemoteRouter=xldv20EthIpAddressRemoteRouter, xldv20TrLop=xldv20TrLop, xldv20ActSustainableCellRateUpstream=xldv20ActSustainableCellRateUpstream, xldv20ImaLinkNeRxUnusableSecs=xldv20ImaLinkNeRxUnusableSecs, xldv20VccAlarmFilteringIndex=xldv20VccAlarmFilteringIndex, Xldv20AdslOutputPower=Xldv20AdslOutputPower, xldv20TrStateChangeOperExt=xldv20TrStateChangeOperExt, xldv20VcxIndex=xldv20VcxIndex, xldv20RiControlTimeStamp=xldv20RiControlTimeStamp, xldv20Dsx1TransmitClockSource=xldv20Dsx1TransmitClockSource, xldv20ImaGroupGammaValue=xldv20ImaGroupGammaValue, Xldv20ControlReq=Xldv20ControlReq, Xldv20TimeZone=Xldv20TimeZone, xldv20S1nEmptyCellType=xldv20S1nEmptyCellType, xldv20VclMaximumBurstSizeUpstream=xldv20VclMaximumBurstSizeUpstream, Xldv20AdcTrainingMode=Xldv20AdcTrainingMode, xldv20NeExternalTime45020=xldv20NeExternalTime45020, xldv20TvDbuSweLogReadResult=xldv20TvDbuSweLogReadResult, xldv20RstControlReqResult=xldv20RstControlReqResult, xldv20IbmVpAISFiltering=xldv20IbmVpAISFiltering, xldv20S3nPathTraceSendCRCActivate=xldv20S3nPathTraceSendCRCActivate, xldv20VclSustainableCellRateDownstream=xldv20VclSustainableCellRateDownstream, xldv20EthE164Isp=xldv20EthE164Isp, xldv20ActEndpointTypeUni=xldv20ActEndpointTypeUni, xldv20VplConnectivityPointer=xldv20VplConnectivityPointer, xldv20S1nPathTraceReceive=xldv20S1nPathTraceReceive, xldv20ImaLinkFeRxUnusableSecs=xldv20ImaLinkFeRxUnusableSecs, Xldv20AdslDataRateDownCurrent=Xldv20AdslDataRateDownCurrent, xldv20ActMaximumBurstSizeUpstream=xldv20ActMaximumBurstSizeUpstream, xldv20VpcPeakCellRateDownstream=xldv20VpcPeakCellRateDownstream, xldv20SdcXdslServiceTypeCfg=xldv20SdcXdslServiceTypeCfg, xldv20PhyLoopTest=xldv20PhyLoopTest, xldv20VclMaximumBurstSizeDownstream=xldv20VclMaximumBurstSizeDownstream, xldv20SucControlTimeStamp=xldv20SucControlTimeStamp, xldv20VclVpiValue=xldv20VclVpiValue, xldv20SdcLinkState=xldv20SdcLinkState, xldv20Dbm=xldv20Dbm, xldv20TvVclTerminationPointA=xldv20TvVclTerminationPointA, xldv20VdcPowerAdaptationCfg=xldv20VdcPowerAdaptationCfg, xldv20DbuResultFilePath=xldv20DbuResultFilePath, xldv20TrMsSD=xldv20TrMsSD, xldv20TrHpExcBER=xldv20TrHpExcBER, xldv20Dsx1LineCoding=xldv20Dsx1LineCoding, xldv20DbuNumEntries=xldv20DbuNumEntries, xldv20TrRAI=xldv20TrRAI, xldv20TvTelnetSession=xldv20TvTelnetSession, xldv20VpcTpEntry=xldv20VpcTpEntry, xldv20DbuLogType=xldv20DbuLogType, xldv20S1nSDThreshold=xldv20S1nSDThreshold, xldv20AccAdminState=xldv20AccAdminState, xldv20TrActFault=xldv20TrActFault, Xldv20IfType=Xldv20IfType, xldv20SdcRate=xldv20SdcRate, xldv20TvAlmSpecProblemText=xldv20TvAlmSpecProblemText, xldv20S1nHpEberThreshold=xldv20S1nHpEberThreshold, xldv20AltControlTimer=xldv20AltControlTimer, xldv20AdcCtrlControlReq=xldv20AdcCtrlControlReq, xldv20ImaGroupSymmetry=xldv20ImaGroupSymmetry, xldv20RiControlStatus=xldv20RiControlStatus, xldv20AtmCrossConnectTable=xldv20AtmCrossConnectTable, xldv20VpcTpTable=xldv20VpcTpTable, xldv20ImaGroupNeTxClkMode=xldv20ImaGroupNeTxClkMode, xldv20TrImmMNR=xldv20TrImmMNR, xldv20VpcSustainableCellRateUpstream=xldv20VpcSustainableCellRateUpstream, xldv20TrTelnetSession=xldv20TrTelnetSession, xldv20RiControlTimer=xldv20RiControlTimer, xldv20TmnEntry=xldv20TmnEntry, xldv20VplAlarmFilteringIndex=xldv20VplAlarmFilteringIndex, xldv20VdcVdslModeCfg=xldv20VdcVdslModeCfg, xldv20VplTrafficDirection=xldv20VplTrafficDirection, xldv20VccAlarmSeverityIndex=xldv20VccAlarmSeverityIndex, xldv20AdcAISOnLOS=xldv20AdcAISOnLOS, xldv20Stm1NePPTPTable=xldv20Stm1NePPTPTable, xldv20VcxTerminationPointA=xldv20VcxTerminationPointA, xldv20AdcCtrlControlReqResult=xldv20AdcCtrlControlReqResult, xldv20RemoteInventory=xldv20RemoteInventory, xldv20TrVclCcDeletion=xldv20TrVclCcDeletion, xldv20TmnLctSessionPollingFlag=xldv20TmnLctSessionPollingFlag, xldv20ImaGroupFeState=xldv20ImaGroupFeState, xldv20TrAtmLayerMultiAlarm=xldv20TrAtmLayerMultiAlarm, xldv20TrVplCACProblem=xldv20TrVplCACProblem, xldv20ImaControlMinNumLinks=xldv20ImaControlMinNumLinks, xldv20VpcNumberOfVcs=xldv20VpcNumberOfVcs, xldv20S3nPathTraceReceiveCRCActivate=xldv20S3nPathTraceReceiveCRCActivate, xldv20VcxOperationalState=xldv20VcxOperationalState, xldv20ImaLinkFeRxNumFailures=xldv20ImaLinkFeRxNumFailures, xldv20TrObjCreate=xldv20TrObjCreate, xldv20ActEndpointTypeNni=xldv20ActEndpointTypeNni, xldv20ActEthIpAddressSubnetMaskNt=xldv20ActEthIpAddressSubnetMaskNt, xldv20ActEthE164Isp=xldv20ActEthE164Isp, xldv20SdcPPTPEntry=xldv20SdcPPTPEntry, xldv20IfTable=xldv20IfTable, xldv20S3nPathTraceExpect=xldv20S3nPathTraceExpect, xldv20TrVplCcCreation=xldv20TrVplCcCreation, xldv20VclPeakCellRateDownstream=xldv20VclPeakCellRateDownstream, xldv20VpcAtmfVplIndex=xldv20VpcAtmfVplIndex, Xldv20ImaGroupState=Xldv20ImaGroupState, Xldv20AdslDataRateUpCurrent=Xldv20AdslDataRateUpCurrent, xldv20VdcControl=xldv20VdcControl, xldv20VpcAlarmSeverityIndex=xldv20VpcAlarmSeverityIndex, xldv20E3nCodingType=xldv20E3nCodingType, xldv20AltControlReq=xldv20AltControlReq, Xldv20ControlStatus=Xldv20ControlStatus, xldv20AltVpi=xldv20AltVpi, xldv20TvBackupResult=xldv20TvBackupResult, xldv20TvIndexSegment=xldv20TvIndexSegment, xldv20TvVclTerminationPointZ=xldv20TvVclTerminationPointZ, xldv20TrReplaceableUnitSwMismatch=xldv20TrReplaceableUnitSwMismatch, xldv20PltIfIndex=xldv20PltIfIndex, xldv20TrDbRestore=xldv20TrDbRestore, xldv20TrReplaceableUnitResetEnd=xldv20TrReplaceableUnitResetEnd, xldv20Hwm=xldv20Hwm, xldv20RiResultFilePath=xldv20RiResultFilePath, xldv20Dsx1Fdl=xldv20Dsx1Fdl, xldv20TrStartUpFe=xldv20TrStartUpFe, xldv20HwuContainedUnitAddr=xldv20HwuContainedUnitAddr, xldv20AdcCtrlMarginUp=xldv20AdcCtrlMarginUp, xldv20TrReplaceableUnitNotInstalled=xldv20TrReplaceableUnitNotInstalled, xldv20AdcCtrlMinMarginDn=xldv20AdcCtrlMinMarginDn, xldv20E3nTrailTraceSend=xldv20E3nTrailTraceSend, xldv20ActMaxVciValue=xldv20ActMaxVciValue, xldv20AltFlowDirection=xldv20AltFlowDirection, xldv20VclTrafficDirection=xldv20VclTrafficDirection, xldv20S3nSignalLabelReceive=xldv20S3nSignalLabelReceive, xldv20TrTim=xldv20TrTim, xldv20VdcCtrlPsdMask=xldv20VdcCtrlPsdMask, xldv20E3nTrailTraceTIMDetectionActivate=xldv20E3nTrailTraceTIMDetectionActivate, xldv20ImaGroupTxTimingRefLink=xldv20ImaGroupTxTimingRefLink, xldv20ActControlTimeStamp=xldv20ActControlTimeStamp, xldv20ImaGroupRowStatus=xldv20ImaGroupRowStatus, xldv20ExtAlarmAdminState=xldv20ExtAlarmAdminState, xldv20AdcPPTPTable=xldv20AdcPPTPTable, xldv20TrVpcTpCACProblem=xldv20TrVpcTpCACProblem, xldv20CvpOperationalState=xldv20CvpOperationalState, xldv20VclSegmentEndPoint=xldv20VclSegmentEndPoint, xldv20TvTimeAndDate=xldv20TvTimeAndDate, xldv20VdcMinRateUpCfg=xldv20VdcMinRateUpCfg, xldv20TvVpcTpIfIndex=xldv20TvVpcTpIfIndex, xldv20AdcLatencyUpCfg=xldv20AdcLatencyUpCfg, xldv20ImaLinkNeTxUnusableSecs=xldv20ImaLinkNeTxUnusableSecs, xldv20ImaGroupLastChange=xldv20ImaGroupLastChange, xldv20HwuControlStatus=xldv20HwuControlStatus, xldv20VpcMaximumBurstSizeUpstream=xldv20VpcMaximumBurstSizeUpstream, xldv20TvStartupResult=xldv20TvStartupResult, xldv20SdcMarginDn=xldv20SdcMarginDn, xldv20SnmLctSessionPollingFlag=xldv20SnmLctSessionPollingFlag, xldv20AlarmListTable=xldv20AlarmListTable, xldv20TvVersionNrCmuLoad=xldv20TvVersionNrCmuLoad, Xldv20Requester=Xldv20Requester, xldv20TrapVars=xldv20TrapVars, xldv20PltControlTimer=xldv20PltControlTimer, xldv20IfIndex=xldv20IfIndex, xldv20ExtAlarmSeverityIndex=xldv20ExtAlarmSeverityIndex, xldv20ImaGroupFeTxClkMode=xldv20ImaGroupFeTxClkMode, Xldv20AlmFiltProfileIndex=Xldv20AlmFiltProfileIndex, xldv20TrHpUNEQ=xldv20TrHpUNEQ, xldv20TvAlmStatus=xldv20TvAlmStatus, xldv20VplVbrCDVTDownstream=xldv20VplVbrCDVTDownstream, xldv20VcCrossConnectTable=xldv20VcCrossConnectTable, Xldv20VdcPsdMask=Xldv20VdcPsdMask, xldv20AlmFiltTrapId=xldv20AlmFiltTrapId, xldv20TrPlcpLof=xldv20TrPlcpLof, xldv20TvActCcReloadResult=xldv20TvActCcReloadResult, xldv20AltIfIndex=xldv20AltIfIndex, xldv20TrLol=xldv20TrLol, xldv20TvStcOldAvailStatus=xldv20TvStcOldAvailStatus, xldv20SnmTmnTrapFlowControl=xldv20SnmTmnTrapFlowControl, xldv20VccHwUnitIndex=xldv20VccHwUnitIndex, xldv20SdcCtrlControlReq=xldv20SdcCtrlControlReq, xldv20AdcPPTPEntry=xldv20AdcPPTPEntry, xldv20AltLoopLocId=xldv20AltLoopLocId, xldv20AltVci=xldv20AltVci, xldv20VpcOperationalState=xldv20VpcOperationalState, xldv20VplSustainableCellRateUpstream=xldv20VplSustainableCellRateUpstream, xldv20SutUpgradeState=xldv20SutUpgradeState, xldv20S1nLineType=xldv20S1nLineType, xldv20Ds3NePPTPEntry=xldv20Ds3NePPTPEntry, xldv20AccEthVccIndex=xldv20AccEthVccIndex, Xldv20ImaFrameLength=Xldv20ImaFrameLength, xldv20ImaGroupMappingEntry=xldv20ImaGroupMappingEntry, xldv20ActOperationalState=xldv20ActOperationalState, xldv20AccTerminationPointZ=xldv20AccTerminationPointZ, xldv20VdcCtrlControlReq=xldv20VdcCtrlControlReq, Xldv20ImaLinkState=Xldv20ImaLinkState, xldv20TrSweLogRead=xldv20TrSweLogRead, xldv20HwEquipEntry=xldv20HwEquipEntry, xldv20TrUnitUpgradeNotRequested=xldv20TrUnitUpgradeNotRequested, Xldv20ImaGroupSymmetry=Xldv20ImaGroupSymmetry, xldv20VplVbrCDVTUpstream=xldv20VplVbrCDVTUpstream, xldv20EthIpAddressSubnetMaskCo=xldv20EthIpAddressSubnetMaskCo, xldv20IfOperState=xldv20IfOperState, xldv20VccVpcIndex=xldv20VccVpcIndex, xldv20AlmSpecProblemText=xldv20AlmSpecProblemText, xldv20SnmpMgmt=xldv20SnmpMgmt, Xldv20EndpointType=Xldv20EndpointType, xldv20AlmFailedComponentRepSource=xldv20AlmFailedComponentRepSource, xldv20ImaLinkTable=xldv20ImaLinkTable, xldv20ImaControlTimeStamp=xldv20ImaControlTimeStamp, xldv20VcxTerminationPointZ=xldv20VcxTerminationPointZ, xldv20VcxVpcNniIndex=xldv20VcxVpcNniIndex, Xldv20TestType=Xldv20TestType, xldv20HwuEqhType=xldv20HwuEqhType, xldv20ActControlReqResult=xldv20ActControlReqResult, xldv20TvSnmMibVersion=xldv20TvSnmMibVersion, xldv20TrMsExcBER=xldv20TrMsExcBER, xldv20AlmFiltProfileRowStatus=xldv20AlmFiltProfileRowStatus, xldv20TrUnitReadyForReset=xldv20TrUnitReadyForReset, xldv20VdcCtrlMinRateDn=xldv20VdcCtrlMinRateDn)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20ImaControlReqResult=xldv20ImaControlReqResult, xldv20VclVpcIndex=xldv20VclVpcIndex, xldv20AdcMaxRateUpCfg=xldv20AdcMaxRateUpCfg, xldv20VclIndex=xldv20VclIndex, xldv20VccRDIAlarm=xldv20VccRDIAlarm, xldv20AlarmFilteringProfileTable=xldv20AlarmFilteringProfileTable, xldv20VdcRateUp=xldv20VdcRateUp, xldv20ImaGroupTxFrameLength=xldv20ImaGroupTxFrameLength, xldv20TrReplaceableUnitUnplugged=xldv20TrReplaceableUnitUnplugged, xldv20HwUnitTable=xldv20HwUnitTable, xldv20TvStcNewOperStatus=xldv20TvStcNewOperStatus, xldv20VdcPPTPEntry=xldv20VdcPPTPEntry, xldv20TvEthEntryIndex=xldv20TvEthEntryIndex, xldv20ImaControl=xldv20ImaControl, xldv20VplPeakCellRateDownstream=xldv20VplPeakCellRateDownstream, xldv20ImaLinkRxLid=xldv20ImaLinkRxLid, Xldv20VdcPowerBoostAdaptationType=Xldv20VdcPowerBoostAdaptationType, xldv20NeExternalTime=xldv20NeExternalTime, xldv20SnmControlTimeStamp=xldv20SnmControlTimeStamp, xldv20RiControlReqResult=xldv20RiControlReqResult, MilliSeconds=MilliSeconds, xldv20ImaGroupNumTxActLinks=xldv20ImaGroupNumTxActLinks, xldv20TvEthVpcTpIndex=xldv20TvEthVpcTpIndex, xldv20InbandVciConfig=xldv20InbandVciConfig, xldv20AdcCtrlMinRateUp=xldv20AdcCtrlMinRateUp, xldv20VdcAttenuationDn=xldv20VdcAttenuationDn, xldv20ImaControlGroupIndex=xldv20ImaControlGroupIndex, xldv20ImaGroupNumRxCfgLinks=xldv20ImaGroupNumRxCfgLinks, xldv20RstControlReq=xldv20RstControlReq, xldv20DbuControlReq=xldv20DbuControlReq, Xldv20DbuReadStatus=Xldv20DbuReadStatus, Xldv20VdcRateUp=Xldv20VdcRateUp, xldv20VpcTrafficDirection=xldv20VpcTrafficDirection, xldv20AdcMarginUpCfg=xldv20AdcMarginUpCfg, xldv20ImaLinkImaViolations=xldv20ImaLinkImaViolations, xldv20ExternalAlarmEntry=xldv20ExternalAlarmEntry, xldv20SucPrePredecessorSwVersion=xldv20SucPrePredecessorSwVersion, xldv20ImaGroupDiffDelayMaxObs=xldv20ImaGroupDiffDelayMaxObs, xldv20SnmControlReqResult=xldv20SnmControlReqResult, xldv20TrFtpError=xldv20TrFtpError, xldv20S1nSignalLabelReceive=xldv20S1nSignalLabelReceive, xldv20AlmSevTrapId=xldv20AlmSevTrapId, Xldv20AdslMinMargin=Xldv20AdslMinMargin, xldv20ImaGroupEntry=xldv20ImaGroupEntry, xldv20CocObjectType=xldv20CocObjectType, xldv20TrChangeRate=xldv20TrChangeRate, xldv20ImaLinkNeRxFailureStatus=xldv20ImaLinkNeRxFailureStatus, xldv20ImaLinkRxStuffs=xldv20ImaLinkRxStuffs, xldv20RiHwUnitIndex=xldv20RiHwUnitIndex, xldv20AdcMarginDn=xldv20AdcMarginDn, xldv20TvStcOldAdminStatus=xldv20TvStcOldAdminStatus, xldv20TvSucHwUnitIndex=xldv20TvSucHwUnitIndex, xldv20ActTrafficDirection=xldv20ActTrafficDirection, xldv20HwUnitMappingEntry=xldv20HwUnitMappingEntry, xldv20ActControlStatus=xldv20ActControlStatus, xldv20ImaGroupIndex=xldv20ImaGroupIndex, xldv20TrLif=xldv20TrLif, xldv20AdcMinRateDnCfg=xldv20AdcMinRateDnCfg, xldv20ImaGroupNeState=xldv20ImaGroupNeState, Xldv20TelnetAccess=Xldv20TelnetAccess, xldv20D3nEmptyCellType=xldv20D3nEmptyCellType, xldv20ActVbrCDVTDownstream=xldv20ActVbrCDVTDownstream, xldv20AdcCtrlIfIndex=xldv20AdcCtrlIfIndex, Unsigned16=Unsigned16, xldv20D3nType=xldv20D3nType, xldv20ImaGroupIfIndex=xldv20ImaGroupIfIndex, xldv20AdcFirstUsedSubCarrierUpstream=xldv20AdcFirstUsedSubCarrierUpstream, xldv20VdcAttenuationUp=xldv20VdcAttenuationUp, xldv20ActContinuityCheckNni=xldv20ActContinuityCheckNni, Xldv20TrafficType=Xldv20TrafficType, xldv20VdcCtrlControlReqResult=xldv20VdcCtrlControlReqResult, xldv20StcSecureTelnetControl=xldv20StcSecureTelnetControl, xldv20AdcCtrlXdslServiceType=xldv20AdcCtrlXdslServiceType, xldv20VplPeakCellRateUpstream=xldv20VplPeakCellRateUpstream, xldv20SnmLctConnected=xldv20SnmLctConnected, xldv20HwmIfIndex=xldv20HwmIfIndex, xldv20ExternalAlarmsTable=xldv20ExternalAlarmsTable, xldv20ExtAlarmFilteringIndex=xldv20ExtAlarmFilteringIndex, xldv20SucDefaultSwVersion=xldv20SucDefaultSwVersion, xldv20TrMsAIS=xldv20TrMsAIS, xldv20TrContinuityCheckVcEntryDeleted=xldv20TrContinuityCheckVcEntryDeleted, xldv20ActControlReq=xldv20ActControlReq, xldv20VdcCtrlPowerAdaptation=xldv20VdcCtrlPowerAdaptation, xldv20ImaLinkNeRxNumFailures=xldv20ImaLinkNeRxNumFailures, xldv20E3nType=xldv20E3nType, xldv20EthMode=xldv20EthMode, xldv20ActContinuityCheckUni=xldv20ActContinuityCheckUni, xldv20VclPeakCellRateUpstream=xldv20VclPeakCellRateUpstream, xldv20TrReplaceableUnitSwMissing=xldv20TrReplaceableUnitSwMissing, xldv20ImaGroupRunningSecs=xldv20ImaGroupRunningSecs, xldv20CocTestType=xldv20CocTestType, xldv20AlmSpecProblem=xldv20AlmSpecProblem, xldv20EqhMnemoCode=xldv20EqhMnemoCode, xldv20VdcCtrlControlTimeStamp=xldv20VdcCtrlControlTimeStamp, xldv20S1nPathTraceSend=xldv20S1nPathTraceSend, xldv20TrVclCACProblem=xldv20TrVclCACProblem, xldv20ContinuityCheckVpTable=xldv20ContinuityCheckVpTable, Xldv20ImaGroupFailureStatus=Xldv20ImaGroupFailureStatus, xldv20ActSegmentEndPointNni=xldv20ActSegmentEndPointNni, xldv20EquLocation=xldv20EquLocation, xldv20SutPiuType=xldv20SutPiuType, xldv20AdcRateUp=xldv20AdcRateUp, xldv20TrContinuityCheckVcEntryCreated=xldv20TrContinuityCheckVcEntryCreated, xldv20EqhAccPiuTypes=xldv20EqhAccPiuTypes, xldv20HwContainingUnitIndex=xldv20HwContainingUnitIndex, xldv20AlarmFilteringEntry=xldv20AlarmFilteringEntry, xldv20AlmRepSource=xldv20AlmRepSource, xldv20ActCellDelayVariationToleranceDownstream=xldv20ActCellDelayVariationToleranceDownstream, xldv20SdcCtrlRate=xldv20SdcCtrlRate, xldv20DbuHwUnitIndex=xldv20DbuHwUnitIndex, xldv20TvVpcTpIndex=xldv20TvVpcTpIndex, Xldv20ChannelType=Xldv20ChannelType, xldv20DbmBackupStartTime=xldv20DbmBackupStartTime, xldv20TlmIma=xldv20TlmIma, xldv20EthIpAddressNt=xldv20EthIpAddressNt, xldv20ExtAlarmIndex=xldv20ExtAlarmIndex, xldv20TvSucFileName=xldv20TvSucFileName, xldv20DbmControlReq=xldv20DbmControlReq, xldv20AtmLoopTest=xldv20AtmLoopTest, xldv20TvDbuSwTraceLogReadResult=xldv20TvDbuSwTraceLogReadResult, Xldv20VdcLatencyDn=Xldv20VdcLatencyDn, xldv20RiControlReq=xldv20RiControlReq, xldv20AdcCtrlLatencyDn=xldv20AdcCtrlLatencyDn, Xldv20OperState=Xldv20OperState, Xldv20XdslServiceType=Xldv20XdslServiceType, xldv20ContinuityCheckControl=xldv20ContinuityCheckControl, xldv20HwuControlTimeStamp=xldv20HwuControlTimeStamp, xldv20EthernetConfigEntry=xldv20EthernetConfigEntry, xldv20TvRepEntityExt=xldv20TvRepEntityExt, xldv20IfType=xldv20IfType, xldv20S1nMsEberThreshold=xldv20S1nMsEberThreshold, xldv20VpcMaximumBurstSizeDownstream=xldv20VpcMaximumBurstSizeDownstream, xldv20EqhSlotStatus=xldv20EqhSlotStatus, xldv20AtmCrossConnectEntry=xldv20AtmCrossConnectEntry, xldv20AdcCtrlTrainingMode=xldv20AdcCtrlTrainingMode, xldv20VpcSustainableCellRateDownstream=xldv20VpcSustainableCellRateDownstream, xldv20DbmControlTimeStamp=xldv20DbmControlTimeStamp, xldv20VclSustainableCellRateUpstream=xldv20VclSustainableCellRateUpstream, xldv20TrLos=xldv20TrLos, xldv20PltControlReq=xldv20PltControlReq, xldv20Reset=xldv20Reset, xldv20DbuControlStatus=xldv20DbuControlStatus, xldv20EquConnectedPiuPort=xldv20EquConnectedPiuPort, Xldv20RepSource=Xldv20RepSource, xldv20SnmControlStatus=xldv20SnmControlStatus, xldv20ImaGroupMappingIndex=xldv20ImaGroupMappingIndex, xldv20TvHwContainingUnitIndex=xldv20TvHwContainingUnitIndex, xldv20VclIfIndex=xldv20VclIfIndex, xldv20TvSucPathName=xldv20TvSucPathName, xldv20SwUpgradeTaskTable=xldv20SwUpgradeTaskTable, xldv20ActSegmentEndPointNt=xldv20ActSegmentEndPointNt, xldv20AdcTransceiverOutputPower=xldv20AdcTransceiverOutputPower, xldv20CocIndex=xldv20CocIndex, xldv20IfAlarmState=xldv20IfAlarmState, xldv20RstControlTimeStamp=xldv20RstControlTimeStamp, Xldv20LogType=Xldv20LogType, xldv20NeVendor=xldv20NeVendor, Xldv20AlarmSeverity=Xldv20AlarmSeverity, xldv20ImaLinkOifAnomalies=xldv20ImaLinkOifAnomalies, xldv20TvCACBandwidthUsageUp=xldv20TvCACBandwidthUsageUp, xldv20SutIndex=xldv20SutIndex, xldv20ActVciNni=xldv20ActVciNni, xldv20TrPlcpRDI=xldv20TrPlcpRDI, xldv20AdcGuaranteedBandwidthUsage=xldv20AdcGuaranteedBandwidthUsage, xldv20PiuOperState=xldv20PiuOperState, xldv20AdcAttenuationUp=xldv20AdcAttenuationUp, xldv20EqhRiMnemoCode=xldv20EqhRiMnemoCode, xldv20TrUpgradeEndRequestResult=xldv20TrUpgradeEndRequestResult, xldv20VpcEmSpecific=xldv20VpcEmSpecific, xldv20SdcControl=xldv20SdcControl, xldv20SucControlReq=xldv20SucControlReq, xldv20VplTrafficType=xldv20VplTrafficType, xldv20TrAIS=xldv20TrAIS, xldv20S3nPathTraceReceive=xldv20S3nPathTraceReceive, xldv20ExtAlarmOperState=xldv20ExtAlarmOperState, xldv20SnmTmnSpecificIndex=xldv20SnmTmnSpecificIndex, xldv20TrRemInvReady=xldv20TrRemInvReady, xldv20VccLOCAlarm=xldv20VccLOCAlarm, xldv20TvCallpObjectType=xldv20TvCallpObjectType, xldv20DbuControlReqResult=xldv20DbuControlReqResult, xldv20EthIpAddressSubnetMaskNt=xldv20EthIpAddressSubnetMaskNt, xldv20ImaLinkTxLid=xldv20ImaLinkTxLid, xldv20LoopBackPointTable=xldv20LoopBackPointTable, xldv20ImaGroupRxImaId=xldv20ImaGroupRxImaId, xldv20AdcMinMarginDnCfg=xldv20AdcMinMarginDnCfg, xldv20AlarmSeverityProfileEntry=xldv20AlarmSeverityProfileEntry, Xldv20ImaGroupTxClkMode=Xldv20ImaGroupTxClkMode, xldv20AlmTempFilter=xldv20AlmTempFilter, xldv20HwEquipTable=xldv20HwEquipTable, xldv20AdcCtrlMaxRateUp=xldv20AdcCtrlMaxRateUp, xldv20DbmControlStatus=xldv20DbmControlStatus, xldv20TrSnmAgentRunning=xldv20TrSnmAgentRunning, xldv20ActEthMode=xldv20ActEthMode, xldv20TvAlmFailedComponentRepSource=xldv20TvAlmFailedComponentRepSource, xldv20AlmControlReqResult=xldv20AlmControlReqResult, xldv20CocControlTimeStamp=xldv20CocControlTimeStamp, xldv20S1nPathTraceExpect=xldv20S1nPathTraceExpect, xldv20TrInsufficientLinks=xldv20TrInsufficientLinks, xldv20AdcCtrlLatencyUp=xldv20AdcCtrlLatencyUp, Xldv20LineType=Xldv20LineType, xldv20TvAlmNatureOfAlarm=xldv20TvAlmNatureOfAlarm, xldv20AlmControlTimeStamp=xldv20AlmControlTimeStamp, xldv20CvpEndpointType=xldv20CvpEndpointType, xldv20HwuControlReq=xldv20HwuControlReq, xldv20CvcIndex=xldv20CvcIndex, xldv20SdcInitStatus=xldv20SdcInitStatus, xldv20PiuAvailStatus=xldv20PiuAvailStatus, xldv20EquConnectedPiuIndex=xldv20EquConnectedPiuIndex, xldv20TvVplTerminationPointA=xldv20TvVplTerminationPointA, xldv20TrRxUnusableFe=xldv20TrRxUnusableFe, xldv20IfEntry=xldv20IfEntry, xldv20S3nEmptyCellType=xldv20S3nEmptyCellType, xldv20Stm1NePPTPEntry=xldv20Stm1NePPTPEntry, xldv20ImaGroupNumber=xldv20ImaGroupNumber, xldv20ImaControlStatus=xldv20ImaControlStatus, xldv20ImaGroupMinNumTxLinks=xldv20ImaGroupMinNumTxLinks, xldv20TrRstResult=xldv20TrRstResult, xldv20S3nPathTraceSync=xldv20S3nPathTraceSync, xldv20TvVplIfIndex=xldv20TvVplIfIndex, xldv20RstLevel=xldv20RstLevel, Xldv20PollingFlagType=Xldv20PollingFlagType, Xldv20TpAlarmState=Xldv20TpAlarmState, xldv20TrXmissionErr=xldv20TrXmissionErr, xldv20TrReplaceableUnitReset=xldv20TrReplaceableUnitReset, xldv20VpcPeakCellRateUpstream=xldv20VpcPeakCellRateUpstream, xldv20VclCvcIndexSegment=xldv20VclCvcIndexSegment, xldv20VplTpEntry=xldv20VplTpEntry, xldv20SutSwVersion=xldv20SutSwVersion, xldv20VplVpiValue=xldv20VplVpiValue, xldv20EquType=xldv20EquType, xldv20PltControlTimeStamp=xldv20PltControlTimeStamp, xldv20MlbIndex=xldv20MlbIndex, xldv20TrSwVersionSet=xldv20TrSwVersionSet, xldv20TrapTypes=xldv20TrapTypes, Xldv20CodingType=Xldv20CodingType, xldv20AltControlStatus=xldv20AltControlStatus, xldv20SucControlStatus=xldv20SucControlStatus, xldv20TrStartupEnd=xldv20TrStartupEnd, xldv20HwPlugInUnitEntry=xldv20HwPlugInUnitEntry, xldv20S1nRsEberThreshold=xldv20S1nRsEberThreshold, xldv20VpcHwUnitIndex=xldv20VpcHwUnitIndex, xldv20HwuControlReqResult=xldv20HwuControlReqResult, Xldv20OamLevel=Xldv20OamLevel, xldv20SnmStartupResult=xldv20SnmStartupResult, xldv20SdcAttenuationDn=xldv20SdcAttenuationDn, xldv20SucControlReqResult=xldv20SucControlReqResult, xldv20TvHwuControlResult=xldv20TvHwuControlResult, xldv20TvRepEntity=xldv20TvRepEntity, xldv20DbmControl=xldv20DbmControl, xldv20VpcVpiValue=xldv20VpcVpiValue, xldv20InbandTmn=xldv20InbandTmn, xldv20AltControlTimeStamp=xldv20AltControlTimeStamp, xldv20ImaLinkNeTxState=xldv20ImaLinkNeTxState, xldv20SdcPPTPTable=xldv20SdcPPTPTable)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20SwmUpgradeControl=xldv20SwmUpgradeControl, xldv20CvcVcTpIndex=xldv20CvcVcTpIndex, xldv20HwUnitEntry=xldv20HwUnitEntry, xldv20TmnTrapFlowControl=xldv20TmnTrapFlowControl, xldv20TvTsrControlStatus=xldv20TvTsrControlStatus, xldv20ActPeakCellRateUpstream=xldv20ActPeakCellRateUpstream, xldv20AdcCtrlMinRateDn=xldv20AdcCtrlMinRateDn, xldv20TrWrongServiceConfigData=xldv20TrWrongServiceConfigData, xldv20VclOperationalState=xldv20VclOperationalState, xldv20Dsx1SignalMode=xldv20Dsx1SignalMode, Xldv20SlotStatus=Xldv20SlotStatus, xldv20AccAlarmState=xldv20AccAlarmState, xldv20PiuAlarmSeverityIndex=xldv20PiuAlarmSeverityIndex, xldv20ActInbandVpi=xldv20ActInbandVpi, xldv20EqhRiSerialNumber=xldv20EqhRiSerialNumber, xldv20TvSnmLctSession=xldv20TvSnmLctSession, xldv20TvSnmAgentVersion=xldv20TvSnmAgentVersion, xldv20S3nLineType=xldv20S3nLineType, xldv20Dsx1ConfigEntry=xldv20Dsx1ConfigEntry, xldv20TrRDI=xldv20TrRDI, Xldv20VdcRateDn=Xldv20VdcRateDn, Xldv20Latency=Xldv20Latency, xldv20AccLineIndex=xldv20AccLineIndex, xldv20VccLineIndex=xldv20VccLineIndex, xldv20ImaLinkFeRxState=xldv20ImaLinkFeRxState, xldv20TvEthIfIndex=xldv20TvEthIfIndex, xldv20VccTpTable=xldv20VccTpTable, xldv20AlarmSeverityTable=xldv20AlarmSeverityTable, xldv20ActEthIpAddressCo=xldv20ActEthIpAddressCo, xldv20TrPAIS=xldv20TrPAIS, xldv20TrUpgradeCancelled=xldv20TrUpgradeCancelled, xldv20SdcCtrlControlTimeStamp=xldv20SdcCtrlControlTimeStamp, xldv20TvVciNni=xldv20TvVciNni, Xldv20StartupType=Xldv20StartupType, xldv20ActCellDelayVariationToleranceUpstream=xldv20ActCellDelayVariationToleranceUpstream, xldv20VdcPPTPTable=xldv20VdcPPTPTable, xldv20AdcLastUsedSubCarrierUpstream=xldv20AdcLastUsedSubCarrierUpstream, xldv20SucPathName=xldv20SucPathName, xldv20ActInbandVci=xldv20ActInbandVci, xldv20E3nTrailTraceSendDefault=xldv20E3nTrailTraceSendDefault, xldv20Dsx1ConfigTable=xldv20Dsx1ConfigTable, xldv20SdcGuaranteedBandwidthUsage=xldv20SdcGuaranteedBandwidthUsage, xldv20ContinuityCheckVcEntry=xldv20ContinuityCheckVcEntry, xldv20ActEthIpAddressRemoteRouter=xldv20ActEthIpAddressRemoteRouter, xldv20SucNumberOfTraps=xldv20SucNumberOfTraps, xldv20IfAlarmSeverityIndex=xldv20IfAlarmSeverityIndex, xldv20SdcAISOnLOS=xldv20SdcAISOnLOS, xldv20Tlm=xldv20Tlm, Xldv20RowStatus=Xldv20RowStatus, xldv20Swm=xldv20Swm, xldv20DbmPathAndFileName=xldv20DbmPathAndFileName, xldv20TvAlmSpecProblem=xldv20TvAlmSpecProblem, Xldv20TerminalType=Xldv20TerminalType, xldv20Sts3NePPTPTable=xldv20Sts3NePPTPTable, xldv20AdcXdslServiceTypeCfg=xldv20AdcXdslServiceTypeCfg, xldv20TrMsRDI=xldv20TrMsRDI, xldv20E3NePPTPEntry=xldv20E3NePPTPEntry, xldv20TvTelnetSessionUser=xldv20TvTelnetSessionUser, xldv20TvCACBandwidthUsageDown=xldv20TvCACBandwidthUsageDown, xldv20TvCACProblemType=xldv20TvCACProblemType, xldv20AdcLastUsedSubCarrierDownstream=xldv20AdcLastUsedSubCarrierDownstream, xldv20VdcGuaranteedBandwidthUsage=xldv20VdcGuaranteedBandwidthUsage, xldv20ImaLinkNeUnavailSecs=xldv20ImaLinkNeUnavailSecs, xldv20TrStateChangeOper=xldv20TrStateChangeOper, xldv20ImaLinkNeRxState=xldv20ImaLinkNeRxState, xldv20CocControlReq=xldv20CocControlReq, Xldv20ResetLevel=Xldv20ResetLevel, xldv20VdcCtrlMinRateUp=xldv20VdcCtrlMinRateUp, xldv20DbmBackupPeriod=xldv20DbmBackupPeriod, xldv20SdcRateCfg=xldv20SdcRateCfg, xldv20VclHwUnitIndex=xldv20VclHwUnitIndex, xldv20TrInternalFault=xldv20TrInternalFault, xldv20VdcPowerBoostCfg=xldv20VdcPowerBoostCfg, xldv20TrVclCcCreation=xldv20TrVclCcCreation, xldv20DbmControlReqResultRemote=xldv20DbmControlReqResultRemote, xldv20VplOperationalState=xldv20VplOperationalState, xldv20EqhType=xldv20EqhType, xldv20HwuUnitIndex=xldv20HwuUnitIndex, xldv20D3nPayloadScramblingActivate=xldv20D3nPayloadScramblingActivate, xldv20TrImaMinNumOfLinks=xldv20TrImaMinNumOfLinks, xldv20TrReadSAPSContentFileReady=xldv20TrReadSAPSContentFileReady, xldv20VpcLOCAlarm=xldv20VpcLOCAlarm, xldv20VplAlarmSeverityIndex=xldv20VplAlarmSeverityIndex, xldv20InbandVciCurrent=xldv20InbandVciCurrent, xldv20SdcAISOnACT=xldv20SdcAISOnACT, xldv20TvAdcControlStatus=xldv20TvAdcControlStatus, xldv20SdcTransceiverOutputPower=xldv20SdcTransceiverOutputPower, xldv20TmnInOrOutBand=xldv20TmnInOrOutBand, xldv20S1nRDIAISOnEber=xldv20S1nRDIAISOnEber, xldv20ActEthIpAddressNt=xldv20ActEthIpAddressNt, xldv20TvAlmPropRepairAction=xldv20TvAlmPropRepairAction, xldv20SwmLogHandler=xldv20SwmLogHandler, xldv20TrVpcTpDeletion=xldv20TrVpcTpDeletion, xldv20ImaLinkEntry=xldv20ImaLinkEntry, xldv20AdcMarginUp=xldv20AdcMarginUp, xldv20ImaGroupFeNumFailures=xldv20ImaGroupFeNumFailures, xldv20Traps=xldv20Traps, xldv20VdcCtrlMaxRateUp=xldv20VdcCtrlMaxRateUp, xldv20VclVbrCDVTUpstream=xldv20VclVbrCDVTUpstream, xldv20Dsx1LineType=xldv20Dsx1LineType, xldv20TrActivateLoadResult=xldv20TrActivateLoadResult, xldv20VclTrafficType=xldv20VclTrafficType, Xldv20TvTelnetSessionStatus=Xldv20TvTelnetSessionStatus, xldv20RstControlTimer=xldv20RstControlTimer, xldv20SutRequester=xldv20SutRequester, xldv20SnmMaxResponseTime=xldv20SnmMaxResponseTime, xldv20VccTpEntry=xldv20VccTpEntry, xldv20AdcMaxRateDnCfg=xldv20AdcMaxRateDnCfg, xldv20AlmFiltProfileIndex=xldv20AlmFiltProfileIndex, xldv20ExtAlarmActivityState=xldv20ExtAlarmActivityState, xldv20ActVciUni=xldv20ActVciUni, xldv20VdcMarginDn=xldv20VdcMarginDn, xldv20VpcIndex=xldv20VpcIndex, xldv20AtmCcControl=xldv20AtmCcControl, Xldv20RstResult=Xldv20RstResult, xldv20ImaGroupRxFrameLength=xldv20ImaGroupRxFrameLength, xldv20SucUnit=xldv20SucUnit, xldv20TrPltTestResult=xldv20TrPltTestResult, xldv20CallP=xldv20CallP, xldv20TvAlmFailedComponentString=xldv20TvAlmFailedComponentString, Xldv20AlarmState=Xldv20AlarmState, xldv20AlmRepEntityId=xldv20AlmRepEntityId, xldv20TvVpcNniIndex=xldv20TvVpcNniIndex, xldv20AlmPropRepairAction=xldv20AlmPropRepairAction, xldv20ActTestTypeNni=xldv20ActTestTypeNni, xldv20TvAlmSeverityOfFailure=xldv20TvAlmSeverityOfFailure, Xldv20SuppressionType=Xldv20SuppressionType, xldv20VclTpEntry=xldv20VclTpEntry, xldv20VplSustainableCellRateDownstream=xldv20VplSustainableCellRateDownstream, xldv20VdcCtrlLatencyDn=xldv20VdcCtrlLatencyDn, xldv20VdcRateDn=xldv20VdcRateDn, xldv20TrAltTestResult=xldv20TrAltTestResult, xldv20SnmCallpPollingFlag=xldv20SnmCallpPollingFlag, xldv20VpcAISAlarm=xldv20VpcAISAlarm, xldv20ImaGroupMappingTable=xldv20ImaGroupMappingTable, xldv20TrContinuityCheckVpEntryCreated=xldv20TrContinuityCheckVpEntryCreated, xldv20SnmpControl=xldv20SnmpControl, xldv20VdcMarginUp=xldv20VdcMarginUp, xldv20ExtAlarmName=xldv20ExtAlarmName, xldv20SutTimeStamp=xldv20SutTimeStamp, xldv20VcxAtmfVplIndex=xldv20VcxAtmfVplIndex, xldv20TvVpiNniIndex=xldv20TvVpiNniIndex, xldv20VdcCtrlControlStatus=xldv20VdcCtrlControlStatus, xldv20VpcCvpIndexEndToEnd=xldv20VpcCvpIndexEndToEnd, xldv20PiuAdminState=xldv20PiuAdminState, xldv20ActVpiNni=xldv20ActVpiNni, xldv20VpcLineIndex=xldv20VpcLineIndex, xldv20E3NePPTPTable=xldv20E3NePPTPTable, xldv20SdcMarginUp=xldv20SdcMarginUp, xldv20ContinuityCheckVcTable=xldv20ContinuityCheckVcTable, xldv20ImaLinkFeSevErroredSecs=xldv20ImaLinkFeSevErroredSecs, xldv20TvHwContainedUnitAddr=xldv20TvHwContainedUnitAddr, xldv20ImaLinkFeRxFailureStatus=xldv20ImaLinkFeRxFailureStatus, Xldv20SdslDataRate=Xldv20SdslDataRate, xldv20E3nPayloadType=xldv20E3nPayloadType, xldv20ImaGroupLeastDelayLink=xldv20ImaGroupLeastDelayLink, xldv20VdcWarmStartCfg=xldv20VdcWarmStartCfg, xldv20TvEthVccTpIndex=xldv20TvEthVccTpIndex, xldv20EthIpAddressCo=xldv20EthIpAddressCo, xldv20VpcIfIndex=xldv20VpcIfIndex, xldv20HwUnitType=xldv20HwUnitType, xldv20SdcCtrlXdslServiceType=xldv20SdcCtrlXdslServiceType, xldv20VdcLatencyDnCfg=xldv20VdcLatencyDnCfg, xldv20CvcEndpointType=xldv20CvcEndpointType, xldv20IbmPPTPTable=xldv20IbmPPTPTable, Xldv20AdslDataRateDown=Xldv20AdslDataRateDown, xldv20VcxAdminState=xldv20VcxAdminState, xldv20AlmControlReq=xldv20AlmControlReq, xldv20TrSlm=xldv20TrSlm, xldv20TvVpcUniIndex=xldv20TvVpcUniIndex, xldv20TrLpr=xldv20TrLpr, xldv20AdcXdslServiceType=xldv20AdcXdslServiceType, xldv20ContinuityCheckVpEntry=xldv20ContinuityCheckVpEntry, xldv20AccAtmfVplIndex=xldv20AccAtmfVplIndex, xldv20AdcMarginDnCfg=xldv20AdcMarginDnCfg, Xldv20SucAllOfType=Xldv20SucAllOfType, xldv20AdcRateDn=xldv20AdcRateDn, xldv20AtmNe=xldv20AtmNe, xldv20D3nBandwidthUsage=xldv20D3nBandwidthUsage, xldv20SucHwUnitIndex=xldv20SucHwUnitIndex, xldv20TvSucUnit=xldv20TvSucUnit, xldv20TvRestoreResult=xldv20TvRestoreResult, xldv20TrRfiIma=xldv20TrRfiIma, xldv20VdcCtrlVdslMode=xldv20VdcCtrlVdslMode, Xldv20LoopMode=Xldv20LoopMode, xldv20Sts3NePPTPEntry=xldv20Sts3NePPTPEntry, xldv20ImaGroupUnavailSecs=xldv20ImaGroupUnavailSecs, xldv20VclLOCAlarm=xldv20VclLOCAlarm, xldv20VplIfIndex=xldv20VplIfIndex, xldv20RstHwUnitIndex=xldv20RstHwUnitIndex, xldv20TrTraceLogRead=xldv20TrTraceLogRead, xldv20S3nBandwidthUsage=xldv20S3nBandwidthUsage, xldv20AltControlReqResult=xldv20AltControlReqResult, xldv20ImaGroupAlphaValue=xldv20ImaGroupAlphaValue, xldv20SucFileName=xldv20SucFileName, xldv20TmnConnected=xldv20TmnConnected, xldv20VcxEthVccIndex=xldv20VcxEthVccIndex, xldv20AlarmFilteringProfileEntry=xldv20AlarmFilteringProfileEntry, Xldv20XdslInitStatus=Xldv20XdslInitStatus, xldv20ActSustainableCellRateDownstream=xldv20ActSustainableCellRateDownstream, xldv20AdcAISOnACT=xldv20AdcAISOnACT, xldv20TrExternalAlarm=xldv20TrExternalAlarm, xldv20S3nRsEberThreshold=xldv20S3nRsEberThreshold, xldv20TrStateChangeAvail=xldv20TrStateChangeAvail, Xldv20ExtAlarmActivityState=Xldv20ExtAlarmActivityState, xldv20VplSegmentEndPoint=xldv20VplSegmentEndPoint, xldv20=xldv20, xldv20TrLof=xldv20TrLof, Xldv20RiResultType=Xldv20RiResultType, xldv20HwContainedUnitAddr=xldv20HwContainedUnitAddr, xldv20AltLoopTestType=xldv20AltLoopTestType, Xldv20AdslDataRateUp=Xldv20AdslDataRateUp, xldv20PiuUpgradeResult=xldv20PiuUpgradeResult, xldv20AdcCtrlControlStatus=xldv20AdcCtrlControlStatus, xldv20TvVciNniIndex=xldv20TvVciNniIndex, xldv20ActVpiUni=xldv20ActVpiUni, xldv20SutHwUnitIndex=xldv20SutHwUnitIndex, xldv20TmnIndex=xldv20TmnIndex, xldv20VccVciValue=xldv20VccVciValue, xldv20SucAllOfType=xldv20SucAllOfType, xldv20VclTpTable=xldv20VclTpTable, xldv20EqhRiHwItemNumber=xldv20EqhRiHwItemNumber, xldv20VdcCtrlIfIndex=xldv20VdcCtrlIfIndex, xldv20IfAlarmFilteringIndex=xldv20IfAlarmFilteringIndex, xldv20DbmControlReqResultLocal=xldv20DbmControlReqResultLocal, xldv20TvStcNewAvailStatus=xldv20TvStcNewAvailStatus, xldv20TrObjDelete=xldv20TrObjDelete, xldv20HwContainmentTable=xldv20HwContainmentTable, xldv20E3nBandwidthUsage=xldv20E3nBandwidthUsage, xldv20IfConnectivityIndex=xldv20IfConnectivityIndex, xldv20VplLineIndex=xldv20VplLineIndex, xldv20VccOperationalState=xldv20VccOperationalState, xldv20VcxVpcUniIndex=xldv20VcxVpcUniIndex, xldv20EqhSwVersion=xldv20EqhSwVersion, xldv20S1nBandwidthUsage=xldv20S1nBandwidthUsage, xldv20ImaMibObjects=xldv20ImaMibObjects, xldv20E3nTrailTraceReceive=xldv20E3nTrailTraceReceive, xldv20VpcRDIAlarm=xldv20VpcRDIAlarm, xldv20TvVciValue=xldv20TvVciValue, xldv20VplLOCAlarm=xldv20VplLOCAlarm, xldv20VpcAlarmFilteringIndex=xldv20VpcAlarmFilteringIndex, xldv20VdcMaxRateUpCfg=xldv20VdcMaxRateUpCfg, xldv20HwuUnitType=xldv20HwuUnitType, xldv20VdcMinRateDnCfg=xldv20VdcMinRateDnCfg, xldv20ActEndpointTypeNt=xldv20ActEndpointTypeNt, xldv20ImaLinkFeTxUnusableSecs=xldv20ImaLinkFeTxUnusableSecs, xldv20TrPRDI=xldv20TrPRDI, xldv20PiuAlarmFilteringIndex=xldv20PiuAlarmFilteringIndex, xldv20E3nTrailTraceExpect=xldv20E3nTrailTraceExpect, xldv20TrReplaceableUnitProblem=xldv20TrReplaceableUnitProblem, xldv20VpcEthVpcIndex=xldv20VpcEthVpcIndex, xldv20AccOperationalState=xldv20AccOperationalState, xldv20AdcCtrlMarginDn=xldv20AdcCtrlMarginDn, xldv20VplMaximumBurstSizeUpstream=xldv20VplMaximumBurstSizeUpstream)
mibBuilder.exportSymbols("XLDV20-MIB", xldv20PiuType=xldv20PiuType, xldv20TvAlmFailedComponent=xldv20TvAlmFailedComponent, xldv20TvVplTerminationPointZ=xldv20TvVplTerminationPointZ, xldv20ActIfIndex=xldv20ActIfIndex, xldv20SnmTmnMaxNumber=xldv20SnmTmnMaxNumber, xldv20DbuControlTimer=xldv20DbuControlTimer, xldv20TrLods=xldv20TrLods, xldv20IfAdminState=xldv20IfAdminState, xldv20ImaGroupNumTxCfgLinks=xldv20ImaGroupNumTxCfgLinks, xldv20SucControlTimer=xldv20SucControlTimer, xldv20TvHwUnitType=xldv20TvHwUnitType, xldv20VclVbrCDVTDownstream=xldv20VclVbrCDVTDownstream, Xldv20VdcVdslMode=Xldv20VdcVdslMode, Xldv20SnmLctSession=Xldv20SnmLctSession, xldv20NeTimeZone=xldv20NeTimeZone, xldv20VdcSleepModeCfg=xldv20VdcSleepModeCfg, xldv20S3nPathTraceSendDefault=xldv20S3nPathTraceSendDefault, xldv20EquUserLabel=xldv20EquUserLabel, xldv20VpcCellDelayVariationToleranceDownstream=xldv20VpcCellDelayVariationToleranceDownstream, xldv20ActTrafficType=xldv20ActTrafficType, xldv20IbmAISOnLOS=xldv20IbmAISOnLOS, xldv20IfHwUnitIndex=xldv20IfHwUnitIndex, xldv20MlbLoopLocId=xldv20MlbLoopLocId, xldv20VclAlarmSeverityIndex=xldv20VclAlarmSeverityIndex, Xldv20SdslServiceType=Xldv20SdslServiceType, xldv20TmnTable=xldv20TmnTable, xldv20VclCellDelayVariationToleranceUpstream=xldv20VclCellDelayVariationToleranceUpstream, xldv20ImaLinkFeUnavailSecs=xldv20ImaLinkFeUnavailSecs, xldv20CvpIndex=xldv20CvpIndex, xldv20ActEthIpAddressSubnetMaskCo=xldv20ActEthIpAddressSubnetMaskCo, xldv20VccCvcIndexSegment=xldv20VccCvcIndexSegment, xldv20ImaGroupTxImaId=xldv20ImaGroupTxImaId, xldv20NeDescriptorFileName=xldv20NeDescriptorFileName, xldv20TvRstHwUnitIndex=xldv20TvRstHwUnitIndex, xldv20TrConfigAbortFe=xldv20TrConfigAbortFe, xldv20TrBlockedFe=xldv20TrBlockedFe, xldv20TmnOrLctTerminal=xldv20TmnOrLctTerminal, xldv20HwContainedUnitIndex=xldv20HwContainedUnitIndex, xldv20VpcTrafficType=xldv20VpcTrafficType, xldv20AlmSevProfileRowStatus=xldv20AlmSevProfileRowStatus, xldv20S3nMsEberThreshold=xldv20S3nMsEberThreshold, xldv20VdcCtrlWarmStart=xldv20VdcCtrlWarmStart, xldv20HwEquipHolderTable=xldv20HwEquipHolderTable, Xldv20ImaLinkFailureStatus=Xldv20ImaLinkFailureStatus, xldv20EqhRiHwIssue=xldv20EqhRiHwIssue, xldv20AdcInitStatus=xldv20AdcInitStatus, xldv20ImaLinkRowStatus=xldv20ImaLinkRowStatus, xldv20TvRstResult=xldv20TvRstResult, xldv20DbmControlTimer=xldv20DbmControlTimer, Xldv20AlmSevProfileIndex=Xldv20AlmSevProfileIndex, xldv20S1nPathTraceSendDefault=xldv20S1nPathTraceSendDefault, xldv20TrHwmLogRead=xldv20TrHwmLogRead, xldv20AdcMinMarginUpCfg=xldv20AdcMinMarginUpCfg, xldv20VcxEthVpcIndex=xldv20VcxEthVpcIndex, xldv20IfLineIndex=xldv20IfLineIndex, xldv20AlmSeverityOfFailure=xldv20AlmSeverityOfFailure, xldv20EqhRiFwIssue=xldv20EqhRiFwIssue, xldv20NeVersion=xldv20NeVersion, xldv20CvcObjectType=xldv20CvcObjectType, xldv20TvDbuHwmLogReadResult=xldv20TvDbuHwmLogReadResult, xldv20SutTaskTableEntry=xldv20SutTaskTableEntry, xldv20HwContainmentEntry=xldv20HwContainmentEntry, xldv20SdcXdslServiceType=xldv20SdcXdslServiceType, xldv20TvRiRemInvResult=xldv20TvRiRemInvResult, xldv20VplTpTable=xldv20VplTpTable, xldv20TrLOC=xldv20TrLOC, xldv20TvVpiValue=xldv20TvVpiValue, xldv20AdcAttenuationDn=xldv20AdcAttenuationDn, xldv20TrReplaceableUnitTypeMismatch=xldv20TrReplaceableUnitTypeMismatch, xldv20S3nPathTraceSend=xldv20S3nPathTraceSend, xldv20EqhRiFwItemNumber=xldv20EqhRiFwItemNumber, xldv20AccTerminationPointA=xldv20AccTerminationPointA, xldv20Alarming=xldv20Alarming, xldv20TvRepSource=xldv20TvRepSource, xldv20AlarmListEntry=xldv20AlarmListEntry, xldv20AdcLatencyDnCfg=xldv20AdcLatencyDnCfg, xldv20TvVplTpIndex=xldv20TvVplTpIndex, xldv20SnmControlReq=xldv20SnmControlReq, xldv20NeLocation=xldv20NeLocation, xldv20StcTelnetAccess=xldv20StcTelnetAccess, xldv20TvIndexEndToEnd=xldv20TvIndexEndToEnd, xldv20HwuEquType=xldv20HwuEquType, xldv20VplCvpIndexSegment=xldv20VplCvpIndexSegment, Xldv20AdslAttenuation=Xldv20AdslAttenuation, xldv20S1nPathTraceTIMDetectionActivate=xldv20S1nPathTraceTIMDetectionActivate, xldv20CvcTestType=xldv20CvcTestType, xldv20AlmNatureOfAlarm=xldv20AlmNatureOfAlarm, xldv20TrHwuControl=xldv20TrHwuControl, xldv20TrContinuityCheckVpEntryDeleted=xldv20TrContinuityCheckVpEntryDeleted, xldv20PltControlReqResult=xldv20PltControlReqResult, xldv20SnmLctTrapFlowControl=xldv20SnmLctTrapFlowControl, xldv20VclConnectivityPointer=xldv20VclConnectivityPointer, xldv20VplHwUnitIndex=xldv20VplHwUnitIndex, xldv20AlmIndex=xldv20AlmIndex, xldv20ActCallpTableIndex=xldv20ActCallpTableIndex, xldv20HwmHwUnitIndex=xldv20HwmHwUnitIndex, xldv20VccIndex=xldv20VccIndex, xldv20IbmPPTPEntry=xldv20IbmPPTPEntry, xldv20VdcCtrlPowerBoost=xldv20VdcCtrlPowerBoost, xldv20VdcCtrlSleepMode=xldv20VdcCtrlSleepMode, xldv20VclLineIndex=xldv20VclLineIndex, Xldv20TrapIds=Xldv20TrapIds, xldv20PltControlStatus=xldv20PltControlStatus, xldv20TrTxUnusableFe=xldv20TrTxUnusableFe, xldv20ImaLinkFeTxNumFailures=xldv20ImaLinkFeTxNumFailures, xldv20TrReplaceableUnitFailure=xldv20TrReplaceableUnitFailure, xldv20AdcCtrlMinMarginUp=xldv20AdcCtrlMinMarginUp, xldv20VclCellDelayVariationToleranceDownstream=xldv20VclCellDelayVariationToleranceDownstream, xldv20AdcMinRateUpCfg=xldv20AdcMinRateUpCfg, xldv20AdcCtrlMaxRateDn=xldv20AdcCtrlMaxRateDn, xldv20Dsx1LoopbackConfig=xldv20Dsx1LoopbackConfig, xldv20AlmSeverity=xldv20AlmSeverity, xldv20ActCDVTAutoConfig=xldv20ActCDVTAutoConfig, xldv20TrReplaceableUnitRemoved=xldv20TrReplaceableUnitRemoved, Xldv20AdminState=Xldv20AdminState, xldv20AlmFailedComponent=xldv20AlmFailedComponent, xldv20TrCmuReadyForReset=xldv20TrCmuReadyForReset, xldv20VplMaximumBurstSizeDownstream=xldv20VplMaximumBurstSizeDownstream, Xldv20TrafficDirection=Xldv20TrafficDirection, xldv20VdcLinkState=xldv20VdcLinkState, xldv20ImaLinkNeSevErroredSecs=xldv20ImaLinkNeSevErroredSecs, xldv20S3nPathTraceTIMDetectionActivate=xldv20S3nPathTraceTIMDetectionActivate, xldv20ImaGroupNumRxActLinks=xldv20ImaGroupNumRxActLinks, xldv20TrVplCcDeletion=xldv20TrVplCcDeletion, xldv20HwUnitIndex=xldv20HwUnitIndex, xldv20ImaGroupDiffDelayMax=xldv20ImaGroupDiffDelayMax, Xldv20HwUnitType=Xldv20HwUnitType, Xldv20FlowDirection=Xldv20FlowDirection, xldv20ImaGroupBandwidthUsage=xldv20ImaGroupBandwidthUsage, xldv20ActTestTypeNt=xldv20ActTestTypeNt, xldv20AlmControlStatus=xldv20AlmControlStatus, xldv20ImaGroupRxTimingRefLink=xldv20ImaGroupRxTimingRefLink, xldv20S3nSDThreshold=xldv20S3nSDThreshold, xldv20ActContinuityCheckNt=xldv20ActContinuityCheckNt, xldv20LbpLoopLocId=xldv20LbpLoopLocId, xldv20ActPeakCellRateDownstream=xldv20ActPeakCellRateDownstream, xldv20HwUnitMappingTable=xldv20HwUnitMappingTable, xldv20ActVbrCDVTUpstream=xldv20ActVbrCDVTUpstream, xldv20VpcCellDelayVariationToleranceUpstream=xldv20VpcCellDelayVariationToleranceUpstream, xldv20VdcCtrlLatencyUp=xldv20VdcCtrlLatencyUp, xldv20VpcSegmentEndPoint=xldv20VpcSegmentEndPoint, xldv20VdcMaxRateDnCfg=xldv20VdcMaxRateDnCfg, xldv20SdcCtrlControlStatus=xldv20SdcCtrlControlStatus, xldv20ImaLinkFeTxState=xldv20ImaLinkFeTxState, xldv20TvVpiNni=xldv20TvVpiNni, xldv20ImaLinkGroupIndex=xldv20ImaLinkGroupIndex, Xldv20AdslMargin=Xldv20AdslMargin, xldv20VpcVbrCDVTDownstream=xldv20VpcVbrCDVTDownstream, xldv20RstControlStatus=xldv20RstControlStatus, xldv20CvpVpTpIndex=xldv20CvpVpTpIndex, xldv20SnmTmnConnected=xldv20SnmTmnConnected, xldv20CocEndpointType=xldv20CocEndpointType, xldv20SdcCtrlIfIndex=xldv20SdcCtrlIfIndex, xldv20VdcLatencyUpCfg=xldv20VdcLatencyUpCfg, xldv20ImaLinkNeTxNumFailures=xldv20ImaLinkNeTxNumFailures, xldv20TrLctSession=xldv20TrLctSession, Xldv20AvailStatus=Xldv20AvailStatus, Xldv20LinkState=Xldv20LinkState, Xldv20EmptyCellType=Xldv20EmptyCellType, xldv20VdcPsdMaskCfg=xldv20VdcPsdMaskCfg, xldv20AccEthVpcIndex=xldv20AccEthVpcIndex, xldv20SucPredecessorSwVersion=xldv20SucPredecessorSwVersion, xldv20TrLcd=xldv20TrLcd, xldv20TrReplaceableUnitPlugged=xldv20TrReplaceableUnitPlugged, xldv20TrPuUpgradeSucc=xldv20TrPuUpgradeSucc, xldv20ActSegmentEndPointUni=xldv20ActSegmentEndPointUni, xldv20VpcVbrCDVTUpstream=xldv20VpcVbrCDVTUpstream, xldv20EqhFwCode=xldv20EqhFwCode, xldv20AlmTimeAndDate=xldv20AlmTimeAndDate, Xldv20SdslDataRateCurrent=Xldv20SdslDataRateCurrent, xldv20LbpLoopMode=xldv20LbpLoopMode, xldv20SdcCtrlControlReqResult=xldv20SdcCtrlControlReqResult, Xldv20VdcLatencyUp=Xldv20VdcLatencyUp, xldv20D3nCodingType=xldv20D3nCodingType, xldv20CvpObjectType=xldv20CvpObjectType, xldv20VclAlarmFilteringIndex=xldv20VclAlarmFilteringIndex, Xldv20S1nS3nSDThreshold=Xldv20S1nS3nSDThreshold, xldv20AlarmFilteringTable=xldv20AlarmFilteringTable, xldv20TvStartupType=xldv20TvStartupType, xldv20VclVciValue=xldv20VclVciValue, xldv20ImaLinkTxStuffs=xldv20ImaLinkTxStuffs, xldv20VdcCtrlMaxRateDn=xldv20VdcCtrlMaxRateDn, xldv20E3nEmptyCellType=xldv20E3nEmptyCellType, xldv20SutUpgradeResult=xldv20SutUpgradeResult, xldv20ImaGroupNeNumFailures=xldv20ImaGroupNeNumFailures, xldv20TvActCcStatus=xldv20TvActCcStatus, xldv20CvpTestType=xldv20CvpTestType, xldv20CocControlStatus=xldv20CocControlStatus, xldv20TrDbBackup=xldv20TrDbBackup, Xldv20S1nS3nEberThreshold=Xldv20S1nS3nEberThreshold, Xldv20DayLightSavingTime=Xldv20DayLightSavingTime, xldv20TlmOam=xldv20TlmOam, xldv20AlmControl=xldv20AlmControl, xldv20VplIndex=xldv20VplIndex, xldv20VpcCvpIndexSegment=xldv20VpcCvpIndexSegment, xldv20TvHweResetType=xldv20TvHweResetType, xldv20TvSucVersionNo=xldv20TvSucVersionNo, xldv20ImaControlTimer=xldv20ImaControlTimer, xldv20EthernetConfigTable=xldv20EthernetConfigTable, xldv20VcCrossConnectEntry=xldv20VcCrossConnectEntry, xldv20VplCellDelayVariationToleranceDownstream=xldv20VplCellDelayVariationToleranceDownstream, xldv20VplCellDelayVariationToleranceUpstream=xldv20VplCellDelayVariationToleranceUpstream, xldv20ImaGroupBetaValue=xldv20ImaGroupBetaValue, xldv20ImaGroupFailureStatus=xldv20ImaGroupFailureStatus, Xldv20CallpAlarmState=Xldv20CallpAlarmState, xldv20VccAISAlarm=xldv20VccAISAlarm, xldv20ImaGroupMinNumRxLinks=xldv20ImaGroupMinNumRxLinks, xldv20VcxLineIndex=xldv20VcxLineIndex, xldv20TvStcNewAdminStatus=xldv20TvStcNewAdminStatus, xldv20HwEquipHolderEntry=xldv20HwEquipHolderEntry, xldv20NeSummerTime=xldv20NeSummerTime, xldv20AdcLinkState=xldv20AdcLinkState, xldv20TrVpcTpCreation=xldv20TrVpcTpCreation, Xldv20E3nPayloadType=Xldv20E3nPayloadType, xldv20SdcCtrlMinMarginUp=xldv20SdcCtrlMinMarginUp)
