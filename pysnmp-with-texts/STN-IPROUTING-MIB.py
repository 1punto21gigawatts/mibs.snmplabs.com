#
# PySNMP MIB module STN-IPROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-IPROUTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:11:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, Unsigned32, Integer32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Bits, TimeTicks, Counter64, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Unsigned32", "Integer32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "ModuleIdentity")
TimeStamp, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowStatus", "TextualConvention", "DisplayString")
stnSystems, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems")
stnEngineSlot, stnCpuIpRouteLimit, stnEngineCpu, stnEngineType = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineSlot", "stnCpuIpRouteLimit", "stnEngineCpu", "stnEngineType")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnIpRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 12))
if mibBuilder.loadTexts: stnIpRouting.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnIpRouting.setOrganization('Spring Tide Networks, Inc.')
if mibBuilder.loadTexts: stnIpRouting.setContactInfo(' Spring Tide Networks, Inc. Customer Service Postal: 3 Clock Tower Place Maynard, MA 01754 Tel: 1 888-786-4357 Email: stncs@springtidenet.com ')
if mibBuilder.loadTexts: stnIpRouting.setDescription('This MIB module describes managed objects of the IP Routing subsystems that are proprietary to Spring Tide Networks.')
stnIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1))
stnArp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2))
stnRip = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3))
stnOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4))
stnBgp = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 5))
stnIpRtCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1))
stnIpRoutingVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4))
stnIpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5))
stnIpTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 1))
stnIpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2))
stnIpNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0))
stnOspfTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 8))
stnIpRtCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheEntries.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheEntries.setDescription('The number of current cache entries.')
stnIpRtCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheMisses.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheMisses.setDescription('The number of failed attempts to locate an IP address in the route cache.')
stnIpRtCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheHits.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheHits.setDescription('The number of successful attempts to locate an IP address in the route cache.')
stnIpRtCacheRemovals = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheRemovals.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheRemovals.setDescription('The number of times an entry has been removed as a result of the need to insert an entry into a full table.')
stnIpRoutingCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5), )
if mibBuilder.loadTexts: stnIpRoutingCacheTable.setStatus('current')
if mibBuilder.loadTexts: stnIpRoutingCacheTable.setDescription('Table of IP routing cache entries.')
stnIpRtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpRtCacheIpAddress"), (0, "STN-IPROUTING-MIB", "stnIpRtCacheIpMask"))
if mibBuilder.loadTexts: stnIpRtCacheEntry.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheEntry.setDescription('An IP routing cache entry.')
stnIpRtCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheIpAddress.setDescription('The destination IP address of this route.')
stnIpRtCacheIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIpMask.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheIpMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the ipCidrRouteDest field.')
stnIpRtCacheNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheNextHop.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheNextHop.setDescription('On remote routes, the address of the next sys- tem en route; Otherwise, 0.0.0.0.')
stnIpRtCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached')
stnIpRtCacheRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpRtCacheRouteType.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheRouteType.setDescription('The type of route as described in RFC 2096')
stnIpRtCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stnIpRtCacheStatus.setStatus('current')
if mibBuilder.loadTexts: stnIpRtCacheStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
stnIpCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2), )
if mibBuilder.loadTexts: stnIpCircExtTable.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtTable.setDescription('Table of IP circuit parameters.')
stnIpCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpCircExtIfIndex"))
if mibBuilder.loadTexts: stnIpCircExtEntry.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtEntry.setDescription('An IP circuits entry')
stnIpCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
stnIpCircExtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnIpCircExtAdminState.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtAdminState.setDescription('Enable or disable the operation of IP on the specified interface.')
stnIpCircExtOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtOperState.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtOperState.setDescription('The operational state of the circuit. May or may not be the same as administrative state.')
stnIpCircExtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIpAddress.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtIpAddress.setDescription('The IP address of the interface. For unnumbered interfaces this will be 0.0.0.0.')
stnIpCircExtIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtIpMask.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtIpMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
stnIpCircExtMaxReasm = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtMaxReasm.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtMaxReasm.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
stnIpCircExtMaxMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtMaxMtu.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtMaxMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
stnIpCircExtBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCircExtBcastAddr.setStatus('current')
if mibBuilder.loadTexts: stnIpCircExtBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
stnIpDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3), )
if mibBuilder.loadTexts: stnIpDetailsTable.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsTable.setDescription('This table provides additional information about failed ip messages and icmp messages. When the table reaches its maximum size and a new entry needs to be added, the entire table will be cleared.')
stnIpDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnIpDetailsIndex"))
if mibBuilder.loadTexts: stnIpDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsEntry.setDescription('An entry within the STN IP Details Table.')
stnIpDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: stnIpDetailsIndex.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsIndex.setDescription('A unique index for this table.')
stnIpDetailsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsSource.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsSource.setDescription('The source address within the packet.')
stnIpDetailsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsDest.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsDest.setDescription('The destination address within the packet.')
stnIpDetailsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("header-error", 1), ("unknown-proto", 2), ("no-route", 3), ("ttl-exceed", 4), ("param-problem", 5), ("redirect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsType.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsType.setDescription('Indicates either an IP address or header error, or ICMP problem message.')
stnIpDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsTimeStamp.setDescription('Value of sysUpTime when this entry was added.')
stnIpDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpDetailsHeader.setStatus('current')
if mibBuilder.loadTexts: stnIpDetailsHeader.setDescription('IP header of this error packet.')
stnIpMaxRoutingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpMaxRoutingTableSize.setStatus('current')
if mibBuilder.loadTexts: stnIpMaxRoutingTableSize.setDescription('Maximum size of the ip routing table.')
stnIpCurrentRoutingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnIpCurrentRoutingTableSize.setStatus('current')
if mibBuilder.loadTexts: stnIpCurrentRoutingTableSize.setDescription('Current size of the ip routing table.')
stnIpRouterRouteLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0, 1)).setObjects(("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-IPROUTING-MIB", "stnIpMaxRoutingTableSize"))
if mibBuilder.loadTexts: stnIpRouterRouteLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: stnIpRouterRouteLimitExceeded.setDescription('A stnIpRouterRouteLimitExceeded signifies that a route add operation failed due to reaching maximum number of routes in the routing table as specified by the stnIpMaxRoutingTableSize variable.')
stnIpEngineRouteLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 12, 1, 5, 2, 0, 2)).setObjects(("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"), ("STN-CHASSIS-MIB", "stnEngineType"), ("STN-ROUTER-MIB", "stnRouterIndex"), ("STN-CHASSIS-MIB", "stnCpuIpRouteLimit"))
if mibBuilder.loadTexts: stnIpEngineRouteLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: stnIpEngineRouteLimitExceeded.setDescription("A stnIpEngineRouteLimitExceeded signifies that a route add operation failed due to reaching maximum number of routes on the router's engine as specified by the stnCpuIpRouteLimit variable.")
stnArpExtTtl = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpExtTtl.setStatus('current')
if mibBuilder.loadTexts: stnArpExtTtl.setDescription('The lifetime of an ARP entry within the router.')
stnArpExtRcvdRequests = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtRcvdRequests.setStatus('current')
if mibBuilder.loadTexts: stnArpExtRcvdRequests.setDescription('The number of ARP received requests within the router.')
stnArpExtRcvdReplies = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtRcvdReplies.setStatus('current')
if mibBuilder.loadTexts: stnArpExtRcvdReplies.setDescription('The number of ARP received replies within the router.')
stnArpExtSendRequests = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtSendRequests.setStatus('current')
if mibBuilder.loadTexts: stnArpExtSendRequests.setDescription('The number of ARP send requests within the router.')
stnArpExtSendReplies = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpExtSendReplies.setStatus('current')
if mibBuilder.loadTexts: stnArpExtSendReplies.setDescription('The number of ARP send replies within the router.')
stnArpCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6), )
if mibBuilder.loadTexts: stnArpCircExtTable.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtTable.setDescription('Table of ARP circuit parameters')
stnArpCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnArpCircExtIfIndex"))
if mibBuilder.loadTexts: stnArpCircExtEntry.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtEntry.setDescription('A circuits ARP parameters')
stnArpCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpCircExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
stnArpCircExtDoProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpCircExtDoProxy.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtDoProxy.setDescription('Enable or disable ARP proxy responses on the specified interface.')
stnArpCircExtDoResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnArpCircExtDoResp.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtDoResp.setDescription('Enable or disable the sending of ARP responses on specified circuit.')
stnArpCircExtWanProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnArpCircExtWanProxy.setStatus('current')
if mibBuilder.loadTexts: stnArpCircExtWanProxy.setDescription('Enable or disable ARP WAN proxy responses on the specified interface.')
stnRipExtAdminState = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipExtAdminState.setStatus('current')
if mibBuilder.loadTexts: stnRipExtAdminState.setDescription('Enable or disable the operation of RIP on all interfaces.')
stnRipExtUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipExtUpdateTime.setStatus('current')
if mibBuilder.loadTexts: stnRipExtUpdateTime.setDescription('The time between transmission of RIP updates.')
stnRipCircExtTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3), )
if mibBuilder.loadTexts: stnRipCircExtTable.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtTable.setDescription('Table of RIP circuit parameters')
stnRipCircExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnRipCircExtIfIndex"))
if mibBuilder.loadTexts: stnRipCircExtEntry.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtEntry.setDescription('A circuits RIP parameters')
stnRipCircExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipCircExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtIfIndex.setDescription('An index value which uniquely identifies the local physical interface which this circuit uses. This value identifies the same interface identified by ifIndex in MIB-2.')
stnRipCircExtTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtTalk.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtTalk.setDescription('Enable or disable RIP transmission on the specified interface.')
stnRipCircExtListen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtListen.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtListen.setDescription('Enable or disable RIP reception on the specified interface.')
stnRipCircExtPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnRipCircExtPoison.setStatus('current')
if mibBuilder.loadTexts: stnRipCircExtPoison.setDescription('Enable or disable operation of poison reverse on the specified interface. If poison is disabled, split-horizon operation is enabled.')
stnRipDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4), )
if mibBuilder.loadTexts: stnRipDetailsTable.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsTable.setDescription('This table provides additional information about failed rip messages. When the table reaches its maximum size and a new entry needs to be added, the entire table will be cleared.')
stnRipDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnRipDetailsIndex"))
if mibBuilder.loadTexts: stnRipDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsEntry.setDescription('An entry within the STN RIP Details Table.')
stnRipDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: stnRipDetailsIndex.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsIndex.setDescription('A unique index for this table.')
stnRipDetailsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsSource.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsSource.setDescription('The source address within the packet.')
stnRipDetailsDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsDest.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsDest.setDescription('The destination address within the packet.')
stnRipDetailsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("bad-packet", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsType.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsType.setDescription('Indicates the type of error')
stnRipDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsTimeStamp.setDescription('Value of sysUpTime when this entry was added.')
stnRipDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRipDetailsHeader.setStatus('current')
if mibBuilder.loadTexts: stnRipDetailsHeader.setDescription('IP header of this error packet.')
stnOspfRouterLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfRouterLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfRouterLsaCount.setDescription('The number of router (LS type 1) link-state advertisements in the link-state database.')
stnOspfNetworkLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfNetworkLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfNetworkLsaCount.setDescription('The number of network (LS type 2) link-state advertisements in the link-state database.')
stnOspfSummaryLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfSummaryLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfSummaryLsaCount.setDescription('The number of summary (LS type 3) link-state advertisements in the link-state database.')
stnOspfASBRSummaryLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfASBRSummaryLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfASBRSummaryLsaCount.setDescription('The number of ASBR-summary (LS type 4) link-state advertisements in the link-state database.')
stnOspfExternLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfExternLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfExternLsaCount.setDescription('The number of AS-external (LS type 5) link-state advertisements in the link-state database.')
stnOspfMcastGroupLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfMcastGroupLsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfMcastGroupLsaCount.setDescription('The number of group-membership (LS type 6) link-state advertisements in the link-state database.')
stnOspfExternT7LsaCount = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfExternT7LsaCount.setStatus('current')
if mibBuilder.loadTexts: stnOspfExternT7LsaCount.setDescription('The number of Type-7 link-state advertisements in the link-state database.')
stnOspfDetailsTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9), )
if mibBuilder.loadTexts: stnOspfDetailsTable.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsTable.setDescription('This table provides additional information about failed Ospf messages. When the table reaches its maximum size and a new entry needs to be added, the entire table will be cleared.')
stnOspfDetailsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1), ).setIndexNames((0, "STN-IPROUTING-MIB", "stnOspfDetailsIndex"))
if mibBuilder.loadTexts: stnOspfDetailsEntry.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsEntry.setDescription('An entry within the STN OSPF Details Table.')
stnOspfDetailsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: stnOspfDetailsIndex.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsIndex.setDescription('A unique index for this table.')
stnOspfDetailsPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsPacketType.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsPacketType.setDescription('The OSPF packet type.')
stnOspfDetailsRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsRouterId.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsRouterId.setDescription('The router ID within the packet.')
stnOspfDetailsAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsAreaId.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsAreaId.setDescription('The area ID within the packet.')
stnOspfDetailsErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ("optionMismatch", 10), ("lanSubnetMismatch", 11), ("designatedRouterMismatch", 12), ("myRouterId", 13), ("invalidLength", 14), ("neighborNotFound", 15), ("md5SequenceError", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsErrorType.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsErrorType.setDescription('The type of errors caused this packet being dropped.')
stnOspfDetailsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsTimeStamp.setDescription('Value of sysUpTime when this entry was added.')
stnOspfDetailsHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 12, 4, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnOspfDetailsHeader.setStatus('current')
if mibBuilder.loadTexts: stnOspfDetailsHeader.setDescription('OSPF header of this error packet.')
mibBuilder.exportSymbols("STN-IPROUTING-MIB", stnOspfDetailsRouterId=stnOspfDetailsRouterId, stnIpRtCacheRouteType=stnIpRtCacheRouteType, stnArpCircExtTable=stnArpCircExtTable, stnIpRtCacheHits=stnIpRtCacheHits, stnIpCircExtIfIndex=stnIpCircExtIfIndex, stnArpCircExtIfIndex=stnArpCircExtIfIndex, stnOspfDetailsTable=stnOspfDetailsTable, stnIpCircExtMaxMtu=stnIpCircExtMaxMtu, stnOspfExternT7LsaCount=stnOspfExternT7LsaCount, stnIpCircExtBcastAddr=stnIpCircExtBcastAddr, stnIpCurrentRoutingTableSize=stnIpCurrentRoutingTableSize, stnRipCircExtListen=stnRipCircExtListen, stnArpExtSendRequests=stnArpExtSendRequests, stnOspfDetailsIndex=stnOspfDetailsIndex, stnIpNotificationPrefix=stnIpNotificationPrefix, stnOspfDetailsEntry=stnOspfDetailsEntry, stnRipCircExtTalk=stnRipCircExtTalk, stnIpDetailsTimeStamp=stnIpDetailsTimeStamp, stnIp=stnIp, stnRipCircExtTable=stnRipCircExtTable, stnArpCircExtEntry=stnArpCircExtEntry, stnIpCircExtOperState=stnIpCircExtOperState, stnIpCircExtMaxReasm=stnIpCircExtMaxReasm, stnOspfDetailsTimeStamp=stnOspfDetailsTimeStamp, stnOspfTraps=stnOspfTraps, stnIpDetailsSource=stnIpDetailsSource, PYSNMP_MODULE_ID=stnIpRouting, stnIpRtCacheNextHop=stnIpRtCacheNextHop, stnIpEngineRouteLimitExceeded=stnIpEngineRouteLimitExceeded, stnArpExtRcvdReplies=stnArpExtRcvdReplies, stnIpCircExtEntry=stnIpCircExtEntry, stnIpRtCache=stnIpRtCache, stnOspfRouterLsaCount=stnOspfRouterLsaCount, stnIpDetailsType=stnIpDetailsType, stnOspfDetailsPacketType=stnOspfDetailsPacketType, stnArpExtRcvdRequests=stnArpExtRcvdRequests, stnIpRtCacheIfIndex=stnIpRtCacheIfIndex, stnIpDetailsHeader=stnIpDetailsHeader, stnOspfDetailsErrorType=stnOspfDetailsErrorType, stnRipDetailsTimeStamp=stnRipDetailsTimeStamp, stnIpRtCacheEntry=stnIpRtCacheEntry, stnArpExtSendReplies=stnArpExtSendReplies, stnRipDetailsTable=stnRipDetailsTable, stnOspf=stnOspf, stnRipDetailsDest=stnRipDetailsDest, stnArpCircExtWanProxy=stnArpCircExtWanProxy, stnIpRtCacheRemovals=stnIpRtCacheRemovals, stnIpRtCacheEntries=stnIpRtCacheEntries, stnRipDetailsEntry=stnRipDetailsEntry, stnIpRoutingCacheTable=stnIpRoutingCacheTable, stnIpDetailsDest=stnIpDetailsDest, stnOspfDetailsHeader=stnOspfDetailsHeader, stnIpRtCacheIpMask=stnIpRtCacheIpMask, stnIpRtCacheStatus=stnIpRtCacheStatus, stnRipExtAdminState=stnRipExtAdminState, stnIpCircExtAdminState=stnIpCircExtAdminState, stnOspfSummaryLsaCount=stnOspfSummaryLsaCount, stnIpRouting=stnIpRouting, stnIpDetailsIndex=stnIpDetailsIndex, stnOspfDetailsAreaId=stnOspfDetailsAreaId, stnArpCircExtDoProxy=stnArpCircExtDoProxy, stnBgp=stnBgp, stnOspfASBRSummaryLsaCount=stnOspfASBRSummaryLsaCount, stnRipDetailsHeader=stnRipDetailsHeader, stnRipCircExtPoison=stnRipCircExtPoison, stnIpNotification=stnIpNotification, stnArp=stnArp, stnRipDetailsIndex=stnRipDetailsIndex, stnIpRtCacheMisses=stnIpRtCacheMisses, stnIpRoutingVars=stnIpRoutingVars, stnRipCircExtIfIndex=stnRipCircExtIfIndex, stnRipDetailsType=stnRipDetailsType, stnIpTrapVars=stnIpTrapVars, stnIpCircExtTable=stnIpCircExtTable, stnIpMaxRoutingTableSize=stnIpMaxRoutingTableSize, stnIpRtCacheIpAddress=stnIpRtCacheIpAddress, stnRipExtUpdateTime=stnRipExtUpdateTime, stnOspfExternLsaCount=stnOspfExternLsaCount, stnIpDetailsEntry=stnIpDetailsEntry, stnRipDetailsSource=stnRipDetailsSource, stnOspfMcastGroupLsaCount=stnOspfMcastGroupLsaCount, stnIpCircExtIpAddress=stnIpCircExtIpAddress, stnArpExtTtl=stnArpExtTtl, stnIpRouterRouteLimitExceeded=stnIpRouterRouteLimitExceeded, stnOspfNetworkLsaCount=stnOspfNetworkLsaCount, stnRip=stnRip, stnIpTraps=stnIpTraps, stnArpCircExtDoResp=stnArpCircExtDoResp, stnRipCircExtEntry=stnRipCircExtEntry, stnIpDetailsTable=stnIpDetailsTable, stnIpCircExtIpMask=stnIpCircExtIpMask)
