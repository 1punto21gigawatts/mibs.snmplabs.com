#
# PySNMP MIB module HUAWEI-UNIMNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-UNIMNG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Integer32, Counter32, Unsigned32, Gauge32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, MibIdentifier, iso, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Integer32", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "MibIdentifier", "iso", "ModuleIdentity", "NotificationType")
DisplayString, MacAddress, RowStatus, AutonomousType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "AutonomousType", "TextualConvention")
hwUnimngMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327))
hwUnimngMIB.setRevisions(('2015-07-09 14:07', '2015-01-09 14:07', '2014-11-18 15:30', '2014-10-29 16:57', '2014-10-23 15:30', '2014-09-11 15:30', '2014-08-19 15:30', '2014-07-10 12:50', '2014-03-03 20:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwUnimngMIB.setRevisionsDescriptions(('Add new node hwAsVpnInstance ', 'Add new trap node hwTplmDirectCmdRecoverFail LSWCCB-9570', 'Modify node description LSWV2R7-9213 at 2014-11-18', 'Modify node description LSWCCB-8222 at 2014-10-29', 'Modify as entity trap at 2014-10-23', 'Add new trap node at 2014-9-11', 'Modify node description LSWCCB-6116 LSWCCB-6553 LSWCCB-6908 at 2014-8-19', 'Add trap node hwTplmCmdExecuteSuccessfulNotify at 2014-7-10', 'Create mib.',))
if mibBuilder.loadTexts: hwUnimngMIB.setLastUpdated('201507091407Z')
if mibBuilder.loadTexts: hwUnimngMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwUnimngMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com")
if mibBuilder.loadTexts: hwUnimngMIB.setDescription('This MIB contains private managed object definitions for Unified Man agement Framework.')
class AlarmStatus(TextualConvention, Bits):
    reference = "ITU Recommendation X.731, 'Information Technology - Open Systems Interconnection - System Management: State Management Function', 1992"
    description = 'Represents the possible values of alarm status. When no bits of this attribute are set, then none of the status conditions described below are present. When the value of under repair is set, the resource is currently being repaired. When the value of critical is set, one or more critical alarms are active against the resource. When the value of major is set, one or more major alarms are active against the resource. When the value of minor is set, one or more minor alarms are active against the resource. When the value of warning is set, one or more warning alarms are active against the resource. When the value of indeterminate is set, one or more alarms of indeterminate severity are active against the resource. When the value of alarm outstanding is set, one or more alarms is active against the resource. The fault may or may not be disabling. '
    status = 'current'
    namedValues = NamedValues(("notSupported", 0), ("underRepair", 1), ("critical", 2), ("major", 3), ("minor", 4), ("alarmOutstanding", 5), ("warning", 6), ("indeterminate", 7))

hwUnimngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 1))
hwUniMngEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwUniMngEnable.setStatus('current')
if mibBuilder.loadTexts: hwUniMngEnable.setDescription('Unimng enable status.')
hwAsmngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2))
hwAsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1), )
if mibBuilder.loadTexts: hwAsTable.setStatus('current')
if mibBuilder.loadTexts: hwAsTable.setDescription('AS table entry. ')
hwAsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIndex"))
if mibBuilder.loadTexts: hwAsEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsEntry.setDescription('The entry of AS table.')
hwAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIndex.setStatus('current')
if mibBuilder.loadTexts: hwAsIndex.setDescription('AS index.')
hwAsHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwAsHardwareVersion.setDescription('The hardware version of AS.')
hwAsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwAsIpAddress.setDescription('The ip address of AS.')
hwAsIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsIpNetMask.setStatus('current')
if mibBuilder.loadTexts: hwAsIpNetMask.setDescription('The ip net mask of AS.')
hwAsAccessUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsAccessUser.setStatus('current')
if mibBuilder.loadTexts: hwAsAccessUser.setDescription('The access user number of AS.')
hwAsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsMac.setStatus('current')
if mibBuilder.loadTexts: hwAsMac.setDescription('The MAC address of AS.')
hwAsSn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSn.setStatus('current')
if mibBuilder.loadTexts: hwAsSn.setDescription('The SN of AS.')
hwAsSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSysName.setStatus('current')
if mibBuilder.loadTexts: hwAsSysName.setDescription('The Name of AS.')
hwAsRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("versionMismatch", 2), ("fault", 3), ("normal", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsRunState.setStatus('current')
if mibBuilder.loadTexts: hwAsRunState.setDescription('The run state of AS.')
hwAsSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwAsSoftwareVersion.setDescription('The software version of AS.')
hwAsModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsModel.setStatus('current')
if mibBuilder.loadTexts: hwAsModel.setDescription('The model of AS. ')
hwAsDns = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsDns.setStatus('current')
if mibBuilder.loadTexts: hwAsDns.setDescription('The DNS of AS.')
hwAsOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 13), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hwAsOnlineTime.setDescription('The online time of AS.')
hwAsCpuUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsCpuUseage.setStatus('current')
if mibBuilder.loadTexts: hwAsCpuUseage.setDescription('The cpu usage of AS.')
hwAsMemoryUseage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsMemoryUseage.setStatus('current')
if mibBuilder.loadTexts: hwAsMemoryUseage.setDescription('The memory usage of AS.')
hwAsSysMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 16), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSysMac.setStatus('current')
if mibBuilder.loadTexts: hwAsSysMac.setDescription('The system MAC address of AS.')
hwAsStackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsStackEnable.setStatus('current')
if mibBuilder.loadTexts: hwAsStackEnable.setDescription('Whether AS is stack enable or disable.')
hwAsGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsGatewayIp.setStatus('current')
if mibBuilder.loadTexts: hwAsGatewayIp.setDescription("The gateway's IP address of AS.")
hwAsVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwAsVpnInstance.setDescription('The VPN instance of AS.')
hwAsRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 1, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwAsRowstatus.setDescription('The RowStatus of this table.')
hwAsIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2), )
if mibBuilder.loadTexts: hwAsIfTable.setStatus('current')
if mibBuilder.loadTexts: hwAsIfTable.setDescription('AS interface table entry.')
hwAsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIfIndex"))
if mibBuilder.loadTexts: hwAsIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsIfEntry.setDescription('The entry of AS If table.')
hwAsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAsIfIndex.setDescription('The interface index of AS.')
hwAsIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfDescr.setStatus('current')
if mibBuilder.loadTexts: hwAsIfDescr.setDescription('The interface description of AS.')
hwAsIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfType.setStatus('current')
if mibBuilder.loadTexts: hwAsIfType.setDescription('The interface type of AS.')
hwAsIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsIfMtu.setStatus('current')
if mibBuilder.loadTexts: hwAsIfMtu.setDescription('The interface MTU of AS.')
hwAsIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAsIfSpeed.setDescription("An estimate of the as interface's current bandwidth in bits per second.")
hwAsIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: hwAsIfPhysAddress.setDescription('The physical address of AS interface.')
hwAsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsIfAdminStatus.setDescription('The administration stauts of AS interface.')
hwAsIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsIfOperStatus.setDescription('The operation stauts of AS interface.')
hwAsIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfInUcastPkts.setDescription('The number of unicast packets received on the interface of AS. ')
hwAsIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfOutUcastPkts.setDescription('The number of unicast packets sent on the interface of AS. ')
hwAsIfXTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3), )
if mibBuilder.loadTexts: hwAsIfXTable.setStatus('current')
if mibBuilder.loadTexts: hwAsIfXTable.setDescription('The extent table of AS.')
hwAsIfXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIfIndex"))
if mibBuilder.loadTexts: hwAsIfXEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsIfXEntry.setDescription('The entry of table.')
hwAsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfName.setStatus('current')
if mibBuilder.loadTexts: hwAsIfName.setDescription('The name of AS interface.')
hwAsIfLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsIfLinkUpDownTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hwAsIfLinkUpDownTrapEnable.setDescription('Indicates whether linkUp/linkDown traps should be generated for this as interface.')
hwAsIfHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfHighSpeed.setStatus('current')
if mibBuilder.loadTexts: hwAsIfHighSpeed.setDescription("An estimate of the as interface's current bandwidth in units of 1,000,000 bits per second.")
hwAsIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsIfAlias.setStatus('current')
if mibBuilder.loadTexts: hwAsIfAlias.setDescription("This object is an 'alias' name for the AS's interface as specified by a network manager, and provides a non-volatile 'handle' for the interface.")
hwAsIfAsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfAsId.setStatus('current')
if mibBuilder.loadTexts: hwAsIfAsId.setDescription('The ID of AS.')
hwAsIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: hwAsIfHCOutOctets.setDescription('The total number of octets sent on the interface of AS.')
hwAsIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfInMulticastPkts.setDescription('The number of multicast packets received on the interface of AS. ')
hwAsIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfInBroadcastPkts.setDescription('The number of broadcast packets received on the interface of AS. ')
hwAsIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfOutMulticastPkts.setDescription('The number of multicast packets sent on the interface of AS. ')
hwAsIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: hwAsIfOutBroadcastPkts.setDescription('The number of broadcast packets sent on the interface of AS. ')
hwAsIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsIfHCInOctets.setStatus('current')
if mibBuilder.loadTexts: hwAsIfHCInOctets.setDescription('The total number of octets received on the interface of AS.')
hwAsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 4), )
if mibBuilder.loadTexts: hwAsSlotTable.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotTable.setDescription('The slot table of AS.')
hwAsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 4, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIndex"), (0, "HUAWEI-UNIMNG-MIB", "hwAsSlotId"))
if mibBuilder.loadTexts: hwAsSlotEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotEntry.setDescription('The entry of table.')
hwAsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hwAsSlotId.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotId.setDescription('The ID of AS slot.')
hwAsSlotState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSlotState.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotState.setDescription('The state of AS slot.')
hwAsSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 4, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsSlotRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotRowStatus.setDescription('The RowStatus of this table.')
hwAsmngGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 5))
hwAsAutoReplaceEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsAutoReplaceEnable.setStatus('current')
if mibBuilder.loadTexts: hwAsAutoReplaceEnable.setDescription('The enable status of auto replace.')
hwAsAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auth", 1), ("noAuth", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAsAuthMode.setStatus('current')
if mibBuilder.loadTexts: hwAsAuthMode.setDescription('The authentication mode of AS.')
hwAsMacWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 6), )
if mibBuilder.loadTexts: hwAsMacWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: hwAsMacWhitelistTable.setDescription('The table of whitelist.')
hwAsMacWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 6, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsMacWhitelistMacAddr"))
if mibBuilder.loadTexts: hwAsMacWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsMacWhitelistEntry.setDescription('The entry of table.')
hwAsMacWhitelistMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwAsMacWhitelistMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwAsMacWhitelistMacAddr.setDescription('The MAC address of white list.')
hwAsMacWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsMacWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsMacWhitelistRowStatus.setDescription('The RowStatus of table.')
hwAsMacBlacklistTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 7), )
if mibBuilder.loadTexts: hwAsMacBlacklistTable.setStatus('current')
if mibBuilder.loadTexts: hwAsMacBlacklistTable.setDescription('The table of blacklist.')
hwAsMacBlacklistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 7, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsMacBlacklistMacAddr"))
if mibBuilder.loadTexts: hwAsMacBlacklistEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsMacBlacklistEntry.setDescription('The entry of table.')
hwAsMacBlacklistMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwAsMacBlacklistMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwAsMacBlacklistMacAddr.setDescription('The MAC address of black list.')
hwAsMacBlacklistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAsMacBlacklistRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsMacBlacklistRowStatus.setDescription('The RowStatus of table.')
hwAsEntityPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8), )
if mibBuilder.loadTexts: hwAsEntityPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalTable.setDescription('The physical table of AS.')
hwAsEntityPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIndex"), (0, "HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalIndex"))
if mibBuilder.loadTexts: hwAsEntityPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalEntry.setDescription('The entry of table.')
hwAsEntityPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: hwAsEntityPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalIndex.setDescription('The physical index of AS.')
hwAsEntityPhysicalDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalDescr.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalDescr.setDescription('A textual description of physical entity. ')
hwAsEntityPhysicalVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalVendorType.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalVendorType.setDescription('An indication of the vendor-specific hardware type of the physical entity. ')
hwAsEntityPhysicalContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalContainedIn.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalContainedIn.setDescription("The value of hwAsEntityPhysicalIndex for the physical entity which 'contains' this physical entity. ")
hwAsEntityPhysicalClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("chassis", 3), ("backplane", 4), ("container", 5), ("powerSupply", 6), ("fan", 7), ("sensor", 8), ("module", 9), ("port", 10), ("stack", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalClass.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalClass.setDescription('An indication of the general hardware type of the physical entity.')
hwAsEntityPhysicalParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalParentRelPos.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalParentRelPos.setDescription("An indication of the relative position of this 'child' component among all its 'sibling' components.")
hwAsEntityPhysicalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalName.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalName.setDescription('The textual name of the physical entity. ')
hwAsEntityPhysicalHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalHardwareRev.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalHardwareRev.setDescription('The vendor-specific hardware revision string for the physical entity. ')
hwAsEntityPhysicalFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalFirmwareRev.setDescription('The vendor-specific firmware revision string for the physical entity.')
hwAsEntityPhysicalSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalSoftwareRev.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalSoftwareRev.setDescription('The vendor-specific software revision string for the physical entity.')
hwAsEntityPhysicalSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalSerialNum.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalSerialNum.setDescription('The vendor-specific serial number string for the physical entity.')
hwAsEntityPhysicalMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 8, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPhysicalMfgName.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPhysicalMfgName.setDescription('The name of the manufacturer of this physical component.')
hwAsEntityStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9), )
if mibBuilder.loadTexts: hwAsEntityStateTable.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityStateTable.setDescription('The entity state table.')
hwAsEntityStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIndex"), (0, "HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalIndex"))
if mibBuilder.loadTexts: hwAsEntityStateEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityStateEntry.setDescription('The entry of table.')
hwAsEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13))).clone(namedValues=NamedValues(("notSupported", 1), ("locked", 2), ("shuttingDown", 3), ("unlocked", 4), ("up", 11), ("down", 12), ("loopback", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityAdminStatus.setDescription('The administrative state for this object.')
hwAsEntityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 11, 12, 13, 15, 16, 17))).clone(namedValues=NamedValues(("notSupported", 1), ("disabled", 2), ("enabled", 3), ("offline", 4), ("up", 11), ("down", 12), ("connect", 13), ("protocolUp", 15), ("linkUp", 16), ("linkDown", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityOperStatus.setDescription('The operational state for this object.')
hwAsEntityStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("hotStandby", 2), ("coldStandby", 3), ("providingService", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityStandbyStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityStandbyStatus.setDescription('This object is used for monitoring standby status.')
hwAsEntityAlarmLight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1, 4), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityAlarmLight.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityAlarmLight.setDescription('The alarm status for this entity.')
hwAsEntityPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("copper", 2), ("fiber100", 3), ("fiber1000", 4), ("fiber10000", 5), ("opticalnotExist", 6), ("optical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntityPortType.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityPortType.setDescription('Indicates the type of the Ethernet interface.')
hwAsEntityAliasMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 10), )
if mibBuilder.loadTexts: hwAsEntityAliasMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityAliasMappingTable.setDescription('The entity alias mapping table.')
hwAsEntityAliasMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 10, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwAsIndex"), (0, "HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalIndex"), (0, "HUAWEI-UNIMNG-MIB", "hwAsEntryAliasLogicalIndexOrZero"))
if mibBuilder.loadTexts: hwAsEntityAliasMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwAsEntityAliasMappingEntry.setDescription('The entry of table.')
hwAsEntryAliasLogicalIndexOrZero = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hwAsEntryAliasLogicalIndexOrZero.setStatus('current')
if mibBuilder.loadTexts: hwAsEntryAliasLogicalIndexOrZero.setDescription('The value of this object identifies the logical entity.')
hwAsEntryAliasMappingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 2, 10, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAsEntryAliasMappingIdentifier.setStatus('current')
if mibBuilder.loadTexts: hwAsEntryAliasMappingIdentifier.setDescription('The value of this object identifies a particular conceptual row associated with the indicated entPhysicalIndex and logical index pair.')
hwTopomngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3))
hwTopomngExploreTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTopomngExploreTime.setStatus('current')
if mibBuilder.loadTexts: hwTopomngExploreTime.setDescription('Topology collect time in minutes.')
hwTopomngLastCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopomngLastCollectDuration.setStatus('current')
if mibBuilder.loadTexts: hwTopomngLastCollectDuration.setDescription('Duration of the latest topology collection, measured in milliseconds.')
hwTopomngTopoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11), )
if mibBuilder.loadTexts: hwTopomngTopoTable.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTopoTable.setDescription('The topology table.')
hwTopomngTopoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTopoLocalHop"), (0, "HUAWEI-UNIMNG-MIB", "hwTopoLocalMac"), (0, "HUAWEI-UNIMNG-MIB", "hwTopoPeerDeviceIndex"))
if mibBuilder.loadTexts: hwTopomngTopoEntry.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTopoEntry.setDescription('The entry of topology table.')
hwTopoLocalHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hwTopoLocalHop.setStatus('current')
if mibBuilder.loadTexts: hwTopoLocalHop.setDescription('The topoloy hop.')
hwTopoLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: hwTopoLocalMac.setStatus('current')
if mibBuilder.loadTexts: hwTopoLocalMac.setDescription('The local device ID, defined by 6 bytes of MAC.')
hwTopoPeerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwTopoPeerDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: hwTopoPeerDeviceIndex.setDescription('The index of neighbor device.')
hwTopoPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwTopoPeerMac.setDescription('The neighbor device ID, defined by 6 bytes of MAC.')
hwTopoLocalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoLocalPortName.setStatus('current')
if mibBuilder.loadTexts: hwTopoLocalPortName.setDescription('The port name of local device, same as ifName (defined in IETF RFC 2863).')
hwTopoPeerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoPeerPortName.setStatus('current')
if mibBuilder.loadTexts: hwTopoPeerPortName.setDescription('The port name of neighbor device, same as ifName (defined in IETF RFC 2863).')
hwTopoLocalTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoLocalTrunkId.setStatus('current')
if mibBuilder.loadTexts: hwTopoLocalTrunkId.setDescription('The trunk ID of local port, 65535 identify the local port is not in trunk.')
hwTopoPeerTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoPeerTrunkId.setStatus('current')
if mibBuilder.loadTexts: hwTopoPeerTrunkId.setDescription('The trunk ID of neighbor port, 65535 identify the neighbor port is not in trunk.')
hwTopoLocalRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("roleUC", 1), ("roleAS", 2), ("roleAP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoLocalRole.setStatus('current')
if mibBuilder.loadTexts: hwTopoLocalRole.setDescription('The role of local topology node.')
hwTopoPeerRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 3, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("roleUC", 1), ("roleAS", 2), ("roleAP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTopoPeerRole.setStatus('current')
if mibBuilder.loadTexts: hwTopoPeerRole.setDescription('The role of neighbor topology node.')
hwMbrmngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4))
hwMbrMngFabricPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2), )
if mibBuilder.loadTexts: hwMbrMngFabricPortTable.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortTable.setDescription('The table of fabric port information.')
hwMbrMngFabricPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwMbrMngASId"), (0, "HUAWEI-UNIMNG-MIB", "hwMbrMngFabricPortId"))
if mibBuilder.loadTexts: hwMbrMngFabricPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortEntry.setDescription('The entry of the table of fabric port information.')
hwMbrMngASId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwMbrMngASId.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngASId.setDescription('AS index, is used to specify thd AS. 65535 represents the parent node.')
hwMbrMngFabricPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwMbrMngFabricPortId.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortId.setDescription('The Fabric-port index.')
hwMbrMngFabricPortMemberIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMbrMngFabricPortMemberIfName.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortMemberIfName.setDescription("Interface name of the Fabric-port's member.")
hwMbrMngFabricPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downDirection", 1), ("upDirection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMbrMngFabricPortDirection.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortDirection.setDescription('The direction of Fabric-port.')
hwMbrMngFabricPortIndirectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMbrMngFabricPortIndirectFlag.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortIndirectFlag.setDescription('The indirect flag of Fabric-port.')
hwMbrMngFabricPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMbrMngFabricPortDescription.setStatus('current')
if mibBuilder.loadTexts: hwMbrMngFabricPortDescription.setDescription('The description of Fabric-port.')
hwVermngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5))
hwVermngGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 1))
hwVermngFileServerType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ftp", 1), ("sftp", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngFileServerType.setStatus('current')
if mibBuilder.loadTexts: hwVermngFileServerType.setDescription('The type of file server.')
hwVermngUpgradeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2), )
if mibBuilder.loadTexts: hwVermngUpgradeInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoTable.setDescription('The table of AS upgrade information.')
hwVermngUpgradeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsIndex"))
if mibBuilder.loadTexts: hwVermngUpgradeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoEntry.setDescription('The entry of the table of AS upgrade information.')
hwVermngUpgradeInfoAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsIndex.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsIndex.setDescription('The ID of AS.')
hwVermngUpgradeInfoAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsName.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsName.setDescription('The name of AS.')
hwVermngUpgradeInfoAsSysSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysSoftware.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysSoftware.setDescription('The filename of running system software of AS.')
hwVermngUpgradeInfoAsSysSoftwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysSoftwareVer.setDescription('The version of running system software of AS.')
hwVermngUpgradeInfoAsSysPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysPatch.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsSysPatch.setDescription('The filename of running patch of AS.')
hwVermngUpgradeInfoAsDownloadSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadSoftware.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadSoftware.setDescription('The filename of system software which will be downloaded to AS.')
hwVermngUpgradeInfoAsDownloadSoftwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadSoftwareVer.setDescription('The version of system software which will be downloaded to AS..')
hwVermngUpgradeInfoAsDownloadPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadPatch.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsDownloadPatch.setDescription('The filename of patch which will be downloaded to AS.')
hwVermngUpgradeInfoAsUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("noUpgrade", 1), ("upgrading", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeState.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeState.setDescription('The upgrade status of AS.')
hwVermngUpgradeInfoAsUpgradeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("verSync", 1), ("manual", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeType.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeType.setDescription('The type of upgrade.')
hwVermngUpgradeInfoAsFilePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("systemSoftware", 1), ("patch", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsFilePhase.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsFilePhase.setDescription('The file type which is in downloading.')
hwVermngUpgradeInfoAsUpgradePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("downloadFile", 1), ("wait", 2), ("activateFile", 3), ("reboot", 4), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradePhase.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradePhase.setDescription('The state in downloading file.')
hwVermngUpgradeInfoAsUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("successfully", 1), ("failed", 2), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsUpgradeResult.setDescription('The result of upgrade.')
hwVermngUpgradeInfoAsErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsErrorCode.setDescription('The error code in upgrading.')
hwVermngUpgradeInfoAsErrorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsErrorDescr.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoAsErrorDescr.setDescription('The eroor description in upgrading.')
hwVermngAsTypeCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3), )
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoTable.setDescription('The table of configuration with AS type.')
hwVermngAsTypeCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoAsTypeIndex"))
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoEntry.setDescription('The entry of AS type configuration table.')
hwVermngAsTypeCfgInfoAsTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoAsTypeIndex.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoAsTypeIndex.setDescription('The index of AS type.')
hwVermngAsTypeCfgInfoAsTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoAsTypeName.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoAsTypeName.setDescription('The name of AS type.')
hwVermngAsTypeCfgInfoSystemSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoSystemSoftware.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoSystemSoftware.setDescription('The filename of system software configured.')
hwVermngAsTypeCfgInfoSystemSoftwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoSystemSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoSystemSoftwareVer.setDescription('The version of system software.')
hwVermngAsTypeCfgInfoPatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoPatch.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoPatch.setDescription('The filename of patch configured.')
hwVermngAsTypeCfgInfoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 5, 3, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoRowStatus.setDescription('The RowStatus of table.')
hwTplmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6))
hwTplmASGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11), )
if mibBuilder.loadTexts: hwTplmASGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupTable.setDescription('The table of template management with AS group.')
hwTplmASGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTplmASGroupIndex"))
if mibBuilder.loadTexts: hwTplmASGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupEntry.setDescription('The entry of AS group table.')
hwTplmASGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwTplmASGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupIndex.setDescription('The index of AS group table.')
hwTplmASGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupName.setDescription('The name of AS group.')
hwTplmASAdminProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASAdminProfileName.setStatus('current')
if mibBuilder.loadTexts: hwTplmASAdminProfileName.setDescription("The name of AS group's admin profile.")
hwTplmASGroupProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASGroupProfileStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupProfileStatus.setDescription("The status of AS group's admin profile.")
hwTplmASGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 11, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupRowStatus.setDescription('The row status of as group table.')
hwTplmASTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 12), )
if mibBuilder.loadTexts: hwTplmASTable.setStatus('current')
if mibBuilder.loadTexts: hwTplmASTable.setDescription('The table of template management with AS.')
hwTplmASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 12, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTplmASId"))
if mibBuilder.loadTexts: hwTplmASEntry.setStatus('current')
if mibBuilder.loadTexts: hwTplmASEntry.setDescription('The entry of AS table.')
hwTplmASId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwTplmASId.setStatus('current')
if mibBuilder.loadTexts: hwTplmASId.setDescription('AS index.')
hwTplmASASGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASASGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTplmASASGroupName.setDescription('The name of AS group which the AS belongs to.')
hwTplmASRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 12, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmASRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmASRowStatus.setDescription('The row status of as table.')
hwTplmPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13), )
if mibBuilder.loadTexts: hwTplmPortGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupTable.setDescription('The table of template management with port group.')
hwTplmPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTplmPortGroupIndex"))
if mibBuilder.loadTexts: hwTplmPortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupEntry.setDescription('The entry of port group table.')
hwTplmPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 257)))
if mibBuilder.loadTexts: hwTplmPortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupIndex.setDescription('The index of port group table.')
hwTplmPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupName.setDescription('The name of port group.')
hwTplmPortGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("service", 1), ("ap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupType.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupType.setDescription('The type of port group.')
hwTplmPortGroupNetworkBasicProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupNetworkBasicProfile.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupNetworkBasicProfile.setDescription("The name of port group's network basic profile.")
hwTplmPortGroupNetworkEnhancedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupNetworkEnhancedProfile.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupNetworkEnhancedProfile.setDescription("The name of port group's network enhanced profile.")
hwTplmPortGroupUserAccessProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupUserAccessProfile.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupUserAccessProfile.setDescription("The name of port group's user access profile.")
hwTplmPortGroupProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupProfileStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupProfileStatus.setDescription("The status of port group's profile.")
hwTplmPortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 13, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupRowStatus.setDescription('The row status of port group table.')
hwTplmPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 14), )
if mibBuilder.loadTexts: hwTplmPortTable.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortTable.setDescription("The table of template management with AS's port.")
hwTplmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 14, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTplmPortIfIndex"))
if mibBuilder.loadTexts: hwTplmPortEntry.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortEntry.setDescription('The entry of port table.')
hwTplmPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: hwTplmPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortIfIndex.setDescription("The interface index of AS's port.")
hwTplmPortPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortPortGroupName.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortPortGroupName.setDescription("The name of port group which the AS's port belongs to.")
hwTplmPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 14, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTplmPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortRowStatus.setDescription('The row status of port table.')
hwTplmConfigManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15))
hwTplmConfigCommitAll = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTplmConfigCommitAll.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigCommitAll.setDescription('Apply configuration of template management to all ASs.')
hwTplmConfigManagementTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15, 2), )
if mibBuilder.loadTexts: hwTplmConfigManagementTable.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigManagementTable.setDescription('The table of committing configuration of template management.')
hwTplmConfigManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15, 2, 1), ).setIndexNames((0, "HUAWEI-UNIMNG-MIB", "hwTplmConfigManagementASId"))
if mibBuilder.loadTexts: hwTplmConfigManagementEntry.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigManagementEntry.setDescription('The entry of committing table.')
hwTplmConfigManagementASId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hwTplmConfigManagementASId.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigManagementASId.setDescription('AS index.')
hwTplmConfigManagementCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 6, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTplmConfigManagementCommit.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigManagementCommit.setDescription('Apply configuration of template management to the specified AS.')
hwUnimngNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31))
hwTopomngTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1))
hwTopomngTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1))
hwTopomngTrapLocalMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapLocalMac.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapLocalMac.setDescription('Topomng trap message local MAC, defined as the device ID.')
hwTopomngTrapLocalPortName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapLocalPortName.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapLocalPortName.setDescription('Topomng trap message local port name.')
hwTopomngTrapLocalTrunkId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapLocalTrunkId.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapLocalTrunkId.setDescription('Topomng trap message local trunk ID, 65535 defines a phy port.')
hwTopomngTrapPeerMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapPeerMac.setDescription('Topomng trap message peer MAC, defined as the device ID.')
hwTopomngTrapPeerPortName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapPeerPortName.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapPeerPortName.setDescription('Topomng trap message peer port name.')
hwTopomngTrapPeerTrunkId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapPeerTrunkId.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapPeerTrunkId.setDescription('Topomng trap message peer trunk ID, 65535 defines a phy port.')
hwTopomngTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTopomngTrapReason.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapReason.setDescription('Topomng trap message Reason.')
hwTopomngTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 2))
hwTopomngLinkNormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapReason"))
if mibBuilder.loadTexts: hwTopomngLinkNormal.setStatus('current')
if mibBuilder.loadTexts: hwTopomngLinkNormal.setDescription('The notification of topology link normal.')
hwTopomngLinkAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 1, 2, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapReason"))
if mibBuilder.loadTexts: hwTopomngLinkAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwTopomngLinkAbnormal.setDescription('The notification of topology link abnormal.')
hwAsmngTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2))
hwAsmngTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1))
hwAsmngTrapAsIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIndex.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIndex.setDescription('The AS index.')
hwAsmngTrapAsModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsModel.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsModel.setDescription('The model of AS.')
hwAsmngTrapAsSysName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsSysName.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsSysName.setDescription('The name of AS.')
hwAsmngTrapAsMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsMac.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsMac.setDescription('The MAC address of AS.')
hwAsmngTrapAsSn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 5), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsSn.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsSn.setDescription('The SN of AS.')
hwAsmngTrapAsIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIfIndex.setDescription('The interface index of AS.')
hwAsmngTrapAsIfOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIfOperStatus.setDescription('The operation stauts of AS.')
hwAsmngTrapAsFaultTimes = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsFaultTimes.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsFaultTimes.setDescription('The fault times of AS.')
hwAsmngTrapAsIfAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIfAdminStatus.setDescription('AS interface adminnistrator status.')
hwAsmngTrapAsIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 10), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIfName.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIfName.setDescription('The name of AS.')
hwAsmngTrapAsActualeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsActualeType.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsActualeType.setDescription('The actual type of AS.')
hwAsmngTrapAsVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsVersion.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsVersion.setDescription('The version of AS.')
hwAsmngTrapParentVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 13), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapParentVersion.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapParentVersion.setDescription('The version of parent.')
hwAsmngTrapAddedAsMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 14), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAddedAsMac.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAddedAsMac.setDescription('The MAC address of added AS.')
hwAsmngTrapAsSlotId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsSlotId.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsSlotId.setDescription('The slot ID of AS.')
hwAsmngTrapAddedAsSlotType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 16), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAddedAsSlotType.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAddedAsSlotType.setDescription('The slot type of added AS.')
hwAsmngTrapAsPermitNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsPermitNum.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsPermitNum.setDescription('The maxium number of permitted AS.')
hwAsmngTrapAsUnimngMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsUnimngMode.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsUnimngMode.setDescription('The UNI-MNG mode of AS.')
hwAsmngTrapParentUnimngMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapParentUnimngMode.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapParentUnimngMode.setDescription('The UNI-MNG mode of parent.')
hwAsmngTrapAsIfType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsIfType.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsIfType.setDescription('The interface type of AS.')
hwAsmngTrapAsOnlineFailReasonId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsOnlineFailReasonId.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsOnlineFailReasonId.setDescription('The reason ID of AS online failed.')
hwAsmngTrapAsOnlineFailReasonDesc = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 1, 22), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAsmngTrapAsOnlineFailReasonDesc.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapAsOnlineFailReasonDesc.setDescription('The description of AS online failed.')
hwAsmngTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2))
hwAsFaultNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsFaultTimes"))
if mibBuilder.loadTexts: hwAsFaultNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsFaultNotify.setDescription('This notification occurs when AS become fault.')
hwAsNormalNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"))
if mibBuilder.loadTexts: hwAsNormalNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsNormalNotify.setDescription('This notification occurs when AS become normal.')
hwAsAddOffLineNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"))
if mibBuilder.loadTexts: hwAsAddOffLineNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsAddOffLineNotify.setDescription('This notification occurs when added an AS offline.')
hwAsDelOffLineNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"))
if mibBuilder.loadTexts: hwAsDelOffLineNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsDelOffLineNotify.setDescription('This notification occurs when deleted an AS offline.')
hwAsPortStateChangeToDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 5)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfAdminStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfOperStatus"))
if mibBuilder.loadTexts: hwAsPortStateChangeToDownNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsPortStateChangeToDownNotify.setDescription('This notification occurs when port status changed to DOWN.')
hwAsPortStateChangeToUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 6)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfAdminStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfOperStatus"))
if mibBuilder.loadTexts: hwAsPortStateChangeToUpNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsPortStateChangeToUpNotify.setDescription('This notification occurs when port status changed to UP.')
hwAsModelNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 7)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsActualeType"))
if mibBuilder.loadTexts: hwAsModelNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsModelNotMatchNotify.setDescription('This notification occurs when the model of AS is mismatch.')
hwAsVersionNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 8)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsVersion"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapParentVersion"))
if mibBuilder.loadTexts: hwAsVersionNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsVersionNotMatchNotify.setDescription('This notification occurs when the version of AS is mismatch.')
hwAsNameConflictNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 9)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAddedAsMac"))
if mibBuilder.loadTexts: hwAsNameConflictNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsNameConflictNotify.setDescription('This notification occurs when the name of AS is conflicted.')
hwAsSlotModelNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 10)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAddedAsSlotType"))
if mibBuilder.loadTexts: hwAsSlotModelNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotModelNotMatchNotify.setDescription('This notification occurs when the slot model of AS is mismatch.')
hwAsFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 11)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsPermitNum"))
if mibBuilder.loadTexts: hwAsFullNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsFullNotify.setDescription('This notification occurs when the model of a slot is different from other slots.')
hwUnimngModeNotMatchNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 12)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsUnimngMode"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapParentUnimngMode"))
if mibBuilder.loadTexts: hwUnimngModeNotMatchNotify.setStatus('current')
if mibBuilder.loadTexts: hwUnimngModeNotMatchNotify.setDescription("This notification occurs when the UNI-MNG mode of AS is different parent's.")
hwAsBoardAddNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 13)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"))
if mibBuilder.loadTexts: hwAsBoardAddNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsBoardAddNotify.setDescription('This notification occurs when a slot is added.')
hwAsBoardDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 14)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"))
if mibBuilder.loadTexts: hwAsBoardDeleteNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsBoardDeleteNotify.setDescription('This notification occurs when a slot is deleted.')
hwAsBoardPlugInNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 15)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"))
if mibBuilder.loadTexts: hwAsBoardPlugInNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsBoardPlugInNotify.setDescription('This notification occurs when a slot is plugged in.')
hwAsBoardPlugOutNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 16)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"))
if mibBuilder.loadTexts: hwAsBoardPlugOutNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsBoardPlugOutNotify.setDescription('This notification occurs when a slot is pulled out.')
hwAsInBlacklistNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 17)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"))
if mibBuilder.loadTexts: hwAsInBlacklistNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsInBlacklistNotify.setDescription('This notification occurs when AS is in blacklist.')
hwAsUnconfirmedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 18)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"))
if mibBuilder.loadTexts: hwAsUnconfirmedNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsUnconfirmedNotify.setDescription('This notification occurs when AS is not confirmed.')
hwAsComboPortTypeChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 19)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfType"))
if mibBuilder.loadTexts: hwAsComboPortTypeChangeNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsComboPortTypeChangeNotify.setDescription('This notification occurs when combo type change.')
hwAsOnlineFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 20)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsOnlineFailReasonId"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsOnlineFailReasonDesc"))
if mibBuilder.loadTexts: hwAsOnlineFailNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsOnlineFailNotify.setDescription('This notification occurs when AS online failed.')
hwAsSlotIdInvalidNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 21)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"))
if mibBuilder.loadTexts: hwAsSlotIdInvalidNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsSlotIdInvalidNotify.setDescription('This notification occurs when the slot ID of AS is invalid.')
hwAsSysmacSwitchCfgErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 2, 2, 22)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"))
if mibBuilder.loadTexts: hwAsSysmacSwitchCfgErrNotify.setStatus('current')
if mibBuilder.loadTexts: hwAsSysmacSwitchCfgErrNotify.setDescription('This notification occurs when the configuration of system MAC address switching delay is error.')
hwUniMbrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3))
hwUniMbrTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1))
hwUniMbrLinkStatTrapLocalMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapLocalMac.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapLocalMac.setDescription('UNIMBR trap message local mac.')
hwUniMbrLinkStatTrapLocalPortName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapLocalPortName.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapLocalPortName.setDescription('UNIMBR trap message local port name.')
hwUniMbrLinkStatTrapChangeType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up2down", 1), ("down2up", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapChangeType.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrLinkStatTrapChangeType.setDescription('UNIMBR trap message changing type of link state.')
hwUniMbrTrapConnectErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 4), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrTrapConnectErrorReason.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrTrapConnectErrorReason.setDescription('The reason of UNIMBR fabric-port connect error.')
hwUniMbrTrapReceivePktRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrTrapReceivePktRate.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrTrapReceivePktRate.setDescription('AS Discover packet rate.')
hwUniMbrTrapAsIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrTrapAsIndex.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrTrapAsIndex.setDescription('AS index.')
hwUniMbrTrapAsSysName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 7), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrTrapAsSysName.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrTrapAsSysName.setDescription('Name of AS.')
hwUniMbrParaSynFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 8), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrParaSynFailReason.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrParaSynFailReason.setDescription('The reason of UNIMBR parameter synchronization failed.')
hwUniMbrTrapIllegalConfigReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 1, 9), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniMbrTrapIllegalConfigReason.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrTrapIllegalConfigReason.setDescription('The reason of UNIMBR illegal configuration.')
hwUniMbrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 2))
hwUniMbrConnectError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapConnectErrorReason"))
if mibBuilder.loadTexts: hwUniMbrConnectError.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrConnectError.setDescription('The notification of fabric-port connect error.')
hwUniMbrASDiscoverAttack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 2, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrLinkStatTrapLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapReceivePktRate"))
if mibBuilder.loadTexts: hwUniMbrASDiscoverAttack.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrASDiscoverAttack.setDescription('An AS discover packet attack is detected.')
hwUniMbrFabricPortMemberDelete = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 2, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrLinkStatTrapLocalPortName"))
if mibBuilder.loadTexts: hwUniMbrFabricPortMemberDelete.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrFabricPortMemberDelete.setDescription('The notification of deleting member of fabric port.')
hwUniMbrIllegalFabricConfig = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 3, 2, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapIllegalConfigReason"))
if mibBuilder.loadTexts: hwUniMbrIllegalFabricConfig.setStatus('current')
if mibBuilder.loadTexts: hwUniMbrIllegalFabricConfig.setDescription('The notification of IllegalFabricConfig.')
hwVermngTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 4))
hwVermngTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 4, 1))
hwVermngTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 4, 2))
hwVermngUpgradeFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 4, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsErrorCode"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsErrorDescr"))
if mibBuilder.loadTexts: hwVermngUpgradeFail.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeFail.setDescription('Upgrade failed.')
hwTplmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5))
hwTplmTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 1))
hwTplmTrapASName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTplmTrapASName.setStatus('current')
if mibBuilder.loadTexts: hwTplmTrapASName.setDescription('The name of AS.')
hwTplmTrapFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTplmTrapFailedReason.setStatus('current')
if mibBuilder.loadTexts: hwTplmTrapFailedReason.setDescription('The reason of failure.')
hwTplmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 2))
hwTplmCmdExecuteFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmTrapASName"), ("HUAWEI-UNIMNG-MIB", "hwTplmTrapFailedReason"))
if mibBuilder.loadTexts: hwTplmCmdExecuteFailedNotify.setStatus('current')
if mibBuilder.loadTexts: hwTplmCmdExecuteFailedNotify.setDescription('The notification of command execution failure.')
hwTplmCmdExecuteSuccessfulNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 2, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmTrapASName"))
if mibBuilder.loadTexts: hwTplmCmdExecuteSuccessfulNotify.setStatus('current')
if mibBuilder.loadTexts: hwTplmCmdExecuteSuccessfulNotify.setDescription('The notification of command execution failure cleared.')
hwTplmDirectCmdRecoverFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 5, 2, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmTrapASName"))
if mibBuilder.loadTexts: hwTplmDirectCmdRecoverFail.setStatus('current')
if mibBuilder.loadTexts: hwTplmDirectCmdRecoverFail.setDescription('The notification of direct command recovery failure.')
hwUniAsBaseTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6))
hwUniAsBaseTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1))
hwUniAsBaseAsName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseAsName.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseAsName.setDescription('The name of AS.')
hwUniAsBaseAsId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseAsId.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseAsId.setDescription('AS id.')
hwUniAsBaseEntityPhysicalIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntityPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntityPhysicalIndex.setDescription('The index of AS physical.')
hwUniAsBaseTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseTrapSeverity.setDescription('To describe the level of trap.')
hwUniAsBaseTrapProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseTrapProbableCause.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseTrapProbableCause.setDescription('To describe the probable cause of trap.')
hwUniAsBaseTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseTrapEventType.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseTrapEventType.setDescription('To describe the type of trap.')
hwUniAsBaseEntPhysicalContainedIn = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalContainedIn.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalContainedIn.setDescription('The value of entPhysicalIndex for the physical entity which contains this physical entity.')
hwUniAsBaseEntPhysicalName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalName.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalName.setDescription('The textual name of the physical entity.')
hwUniAsBaseRelativeResource = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseRelativeResource.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseRelativeResource.setDescription('This object may contain a key word to indicate the relative resource of an entity.')
hwUniAsBaseReasonDescription = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseReasonDescription.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseReasonDescription.setDescription('Reason description.')
hwUniAsBaseThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdType.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdType.setDescription('The index to indicate the type of threshold for an entry.')
hwUniAsBaseThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdValue.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdValue.setDescription('The current value that been measured.')
hwUniAsBaseThresholdUnit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdUnit.setDescription('The unit for this threshold value.')
hwUniAsBaseThresholdHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdHighWarning.setDescription('The normal warning threshold for rising alarm.')
hwUniAsBaseThresholdHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdHighCritical.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdHighCritical.setDescription('The critical alarm threshold for rising alarm.')
hwUniAsBaseThresholdLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdLowWarning.setDescription('The normal warning threshold for falling alarm.')
hwUniAsBaseThresholdLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 17), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdLowCritical.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdLowCritical.setDescription('The critical alarm threshold for falling alarm.')
hwUniAsBaseEntityTrapEntType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 18), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapEntType.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapEntType.setDescription('The entity type.')
hwUniAsBaseEntityTrapEntFaultID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapEntFaultID.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapEntFaultID.setDescription('To describe the fault id of trap.')
hwUniAsBaseEntityTrapCommunicateType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapCommunicateType.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntityTrapCommunicateType.setDescription('The communicate type.')
hwUniAsBaseThresholdEntValue = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdEntValue.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdEntValue.setDescription('The threshold value.')
hwUniAsBaseThresholdEntCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdEntCurrent.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdEntCurrent.setDescription('The current value that been measured.')
hwUniAsBaseEntPhysicalIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 23), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseEntPhysicalIndex.setDescription('The index of AS physical.')
hwUniAsBaseThresholdHwBaseThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdHwBaseThresholdType.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdHwBaseThresholdType.setDescription('The type of base threshold.')
hwUniAsBaseThresholdHwBaseThresholdIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 1, 25), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUniAsBaseThresholdHwBaseThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: hwUniAsBaseThresholdHwBaseThresholdIndex.setDescription('The index of base threshold.')
hwUniAsBaseTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2))
hwASEnvironmentTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 2))
hwASBrdTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASBrdTempAlarm.setStatus('current')
if mibBuilder.loadTexts: hwASBrdTempAlarm.setDescription('Temperature rise over or fall below the warning alarm threshold.')
hwASBrdTempResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 2, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASBrdTempResume.setStatus('current')
if mibBuilder.loadTexts: hwASBrdTempResume.setDescription('Temperature back to normal level.')
hwASBoardTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 3))
hwASBoardFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 3, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASBoardFail.setStatus('current')
if mibBuilder.loadTexts: hwASBoardFail.setDescription('Board become failure for some reason.')
hwASBoardFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 3, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASBoardFailResume.setStatus('current')
if mibBuilder.loadTexts: hwASBoardFailResume.setDescription('Board resume from failure.')
hwASOpticalTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 4))
hwASOpticalInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 4, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASOpticalInvalid.setStatus('current')
if mibBuilder.loadTexts: hwASOpticalInvalid.setDescription('Optical Module is invalid for some reason.')
hwASOpticalInvalidResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 4, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASOpticalInvalidResume.setStatus('current')
if mibBuilder.loadTexts: hwASOpticalInvalidResume.setDescription('Optical Module resume from invalid situation.')
hwASPowerTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 5))
hwASPowerRemove = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 5, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASPowerRemove.setStatus('current')
if mibBuilder.loadTexts: hwASPowerRemove.setDescription('Power has been removed.')
hwASPowerInsert = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 5, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASPowerInsert.setStatus('current')
if mibBuilder.loadTexts: hwASPowerInsert.setDescription('Power has been inserted.')
hwASPowerInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 5, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASPowerInvalid.setStatus('current')
if mibBuilder.loadTexts: hwASPowerInvalid.setDescription('Power is invalid for some reason.')
hwASPowerInvalidResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 5, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASPowerInvalidResume.setStatus('current')
if mibBuilder.loadTexts: hwASPowerInvalidResume.setDescription('Power resume from invalid situation.')
hwASFanTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 6))
hwASFanRemove = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 6, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASFanRemove.setStatus('current')
if mibBuilder.loadTexts: hwASFanRemove.setDescription('Fan has been removed.')
hwASFanInsert = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 6, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASFanInsert.setStatus('current')
if mibBuilder.loadTexts: hwASFanInsert.setDescription('Fan has been inserted.')
hwASFanInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 6, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASFanInvalid.setStatus('current')
if mibBuilder.loadTexts: hwASFanInvalid.setDescription('Fan is invalid for some reason.')
hwASFanInvalidResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 6, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASFanInvalidResume.setStatus('current')
if mibBuilder.loadTexts: hwASFanInvalidResume.setDescription('Fan resume from invalid situation.')
hwASCommunicateTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 7))
hwASCommunicateError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 7, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapCommunicateType"))
if mibBuilder.loadTexts: hwASCommunicateError.setStatus('current')
if mibBuilder.loadTexts: hwASCommunicateError.setDescription('Communication error has been detected.')
hwASCommunicateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 7, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapCommunicateType"))
if mibBuilder.loadTexts: hwASCommunicateResume.setStatus('current')
if mibBuilder.loadTexts: hwASCommunicateResume.setDescription('Resume from communication error situation.')
hwASCPUTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 8))
hwASCPUUtilizationRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 8, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASCPUUtilizationRising.setStatus('current')
if mibBuilder.loadTexts: hwASCPUUtilizationRising.setDescription('CPU utilization overrun.')
hwASCPUUtilizationResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 8, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASCPUUtilizationResume.setStatus('current')
if mibBuilder.loadTexts: hwASCPUUtilizationResume.setDescription('CPU utilization back to normal level.')
hwASMemoryTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 9))
hwASMemUtilizationRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 9, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASMemUtilizationRising.setStatus('current')
if mibBuilder.loadTexts: hwASMemUtilizationRising.setDescription('Memory utilization overrun.')
hwASMemUtilizationResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 9, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"))
if mibBuilder.loadTexts: hwASMemUtilizationResume.setStatus('current')
if mibBuilder.loadTexts: hwASMemUtilizationResume.setDescription('Memory utilization back to normal level.')
hwASMadTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 10))
hwASMadConflictDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 10, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"))
if mibBuilder.loadTexts: hwASMadConflictDetect.setStatus('current')
if mibBuilder.loadTexts: hwASMadConflictDetect.setDescription('Notify the NMS that dual-active scenario is detected.')
hwASMadConflictResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 31, 6, 2, 10, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"))
if mibBuilder.loadTexts: hwASMadConflictResume.setStatus('current')
if mibBuilder.loadTexts: hwASMadConflictResume.setDescription('Notify the NMS that dual-active scenario is merged.')
hwUnimngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50))
hwTopomngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1))
hwTopomngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTopoGroup"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTopomngCompliance = hwTopomngCompliance.setStatus('current')
if mibBuilder.loadTexts: hwTopomngCompliance.setDescription('The compliance statement for SNMP entities supporting topomng.')
hwTopomngObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngExploreTime"), ("HUAWEI-UNIMNG-MIB", "hwTopomngLastCollectDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTopomngObjectsGroup = hwTopomngObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTopomngObjectsGroup.setDescription('The topomng objects group.')
hwTopomngTopoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopoPeerMac"), ("HUAWEI-UNIMNG-MIB", "hwTopoLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopoPeerPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopoLocalTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopoPeerTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopoLocalRole"), ("HUAWEI-UNIMNG-MIB", "hwTopoPeerRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTopomngTopoGroup = hwTopomngTopoGroup.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTopoGroup.setDescription('The topology table group.')
hwTopomngTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1, 1, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapLocalTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerMac"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerPortName"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapPeerTrunkId"), ("HUAWEI-UNIMNG-MIB", "hwTopomngTrapReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTopomngTrapObjectsGroup = hwTopomngTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapObjectsGroup.setDescription('The topomng trap objects group.')
hwTopomngTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 1, 1, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTopomngLinkNormal"), ("HUAWEI-UNIMNG-MIB", "hwTopomngLinkAbnormal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTopomngTrapsGroup = hwTopomngTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTopomngTrapsGroup.setDescription('The topomng notification objects group.')
hwAsmngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2))
hwAsmngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngAsGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngAsIfGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngAsIfXGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapsGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngGlobalObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngMacWhitelistGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngMacBlacklistGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngEntityPhysicalGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngEntityStateGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngEntityAliasMappingGroup"), ("HUAWEI-UNIMNG-MIB", "hwAsmngSlotGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngCompliance = hwAsmngCompliance.setStatus('current')
if mibBuilder.loadTexts: hwAsmngCompliance.setDescription('The compliance statement for SNMP entities supporting asmng.')
hwAsmngObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMngEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngObjectsGroup = hwAsmngObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngObjectsGroup.setDescription('The AS management objects group.')
hwAsmngAsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsHardwareVersion"), ("HUAWEI-UNIMNG-MIB", "hwAsIpAddress"), ("HUAWEI-UNIMNG-MIB", "hwAsIpNetMask"), ("HUAWEI-UNIMNG-MIB", "hwAsAccessUser"), ("HUAWEI-UNIMNG-MIB", "hwAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsSn"), ("HUAWEI-UNIMNG-MIB", "hwAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsRunState"), ("HUAWEI-UNIMNG-MIB", "hwAsSoftwareVersion"), ("HUAWEI-UNIMNG-MIB", "hwAsDns"), ("HUAWEI-UNIMNG-MIB", "hwAsOnlineTime"), ("HUAWEI-UNIMNG-MIB", "hwAsCpuUseage"), ("HUAWEI-UNIMNG-MIB", "hwAsMemoryUseage"), ("HUAWEI-UNIMNG-MIB", "hwAsSysMac"), ("HUAWEI-UNIMNG-MIB", "hwAsStackEnable"), ("HUAWEI-UNIMNG-MIB", "hwAsGatewayIp"), ("HUAWEI-UNIMNG-MIB", "hwAsRowstatus"), ("HUAWEI-UNIMNG-MIB", "hwAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsVpnInstance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngAsGroup = hwAsmngAsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngAsGroup.setDescription('The as table group.')
hwAsmngAsIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsIfDescr"), ("HUAWEI-UNIMNG-MIB", "hwAsIfType"), ("HUAWEI-UNIMNG-MIB", "hwAsIfMtu"), ("HUAWEI-UNIMNG-MIB", "hwAsIfSpeed"), ("HUAWEI-UNIMNG-MIB", "hwAsIfPhysAddress"), ("HUAWEI-UNIMNG-MIB", "hwAsIfAdminStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsIfInUcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfOutUcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfOperStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngAsIfGroup = hwAsmngAsIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngAsIfGroup.setDescription('The as table group.')
hwAsmngAsIfXGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsIfLinkUpDownTrapEnable"), ("HUAWEI-UNIMNG-MIB", "hwAsIfHighSpeed"), ("HUAWEI-UNIMNG-MIB", "hwAsIfAlias"), ("HUAWEI-UNIMNG-MIB", "hwAsIfInUcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfOutUcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfHCOutOctets"), ("HUAWEI-UNIMNG-MIB", "hwAsIfInMulticastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfInBroadcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfOutMulticastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfOutBroadcastPkts"), ("HUAWEI-UNIMNG-MIB", "hwAsIfHCInOctets"), ("HUAWEI-UNIMNG-MIB", "hwAsIfAsId"), ("HUAWEI-UNIMNG-MIB", "hwAsIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngAsIfXGroup = hwAsmngAsIfXGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngAsIfXGroup.setDescription('The as table group.')
hwAsmngTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 5)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsModel"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSn"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfIndex"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfOperStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsFaultTimes"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfAdminStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfName"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsActualeType"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsVersion"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapParentVersion"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAddedAsMac"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsSlotId"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAddedAsSlotType"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsPermitNum"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsUnimngMode"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapParentUnimngMode"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsIfType"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsOnlineFailReasonId"), ("HUAWEI-UNIMNG-MIB", "hwAsmngTrapAsOnlineFailReasonDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngTrapObjectsGroup = hwAsmngTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapObjectsGroup.setDescription('The AS management trap objects group.')
hwAsmngTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 6)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsFaultNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsNormalNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsAddOffLineNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsDelOffLineNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsPortStateChangeToDownNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsPortStateChangeToUpNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsModelNotMatchNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsVersionNotMatchNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsNameConflictNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsSlotModelNotMatchNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsFullNotify"), ("HUAWEI-UNIMNG-MIB", "hwUnimngModeNotMatchNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsBoardAddNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsBoardDeleteNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsBoardPlugInNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsBoardPlugOutNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsInBlacklistNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsUnconfirmedNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsComboPortTypeChangeNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsOnlineFailNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsSlotIdInvalidNotify"), ("HUAWEI-UNIMNG-MIB", "hwAsSysmacSwitchCfgErrNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngTrapsGroup = hwAsmngTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngTrapsGroup.setDescription('The AS management notification objects group.')
hwAsmngGlobalObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 7)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsAutoReplaceEnable"), ("HUAWEI-UNIMNG-MIB", "hwAsAuthMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngGlobalObjectsGroup = hwAsmngGlobalObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngGlobalObjectsGroup.setDescription('Description.')
hwAsmngMacWhitelistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 8)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsMacWhitelistRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngMacWhitelistGroup = hwAsmngMacWhitelistGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngMacWhitelistGroup.setDescription('Description.')
hwAsmngMacBlacklistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 9)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsMacBlacklistRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngMacBlacklistGroup = hwAsmngMacBlacklistGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngMacBlacklistGroup.setDescription('Description.')
hwAsmngEntityPhysicalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 10)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalDescr"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalVendorType"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalContainedIn"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalClass"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalParentRelPos"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalHardwareRev"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalFirmwareRev"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalSoftwareRev"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalSerialNum"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPhysicalMfgName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngEntityPhysicalGroup = hwAsmngEntityPhysicalGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngEntityPhysicalGroup.setDescription('Description.')
hwAsmngEntityStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 11)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsEntityAdminStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityOperStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityStandbyStatus"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityAlarmLight"), ("HUAWEI-UNIMNG-MIB", "hwAsEntityPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngEntityStateGroup = hwAsmngEntityStateGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngEntityStateGroup.setDescription('Description.')
hwAsmngEntityAliasMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 12)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsEntryAliasMappingIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngEntityAliasMappingGroup = hwAsmngEntityAliasMappingGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngEntityAliasMappingGroup.setDescription('Description.')
hwAsmngSlotGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 2, 1, 13)).setObjects(("HUAWEI-UNIMNG-MIB", "hwAsSlotState"), ("HUAWEI-UNIMNG-MIB", "hwAsSlotRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAsmngSlotGroup = hwAsmngSlotGroup.setStatus('current')
if mibBuilder.loadTexts: hwAsmngSlotGroup.setDescription('Description.')
hwMbrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 3))
hwMbrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 3, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwMbrTrapObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwMbrTrapsGroup"), ("HUAWEI-UNIMNG-MIB", "hwMbrFabricPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMbrCompliance = hwMbrCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMbrCompliance.setDescription('The compliance statement for SNMP entities supporting mbrmng.')
hwMbrTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 3, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrLinkStatTrapLocalMac"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrLinkStatTrapLocalPortName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrLinkStatTrapChangeType"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapConnectErrorReason"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapReceivePktRate"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapAsSysName"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrParaSynFailReason"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrTrapIllegalConfigReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMbrTrapObjectsGroup = hwMbrTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMbrTrapObjectsGroup.setDescription('The mbrmng trap objects group.')
hwMbrTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 3, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniMbrConnectError"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrASDiscoverAttack"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrFabricPortMemberDelete"), ("HUAWEI-UNIMNG-MIB", "hwUniMbrIllegalFabricConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMbrTrapsGroup = hwMbrTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMbrTrapsGroup.setDescription('The mbrmng notification objects group.')
hwMbrFabricPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 3, 1, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwMbrMngFabricPortMemberIfName"), ("HUAWEI-UNIMNG-MIB", "hwMbrMngFabricPortDirection"), ("HUAWEI-UNIMNG-MIB", "hwMbrMngFabricPortIndirectFlag"), ("HUAWEI-UNIMNG-MIB", "hwMbrMngFabricPortDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMbrFabricPortGroup = hwMbrFabricPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwMbrFabricPortGroup.setDescription('The mbrmng fabric port group.')
hwVermngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4))
hwVermngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVermngCompliance = hwVermngCompliance.setStatus('current')
if mibBuilder.loadTexts: hwVermngCompliance.setDescription('The compliance of version management.')
hwVermngObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngFileServerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVermngObjectsGroup = hwVermngObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVermngObjectsGroup.setDescription('The group of global objects.')
hwVermngUpgradeInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsName"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsSysSoftware"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsSysSoftwareVer"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsSysPatch"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsDownloadSoftware"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsDownloadSoftwareVer"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsDownloadPatch"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsUpgradeState"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsUpgradeType"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsFilePhase"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsUpgradePhase"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsUpgradeResult"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsErrorCode"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoAsErrorDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVermngUpgradeInfoGroup = hwVermngUpgradeInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwVermngUpgradeInfoGroup.setDescription('The group of upgrade info.')
hwVermngAsTypeCfgInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4, 1, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoPatch"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoSystemSoftwareVer"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoRowStatus"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoSystemSoftware"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoAsTypeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVermngAsTypeCfgInfoGroup = hwVermngAsTypeCfgInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwVermngAsTypeCfgInfoGroup.setDescription('The group of AS type.')
hwVermngTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 4, 1, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVermngTrapsGroup = hwVermngTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwVermngTrapsGroup.setDescription('The group of notification of version management.')
hwTplmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5))
hwTplmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwVermngObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngUpgradeInfoGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngAsTypeCfgInfoGroup"), ("HUAWEI-UNIMNG-MIB", "hwVermngTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmCompliance = hwTplmCompliance.setStatus('current')
if mibBuilder.loadTexts: hwTplmCompliance.setDescription('The compliance of template management.')
hwTplmASGroupGoup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmASGroupName"), ("HUAWEI-UNIMNG-MIB", "hwTplmASAdminProfileName"), ("HUAWEI-UNIMNG-MIB", "hwTplmASGroupProfileStatus"), ("HUAWEI-UNIMNG-MIB", "hwTplmASGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmASGroupGoup = hwTplmASGroupGoup.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGroupGoup.setDescription('The group of as group.')
hwTplmASGoup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmASASGroupName"), ("HUAWEI-UNIMNG-MIB", "hwTplmASRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmASGoup = hwTplmASGoup.setStatus('current')
if mibBuilder.loadTexts: hwTplmASGoup.setDescription('The group of as.')
hwTplmPortGroupGoup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 3)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupName"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupType"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupNetworkBasicProfile"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupNetworkEnhancedProfile"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupUserAccessProfile"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupProfileStatus"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmPortGroupGoup = hwTplmPortGroupGoup.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGroupGoup.setDescription('The group of port group.')
hwTplmPortGoup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 4)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmPortPortGroupName"), ("HUAWEI-UNIMNG-MIB", "hwTplmPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmPortGoup = hwTplmPortGoup.setStatus('current')
if mibBuilder.loadTexts: hwTplmPortGoup.setDescription('The group of port.')
hwTplmConfigManagementGoup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 5)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmConfigCommitAll"), ("HUAWEI-UNIMNG-MIB", "hwTplmConfigManagementCommit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmConfigManagementGoup = hwTplmConfigManagementGoup.setStatus('current')
if mibBuilder.loadTexts: hwTplmConfigManagementGoup.setDescription('The group of configuration management.')
hwTplmTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 6)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmTrapASName"), ("HUAWEI-UNIMNG-MIB", "hwTplmTrapFailedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmTrapObjectsGroup = hwTplmTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTplmTrapObjectsGroup.setDescription('The tplm trap objects group.')
hwTplmTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 5, 1, 7)).setObjects(("HUAWEI-UNIMNG-MIB", "hwTplmCmdExecuteFailedNotify"), ("HUAWEI-UNIMNG-MIB", "hwTplmCmdExecuteSuccessfulNotify"), ("HUAWEI-UNIMNG-MIB", "hwTplmDirectCmdRecoverFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTplmTrapsGroup = hwTplmTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwTplmTrapsGroup.setDescription('The tplm notification objects group.')
hwUniBaseTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 6))
hwUniBaseTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 6, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniBaseTrapObjectsGroup"), ("HUAWEI-UNIMNG-MIB", "hwUniBaseTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUniBaseTrapCompliance = hwUniBaseTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: hwUniBaseTrapCompliance.setDescription('The compliance statement for SNMP entities supporting unimng base trap.')
hwUniBaseTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 6, 1, 1)).setObjects(("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseAsId"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseTrapSeverity"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseTrapProbableCause"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseTrapEventType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalContainedIn"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalName"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseRelativeResource"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseReasonDescription"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdUnit"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdHighWarning"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdHighCritical"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdLowWarning"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdLowCritical"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapEntFaultID"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntityTrapCommunicateType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntValue"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdEntCurrent"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseEntPhysicalIndex"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdHwBaseThresholdType"), ("HUAWEI-UNIMNG-MIB", "hwUniAsBaseThresholdHwBaseThresholdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUniBaseTrapObjectsGroup = hwUniBaseTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwUniBaseTrapObjectsGroup.setDescription('The unimng base trap objects group.')
hwUniBaseTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 327, 50, 6, 1, 2)).setObjects(("HUAWEI-UNIMNG-MIB", "hwASBoardFail"), ("HUAWEI-UNIMNG-MIB", "hwASBoardFailResume"), ("HUAWEI-UNIMNG-MIB", "hwASOpticalInvalid"), ("HUAWEI-UNIMNG-MIB", "hwASOpticalInvalidResume"), ("HUAWEI-UNIMNG-MIB", "hwASPowerRemove"), ("HUAWEI-UNIMNG-MIB", "hwASPowerInsert"), ("HUAWEI-UNIMNG-MIB", "hwASPowerInvalid"), ("HUAWEI-UNIMNG-MIB", "hwASPowerInvalidResume"), ("HUAWEI-UNIMNG-MIB", "hwASFanRemove"), ("HUAWEI-UNIMNG-MIB", "hwASFanInsert"), ("HUAWEI-UNIMNG-MIB", "hwASFanInvalid"), ("HUAWEI-UNIMNG-MIB", "hwASFanInvalidResume"), ("HUAWEI-UNIMNG-MIB", "hwASCommunicateError"), ("HUAWEI-UNIMNG-MIB", "hwASCommunicateResume"), ("HUAWEI-UNIMNG-MIB", "hwASCPUUtilizationRising"), ("HUAWEI-UNIMNG-MIB", "hwASCPUUtilizationResume"), ("HUAWEI-UNIMNG-MIB", "hwASMemUtilizationRising"), ("HUAWEI-UNIMNG-MIB", "hwASMemUtilizationResume"), ("HUAWEI-UNIMNG-MIB", "hwASMadConflictDetect"), ("HUAWEI-UNIMNG-MIB", "hwASMadConflictResume"), ("HUAWEI-UNIMNG-MIB", "hwASBrdTempAlarm"), ("HUAWEI-UNIMNG-MIB", "hwASBrdTempResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwUniBaseTrapsGroup = hwUniBaseTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwUniBaseTrapsGroup.setDescription('The unimng base notification objects group.')
mibBuilder.exportSymbols("HUAWEI-UNIMNG-MIB", hwTopomngTrapReason=hwTopomngTrapReason, hwUnimngConformance=hwUnimngConformance, hwTplmPortIfIndex=hwTplmPortIfIndex, hwVermngFileServerType=hwVermngFileServerType, hwAsDns=hwAsDns, hwUniMbrTrapReceivePktRate=hwUniMbrTrapReceivePktRate, hwTopomngTrapObjects=hwTopomngTrapObjects, hwTopomngLastCollectDuration=hwTopomngLastCollectDuration, hwTopoPeerRole=hwTopoPeerRole, hwTplmTraps=hwTplmTraps, hwUniAsBaseThresholdLowWarning=hwUniAsBaseThresholdLowWarning, hwMbrCompliances=hwMbrCompliances, hwUniAsBaseReasonDescription=hwUniAsBaseReasonDescription, hwAsSlotRowStatus=hwAsSlotRowStatus, hwASPowerInvalidResume=hwASPowerInvalidResume, hwVermngCompliances=hwVermngCompliances, hwAsmngTrapParentUnimngMode=hwAsmngTrapParentUnimngMode, hwTopoLocalTrunkId=hwTopoLocalTrunkId, hwASEnvironmentTrap=hwASEnvironmentTrap, hwAsFullNotify=hwAsFullNotify, hwTplmASEntry=hwTplmASEntry, hwTopomngTrapPeerTrunkId=hwTopomngTrapPeerTrunkId, hwAsDelOffLineNotify=hwAsDelOffLineNotify, hwTplmCmdExecuteFailedNotify=hwTplmCmdExecuteFailedNotify, hwMbrMngFabricPortId=hwMbrMngFabricPortId, hwAsIfAsId=hwAsIfAsId, hwUniAsBaseThresholdEntCurrent=hwUniAsBaseThresholdEntCurrent, hwVermngAsTypeCfgInfoTable=hwVermngAsTypeCfgInfoTable, hwTplmDirectCmdRecoverFail=hwTplmDirectCmdRecoverFail, hwUniBaseTrapObjectsGroup=hwUniBaseTrapObjectsGroup, hwASPowerInsert=hwASPowerInsert, hwAsIfLinkUpDownTrapEnable=hwAsIfLinkUpDownTrapEnable, hwAsmngTrapAsUnimngMode=hwAsmngTrapAsUnimngMode, hwAsIfOutMulticastPkts=hwAsIfOutMulticastPkts, hwAsEntityPhysicalDescr=hwAsEntityPhysicalDescr, hwUniAsBaseThresholdHwBaseThresholdIndex=hwUniAsBaseThresholdHwBaseThresholdIndex, hwAsSlotIdInvalidNotify=hwAsSlotIdInvalidNotify, hwUnimngNotification=hwUnimngNotification, hwAsIfName=hwAsIfName, hwVermngUpgradeInfoAsUpgradeResult=hwVermngUpgradeInfoAsUpgradeResult, hwAsIfDescr=hwAsIfDescr, hwVermngUpgradeInfoAsSysSoftwareVer=hwVermngUpgradeInfoAsSysSoftwareVer, hwVermngUpgradeInfoAsDownloadSoftwareVer=hwVermngUpgradeInfoAsDownloadSoftwareVer, hwTopoLocalHop=hwTopoLocalHop, hwAsEntityOperStatus=hwAsEntityOperStatus, hwTplmPortRowStatus=hwTplmPortRowStatus, hwTplmPortGroupProfileStatus=hwTplmPortGroupProfileStatus, hwAsBoardPlugInNotify=hwAsBoardPlugInNotify, hwTplmPortGroupRowStatus=hwTplmPortGroupRowStatus, hwAsIpNetMask=hwAsIpNetMask, hwAsmngTrapAsSn=hwAsmngTrapAsSn, hwAsIfTable=hwAsIfTable, hwAsUnconfirmedNotify=hwAsUnconfirmedNotify, hwAsEntityPhysicalIndex=hwAsEntityPhysicalIndex, hwAsmngTrapsGroup=hwAsmngTrapsGroup, hwTplmTrap=hwTplmTrap, hwAsEntityPhysicalHardwareRev=hwAsEntityPhysicalHardwareRev, hwUniAsBaseTraps=hwUniAsBaseTraps, hwTplmASGroupProfileStatus=hwTplmASGroupProfileStatus, hwVermngCompliance=hwVermngCompliance, hwAsMacBlacklistTable=hwAsMacBlacklistTable, hwUniAsBaseEntityPhysicalIndex=hwUniAsBaseEntityPhysicalIndex, hwVermngAsTypeCfgInfoAsTypeIndex=hwVermngAsTypeCfgInfoAsTypeIndex, hwAsIfInBroadcastPkts=hwAsIfInBroadcastPkts, hwASOpticalInvalidResume=hwASOpticalInvalidResume, hwTplmCompliance=hwTplmCompliance, hwAsEntityPhysicalContainedIn=hwAsEntityPhysicalContainedIn, hwMbrmngObjects=hwMbrmngObjects, hwAsSlotState=hwAsSlotState, hwUniAsBaseThresholdHighCritical=hwUniAsBaseThresholdHighCritical, hwASPowerRemove=hwASPowerRemove, hwAsIfOutBroadcastPkts=hwAsIfOutBroadcastPkts, hwVermngAsTypeCfgInfoSystemSoftware=hwVermngAsTypeCfgInfoSystemSoftware, hwAsFaultNotify=hwAsFaultNotify, hwAsmngAsIfGroup=hwAsmngAsIfGroup, hwAsmngTrapAsActualeType=hwAsmngTrapAsActualeType, hwAsEntityPortType=hwAsEntityPortType, hwTopomngExploreTime=hwTopomngExploreTime, hwUniMbrTrapIllegalConfigReason=hwUniMbrTrapIllegalConfigReason, hwTplmPortGroupNetworkBasicProfile=hwTplmPortGroupNetworkBasicProfile, hwUniMbrTrapAsSysName=hwUniMbrTrapAsSysName, hwASFanInsert=hwASFanInsert, hwAsAutoReplaceEnable=hwAsAutoReplaceEnable, hwVermngTrapsGroup=hwVermngTrapsGroup, hwTopomngObjects=hwTopomngObjects, hwUniMbrLinkStatTrapLocalMac=hwUniMbrLinkStatTrapLocalMac, PYSNMP_MODULE_ID=hwUnimngMIB, hwUniAsBaseTrap=hwUniAsBaseTrap, hwVermngUpgradeInfoTable=hwVermngUpgradeInfoTable, hwAsMacBlacklistMacAddr=hwAsMacBlacklistMacAddr, hwTopomngCompliances=hwTopomngCompliances, hwAsEntityPhysicalName=hwAsEntityPhysicalName, hwAsMacBlacklistRowStatus=hwAsMacBlacklistRowStatus, hwVermngUpgradeInfoAsUpgradePhase=hwVermngUpgradeInfoAsUpgradePhase, hwAsRowstatus=hwAsRowstatus, hwMbrMngASId=hwMbrMngASId, hwMbrMngFabricPortEntry=hwMbrMngFabricPortEntry, hwASCommunicateResume=hwASCommunicateResume, hwAsMacWhitelistMacAddr=hwAsMacWhitelistMacAddr, hwAsIfAlias=hwAsIfAlias, hwUniMbrTrapObjects=hwUniMbrTrapObjects, hwVermngUpgradeInfoAsIndex=hwVermngUpgradeInfoAsIndex, hwTplmObjects=hwTplmObjects, hwAsIndex=hwAsIndex, hwASOpticalInvalid=hwASOpticalInvalid, hwAsIfSpeed=hwAsIfSpeed, hwAsIfHCOutOctets=hwAsIfHCOutOctets, hwTopomngTopoGroup=hwTopomngTopoGroup, hwTplmPortGroupTable=hwTplmPortGroupTable, hwAsNameConflictNotify=hwAsNameConflictNotify, hwUniMbrConnectError=hwUniMbrConnectError, hwUniBaseTrapCompliance=hwUniBaseTrapCompliance, hwAsmngMacWhitelistGroup=hwAsmngMacWhitelistGroup, hwAsPortStateChangeToDownNotify=hwAsPortStateChangeToDownNotify, hwTplmCompliances=hwTplmCompliances, hwUniAsBaseThresholdLowCritical=hwUniAsBaseThresholdLowCritical, hwUniAsBaseThresholdEntValue=hwUniAsBaseThresholdEntValue, hwUniAsBaseRelativeResource=hwUniAsBaseRelativeResource, hwTopomngObjectsGroup=hwTopomngObjectsGroup, hwAsEntry=hwAsEntry, hwAsVersionNotMatchNotify=hwAsVersionNotMatchNotify, hwVermngAsTypeCfgInfoRowStatus=hwVermngAsTypeCfgInfoRowStatus, hwMbrCompliance=hwMbrCompliance, hwAsmngTrapAsIfAdminStatus=hwAsmngTrapAsIfAdminStatus, hwUniMngEnable=hwUniMngEnable, hwVermngUpgradeInfoEntry=hwVermngUpgradeInfoEntry, hwAsEntityStateEntry=hwAsEntityStateEntry, hwAsEntityPhysicalSoftwareRev=hwAsEntityPhysicalSoftwareRev, hwTplmConfigManagementTable=hwTplmConfigManagementTable, hwAsComboPortTypeChangeNotify=hwAsComboPortTypeChangeNotify, hwAsBoardAddNotify=hwAsBoardAddNotify, hwAsMacWhitelistTable=hwAsMacWhitelistTable, hwMbrFabricPortGroup=hwMbrFabricPortGroup, hwAsmngGlobalObjects=hwAsmngGlobalObjects, hwAsIfAdminStatus=hwAsIfAdminStatus, hwUniBaseTrapsGroup=hwUniBaseTrapsGroup, hwTplmASGroupEntry=hwTplmASGroupEntry, hwUniMbrIllegalFabricConfig=hwUniMbrIllegalFabricConfig, hwAsIfInMulticastPkts=hwAsIfInMulticastPkts, hwTplmPortGoup=hwTplmPortGoup, hwVermngUpgradeInfoAsUpgradeState=hwVermngUpgradeInfoAsUpgradeState, hwUniMbrLinkStatTrapLocalPortName=hwUniMbrLinkStatTrapLocalPortName, hwVermngTrap=hwVermngTrap, hwTplmTrapsGroup=hwTplmTrapsGroup, hwAsIpAddress=hwAsIpAddress, hwASFanRemove=hwASFanRemove, hwUniAsBaseEntityTrapEntType=hwUniAsBaseEntityTrapEntType, hwUniAsBaseEntityTrapEntFaultID=hwUniAsBaseEntityTrapEntFaultID, hwAsmngTrapAsOnlineFailReasonDesc=hwAsmngTrapAsOnlineFailReasonDesc, hwVermngUpgradeInfoAsUpgradeType=hwVermngUpgradeInfoAsUpgradeType, hwUnimngMIB=hwUnimngMIB, hwAsSlotTable=hwAsSlotTable, hwAsmngTrapAsModel=hwAsmngTrapAsModel, hwAsmngObjects=hwAsmngObjects, hwVermngTrapObjects=hwVermngTrapObjects, hwAsmngTrapAsIfType=hwAsmngTrapAsIfType, hwAsEntityAliasMappingTable=hwAsEntityAliasMappingTable, hwASCommunicateError=hwASCommunicateError, hwVermngGlobalObjects=hwVermngGlobalObjects, hwAsIfPhysAddress=hwAsIfPhysAddress, hwAsmngTrapAsOnlineFailReasonId=hwAsmngTrapAsOnlineFailReasonId, hwAsEntityStandbyStatus=hwAsEntityStandbyStatus, hwTplmPortGroupGoup=hwTplmPortGroupGoup, hwUniMbrTraps=hwUniMbrTraps, hwAsEntryAliasMappingIdentifier=hwAsEntryAliasMappingIdentifier, hwAsIfInUcastPkts=hwAsIfInUcastPkts, hwUniMbrTrapConnectErrorReason=hwUniMbrTrapConnectErrorReason, hwTplmTrapFailedReason=hwTplmTrapFailedReason, hwAsmngSlotGroup=hwAsmngSlotGroup, hwTopomngTopoEntry=hwTopomngTopoEntry, hwTplmPortGroupEntry=hwTplmPortGroupEntry, hwAsEntityAdminStatus=hwAsEntityAdminStatus, hwTplmConfigManagementASId=hwTplmConfigManagementASId, hwAsEntityPhysicalEntry=hwAsEntityPhysicalEntry, hwAsHardwareVersion=hwAsHardwareVersion, hwVermngObjectsGroup=hwVermngObjectsGroup, hwAsmngTrapAsIfIndex=hwAsmngTrapAsIfIndex, hwTplmPortGroupUserAccessProfile=hwTplmPortGroupUserAccessProfile, hwAsmngTrapAsFaultTimes=hwAsmngTrapAsFaultTimes, hwTplmPortEntry=hwTplmPortEntry, hwAsmngEntityPhysicalGroup=hwAsmngEntityPhysicalGroup, hwAsAddOffLineNotify=hwAsAddOffLineNotify, hwAsCpuUseage=hwAsCpuUseage, hwAsMacBlacklistEntry=hwAsMacBlacklistEntry, hwASFanTrap=hwASFanTrap, hwTplmPortPortGroupName=hwTplmPortPortGroupName, hwAsEntityAliasMappingEntry=hwAsEntityAliasMappingEntry, hwUniAsBaseThresholdHighWarning=hwUniAsBaseThresholdHighWarning, hwTplmASId=hwTplmASId, hwAsIfOperStatus=hwAsIfOperStatus, hwAsmngEntityStateGroup=hwAsmngEntityStateGroup, hwTopoPeerMac=hwTopoPeerMac, hwASCPUTrap=hwASCPUTrap, hwTopomngTrapLocalMac=hwTopomngTrapLocalMac, hwAsmngTrap=hwAsmngTrap, hwTopoPeerTrunkId=hwTopoPeerTrunkId, hwAsRunState=hwAsRunState, hwAsMac=hwAsMac, hwVermngUpgradeInfoAsSysPatch=hwVermngUpgradeInfoAsSysPatch, hwASBrdTempResume=hwASBrdTempResume, hwAsmngGlobalObjectsGroup=hwAsmngGlobalObjectsGroup, hwVermngUpgradeInfoGroup=hwVermngUpgradeInfoGroup, hwAsAccessUser=hwAsAccessUser, hwTopoLocalPortName=hwTopoLocalPortName, hwASMemUtilizationResume=hwASMemUtilizationResume, hwTplmASAdminProfileName=hwTplmASAdminProfileName, hwAsSysmacSwitchCfgErrNotify=hwAsSysmacSwitchCfgErrNotify, hwASCPUUtilizationResume=hwASCPUUtilizationResume, hwAsIfMtu=hwAsIfMtu, hwTopoPeerDeviceIndex=hwTopoPeerDeviceIndex, hwAsSoftwareVersion=hwAsSoftwareVersion, hwASBrdTempAlarm=hwASBrdTempAlarm, hwAsmngTrapAsIndex=hwAsmngTrapAsIndex, hwAsEntityPhysicalVendorType=hwAsEntityPhysicalVendorType, hwAsmngTrapAsIfOperStatus=hwAsmngTrapAsIfOperStatus, hwASPowerInvalid=hwASPowerInvalid, hwAsGatewayIp=hwAsGatewayIp, hwUniMbrTrapAsIndex=hwUniMbrTrapAsIndex, hwTopoLocalRole=hwTopoLocalRole, hwAsIfHighSpeed=hwAsIfHighSpeed, hwTopomngTrapObjectsGroup=hwTopomngTrapObjectsGroup, hwAsmngTrapAddedAsSlotType=hwAsmngTrapAddedAsSlotType, hwVermngUpgradeInfoAsDownloadSoftware=hwVermngUpgradeInfoAsDownloadSoftware, hwTplmPortGroupType=hwTplmPortGroupType, hwUniAsBaseEntPhysicalContainedIn=hwUniAsBaseEntPhysicalContainedIn, hwTopomngTrapsGroup=hwTopomngTrapsGroup, hwAsIfOutUcastPkts=hwAsIfOutUcastPkts, hwTopomngTrap=hwTopomngTrap, hwTplmConfigCommitAll=hwTplmConfigCommitAll, hwAsmngTrapAsVersion=hwAsmngTrapAsVersion, hwTplmConfigManagementEntry=hwTplmConfigManagementEntry, hwTplmASRowStatus=hwTplmASRowStatus, hwTopomngTrapLocalPortName=hwTopomngTrapLocalPortName, hwTplmCmdExecuteSuccessfulNotify=hwTplmCmdExecuteSuccessfulNotify, hwUniAsBaseTrapProbableCause=hwUniAsBaseTrapProbableCause, hwAsSlotId=hwAsSlotId, hwTplmTrapASName=hwTplmTrapASName, hwAsIfXEntry=hwAsIfXEntry, hwTopomngTrapPeerPortName=hwTopomngTrapPeerPortName, hwTopomngLinkNormal=hwTopomngLinkNormal, hwASMemoryTrap=hwASMemoryTrap, hwUniAsBaseTrapSeverity=hwUniAsBaseTrapSeverity, hwTplmConfigManagementGoup=hwTplmConfigManagementGoup, hwTopomngTraps=hwTopomngTraps, hwVermngAsTypeCfgInfoPatch=hwVermngAsTypeCfgInfoPatch, hwUniAsBaseTrapEventType=hwUniAsBaseTrapEventType, hwAsMacWhitelistRowStatus=hwAsMacWhitelistRowStatus, hwTplmPortGroupIndex=hwTplmPortGroupIndex, hwAsEntityPhysicalParentRelPos=hwAsEntityPhysicalParentRelPos, AlarmStatus=AlarmStatus, hwMbrMngFabricPortDescription=hwMbrMngFabricPortDescription, hwAsmngTrapAsPermitNum=hwAsmngTrapAsPermitNum, hwAsEntityStateTable=hwAsEntityStateTable, hwAsVpnInstance=hwAsVpnInstance)
mibBuilder.exportSymbols("HUAWEI-UNIMNG-MIB", hwTplmASGroupIndex=hwTplmASGroupIndex, hwMbrTrapsGroup=hwMbrTrapsGroup, hwTplmASGroupName=hwTplmASGroupName, hwTopomngTopoTable=hwTopomngTopoTable, hwASPowerTrap=hwASPowerTrap, hwAsEntityPhysicalMfgName=hwAsEntityPhysicalMfgName, hwVermngObjects=hwVermngObjects, hwTplmTrapObjectsGroup=hwTplmTrapObjectsGroup, hwAsStackEnable=hwAsStackEnable, hwTplmASGoup=hwTplmASGoup, hwMbrMngFabricPortDirection=hwMbrMngFabricPortDirection, hwUnimngObjects=hwUnimngObjects, hwASBoardFailResume=hwASBoardFailResume, hwVermngUpgradeInfoAsName=hwVermngUpgradeInfoAsName, hwUniAsBaseEntPhysicalName=hwUniAsBaseEntPhysicalName, hwAsOnlineTime=hwAsOnlineTime, hwAsmngTrapObjects=hwAsmngTrapObjects, hwUniBaseTrapCompliances=hwUniBaseTrapCompliances, hwVermngAsTypeCfgInfoAsTypeName=hwVermngAsTypeCfgInfoAsTypeName, hwAsEntryAliasLogicalIndexOrZero=hwAsEntryAliasLogicalIndexOrZero, hwAsSysMac=hwAsSysMac, hwAsmngTrapParentVersion=hwAsmngTrapParentVersion, hwAsInBlacklistNotify=hwAsInBlacklistNotify, hwAsPortStateChangeToUpNotify=hwAsPortStateChangeToUpNotify, hwAsMacWhitelistEntry=hwAsMacWhitelistEntry, hwUniAsBaseThresholdType=hwUniAsBaseThresholdType, hwAsEntityPhysicalFirmwareRev=hwAsEntityPhysicalFirmwareRev, hwTplmPortGroupName=hwTplmPortGroupName, hwASCommunicateTrap=hwASCommunicateTrap, hwAsmngTrapAddedAsMac=hwAsmngTrapAddedAsMac, hwTopomngCompliance=hwTopomngCompliance, hwAsNormalNotify=hwAsNormalNotify, hwVermngAsTypeCfgInfoSystemSoftwareVer=hwVermngAsTypeCfgInfoSystemSoftwareVer, hwASMemUtilizationRising=hwASMemUtilizationRising, hwASMadConflictDetect=hwASMadConflictDetect, hwAsmngCompliance=hwAsmngCompliance, hwUniAsBaseThresholdHwBaseThresholdType=hwUniAsBaseThresholdHwBaseThresholdType, hwUnimngModeNotMatchNotify=hwUnimngModeNotMatchNotify, hwAsEntityPhysicalTable=hwAsEntityPhysicalTable, hwAsEntityAlarmLight=hwAsEntityAlarmLight, hwVermngUpgradeInfoAsFilePhase=hwVermngUpgradeInfoAsFilePhase, hwTplmASASGroupName=hwTplmASASGroupName, hwAsSysName=hwAsSysName, hwVermngUpgradeFail=hwVermngUpgradeFail, hwUniAsBaseThresholdUnit=hwUniAsBaseThresholdUnit, hwAsOnlineFailNotify=hwAsOnlineFailNotify, hwMbrTrapObjectsGroup=hwMbrTrapObjectsGroup, hwTplmPortGroupNetworkEnhancedProfile=hwTplmPortGroupNetworkEnhancedProfile, hwTplmConfigManagement=hwTplmConfigManagement, hwTplmASGroupTable=hwTplmASGroupTable, hwAsmngTraps=hwAsmngTraps, hwUniAsBaseTrapObjects=hwUniAsBaseTrapObjects, hwUniAsBaseThresholdValue=hwUniAsBaseThresholdValue, hwUniMbrLinkStatTrapChangeType=hwUniMbrLinkStatTrapChangeType, hwTplmPortTable=hwTplmPortTable, hwTplmASGroupGoup=hwTplmASGroupGoup, hwASCPUUtilizationRising=hwASCPUUtilizationRising, hwTopomngTrapPeerMac=hwTopomngTrapPeerMac, hwAsmngTrapObjectsGroup=hwAsmngTrapObjectsGroup, hwAsmngTrapAsSysName=hwAsmngTrapAsSysName, hwAsmngMacBlacklistGroup=hwAsmngMacBlacklistGroup, hwAsIfType=hwAsIfType, hwAsmngTrapAsMac=hwAsmngTrapAsMac, hwUniAsBaseEntPhysicalIndex=hwUniAsBaseEntPhysicalIndex, hwAsEntityPhysicalClass=hwAsEntityPhysicalClass, hwUniAsBaseAsName=hwUniAsBaseAsName, hwAsModelNotMatchNotify=hwAsModelNotMatchNotify, hwAsEntityPhysicalSerialNum=hwAsEntityPhysicalSerialNum, hwVermngUpgradeInfoAsErrorDescr=hwVermngUpgradeInfoAsErrorDescr, hwTopomngLinkAbnormal=hwTopomngLinkAbnormal, hwAsmngTrapAsIfName=hwAsmngTrapAsIfName, hwUniMbrASDiscoverAttack=hwUniMbrASDiscoverAttack, hwAsIfHCInOctets=hwAsIfHCInOctets, hwVermngTraps=hwVermngTraps, hwASMadConflictResume=hwASMadConflictResume, hwTopoLocalMac=hwTopoLocalMac, hwAsmngCompliances=hwAsmngCompliances, hwVermngAsTypeCfgInfoGroup=hwVermngAsTypeCfgInfoGroup, hwVermngUpgradeInfoAsDownloadPatch=hwVermngUpgradeInfoAsDownloadPatch, hwAsmngTrapAsSlotId=hwAsmngTrapAsSlotId, hwTopoPeerPortName=hwTopoPeerPortName, hwAsmngEntityAliasMappingGroup=hwAsmngEntityAliasMappingGroup, hwTplmTrapObjects=hwTplmTrapObjects, hwVermngUpgradeInfoAsSysSoftware=hwVermngUpgradeInfoAsSysSoftware, hwASOpticalTrap=hwASOpticalTrap, hwMbrMngFabricPortIndirectFlag=hwMbrMngFabricPortIndirectFlag, hwAsIfEntry=hwAsIfEntry, hwUniMbrTrap=hwUniMbrTrap, hwTopomngTrapLocalTrunkId=hwTopomngTrapLocalTrunkId, hwAsMemoryUseage=hwAsMemoryUseage, hwAsModel=hwAsModel, hwUniAsBaseEntityTrapCommunicateType=hwUniAsBaseEntityTrapCommunicateType, hwUniMbrFabricPortMemberDelete=hwUniMbrFabricPortMemberDelete, hwAsSn=hwAsSn, hwTplmASTable=hwTplmASTable, hwAsIfXTable=hwAsIfXTable, hwASBoardTrap=hwASBoardTrap, hwAsmngObjectsGroup=hwAsmngObjectsGroup, hwAsBoardPlugOutNotify=hwAsBoardPlugOutNotify, hwAsmngAsIfXGroup=hwAsmngAsIfXGroup, hwASFanInvalidResume=hwASFanInvalidResume, hwAsTable=hwAsTable, hwMbrMngFabricPortMemberIfName=hwMbrMngFabricPortMemberIfName, hwASFanInvalid=hwASFanInvalid, hwVermngUpgradeInfoAsErrorCode=hwVermngUpgradeInfoAsErrorCode, hwUniMbrParaSynFailReason=hwUniMbrParaSynFailReason, hwAsmngAsGroup=hwAsmngAsGroup, hwAsAuthMode=hwAsAuthMode, hwAsSlotModelNotMatchNotify=hwAsSlotModelNotMatchNotify, hwTplmASGroupRowStatus=hwTplmASGroupRowStatus, hwTplmConfigManagementCommit=hwTplmConfigManagementCommit, hwVermngAsTypeCfgInfoEntry=hwVermngAsTypeCfgInfoEntry, hwAsBoardDeleteNotify=hwAsBoardDeleteNotify, hwAsIfIndex=hwAsIfIndex, hwAsSlotEntry=hwAsSlotEntry, hwMbrMngFabricPortTable=hwMbrMngFabricPortTable, hwASBoardFail=hwASBoardFail, hwUniAsBaseAsId=hwUniAsBaseAsId, hwASMadTrap=hwASMadTrap)
