#
# PySNMP MIB module FASTPATH-BOXSERVICES-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-BOXSERVICES-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
fastPath, = mibBuilder.importSymbols("BROADCOM-REF-MIB", "fastPath")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, ModuleIdentity, Gauge32, Bits, ObjectIdentity, IpAddress, Integer32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Gauge32", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "TimeTicks", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fastPathBoxServices = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43))
fastPathBoxServices.setRevisions(('2008-02-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathBoxServices.setRevisionsDescriptions(('Broadcom branding related changes.',))
if mibBuilder.loadTexts: fastPathBoxServices.setLastUpdated('200802220000Z')
if mibBuilder.loadTexts: fastPathBoxServices.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathBoxServices.setContactInfo(' Customer Support Postal: Broadcom Corporation 100 Perimeter Park Dr., Suite H Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathBoxServices.setDescription('The Broadcom Private MIB for FASTPATH Box Services Feature.')
boxServicesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1))
boxServicesNormalTempRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMin.setStatus('current')
if mibBuilder.loadTexts: boxServicesNormalTempRangeMin.setDescription(' Lower boundary of normal temperature range.')
boxServicesNormalTempRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesNormalTempRangeMax.setStatus('current')
if mibBuilder.loadTexts: boxServicesNormalTempRangeMax.setDescription(' Upper boundary of normal temperature range.')
boxServicesTemperatureTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesTemperatureTrapEnable.setStatus('current')
if mibBuilder.loadTexts: boxServicesTemperatureTrapEnable.setDescription(' Enable or disable temperature change event trap, raised when temperature crosses boundaries of normal range')
boxServicesPSMStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesPSMStateTrapEnable.setStatus('current')
if mibBuilder.loadTexts: boxServicesPSMStateTrapEnable.setDescription(' Enable or disable Power Supply Module state change trap.')
boxServicesFanStateTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boxServicesFanStateTrapEnable.setStatus('current')
if mibBuilder.loadTexts: boxServicesFanStateTrapEnable.setDescription(' Enable or disable Fan state change trap.')
boxServicesFansTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6), )
if mibBuilder.loadTexts: boxServicesFansTable.setStatus('current')
if mibBuilder.loadTexts: boxServicesFansTable.setDescription('Fan')
boxServicesFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1), ).setIndexNames((0, "FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"))
if mibBuilder.loadTexts: boxServicesFansEntry.setStatus('current')
if mibBuilder.loadTexts: boxServicesFansEntry.setDescription('Box Services Fan Entry')
boxServicesFansIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFansIndex.setStatus('current')
if mibBuilder.loadTexts: boxServicesFansIndex.setDescription('Unique index of fan table entry')
boxServicesFanItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemType.setStatus('current')
if mibBuilder.loadTexts: boxServicesFanItemType.setDescription('The type of fan')
boxServicesFanItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanItemState.setStatus('current')
if mibBuilder.loadTexts: boxServicesFanItemState.setDescription('The status of fan')
boxServicesFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanSpeed.setStatus('current')
if mibBuilder.loadTexts: boxServicesFanSpeed.setDescription('The speed of fan')
boxServicesFanDutyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesFanDutyLevel.setStatus('current')
if mibBuilder.loadTexts: boxServicesFanDutyLevel.setDescription('The duty level of fan, in percents')
boxServicesPowSuppliesTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7), )
if mibBuilder.loadTexts: boxServicesPowSuppliesTable.setStatus('current')
if mibBuilder.loadTexts: boxServicesPowSuppliesTable.setDescription('Power supply')
boxServicesPowSuppliesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1), ).setIndexNames((0, "FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"))
if mibBuilder.loadTexts: boxServicesPowSuppliesEntry.setStatus('current')
if mibBuilder.loadTexts: boxServicesPowSuppliesEntry.setDescription('Box Services Power Supply Entry')
boxServicesPowSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: boxServicesPowSupplyIndex.setDescription('Unique index of power supply table entry')
boxServicesPowSupplyItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemType.setStatus('current')
if mibBuilder.loadTexts: boxServicesPowSupplyItemType.setDescription('The type of power supply')
boxServicesPowSupplyItemState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notpresent", 1), ("operational", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesPowSupplyItemState.setStatus('current')
if mibBuilder.loadTexts: boxServicesPowSupplyItemState.setDescription('The status of power supply')
boxServicesTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8), )
if mibBuilder.loadTexts: boxServicesTempSensorsTable.setStatus('obsolete')
if mibBuilder.loadTexts: boxServicesTempSensorsTable.setDescription('Temperature sensor This table has been obsoleted by boxServicesStackTempSensorsTable')
boxServicesTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1), ).setIndexNames((0, "FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"))
if mibBuilder.loadTexts: boxServicesTempSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: boxServicesTempSensorsEntry.setDescription('Box Services Temperature Sensor Entry')
boxServicesTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: boxServicesTempSensorIndex.setDescription('Unique index of temperature sensor table entry')
boxServicesTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorType.setStatus('current')
if mibBuilder.loadTexts: boxServicesTempSensorType.setDescription('The type of temperature sensor')
boxServicesTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notpresent", 5), ("notoperational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorState.setStatus('current')
if mibBuilder.loadTexts: boxServicesTempSensorState.setDescription('The state of temperature sensor')
boxServicesTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesTempSensorTemperature.setStatus('current')
if mibBuilder.loadTexts: boxServicesTempSensorTemperature.setDescription('The temperature value reported by sensor')
boxServicesStackTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9), )
if mibBuilder.loadTexts: boxServicesStackTempSensorsTable.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorsTable.setDescription('Temperature sensor')
boxServicesStackTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1), ).setIndexNames((0, "FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesUnitIndex"), (0, "FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesStackTempSensorIndex"))
if mibBuilder.loadTexts: boxServicesStackTempSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorsEntry.setDescription('Box Services Temperature Sensor Entry')
boxServicesUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesUnitIndex.setStatus('current')
if mibBuilder.loadTexts: boxServicesUnitIndex.setDescription('Index of a stack unit')
boxServicesStackTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesStackTempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorIndex.setDescription('Unique index of temperature sensor table entry')
boxServicesStackTempSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("removable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesStackTempSensorType.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorType.setDescription('The type of temperature sensor')
boxServicesStackTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notpresent", 5), ("notoperational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesStackTempSensorState.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorState.setDescription('The state of temperature sensor')
boxServicesStackTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxServicesStackTempSensorTemperature.setStatus('current')
if mibBuilder.loadTexts: boxServicesStackTempSensorTemperature.setDescription('The temperature value reported by sensor')
boxServicesNotificationsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2))
boxsItemStateChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insertion", 1), ("removal", 2), ("becomeoperational", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxsItemStateChangeEvent.setStatus('current')
if mibBuilder.loadTexts: boxsItemStateChangeEvent.setDescription('This event describes states of the fan or power supply. insertion - hot-pluggable fan or power supply was inserted removal - hot-pluggable fan or power supply was removed becomeoperational - fan or power supply became operational after failure state failure - fan or power supply failure happened, i.e. it is not able to perform its functions')
boxsTemperatureChangeEvent = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("abovethreshold", 1), ("belowthreshold", 2), ("withinnormalrange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boxsTemperatureChangeEvent.setStatus('current')
if mibBuilder.loadTexts: boxsTemperatureChangeEvent.setDescription('This event describes change of the temperature. To avoid flipping on boundary conditions, it is allowed to send the trap taking into account some margin around thresholds. abovethreshold - temperature increased and crossed upper threshold value belowthreshold - temperature decreased and crossed lower threshold value withinnormalrange - temperature returned to normal range (between threshold)')
fastPathBoxServicesTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0))
boxsFanStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 1)).setObjects(("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesFansIndex"), ("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsFanStateChange.setStatus('current')
if mibBuilder.loadTexts: boxsFanStateChange.setDescription('Trap is sent when fan state change happens.')
boxsPowSupplyStateChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 2)).setObjects(("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesPowSupplyIndex"), ("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxsItemStateChangeEvent"))
if mibBuilder.loadTexts: boxsPowSupplyStateChange.setStatus('current')
if mibBuilder.loadTexts: boxsPowSupplyStateChange.setDescription('Trap is sent when power supply state change happens.')
boxsTemperatureChange = NotificationType((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 43, 0, 3)).setObjects(("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxServicesTempSensorIndex"), ("FASTPATH-BOXSERVICES-PRIVATE-MIB", "boxsTemperatureChangeEvent"))
if mibBuilder.loadTexts: boxsTemperatureChange.setStatus('current')
if mibBuilder.loadTexts: boxsTemperatureChange.setDescription('Trap is sent when temperature is changing and crossing any of the thresholds')
mibBuilder.exportSymbols("FASTPATH-BOXSERVICES-PRIVATE-MIB", boxServicesFansIndex=boxServicesFansIndex, boxServicesFanSpeed=boxServicesFanSpeed, boxServicesTemperatureTrapEnable=boxServicesTemperatureTrapEnable, boxServicesPowSuppliesTable=boxServicesPowSuppliesTable, boxServicesPowSupplyItemState=boxServicesPowSupplyItemState, boxServicesPowSupplyIndex=boxServicesPowSupplyIndex, boxServicesFansEntry=boxServicesFansEntry, boxsPowSupplyStateChange=boxsPowSupplyStateChange, boxServicesPowSupplyItemType=boxServicesPowSupplyItemType, boxsFanStateChange=boxsFanStateChange, fastPathBoxServices=fastPathBoxServices, boxServicesTempSensorsEntry=boxServicesTempSensorsEntry, boxsItemStateChangeEvent=boxsItemStateChangeEvent, boxsTemperatureChange=boxsTemperatureChange, boxServicesStackTempSensorState=boxServicesStackTempSensorState, boxServicesGroup=boxServicesGroup, boxServicesTempSensorType=boxServicesTempSensorType, boxsTemperatureChangeEvent=boxsTemperatureChangeEvent, boxServicesStackTempSensorType=boxServicesStackTempSensorType, boxServicesTempSensorIndex=boxServicesTempSensorIndex, boxServicesFanDutyLevel=boxServicesFanDutyLevel, boxServicesTempSensorState=boxServicesTempSensorState, fastPathBoxServicesTraps=fastPathBoxServicesTraps, boxServicesStackTempSensorsTable=boxServicesStackTempSensorsTable, boxServicesStackTempSensorsEntry=boxServicesStackTempSensorsEntry, PYSNMP_MODULE_ID=fastPathBoxServices, boxServicesFanItemState=boxServicesFanItemState, boxServicesStackTempSensorIndex=boxServicesStackTempSensorIndex, boxServicesTempSensorsTable=boxServicesTempSensorsTable, boxServicesFansTable=boxServicesFansTable, boxServicesNormalTempRangeMax=boxServicesNormalTempRangeMax, boxServicesFanStateTrapEnable=boxServicesFanStateTrapEnable, boxServicesNormalTempRangeMin=boxServicesNormalTempRangeMin, boxServicesTempSensorTemperature=boxServicesTempSensorTemperature, boxServicesStackTempSensorTemperature=boxServicesStackTempSensorTemperature, boxServicesFanItemType=boxServicesFanItemType, boxServicesUnitIndex=boxServicesUnitIndex, boxServicesPSMStateTrapEnable=boxServicesPSMStateTrapEnable, boxServicesNotificationsGroup=boxServicesNotificationsGroup, boxServicesPowSuppliesEntry=boxServicesPowSuppliesEntry)
