#
# PySNMP MIB module TE-LINK-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TE-LINK-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, transmission, MibIdentifier, Bits, Counter32, TimeTicks, Gauge32, IpAddress, NotificationType, Unsigned32, Integer32, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "transmission", "MibIdentifier", "Bits", "Counter32", "TimeTicks", "Gauge32", "IpAddress", "NotificationType", "Unsigned32", "Integer32", "ObjectIdentity", "ModuleIdentity")
StorageType, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TextualConvention", "DisplayString")
teLinkStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 200))
teLinkStdMIB.setRevisions(('2005-10-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: teLinkStdMIB.setRevisionsDescriptions(('Initial version published as RFC 4220.',))
if mibBuilder.loadTexts: teLinkStdMIB.setLastUpdated('200510110000Z')
if mibBuilder.loadTexts: teLinkStdMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
if mibBuilder.loadTexts: teLinkStdMIB.setContactInfo(' Martin Dubuc Email: mdubuc@ncf.ca Thomas D. Nadeau Email: tnadeau@cisco.com Jonathan P. Lang Email: jplang@ieee.org Comments about this document should be emailed directly to the MPLS working group mailing list at mpls@uu.net.')
if mibBuilder.loadTexts: teLinkStdMIB.setDescription("Copyright (C) 2005 The Internet Society. This version of this MIB module is part of RFC 4220; see the RFC itself for full legal notices. This MIB module contains managed object definitions for MPLS traffic engineering links as defined in 'Link Bundling in MPLS Traffic Engineering (TE)'.")
class TeLinkBandwidth(TextualConvention, OctetString):
    reference = 'IEEE Standard for Binary Floating-Point Arithmetic, Standard 754-1985'
    description = 'This type is used to represent link bandwidth in bps. This value is represented using a 4 octet IEEE floating point format [IEEE]. The floating point representation is not used to represent fractional value but rather to allow specification of large numbers that cannot be expressed with 32-bit integers.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class TeLinkPriority(TextualConvention, Unsigned32):
    description = 'This type is used to represent a priority. Each connection is assigned a priority. This priority is used when accounting for bandwidth on TE links or component links, for resource allocation and for rerouting purposes. Value 0 is the highest priority. Value 7 is the lowest priority.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class TeLinkProtection(TextualConvention, Integer32):
    description = 'Link protection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("primary", 1), ("secondary", 2))

class TeLinkSwitchingCapability(TextualConvention, Integer32):
    description = "Switching capability as specified in the 'OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS)' document. The values specified in this document are not contiguous."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 51, 100, 150, 200))
    namedValues = NamedValues(("packetSwitch1", 1), ("packetSwitch2", 2), ("packetSwitch3", 3), ("packetSwitch4", 4), ("layer2Switch", 51), ("tdm", 100), ("lambdaSwitch", 150), ("fiberSwitch", 200))

class TeLinkEncodingType(TextualConvention, Integer32):
    description = "Link encoding type as specified in 'Generalized Multi-Protocol Label Switching (GMPLS) Signaling Functional Description' document. The values specified in this document are not contiguous."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 7, 8, 9, 11))
    namedValues = NamedValues(("packet", 1), ("ethernet", 2), ("ansiEtsiPdh", 3), ("sdhItuSonetAnsi", 5), ("digitalWrapper", 7), ("lambda", 8), ("fiber", 9), ("fiberChannel", 11))

class TeLinkSonetSdhIndication(TextualConvention, Integer32):
    reference = 'OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203'
    description = 'This convention is used to indicate whether the interface supports Standard or Arbitrary SONET/SDH. To simplify the mapping process, the values used in this textual convention match the values specified in the interface switching capability specific information field, i.e., 0 for Standard SONET/SDH and 1 for Arbitrary SONET/SDH.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("standard", 0), ("arbitrary", 1))

teLinkNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 200, 0))
teLinkObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 200, 1))
teLinkConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 200, 2))
teLinkTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 1), )
if mibBuilder.loadTexts: teLinkTable.setStatus('current')
if mibBuilder.loadTexts: teLinkTable.setDescription('This table specifies the grouping of component links into TE links and the grouping of TE links into bundled links.')
teLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: teLinkEntry.setStatus('current')
if mibBuilder.loadTexts: teLinkEntry.setDescription('An entry in this table exists for each ifEntry with an ifType of teLink(200), i.e., for every TE link. An ifEntry in the ifTable must exist before a teLinkEntry is created with the corresponding ifIndex. If a TE link entry in the ifTable is destroyed, then so is the corresponding entry in the teLinkTable. The administrative and operational status values are controlled from the ifEntry.')
teLinkAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkAddressType.setStatus('current')
if mibBuilder.loadTexts: teLinkAddressType.setDescription('The type of Internet address for the TE link.')
teLinkLocalIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: teLinkLocalIpAddr.setDescription('The local Internet address for numbered links. The type of this address is determined by the value of the teLinkAddressType object. For IPv4 and IPv6 numbered links, this object represents the local IP address associated with the TE link. For an unnumbered link, the local address is of type unknown, this object is set to the zero length string, and the teLinkOutgoingIfId object then identifies the unnumbered address. If the TE link is a Forwarding Adjacency (FA), the local IP address is set to the head-end address of the FA-LSP. If ipAddrTable is implemented, this object must have the same value as the ipAdEntAddr object that belongs to the row in ipAddrTable where ipAdEntIfIndex is equal to ifIndex.')
teLinkRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: teLinkRemoteIpAddr.setDescription('The remote Internet address for numbered links. The type of this address is determined by the value of the teLinkAddressType object. The remote IP address associated with the TE link (IPv4 and IPv6 numbered links). For an unnumbered link, the remote address is of type unknown, this object is set to the zero length string, and the teLinkIncomingIfId object then identifies the unnumbered address. If the TE link is a Forwarding Adjacency, the remote IP address is set to the tail-end address of the FA-LSP.')
teLinkMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkMetric.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201')
if mibBuilder.loadTexts: teLinkMetric.setStatus('current')
if mibBuilder.loadTexts: teLinkMetric.setDescription('The traffic engineering metric for the TE link is derived from its component links. All component links within the TE link must have the same traffic engineering metric.')
teLinkMaximumReservableBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 5), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: teLinkMaximumReservableBandwidth.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkMaximumReservableBandwidth.setStatus('current')
if mibBuilder.loadTexts: teLinkMaximumReservableBandwidth.setDescription('This attribute specifies the maximum reservable bandwidth on the TE link. This is the union of the maximum reservable bandwidth of all the component links within the TE link that can be used to carry live traffic.')
teLinkProtectionType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("extraTraffic", 1), ("unprotected", 2), ("shared", 3), ("dedicated1For1", 4), ("dedicated1Plus1", 5), ("enhanced", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkProtectionType.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203 and Routing Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4202')
if mibBuilder.loadTexts: teLinkProtectionType.setStatus('current')
if mibBuilder.loadTexts: teLinkProtectionType.setDescription("This attribute specifies the link protection type of the TE link. Descriptions of the different protection types can be found in the 'Routing Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS)' document.")
teLinkWorkingPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 7), TeLinkPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkWorkingPriority.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkWorkingPriority.setStatus('current')
if mibBuilder.loadTexts: teLinkWorkingPriority.setDescription('This object represents a priority value such that a new connection with a higher priority, i.e., numerically lower than this value, is guaranteed to be setup on a primary link and not on a secondary link.')
teLinkResourceClass = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkResourceClass.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201 and Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630')
if mibBuilder.loadTexts: teLinkResourceClass.setStatus('current')
if mibBuilder.loadTexts: teLinkResourceClass.setDescription("This attribute specifies the TE link resource class. The resource class is a 32 bit bitfield. The resource class for a link bundle is derived from the resource class of its TE links. All TE links within a link bundle must have the same resource class. Encoding of the resource class is described in the 'Traffic Engineering (TE) Extensions to OSPF Version 2' document.")
teLinkIncomingIfId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkIncomingIfId.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201')
if mibBuilder.loadTexts: teLinkIncomingIfId.setStatus('current')
if mibBuilder.loadTexts: teLinkIncomingIfId.setDescription('For unnumbered links, the incoming interface is set to the outgoing interface identifier chosen by the neighboring LSR for the reverse link corresponding to this TE link. If the link is numbered, the value of this object is 0 and the address is stored in the teLinkRemoteIpAddr instead.')
teLinkOutgoingIfId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkOutgoingIfId.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201')
if mibBuilder.loadTexts: teLinkOutgoingIfId.setStatus('current')
if mibBuilder.loadTexts: teLinkOutgoingIfId.setDescription('If the link is unnumbered, the outgoing interface identifier is set to the outgoing interface identifier chosen for the TE link by the advertising LSR. If the link is numbered, the value of this object is 0 and the address is stored in the teLinkLocalIpAddr instead.')
teLinkRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: teLinkRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. None of the writable objects in a row can be changed if status is active(1).')
teLinkStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 1, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkStorageType.setStatus('current')
if mibBuilder.loadTexts: teLinkStorageType.setDescription("The storage type for this conceptual row in the teLinkTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
teLinkDescriptorTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 2), )
if mibBuilder.loadTexts: teLinkDescriptorTable.setStatus('current')
if mibBuilder.loadTexts: teLinkDescriptorTable.setDescription('This table specifies the interface switching capability descriptors associated with the TE links.')
teLinkDescriptorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TE-LINK-STD-MIB", "teLinkDescriptorId"))
if mibBuilder.loadTexts: teLinkDescriptorEntry.setStatus('current')
if mibBuilder.loadTexts: teLinkDescriptorEntry.setDescription('An entry in this table is created for every TE link interface switching capability descriptor. An ifEntry in the ifTable must exist before a teLinkDescriptorEntry using the same ifIndex is created. ifType of ifEntry must be teLink(200). If a TE link entry in the ifTable is destroyed, then so are all of the entries in the teLinkDescriptorTable that use the ifIndex of this TE link.')
teLinkDescriptorId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: teLinkDescriptorId.setStatus('current')
if mibBuilder.loadTexts: teLinkDescriptorId.setDescription('This object specifies the link descriptor identifier.')
teLinkDescrSwitchingCapability = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 2), TeLinkSwitchingCapability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrSwitchingCapability.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrSwitchingCapability.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrSwitchingCapability.setDescription('This attribute specifies interface switching capability of the TE link, which is derived from its component links.')
teLinkDescrEncodingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 3), TeLinkEncodingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrEncodingType.setReference('Generalized Multi-Protocol Label Switching (GMPLS) Signaling Functional Description, RFC 3471')
if mibBuilder.loadTexts: teLinkDescrEncodingType.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrEncodingType.setDescription('This attribute specifies the TE link encoding type.')
teLinkDescrMinLspBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 4), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMinLspBandwidth.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMinLspBandwidth.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMinLspBandwidth.setDescription('This attribute specifies the minimum LSP bandwidth on the TE link. This is derived from the union of the minimum LSP bandwidth of all the component links associated with the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 5), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio0.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio0.setDescription('This attribute specifies the maximum LSP bandwidth at priority 0 on the TE link. This is the union of the maximum LSP bandwidth at priority 0 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 6), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio1.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio1.setDescription('This attribute specifies the maximum LSP bandwidth at priority 1 on the TE link. This is the union of the maximum LSP bandwidth at priority 1 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 7), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio2.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio2.setDescription('This attribute specifies the maximum LSP bandwidth at priority 2 on the TE link. This is the union of the maximum LSP bandwidth at priority 2 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 8), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio3.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio3.setDescription('This attribute specifies the maximum LSP bandwidth at priority 3 on the TE link. This is the union of the maximum LSP bandwidth at priority 3 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 9), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio4.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio4.setDescription('This attribute specifies the maximum LSP bandwidth at priority 4 on the TE link. This is the union of the maximum LSP bandwidth at priority 4 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 10), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio5.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio5.setDescription('This attribute specifies the maximum LSP bandwidth at priority 5 on the TE link. This is the union of the maximum LSP bandwidth at priority 5 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 11), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio6.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio6.setDescription('This attribute specifies the maximum LSP bandwidth at priority 6 on the TE link. This is the union of the maximum LSP bandwidth at priority 6 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrMaxLspBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 12), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio7.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrMaxLspBandwidthPrio7.setDescription('This attribute specifies the maximum LSP bandwidth at priority 7 on the TE link. This is the union of the maximum LSP bandwidth at priority 7 of all the component links within the TE link that can be used to carry live traffic.')
teLinkDescrInterfaceMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrInterfaceMtu.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrInterfaceMtu.setDescription('This attribute specifies the interface MTU for the TE link descriptor.')
teLinkDescrIndication = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 14), TeLinkSonetSdhIndication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrIndication.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkDescrIndication.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrIndication.setDescription('This attribute specifies whether this interface supports Standard or Arbitrary SONET/SDH.')
teLinkDescrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrRowStatus.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be changed if teLinkDescrRowStatus is in the active(1) state.')
teLinkDescrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 2, 1, 16), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkDescrStorageType.setStatus('current')
if mibBuilder.loadTexts: teLinkDescrStorageType.setDescription("The storage type for this conceptual row in the teLinkDescriptorTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
teLinkSrlgTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 3), )
if mibBuilder.loadTexts: teLinkSrlgTable.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlgTable.setDescription('This table specifies the SRLGs associated with TE links.')
teLinkSrlgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TE-LINK-STD-MIB", "teLinkSrlg"))
if mibBuilder.loadTexts: teLinkSrlgEntry.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlgEntry.setDescription('An entry in this table contains information about an SRLG associated with a TE link. An ifEntry in the ifTable must exist before a teLinkSrlgEntry using the same ifIndex is created. The ifType of ifEntry must be teLink(200). If a TE link entry in the ifTable is destroyed, then so are all of the entries in the teLinkSrlgTable that use the ifIndex of this TE link.')
teLinkSrlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: teLinkSrlg.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: teLinkSrlg.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlg.setDescription('This identifies an SRLG supported by the TE link. An SRLG is identified with a 32-bit number that is unique within an IGP domain. Zero is a valid SRLG number.')
teLinkSrlgRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkSrlgRowStatus.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlgRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be modified if teLinkSrlgRowStatus is active(1).')
teLinkSrlgStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 3, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkSrlgStorageType.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlgStorageType.setDescription("The storage type for this conceptual row in the teLinkSrlgTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
teLinkBandwidthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 4), )
if mibBuilder.loadTexts: teLinkBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthTable.setDescription('This table specifies the priority-based bandwidth table for TE links.')
teLinkBandwidthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TE-LINK-STD-MIB", "teLinkBandwidthPriority"))
if mibBuilder.loadTexts: teLinkBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthEntry.setDescription('An entry in this table contains information about the priority-based bandwidth of TE links. An ifEntry in the ifTable must exist before a teLinkBandwidthEntry using the same ifIndex is created. The ifType of ifEntry must be teLink(200). If a TE link entry in the ifTable is destroyed, then so are all of the entries in the teLinkBandwidthTable that use the ifIndex of this TE link.')
teLinkBandwidthPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 1), TeLinkPriority())
if mibBuilder.loadTexts: teLinkBandwidthPriority.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203 and Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630')
if mibBuilder.loadTexts: teLinkBandwidthPriority.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthPriority.setDescription("This attribute specifies the priority. A value of 0 is valid as specified in the 'Traffic Engineering (TE) Extensions to OSPF Version 2' document.")
teLinkBandwidthUnreserved = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 2), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: teLinkBandwidthUnreserved.setReference('Link Bundling in MPLS Traffic Engineering (TE), RFC 4201')
if mibBuilder.loadTexts: teLinkBandwidthUnreserved.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthUnreserved.setDescription('This attribute specifies the TE link unreserved bandwidth at priority p. It is the sum of the unreserved bandwidths at priority p of all component links associated with the TE link (excluding all links that are strictly used as protecting links).')
teLinkBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be modified when teLinkBandwidthRowStatus is active(1).')
teLinkBandwidthStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 4, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: teLinkBandwidthStorageType.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthStorageType.setDescription("The storage type for this conceptual row in the teLinkBandwidthTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
componentLinkTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 5), )
if mibBuilder.loadTexts: componentLinkTable.setStatus('current')
if mibBuilder.loadTexts: componentLinkTable.setDescription('This table specifies the component link parameters.')
componentLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: componentLinkEntry.setStatus('current')
if mibBuilder.loadTexts: componentLinkEntry.setDescription("An entry in this table exists for each ifEntry that represents a component link. An ifEntry must exist in the ifTable before a componentLinkEntry is created with the corresponding ifIndex. ifEntry's ifType can be of any interface type that has been defined for TE Link interworking. Examples include ATM, Frame Relay, Ethernet, etc. If an entry representing a component link is destroyed in the ifTable, then so is the corresponding entry in the componentLinkTable. The administrative and operational status values are controlled from the ifEntry.")
componentLinkMaxResBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 1), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkMaxResBandwidth.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkMaxResBandwidth.setStatus('current')
if mibBuilder.loadTexts: componentLinkMaxResBandwidth.setDescription('This attribute specifies the maximum reservable bandwidth on the component link.')
componentLinkPreferredProtection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 2), TeLinkProtection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkPreferredProtection.setStatus('current')
if mibBuilder.loadTexts: componentLinkPreferredProtection.setDescription('This attribute specifies whether this component link is a primary or secondary entity.')
componentLinkCurrentProtection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 3), TeLinkProtection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLinkCurrentProtection.setStatus('current')
if mibBuilder.loadTexts: componentLinkCurrentProtection.setDescription('This attribute specifies whether this component link is currently used as primary or secondary link.')
componentLinkRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: componentLinkRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be modified when componentLinkRowStatus is active(1).')
componentLinkStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 5, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkStorageType.setStatus('current')
if mibBuilder.loadTexts: componentLinkStorageType.setDescription("The storage type for this conceptual row in the componentLinkTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
componentLinkDescriptorTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 6), )
if mibBuilder.loadTexts: componentLinkDescriptorTable.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescriptorTable.setDescription('This table specifies the interface switching capability descriptors associated with the component links.')
componentLinkDescriptorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TE-LINK-STD-MIB", "componentLinkDescrId"))
if mibBuilder.loadTexts: componentLinkDescriptorEntry.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescriptorEntry.setDescription("An entry in this table is created for every component link descriptor. An ifEntry in the ifTable must exist before a componentLinkDescriptorEntry using the same ifIndex is created. ifEntry's ifType can be of any interface type that has been defined for TE Link interworking. Examples include ATM, Frame Relay, Ethernet, etc. If a component link entry in the ifTable is destroyed, then so are all entries in the componentLinkDescriptorTable that use the ifIndex of this component link.")
componentLinkDescrId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: componentLinkDescrId.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrId.setDescription('This object specifies the link descriptor identifier.')
componentLinkDescrSwitchingCapability = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 2), TeLinkSwitchingCapability()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrSwitchingCapability.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrSwitchingCapability.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrSwitchingCapability.setDescription('This attribute specifies link multiplexing capabilities of the component link.')
componentLinkDescrEncodingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 3), TeLinkEncodingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrEncodingType.setReference('Generalized Multi-Protocol Label Switching (GMPLS) Signaling Functional Description, RFC 3471')
if mibBuilder.loadTexts: componentLinkDescrEncodingType.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrEncodingType.setDescription('This attribute specifies the component link encoding type.')
componentLinkDescrMinLspBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 4), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMinLspBandwidth.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMinLspBandwidth.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMinLspBandwidth.setDescription('This attribute specifies the minimum LSP bandwidth on the component link.')
componentLinkDescrMaxLspBandwidthPrio0 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 5), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio0.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio0.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio0.setDescription('This attribute specifies the maximum LSP bandwidth at priority 0 on the component link.')
componentLinkDescrMaxLspBandwidthPrio1 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 6), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio1.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio1.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio1.setDescription('This attribute specifies the maximum LSP bandwidth at priority 1 on the component link.')
componentLinkDescrMaxLspBandwidthPrio2 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 7), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio2.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio2.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio2.setDescription('This attribute specifies the maximum LSP bandwidth at priority 2 on the component link.')
componentLinkDescrMaxLspBandwidthPrio3 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 8), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio3.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio3.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio3.setDescription('This attribute specifies the maximum LSP bandwidth at priority 3 on the component link.')
componentLinkDescrMaxLspBandwidthPrio4 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 9), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio4.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio4.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio4.setDescription('This attribute specifies the maximum LSP bandwidth at priority 4 on the component link.')
componentLinkDescrMaxLspBandwidthPrio5 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 10), TeLinkBandwidth()).setUnits('thousand bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio5.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio5.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio5.setDescription('This attribute specifies the maximum LSP bandwidth at priority 5 on the component link.')
componentLinkDescrMaxLspBandwidthPrio6 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 11), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio6.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio6.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio6.setDescription('This attribute specifies the maximum LSP bandwidth at priority 6 on the component link.')
componentLinkDescrMaxLspBandwidthPrio7 = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 12), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio7.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio7.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrMaxLspBandwidthPrio7.setDescription('This attribute specifies the maximum LSP bandwidth at priority 7 on the component link.')
componentLinkDescrInterfaceMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrInterfaceMtu.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrInterfaceMtu.setDescription('This attribute specifies the interface MTU for the component link descriptor.')
componentLinkDescrIndication = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 14), TeLinkSonetSdhIndication()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrIndication.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkDescrIndication.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrIndication.setDescription('This attribute specifies whether this interface supports Standard or Arbitrary SONET/SDH.')
componentLinkDescrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrRowStatus.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be modified when componentLinkDescrRowStatus is active(1).')
componentLinkDescrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 6, 1, 16), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkDescrStorageType.setStatus('current')
if mibBuilder.loadTexts: componentLinkDescrStorageType.setDescription("The storage type for this conceptual row in the componentLinkDescriptorTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
componentLinkBandwidthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 200, 1, 7), )
if mibBuilder.loadTexts: componentLinkBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthTable.setDescription('This table specifies the priority-based bandwidth for component links.')
componentLinkBandwidthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TE-LINK-STD-MIB", "componentLinkBandwidthPriority"))
if mibBuilder.loadTexts: componentLinkBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthEntry.setDescription("An entry in this table contains information about the priority-based bandwidth on component links. An ifEntry in the ifTable must exist before a componentLinkBandwidthEntry using the same ifIndex is created. ifEntry's ifType can be of any interface type that has been defined for TE Link interworking. Examples include ATM, Frame Relay, Ethernet, etc. If a component link entry in the ifTable is destroyed, then so are all entries in the componentLinkBandwidthTable that use the ifIndex of this component link.")
componentLinkBandwidthPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 1), TeLinkPriority())
if mibBuilder.loadTexts: componentLinkBandwidthPriority.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203 and Traffic Engineering (TE) Extensions to OSPF Version 2, RFC 3630')
if mibBuilder.loadTexts: componentLinkBandwidthPriority.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthPriority.setDescription("This attribute specifies the priority. A value of 0 is valid as specified in the 'Traffic Engineering (TE) Extensions to OSPF Version 2' document.")
componentLinkBandwidthUnreserved = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 2), TeLinkBandwidth()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLinkBandwidthUnreserved.setReference('OSPF Extensions in Support of Generalized Multi-Protocol Label Switching (GMPLS), RFC 4203')
if mibBuilder.loadTexts: componentLinkBandwidthUnreserved.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthUnreserved.setDescription('This attribute specifies the component link unreserved bandwidth at priority p.')
componentLinkBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthRowStatus.setDescription('This variable is used to create, modify, and/or delete a row in this table. No read-create object can be modified when componentLinkBandwidthRowStatus is active(1).')
componentLinkBandwidthStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 200, 1, 7, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: componentLinkBandwidthStorageType.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthStorageType.setDescription("The storage type for this conceptual row in the componentLinkBandwidthTable. Conceptual rows having the value 'permanent' need not allow write-access to any columnar object in the row.")
teLinkCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 200, 2, 1))
teLinkGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 200, 2, 2))
teLinkModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 200, 2, 1, 1)).setObjects(("TE-LINK-STD-MIB", "teLinkGroup"), ("TE-LINK-STD-MIB", "teLinkBandwidthGroup"), ("TE-LINK-STD-MIB", "componentLinkBandwidthGroup"), ("TE-LINK-STD-MIB", "teLinkSrlgGroup"), ("TE-LINK-STD-MIB", "teLinkPscGroup"), ("TE-LINK-STD-MIB", "teLinkTdmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkModuleFullCompliance = teLinkModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: teLinkModuleFullCompliance.setDescription('Compliance statement for agents that support read-create so that both configuration and monitoring of TE links can be accomplished via this MIB module.')
teLinkModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 200, 2, 1, 2)).setObjects(("TE-LINK-STD-MIB", "teLinkGroup"), ("TE-LINK-STD-MIB", "teLinkBandwidthGroup"), ("TE-LINK-STD-MIB", "componentLinkBandwidthGroup"), ("TE-LINK-STD-MIB", "teLinkSrlgGroup"), ("TE-LINK-STD-MIB", "teLinkPscGroup"), ("TE-LINK-STD-MIB", "teLinkTdmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkModuleReadOnlyCompliance = teLinkModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: teLinkModuleReadOnlyCompliance.setDescription('Compliance statement for agents that support the monitoring of the TE link MIB module.')
teLinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 1)).setObjects(("TE-LINK-STD-MIB", "teLinkAddressType"), ("TE-LINK-STD-MIB", "teLinkLocalIpAddr"), ("TE-LINK-STD-MIB", "teLinkRemoteIpAddr"), ("TE-LINK-STD-MIB", "teLinkMetric"), ("TE-LINK-STD-MIB", "teLinkProtectionType"), ("TE-LINK-STD-MIB", "teLinkWorkingPriority"), ("TE-LINK-STD-MIB", "teLinkResourceClass"), ("TE-LINK-STD-MIB", "teLinkIncomingIfId"), ("TE-LINK-STD-MIB", "teLinkOutgoingIfId"), ("TE-LINK-STD-MIB", "teLinkRowStatus"), ("TE-LINK-STD-MIB", "teLinkStorageType"), ("TE-LINK-STD-MIB", "teLinkDescrSwitchingCapability"), ("TE-LINK-STD-MIB", "teLinkDescrEncodingType"), ("TE-LINK-STD-MIB", "teLinkDescrRowStatus"), ("TE-LINK-STD-MIB", "teLinkDescrStorageType"), ("TE-LINK-STD-MIB", "componentLinkPreferredProtection"), ("TE-LINK-STD-MIB", "componentLinkCurrentProtection"), ("TE-LINK-STD-MIB", "componentLinkRowStatus"), ("TE-LINK-STD-MIB", "componentLinkStorageType"), ("TE-LINK-STD-MIB", "componentLinkDescrSwitchingCapability"), ("TE-LINK-STD-MIB", "componentLinkDescrEncodingType"), ("TE-LINK-STD-MIB", "componentLinkDescrRowStatus"), ("TE-LINK-STD-MIB", "componentLinkDescrStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkGroup = teLinkGroup.setStatus('current')
if mibBuilder.loadTexts: teLinkGroup.setDescription('Collection of objects needed for the management of resources associated with TE links.')
teLinkSrlgGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 2)).setObjects(("TE-LINK-STD-MIB", "teLinkSrlgRowStatus"), ("TE-LINK-STD-MIB", "teLinkSrlgStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkSrlgGroup = teLinkSrlgGroup.setStatus('current')
if mibBuilder.loadTexts: teLinkSrlgGroup.setDescription('Collection of objects needed for the management of SRLG resources associated with TE links.')
teLinkBandwidthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 3)).setObjects(("TE-LINK-STD-MIB", "teLinkMaximumReservableBandwidth"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio0"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio1"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio2"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio3"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio4"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio5"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio6"), ("TE-LINK-STD-MIB", "teLinkDescrMaxLspBandwidthPrio7"), ("TE-LINK-STD-MIB", "teLinkBandwidthUnreserved"), ("TE-LINK-STD-MIB", "teLinkBandwidthRowStatus"), ("TE-LINK-STD-MIB", "teLinkBandwidthStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkBandwidthGroup = teLinkBandwidthGroup.setStatus('current')
if mibBuilder.loadTexts: teLinkBandwidthGroup.setDescription('Collection of objects needed for the management of the bandwidth resources associated with TE links and component links.')
componentLinkBandwidthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 4)).setObjects(("TE-LINK-STD-MIB", "componentLinkMaxResBandwidth"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio0"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio1"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio2"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio3"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio4"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio5"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio6"), ("TE-LINK-STD-MIB", "componentLinkDescrMaxLspBandwidthPrio7"), ("TE-LINK-STD-MIB", "componentLinkBandwidthUnreserved"), ("TE-LINK-STD-MIB", "componentLinkBandwidthRowStatus"), ("TE-LINK-STD-MIB", "componentLinkBandwidthStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    componentLinkBandwidthGroup = componentLinkBandwidthGroup.setStatus('current')
if mibBuilder.loadTexts: componentLinkBandwidthGroup.setDescription('Collection of objects needed for the management of the bandwidth parameters associated with component links.')
teLinkPscGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 5)).setObjects(("TE-LINK-STD-MIB", "teLinkDescrMinLspBandwidth"), ("TE-LINK-STD-MIB", "teLinkDescrInterfaceMtu"), ("TE-LINK-STD-MIB", "componentLinkDescrMinLspBandwidth"), ("TE-LINK-STD-MIB", "componentLinkDescrInterfaceMtu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkPscGroup = teLinkPscGroup.setStatus('current')
if mibBuilder.loadTexts: teLinkPscGroup.setDescription('Collection of objects needed for devices that are packet switch capable.')
teLinkTdmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 200, 2, 2, 6)).setObjects(("TE-LINK-STD-MIB", "teLinkDescrMinLspBandwidth"), ("TE-LINK-STD-MIB", "teLinkDescrIndication"), ("TE-LINK-STD-MIB", "componentLinkDescrMinLspBandwidth"), ("TE-LINK-STD-MIB", "componentLinkDescrIndication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teLinkTdmGroup = teLinkTdmGroup.setStatus('current')
if mibBuilder.loadTexts: teLinkTdmGroup.setDescription('Collection of objects needed for devices that are TDM switching capable.')
mibBuilder.exportSymbols("TE-LINK-STD-MIB", componentLinkDescriptorTable=componentLinkDescriptorTable, teLinkSrlgRowStatus=teLinkSrlgRowStatus, teLinkDescrMaxLspBandwidthPrio3=teLinkDescrMaxLspBandwidthPrio3, teLinkBandwidthRowStatus=teLinkBandwidthRowStatus, teLinkGroup=teLinkGroup, teLinkMetric=teLinkMetric, componentLinkRowStatus=componentLinkRowStatus, teLinkTable=teLinkTable, teLinkDescrEncodingType=teLinkDescrEncodingType, teLinkModuleReadOnlyCompliance=teLinkModuleReadOnlyCompliance, teLinkModuleFullCompliance=teLinkModuleFullCompliance, TeLinkBandwidth=TeLinkBandwidth, teLinkMaximumReservableBandwidth=teLinkMaximumReservableBandwidth, teLinkCompliances=teLinkCompliances, teLinkDescrMaxLspBandwidthPrio7=teLinkDescrMaxLspBandwidthPrio7, teLinkDescrMaxLspBandwidthPrio6=teLinkDescrMaxLspBandwidthPrio6, componentLinkTable=componentLinkTable, teLinkOutgoingIfId=teLinkOutgoingIfId, componentLinkBandwidthTable=componentLinkBandwidthTable, componentLinkDescrStorageType=componentLinkDescrStorageType, componentLinkBandwidthStorageType=componentLinkBandwidthStorageType, teLinkDescriptorTable=teLinkDescriptorTable, componentLinkPreferredProtection=componentLinkPreferredProtection, componentLinkDescrSwitchingCapability=componentLinkDescrSwitchingCapability, teLinkBandwidthStorageType=teLinkBandwidthStorageType, componentLinkDescrMaxLspBandwidthPrio1=componentLinkDescrMaxLspBandwidthPrio1, teLinkTdmGroup=teLinkTdmGroup, teLinkStorageType=teLinkStorageType, teLinkDescrIndication=teLinkDescrIndication, componentLinkCurrentProtection=componentLinkCurrentProtection, teLinkStdMIB=teLinkStdMIB, PYSNMP_MODULE_ID=teLinkStdMIB, teLinkDescrRowStatus=teLinkDescrRowStatus, componentLinkDescrMaxLspBandwidthPrio6=componentLinkDescrMaxLspBandwidthPrio6, componentLinkDescrInterfaceMtu=componentLinkDescrInterfaceMtu, teLinkProtectionType=teLinkProtectionType, componentLinkDescrIndication=componentLinkDescrIndication, teLinkBandwidthUnreserved=teLinkBandwidthUnreserved, teLinkPscGroup=teLinkPscGroup, componentLinkDescrMaxLspBandwidthPrio0=componentLinkDescrMaxLspBandwidthPrio0, teLinkLocalIpAddr=teLinkLocalIpAddr, teLinkDescriptorEntry=teLinkDescriptorEntry, componentLinkDescrMaxLspBandwidthPrio7=componentLinkDescrMaxLspBandwidthPrio7, teLinkAddressType=teLinkAddressType, teLinkSrlgEntry=teLinkSrlgEntry, teLinkNotifications=teLinkNotifications, teLinkResourceClass=teLinkResourceClass, teLinkGroups=teLinkGroups, teLinkObjects=teLinkObjects, teLinkSrlgGroup=teLinkSrlgGroup, TeLinkProtection=TeLinkProtection, teLinkDescrMinLspBandwidth=teLinkDescrMinLspBandwidth, teLinkDescrMaxLspBandwidthPrio4=teLinkDescrMaxLspBandwidthPrio4, componentLinkBandwidthPriority=componentLinkBandwidthPriority, componentLinkBandwidthRowStatus=componentLinkBandwidthRowStatus, teLinkEntry=teLinkEntry, teLinkIncomingIfId=teLinkIncomingIfId, teLinkWorkingPriority=teLinkWorkingPriority, componentLinkDescriptorEntry=componentLinkDescriptorEntry, componentLinkBandwidthGroup=componentLinkBandwidthGroup, teLinkBandwidthPriority=teLinkBandwidthPriority, componentLinkDescrMaxLspBandwidthPrio3=componentLinkDescrMaxLspBandwidthPrio3, teLinkRemoteIpAddr=teLinkRemoteIpAddr, teLinkDescriptorId=teLinkDescriptorId, teLinkRowStatus=teLinkRowStatus, componentLinkBandwidthUnreserved=componentLinkBandwidthUnreserved, teLinkBandwidthEntry=teLinkBandwidthEntry, teLinkSrlg=teLinkSrlg, componentLinkBandwidthEntry=componentLinkBandwidthEntry, teLinkDescrMaxLspBandwidthPrio0=teLinkDescrMaxLspBandwidthPrio0, TeLinkSwitchingCapability=TeLinkSwitchingCapability, teLinkSrlgStorageType=teLinkSrlgStorageType, componentLinkDescrMaxLspBandwidthPrio2=componentLinkDescrMaxLspBandwidthPrio2, teLinkSrlgTable=teLinkSrlgTable, teLinkConformance=teLinkConformance, componentLinkDescrMaxLspBandwidthPrio5=componentLinkDescrMaxLspBandwidthPrio5, TeLinkPriority=TeLinkPriority, teLinkBandwidthGroup=teLinkBandwidthGroup, componentLinkDescrMaxLspBandwidthPrio4=componentLinkDescrMaxLspBandwidthPrio4, componentLinkDescrRowStatus=componentLinkDescrRowStatus, componentLinkStorageType=componentLinkStorageType, teLinkDescrInterfaceMtu=teLinkDescrInterfaceMtu, TeLinkSonetSdhIndication=TeLinkSonetSdhIndication, teLinkDescrMaxLspBandwidthPrio1=teLinkDescrMaxLspBandwidthPrio1, componentLinkDescrId=componentLinkDescrId, teLinkBandwidthTable=teLinkBandwidthTable, TeLinkEncodingType=TeLinkEncodingType, teLinkDescrSwitchingCapability=teLinkDescrSwitchingCapability, componentLinkMaxResBandwidth=componentLinkMaxResBandwidth, componentLinkEntry=componentLinkEntry, teLinkDescrMaxLspBandwidthPrio5=teLinkDescrMaxLspBandwidthPrio5, componentLinkDescrEncodingType=componentLinkDescrEncodingType, componentLinkDescrMinLspBandwidth=componentLinkDescrMinLspBandwidth, teLinkDescrMaxLspBandwidthPrio2=teLinkDescrMaxLspBandwidthPrio2, teLinkDescrStorageType=teLinkDescrStorageType)
