#
# PySNMP MIB module HP-SWITCH-BASIC-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SWITCH-BASIC-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
hpSwitchFilterConfig, hpSwitchConfig, hpSwitchIgmpConfig = mibBuilder.importSymbols("CONFIG-MIB", "hpSwitchFilterConfig", "hpSwitchConfig", "hpSwitchIgmpConfig")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
portCopyEntry, = mibBuilder.importSymbols("SMON-MIB", "portCopyEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Unsigned32, MibIdentifier, Integer32, NotificationType, Counter64, iso, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Unsigned32", "MibIdentifier", "Integer32", "NotificationType", "Counter64", "iso", "ModuleIdentity", "Counter32")
DisplayString, DateAndTime, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "RowStatus", "TextualConvention", "TruthValue")
hpSwitchBasicConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29))
hpSwitchBasicConfigMIB.setRevisions(('2015-10-11 00:00', '2015-04-20 00:00', '2014-12-11 00:00', '2014-03-25 00:00', '2013-07-22 00:00', '2013-05-22 00:00', '2013-02-16 00:00', '2012-02-03 00:00', '2011-09-08 00:00', '2011-06-15 21:07', '2010-08-05 00:00', '2010-06-28 00:00', '2010-04-14 00:00', '2010-02-17 00:00', '2009-09-10 00:00', '2009-08-18 00:00', '2009-07-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchBasicConfigMIB.setRevisionsDescriptions(('Added hpSwitchAclGroupingEnable.', 'Added hpSwitchRESTInterfaceStatus, hpSwitchRESTSessionIdleTimeout, hpSwitchBasicConfigCompliance11, hpSwitchRESTInterfaceGroup.', 'Added hpSwitchFPModuleConfigTable, hpSwitchBasicConfigCompliance10, hpSwitchFPModuleGroup.', 'Added hpSwitchAclIpv4DenyFragmentedTcpHeader, hpSwitchAclIpv6DenyNonClassifiableL4Header.', 'Added hpSwitchControlPlaneProtectionAdminStatus, hpSwitchBasicConfigCompliance8, hpSwitchBasicConfigGroup4.', 'Added hpSwitchChassisLocateWhen.', 'Added hpSwitchModuleConfigModRemove.', 'Added hpSwitchCdpPreStdVoiceTable, modified hpSwitchCdpRunMode.', 'Added hpSwitchCdpRunMode.', 'Added hpSwitchSecureModeLevel.', 'Added hpSwitchRunningCfgChgObjects, hpSwitchRunningCfgChgEventTable, hpSwitchRunningConfigChange NOTIFICATION.', 'Added hpSwitchImplicitConfigSave.', 'Added hpSwitchStartupConfigSourceIPAddrType, modified hpSwitchStartupConfigSourceIPAddr', 'Added hpSwitchStartupConfigSeqNum, hpSwitchStartupConfigNotifyEnable, hpSwitchNotificationObjects', 'Added hpSwitchIgmpProxyDomainConfigTable', 'Added hpSwitchDefaultLogon.', 'Initial revision.',))
if mibBuilder.loadTexts: hpSwitchBasicConfigMIB.setLastUpdated('201510110000Z')
if mibBuilder.loadTexts: hpSwitchBasicConfigMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpSwitchBasicConfigMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchBasicConfigMIB.setDescription('This MIB module describes objects for basic switch configuration.')
hpSwitchBasicConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1))
hpSwitchBasicConfigConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2))
hpSwitchACLConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 3))
hpSwitchModules = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7))
hpSwitchRunningCfgChgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12))
hpSwitchCdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 15))
hpSwitchFPModules = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 19))
hpSwitchSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noConfigSave", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSaveConfig.setStatus('current')
if mibBuilder.loadTexts: hpSwitchSaveConfig.setDescription("When this object is set to to 'saveConfig' it results in saving the running configuration of the switch to flash. The saved configuration becomes the boot-up configuration of the switch when it boots next time. When read, this object always returns 'noConfigSave'.")
hpSwitchAliasTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 2), )
if mibBuilder.loadTexts: hpSwitchAliasTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasTable.setDescription('Table of alias configurations for CLI commands. This table contains information about name of the alias and the corresponding CLI command.')
hpSwitchAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 2, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAliasName"))
if mibBuilder.loadTexts: hpSwitchAliasEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasEntry.setDescription('A row in the alias config table.')
hpSwitchAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: hpSwitchAliasName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasName.setDescription("Name of the alias which uniquely identifies alias configuration table. 'hpSwitchAliasName' can be used in place of 'hpSwitchAliasCommand` on the CLI. Maximum allowed length for alias name is 32 characters.")
hpSwitchAliasCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAliasCommand.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasCommand.setDescription("CLI command for which 'hpSwitchAliasName' can be used in CLI. Maximum allowed length for alias command is 255 characters. This object is required to create an entry in the table.")
hpSwitchAliasConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchAliasConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasConfigRowStatus.setDescription("Controls creation/deletion of entries in alias table. Row cant be created when 'hpSwitchAliasCommand' is of zero length. Row transition to 'notReady' or 'notInService' states are not allowed.")
hpicfBridgeFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 2), )
if mibBuilder.loadTexts: hpicfBridgeFilterConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterConfigTable.setDescription('A table that contains information about the source port traffic filter configuration in this device.')
hpicfBridgeFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 2, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpicfBridgeFilterName"))
if mibBuilder.loadTexts: hpicfBridgeFilterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterConfigEntry.setDescription('Information about a source port traffic filter configuration in this device.')
hpicfBridgeFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: hpicfBridgeFilterName.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterName.setDescription('This variable specifies the name of the filter. Filter name can be upto 20 characters. Filter name cannot contain tilde (~). A filter name can not be same as port-name.')
hpicfBridgeFilterDropPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 2, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBridgeFilterDropPortMask.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterDropPortMask.setDescription('This variable specifies a group of ports to which forwarding of filtered traffic is not permitted.')
hpicfBridgeFilterEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 8, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBridgeFilterEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterEntryStatus.setDescription("Row can be deleted only when no port are mapped to this filter in 'hpSwitchFilterConfigEntry' table.")
hpSwitchAclLogtimeoutConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAclLogtimeoutConfig.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclLogtimeoutConfig.setDescription('The time in seconds between ACL logging summary messages. Some devices may limit the range to 30..300.')
hpSwitchAclIpv4DenyFragmentedTcpHeader = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAclIpv4DenyFragmentedTcpHeader.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclIpv4DenyFragmentedTcpHeader.setDescription('Configure the device to drop all IPv4 packets containing a fragmented TCP header.')
hpSwitchAclIpv6DenyNonClassifiableL4Header = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAclIpv6DenyNonClassifiableL4Header.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclIpv6DenyNonClassifiableL4Header.setDescription('Configure the device to drop all IPv6 packets for which the Layer 4 header cannot be processed by ACL hardware.')
hpSwitchAclGroupingEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 3, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchAclGroupingEnable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclGroupingEnable.setDescription('This object enables or disables ACL Grouping support. When set to true(1), ACL Grouping will allow for the sharing of hardware entries from an ACL with the same name and type and applied in the same direction when the hpicfGppcv2AcSharedFlag is used to apply the ACL. When set to false(2), entries will be unshared.')
hpSwitchIgmpProxyDomainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5), )
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainConfigTable.setDescription('A table that contains information about the IGMP proxy domain configurations on this switch.')
hpSwitchIgmpProxyDomainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainId"))
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainConfigEntry.setDescription('The information associated with each IGMP proxy domain configuration.')
hpSwitchIgmpProxyDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainId.setDescription('The domain id that uniquely identifies a row in the IGMP proxy domain configuration table.')
hpSwitchIgmpProxyDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainStatus.setDescription('The status of a IGMP proxy domain configuration entry. Allows creation/deletion of the IGMP proxy domain entry. Row cannot be deleted if the IGMP proxy domain is associated with a VLAN.')
hpSwitchIgmpProxyDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainName.setDescription('The IGMP proxy domain name.')
hpSwitchIgmpProxyDomainIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainIp.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainIp.setDescription('The IGMP proxy domain IP.')
hpSwitchIgmpProxyMcastLowerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchIgmpProxyMcastLowerIp.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyMcastLowerIp.setDescription("The IGMP proxy domain's lower multicast IP.")
hpSwitchIgmpProxyMcastUpperIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 15, 5, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchIgmpProxyMcastUpperIp.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyMcastUpperIp.setDescription("The IGMP proxy domain's upper multicast IP.")
hpicfPortCopyNameTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 4), )
if mibBuilder.loadTexts: hpicfPortCopyNameTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPortCopyNameTable.setDescription('This table contains Mirroring Destination name String.')
hpicfPortCopyNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 4, 1), )
portCopyEntry.registerAugmentions(("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfPortCopyNameEntry"))
hpicfPortCopyNameEntry.setIndexNames(*portCopyEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfPortCopyNameEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPortCopyNameEntry.setDescription('An entry in the hpicfPortCopyNameEntry contains Mirroring Destination name string.')
hpicfPortCopyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 4, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPortCopyName.setStatus('current')
if mibBuilder.loadTexts: hpicfPortCopyName.setDescription('Mirroring Destination name string.')
hpSwitchDefaultLogon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cli", 0), ("menu", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDefaultLogon.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDefaultLogon.setDescription('This indicates whether switch should boot to CLI (default) or menu. The changes takes effect after rebooting the switch.')
hpSwitchChassisLocateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 6), )
if mibBuilder.loadTexts: hpSwitchChassisLocateTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateTable.setDescription('This table is contains information about the current state of all the chassis locate LEDs.')
hpSwitchChassisLocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpSwitchChassisLocateEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateEntry.setDescription('Contains information about the current state of a particular chassis LED.')
hpSwitchChassisLocateState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("blink", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchChassisLocateState.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateState.setDescription('The current state of the chassis locate LED.')
hpSwitchChassisLocateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 6, 1, 2), Integer32().clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchChassisLocateDuration.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateDuration.setDescription("The duration for which the current LED state is to be maintained. The minimum value is 60 and the maximum value is 86400. The 'off' state does not require a duration. A get request for the duration when the state is 'off' will return the default duration value.")
hpSwitchChassisLocateWhen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("now", 1), ("startup", 2))).clone('now')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchChassisLocateWhen.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateWhen.setDescription('When to apply the values specified by hpSwitchChassisLocateState and hpSwitchChassisLocateDuration. If not specified, the default is now.')
hpSwitchModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 1), )
if mibBuilder.loadTexts: hpSwitchModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleInfoTable.setDescription('A table describing all modules that can be supported by the device.')
hpSwitchModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 1, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleInfoModId"))
if mibBuilder.loadTexts: hpSwitchModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleInfoEntry.setDescription('The information regarding the module type in the switch. This table lists all the supported module types. The supported module type will have the equivalent module name.')
hpSwitchModuleInfoModId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpSwitchModuleInfoModId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleInfoModId.setDescription('The module Id. This is a sequence number')
hpSwitchModuleInfoModType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchModuleInfoModType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleInfoModType.setDescription('The module type in the switch. This is the Jnumber string that is supported on the device.')
hpSwitchModuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 2), )
if mibBuilder.loadTexts: hpSwitchModuleConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigTable.setDescription('A table to configure the module type for a specific module.')
hpSwitchModuleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpSwitchModuleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigEntry.setDescription('This entry is used to configure the module type for a specific module. Configuration of module type is not allowed if it is already configured.')
hpSwitchModuleConfigModType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchModuleConfigModType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigModType.setDescription('The module type in the switch. This is the Jnumber supported on the device. The supported types are listed in hpSwitchModuleInfoTable.')
hpSwitchModuleConfigModName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchModuleConfigModName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigModName.setDescription('The module name in the switch.')
hpSwitchModuleConfigModRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 7, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchModuleConfigModRemove.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigModRemove.setDescription('This MIB object is used to remove the slot configuration. Setting this object to true (1) will remove the module configuration. Default value is false (2). This object should always returns false (2). The module can be configured by setting the hpSwitchModuleConfigModType to a supported Jnumber on the device.')
hpSwitchWebSupportUrl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchWebSupportUrl.setStatus('current')
if mibBuilder.loadTexts: hpSwitchWebSupportUrl.setDescription('URL for the web interface support page.')
hpSwitchStartupConfigSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStartupConfigSeqNum.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigSeqNum.setDescription('This is the value of the global startup-config sequential number. Every change to startup-config increments the value by 1. Must be stored in non-volatile memory to be carried over the system boot.')
hpSwitchStartupConfigNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchStartupConfigNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigNotifyEnable.setDescription('Indicates whether the SNMP entity is permitted to generate hpSwitchStartupConfigChange notifications. Default is disabled.')
hpSwitchImplicitConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchImplicitConfigSave.setStatus('current')
if mibBuilder.loadTexts: hpSwitchImplicitConfigSave.setDescription("This object is to enable/disable the implicit write-memory (saving the running-config to the flash) done after every successful SNMP set operation. When set to 'enable', config changes are written to the flash which results in slow performance for these set operations. To get faster processing while doing large number of continuous SNMP set operations, this object can be set to 'disable'; And,once the SNMP set operations are done, 'hpSwitchSaveConfig' MIB object can be used to save the running-config to the flash. This object will not be saved across a re-boot, and will always be set to 'enable' at boot. It is advisable to set this MIB object to 'disable' only when there are a lot of continuous SNMP set operations e.g. a script executing a large number of SNMP set operations.")
hpSwitchSecureModeLevel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 16))).clone(namedValues=NamedValues(("error", 0), ("standard", 1), ("enhanced", 16))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchSecureModeLevel.setStatus('current')
if mibBuilder.loadTexts: hpSwitchSecureModeLevel.setDescription('Indicates current Secure-Mode Level of switch standard : switch operates with standard security capabilities. enhanced : switch operates with enhanced security capabilities for configurations to satisfy FIPS 140-2 requirements.The default level is standard.')
hpSwitchNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0))
hpSwitchStartupConfigSource = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("viaCli", 1), ("viaSnmp", 2), ("viaWebUI", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStartupConfigSource.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigSource.setDescription('Indicate the method of change to startup config was initiated.')
hpSwitchStartupConfigSourceIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceIPAddrType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceIPAddrType.setDescription('Indicates the source address type of network agent which made a change. Not valid (set to zero) if change is made via CLI on system console.')
hpSwitchStartupConfigSourceIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceIPAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceIPAddr.setDescription('Indicates the source address of network agent which made a change. Not valid (set to zero) if change is made via CLI on system console.')
hpSwitchStartupConfigSourceUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceUsername.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigSourceUsername.setDescription('Indicates the username of CLI user making the change to startup config. Zero-string if username is not set or change is made via SNMP')
hpSwitchStartupConfigThrottled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 5), TruthValue().clone('false')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpSwitchStartupConfigThrottled.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigThrottled.setDescription('Indicates if notification throttle was activated and one or more notifications were dropped.')
hpSwitchStartupConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 6)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSeqNum"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSource"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceIPAddrType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceIPAddr"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceUsername"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigThrottled"))
if mibBuilder.loadTexts: hpSwitchStartupConfigChange.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigChange.setDescription("The hpSwitchStartupConfigChange notification signifies that switch's startup config was modified by user/manager. Notifications might be buffered on the system to be sent after throttle delay. In some cases, notifications will be dropped. At such event the next transmitted notification will set flag hpSwitchStartupConfigThrottled")
hpSwitchRunningCfgChgNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgNotifyEnable.setDescription('Indicates whether the SNMP entity is permitted to generate hpSwitchRunningConfigChange notifications. Default is disabled.')
hpSwitchRunningCfgChgTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgTransmitInterval.setDescription('Specifies the transmission interval in seconds for sending running config change traps. Only one running config change trap is sent in this time interval. Default value is 0, indicating there is no limit on sending running config change traps.')
hpSwitchRunningCfgChgLatestDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgLatestDateAndTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgLatestDateAndTime.setDescription('Indicates the date and time of the most recent running config change.')
hpSwitchRunningCfgChgCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgCount.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgCount.setDescription('The total number of running config changes since last reboot.')
hpSwitchRunningCfgChgEntriesBumped = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEntriesBumped.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEntriesBumped.setDescription('The number of times the oldest entry in hpSwitchRunningCfgChgTable was discarded to make room for a new entry.')
hpSwitchRunningCfgChgEventTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6), )
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventTable.setDescription('A table of latest 32 running configuration change events.')
hpSwitchRunningCfgChgEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventTableIndex"))
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventEntry.setDescription('Information about running configuration change event on this switch.')
hpSwitchRunningCfgChgEventTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventTableIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventTableIndex.setDescription('The Index for hpSwitchRunningCfgChgTable.')
hpSwitchRunningCfgChgEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventId.setDescription('Identifies a specific running config change. Monotonically increasing values will be assigned by the system to each event as it occurs. If the system is reset, these event ID values will be reset as well. ')
hpSwitchRunningCfgChgEventMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("cli", 1), ("menu", 2), ("snmp", 3), ("webUI", 4), ("internalEvent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventMethod.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventMethod.setDescription('Indicates the source through which change to running config was initiated.')
hpSwitchRunningCfgChgEventSourceIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventSourceIPAddrType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventSourceIPAddrType.setDescription('Indicates the source address type of network agent which made a change. This object value is set to an address type of unknown when not applicable.')
hpSwitchRunningCfgChgEventSourceIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventSourceIPAddr.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventSourceIPAddr.setDescription('Indicates the source address of network agent which made a running config change. The value is an address of length 0 (unknown(0)) if not available or not applicable.')
hpSwitchRunningCfgChgEventUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventUsername.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventUsername.setDescription('Indicates the username of the user making the change the change to running config. Empty string (length 0) if username is not available or not applicable.')
hpSwitchRunningCfgChgEventDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 12, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventDateAndTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgEventDateAndTime.setDescription('Indicates the date and time of the running config change.')
hpSwitchRunningConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 0, 7)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventId"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventMethod"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventSourceIPAddrType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventSourceIPAddr"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventUsername"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventDateAndTime"))
if mibBuilder.loadTexts: hpSwitchRunningConfigChange.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningConfigChange.setDescription('Notification of a running configuration change event as recorded in hpSwitchRunningCfgChgTable.')
hpSwitchCdpRunMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rxonly", 1), ("passthru", 2), ("preStdVoice", 3))).clone('rxonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCdpRunMode.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpRunMode.setDescription('Indicates the mode of CDP processing. This variable has no effect when CDP is disabled (cdpGlobalRun = FALSE).')
hpSwitchIgnoreUntagMacPortList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 16), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchIgnoreUntagMacPortList.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgnoreUntagMacPortList.setDescription('Prevent learning MAC addresses on the specified ports when the VLAN is untagged and the destination MAC address is one of the following: 01000C-CCCCCC (CDP) 0180c2-00000e (LLDP) 0180c2-000003 (EAPOL)')
hpSwitchControlPlaneProtectionAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchControlPlaneProtectionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchControlPlaneProtectionAdminStatus.setDescription('The operational status of the Control Plane Protection feature. When Control Plane Protection feature is enabled on a device, if the number of IP error packets exceed the threshold value they are dropped at the data plane. This eliminates the processing of error packets by control plane, thereby reducing the load on the CPU.')
hpSwitchRESTInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRESTInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRESTInterfaceStatus.setDescription('The object that can be used to enable or disable the REST interface. The default value is enable.')
hpSwitchRESTSessionIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchRESTSessionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRESTSessionIdleTimeout.setDescription('The time period after which the REST session timeout occurs. A user can configure this parameter. The default value is 600 seconds.')
hpSwitchCdpPreStdVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 15, 1), )
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceTable.setDescription('Information about cdp pre-standard-voice admin status for each port in this device.')
hpSwitchCdpPreStdVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 15, 1, 1), ).setIndexNames((0, "HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchCdpPreStdVoiceIfIndex"))
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceEntry.setDescription('Information about cdp pre-standard-voice admin status for a switch port.')
hpSwitchCdpPreStdVoiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 15, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceIfIndex.setDescription('The ifIndex value of the local interface.')
hpSwitchCdpPreStdVoiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txAndRx", 1), ("rxOnly", 2))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceStatus.setDescription("Indicates the admin status for cdp pre-standard-voice mode for this cdpInterfaceIfIndex entry Default is txAndRx and this value is valid only if hpSwitchCdpRunMode is 'preStdVoice(3)' .")
hpSwitchFPModuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 19, 1), )
if mibBuilder.loadTexts: hpSwitchFPModuleConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFPModuleConfigTable.setDescription('A table that contains the configuration details for flexible modules.')
hpSwitchFPModuleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 19, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpSwitchFPModuleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFPModuleConfigEntry.setDescription('An entry in the table that contains the configuration details of a flexible module.')
hpSwitchFPModuleConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("jl078a", 1), ("jl079a", 2), ("jl081a", 3), ("jl083a", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFPModuleConfigType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFPModuleConfigType.setDescription('The J-Number of the flexible module. When set to a value other than none, the value can only be changed to none. Setting this object to none (0) erases the flexible module configuration .')
hpSwitchFPModuleConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 1, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFPModuleConfigName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFPModuleConfigName.setDescription('The flexible module name in the switch. Some devices do not support configuration of the flexible module name and will return an error if this object is set.')
hpSwitchBasicConfigCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1))
hpSwitchBasicConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2))
hpSwitchBasicNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 3))
hpSwitchBasicConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 1)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAliasGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfBridgeFilterConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfPortCopyNameGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclLogtimeoutGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchChassisLocateGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicNotificationGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigChangeGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance = hpSwitchBasicConfigCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 2)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance2 = hpSwitchBasicConfigCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance2.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 3)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicConfigGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance3 = hpSwitchBasicConfigCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance3.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 4)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchCdpConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance4 = hpSwitchBasicConfigCompliance4.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance4.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 5)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchCdpPreStdVoiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance5 = hpSwitchBasicConfigCompliance5.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance5.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 6)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgnoreUntagMacConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance6 = hpSwitchBasicConfigCompliance6.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance6.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 7)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance7 = hpSwitchBasicConfigCompliance7.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance7.setDescription('The compliance statement for config entities which implements the basic configuration of the switch.')
hpSwitchBasicConfigCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 8)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicConfigGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance8 = hpSwitchBasicConfigCompliance8.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance8.setDescription('The compliance statement for entities that implement the Control Plane Protection feature on a device.')
hpSwitchBasicConfigCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 10)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchFPModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance10 = hpSwitchBasicConfigCompliance10.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance10.setDescription('The compliance statement for entities that implement the flexible Module configuration on a device.')
hpSwitchBasicConfigCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 11)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRESTInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance11 = hpSwitchBasicConfigCompliance11.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance11.setDescription('The compliance statement for entities that implement the REST interface configuration on a device.')
hpSwitchBasicConfigCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 1, 12)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAliasGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfBridgeFilterConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfPortCopyNameGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclLogtimeoutGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainConfigGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchChassisLocateGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchBasicNotificationGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigChangeGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclGroup"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclGroupingEnableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigCompliance12 = hpSwitchBasicConfigCompliance12.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigCompliance12.setDescription('The compliance statement for config entities which implements basic configuration of the switch.')
hpSwitchBasicConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 1)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchSaveConfig"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchDefaultLogon"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchWebSupportUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigGroup = hpSwitchBasicConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigGroup.setDescription('A collection of objects for basic configuration of the switch.')
hpSwitchAliasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 2)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAliasCommand"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAliasConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAliasGroup = hpSwitchAliasGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAliasGroup.setDescription('A collection of objects for alias configuration for CLI commands.')
hpicfBridgeFilterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 3)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfBridgeFilterDropPortMask"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfBridgeFilterEntryStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBridgeFilterConfigGroup = hpicfBridgeFilterConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfBridgeFilterConfigGroup.setDescription('A collection of objects for source-port filter configuration.')
hpicfPortCopyNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 4)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpicfPortCopyName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPortCopyNameGroup = hpicfPortCopyNameGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPortCopyNameGroup.setDescription('A collection of objects for mirror configuration for CLI commands.')
hpSwitchAclLogtimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 5)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclLogtimeoutConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAclLogtimeoutGroup = hpSwitchAclLogtimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclLogtimeoutGroup.setDescription('A collection of objects for ACL log timeout configuration of the switch.')
hpSwitchIgmpProxyDomainConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 6)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainName"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainStatus"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyDomainIp"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyMcastLowerIp"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgmpProxyMcastUpperIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchIgmpProxyDomainConfigGroup = hpSwitchIgmpProxyDomainConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgmpProxyDomainConfigGroup.setDescription('A collection of objects for IGMP proxy domain configuration.')
hpSwitchChassisLocateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 7)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchChassisLocateState"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchChassisLocateDuration"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchChassisLocateWhen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchChassisLocateGroup = hpSwitchChassisLocateGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchChassisLocateGroup.setDescription('A collection of objects for chassis locate configuration.')
hpSwitchModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 8)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleInfoModType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleConfigModType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleConfigModName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchModuleGroup = hpSwitchModuleGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleGroup.setDescription('A collection of objects for switch module configuration.')
hpSwitchStartupConfigChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 9)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSeqNum"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigNotifyEnable"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSource"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceIPAddrType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceIPAddr"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigSourceUsername"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigThrottled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchStartupConfigChangeGroup = hpSwitchStartupConfigChangeGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchStartupConfigChangeGroup.setDescription('A collection of objects for startup config change notifications.')
hpSwitchBasicConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 10)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchImplicitConfigSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigGroup2 = hpSwitchBasicConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigGroup2.setDescription('A collection of objects for switch basic configurations.')
hpSwitchRunningCfgChgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 11)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgNotifyEnable"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgTransmitInterval"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgLatestDateAndTime"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgCount"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEntriesBumped"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventId"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventMethod"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventSourceIPAddrType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventSourceIPAddr"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventUsername"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningCfgChgEventDateAndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRunningCfgChgGroup = hpSwitchRunningCfgChgGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRunningCfgChgGroup.setDescription('A collection of objects for running config change details and its notification.')
hpSwitchBasicConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 12)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchSecureModeLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigGroup3 = hpSwitchBasicConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigGroup3.setDescription('A collection of objects for switch Secure mode configurations.')
hpSwitchBasicNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 3, 1)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRunningConfigChange"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchStartupConfigChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicNotificationGroup = hpSwitchBasicNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicNotificationGroup.setDescription('Switch Basic Config notifications')
hpSwitchCdpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 13)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchCdpRunMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCdpConfigGroup = hpSwitchCdpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpConfigGroup.setDescription('A collection of objects for Cisco discovery protocol mode configurations.')
hpSwitchCdpPreStdVoiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 14)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchCdpPreStdVoiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchCdpPreStdVoiceGroup = hpSwitchCdpPreStdVoiceGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchCdpPreStdVoiceGroup.setDescription('A collection of objects for Cisco discovery protocol mode configurations.')
hpSwitchIgnoreUntagMacConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 15)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchIgnoreUntagMacPortList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchIgnoreUntagMacConfigGroup = hpSwitchIgnoreUntagMacConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchIgnoreUntagMacConfigGroup.setDescription('A collection of objects for Ignore untag MAC configurations.')
hpSwitchModuleConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 16)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchModuleConfigModRemove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchModuleConfigGroup = hpSwitchModuleConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchModuleConfigGroup.setDescription('Group of objects representing module configuration.')
hpSwitchBasicConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 17)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchControlPlaneProtectionAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchBasicConfigGroup4 = hpSwitchBasicConfigGroup4.setStatus('current')
if mibBuilder.loadTexts: hpSwitchBasicConfigGroup4.setDescription('A collection of objects to configure the Control Plane Protection on a device.')
hpSwitchAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 20)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclIpv4DenyFragmentedTcpHeader"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclIpv6DenyNonClassifiableL4Header"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAclGroup = hpSwitchAclGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclGroup.setDescription('A collection of objects to configure ACL options on a device.')
hpSwitchFPModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 21)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchFPModuleConfigType"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchFPModuleConfigName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFPModuleGroup = hpSwitchFPModuleGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFPModuleGroup.setDescription('A collection of objects for switch flexible module configuration.')
hpSwitchRESTInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 22)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRESTInterfaceStatus"), ("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchRESTSessionIdleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchRESTInterfaceGroup = hpSwitchRESTInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRESTInterfaceGroup.setDescription('A collection of objects for the Representational State Transfer (REST) interface configuration.')
hpSwitchAclGroupingEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 29, 2, 2, 23)).setObjects(("HP-SWITCH-BASIC-CONFIG-MIB", "hpSwitchAclGroupingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchAclGroupingEnableGroup = hpSwitchAclGroupingEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchAclGroupingEnableGroup.setDescription('A collection of objects to configure ACL Grouping options on a device.')
mibBuilder.exportSymbols("HP-SWITCH-BASIC-CONFIG-MIB", hpSwitchAliasEntry=hpSwitchAliasEntry, hpSwitchModuleConfigGroup=hpSwitchModuleConfigGroup, hpSwitchImplicitConfigSave=hpSwitchImplicitConfigSave, hpSwitchStartupConfigThrottled=hpSwitchStartupConfigThrottled, hpSwitchRESTInterfaceGroup=hpSwitchRESTInterfaceGroup, hpSwitchFPModuleConfigType=hpSwitchFPModuleConfigType, hpSwitchBasicConfigMIB=hpSwitchBasicConfigMIB, hpSwitchBasicNotificationGroups=hpSwitchBasicNotificationGroups, hpSwitchChassisLocateDuration=hpSwitchChassisLocateDuration, hpSwitchSaveConfig=hpSwitchSaveConfig, hpSwitchRunningConfigChange=hpSwitchRunningConfigChange, hpicfPortCopyName=hpicfPortCopyName, hpSwitchBasicConfigGroup3=hpSwitchBasicConfigGroup3, hpSwitchRunningCfgChgLatestDateAndTime=hpSwitchRunningCfgChgLatestDateAndTime, hpSwitchAliasGroup=hpSwitchAliasGroup, hpSwitchBasicConfigCompliance3=hpSwitchBasicConfigCompliance3, hpSwitchModuleInfoTable=hpSwitchModuleInfoTable, hpSwitchIgmpProxyDomainConfigTable=hpSwitchIgmpProxyDomainConfigTable, hpSwitchChassisLocateTable=hpSwitchChassisLocateTable, hpSwitchStartupConfigSource=hpSwitchStartupConfigSource, hpSwitchBasicConfigCompliance12=hpSwitchBasicConfigCompliance12, hpSwitchRESTInterfaceStatus=hpSwitchRESTInterfaceStatus, hpSwitchModuleInfoModType=hpSwitchModuleInfoModType, hpicfPortCopyNameEntry=hpicfPortCopyNameEntry, hpSwitchRunningCfgChgCount=hpSwitchRunningCfgChgCount, hpicfBridgeFilterName=hpicfBridgeFilterName, hpSwitchIgnoreUntagMacConfigGroup=hpSwitchIgnoreUntagMacConfigGroup, hpSwitchRunningCfgChgEventTable=hpSwitchRunningCfgChgEventTable, hpSwitchIgmpProxyMcastUpperIp=hpSwitchIgmpProxyMcastUpperIp, hpSwitchStartupConfigChangeGroup=hpSwitchStartupConfigChangeGroup, hpSwitchFPModuleConfigEntry=hpSwitchFPModuleConfigEntry, hpSwitchCdpPreStdVoiceGroup=hpSwitchCdpPreStdVoiceGroup, hpSwitchBasicConfigCompliance11=hpSwitchBasicConfigCompliance11, hpSwitchRunningCfgChgEventId=hpSwitchRunningCfgChgEventId, hpSwitchBasicConfigCompliance4=hpSwitchBasicConfigCompliance4, hpSwitchRunningCfgChgEventMethod=hpSwitchRunningCfgChgEventMethod, hpSwitchBasicConfigGroup4=hpSwitchBasicConfigGroup4, hpSwitchAclIpv6DenyNonClassifiableL4Header=hpSwitchAclIpv6DenyNonClassifiableL4Header, hpSwitchChassisLocateGroup=hpSwitchChassisLocateGroup, hpSwitchAliasTable=hpSwitchAliasTable, hpSwitchRunningCfgChgEventUsername=hpSwitchRunningCfgChgEventUsername, hpSwitchCdpObjects=hpSwitchCdpObjects, hpSwitchBasicConfigGroup2=hpSwitchBasicConfigGroup2, hpSwitchWebSupportUrl=hpSwitchWebSupportUrl, hpSwitchIgmpProxyDomainName=hpSwitchIgmpProxyDomainName, hpSwitchRunningCfgChgEventEntry=hpSwitchRunningCfgChgEventEntry, hpSwitchRunningCfgChgTransmitInterval=hpSwitchRunningCfgChgTransmitInterval, hpSwitchAclIpv4DenyFragmentedTcpHeader=hpSwitchAclIpv4DenyFragmentedTcpHeader, hpSwitchFPModuleConfigTable=hpSwitchFPModuleConfigTable, PYSNMP_MODULE_ID=hpSwitchBasicConfigMIB, hpSwitchACLConfig=hpSwitchACLConfig, hpSwitchSecureModeLevel=hpSwitchSecureModeLevel, hpSwitchAliasConfigRowStatus=hpSwitchAliasConfigRowStatus, hpicfBridgeFilterDropPortMask=hpicfBridgeFilterDropPortMask, hpSwitchStartupConfigSourceIPAddr=hpSwitchStartupConfigSourceIPAddr, hpSwitchChassisLocateEntry=hpSwitchChassisLocateEntry, hpSwitchModuleInfoModId=hpSwitchModuleInfoModId, hpSwitchChassisLocateState=hpSwitchChassisLocateState, hpicfBridgeFilterConfigGroup=hpicfBridgeFilterConfigGroup, hpSwitchBasicConfigCompliance7=hpSwitchBasicConfigCompliance7, hpicfBridgeFilterConfigEntry=hpicfBridgeFilterConfigEntry, hpSwitchModuleConfigEntry=hpSwitchModuleConfigEntry, hpSwitchAclGroupingEnableGroup=hpSwitchAclGroupingEnableGroup, hpSwitchFPModules=hpSwitchFPModules, hpSwitchRunningCfgChgEventSourceIPAddr=hpSwitchRunningCfgChgEventSourceIPAddr, hpSwitchBasicConfigGroup=hpSwitchBasicConfigGroup, hpSwitchIgmpProxyDomainConfigEntry=hpSwitchIgmpProxyDomainConfigEntry, hpSwitchStartupConfigNotifyEnable=hpSwitchStartupConfigNotifyEnable, hpSwitchModules=hpSwitchModules, hpSwitchRESTSessionIdleTimeout=hpSwitchRESTSessionIdleTimeout, hpSwitchIgmpProxyDomainConfigGroup=hpSwitchIgmpProxyDomainConfigGroup, hpSwitchIgmpProxyMcastLowerIp=hpSwitchIgmpProxyMcastLowerIp, hpSwitchCdpConfigGroup=hpSwitchCdpConfigGroup, hpSwitchRunningCfgChgEntriesBumped=hpSwitchRunningCfgChgEntriesBumped, hpSwitchStartupConfigChange=hpSwitchStartupConfigChange, hpSwitchIgmpProxyDomainId=hpSwitchIgmpProxyDomainId, hpSwitchBasicConfigGroups=hpSwitchBasicConfigGroups, hpSwitchCdpPreStdVoiceTable=hpSwitchCdpPreStdVoiceTable, hpSwitchBasicConfigObjects=hpSwitchBasicConfigObjects, hpSwitchCdpPreStdVoiceIfIndex=hpSwitchCdpPreStdVoiceIfIndex, hpSwitchModuleConfigModType=hpSwitchModuleConfigModType, hpSwitchModuleConfigTable=hpSwitchModuleConfigTable, hpSwitchModuleInfoEntry=hpSwitchModuleInfoEntry, hpSwitchIgmpProxyDomainStatus=hpSwitchIgmpProxyDomainStatus, hpSwitchRunningCfgChgEventSourceIPAddrType=hpSwitchRunningCfgChgEventSourceIPAddrType, hpSwitchRunningCfgChgNotifyEnable=hpSwitchRunningCfgChgNotifyEnable, hpSwitchFPModuleConfigName=hpSwitchFPModuleConfigName, hpSwitchBasicConfigCompliances=hpSwitchBasicConfigCompliances, hpSwitchBasicConfigCompliance8=hpSwitchBasicConfigCompliance8, hpSwitchBasicConfigConformance=hpSwitchBasicConfigConformance, hpSwitchAclLogtimeoutGroup=hpSwitchAclLogtimeoutGroup, hpSwitchAclGroupingEnable=hpSwitchAclGroupingEnable, hpSwitchAliasCommand=hpSwitchAliasCommand, hpSwitchModuleGroup=hpSwitchModuleGroup, hpSwitchCdpRunMode=hpSwitchCdpRunMode, hpSwitchRunningCfgChgEventTableIndex=hpSwitchRunningCfgChgEventTableIndex, hpSwitchModuleConfigModName=hpSwitchModuleConfigModName, hpSwitchModuleConfigModRemove=hpSwitchModuleConfigModRemove, hpSwitchAliasName=hpSwitchAliasName, hpSwitchBasicConfigCompliance6=hpSwitchBasicConfigCompliance6, hpicfBridgeFilterConfigTable=hpicfBridgeFilterConfigTable, hpSwitchBasicConfigCompliance10=hpSwitchBasicConfigCompliance10, hpSwitchRunningCfgChgObjects=hpSwitchRunningCfgChgObjects, hpSwitchCdpPreStdVoiceEntry=hpSwitchCdpPreStdVoiceEntry, hpSwitchStartupConfigSeqNum=hpSwitchStartupConfigSeqNum, hpSwitchFPModuleGroup=hpSwitchFPModuleGroup, hpicfPortCopyNameTable=hpicfPortCopyNameTable, hpSwitchIgmpProxyDomainIp=hpSwitchIgmpProxyDomainIp, hpSwitchBasicConfigCompliance2=hpSwitchBasicConfigCompliance2, hpSwitchAclGroup=hpSwitchAclGroup, hpSwitchStartupConfigSourceUsername=hpSwitchStartupConfigSourceUsername, hpSwitchCdpPreStdVoiceStatus=hpSwitchCdpPreStdVoiceStatus, hpicfPortCopyNameGroup=hpicfPortCopyNameGroup, hpSwitchControlPlaneProtectionAdminStatus=hpSwitchControlPlaneProtectionAdminStatus, hpSwitchBasicNotificationGroup=hpSwitchBasicNotificationGroup, hpSwitchNotificationObjects=hpSwitchNotificationObjects, hpicfBridgeFilterEntryStatus=hpicfBridgeFilterEntryStatus, hpSwitchBasicConfigCompliance=hpSwitchBasicConfigCompliance, hpSwitchRunningCfgChgEventDateAndTime=hpSwitchRunningCfgChgEventDateAndTime, hpSwitchBasicConfigCompliance5=hpSwitchBasicConfigCompliance5, hpSwitchChassisLocateWhen=hpSwitchChassisLocateWhen, hpSwitchIgnoreUntagMacPortList=hpSwitchIgnoreUntagMacPortList, hpSwitchAclLogtimeoutConfig=hpSwitchAclLogtimeoutConfig, hpSwitchStartupConfigSourceIPAddrType=hpSwitchStartupConfigSourceIPAddrType, hpSwitchRunningCfgChgGroup=hpSwitchRunningCfgChgGroup, hpSwitchDefaultLogon=hpSwitchDefaultLogon)
