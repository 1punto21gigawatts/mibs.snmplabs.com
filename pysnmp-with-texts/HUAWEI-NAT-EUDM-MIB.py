#
# PySNMP MIB module HUAWEI-NAT-EUDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-NAT-EUDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ModuleIdentity, Counter32, NotificationType, MibIdentifier, iso, Gauge32, Bits, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ModuleIdentity", "Counter32", "NotificationType", "MibIdentifier", "iso", "Gauge32", "Bits", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hwNATEudm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2))
if mibBuilder.loadTexts: hwNATEudm.setLastUpdated('200303180900Z')
if mibBuilder.loadTexts: hwNATEudm.setOrganization('Huawei Technologies Co., Ltd. ')
if mibBuilder.loadTexts: hwNATEudm.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwNATEudm.setDescription(' V1.00 The NAT-EUDM mib is for Eudemon product. ')
class NatType(TextualConvention, Integer32):
    description = ' nat type. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pat", 1), ("nat", 2), ("easyIP", 3))

hwNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7))
hwNatEudmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1))
hwNatEudmOutboundTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1), )
if mibBuilder.loadTexts: hwNatEudmOutboundTable.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundTable.setDescription(' The NAT Inside Table. ')
hwNatEudmOutboundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1), ).setIndexNames((0, "HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundNatID"))
if mibBuilder.loadTexts: hwNatEudmOutboundEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundEntry.setDescription(' The NAT Inside Table Entry. ')
hwNatEudmOutboundNatID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwNatEudmOutboundNatID.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundNatID.setDescription(' The nat outbound table index. This is index. ')
hwNatEudmOutboundType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 2), NatType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmOutboundType.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundType.setDescription(' The type of NAT ')
hwNatEudmOutboundAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmOutboundAclNumber.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundAclNumber.setDescription(' The access-list number. 0 means no use this item. ')
hwNatEudmOutboundPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmOutboundPoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundPoolIndex.setDescription(' The index of nat address pool. 0 means no use this item. ')
hwNatEudmOutboundEasyIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 5), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmOutboundEasyIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundEasyIpIfIndex.setDescription(' The interface index used by easy-ip. ')
hwNatEudmOutboundRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNatEudmOutboundRefCount.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundRefCount.setDescription(' This outbound table reference count. ')
hwNatEudmOutboundRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmOutboundRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmOutboundRowstatus.setDescription(' Row status Only support CreateAndGo and Destroy. ')
hwNatEudmZoneApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2), )
if mibBuilder.loadTexts: hwNatEudmZoneApplyTable.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyTable.setDescription(' Table saves which nat is applyed between Zones . ')
hwNatEudmZoneApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-NAT-EUDM-MIB", "hwNatEudmZoneApplyZoneID1"), (0, "HUAWEI-NAT-EUDM-MIB", "hwNatEudmZoneApplyZoneID2"), (0, "HUAWEI-NAT-EUDM-MIB", "hwNatEudmZoneApplyNatID"))
if mibBuilder.loadTexts: hwNatEudmZoneApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyEntry.setDescription(' Apply Table Entry. ')
hwNatEudmZoneApplyZoneID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwNatEudmZoneApplyZoneID1.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyZoneID1.setDescription(' The internal ID of first security zone This is index. 0: Any zone. ')
hwNatEudmZoneApplyZoneID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwNatEudmZoneApplyZoneID2.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyZoneID2.setDescription(' The internal ID of second security zone. This is index. 0: Any zone. ')
hwNatEudmZoneApplyNatID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: hwNatEudmZoneApplyNatID.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyNatID.setDescription(' The nat outbound table index. This is index. ')
hwNatEudmZoneApplyRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwNatEudmZoneApplyRowstatus.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmZoneApplyRowstatus.setDescription(' Row status Only support CreateAndGo and Destroy. ')
hwNatEudmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 2))
hwNatEudmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 2, 1))
hwNatEudmCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 7, 2, 2, 1, 1)).setObjects(("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundRefCount"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmZoneApplyRowstatus"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundType"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundAclNumber"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundPoolIndex"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundEasyIpIfIndex"), ("HUAWEI-NAT-EUDM-MIB", "hwNatEudmOutboundRowstatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwNatEudmCfgGroup = hwNatEudmCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwNatEudmCfgGroup.setDescription(' Nat Eudemon mib group. ')
mibBuilder.exportSymbols("HUAWEI-NAT-EUDM-MIB", hwNatEudmOutboundType=hwNatEudmOutboundType, hwNatEudmOutboundNatID=hwNatEudmOutboundNatID, hwNatEudmOutboundAclNumber=hwNatEudmOutboundAclNumber, PYSNMP_MODULE_ID=hwNATEudm, hwNatEudmZoneApplyTable=hwNatEudmZoneApplyTable, hwNatEudmMibObjects=hwNatEudmMibObjects, hwNatEudmZoneApplyEntry=hwNatEudmZoneApplyEntry, hwNatEudmZoneApplyRowstatus=hwNatEudmZoneApplyRowstatus, hwNatEudmOutboundEasyIpIfIndex=hwNatEudmOutboundEasyIpIfIndex, hwNatEudmOutboundPoolIndex=hwNatEudmOutboundPoolIndex, hwNatEudmConformance=hwNatEudmConformance, hwNatEudmOutboundRowstatus=hwNatEudmOutboundRowstatus, hwNatEudmCfgGroup=hwNatEudmCfgGroup, hwNatEudmOutboundTable=hwNatEudmOutboundTable, hwNatEudmZoneApplyNatID=hwNatEudmZoneApplyNatID, hwNAT=hwNAT, hwNatEudmZoneApplyZoneID1=hwNatEudmZoneApplyZoneID1, hwNatEudmOutboundRefCount=hwNatEudmOutboundRefCount, hwNATEudm=hwNATEudm, hwNatEudmZoneApplyZoneID2=hwNatEudmZoneApplyZoneID2, hwNatEudmGroups=hwNatEudmGroups, hwNatEudmOutboundEntry=hwNatEudmOutboundEntry, NatType=NatType)
