#
# PySNMP MIB module CISCO-CDMA-AHDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDMA-AHDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, TimeTicks, IpAddress, Gauge32, Bits, NotificationType, Unsigned32, Counter64, MibIdentifier, iso, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "TimeTicks", "IpAddress", "Gauge32", "Bits", "NotificationType", "Unsigned32", "Counter64", "MibIdentifier", "iso", "ObjectIdentity", "Integer32")
DisplayString, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention")
cCdmaAhdlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 997))
cCdmaAhdlcMIB.setRevisions(('2005-11-14 00:00', '2002-01-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cCdmaAhdlcMIB.setRevisionsDescriptions(('Updated the imports such that Unsigned32 is imported from SNMPv2-SMI instead of CISCO-TC.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setLastUpdated('200511140000Z')
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setContactInfo(' Cisco Systems Customer Service Postal 170 W Tasman Drive San Jose, CA 95134 USA Tel +1 800 553-NETS E-mail cs-pdsn@cisco.com')
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setDescription('This MIB module provides details concerning AHDLC engine state, performance, configuration and notification. An AHDLC channel handles one AHDLC session. AN AHDLC engine controls a set of AHDLC channels. The following diagram illustrates a typical usage of an AHDLC service adapter in a 3G CDMA wireless data network +==========+ +========+==========+ | RAdio | AHDLC packets |AHDLC | | | Network |============== |engine | PDSN | | (RAN) | | | router | +==========+ +--------+ | /|\\ | | | +===================+ Mobile Node using PPP over AHDLC Two types of AHDLC engines are available - software and hardware based. A dedicated hardware allows better ahdlc framing performance. Acronyms and terms AHDLC Asynchronous High-level Data Link Control. AHDLC A dedicated resource used to channel handle one AHDLC session. AHDLC An entity managing a group of engine AHDLC channels. An AHDLC engine may be hardware assisted. CDMA Code Division Multiple Access. PDSN Packet Data Serving Node, a router connecting a CDMA wireless network to the internet. RAN Radio Network.')
cCdmaAhdlcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 1))
cCdmaAhdlcEngineInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1))
cCdmaAhdlcMIBNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 0))
cCdmaAhdlcEngineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1), )
if mibBuilder.loadTexts: cCdmaAhdlcEngineTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineTable.setDescription('A list of AHDLC engines available in the system.')
cCdmaAhdlcEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineIndex"))
if mibBuilder.loadTexts: cCdmaAhdlcEngineEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineEntry.setDescription('A description of an AHDLC engine.')
cCdmaAhdlcEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cCdmaAhdlcEngineIndex.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineIndex.setDescription('An arbitrary non-zero integer-value that uniquely identifies an AHDLC engine. An implementation should assign AHDLC engines consecutive monotonically increasing values.')
cCdmaAhdlcEngineName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineName.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineName.setDescription('Textual name of the AHDLC engine. The value of this object should be the name of the component as assigned by the local device.')
cCdmaAhdlcEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineType.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineType.setDescription("AHDLC engine type. Three main types are defined: - a 'hardware' based engine requires the use of AHDLC hardware assist. Each hardware based engine is peer to one unique AHDLC hardware assist. - a 'software' based engine is not peer to an AHDLC hardware assist but it relies on the system cpu(s) to perform AHDLC framing. If the engine type cannot be determined, this object value should return 'unknown'.")
cCdmaAhdlcEngineChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineChannelsInUse.setDescription('Number of current active channels handled by this engine.')
cCdmaAhdlcEngineMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineMaxChannels.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineMaxChannels.setDescription('Maximum number of channels that can be supported by this engine.')
cCdmaAhdlcEngineConfMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineConfMaxChannels.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineConfMaxChannels.setDescription('Maximum number of channels configured by the user. This value may not be higher than cCdmaAhdlcEngineMaxChannels.')
cCdmaAhdlcEngineOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineOperState.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineOperState.setDescription("This object defines the current AHDLC engine operational state. The 'up' indicates the engine is ready to receive ahdlc packets. If cCdmaAhdlcEngineAdminState is 'down' then cCdmaAhdlcEngineOperState should be 'down'. If cCdmaAhdlcEngineAdminState is changed to 'up' then cCdmaAhdlcEngineOperState should change to 'up' if the engine is ready to receive ahdlc packets; it should remain in the 'down' state if and only if there is a fault that prevents it from going to the 'up' state.")
cCdmaAhdlcEngineAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineAdminState.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineAdminState.setDescription("This object defines the AHDLC engine desired state. When a managed system initializes, all interfaces start with 'down' state. As a result of either explicit management action or per configuration information retained by the managed system, cCdmaAhdlcEngineAdminState is then changed to either 'up' or remains in the 'down' state.")
cCdmaAhdlcEngineDownNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotifEnabled.setDescription(" 'true' indicates notification will be sent out when cCdmaAhdlcEngineAdminState is 'up' and cCdmaAhdlcEngineOperState is 'down'.")
cCdmaAhdlcPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 10), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcPhysicalIndex.setDescription('Corresponding AHDLC service adapter entry in the ENTITY-MIB (RFC-2737). This object value should return the corresponding entPhysicalIndex value of the service adapter or 0 if it cannot be determined or is not applicable.')
cCdmaAhdlcPerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2), )
if mibBuilder.loadTexts: cCdmaAhdlcPerfTable.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcPerfTable.setDescription('A list of statistics for those AHDLC engines supported by the system.')
cCdmaAhdlcPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1), )
cCdmaAhdlcEngineEntry.registerAugmentions(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcPerfEntry"))
cCdmaAhdlcPerfEntry.setIndexNames(*cCdmaAhdlcEngineEntry.getIndexNames())
if mibBuilder.loadTexts: cCdmaAhdlcPerfEntry.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcPerfEntry.setDescription('The statistics associated with an AHDLC engine.')
cCdmaAhdlcOutgoingOctetsToEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsToEncode.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsToEncode.setDescription('Total number of outgoing-traffic octets delivered to the AHDLC engine for AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcOutgoingOctetsEncoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsEncoded.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsEncoded.setDescription('Total number of outgoing-traffic octets generated by the AHDLC engine through AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcOutgoingPktsToEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsToEncode.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsToEncode.setDescription('Total number of outgoing-traffic packets delivered to the AHDLC engine for AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcOutgoingPktsEncoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsEncoded.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsEncoded.setDescription('Total number of outgoing-traffic packets generated by the AHDLC engine through AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcIncomingOctetsToDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsToDecode.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsToDecode.setDescription('Total number of incoming-traffic octets delivered to the AHDLC engine for AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcIncomingOctetsDecoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsDecoded.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsDecoded.setDescription('Total number of incoming-traffic octets generated by the AHDLC engine through AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcIncomingPktsToDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsToDecode.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsToDecode.setDescription('Total number of incoming-traffic packets delivered to the AHDLC engine for AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcIncomingPktsDecoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsDecoded.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsDecoded.setDescription('Total number of incoming-traffic packets generated by the AHDLC engine through AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsDec.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsDec.setDescription('The number of packets dropped by the engine during AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsEnc.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsEnc.setDescription('The number of packets dropped by the engine during AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcCRCDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcCRCDropPkts.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcCRCDropPkts.setDescription('The number of packets dropped by the engine because of CRC errors since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcMemDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsDec.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsDec.setDescription('The number of packets dropped by the engine due to insufficient memory during AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcMemDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsEnc.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsEnc.setDescription('The number of packets dropped by the engine due to insufficient memory during AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcOverflowDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsDec.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsDec.setDescription('The number of packets dropped by the engine due to queue overflow during AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcOverflowDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsEnc.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsEnc.setDescription('The number of packets dropped by the engine due to queue overflow during AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcInvSizeDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsDec.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsDec.setDescription('The number of packets dropped by the engine due to invalid size during AHDLC decoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcInvSizeDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsEnc.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsEnc.setDescription('The number of packets dropped by the engine due to invalid size during AHDLC encoding since system was last restarted. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of cCdmaAhdlcDiscontinuityTime.')
cCdmaAhdlcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcDiscontinuityTime.setDescription("The value of sysUpTime when the AHDLC Engine's counters last experienced a discontinuity. If no discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
cCdmaAhdlcEngineDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 997, 0, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineOperState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineAdminState"))
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotif.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotif.setDescription("This notification indicates an AHDLC engine is 'down' due to some fault though the desired state of the engine is 'up'.")
cCdmaAhdlcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3))
cCdmaAhdlcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 1))
cCdmaAhdlcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2))
cCdmaAhdlcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 1, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcGroup"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcMIBCompliance = cCdmaAhdlcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcMIBCompliance.setDescription('The compliance statement for entities which implement the CDMA AHDLC Management MIB.')
cCdmaAhdlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineName"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineType"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineMaxChannels"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineConfMaxChannels"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineChannelsInUse"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineOperState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineAdminState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineDownNotifEnabled"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcPhysicalIndex"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingOctetsToEncode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingOctetsEncoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingPktsToEncode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingPktsEncoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingOctetsToDecode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingOctetsDecoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingPktsToDecode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingPktsDecoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcCRCDropPkts"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcMemDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcMemDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOverflowDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOverflowDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcInvSizeDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcInvSizeDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcGroup = cCdmaAhdlcGroup.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcGroup.setDescription('A collection of objects needed for CDMA AHDLC network management.')
cCdmaAhdlcNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2, 2)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcNotifGroup = cCdmaAhdlcNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cCdmaAhdlcNotifGroup.setDescription('The notifications related to CDMA AHDLC network management.')
mibBuilder.exportSymbols("CISCO-CDMA-AHDLC-MIB", cCdmaAhdlcOutgoingPktsToEncode=cCdmaAhdlcOutgoingPktsToEncode, cCdmaAhdlcNotifGroup=cCdmaAhdlcNotifGroup, cCdmaAhdlcIncomingPktsDecoded=cCdmaAhdlcIncomingPktsDecoded, cCdmaAhdlcEngineInfo=cCdmaAhdlcEngineInfo, cCdmaAhdlcEngineType=cCdmaAhdlcEngineType, cCdmaAhdlcIncomingOctetsDecoded=cCdmaAhdlcIncomingOctetsDecoded, cCdmaAhdlcEngineConfMaxChannels=cCdmaAhdlcEngineConfMaxChannels, cCdmaAhdlcMIBCompliances=cCdmaAhdlcMIBCompliances, cCdmaAhdlcEngineIndex=cCdmaAhdlcEngineIndex, cCdmaAhdlcIncomingPktsToDecode=cCdmaAhdlcIncomingPktsToDecode, cCdmaAhdlcEngineAdminState=cCdmaAhdlcEngineAdminState, cCdmaAhdlcPhysicalIndex=cCdmaAhdlcPhysicalIndex, cCdmaAhdlcMemDropPktsEnc=cCdmaAhdlcMemDropPktsEnc, cCdmaAhdlcOverflowDropPktsDec=cCdmaAhdlcOverflowDropPktsDec, cCdmaAhdlcEngineEntry=cCdmaAhdlcEngineEntry, cCdmaAhdlcEngineDownNotifEnabled=cCdmaAhdlcEngineDownNotifEnabled, cCdmaAhdlcMIB=cCdmaAhdlcMIB, cCdmaAhdlcMIBCompliance=cCdmaAhdlcMIBCompliance, cCdmaAhdlcOverflowDropPktsEnc=cCdmaAhdlcOverflowDropPktsEnc, cCdmaAhdlcMIBObjects=cCdmaAhdlcMIBObjects, cCdmaAhdlcDropPktsEnc=cCdmaAhdlcDropPktsEnc, cCdmaAhdlcPerfEntry=cCdmaAhdlcPerfEntry, cCdmaAhdlcMemDropPktsDec=cCdmaAhdlcMemDropPktsDec, cCdmaAhdlcEngineDownNotif=cCdmaAhdlcEngineDownNotif, cCdmaAhdlcEngineTable=cCdmaAhdlcEngineTable, cCdmaAhdlcEngineName=cCdmaAhdlcEngineName, cCdmaAhdlcDropPktsDec=cCdmaAhdlcDropPktsDec, cCdmaAhdlcOutgoingOctetsEncoded=cCdmaAhdlcOutgoingOctetsEncoded, cCdmaAhdlcIncomingOctetsToDecode=cCdmaAhdlcIncomingOctetsToDecode, cCdmaAhdlcEngineMaxChannels=cCdmaAhdlcEngineMaxChannels, cCdmaAhdlcInvSizeDropPktsDec=cCdmaAhdlcInvSizeDropPktsDec, cCdmaAhdlcGroup=cCdmaAhdlcGroup, cCdmaAhdlcOutgoingPktsEncoded=cCdmaAhdlcOutgoingPktsEncoded, cCdmaAhdlcInvSizeDropPktsEnc=cCdmaAhdlcInvSizeDropPktsEnc, cCdmaAhdlcEngineOperState=cCdmaAhdlcEngineOperState, cCdmaAhdlcMIBNotif=cCdmaAhdlcMIBNotif, cCdmaAhdlcPerfTable=cCdmaAhdlcPerfTable, cCdmaAhdlcMIBConformance=cCdmaAhdlcMIBConformance, cCdmaAhdlcEngineChannelsInUse=cCdmaAhdlcEngineChannelsInUse, cCdmaAhdlcOutgoingOctetsToEncode=cCdmaAhdlcOutgoingOctetsToEncode, cCdmaAhdlcDiscontinuityTime=cCdmaAhdlcDiscontinuityTime, PYSNMP_MODULE_ID=cCdmaAhdlcMIB, cCdmaAhdlcCRCDropPkts=cCdmaAhdlcCRCDropPkts, cCdmaAhdlcMIBGroups=cCdmaAhdlcMIBGroups)
