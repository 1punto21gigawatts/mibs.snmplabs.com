#
# PySNMP MIB module CISCO-CALL-TRACKER-TCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CALL-TRACKER-TCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
cctActiveCallId, cctHistoryIndex = mibBuilder.importSymbols("CISCO-CALL-TRACKER-MIB", "cctActiveCallId", "cctHistoryIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Counter64, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, Counter32, NotificationType, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "Counter32", "NotificationType", "iso", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoCallTrackerTCPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 164))
ciscoCallTrackerTCPMIB.setRevisions(('2005-12-06 00:00', '2000-06-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCallTrackerTCPMIB.setRevisionsDescriptions(('Removed Unsigned32 from the imports since it is not used.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: ciscoCallTrackerTCPMIB.setLastUpdated('200512060000Z')
if mibBuilder.loadTexts: ciscoCallTrackerTCPMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCallTrackerTCPMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dial@cisco.com')
if mibBuilder.loadTexts: ciscoCallTrackerTCPMIB.setDescription('This MIB module provides TCP service connection related data for tracking the progress and status of a call. This module extends tables defined in the MIB module ciscoCallTrackerMIB in CISCO-CALL-TRACKER-MIB. ')
ccttMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 1))
ccttActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1))
ccttHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2))
ccttActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1), )
if mibBuilder.loadTexts: ccttActiveTable.setStatus('current')
if mibBuilder.loadTexts: ccttActiveTable.setDescription('This table contains entries for active calls in the system which utilize TCP connections, as reported by cctActiveServiceType. This table extends the cctActiveTable, using the same index, cctActiveCallId. ')
ccttActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CALL-TRACKER-MIB", "cctActiveCallId"))
if mibBuilder.loadTexts: ccttActiveEntry.setStatus('current')
if mibBuilder.loadTexts: ccttActiveEntry.setDescription('The information related to TCP connection for a single call. Entries are created if the call requests TCP connection based service. Entries are deleted when the call terminates. ')
ccttActiveLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttActiveLocalIpAddress.setReference('RFC 2012 TCP-MIB')
if mibBuilder.loadTexts: ccttActiveLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccttActiveLocalIpAddress.setDescription("The IP address for local endpoint of the call's TCP connection. This object has the same value as tcpConnLocalAddress from TCP-MIB. ")
ccttActiveLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1, 2), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttActiveLocalTcpPort.setReference('RFC 2012 TCP-MIB')
if mibBuilder.loadTexts: ccttActiveLocalTcpPort.setStatus('current')
if mibBuilder.loadTexts: ccttActiveLocalTcpPort.setDescription("TCP port number for local endpoint of the call's TCP connection. This object has the same value as tcpConnLocalPort from TCP-MIB. ")
ccttActiveRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttActiveRemoteIpAddress.setReference('RFC 2012 TCP-MIB')
if mibBuilder.loadTexts: ccttActiveRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccttActiveRemoteIpAddress.setDescription("The IP address for remote endpoint of the call's TCP connection. This object has the same value as tcpConnRemAddress from TCP-MIB. ")
ccttActiveRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1, 4), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttActiveRemoteTcpPort.setReference('RFC 2012 TCP-MIB')
if mibBuilder.loadTexts: ccttActiveRemoteTcpPort.setStatus('current')
if mibBuilder.loadTexts: ccttActiveRemoteTcpPort.setDescription("TCP port number for remote endpoint of the call's TCP connection. This object has the same value as tcpConnRemPort from TCP-MIB. ")
ccttActiveDestinationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttActiveDestinationFailures.setStatus('current')
if mibBuilder.loadTexts: ccttActiveDestinationFailures.setDescription('The number of requests from the call processing software to the Telnet/TCP to setup a connection for which Telnet/TCP was unable to establish the requested connection. ')
ccttHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1), )
if mibBuilder.loadTexts: ccttHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryTable.setDescription('This table provides information on terminated calls with associated TCP connections, as reported by cctHistoryServiceType. This table extends the cctHistoryTable, using the same index, cctHistoryIndex. ')
ccttHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CALL-TRACKER-MIB", "cctHistoryIndex"))
if mibBuilder.loadTexts: ccttHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryEntry.setDescription('The information regarding a single terminated call with TCP connections. Entries are created and deleted in sync with the entries in cctHistoryTable, when there is a TCP connection service requested for the call. ')
ccttHistoryLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttHistoryLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryLocalIpAddress.setDescription("The IP address for local endpoint of the call's TCP connection. ")
ccttHistoryLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1, 2), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttHistoryLocalTcpPort.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryLocalTcpPort.setDescription("TCP port number for local endpoint of the call's TCP connection. ")
ccttHistoryRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttHistoryRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryRemoteIpAddress.setDescription("The IP address for remote endpoint of the call's TCP connection. If no TCP connection was established, this object reports the first destination attempted. ")
ccttHistoryRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1, 4), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttHistoryRemoteTcpPort.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryRemoteTcpPort.setDescription("TCP port number for remote endpoint of the call's TCP connection. If no TCP connection was established, this object reports the TCP port of the first destination attempted. ")
ccttHistoryDestinationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 164, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccttHistoryDestinationFailures.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryDestinationFailures.setDescription('The number of requests from the call processing software to the Telnet/TCP to setup a connection for which Telnet/TCP was unable to establish the requested connection. ')
ccttMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 2))
ccttMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 2, 0))
ccttMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 3))
ccttMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 3, 1))
ccttMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 164, 3, 2))
ccttMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 164, 3, 1, 1)).setObjects(("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveGroup"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccttMIBCompliance = ccttMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ccttMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO CALL TRACKER TCP MIB ')
ccttActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 164, 3, 2, 2)).setObjects(("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveLocalIpAddress"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveLocalTcpPort"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveRemoteIpAddress"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveRemoteTcpPort"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttActiveDestinationFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccttActiveGroup = ccttActiveGroup.setStatus('current')
if mibBuilder.loadTexts: ccttActiveGroup.setDescription('A collection of objects providing the active call information. ')
ccttHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 164, 3, 2, 3)).setObjects(("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryLocalIpAddress"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryLocalTcpPort"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryRemoteIpAddress"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryRemoteTcpPort"), ("CISCO-CALL-TRACKER-TCP-MIB", "ccttHistoryDestinationFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccttHistoryGroup = ccttHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ccttHistoryGroup.setDescription('A collection of objects providing the historical call information. ')
mibBuilder.exportSymbols("CISCO-CALL-TRACKER-TCP-MIB", ccttHistory=ccttHistory, ccttActiveRemoteTcpPort=ccttActiveRemoteTcpPort, ccttHistoryGroup=ccttHistoryGroup, ccttMIBCompliances=ccttMIBCompliances, ccttMIBCompliance=ccttMIBCompliance, ccttMIBObjects=ccttMIBObjects, ccttActiveDestinationFailures=ccttActiveDestinationFailures, ccttMIBNotifications=ccttMIBNotifications, ciscoCallTrackerTCPMIB=ciscoCallTrackerTCPMIB, ccttHistoryDestinationFailures=ccttHistoryDestinationFailures, ccttActiveEntry=ccttActiveEntry, ccttMIBConformance=ccttMIBConformance, ccttHistoryEntry=ccttHistoryEntry, ccttActive=ccttActive, ccttActiveGroup=ccttActiveGroup, ccttMIBGroups=ccttMIBGroups, ccttHistoryRemoteTcpPort=ccttHistoryRemoteTcpPort, PYSNMP_MODULE_ID=ciscoCallTrackerTCPMIB, ccttHistoryRemoteIpAddress=ccttHistoryRemoteIpAddress, ccttHistoryTable=ccttHistoryTable, ccttActiveTable=ccttActiveTable, ccttHistoryLocalIpAddress=ccttHistoryLocalIpAddress, ccttActiveRemoteIpAddress=ccttActiveRemoteIpAddress, ccttMIBNotificationPrefix=ccttMIBNotificationPrefix, ccttHistoryLocalTcpPort=ccttHistoryLocalTcpPort, ccttActiveLocalIpAddress=ccttActiveLocalIpAddress, ccttActiveLocalTcpPort=ccttActiveLocalTcpPort)
