#
# PySNMP MIB module FRSLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRSLD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
DLCI, = mibBuilder.importSymbols("FRAME-RELAY-DTE-MIB", "DLCI")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Counter32, IpAddress, ObjectIdentity, TimeTicks, Bits, MibIdentifier, mib_2, Gauge32, NotificationType, ModuleIdentity, Integer32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "IpAddress", "ObjectIdentity", "TimeTicks", "Bits", "MibIdentifier", "mib-2", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp")
frsldMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 95))
frsldMIB.setRevisions(('2002-01-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: frsldMIB.setRevisionsDescriptions(('Initial version, published as RFC 3202',))
if mibBuilder.loadTexts: frsldMIB.setLastUpdated('200201030000Z')
if mibBuilder.loadTexts: frsldMIB.setOrganization('IETF Frame Relay Service MIB Working Group')
if mibBuilder.loadTexts: frsldMIB.setContactInfo('IETF Frame Relay Service MIB (frnetmib) Working Group WG Charter: http://www.ietf.org/html.charters/ frnetmib-charter.html WG-email: frnetmib@sunroof.eng.sun.com Subscribe: frnetmib-request@sunroof.eng.sun.com Email Archive: ftp://ftp.ietf.org/ietf-mail-archive/frnetmib Chair: Andy Malis Vivace Networks Email: Andy.Malis@vivacenetworks.com WG editor: Robert Steinberger Paradyne Networks and Fujitsu Network Communications Email: robert.steinberger@fnc.fujitsu.com Co-author: Orly Nicklass RAD Data Communications Ltd. EMail: Orly_n@rad.co.il')
if mibBuilder.loadTexts: frsldMIB.setDescription('The MIB module to describe generic objects for FRF.13 Frame Relay Service Level Definitions.')
class FrsldTxRP(TextualConvention, Integer32):
    reference = 'FRF.13: Section 2.3'
    description = 'The reference point a PVC uses for calculation of transmitter related statistics. The valid values for this type of object are as follows: - srcLocalRP(1) for the local source - ingTxLocalRP(2) for the local ingress queue input - tpTxLocalRP(3) for the local traffic policing - eqiTxLocalRP(4) for the local egress queue input - eqoTxLocalRP(5) for the local egress queue output - otherTxLocalRP(6) for any other local transmit point - srcRemoteRP(7) for the remote source - ingTxLocalRP(8) for the remote ingress queue input - tpTxLocalRP(9) for the remote traffic policing - eqiTxRemoteRP(10) for the remote egress queue input - eqoTxRemoteRP(11) for the remote egress queue output - otherTxRemoteRP(12) for any other remote xmit point'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("srcLocalRP", 1), ("ingTxLocalRP", 2), ("tpTxLocalRP", 3), ("eqiTxLocalRP", 4), ("eqoTxLocalRP", 5), ("otherTxLocalRP", 6), ("srcRemoteRP", 7), ("ingTxRemoteRP", 8), ("tpTxRemoteRP", 9), ("eqiTxRemoteRP", 10), ("eqoTxRemoteRP", 11), ("otherTxRemoteRP", 12))

class FrsldRxRP(TextualConvention, Integer32):
    reference = 'FRF.13: Section 2.3'
    description = 'The reference point a PVC uses for calculation of receiver related statistics. The valid values for this object are as follows: - desLocalRP(1) for the local destination - ingRxLocalRP(2) for the local ingress queue input - tpRxLocalRP(3) for the local traffic policing - eqiRxLocalRP(4) for the local egress queue input - eqoRxLocalRP(5) for the local egress queue output - otherRxLocalRP(6) for any other local receive point - desRemoteRP(7) for the remote destination - ingRxRemoteRP(8) for the remote ingress input - tpRxRemoteRP(9) for the remote traffic policing - eqiRxRemoteRP(10) for the remote egress queue input - eqoRxRemoteRP(11) for the remote egress queue output - otherRxRemoteRP(12) for any other remote receive point'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("desLocalRP", 1), ("ingRxLocalRP", 2), ("tpRxLocalRP", 3), ("eqiRxLocalRP", 4), ("eqoRxLocalRP", 5), ("otherRxLocalRP", 6), ("desRemoteRP", 7), ("ingRxRemoteRP", 8), ("tpRxRemoteRP", 9), ("eqiRxRemoteRP", 10), ("eqoRxRemoteRP", 11), ("otherRxRemoteRP", 12))

frsldObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 95, 1))
frsldCapabilities = MibIdentifier((1, 3, 6, 1, 2, 1, 95, 2))
frsldConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 95, 3))
frsldPvcCtrlTable = MibTable((1, 3, 6, 1, 2, 1, 95, 1, 1), )
if mibBuilder.loadTexts: frsldPvcCtrlTable.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlTable.setDescription('The Frame Relay Service Level Definitions PVC control table.')
frsldPvcCtrlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 95, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FRSLD-MIB", "frsldPvcCtrlDlci"), (0, "FRSLD-MIB", "frsldPvcCtrlTransmitRP"), (0, "FRSLD-MIB", "frsldPvcCtrlReceiveRP"))
if mibBuilder.loadTexts: frsldPvcCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlEntry.setDescription('An entry in the Frame Relay Service Level Definitions PVC control table.')
frsldPvcCtrlDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 1), DLCI())
if mibBuilder.loadTexts: frsldPvcCtrlDlci.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlDlci.setDescription('The value of this object is equal to the DLCI value for this PVC.')
frsldPvcCtrlTransmitRP = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 2), FrsldTxRP())
if mibBuilder.loadTexts: frsldPvcCtrlTransmitRP.setReference('FRF.13: Section 2.3')
if mibBuilder.loadTexts: frsldPvcCtrlTransmitRP.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlTransmitRP.setDescription('The reference point this PVC uses for calculation of transmitter related statistics. This object together with frsldPvcCtrlReceiveRP define the measurement domain.')
frsldPvcCtrlReceiveRP = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 3), FrsldRxRP())
if mibBuilder.loadTexts: frsldPvcCtrlReceiveRP.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlReceiveRP.setDescription('The reference point this PVC uses for calculation of receiver related statistics. This object together with frsldPvcCtrlTransmitRP define the measurement domain.')
frsldPvcCtrlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlStatus.setDescription('The status of the current row. This object is used to add, delete, and disable rows in this table. When the status changes to active(1) for the first time, a row will also be added to the data table below. This row SHOULD not be removed until the status is changed to deleted. When this object is set to destroy(6), all associated sample and data table rows will also be deleted. When this object is changed from active(1) to any other valid value, the defined purge behavior will affect the data and sample tables. The rows added to this table MUST have a valid ifIndex and an ifType related to frame relay. Further, the reference points referred to by frsldPvcCtrlTransmitRP and frsldPvcCtrlReceiveRP MUST be supported (see the frsldRPCaps object). If at any point the row is not in the active(1) state and the DLCI no longer exists, the state SHOULD report notReady(3). The data in this table SHOULD persist through power cycles. The symantics of readiness for the rows still applies. This means that it is possible for a row to be reprovisioned as notReady(3) if the underlying DLCI does not persist.')
frsldPvcCtrlPacketFreq = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlPacketFreq.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlPacketFreq.setDescription('The frequency in seconds between initiation of specialized packets used to collect delay and / or delivery information as supported by the device. A value of zero indicates that no packets will be sent.')
frsldPvcCtrlDelayFrSize = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8188)).clone(128)).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlDelayFrSize.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlDelayFrSize.setDescription('The size of the payload in the frame used for calculation of network delay.')
frsldPvcCtrlDelayType = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWay", 1), ("roundTrip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlDelayType.setReference('FRF.13: Section 3')
if mibBuilder.loadTexts: frsldPvcCtrlDelayType.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlDelayType.setDescription('The type of delay measurement performed.')
frsldPvcCtrlDelayTimeOut = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlDelayTimeOut.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlDelayTimeOut.setDescription('A delay frame will count as a missed poll if it is not updated in the time specified by frsldPvcCtrlDelayTimeOut.')
frsldPvcCtrlPurge = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlPurge.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlPurge.setDescription('This object defines the amount of time the device will wait, after discovering that a DLCI does not exist, the DLCI was deleted or the value of frsldPvcCtrlStatus changes from active(1) to either notInService(2) or notReady(3), prior to automatically purging the history in the sample tables and resetting the data in the data tables to all zeroes. If frsldPvcCtrlStatus is manually set to destroy(6), this object does not apply.')
frsldPvcCtrlDeleteOnPurge = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sampleContols", 2), ("all", 3))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldPvcCtrlDeleteOnPurge.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlDeleteOnPurge.setDescription('This object defines whether rows will automatically be deleted from the tables when the information is purged. - A value of none(1) indicates that no rows will deleted. The last known values will be preserved. - A value of sampleControls(2) indicates that all associated sample control rows will be deleted. - A value of all(3) indicates that all associated rows SHOULD be deleted.')
frsldPvcCtrlLastPurgeTime = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcCtrlLastPurgeTime.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlLastPurgeTime.setDescription('This object returns the value of sysUpTime at the time the information was last purged. This value SHOULD be set to the sysUpTime upon setting frsldPvcCtrlStatus to active(1) for the first time. Each time a discontinuity in the counters occurs, this value MUST be set to the sysUpTime. If frsldPvcCtrlStatus has never been active(1), this object SHOULD return 0. This object SHOULD be used as the discontinuity timer for the counters in frsldPvcDataTable.')
frsldSmplCtrlTable = MibTable((1, 3, 6, 1, 2, 1, 95, 1, 2), )
if mibBuilder.loadTexts: frsldSmplCtrlTable.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlTable.setDescription('The Frame Relay Service Level Definitions sampling control table.')
frsldSmplCtrlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 95, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FRSLD-MIB", "frsldPvcCtrlDlci"), (0, "FRSLD-MIB", "frsldPvcCtrlTransmitRP"), (0, "FRSLD-MIB", "frsldPvcCtrlReceiveRP"), (0, "FRSLD-MIB", "frsldSmplCtrlIdx"))
if mibBuilder.loadTexts: frsldSmplCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlEntry.setDescription('An entry in the Frame Relay Service Level Definitions sample control table.')
frsldSmplCtrlIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: frsldSmplCtrlIdx.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlIdx.setDescription('The unique index for this row in the sample control table.')
frsldSmplCtrlStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldSmplCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlStatus.setDescription('The status of the current row. This object is used to add, delete, and disable rows in this table. This row SHOULD NOT be removed until the status is changed to destroy(6). When the status changes to active(1), the collection in the sample tables below will be activated. The rows added to this table MUST have a valid ifIndex, an ifType related to frame relay, frsldPvcCtrlDlci MUST exist for the specified ifIndex and frsldPvcCtrlStatus MUST have a value of active(1). The value of frsldPvcCtrlStatus MUST be active(1) to transition this object to active(1). If the value of frsldPvcCtrlStatus becomes anything other than active(1) when the state of this object is not active(1), this object SHOULD be set to notReady(3). The data in this table SHOULD persist through power cycles. The symantics of readiness for the rows still applies. This means that it is possible for a row to be reprovisioned as notReady(3) if the underlying DLCI does not persist.')
frsldSmplCtrlColPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldSmplCtrlColPeriod.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlColPeriod.setDescription('The amount of time in seconds that defines a period of collection for the statistics. At the end of each period, the statistics will be sampled and a row is added to the sample table.')
frsldSmplCtrlBuckets = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: frsldSmplCtrlBuckets.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlBuckets.setDescription('The number of discrete buckets over which the data statistics are sampled. When this object is created or modified, the device SHOULD attempt to set the frsldSmplCtrlBuckets- Granted to a value as close as is possible depending upon the implementation and the available resources.')
frsldSmplCtrlBucketsGranted = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldSmplCtrlBucketsGranted.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlBucketsGranted.setDescription('The number of discrete buckets granted. This object will return 0 until frsldSmplCtrlStatus is set to active(1). At that time the buckets will be allocated depending upon implementation and available resources.')
frsldPvcDataTable = MibTable((1, 3, 6, 1, 2, 1, 95, 1, 3), )
if mibBuilder.loadTexts: frsldPvcDataTable.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataTable.setDescription('The Frame Relay Service Level Definitions data table. This table contains accumulated values of the collected data. It is the table that should be referenced by external polling mechanisms if time based polling be desired.')
frsldPvcDataEntry = MibTableRow((1, 3, 6, 1, 2, 1, 95, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FRSLD-MIB", "frsldPvcCtrlDlci"), (0, "FRSLD-MIB", "frsldPvcCtrlTransmitRP"), (0, "FRSLD-MIB", "frsldPvcCtrlReceiveRP"))
if mibBuilder.loadTexts: frsldPvcDataEntry.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataEntry.setDescription('An entry in the Frame Relay Service Level Definitions data table.')
frsldPvcDataMissedPolls = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataMissedPolls.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataMissedPolls.setDescription('The total number of polls that have been determined to be missed. These polls are typically associated with the calculation of delay but may also be used for the calculation of other statistics. If an anticipated poll is not received in a reasonable amount of time, it should be counted as missed. The value used to determine the reasonable amount of time is contained in frsldPvcCtrlDelayTimeOut. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataFrDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredC.setReference('FRF.13: Section 4.1 (FramesDeliveredc)')
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredC.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataFrDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredE.setReference('FRF.13: Section 4.1 (FramesDeliverede)')
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataFrDeliveredE.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataFrOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataFrOfferedC.setReference('FRF.13: Section 4.1 (FramesOfferedc)')
if mibBuilder.loadTexts: frsldPvcDataFrOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataFrOfferedC.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP within CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataFrOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataFrOfferedE.setReference('FRF.13: Section 4.1 (FramesOfferede)')
if mibBuilder.loadTexts: frsldPvcDataFrOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataFrOfferedE.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP in excess of the CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataDataDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredC.setReference('FRF.13: Section 5.1 (DataDeliveredc)')
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredC.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataDataDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredE.setReference('FRF.13: Section 5.1 (DataDeliverede)')
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataDataDeliveredE.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataDataOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataDataOfferedC.setReference('FRF.13: Section 5.1 (DataOfferedc)')
if mibBuilder.loadTexts: frsldPvcDataDataOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataDataOfferedC.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP within CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataDataOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataDataOfferedE.setReference('FRF.13: Section 5.1 (DataOfferede)')
if mibBuilder.loadTexts: frsldPvcDataDataOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataDataOfferedE.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP in excess of the CIR. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCFrDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredC.setReference('FRF.13: Section 4.1 (FramesDeliveredc)')
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredC.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR. This object is a 64-bit version of frsldPvcDataFrDeliveredC. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCFrDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredE.setReference('FRF.13: Section 4.1 (FramesDeliverede)')
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCFrDeliveredE.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR. This object is a 64-bit version of frsldPvcDataFrDeliveredE. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCFrOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedC.setReference('FRF.13: Section 4.1 (FramesOfferedc)')
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedC.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP within CIR. This object is a 64-bit version of frsldPvcDataFrOfferedC. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCFrOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedE.setReference('FRF.13: Section 4.1 (FramesOfferede)')
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCFrOfferedE.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP in excess of the CIR. This object is a 64-bit version of frsldPvcDataFrOfferedE. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCDataDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredC.setReference('FRF.13: Section 5.1 (DataDeliveredc)')
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredC.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR. This object is a 64-bit version of frsldPvcDataDataDeliveredC. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCDataDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredE.setReference('FRF.13: Section 5.1 (DataDeliverede)')
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCDataDeliveredE.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR. This object is a 64-bit version of frsldPvcDataDataDeliveredE. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCDataOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedC.setReference('FRF.13: Section 5.1 (DataOfferedc)')
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedC.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP within CIR. This object is a 64-bit version of frsldPvcDataDataOfferedC. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataHCDataOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedE.setReference('FRF.13: Section 5.1 (DataOfferede)')
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataHCDataOfferedE.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP in excess of the CIR. This object is a 64-bit version of frsldPvcDataDataOfferedE. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcDataUnavailableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataUnavailableTime.setReference('FRF.13: Section 6.1 (OutageTime)')
if mibBuilder.loadTexts: frsldPvcDataUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataUnavailableTime.setDescription('The amount of time this PVC was declared unavailable for any reason since this row was created.')
frsldPvcDataUnavailables = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcDataUnavailables.setReference('FRF.13: Section 6.1 (OutageCount)')
if mibBuilder.loadTexts: frsldPvcDataUnavailables.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDataUnavailables.setDescription('The number of times this PVC was declared unavailable for any reason since this row was created. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by frsldPvcCtrlLastPurgeTime.')
frsldPvcSampleTable = MibTable((1, 3, 6, 1, 2, 1, 95, 1, 4), )
if mibBuilder.loadTexts: frsldPvcSampleTable.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleTable.setDescription('The Frame Relay Service Level Definitions sample table.')
frsldPvcSampleEntry = MibTableRow((1, 3, 6, 1, 2, 1, 95, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FRSLD-MIB", "frsldPvcCtrlDlci"), (0, "FRSLD-MIB", "frsldPvcCtrlTransmitRP"), (0, "FRSLD-MIB", "frsldPvcCtrlReceiveRP"), (0, "FRSLD-MIB", "frsldSmplCtrlIdx"), (0, "FRSLD-MIB", "frsldPvcSmplIdx"))
if mibBuilder.loadTexts: frsldPvcSampleEntry.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleEntry.setDescription('An entry in the Frame Relay Service Level Definitions data sample table.')
frsldPvcSmplIdx = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: frsldPvcSmplIdx.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplIdx.setDescription('The bucket index of the current sample. This increments once for each new bucket in the table.')
frsldPvcSmplDelayMin = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 2), Gauge32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDelayMin.setReference('FRF.13: Section 3.1 (FTD)')
if mibBuilder.loadTexts: frsldPvcSmplDelayMin.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDelayMin.setDescription('The minimum delay reported in microseconds measured for any information packet that arrived during this interval. A value of zero means that no data is available.')
frsldPvcSmplDelayMax = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 3), Gauge32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDelayMax.setReference('FRF.13: Section 3.1 (FTD)')
if mibBuilder.loadTexts: frsldPvcSmplDelayMax.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDelayMax.setDescription('The largest delay reported in microseconds measured for any information packet that arrived during this interval. A value of zero means that no data is available.')
frsldPvcSmplDelayAvg = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 4), Gauge32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDelayAvg.setReference('FRF.13: Section 3.1 (FTD)')
if mibBuilder.loadTexts: frsldPvcSmplDelayAvg.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDelayAvg.setDescription('The average delay reported in microseconds measured for all delay packets that arrived during this interval. A value of zero means that no data is available.')
frsldPvcSmplMissedPolls = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplMissedPolls.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplMissedPolls.setDescription('The total number of polls that were missed during this interval.')
frsldPvcSmplFrDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredC.setReference('FRF.13: Section 4.1 (FramesDeliveredc)')
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredC.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCFrDeliveredC.')
frsldPvcSmplFrDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredE.setReference('FRF.13: Section 4.1 (FramesDeliverede))')
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplFrDeliveredE.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCFrDeliveredE.')
frsldPvcSmplFrOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedC.setReference('FRF.13: Section 4.1 (FramesOfferedc)')
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedC.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP within CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCFrOfferedC.')
frsldPvcSmplFrOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedE.setReference('FRF.13: Section 4.1 (FramesOfferede)')
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplFrOfferedE.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP in excess of the CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCFrOfferedE.')
frsldPvcSmplDataDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredC.setReference('FRF.13: Section 5.1 (DataDeliveredc)')
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredC.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCDataDeliveredC.')
frsldPvcSmplDataDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredE.setReference('FRF.13: Section 5.1 (DataDeliverede)')
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDataDeliveredE.setDescription('The number of octets that were received at frsldPvcCtrlDeliveredRP and determined to have been sent in excess of the CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCDataDeliveredE.')
frsldPvcSmplDataOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedC.setReference('FRF.13: Section 5.1 (DataOfferedc)')
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedC.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP within CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCDataOfferredC.')
frsldPvcSmplDataOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedE.setReference('FRF.13: Section 5.1 (DataOfferede)')
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplDataOfferedE.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP in excess of the CIR during this interval. If it is the case that the high capacity counters are also used, this MUST report the value of the lower 32 bits of the CounterBasedGauge64 value of frsldPvcSmplHCDataOfferedE.')
frsldPvcSmplHCFrDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 14), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredC.setReference('FRF.13: Section 4.1 (FramesDeliveredc)')
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredC.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR during this interval. This object is a 64-bit version of frsldPvcSmplFrDeliveredC.')
frsldPvcSmplHCFrDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 15), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredE.setReference('FRF.13: Section 4.1 (FramesDeliverede)')
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCFrDeliveredE.setDescription('The number of frames that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR during this interval. This object is a 64-bit version of frsldPvcSmpl- FrDeliveredE.')
frsldPvcSmplHCFrOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedC.setReference('FRF.13: Section 4.1 (FramesOfferedc)')
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedC.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP within CIR during this interval. This object is a 64-bit version of frsldPvcSmplFrOfferedC.')
frsldPvcSmplHCFrOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 17), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedE.setReference('FRF.13: Section 4.1 (FramesOfferede)')
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCFrOfferedE.setDescription('The number of frames that were offered through frsldPvcCtrlTransmitRP in excess of the CIR during this interval. This object is a 64-bit version of frsldPvcSmplFrOfferedE.')
frsldPvcSmplHCDataDeliveredC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredC.setReference('FRF.13: Section 5.1 (DataDeliveredc)')
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredC.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent within CIR during this interval. This value is a 64-bit version of frsldPvcSmplDataDeliveredC.')
frsldPvcSmplHCDataDeliveredE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 19), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredE.setReference('FRF.13: Section 5.1 (DataDeliverede)')
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCDataDeliveredE.setDescription('The number of octets that were received at frsldPvcCtrlReceiveRP and determined to have been sent in excess of the CIR during this interval. This value is a 64-bit version of frsldPvcSmplData- DeliveredE.')
frsldPvcSmplHCDataOfferedC = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 20), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedC.setReference('FRF.13: Section 5.1 (DataOfferedc)')
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedC.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedC.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP within CIR during this interval. This value is a 64-bit version of frsldPvcSmplDataOfferedC.')
frsldPvcSmplHCDataOfferedE = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedE.setReference('FRF.13: Section 5.1 (DataOfferede)')
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedE.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplHCDataOfferedE.setDescription('The number of octets that were offered through frsldPvcCtrlTransmitRP in excess of the CIR during this interval. This object is a 64-bit version of frsldPvcSmplDataOfferedE.')
frsldPvcSmplUnavailableTime = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplUnavailableTime.setReference('FRF.13: Section 6.1 (OutageTime)')
if mibBuilder.loadTexts: frsldPvcSmplUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplUnavailableTime.setDescription('The amount of time this PVC was declared unavailable for any reason during this interval.')
frsldPvcSmplUnavailables = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplUnavailables.setReference('FRF.13: Section 6.1 (OutageCount)')
if mibBuilder.loadTexts: frsldPvcSmplUnavailables.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplUnavailables.setDescription('The number of times this PVC was declared unavailable for any reason during this interval.')
frsldPvcSmplStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplStartTime.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplStartTime.setDescription('The value of sysUpTime when this sample interval started.')
frsldPvcSmplEndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 95, 1, 4, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcSmplEndTime.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSmplEndTime.setDescription('The value of sysUpTime when this sample interval ended. No data will be reported and the row will not appear in the table until the sample has been collected.')
frsldPvcCtrlWriteCaps = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 1), Bits().clone(namedValues=NamedValues(("frsldPvcCtrlStatus", 0), ("frsldPvcCtrlPacketFreq", 1), ("frsldPvcCtrlDelayFrSize", 2), ("frsldPvcCtrlDelayType", 3), ("frsldPvcCtrlDelayTimeOut", 4), ("frsldPvcCtrlPurge", 5), ("frsldPvcCtrlDeleteOnPurge", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldPvcCtrlWriteCaps.setStatus('current')
if mibBuilder.loadTexts: frsldPvcCtrlWriteCaps.setDescription('This object specifies the write capabilities for the read-create objects of the PVC Control table. If the corresponding bit is enabled (1), the agent supports writes to that object.')
frsldSmplCtrlWriteCaps = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 2), Bits().clone(namedValues=NamedValues(("frsldSmplCtrlStatus", 0), ("frsldSmplCtrlBuckets", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldSmplCtrlWriteCaps.setStatus('current')
if mibBuilder.loadTexts: frsldSmplCtrlWriteCaps.setDescription('This object specifies the write capabilities for the read-create objects of the Sample Control table. If the corresponding bit is enabled (1), the agent supports writes to that object.')
frsldRPCaps = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 3), Bits().clone(namedValues=NamedValues(("srcLocalRP", 0), ("ingTxLocalRP", 1), ("tpTxLocalRP", 2), ("eqiTxLocalRP", 3), ("eqoTxLocalRP", 4), ("otherTxLocalRP", 5), ("srcRemoteRP", 6), ("ingTxRemoteRP", 7), ("tpTxRemoteRP", 8), ("eqiTxRemoteRP", 9), ("eqoTxRemoteRP", 10), ("otherTxRemoteRP", 11), ("desLocalRP", 12), ("ingRxLocalRP", 13), ("tpRxLocalRP", 14), ("eqiRxLocalRP", 15), ("eqoRxLocalRP", 16), ("otherRxLocalRP", 17), ("desRemoteRP", 18), ("ingRxRemoteRP", 19), ("tpRxRemoteRP", 20), ("eqiRxRemoteRP", 21), ("eqoRxRemoteRP", 22), ("otherRxRemoteRP", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldRPCaps.setStatus('current')
if mibBuilder.loadTexts: frsldRPCaps.setDescription('This object specifies the reference points that the agent supports. This object allows the management application to discover which rows can be created on a specific device.')
frsldMaxPvcCtrls = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frsldMaxPvcCtrls.setStatus('current')
if mibBuilder.loadTexts: frsldMaxPvcCtrls.setDescription('The maximum number of control rows that can be created in frsldPvcCtrlTable. Sets to this object lower than the current value of frsldNumPvcCtrls should result in inconsistentValue.')
frsldNumPvcCtrls = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldNumPvcCtrls.setStatus('current')
if mibBuilder.loadTexts: frsldNumPvcCtrls.setDescription('The current number of rows in frsldPvcCtrlTable.')
frsldMaxSmplCtrls = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frsldMaxSmplCtrls.setStatus('current')
if mibBuilder.loadTexts: frsldMaxSmplCtrls.setDescription('The maximum number of control rows that can be created in frsldSmplCtrlTable. Sets to this object lower than the current value of frsldNumSmplCtrls should result in inconsistentValue.')
frsldNumSmplCtrls = MibScalar((1, 3, 6, 1, 2, 1, 95, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frsldNumSmplCtrls.setStatus('current')
if mibBuilder.loadTexts: frsldNumSmplCtrls.setDescription('The current number of rows in frsldSmplCtrlTable.')
frsldMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 95, 3, 1))
frsldMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 95, 3, 2))
frsldCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 95, 3, 2, 1)).setObjects(("FRSLD-MIB", "frsldPvcReqCtrlGroup"), ("FRSLD-MIB", "frsldPvcReqDataGroup"), ("FRSLD-MIB", "frsldCapabilitiesGroup"), ("FRSLD-MIB", "frsldPvcHCFrameDataGroup"), ("FRSLD-MIB", "frsldPvcHCOctetDataGroup"), ("FRSLD-MIB", "frsldPvcPacketGroup"), ("FRSLD-MIB", "frsldPvcDelayCtrlGroup"), ("FRSLD-MIB", "frsldPvcSampleCtrlGroup"), ("FRSLD-MIB", "frsldPvcDelayDataGroup"), ("FRSLD-MIB", "frsldPvcSampleDelayGroup"), ("FRSLD-MIB", "frsldPvcSampleDataGroup"), ("FRSLD-MIB", "frsldPvcSampleHCFrameGroup"), ("FRSLD-MIB", "frsldPvcSampleHCDataGroup"), ("FRSLD-MIB", "frsldPvcSampleAvailGroup"), ("FRSLD-MIB", "frsldPvcSampleGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldCompliance = frsldCompliance.setStatus('current')
if mibBuilder.loadTexts: frsldCompliance.setDescription('The compliance statement for SNMP entities which support with Frame Relay Service Level Definitions. This group defines the minimum level of support required for compliance.')
frsldPvcReqCtrlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 1)).setObjects(("FRSLD-MIB", "frsldPvcCtrlStatus"), ("FRSLD-MIB", "frsldPvcCtrlPurge"), ("FRSLD-MIB", "frsldPvcCtrlDeleteOnPurge"), ("FRSLD-MIB", "frsldPvcCtrlLastPurgeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcReqCtrlGroup = frsldPvcReqCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcReqCtrlGroup.setDescription('A collection of required objects providing control information applicable to a PVC which implements Service Level Definitions.')
frsldPvcPacketGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 2)).setObjects(("FRSLD-MIB", "frsldPvcCtrlPacketFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcPacketGroup = frsldPvcPacketGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcPacketGroup.setDescription('A collection of optional objects providing packet level control information applicable to a PVC which implements Service Level Definitions.')
frsldPvcDelayCtrlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 3)).setObjects(("FRSLD-MIB", "frsldPvcCtrlDelayFrSize"), ("FRSLD-MIB", "frsldPvcCtrlDelayType"), ("FRSLD-MIB", "frsldPvcCtrlDelayTimeOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcDelayCtrlGroup = frsldPvcDelayCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDelayCtrlGroup.setDescription('A collection of optional objects providing delay control information applicable to a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcPacketGroup and frsldPvcDelayDataGroup MUST also be implemented.')
frsldPvcSampleCtrlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 4)).setObjects(("FRSLD-MIB", "frsldSmplCtrlStatus"), ("FRSLD-MIB", "frsldSmplCtrlColPeriod"), ("FRSLD-MIB", "frsldSmplCtrlBuckets"), ("FRSLD-MIB", "frsldSmplCtrlBucketsGranted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleCtrlGroup = frsldPvcSampleCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleCtrlGroup.setDescription('A collection of optional objects providing sample control information applicable to a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcReqDataGroup and frsldPvcSampleGeneralGroup MUST also be implemented.')
frsldPvcReqDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 5)).setObjects(("FRSLD-MIB", "frsldPvcDataFrDeliveredC"), ("FRSLD-MIB", "frsldPvcDataFrDeliveredE"), ("FRSLD-MIB", "frsldPvcDataFrOfferedC"), ("FRSLD-MIB", "frsldPvcDataFrOfferedE"), ("FRSLD-MIB", "frsldPvcDataDataDeliveredC"), ("FRSLD-MIB", "frsldPvcDataDataDeliveredE"), ("FRSLD-MIB", "frsldPvcDataDataOfferedC"), ("FRSLD-MIB", "frsldPvcDataDataOfferedE"), ("FRSLD-MIB", "frsldPvcDataUnavailableTime"), ("FRSLD-MIB", "frsldPvcDataUnavailables"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcReqDataGroup = frsldPvcReqDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcReqDataGroup.setDescription('A collection of required objects providing data collected on a PVC which implements Service Level Definitions.')
frsldPvcDelayDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 6)).setObjects(("FRSLD-MIB", "frsldPvcDataMissedPolls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcDelayDataGroup = frsldPvcDelayDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcDelayDataGroup.setDescription('A collection of optional objects providing delay data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcDelayCtrlGroup MUST also be implemented.')
frsldPvcHCFrameDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 7)).setObjects(("FRSLD-MIB", "frsldPvcDataHCFrDeliveredC"), ("FRSLD-MIB", "frsldPvcDataHCFrDeliveredE"), ("FRSLD-MIB", "frsldPvcDataHCFrOfferedC"), ("FRSLD-MIB", "frsldPvcDataHCFrOfferedE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcHCFrameDataGroup = frsldPvcHCFrameDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcHCFrameDataGroup.setDescription('A collection of optional objects providing high capacity frame data collected on a PVC which implements Service Level Definitions.')
frsldPvcHCOctetDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 8)).setObjects(("FRSLD-MIB", "frsldPvcDataHCDataDeliveredC"), ("FRSLD-MIB", "frsldPvcDataHCDataDeliveredE"), ("FRSLD-MIB", "frsldPvcDataHCDataOfferedC"), ("FRSLD-MIB", "frsldPvcDataHCDataOfferedE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcHCOctetDataGroup = frsldPvcHCOctetDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcHCOctetDataGroup.setDescription('A collection of optional objects providing high capacity octet data collected on a PVC which implements Service Level Definitions.')
frsldPvcSampleDelayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 9)).setObjects(("FRSLD-MIB", "frsldPvcSmplDelayMin"), ("FRSLD-MIB", "frsldPvcSmplDelayMax"), ("FRSLD-MIB", "frsldPvcSmplDelayAvg"), ("FRSLD-MIB", "frsldPvcSmplMissedPolls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleDelayGroup = frsldPvcSampleDelayGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleDelayGroup.setDescription('A collection of optional objects providing delay sample data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcDelayCtrlGroup MUST also be implemented.')
frsldPvcSampleDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 10)).setObjects(("FRSLD-MIB", "frsldPvcSmplFrDeliveredC"), ("FRSLD-MIB", "frsldPvcSmplFrDeliveredE"), ("FRSLD-MIB", "frsldPvcSmplFrOfferedC"), ("FRSLD-MIB", "frsldPvcSmplFrOfferedE"), ("FRSLD-MIB", "frsldPvcSmplDataDeliveredC"), ("FRSLD-MIB", "frsldPvcSmplDataDeliveredE"), ("FRSLD-MIB", "frsldPvcSmplDataOfferedC"), ("FRSLD-MIB", "frsldPvcSmplDataOfferedE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleDataGroup = frsldPvcSampleDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleDataGroup.setDescription('A collection of optional objects providing data and frame delivery sample data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcReqDataGroup MUST also be implemented.')
frsldPvcSampleHCFrameGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 11)).setObjects(("FRSLD-MIB", "frsldPvcSmplHCFrDeliveredC"), ("FRSLD-MIB", "frsldPvcSmplHCFrDeliveredE"), ("FRSLD-MIB", "frsldPvcSmplHCFrOfferedC"), ("FRSLD-MIB", "frsldPvcSmplHCFrOfferedE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleHCFrameGroup = frsldPvcSampleHCFrameGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleHCFrameGroup.setDescription('A collection of optional objects providing high capacity frame delivery sample data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcHCFrameDataGroup MUST also be implemented.')
frsldPvcSampleHCDataGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 12)).setObjects(("FRSLD-MIB", "frsldPvcSmplHCDataDeliveredC"), ("FRSLD-MIB", "frsldPvcSmplHCDataDeliveredE"), ("FRSLD-MIB", "frsldPvcSmplHCDataOfferedC"), ("FRSLD-MIB", "frsldPvcSmplHCDataOfferedE"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleHCDataGroup = frsldPvcSampleHCDataGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleHCDataGroup.setDescription('A collection of optional objects providing high capacity data delivery sample data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcHCOctetDataGroup MUST also be implemented.')
frsldPvcSampleAvailGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 13)).setObjects(("FRSLD-MIB", "frsldPvcSmplUnavailableTime"), ("FRSLD-MIB", "frsldPvcSmplUnavailables"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleAvailGroup = frsldPvcSampleAvailGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleAvailGroup.setDescription('A collection of optional objects providing availability sample data collected on a PVC which implements Service Level Definitions. If this group is implemented, frsldPvcReqDataGroup MUST also be implemented.')
frsldPvcSampleGeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 14)).setObjects(("FRSLD-MIB", "frsldPvcSmplStartTime"), ("FRSLD-MIB", "frsldPvcSmplEndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldPvcSampleGeneralGroup = frsldPvcSampleGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: frsldPvcSampleGeneralGroup.setDescription('A collection of optional objects providing general sample data collected on a PVC which implements Service Level Definitions.')
frsldCapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 95, 3, 1, 15)).setObjects(("FRSLD-MIB", "frsldPvcCtrlWriteCaps"), ("FRSLD-MIB", "frsldSmplCtrlWriteCaps"), ("FRSLD-MIB", "frsldRPCaps"), ("FRSLD-MIB", "frsldMaxPvcCtrls"), ("FRSLD-MIB", "frsldNumPvcCtrls"), ("FRSLD-MIB", "frsldMaxSmplCtrls"), ("FRSLD-MIB", "frsldNumSmplCtrls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    frsldCapabilitiesGroup = frsldCapabilitiesGroup.setStatus('current')
if mibBuilder.loadTexts: frsldCapabilitiesGroup.setDescription('A collection of required objects providing capability information and control for this MIB module.')
mibBuilder.exportSymbols("FRSLD-MIB", frsldPvcCtrlLastPurgeTime=frsldPvcCtrlLastPurgeTime, frsldPvcPacketGroup=frsldPvcPacketGroup, frsldPvcCtrlDlci=frsldPvcCtrlDlci, PYSNMP_MODULE_ID=frsldMIB, frsldPvcDataMissedPolls=frsldPvcDataMissedPolls, frsldPvcDelayCtrlGroup=frsldPvcDelayCtrlGroup, frsldPvcSampleDataGroup=frsldPvcSampleDataGroup, frsldPvcDataTable=frsldPvcDataTable, frsldObjects=frsldObjects, frsldMaxPvcCtrls=frsldMaxPvcCtrls, frsldCapabilitiesGroup=frsldCapabilitiesGroup, frsldPvcSampleCtrlGroup=frsldPvcSampleCtrlGroup, frsldSmplCtrlTable=frsldSmplCtrlTable, frsldPvcSmplHCFrOfferedE=frsldPvcSmplHCFrOfferedE, frsldPvcDataUnavailables=frsldPvcDataUnavailables, frsldSmplCtrlBuckets=frsldSmplCtrlBuckets, frsldNumPvcCtrls=frsldNumPvcCtrls, frsldPvcSmplHCDataDeliveredE=frsldPvcSmplHCDataDeliveredE, frsldPvcCtrlTransmitRP=frsldPvcCtrlTransmitRP, frsldPvcHCFrameDataGroup=frsldPvcHCFrameDataGroup, frsldPvcSmplDataDeliveredC=frsldPvcSmplDataDeliveredC, frsldPvcSmplHCDataOfferedC=frsldPvcSmplHCDataOfferedC, frsldPvcSmplHCDataOfferedE=frsldPvcSmplHCDataOfferedE, frsldMaxSmplCtrls=frsldMaxSmplCtrls, frsldSmplCtrlWriteCaps=frsldSmplCtrlWriteCaps, frsldPvcSmplDelayMin=frsldPvcSmplDelayMin, frsldPvcSampleAvailGroup=frsldPvcSampleAvailGroup, frsldPvcDataHCDataOfferedC=frsldPvcDataHCDataOfferedC, frsldSmplCtrlIdx=frsldSmplCtrlIdx, frsldPvcSampleEntry=frsldPvcSampleEntry, frsldPvcSmplFrDeliveredC=frsldPvcSmplFrDeliveredC, frsldRPCaps=frsldRPCaps, frsldConformance=frsldConformance, frsldPvcDataUnavailableTime=frsldPvcDataUnavailableTime, frsldPvcDataHCDataDeliveredE=frsldPvcDataHCDataDeliveredE, frsldPvcCtrlDelayType=frsldPvcCtrlDelayType, frsldPvcSampleHCDataGroup=frsldPvcSampleHCDataGroup, frsldSmplCtrlBucketsGranted=frsldSmplCtrlBucketsGranted, frsldPvcSampleGeneralGroup=frsldPvcSampleGeneralGroup, frsldCapabilities=frsldCapabilities, frsldPvcDataHCFrOfferedE=frsldPvcDataHCFrOfferedE, frsldNumSmplCtrls=frsldNumSmplCtrls, frsldPvcSmplDataOfferedC=frsldPvcSmplDataOfferedC, frsldPvcCtrlDelayFrSize=frsldPvcCtrlDelayFrSize, frsldPvcCtrlDelayTimeOut=frsldPvcCtrlDelayTimeOut, frsldPvcDataHCDataDeliveredC=frsldPvcDataHCDataDeliveredC, frsldPvcCtrlTable=frsldPvcCtrlTable, frsldSmplCtrlColPeriod=frsldSmplCtrlColPeriod, frsldPvcDataDataDeliveredC=frsldPvcDataDataDeliveredC, frsldPvcCtrlStatus=frsldPvcCtrlStatus, frsldPvcSmplHCFrOfferedC=frsldPvcSmplHCFrOfferedC, frsldSmplCtrlStatus=frsldSmplCtrlStatus, frsldPvcDataHCFrOfferedC=frsldPvcDataHCFrOfferedC, frsldPvcSmplDataOfferedE=frsldPvcSmplDataOfferedE, frsldPvcDataHCFrDeliveredE=frsldPvcDataHCFrDeliveredE, frsldPvcSmplStartTime=frsldPvcSmplStartTime, frsldPvcSmplHCFrDeliveredC=frsldPvcSmplHCFrDeliveredC, frsldPvcSmplDelayMax=frsldPvcSmplDelayMax, frsldPvcSmplFrOfferedE=frsldPvcSmplFrOfferedE, frsldPvcSmplHCFrDeliveredE=frsldPvcSmplHCFrDeliveredE, frsldMIB=frsldMIB, frsldPvcDataFrOfferedC=frsldPvcDataFrOfferedC, frsldPvcSmplFrDeliveredE=frsldPvcSmplFrDeliveredE, FrsldTxRP=FrsldTxRP, frsldPvcSmplDelayAvg=frsldPvcSmplDelayAvg, frsldPvcDataHCDataOfferedE=frsldPvcDataHCDataOfferedE, frsldPvcDataEntry=frsldPvcDataEntry, frsldPvcDelayDataGroup=frsldPvcDelayDataGroup, frsldPvcCtrlWriteCaps=frsldPvcCtrlWriteCaps, frsldPvcSampleHCFrameGroup=frsldPvcSampleHCFrameGroup, frsldMIBGroups=frsldMIBGroups, frsldPvcSmplFrOfferedC=frsldPvcSmplFrOfferedC, FrsldRxRP=FrsldRxRP, frsldPvcDataHCFrDeliveredC=frsldPvcDataHCFrDeliveredC, frsldPvcSmplUnavailables=frsldPvcSmplUnavailables, frsldSmplCtrlEntry=frsldSmplCtrlEntry, frsldPvcSmplMissedPolls=frsldPvcSmplMissedPolls, frsldPvcSmplHCDataDeliveredC=frsldPvcSmplHCDataDeliveredC, frsldPvcCtrlPurge=frsldPvcCtrlPurge, frsldPvcReqCtrlGroup=frsldPvcReqCtrlGroup, frsldPvcSampleTable=frsldPvcSampleTable, frsldPvcCtrlEntry=frsldPvcCtrlEntry, frsldPvcDataDataDeliveredE=frsldPvcDataDataDeliveredE, frsldPvcDataDataOfferedE=frsldPvcDataDataOfferedE, frsldPvcCtrlDeleteOnPurge=frsldPvcCtrlDeleteOnPurge, frsldPvcHCOctetDataGroup=frsldPvcHCOctetDataGroup, frsldCompliance=frsldCompliance, frsldPvcCtrlPacketFreq=frsldPvcCtrlPacketFreq, frsldPvcDataFrDeliveredE=frsldPvcDataFrDeliveredE, frsldPvcDataFrOfferedE=frsldPvcDataFrOfferedE, frsldPvcSmplDataDeliveredE=frsldPvcSmplDataDeliveredE, frsldPvcDataFrDeliveredC=frsldPvcDataFrDeliveredC, frsldPvcDataDataOfferedC=frsldPvcDataDataOfferedC, frsldPvcReqDataGroup=frsldPvcReqDataGroup, frsldPvcCtrlReceiveRP=frsldPvcCtrlReceiveRP, frsldPvcSmplIdx=frsldPvcSmplIdx, frsldMIBCompliances=frsldMIBCompliances, frsldPvcSampleDelayGroup=frsldPvcSampleDelayGroup, frsldPvcSmplUnavailableTime=frsldPvcSmplUnavailableTime, frsldPvcSmplEndTime=frsldPvcSmplEndTime)
