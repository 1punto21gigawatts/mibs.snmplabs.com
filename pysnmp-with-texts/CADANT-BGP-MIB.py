#
# PySNMP MIB module CADANT-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cadLayer3, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLayer3")
bgpRmEntIndex, BgpIpMatchType, bgpRouteMapNumber, bgpRouteMapIndex = mibBuilder.importSymbols("DC-BGP-MIB", "bgpRmEntIndex", "BgpIpMatchType", "bgpRouteMapNumber", "bgpRouteMapIndex")
FteIndex, = mibBuilder.importSymbols("DC-RTM-MIB", "FteIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, ObjectIdentity, IpAddress, NotificationType, Unsigned32, ModuleIdentity, Counter64, Integer32, MibIdentifier, TimeTicks, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "ObjectIdentity", "IpAddress", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter64", "Integer32", "MibIdentifier", "TimeTicks", "Gauge32", "Bits")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
cadBgpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9))
cadBgpMib.setRevisions(('2004-06-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadBgpMib.setRevisionsDescriptions((' Removed original tables and add DCL related tables. ',))
if mibBuilder.loadTexts: cadBgpMib.setLastUpdated('200406080000Z')
if mibBuilder.loadTexts: cadBgpMib.setOrganization('Arris Inc')
if mibBuilder.loadTexts: cadBgpMib.setContactInfo(' Customer Support Postal: Arris International Inc. 4343 Commerce Court Lisle, IL 60532 Phone: +1 630 281 3000 Email: support@cadant.com ')
if mibBuilder.loadTexts: cadBgpMib.setDescription("The MIB module defined here represent Arris Cadant C4's enterprise specific Border Gateway Protocol MIB.")
cadBgpRouteMapAuxTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17), )
if mibBuilder.loadTexts: cadBgpRouteMapAuxTable.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxTable.setDescription('This table adds Cadant specific route map parameters.')
cadBgpRouteMapAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1), ).setIndexNames((0, "DC-BGP-MIB", "bgpRmEntIndex"), (0, "DC-BGP-MIB", "bgpRouteMapIndex"), (0, "DC-BGP-MIB", "bgpRouteMapNumber"))
if mibBuilder.loadTexts: cadBgpRouteMapAuxEntry.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxEntry.setDescription('An entry that adds Cadant specific route map parameters using the DCL bgpRouteMapTable keys.')
cadBgpRouteMapAuxRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpRouteMapAuxRouteMapName.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxRouteMapName.setDescription('Field containg the name of the Route Map.')
cadBgpRouteMapAuxPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpRouteMapAuxPrefixListName.setStatus('obsolete')
if mibBuilder.loadTexts: cadBgpRouteMapAuxPrefixListName.setDescription('Field containg the name of the Prefix List associated with this Route Map. It is used to match on cadPolicyPfxListName.')
cadBgpRouteMapAuxPreMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 3), BgpIpMatchType())
if mibBuilder.loadTexts: cadBgpRouteMapAuxPreMatch.setStatus('obsolete')
if mibBuilder.loadTexts: cadBgpRouteMapAuxPreMatch.setDescription('Field indicates which match command is used by the route map the prefix list is tied to.')
cadBgpRouteMapAuxMaAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaAddrName.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaAddrName.setDescription('Field containg the name of the Prefix List used to match the NLRI attribute against.')
cadBgpRouteMapAuxMaNextName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaNextName.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaNextName.setDescription('Field containg the name of the Prefix List used to match the Next Hop attribute')
cadBgpRouteMapAuxMaSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 17, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaSourceName.setStatus('current')
if mibBuilder.loadTexts: cadBgpRouteMapAuxMaSourceName.setDescription('Field containg the name of the Prefix List used to match the source address')
cadRtmRedistAuxTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18), )
if mibBuilder.loadTexts: cadRtmRedistAuxTable.setStatus('current')
if mibBuilder.loadTexts: cadRtmRedistAuxTable.setDescription('This table adds Cadant redistribution information entries.')
cadRtmRedistAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1), ).setIndexNames((0, "CADANT-BGP-MIB", "rtmRedistFteIndex"), (0, "CADANT-BGP-MIB", "rtmRedistEntryId"))
if mibBuilder.loadTexts: cadRtmRedistAuxEntry.setStatus('current')
if mibBuilder.loadTexts: cadRtmRedistAuxEntry.setDescription('Cadant specific auxiliary information that parallels DC-RTM Redistribution Table')
rtmRedistFteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1, 1), FteIndex())
if mibBuilder.loadTexts: rtmRedistFteIndex.setStatus('current')
if mibBuilder.loadTexts: rtmRedistFteIndex.setDescription('The HAF entity index identifying the instance of DC-RTM to which this auxiliary table entry applies.')
rtmRedistEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rtmRedistEntryId.setStatus('current')
if mibBuilder.loadTexts: rtmRedistEntryId.setDescription('The index of the parallel DC-RTM redistribution table entry within the DC-RTM entity. This is an arbitrarily selected identifier.')
cadRtmRedistAuxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadRtmRedistAuxRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadRtmRedistAuxRowStatus.setDescription('Used to create and delete a cadRtmRedistAuxTable entry.')
cadRtmRedistAuxRouteMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadRtmRedistAuxRouteMapIndex.setStatus('current')
if mibBuilder.loadTexts: cadRtmRedistAuxRouteMapIndex.setDescription('The index of the bgpRouteMapEntry used by this route redistribution.')
cadRtmRedistAuxCommandLineMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 25, 9, 18, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadRtmRedistAuxCommandLineMetric.setStatus('current')
if mibBuilder.loadTexts: cadRtmRedistAuxCommandLineMetric.setDescription('Whether of not metric values were set in the command line')
mibBuilder.exportSymbols("CADANT-BGP-MIB", cadBgpRouteMapAuxEntry=cadBgpRouteMapAuxEntry, rtmRedistEntryId=rtmRedistEntryId, cadRtmRedistAuxTable=cadRtmRedistAuxTable, cadBgpRouteMapAuxPrefixListName=cadBgpRouteMapAuxPrefixListName, rtmRedistFteIndex=rtmRedistFteIndex, cadBgpRouteMapAuxMaSourceName=cadBgpRouteMapAuxMaSourceName, cadRtmRedistAuxEntry=cadRtmRedistAuxEntry, cadRtmRedistAuxRowStatus=cadRtmRedistAuxRowStatus, cadRtmRedistAuxCommandLineMetric=cadRtmRedistAuxCommandLineMetric, cadRtmRedistAuxRouteMapIndex=cadRtmRedistAuxRouteMapIndex, cadBgpRouteMapAuxMaNextName=cadBgpRouteMapAuxMaNextName, cadBgpMib=cadBgpMib, PYSNMP_MODULE_ID=cadBgpMib, cadBgpRouteMapAuxTable=cadBgpRouteMapAuxTable, cadBgpRouteMapAuxMaAddrName=cadBgpRouteMapAuxMaAddrName, cadBgpRouteMapAuxPreMatch=cadBgpRouteMapAuxPreMatch, cadBgpRouteMapAuxRouteMapName=cadBgpRouteMapAuxRouteMapName)
