#
# PySNMP MIB module Unisphere-Data-PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-PIM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:32:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
pimInterfaceIfIndex, pimRPSetGroupAddress, pimRPSetGroupMask, pimRPSetComponent, pimRPSetAddress = mibBuilder.importSymbols("PIM-MIB", "pimInterfaceIfIndex", "pimRPSetGroupAddress", "pimRPSetGroupMask", "pimRPSetComponent", "pimRPSetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, ObjectIdentity, iso, Bits, Counter64, ModuleIdentity, MibIdentifier, Counter32, Unsigned32, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "iso", "Bits", "Counter64", "ModuleIdentity", "MibIdentifier", "Counter32", "Unsigned32", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdPimMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43))
usdPimMIB.setRevisions(('2001-03-19 15:37',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdPimMIB.setRevisionsDescriptions(('Initial enterprise version.',))
if mibBuilder.loadTexts: usdPimMIB.setLastUpdated('200103191537Z')
if mibBuilder.loadTexts: usdPimMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdPimMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdPimMIB.setDescription('The enterprise MIB module for management of PIM routers.')
class UsdPimType(TextualConvention, Integer32):
    description = 'This data type is used do identify Sparse mode and Dense mode PIM protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("invalid", 0), ("dense", 1), ("sparse", 2), ("sparseAndDense", 3))

usdPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1))
usdPimTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 0))
usdPimGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1))
usdPimNumHelloRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumHelloRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimNumHelloRcvd.setDescription('Total number of Hellos received by PIM on this router.')
usdPimNumJoinPruneRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumJoinPruneRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimNumJoinPruneRcvd.setDescription('Total number of JoinPrunes received by PIM on this router.')
usdPimNumAssertRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumAssertRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimNumAssertRcvd.setDescription('Total number of Asserts received by PIM on this router.')
usdPimNumGraftRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumGraftRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimNumGraftRcvd.setDescription('Total number of Grafts received by PIM on this router.')
usdPimNumGraftAckRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumGraftAckRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimNumGraftAckRcvd.setDescription('Total number of Graft Acks received by PIM on this router.')
usdPimNumHelloSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumHelloSent.setStatus('current')
if mibBuilder.loadTexts: usdPimNumHelloSent.setDescription('Total number of Hellos sent by PIM on this router.')
usdPimNumJoinPruneSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumJoinPruneSent.setStatus('current')
if mibBuilder.loadTexts: usdPimNumJoinPruneSent.setDescription('Total number of JoinPrunes sent by PIM on this router.')
usdPimNumAssertSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumAssertSent.setStatus('current')
if mibBuilder.loadTexts: usdPimNumAssertSent.setDescription('Total number of Asserts sent by PIM on this router.')
usdPimNumGraftSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumGraftSent.setStatus('current')
if mibBuilder.loadTexts: usdPimNumGraftSent.setDescription('Total number of Grafts sent by PIM on this router.')
usdPimNumGraftAckSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimNumGraftAckSent.setStatus('current')
if mibBuilder.loadTexts: usdPimNumGraftAckSent.setDescription('Total number of Graft Acks sent by PIM on this router.')
usdPimInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11), )
if mibBuilder.loadTexts: usdPimInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: usdPimInterfaceTable.setDescription('The (conceptual) table listing enterprise specific information on a subset of the rows of the pimInterfaceTable defined in the standard PIM MIB.')
usdPimInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1), ).setIndexNames((0, "PIM-MIB", "pimInterfaceIfIndex"))
if mibBuilder.loadTexts: usdPimInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimInterfaceEntry.setDescription('An entry (conceptual row) in the usdPimInterfaceTable. There is one entry per entry in the pimInterfaceTable.')
usdPimIntfNumHelloRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumHelloRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumHelloRcvd.setDescription('Total number of Hellos received by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumJoinPruneRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumJoinPruneRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumJoinPruneRcvd.setDescription('Total number of JoinPrunes received by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumAssertRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumAssertRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumAssertRcvd.setDescription('Total number of Asserts received by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumGraftRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumGraftRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumGraftRcvd.setDescription('Total number of Grafts received by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumGraftAckRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumGraftAckRcvd.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumGraftAckRcvd.setDescription('Total number of Graft Acks received by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumHelloSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumHelloSent.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumHelloSent.setDescription('Total number of Hellos sent by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumJoinPruneSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumJoinPruneSent.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumJoinPruneSent.setDescription('Total number of JoinPrunes sent by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumAssertSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumAssertSent.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumAssertSent.setDescription('Total number of Asserts sent by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumGraftSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumGraftSent.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumGraftSent.setDescription('Total number of Grafts sent by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfNumGraftAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimIntfNumGraftAckSent.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumGraftAckSent.setDescription('Total number of Graft Acks sent by PIM on this interface. It can only be cleared to 0 when doing set. Setting this also sets counters for other types of packets to 0.')
usdPimIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimIntfVersion.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfVersion.setDescription('The version of PIM running on this interface.')
usdPimIntfNumNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimIntfNumNbrs.setStatus('current')
if mibBuilder.loadTexts: usdPimIntfNumNbrs.setDescription('Number of PIM neighbors detected on this interface.')
usdPimMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12), )
if mibBuilder.loadTexts: usdPimMRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteTable.setDescription('The (conceptual) table listing PIM multicast routing information describing its <*, *, RP>/ <*, G>/ <S, G> states.')
usdPimMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimMRouteGroup"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteSource"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteSourceMask"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteRPAddress"))
if mibBuilder.loadTexts: usdPimMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteEntry.setDescription('An entry (conceptual row) in the usdPimMRouteTable.')
usdPimMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteGroup.setDescription('The group address. Specified as 224.0.0.0 for <*, *, RP> entries.')
usdPimMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteSource.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteSource.setDescription('The source address. Specified as 0.0.0.0 for <*, *, RP> and <*, G> entries.')
usdPimMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteSourceMask.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteSourceMask.setDescription('The source address mask. Specified as 255.255.255.255 for <S, G> entries and 0.0.0.0 for <*, *, RP> and <*, G> entries.')
usdPimMRouteRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteRPAddress.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteRPAddress.setDescription('The RP address used for <*, *, RP>. Specified as 0.0.0.0 for <S, G> and <*, G> entries.')
usdPimMRouteUpstreamAssertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteUpstreamAssertTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteUpstreamAssertTimer.setDescription('The time remaining before the router changes its upstream neighbor back to its RPF neighbor. This timer is called the Assert timer in the PIM Sparse and Dense mode specification. A value of 0 indicates that no Assert has changed the upstream neighbor away from the RPF neighbor.')
usdPimMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteAssertMetric.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteAssertMetric.setDescription('The metric advertised by the assert winner on the upstream interface, or 0 if no such assert is in received.')
usdPimMRouteAssertPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteAssertPref.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteAssertPref.setDescription('The preference advertised by the assert winner on the upstream interface, or 0 if no such assert is in effect.')
usdPimMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteAssertRPTBit.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteAssertRPTBit.setDescription('The value of the RPT-bit advertised by the assert winner on the upstream interface, or false if no such assert is in effect.')
usdPimMRouteBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 9), Bits().clone(namedValues=NamedValues(("rpt", 0), ("spt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteBits.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteBits.setDescription('This object describes whether the entry is on shared tree (rpt) or shortest path tree (spt).')
usdPimMRouteRPAddrInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteRPAddrInUse.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteRPAddrInUse.setDescription('The RP Address being used for the <S, G>RPT/<*, G>/<*, *, RP> entries. Set to 0.0.0.0 for <S, G> entries on shortest path tree.')
usdPimMRouteUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteUpstreamNbr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteUpstreamNbr.setDescription('The address of upstream neighbor being used for the entry. Its set to 0.0.0.0 if the router is directly attached to source on one of its interface. ')
usdPimMRouteIifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteIifAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteIifAddr.setDescription('The address of incoming interface for this entry.')
usdPimMRouteIsWaitingToSwitchToSPT = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteIsWaitingToSwitchToSPT.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteIsWaitingToSwitchToSPT.setDescription('This object describes whether the entry is still waiting to switch completely to shortest path tree in case of <S, G> entries. It waits to do this till it receives first packet from incoming interface towards shortest path tree.')
usdPimMRouteEntryExpiryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteEntryExpiryTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteEntryExpiryTimer.setDescription('The time after which the entry timer expires for this entry. Set to 0 if entry timer is not active.')
usdPimMRouteSenderDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteSenderDRAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteSenderDRAddr.setDescription("The address of the designated router on the sender's subnet in case of <S, G> entries. The sender designated router register encapsulates data to RP. Set to 0.0.0.0 for <*, G> and <*, *, RP> entries.")
usdPimMRouteRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteRouteAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteRouteAddr.setDescription('The address of the route being used to do RPF check for this entry. It is set to 0.0.0.0 (with usdPimMRouteRouteMask set to 255.255.255.255) if there is no route available.')
usdPimMRouteRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteRouteMask.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteRouteMask.setDescription('The mask of the route being used to do RPF check for this entry. It is set to 255.255.255.255 (with usdPimMRouteRoute set to 0.0.0.0) if there is no route available.')
usdPimMRouteGRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteGRPAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteGRPAddr.setDescription('The address of the group-to-RP mapping being used to get the RP for this entry. It is set to 0.0.0.0 (with usdPimMRouteGRPMask set to 0.0.0.0) if there is no group-to-RP mapping available or if entry is <*, *, RP>.')
usdPimMRouteGRPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteGRPMask.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteGRPMask.setDescription('The mask of the group-to-RP mapping being used to get the RP for this entry. It is set to 255.255.255.255 (with usdPimMRouteGRPAddr set to 0.0.0.0) if there is no group-to-RP mapping available or if entry is <*, *, RP>.')
usdPimMRouteOtherProtoOifJoinTypeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeAll.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeAll.setDescription('This object indicates if some other multicast protocol is also interested in receiving data for this entry as a result of its interest in receiving all data. This will be particularly true for dense mode protocols which would want all data (<*, *>) from PIM sparse mode protocol.')
usdPimMRouteOtherProtoOifJoinTypeG = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeG.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeG.setDescription('This object indicates if some other multicast protocol is also interested in receiving data for this entry as a result of its interest in receiving data for a given group. This will be particularly true for IGMP which would want data for a given group (<*, G>) from PIM protocol.')
usdPimMRouteOtherProtoOifJoinTypeSG = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeSG.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteOtherProtoOifJoinTypeSG.setDescription('This object indicates if some other multicast protocol is also interested in receiving data for this entry as a result of its interest in receiving data for a given <source, group>. This will be particularly true for IGMPv3 which would want data for a given <source, group (<S, G>) from PIM sparse-mode protocol.')
usdPimMRoutePimType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 12, 1, 23), UsdPimType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRoutePimType.setStatus('current')
if mibBuilder.loadTexts: usdPimMRoutePimType.setDescription('This object indicates if the owner of this entry is Sparse mode or Dense mode PIM. Owner is usually determined by the protocol running on the incoming interface of the entry. In case sparse-dense mode PIM is running on the incoming interface, sparse-mode is the owner if RP for the group is known, else dense mode is the owner.')
usdPimMRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13), )
if mibBuilder.loadTexts: usdPimMRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopTable.setDescription('The (conceptual) table listing PIM multicast routing information describing its <*, *, RP>/ <*, G>/ <S, G> outgoing interfaces.')
usdPimMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopGroupAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopSrcAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopSrcMask"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopRPAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopIfId"), (0, "Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopAddress"))
if mibBuilder.loadTexts: usdPimMRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopEntry.setDescription('An entry (conceptual row) in the usdPimMRouteNextHopTable.')
usdPimMRouteNextHopGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteNextHopGroupAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopGroupAddr.setDescription('The group address. Specified as 224.0.0.0 for <*, *, RP> entries.')
usdPimMRouteNextHopSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteNextHopSrcAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopSrcAddr.setDescription('The source address. Specified as 0.0.0.0 for <*, *, RP> and <*, G> entries.')
usdPimMRouteNextHopSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteNextHopSrcMask.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopSrcMask.setDescription('The source address mask. Specified as 255.255.255.255 for <S, G> entries and 0.0.0.0 for <*, *, RP> and <*, G> entries.')
usdPimMRouteNextHopRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 5), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteNextHopRPAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopRPAddr.setDescription('The RP address used for <*, *, RP>. Specified as 0.0.0.0 for <S, G> and <*, G> entries.')
usdPimMRouteNextHopIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 6), InterfaceIndex())
if mibBuilder.loadTexts: usdPimMRouteNextHopIfId.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopIfId.setDescription(' The interface index of the outgoing interface (next hop). Specified as 0 for register outgoing interface. Register outgoing interfaces are created by DR on the source subnet to send PIM register encapsulated data (as unicast) to RP. It is also used by PIM boundary routers (PMBRs) to register data to RP.')
usdPimMRouteNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 7), IpAddress())
if mibBuilder.loadTexts: usdPimMRouteNextHopAddress.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopAddress.setDescription(' This object takes following different values based on the type of next hop. It should be set to the address of RP in case the next hop interface is register interface i.e. usdPimMRouteNextHopIfId object is set to 0. It should be set to the address of neighbor in case the interface is an NBMA interface. In all other cases it should be set to the group address itself.')
usdPimMRouteNextHopPruneReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("prune", 2), ("assert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopPruneReason.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopPruneReason.setDescription('This object indicates why the downstream interface was pruned, whether in response to a PIM prune message or due to PIM Assert processing.')
usdPimMRouteNextHopJoinTypeSSRP = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeSSRP.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeSSRP.setDescription('This object indicates whether or not the interface was added as a result of receiving <*, *, RP> join in case of <*, *, RP> entry OR inherited as outgoing interface from corresponding <*, *, RP> entry in case of <*, G> entry.')
usdPimMRouteNextHopJoinTypeG = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeG.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeG.setDescription('This object indicates whether or not the interface was added as a result of receiving <*, G> join in case of <*, G> entry OR inherited as outgoing interface from corresponding <*, G> entry in case of <S, G> entry.')
usdPimMRouteNextHopJoinTypeSG = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeSG.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinTypeSG.setDescription('This object indicates whether or not the interface was added as a result of receiving <S, G> join in case of <S, G> entry.')
usdPimMRouteNextHopHasLGM = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasLGM.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasLGM.setDescription('This object indicates whether or not the interface has local group membership (as indicated by IGMP) in case of <*, G> and <S, G> entries.')
usdPimMRouteNextHopHasOifAW = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifAW.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifAW.setDescription('This object indicates whether or not this interface is the winner of assert for corresponding <*, G>/<S, G> entry.')
usdPimMRouteNextHopHasOifSendAssert = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifSendAssert.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifSendAssert.setDescription('This object indicates whether or not this interface is going to send an assert at the end of assert suppression interval. Assert suppression is used to prevent a flood of assert to be generated in response to data or other asserts.')
usdPimMRouteNextHopHasOifRegister = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifRegister.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifRegister.setDescription('This object indicates whether or not this next hop is a register outgoing interface.')
usdPimMRouteNextHopHasOifBorderBit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifBorderBit.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifBorderBit.setDescription('This object is used to describe a register outgoing interface. It indicates whether or not the border bit is set in the register packet when the packet is sent over the register interface. For all other (non-register) interfaces its set to false.')
usdPimMRouteNextHopHasOifNullEncapsBit = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifNullEncapsBit.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopHasOifNullEncapsBit.setDescription('This object is used to describe a register outgoing interface. It indicates whether or not the NULL encapsulation bit is set (periodically) in the register packet when the packet is sent over the register interface. For all other (non-register) interfaces its set to false.')
usdPimMRouteNextHopJoinEndTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinEndTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopJoinEndTimer.setDescription('This object indicates the time (in seconds) left when the join timer expires for the outgoing interface. Join timer for an outgoing interface of <S, G> entry indicates when the <S, G> join expires, for a <*, G> entry indicates when the <*, G> join expires and for a <*, *, RP> entry indicates when the <*, *, RP> join expires. Inherited joins (like <S, G> inheriting from <*, G> AND <*, G> inheriting from <*, *, RP>) expire when the corresponding parent join expires.')
usdPimMRouteNextHopAssertEndTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopAssertEndTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopAssertEndTimer.setDescription('This object indicates the time (in seconds) left when the assert timer expires on this outgoing inteface.')
usdPimMRouteNextHopNextAssertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopNextAssertTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopNextAssertTimer.setDescription('This object indicates the duration (in seconds) left for which sending an assert has been suppressed on this outgoing interface.')
usdPimMRouteNextHopAssertSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopAssertSrcAddress.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopAssertSrcAddress.setDescription('This object indicates the source address which will be used in the assert packet to send an assert out for the entry on this outgoing interface. For <S, G> entries it is the address of the source S itself. For <*, G> entries it is the address of the source whose data was forwarded using this <*, G> and caused the assert situation to happen.')
usdPimMRouteNextHopRegisterSuppressionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopRegisterSuppressionTimer.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopRegisterSuppressionTimer.setDescription('This object is used for register outgoing interfaces. It indicates the duration (in seconds) left for which sending a register packet has been suppressed on the register outgoing interface as a result of receiving register-stop from the RP.')
usdPimMRouteNextHopPimType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 23), UsdPimType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopPimType.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopPimType.setDescription('This object indicates whether the outgoing interface was contributed by sparse-mode or dense-mode PIM.')
usdPimMRouteNextHopPruneTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopPruneTimeLeft.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopPruneTimeLeft.setDescription('This object indicates the time (in seconds) left when the prune timer expires on an outgoing inteface. Its used for pruned outgoing interfaces contributed by dense-mode PIM.')
usdPimMRouteNextHopsendingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 13, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimMRouteNextHopsendingIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopsendingIpAddress.setDescription('This object describes the source IP address used by this interface to send PIM packets out on this outgoing interface.')
usdPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 14), )
if mibBuilder.loadTexts: usdPimRPSetTable.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetTable.setDescription('The (conceptual) table listing enterprise specific information on a subset of the rows of the pimRPSetTable defined in the standard PIM MIB.')
usdPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 14, 1), ).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "PIM-MIB", "pimRPSetGroupAddress"), (0, "PIM-MIB", "pimRPSetGroupMask"), (0, "PIM-MIB", "pimRPSetAddress"))
if mibBuilder.loadTexts: usdPimRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetEntry.setDescription('An entry (conceptual row) in the usdPimRPSetTable.')
usdPimRPSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimRPSetPriority.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetPriority.setDescription('This object describes the priority of the RP for this group-to-RP mapping.')
usdPimRPSetTypeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pimRPTypeInvalid", 0), ("pimRPTypeStatic", 1), ("pimRPTypeStaticOverride", 2), ("pimRPTypeAutoRP", 3), ("pimRPTypeBSR", 4), ("pimRPTypeStaticNegative", 5), ("pimRPTypeStaticOverrideNegative", 6), ("pimRPTypeAutoRPNegative", 7), ("pimRPTypeBSRNegative", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimRPSetTypeInfo.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetTypeInfo.setDescription('This object describes the mechanism by which this group to RP mapping has been learnt, i.e. whether its statically configured, AutoRP learnt or BSR learnt. It also indicates whether the mapping is positive or negative. Negative mappings force the groups in that range to fall into dense-mode category if sparse-dense mode is configured or no RP if its purely sparse mode configuration.')
usdPimRPSetAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimRPSetAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetAccessListName.setDescription('This object lists the name of the access list from which this group-to-RP mapping was picked up in case of statically configured RPs.')
usdPimStaticRPConfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15), )
if mibBuilder.loadTexts: usdPimStaticRPConfTable.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfTable.setDescription('The (conceptual) table listing statically configured PIM RPs.')
usdPimStaticRPConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimStaticRPConfComponentIndex"), (0, "Unisphere-Data-PIM-MIB", "usdPimStaticRPConfRPAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimStaticRPConfAccessListName"))
if mibBuilder.loadTexts: usdPimStaticRPConfEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfEntry.setDescription('An entry (conceptual row) in the usdPimStaticRPConfTable.')
usdPimStaticRPConfComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPimStaticRPConfComponentIndex.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
usdPimStaticRPConfRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimStaticRPConfRPAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfRPAddr.setDescription('Ip address of the RP which for the group-to-RP mapping being configured.')
usdPimStaticRPConfAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: usdPimStaticRPConfAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfAccessListName.setDescription('Name of the access list from which group-ranges are picked up for this group-ro-RP mapping. Every deny component in the list is added as negative group-ro-RP mapping.')
usdPimStaticRPConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimStaticRPConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
usdPimStaticRPConfOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 15, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimStaticRPConfOverride.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfOverride.setDescription('The object indicates whether or not this statically configured group-to-RP mapping should override the group-to-RP mapping learnt via AutoRP for the component group-ranges in the access list. By default AutoRP learnt group-to-RP mappings are preferred over statically configured ones. While setting the rowStatus to create a static RP, this field should be assigned to true if the override property is desired.')
usdPimAutoRPConfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16), )
if mibBuilder.loadTexts: usdPimAutoRPConfTable.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfTable.setDescription('The (conceptual) table allowing AutoRP configuration of candidate RPs (advertisement agents).')
usdPimAutoRPConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPConfComponentIndex"), (0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPConfCandRPAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPConfGroupAccessListName"))
if mibBuilder.loadTexts: usdPimAutoRPConfEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfEntry.setDescription('An entry (conceptual row) in the usdPimAutoRPConfTable.')
usdPimAutoRPConfComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPimAutoRPConfComponentIndex.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
usdPimAutoRPConfCandRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimAutoRPConfCandRPAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfCandRPAddr.setDescription('The IP address of the candidate RP for this advertising agent configuration.')
usdPimAutoRPConfGroupAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: usdPimAutoRPConfGroupAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfGroupAccessListName.setDescription('The access list name from which group ranges are picked up for advertising agent configuration.')
usdPimAutoRPConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimAutoRPConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
usdPimAutoRPConfTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimAutoRPConfTTL.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfTTL.setDescription('The time-to-live value used while sending AutoRP advertisement out for this group-to-RP mappings created as a result of this configuration. This should be set along with usdPimAutoRPConfRowStatus while creating an AutoRP advertising agent to denote the TTL value to be used.')
usdPimAutoRPConfAncmntIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 6), TimeTicks().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimAutoRPConfAncmntIntvl.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfAncmntIntvl.setDescription('The time interval at which AutoRP advertisements are sent out for the group-to-RP mappings created as a result of this configuration. This should be set along with usdPimAutoRPConfRowStatus while creating an AutoRP advertising agent to denote the announcement interval to be used.')
usdPimAutoRPConfifId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 16, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPConfifId.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfifId.setDescription('The interface index of the interface for the candidate RP if an interface with that address exists else it is set to 0.')
usdPimAutoRPCandTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17), )
if mibBuilder.loadTexts: usdPimAutoRPCandTable.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandTable.setDescription('The (conceptual) table listing AutoRP candidate RPS (advertising agents).')
usdPimAutoRPCandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPCandComponentIndex"), (0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPCandRPAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPCandGroupAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimAutoRPCandGroupMask"))
if mibBuilder.loadTexts: usdPimAutoRPCandEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandEntry.setDescription('An entry (conceptual row) in the usdPimAutoRPCandTable.')
usdPimAutoRPCandComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPimAutoRPCandComponentIndex.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
usdPimAutoRPCandRPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimAutoRPCandRPAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandRPAddr.setDescription('The IP address of the candidate RP for this group-to-RP mapping.')
usdPimAutoRPCandGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdPimAutoRPCandGroupAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandGroupAddr.setDescription('The group address of the candidate RP for this group-to-RP mapping.')
usdPimAutoRPCandGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 4), IpAddress())
if mibBuilder.loadTexts: usdPimAutoRPCandGroupMask.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandGroupMask.setDescription('The group mask of the candidate RP for this group-to-RP mapping.')
usdPimAutoRPCandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPCandRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandRowStatus.setDescription('The current status of this row.')
usdPimAutoRPCandAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPCandAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandAccessListName.setDescription('The name of the group list using which this AutoRP group-to-RP candidate RP mapping was configured.')
usdPimAutoRPCandAutoRPTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPCandAutoRPTTL.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandAutoRPTTL.setDescription('The time-to-live value used while sending AutoRP advertisement out for this group-to-RP mapping.')
usdPimAutoRPCandAutoRPAncmntIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPCandAutoRPAncmntIntvl.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandAutoRPAncmntIntvl.setDescription('The time interval at which AutoRP advertisements are sent out for this group-to-RP mapping.')
usdPimAutoRPCandIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 17, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimAutoRPCandIfId.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandIfId.setDescription('The interface index of the interface for this AutoRP group-to-RP candidate RP mapping if an interface for RP address exists else it is set to 0.')
usdPimComponentTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18), )
if mibBuilder.loadTexts: usdPimComponentTable.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentTable.setDescription('The (conceptual) table listing each component (domain) in PIM.')
usdPimComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimComponentIndex"))
if mibBuilder.loadTexts: usdPimComponentEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentEntry.setDescription('An entry (conceptual row) in the usdPimComponentTable.')
usdPimComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: usdPimComponentIndex.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
usdPimComponentAutoRPMappingAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentRowStatus.setDescription('The status of AutoRP mapping agent by which this router can be made an AutoRP mapping agent or removed from being an AutoRP mapping agent in this component.')
usdPimComponentConfiguredAutoRPMappingAgentIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimComponentConfiguredAutoRPMappingAgentIfId.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentConfiguredAutoRPMappingAgentIfId.setDescription('The interface index of the interface which mapping agent should use to send AutoRP mapping messages. If not specified, the interface with highest IP address in this domain is picked up for this purpose.')
usdPimComponentAutoRPMappingAgentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 4), TimeTicks().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentInterval.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentInterval.setDescription('The time interval at which AutoRP mapping messages are sent out in this component. The default value is 60 seconds.')
usdPimComponentAutoRPMappingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingTTL.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingTTL.setDescription('The time-to-live value used while sending AutoRP mapping messages out in this component.')
usdPimComponentAutoRPMappingAgentIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentIntfAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentIntfAddr.setDescription('The IP address of the interface which mapping agent is using to send AutoRP mapping messages.')
usdPimComponentAutoRPMappingAgentWinnerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentWinnerAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentWinnerAddr.setDescription('The IP address of the winner AutoRP mapping agent. There can be multiple mapping agents configured in a given PIM domain(component). The mapping agent with highest IP address is chosen as the winner and it continues to send AutoRP mapping messages. If the router itself is the winner, then this is set to 0.0.0.0.')
usdPimComponentAutoRPMappingAgentWinnerLastHeard = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 18, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentWinnerLastHeard.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentAutoRPMappingAgentWinnerLastHeard.setDescription('The time (in seconds) that has past since an AutoRP mapping message was receieved from the winner AutoRP mapping agent. If the router itself is the winner, then this is set to 0.')
usdPimUnicastRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19), )
if mibBuilder.loadTexts: usdPimUnicastRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteTable.setDescription('The (conceptual) table listing all the unicast routes currently in use by PIM for diong RPF checking.')
usdPimUnicastRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryAddr"), (0, "Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryMask"))
if mibBuilder.loadTexts: usdPimUnicastRouteEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntry.setDescription('An entry (conceptual row) in the usdPimUnicastRouteTable.')
usdPimUnicastRouteEntryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdPimUnicastRouteEntryAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryAddr.setDescription('The address of route in use.')
usdPimUnicastRouteEntryMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdPimUnicastRouteEntryMask.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryMask.setDescription('The mask of route in use.')
usdPimUnicastRouteEntryRpfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryRpfNbr.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryRpfNbr.setDescription('The RPF neighbor (next-hop) to reach the route of this entry. It is set to 0.0.0.0 for directly connected routes.')
usdPimUnicastRouteEntryIifId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryIifId.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryIifId.setDescription('The interface index (next-hop) to reach the route of this entry.')
usdPimUnicastRouteEntryIifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryIifAddr.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryIifAddr.setDescription('The interface address (next-hop) to reach the route of this entry.')
usdPimUnicastRouteEntryPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryPref.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryPref.setDescription('The preference of the route of this entry.')
usdPimUnicastRouteEntryMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryMetric.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryMetric.setDescription('The metric of the route of this entry.')
usdPimUnicastRouteEntryPimType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 19, 1, 8), UsdPimType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdPimUnicastRouteEntryPimType.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteEntryPimType.setDescription('This object indicates whether the route specified in this entry is being used by sparse-mode and/or dense-mode PIM.')
usdPimSPTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 20), )
if mibBuilder.loadTexts: usdPimSPTThresholdTable.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresholdTable.setDescription('The (conceptual) table listing threshold values set for switching from shared tree to shortest path tree and vice versa for data forwarded by PIM sparse-mode.')
usdPimSPTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 20, 1), ).setIndexNames((0, "Unisphere-Data-PIM-MIB", "usdPimSPTThresholdAccessListName"))
if mibBuilder.loadTexts: usdPimSPTThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresholdEntry.setDescription('An entry (conceptual row) in the usdPimSPTThresholdTable.')
usdPimSPTThresholdAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: usdPimSPTThresholdAccessListName.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresholdAccessListName.setDescription('The name of the access list from which group ranges are picked up for setting SPT threshold in this entry.')
usdPimSPTThresHoldRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 20, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimSPTThresHoldRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresHoldRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
usdPimSPTThresholdKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 1, 1, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPimSPTThresholdKbps.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresholdKbps.setDescription('The value of SPT threshold in kilobits per second. Default value is 0.')
usdPimConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2))
usdPimCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 1))
usdPimGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2))
usdPimCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 1, 1)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimGeneralGroup"), ("Unisphere-Data-PIM-MIB", "usdPimInterfaceGroup"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteConfGroup"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopGroup"), ("Unisphere-Data-PIM-MIB", "usdPimRPSetGroup"), ("Unisphere-Data-PIM-MIB", "usdPimStaticRPConfGroup"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPConfGroup"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandGroup"), ("Unisphere-Data-PIM-MIB", "usdPimComponentGroup"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteGroup"), ("Unisphere-Data-PIM-MIB", "usdPimSPTThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimCompliance = usdPimCompliance.setStatus('current')
if mibBuilder.loadTexts: usdPimCompliance.setDescription('The compliance statement for entities which implement the Unisphere PIM MIB.')
usdPimGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 1)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimNumHelloRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimNumJoinPruneRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimNumAssertRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimNumGraftRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimNumGraftAckRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimNumHelloSent"), ("Unisphere-Data-PIM-MIB", "usdPimNumJoinPruneSent"), ("Unisphere-Data-PIM-MIB", "usdPimNumAssertSent"), ("Unisphere-Data-PIM-MIB", "usdPimNumGraftSent"), ("Unisphere-Data-PIM-MIB", "usdPimNumGraftAckSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimGeneralGroup = usdPimGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimGeneralGroup.setDescription('A collection of objects for managing general PIM capabilities in a Unisphere product.')
usdPimInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 2)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimIntfNumHelloRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumJoinPruneRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumAssertRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumGraftRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumGraftAckRcvd"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumHelloSent"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumJoinPruneSent"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumAssertSent"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumGraftSent"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumGraftAckSent"), ("Unisphere-Data-PIM-MIB", "usdPimIntfVersion"), ("Unisphere-Data-PIM-MIB", "usdPimIntfNumNbrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimInterfaceGroup = usdPimInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimInterfaceGroup.setDescription('A collection of objects for managing PIM interface capabilities in a Unisphere product.')
usdPimMRouteConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 3)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimMRouteUpstreamAssertTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteAssertMetric"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteAssertPref"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteAssertRPTBit"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteBits"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteRPAddrInUse"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteUpstreamNbr"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteIifAddr"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteIsWaitingToSwitchToSPT"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteEntryExpiryTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteSenderDRAddr"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteRouteAddr"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteRouteMask"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteGRPAddr"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteGRPMask"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteOtherProtoOifJoinTypeAll"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteOtherProtoOifJoinTypeG"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteOtherProtoOifJoinTypeSG"), ("Unisphere-Data-PIM-MIB", "usdPimMRoutePimType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimMRouteConfGroup = usdPimMRouteConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteConfGroup.setDescription('A collection of objects for managing PIM multicast route capabilities in a Unisphere product.')
usdPimMRouteNextHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 4)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopPruneReason"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopJoinTypeSSRP"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopJoinTypeG"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopJoinTypeSG"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasLGM"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasOifAW"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasOifSendAssert"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasOifRegister"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasOifBorderBit"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopHasOifNullEncapsBit"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopJoinEndTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopAssertEndTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopNextAssertTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopAssertSrcAddress"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopRegisterSuppressionTimer"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopPimType"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopPruneTimeLeft"), ("Unisphere-Data-PIM-MIB", "usdPimMRouteNextHopsendingIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimMRouteNextHopGroup = usdPimMRouteNextHopGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimMRouteNextHopGroup.setDescription('A collection of objects for managing PIM multicast route next hop capabilities in a Unisphere product.')
usdPimRPSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 5)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimRPSetPriority"), ("Unisphere-Data-PIM-MIB", "usdPimRPSetTypeInfo"), ("Unisphere-Data-PIM-MIB", "usdPimRPSetAccessListName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimRPSetGroup = usdPimRPSetGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimRPSetGroup.setDescription('A collection of objects for managing PIM RP-Set capabilities in a Unisphere product.')
usdPimStaticRPConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 6)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimStaticRPConfRowStatus"), ("Unisphere-Data-PIM-MIB", "usdPimStaticRPConfOverride"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimStaticRPConfGroup = usdPimStaticRPConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimStaticRPConfGroup.setDescription('A collection of objects for managing statically configured PIM RPs capabilities in a Unisphere product.')
usdPimAutoRPConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 7)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimAutoRPConfRowStatus"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPConfTTL"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPConfAncmntIntvl"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPConfifId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimAutoRPConfGroup = usdPimAutoRPConfGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPConfGroup.setDescription('A collection of objects for managing PIM AutoRP candidate advertisment agent RP capabilities in a Unisphere product.')
usdPimAutoRPCandGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 8)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandRowStatus"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandAccessListName"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandAutoRPTTL"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandAutoRPAncmntIntvl"), ("Unisphere-Data-PIM-MIB", "usdPimAutoRPCandIfId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimAutoRPCandGroup = usdPimAutoRPCandGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimAutoRPCandGroup.setDescription('A collection of objects for managing PIM AutoRP candidate advertising agent RP capabilities in a Unisphere product.')
usdPimComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 9)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingAgentRowStatus"), ("Unisphere-Data-PIM-MIB", "usdPimComponentConfiguredAutoRPMappingAgentIfId"), ("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingAgentInterval"), ("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingTTL"), ("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingAgentIntfAddr"), ("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingAgentWinnerAddr"), ("Unisphere-Data-PIM-MIB", "usdPimComponentAutoRPMappingAgentWinnerLastHeard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimComponentGroup = usdPimComponentGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimComponentGroup.setDescription('A collection of objects for managing PIM component (domain) capabilities in a Unisphere product.')
usdPimUnicastRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 10)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryRpfNbr"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryIifId"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryIifAddr"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryPref"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryMetric"), ("Unisphere-Data-PIM-MIB", "usdPimUnicastRouteEntryPimType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimUnicastRouteGroup = usdPimUnicastRouteGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimUnicastRouteGroup.setDescription('A collection of objects for managing PIM unicast route capabilities in a Unisphere product.')
usdPimSPTThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 43, 2, 2, 11)).setObjects(("Unisphere-Data-PIM-MIB", "usdPimSPTThresHoldRowStatus"), ("Unisphere-Data-PIM-MIB", "usdPimSPTThresholdKbps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPimSPTThresholdGroup = usdPimSPTThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: usdPimSPTThresholdGroup.setDescription('A collection of objects for managing PIM shortest path tree threshold capabilities in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-PIM-MIB", usdPimMRouteRouteMask=usdPimMRouteRouteMask, usdPimIntfVersion=usdPimIntfVersion, usdPimAutoRPCandAutoRPAncmntIntvl=usdPimAutoRPCandAutoRPAncmntIntvl, usdPimAutoRPConfAncmntIntvl=usdPimAutoRPConfAncmntIntvl, usdPimRPSetTypeInfo=usdPimRPSetTypeInfo, usdPimMRouteNextHopJoinTypeSG=usdPimMRouteNextHopJoinTypeSG, usdPimMRoutePimType=usdPimMRoutePimType, usdPimUnicastRouteTable=usdPimUnicastRouteTable, usdPimStaticRPConfRowStatus=usdPimStaticRPConfRowStatus, usdPimComponentAutoRPMappingAgentWinnerAddr=usdPimComponentAutoRPMappingAgentWinnerAddr, usdPimIntfNumAssertSent=usdPimIntfNumAssertSent, usdPimComponentAutoRPMappingAgentIntfAddr=usdPimComponentAutoRPMappingAgentIntfAddr, usdPimNumJoinPruneSent=usdPimNumJoinPruneSent, usdPimCompliances=usdPimCompliances, usdPimUnicastRouteEntryAddr=usdPimUnicastRouteEntryAddr, usdPimGlobal=usdPimGlobal, usdPimAutoRPConfifId=usdPimAutoRPConfifId, usdPimComponentEntry=usdPimComponentEntry, usdPimMRouteTable=usdPimMRouteTable, usdPimMIBObjects=usdPimMIBObjects, usdPimMRouteRPAddrInUse=usdPimMRouteRPAddrInUse, usdPimSPTThresholdEntry=usdPimSPTThresholdEntry, usdPimIntfNumGraftRcvd=usdPimIntfNumGraftRcvd, usdPimSPTThresholdAccessListName=usdPimSPTThresholdAccessListName, usdPimAutoRPCandEntry=usdPimAutoRPCandEntry, usdPimComponentAutoRPMappingAgentWinnerLastHeard=usdPimComponentAutoRPMappingAgentWinnerLastHeard, usdPimMRouteGRPMask=usdPimMRouteGRPMask, usdPimMRouteNextHopJoinTypeSSRP=usdPimMRouteNextHopJoinTypeSSRP, usdPimComponentIndex=usdPimComponentIndex, usdPimMRouteNextHopAddress=usdPimMRouteNextHopAddress, usdPimAutoRPCandTable=usdPimAutoRPCandTable, usdPimRPSetTable=usdPimRPSetTable, usdPimIntfNumGraftAckSent=usdPimIntfNumGraftAckSent, usdPimStaticRPConfTable=usdPimStaticRPConfTable, usdPimUnicastRouteEntryMask=usdPimUnicastRouteEntryMask, usdPimMRouteIifAddr=usdPimMRouteIifAddr, usdPimAutoRPCandIfId=usdPimAutoRPCandIfId, usdPimAutoRPConfGroup=usdPimAutoRPConfGroup, usdPimMRouteNextHopNextAssertTimer=usdPimMRouteNextHopNextAssertTimer, usdPimAutoRPCandRPAddr=usdPimAutoRPCandRPAddr, usdPimComponentAutoRPMappingTTL=usdPimComponentAutoRPMappingTTL, usdPimMRouteConfGroup=usdPimMRouteConfGroup, usdPimInterfaceTable=usdPimInterfaceTable, usdPimAutoRPConfComponentIndex=usdPimAutoRPConfComponentIndex, usdPimSPTThresHoldRowStatus=usdPimSPTThresHoldRowStatus, usdPimMRouteOtherProtoOifJoinTypeSG=usdPimMRouteOtherProtoOifJoinTypeSG, usdPimIntfNumHelloRcvd=usdPimIntfNumHelloRcvd, usdPimMRouteOtherProtoOifJoinTypeG=usdPimMRouteOtherProtoOifJoinTypeG, usdPimNumHelloSent=usdPimNumHelloSent, usdPimStaticRPConfEntry=usdPimStaticRPConfEntry, usdPimStaticRPConfComponentIndex=usdPimStaticRPConfComponentIndex, usdPimConformance=usdPimConformance, usdPimUnicastRouteEntryPimType=usdPimUnicastRouteEntryPimType, usdPimNumGraftSent=usdPimNumGraftSent, usdPimMRouteNextHopSrcMask=usdPimMRouteNextHopSrcMask, usdPimAutoRPCandAccessListName=usdPimAutoRPCandAccessListName, usdPimInterfaceGroup=usdPimInterfaceGroup, usdPimMRouteUpstreamNbr=usdPimMRouteUpstreamNbr, usdPimUnicastRouteEntryPref=usdPimUnicastRouteEntryPref, usdPimNumJoinPruneRcvd=usdPimNumJoinPruneRcvd, usdPimMRouteGRPAddr=usdPimMRouteGRPAddr, usdPimTraps=usdPimTraps, usdPimIntfNumNbrs=usdPimIntfNumNbrs, usdPimSPTThresholdTable=usdPimSPTThresholdTable, usdPimMRouteNextHopGroup=usdPimMRouteNextHopGroup, usdPimNumGraftAckRcvd=usdPimNumGraftAckRcvd, usdPimComponentAutoRPMappingAgentInterval=usdPimComponentAutoRPMappingAgentInterval, usdPimRPSetAccessListName=usdPimRPSetAccessListName, usdPimSPTThresholdGroup=usdPimSPTThresholdGroup, usdPimComponentAutoRPMappingAgentRowStatus=usdPimComponentAutoRPMappingAgentRowStatus, usdPimIntfNumJoinPruneRcvd=usdPimIntfNumJoinPruneRcvd, usdPimMRouteSource=usdPimMRouteSource, usdPimMRouteNextHopJoinTypeG=usdPimMRouteNextHopJoinTypeG, usdPimAutoRPCandGroupAddr=usdPimAutoRPCandGroupAddr, usdPimComponentConfiguredAutoRPMappingAgentIfId=usdPimComponentConfiguredAutoRPMappingAgentIfId, usdPimComponentTable=usdPimComponentTable, usdPimMRouteRPAddress=usdPimMRouteRPAddress, usdPimMRouteNextHopPimType=usdPimMRouteNextHopPimType, usdPimAutoRPCandRowStatus=usdPimAutoRPCandRowStatus, usdPimMRouteGroup=usdPimMRouteGroup, usdPimMRouteIsWaitingToSwitchToSPT=usdPimMRouteIsWaitingToSwitchToSPT, usdPimMRouteRouteAddr=usdPimMRouteRouteAddr, usdPimMRouteEntryExpiryTimer=usdPimMRouteEntryExpiryTimer, usdPimUnicastRouteEntryIifAddr=usdPimUnicastRouteEntryIifAddr, usdPimAutoRPCandAutoRPTTL=usdPimAutoRPCandAutoRPTTL, usdPimAutoRPConfTTL=usdPimAutoRPConfTTL, usdPimMRouteNextHopPruneTimeLeft=usdPimMRouteNextHopPruneTimeLeft, usdPimAutoRPConfGroupAccessListName=usdPimAutoRPConfGroupAccessListName, usdPimRPSetGroup=usdPimRPSetGroup, usdPimMRouteNextHopEntry=usdPimMRouteNextHopEntry, usdPimMRouteNextHopAssertSrcAddress=usdPimMRouteNextHopAssertSrcAddress, usdPimMRouteNextHopHasOifAW=usdPimMRouteNextHopHasOifAW, usdPimMIB=usdPimMIB, usdPimMRouteNextHopHasOifRegister=usdPimMRouteNextHopHasOifRegister, usdPimMRouteSourceMask=usdPimMRouteSourceMask, usdPimNumAssertRcvd=usdPimNumAssertRcvd, usdPimMRouteNextHopHasLGM=usdPimMRouteNextHopHasLGM, usdPimMRouteEntry=usdPimMRouteEntry, usdPimRPSetEntry=usdPimRPSetEntry, usdPimMRouteNextHopHasOifBorderBit=usdPimMRouteNextHopHasOifBorderBit, usdPimMRouteAssertMetric=usdPimMRouteAssertMetric, usdPimMRouteNextHopJoinEndTimer=usdPimMRouteNextHopJoinEndTimer, usdPimMRouteNextHopHasOifNullEncapsBit=usdPimMRouteNextHopHasOifNullEncapsBit, usdPimMRouteAssertRPTBit=usdPimMRouteAssertRPTBit, usdPimMRouteOtherProtoOifJoinTypeAll=usdPimMRouteOtherProtoOifJoinTypeAll, usdPimStaticRPConfAccessListName=usdPimStaticRPConfAccessListName, usdPimGeneralGroup=usdPimGeneralGroup, usdPimUnicastRouteEntryIifId=usdPimUnicastRouteEntryIifId, usdPimUnicastRouteGroup=usdPimUnicastRouteGroup, UsdPimType=UsdPimType, usdPimIntfNumGraftAckRcvd=usdPimIntfNumGraftAckRcvd, usdPimNumGraftRcvd=usdPimNumGraftRcvd, usdPimMRouteNextHopsendingIpAddress=usdPimMRouteNextHopsendingIpAddress, usdPimMRouteNextHopIfId=usdPimMRouteNextHopIfId, usdPimIntfNumHelloSent=usdPimIntfNumHelloSent, usdPimMRouteNextHopGroupAddr=usdPimMRouteNextHopGroupAddr, usdPimIntfNumAssertRcvd=usdPimIntfNumAssertRcvd, usdPimMRouteNextHopRPAddr=usdPimMRouteNextHopRPAddr, usdPimGroups=usdPimGroups, usdPimMRouteNextHopTable=usdPimMRouteNextHopTable, usdPimRPSetPriority=usdPimRPSetPriority, usdPimStaticRPConfOverride=usdPimStaticRPConfOverride, usdPimNumHelloRcvd=usdPimNumHelloRcvd, usdPimMRouteBits=usdPimMRouteBits, usdPimAutoRPConfRowStatus=usdPimAutoRPConfRowStatus, PYSNMP_MODULE_ID=usdPimMIB, usdPimCompliance=usdPimCompliance, usdPimMRouteNextHopSrcAddr=usdPimMRouteNextHopSrcAddr, usdPimInterfaceEntry=usdPimInterfaceEntry, usdPimNumGraftAckSent=usdPimNumGraftAckSent, usdPimComponentGroup=usdPimComponentGroup, usdPimMRouteNextHopHasOifSendAssert=usdPimMRouteNextHopHasOifSendAssert, usdPimUnicastRouteEntryMetric=usdPimUnicastRouteEntryMetric, usdPimStaticRPConfRPAddr=usdPimStaticRPConfRPAddr, usdPimUnicastRouteEntry=usdPimUnicastRouteEntry, usdPimMRouteNextHopAssertEndTimer=usdPimMRouteNextHopAssertEndTimer, usdPimAutoRPConfCandRPAddr=usdPimAutoRPConfCandRPAddr, usdPimIntfNumJoinPruneSent=usdPimIntfNumJoinPruneSent, usdPimMRouteUpstreamAssertTimer=usdPimMRouteUpstreamAssertTimer, usdPimAutoRPConfTable=usdPimAutoRPConfTable, usdPimAutoRPCandComponentIndex=usdPimAutoRPCandComponentIndex, usdPimNumAssertSent=usdPimNumAssertSent, usdPimMRouteNextHopPruneReason=usdPimMRouteNextHopPruneReason, usdPimAutoRPCandGroup=usdPimAutoRPCandGroup, usdPimMRouteSenderDRAddr=usdPimMRouteSenderDRAddr, usdPimMRouteAssertPref=usdPimMRouteAssertPref, usdPimMRouteNextHopRegisterSuppressionTimer=usdPimMRouteNextHopRegisterSuppressionTimer, usdPimAutoRPConfEntry=usdPimAutoRPConfEntry, usdPimUnicastRouteEntryRpfNbr=usdPimUnicastRouteEntryRpfNbr, usdPimSPTThresholdKbps=usdPimSPTThresholdKbps, usdPimStaticRPConfGroup=usdPimStaticRPConfGroup, usdPimAutoRPCandGroupMask=usdPimAutoRPCandGroupMask, usdPimIntfNumGraftSent=usdPimIntfNumGraftSent)
