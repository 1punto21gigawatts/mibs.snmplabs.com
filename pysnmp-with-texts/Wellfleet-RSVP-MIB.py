#
# PySNMP MIB module Wellfleet-RSVP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-RSVP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, Integer32, Counter64, NotificationType, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, IpAddress, ModuleIdentity, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Integer32", "Counter64", "NotificationType", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfReservationProtocolGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfReservationProtocolGroup")
wfRsvpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1))
wfRsvp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1))
wfRsvpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete Rsvp.')
wfRsvpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable Rsvp.')
wfRsvpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpState.setDescription('The current state of Rsvp.')
wfRsvpSoloistSlots = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpSoloistSlots.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSoloistSlots.setDescription('Slot mask for which slot(s) RSVP Soloist is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN.')
wfRsvpInfoLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpInfoLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpInfoLogFilter.setDescription('Turn RSVP log ON or OFF for RSVP informational and warning messages. The bit position is used to represent a RSVP module: RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfRsvpDebugLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpDebugLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpDebugLogFilter.setDescription('Turn RSVP log ON or OFF for RSVP debugging messages. The bit position is used to represent a RSVP module: RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfRsvpTraceLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpTraceLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpTraceLogFilter.setDescription('Turn RSVP log ON or OFF for RSVP trace messages. The bit position is used to represent a RSVP module: RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfRsvpTotalSenders = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpTotalSenders.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpTotalSenders.setDescription('The total number of Sender (PATH) states in the router.')
wfRsvpTotalReservations = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpTotalReservations.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpTotalReservations.setDescription('The total number of Reservation (RESV) states in the router.')
wfRsvpTotalReserved = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpTotalReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpTotalReserved.setDescription('The total number of of successful reservations.')
wfRsvpCurrentSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpCurrentSoloistSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpCurrentSoloistSlot.setDescription('The Current RSVP Soloist slot. Slots can be 1-14. Default is zero.')
wfRsvpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wfRsvpSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionTable.setDescription('Statistics concerning the sessions seen by a given system.')
wfRsvpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpSessionDestAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSessionProtocol"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSessionPort"))
if mibBuilder.loadTexts: wfRsvpSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionEntry.setDescription('Statistics concerning a single RSVP session seen by a given system.')
wfRsvpSessionDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionDestAddr.setDescription("The destination address used by all senders in this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSessionDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionDestAddrLength.setDescription("The CIDR prefix length of the session address, which is 32 for IP4 host and multicast ad- dresses. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by rsvpSen- derProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSessionSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionSenders.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionSenders.setDescription('The number of senders currently known to be part of this session.')
wfRsvpSessionReceivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionReceivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionReceivers.setDescription('The number of reservations being requested of this system for this session.')
wfRsvpSessionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 2, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSessionRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSessionRequests.setDescription('The number of reservation requests this system is sending upstream for this session.')
wfRsvpSenderTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wfRsvpSenderTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTable.setDescription('Information describing the state information displayed by senders in PATH messages.')
wfRsvpSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpSenderDestAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSenderProtocol"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSenderDestPort"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSenderAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpSenderPort"))
if mibBuilder.loadTexts: wfRsvpSenderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderEntry.setDescription("Information describing the state information displayed by a single sender's PATH message.")
wfRsvpSenderDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderDestAddr.setDescription("The destination IP address used by all senders in this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAddr.setDescription("The source address used by this sender in this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderDestAddrLength.setDescription("The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderDestPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by rsvpSen- derProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderPort.setDescription("The UDP or TCP port number used as a source port for this sender in this session. If the IP protocol in use, specified by rsvpSenderPro- tocol is 50 (ESP) or 51 (AH), this represents a generalized port identifier (GPI). A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpSenderHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderHopAddr.setDescription('The address used by the previous RSVP hop (which may be the original sender).')
wfRsvpSenderHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderHopLih.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderHopLih.setDescription('The Logical Interface Handle used by the pre- vious RSVP hop (which may be the original sender).')
wfRsvpSenderInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderInterface.setDescription('The ifIndex value of the interface on which this PATH message was most recently received.')
wfRsvpSenderTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderTSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as rsvpSenderTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed rsvpSen- derTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower. UNITS, bits per second")
wfRsvpSenderTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderTSpecPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue. UNITS, bits per second")
wfRsvpSenderTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderTSpecBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTSpecBurst.setDescription('The size of the largest burst expected from the sender at a time. UNITS, bytes')
wfRsvpSenderTSpecMinTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderTSpecMinTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTSpecMinTU.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
wfRsvpSenderTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderTSpecMaxTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderTSpecMaxTU.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
wfRsvpSenderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderInterval.setDescription('The interval between refresh messages as ad- vertised by the Previous Hop. UNITS milliseconds')
wfRsvpSenderRSVPHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderRSVPHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderRSVPHop.setDescription('If TRUE, the node believes that the previous IP hop is an RSVP hop. If FALSE, the node be- lieves that the previous IP hop may not be an RSVP hop.')
wfRsvpSenderLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderLastChange.setDescription('The time of the last change in this PATH mes- sage; This is either the first time it was re- ceived or the time of the most recent change in parameters.')
wfRsvpSenderPSBTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderPSBTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderPSBTimeout.setDescription("The remaining lifetime of this sender's PSB.")
wfRsvpSenderPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfRsvpSenderAdspecBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecBreak.setDescription('The global break bit general characterization parameter from the ADSPEC. If TRUE, at least one non-IS hop was detected in the path. If FALSE, no non-IS hops were detected.')
wfRsvpSenderAdspecHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecHopCount.setDescription('The hop count general characterization parame- ter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present')
wfRsvpSenderAdspecPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecPathBw.setDescription('The path bandwidth estimate general character- ization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present UNITS, bits per second')
wfRsvpSenderAdspecMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecMinLatency.setDescription('The minimum path latency general characteriza- tion parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present UNITS, microseconds')
wfRsvpSenderAdspecMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecMtu.setDescription('The composed Maximum Transmission Unit general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present UNITS, bytes')
wfRsvpSenderAdspecGSSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSSvc.setDescription('If TRUE, the ADSPEC contains a Guaranteed Ser- vice fragment. If FALSE or noValue, the ADSPEC does not contain a Guaranteed Service fragment.')
wfRsvpSenderAdspecGSBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("flase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSBreak.setDescription("If TRUE, the Guaranteed Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the guaranteed service. If FALSE, and rsvpSen- derAdspecGSSvc is TRUE, the 'break' bit is not set. If wfRsvpSenderAdspecGuaranteedSvc is FALSE, this returns FALSE or noSuchValue.")
wfRsvpSenderAdspecGSCtot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSCtot.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSCtot.setDescription("If wfRsvpSenderAdspecGSSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'C' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes")
wfRsvpSenderAdspecGSDtot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSDtot.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSDtot.setDescription("If wfRsvpSenderAdspecGSSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'D' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds")
wfRsvpSenderAdspecGSCsum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSCsum.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSCsum.setDescription("If wfRsvpSenderAdspecGSSvc is TRUE, this is the composed value for the guaranteed ser- vice 'C' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes")
wfRsvpSenderAdspecGSDsum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSDsum.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSDsum.setDescription("If wfRsvpSenderAdspecGSSvc is TRUE, this is the composed value for the guaranteed ser- vice 'D' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds")
wfRsvpSenderAdspecGSHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSHopCount.setDescription('If wfRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue.')
wfRsvpSenderAdspecGSPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSPathBw.setDescription('If wfRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bits per second')
wfRsvpSenderAdspecGSMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSMinLatency.setDescription('If wfRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds')
wfRsvpSenderAdspecGSMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecGSMtu.setDescription('If wfRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes')
wfRsvpSenderAdspecCLSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLSvc.setDescription('If TRUE, the ADSPEC contains a Controlled Load Service fragment. If FALSE, the ADSPEC does not contain a Controlled Load Service frag- ment.')
wfRsvpSenderAdspecCLBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLBreak.setDescription("If TRUE, the Controlled Load Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the controlled load service. If FALSE, and wfRsvpSenderAdspecCLSvc is TRUE, the 'break' bit is not set. If wfRsvpSenderAdspecCLSvc is FALSE, this returns FALSE or noSuchValue.")
wfRsvpSenderAdspecCLHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLHopCount.setDescription('If wfRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue.')
wfRsvpSenderAdspecCLPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLPathBw.setDescription('If wfRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, bits per second')
wfRsvpSenderAdspecCLMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLMinLatency.setDescription('If wfRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds')
wfRsvpSenderAdspecCLMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderAdspecCLMtu.setDescription('If wfRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes')
wfRsvpSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpSenderStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpSenderStatus.setDescription("'valid' for all active PATH messages.")
wfRsvpResvTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wfRsvpResvTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTable.setDescription('Information describing the state information displayed by receivers in RESV messages.')
wfRsvpResvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpResvDestAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvProtocol"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvDestPort"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvSenderAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvPort"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvInterface"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvHopAddr"))
if mibBuilder.loadTexts: wfRsvpResvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvEntry.setDescription("Information describing the state information displayed by a single receiver's RESV message concerning a single sender.")
wfRsvpResvDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvDestAddr.setDescription("The destination address used by all senders in this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvSenderAddr.setDescription("The source address of the sender selected by this reservation. The value of all zeroes in- dicates 'all senders'. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvDestAddrLength.setDescription("The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvSenderAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvDestPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by wfRsvpResvProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvPort.setDescription("The UDP or TCP port number used as a source port for this sender in this session. If the IP protocol in use, specified by wfRsvpResvProto- col is 50 (ESP) or 51 (AH), this represents a generalized port identifier (GPI). A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvHopAddr.setDescription('The address used by the next RSVP hop (which may be the ultimate receiver).')
wfRsvpResvHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvHopLih.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvHopLih.setDescription('The Logical Interface Handle received from the previous RSVP hop (which may be the ultimate receiver).')
wfRsvpResvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvInterface.setDescription('The ifIndex value of the interface on which this RESV message was most recently received.')
wfRsvpResvService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("controlledDelay", 1), ("guaranteedDelay", 2), ("predictive", 3), ("controlledLoad", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvService.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvService.setDescription('The QoS Service classification requested by the receiver.')
wfRsvpResvTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as wfRsvpResvTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed wfRsvpResvTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower. UNITS, bits per second")
wfRsvpResvTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue. UNITS, bits per second")
wfRsvpResvTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecBurst.setDescription("The size of the largest burst expected from the sender at a time. If this is less than the sender's advertised burst size, the receiver is asking the network to provide flow pacing beyond what would be provided under normal circumstances. Such pac- ing is at the network's option. UNITS, bytes")
wfRsvpResvTSpecMinTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecMinTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecMinTU.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
wfRsvpResvTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecMaxTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecMaxTU.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
wfRsvpResvTSpecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvTSpecLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvTSpecLevel.setDescription('If the service is predictive or controlled- delay, this is the service level that is being requested. Otherwise, it is zero, or the agent may return noSuchValue.')
wfRsvpResvRSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvRSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvRSpecRate.setDescription('If the requested service is Guaranteed, as specified by wfRsvpResvService, this is the clearing rate that is being requested. Other- wise, it is zero, or the agent may return noSuchValue. UNITS, bits per second')
wfRsvpResvRSpecSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvRSpecSlack.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvRSpecSlack.setDescription('If the requested service is Guaranteed, as specified by wfRsvpResvService, this is the delay slack. Otherwise, it is zero, or the agent may return noSuchValue.UNITS, microseconds')
wfRsvpResvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvInterval.setDescription('The interval between refresh messages as ad- vertised by the Next Hop. UNITS milliseconds')
wfRsvpResvScope = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvScope.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvScope.setDescription('The contents of the scope object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length. If the length is non-zero, this contains a series of IP4 or IP6 addresses.')
wfRsvpResvShared = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvShared.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvShared.setDescription('If TRUE, a reservation shared among senders is requested. If FALSE, a reservation specific to this sender is requested.')
wfRsvpResvExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvExplicit.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvExplicit.setDescription('If TRUE, individual senders are listed using Filter Specifications. If FALSE, all senders are implicitly selected. The Scope Object will contain a list of senders that need to receive this reservation request for the purpose of routing the RESV message.')
wfRsvpResvRSVPHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvRSVPHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvRSVPHop.setDescription('If TRUE, the node believes that the previous IP hop is an RSVP hop. If FALSE, the node be- lieves that the previous IP hop may not be an RSVP hop.')
wfRsvpResvLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvLastChange.setDescription('The time of the last change in this reserva- tion request; This is either the first time it was received or the time of the most recent change in parameters.')
wfRsvpResvRSBTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvRSBTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvRSBTimeout.setDescription("The remaining lifetime of this reservation's RSB.")
wfRsvpResvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfRsvpResvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvStatus.setDescription("'valid' for all active RESV messages.")
wfRsvpResvFwdTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5), )
if mibBuilder.loadTexts: wfRsvpResvFwdTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTable.setDescription('Information describing the state information displayed upstream in RESV messages.')
wfRsvpResvFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdDestAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdProtocol"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdDestPort"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdSenderAddr"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdPort"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdInterface"), (0, "Wellfleet-RSVP-MIB", "wfRsvpResvFwdHopAddr"))
if mibBuilder.loadTexts: wfRsvpResvFwdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdEntry.setDescription('Information describing the state information displayed upstream in an RESV message concern- ing a single sender.')
wfRsvpResvFwdDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdDestAddr.setDescription("The destination address used by all senders in this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdSenderAddr.setDescription("The source address of the sender selected by this reservation. The value of all zeroes in- dicates 'all senders'. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdDestAddrLength.setDescription("The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdSenderAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdDestPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by wfRsvpResvFwdProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdPort.setDescription("The UDP or TCP port number used as a source port for this sender in this session. If the IP protocol in use, specified by wfRsvpResvFwdProto- col is 50 (ESP) or 51 (AH), this represents a generalized port identifier (GPI). A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpResvFwdHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdHopAddr.setDescription('The address used by the next RSVP hop (which may be the ultimate receiver).')
wfRsvpResvFwdHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdHopLih.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdHopLih.setDescription('The Logical Interface Handle received from the previous RSVP hop (which may be the ultimate receiver).')
wfRsvpResvFwdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdInterface.setDescription('The ifIndex value of the interface on which this RESV message was most recently received.')
wfRsvpResvFwdService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("controlledDelay", 1), ("guaranteedDelay", 2), ("predictive", 3), ("controlledLoad", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdService.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdService.setDescription('The QoS Service classification requested by the receiver.')
wfRsvpResvFwdTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as wfRsvpResvFwdTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed wfRsvpResvFwdTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower. UNITS, bits per second")
wfRsvpResvFwdTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue. UNITS, bits per second")
wfRsvpResvFwdTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecBurst.setDescription("The size of the largest burst expected from the sender at a time. If this is less than the sender's advertised burst size, the receiver is asking the network to provide flow pacing beyond what would be provided under normal circumstances. Such pac- ing is at the network's option. UNITS, bytes")
wfRsvpResvFwdTSpecMinTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecMinTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecMinTU.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
wfRsvpResvFwdTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecMaxTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecMaxTU.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
wfRsvpResvFwdTSpecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdTSpecLevel.setDescription('If the service is predictive or controlled- delay, this is the service level that is being requested. Otherwise, it is zero, or the agent may return noSuchValue.')
wfRsvpResvFwdRSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdRSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdRSpecRate.setDescription('If the requested service is Guaranteed, as specified by wfRsvpResvFwdService, this is the clearing rate that is being requested. Other- wise, it is zero, or the agent may return noSuchValue. UNITS, bits per second')
wfRsvpResvFwdRSpecSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdRSpecSlack.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdRSpecSlack.setDescription('If the requested service is Guaranteed, as specified by wfRsvpResvFwdService, this is the delay slack. Otherwise, it is zero, or the agent may return noSuchValue.UNITS, microseconds')
wfRsvpResvFwdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdInterval.setDescription('The interval between refresh messages as ad- vertised by the Next Hop.')
wfRsvpResvFwdScope = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdScope.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdScope.setDescription('The contents of the scope object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length. If the length is non-zero, this contains a series of IP4 or IP6 addresses.')
wfRsvpResvFwdShared = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdShared.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdShared.setDescription('If TRUE, a reservation shared among senders is requested. If FALSE, a reservation specific to this sender is requested.')
wfRsvpResvFwdExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdExplicit.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdExplicit.setDescription('If TRUE, individual senders are listed using Filter Specifications. If FALSE, all senders are implicitly selected. The Scope Object will contain a list of senders that need to receive this reservation request for the purpose of routing the RESV message.')
wfRsvpResvFwdRSVPHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdRSVPHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdRSVPHop.setDescription('If TRUE, the node believes that the previous IP hop is an RSVP hop. If FALSE, the node be- lieves that the previous IP hop may not be an RSVP hop.')
wfRsvpResvFwdLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdLastChange.setDescription('The time of the last change in this reserva- tion request; This is either the first time it was received or the time of the most recent change in parameters.')
wfRsvpResvFwdPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfRsvpResvFwdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpResvFwdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpResvFwdStatus.setDescription("'valid' for all active RESV messages. This object may be used to install static RESV in- formation or delete RESV information.")
wfRsvpIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6), )
if mibBuilder.loadTexts: wfRsvpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfTable.setDescription('List of configured RSVP interface.')
wfRsvpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpIfCct"))
if mibBuilder.loadTexts: wfRsvpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfEntry.setDescription('A description of an RSVP interface')
wfRsvpIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfDelete.setDescription('Indicates whether this RSVP If record is to be deleted or created')
wfRsvpIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfEnable.setDescription('Indicates whether this RSVP intf record is to be enabled or disabled')
wfRsvpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfState.setDescription('The current state of the RSVP interface. Invalid indicates an error in processing the cfg record')
wfRsvpIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfCct.setDescription('The circuit number of this RSVP interface')
wfRsvpIfUdpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpIfUdpNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfUdpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP UDP Encapsulation.')
wfRsvpIfIpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpIfIpNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfIpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP IP Encapsulation.')
wfRsvpIfNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpIfNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfNbrs.setDescription('The number of neighbors currently perceived; this will exceed wfRsvpIfIpNbrs + wfRsvpIfUdpNbrs by the number of neighbors using both encapsulations.')
wfRsvpIfRefreshBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfRefreshBlockadeMultiple.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfRefreshBlockadeMultiple.setDescription("The value of the RSVP value 'Kb', Which is the minimum number of refresh intervals that blockade state will last once entered.")
wfRsvpIfRefreshMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfRefreshMultiple.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfRefreshMultiple.setDescription("The value of the RSVP value 'K', which is the number of refresh intervals which must elapse (minimum) before a PATH or RESV message which is not being refreshed will be aged out.")
wfRsvpIfTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfTTL.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfTTL.setDescription('The value of SEND_TTL used on this interface for messages this node originates. If set to zero, the node determines the TTL via other means.')
wfRsvpIfRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2147483647)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfRefreshInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfRefreshInterval.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given PATH or RESV message on an interface. UNITS milliseconds")
wfRsvpIfRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 12), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfRouteDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfRouteDelay.setDescription('The approximate period from the time a route is changed to the time a resulting message ap- pears on the interface. UNITS hundredths of a second')
wfRsvpIfUdpRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRsvpIfUdpRequired.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpIfUdpRequired.setDescription('If TRUE, manual configuration forcees the use of UDP ncapsulation on the interface. If FALSE, UDP encapsulation is only used if wfrsvpIfUdpNbrs is not zero.')
wfRsvpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7), )
if mibBuilder.loadTexts: wfRsvpNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrTable.setDescription('Information describing the Neighbors of an RSVP system.')
wfRsvpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfRsvpNbrCct"), (0, "Wellfleet-RSVP-MIB", "wfRsvpNbrAddress"))
if mibBuilder.loadTexts: wfRsvpNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrEntry.setDescription('Information describing a single RSVP Neigh- bor.')
wfRsvpNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpNbrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrAddress.setDescription("The IP4 or IP6 Address used by this neighbor. This object may not be changed when the value of the RowStatus object is 'valid'.")
wfRsvpNbrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("udp", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpNbrProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrProtocol.setDescription('The encapsulation being used by this neigh- bor.')
wfRsvpNbrCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpNbrCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrCct.setDescription('The circuit number of the interface where the neighbor is learned')
wfRsvpNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfRsvpNbrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfRsvpNbrStatus.setDescription("'valid' for all neighbors. This object may be used to configure neighbors. In the presence of configured neighbors, the implementation may (but is not required to) limit the set of valid neighbors to those configured.")
wfSRsvp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8))
wfSRsvpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete Static Rsvp.')
wfSRsvpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable Static Rsvp.')
wfSRsvpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpState.setDescription('The current state of Static Rsvp.')
wfSRsvpSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSoloistSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSoloistSlot.setDescription('Slot for which slot Static RSVP Soloist is eligible to run on. Slots can be 1-14.')
wfSRsvpInfoLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpInfoLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpInfoLogFilter.setDescription('Turn Static RSVP log ON or OFF for informational and warning messages. There is only RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfSRsvpDebugLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpDebugLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpDebugLogFilter.setDescription('Turn Static RSVP log ON or OFF for debugging messages. The bit position is used to represent a RSVP module: RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfSRsvpTraceLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpTraceLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpTraceLogFilter.setDescription('Turn RSVP log ON or OFF for RSVP trace messages. The bit position is used to represent a RSVP module: RSVP_LOG_RIF_PROCESSING 0x0001 - RIF processing. RSVP_LOG_SOLO_PROCESSING 0x0002 - SOLO processing. RSVP_LOG_ROUTE_INTF_PROCESSING 0x0004 - ROUTE interface processing. RSVP_LOG_MERGE_PROCESSING 0x0008 - MERGE processing. RSVP_LOG_DB_PROCESSING 0x0010 - database access processing. RSVP_LOG_INTSERV_INTF_PROCESSING 0x0020 - INTSERV interface processing. RSVP_LOG_CRM_INTF_PROCESSING 0x0040 - CRM interface processing. RSVP_LOG_STATIC_RSVP 0x0080 - STATIC RSVP processing. RSVP_LOG_CONTROL_PROCESSING 0x0100 - CONTROL processing. RSVP_LOG_MAP_VEC_PROCESSING 0x0200 - MAP VECTOR processing. RSVP_LOG_PROXY_PROCESSING 0x0400 - RSVP MIB PROXY processing. RSVP_LOG_REFRESH_PROCESSING 0x0800 - Path/Resv Refresh processing.')
wfSRsvpRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 2147483647)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpRefreshInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpRefreshInterval.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given STATIC PATH or STATIC RESV message. UNITS milliseconds")
wfSRsvpTotalSenders = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpTotalSenders.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpTotalSenders.setDescription('The total number of Static Sender (PATH) states in the router.')
wfSRsvpTotalReservations = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 8, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpTotalReservations.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpTotalReservations.setDescription('The total number of Static Reservation (RESV) states in the router.')
wfSRsvpSenderTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9), )
if mibBuilder.loadTexts: wfSRsvpSenderTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTable.setDescription('Information describing the state information displayed by senders statically configured.')
wfSRsvpSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfSRsvpSenderNumber"))
if mibBuilder.loadTexts: wfSRsvpSenderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderEntry.setDescription('Information describing the state information used to create a sender thru configuration.')
wfSRsvpSenderCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderCreate.setDescription('Whether to Delete this sender PSB')
wfSRsvpSenderEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderEnable.setDescription('Whether to Disable this Sender PSB')
wfSRsvpSenderStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("notpres", 3))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpSenderStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderStatus.setDescription('Whether this Static PSB is valid or not')
wfSRsvpSenderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpSenderNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderNumber.setDescription('The number of this static sender. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
wfSRsvpSenderDestReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderDestReplicate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderDestReplicate.setDescription('Number of sessions for which this static path state should be replicated. For each replication, wfSRsvpSenderDestAddr will be incremented by one.')
wfSRsvpSenderReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderReplicate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderReplicate.setDescription('Number of senders for which this static path state should be replicated. For each replication, wfSRsvpSenderAddr will be incremented by one.')
wfSRsvpSenderIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderIntegrity.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderIntegrity.setDescription('The contents of the integrity object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfSRsvpSenderDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderDestAddr.setDescription("The destination IP address used by all senders in this session. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAddr.setDescription("The source address used by this sender in this session. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderDestAddrLength.setDescription("The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderDestPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by rsvpSen- derProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderPort.setDescription("The UDP or TCP port number used as a source port for this sender in this session. If the IP protocol in use, specified by RsvpStaticSenderPro- tocol is 50 (ESP) or 51 (AH), this represents a generalized port identifier (GPI). A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpSenderHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderHopAddr.setDescription('The address used by the previous RSVP hop (which may be the original sender).')
wfSRsvpSenderHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderHopLih.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderHopLih.setDescription('The Logical Interface Handle used by the pre- vious RSVP hop (which may be the original sender).')
wfSRsvpSenderInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderInterface.setDescription('The ifIndex value of the interface on which this PATH message was most recently received.')
wfSRsvpSenderTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTimeValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTimeValue.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given PATH or RESV message on an interface. UNITS milliseconds")
wfSRsvpSenderTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as RsvpStaticSenderTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed rsvpSen- derTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower. UNITS, bits per second")
wfSRsvpSenderTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTSpecPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue. UNITS, bits per second")
wfSRsvpSenderTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTSpecBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTSpecBurst.setDescription('The size of the largest burst expected from the sender at a time. UNITS, bytes')
wfSRsvpSenderTSpecMinTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTSpecMinTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTSpecMinTU.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
wfSRsvpSenderTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderTSpecMaxTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderTSpecMaxTU.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
wfSRsvpSenderPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfSRsvpSenderAdspec = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspec.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspec.setDescription('If TRUE, an adspec is sent, if FALSE, no adspec is sent.')
wfSRsvpSenderAdspecBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecBreak.setDescription('The global break bit general characterization parameter from the ADSPEC. If TRUE, at least one non-IS hop was detected in the path. If FALSE, no non-IS hops were detected.')
wfSRsvpSenderAdspecHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecHopCount.setDescription('The hop count general characterization parame- ter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present')
wfSRsvpSenderAdspecPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecPathBw.setDescription('The path bandwidth estimate general character- ization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present UNITS, bits per second')
wfSRsvpSenderAdspecMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecMinLatency.setDescription('The minimum path latency general characteriza- tion parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present UNITS, microseconds')
wfSRsvpSenderAdspecMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecMtu.setDescription('The composed Maximum Transmission Unit general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present UNITS, bytes')
wfSRsvpSenderAdspecGSSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSSvc.setDescription('If TRUE, the ADSPEC contains a Guaranteed Ser- vice fragment. If FALSE, the ADSPEC does not contain a Guaranteed Service fragment.')
wfSRsvpSenderAdspecGSBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSBreak.setDescription("If TRUE, the Guaranteed Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the guaranteed service. If FALSE, and wfSRrsvpSenderAdspecGSSvc is TRUE, the 'break' bit is not set. If wfSRsvpSenderAdspecGSSvc is FALSE, this returns FALSE or noSuchValue.")
wfSRsvpSenderAdspecGSCtot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSCtot.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSCtot.setDescription("If wfSRsvpSenderAdspecGSSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'C' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes")
wfSRsvpSenderAdspecGSDtot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSDtot.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSDtot.setDescription("If wfSRsvpSenderAdspecGSSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'D' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds")
wfSRsvpSenderAdspecGSCsum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSCsum.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSCsum.setDescription("If wfSRsvpSenderAdspecGSSvc is TRUE, this is the composed value for the guaranteed ser- vice 'C' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes")
wfSRsvpSenderAdspecGSDsum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSDsum.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSDsum.setDescription("If wfSRsvpSenderAdspecGSSvc is TRUE, this is the composed value for the guaranteed ser- vice 'D' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds")
wfSRsvpSenderAdspecGSOverrides = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSOverrides.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSOverrides.setDescription('If TRUE, the ADSPEC contains general parameter overrides for guaranteed service. If FALSE, the ADSPEC does not contains guaranteed service overrides. Note, if TRUE, ALL override parameters will be included and must be specified.')
wfSRsvpSenderAdspecGSHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSHopCount.setDescription('If wfSRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue.')
wfSRsvpSenderAdspecGSPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSPathBw.setDescription('If wfSRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bits per second')
wfSRsvpSenderAdspecGSMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSMinLatency.setDescription('If wfSRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds')
wfSRsvpSenderAdspecGSMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecGSMtu.setDescription('If wfSRsvpSenderAdspecGSSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecGSSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes')
wfSRsvpSenderAdspecCLSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLSvc.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLSvc.setDescription('If TRUE, the ADSPEC contains a Controlled Load Service fragment. If FALSE, the ADSPEC does not contain a Controlled Load Service frag- ment.')
wfSRsvpSenderAdspecCLBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLBreak.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLBreak.setDescription("If TRUE, the Controlled Load Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the controlled load service. If FALSE, and wfSRsvpSenderAdspecCLSvc is TRUE, the 'break' bit is not set. If wfSRsvpSenderAdspecCLSvc is FALSE, this returns FALSE or noSuchValue.")
wfSRsvpSenderAdspecCLOverrides = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLOverrides.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLOverrides.setDescription('If TRUE, the ADSPEC contains general parameter overrides for controlled load service. If FALSE, teh ADSPEC does not contains controlled load service overrides. Note, if TRUE, ALL override parameters will be included and must be specified.')
wfSRsvpSenderAdspecCLHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLHopCount.setDescription('If wfSRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue.')
wfSRsvpSenderAdspecCLPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLPathBw.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLPathBw.setDescription('If wfSRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, bits per second')
wfSRsvpSenderAdspecCLMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLMinLatency.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLMinLatency.setDescription('If wfSRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, microseconds')
wfSRsvpSenderAdspecCLMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 9, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpSenderAdspecCLMtu.setDescription('If wfSRsvpSenderAdspecCLSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If wfSRsvpSenderAdspecCLSvc is FALSE, this returns zero or noSuchValue. UNITS, bytes')
wfSRsvpResvTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10), )
if mibBuilder.loadTexts: wfSRsvpResvTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTable.setDescription('Information describing the state information displayed by statically configured reservation.')
wfSRsvpResvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1), ).setIndexNames((0, "Wellfleet-RSVP-MIB", "wfSRsvpResvNumber"))
if mibBuilder.loadTexts: wfSRsvpResvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvEntry.setDescription('Information describing the state information used to statically configure a reservation.')
wfSRsvpResvCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvCreate.setDescription('Whether to Delete this RESV RSB')
wfSRsvpResvEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvEnable.setDescription('Whether to Disable this RESV RSB')
wfSRsvpResvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("notpres", 3))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpResvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvStatus.setDescription("'valid' for all active RESV messages. This object may be used to install static RESV in- formation or delete RESV information.")
wfSRsvpResvNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSRsvpResvNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvNumber.setDescription('The number of this static resv. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
wfSRsvpResvDestReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvDestReplicate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvDestReplicate.setDescription('Number of sessions for which this static path state should be replicated. For each replication, wfSRsvpResvDestAddr will be incremented by one.')
wfSRsvpResvReplicate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvReplicate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvReplicate.setDescription('Number of senders for which this static path state should be replicated. For each replication, wfSRsvpResvAddr will be incremented by one.')
wfSRsvpResvIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvIntegrity.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvIntegrity.setDescription('The contents of the integrity object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
wfSRsvpResvDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvDestAddr.setDescription("The destination address used by all senders in this session. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvSenderAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvSenderAddr.setDescription("The source address of the sender selected by this reservation. The value of all zeroes in- dicates 'all senders'. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvDestAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvDestAddrLength.setDescription("The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvSenderAddrLength.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvProtocol.setDescription("The IP Protocol used by this session. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvDestPort.setDescription("The UDP or TCP port number used as a destina- tion port for all senders in this session. If the IP protocol in use, specified by wfSRsvpResvProtocol, is 50 (ESP) or 51 (AH), this represents a virtual destination port number. A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvPort.setDescription("The UDP or TCP port number used as a source port for this sender in this session. If the IP protocol in use, specified by wfSRsvpResvProto- col is 50 (ESP) or 51 (AH), this represents a generalized port identifier (GPI). A value of zero indicates that the IP protocol in use does not have ports. This object may not be changed when the value of the Status object is 'valid'.")
wfSRsvpResvFilterSpecNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvFilterSpecNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvFilterSpecNum.setDescription("For SE reservation style, this is the number of filter specs. For WF and FF styles, this is ignored. If SE style, there must be wfSRsvpResvFilterSpecNum SenderAddr and SenderPort entries where SenderPort 'j' is used by SenderAddr 'j'.")
wfSRsvpResvHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvHopAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvHopAddr.setDescription('The address used by the next RSVP hop (which may be the ultimate receiver).')
wfSRsvpResvHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvHopLih.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvHopLih.setDescription('The Logical Interface Handle received from the previous RSVP hop (which may be the ultimate receiver).')
wfSRsvpResvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvInterface.setDescription('The ifIndex value of the interface on which this RESV message was most recently received.')
wfSRsvpResvTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTimeValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTimeValue.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given PATH or RESV message on an interface. UNITS milliseconds")
wfSRsvpResvService = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("controlledDelay", 1), ("guaranteedDelay", 2), ("predictive", 3), ("controlledLoad", 5))).clone('controlledLoad')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvService.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvService.setDescription('The QoS Service classification requested by the receiver.')
wfSRsvpResvTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as wfSRsvpResvTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed wfSRsvpResvTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower. UNITS, bits per second")
wfSRsvpResvTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecPeakRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue. UNITS, bits per second")
wfSRsvpResvTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecBurst.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecBurst.setDescription("The size of the largest burst expected from the sender at a time. If this is less than the sender's advertised burst size, the receiver is asking the network to provide flow pacing beyond what would be provided under normal circumstances. Such pac- ing is at the network's option. UNITS, bytes")
wfSRsvpResvTSpecMinTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecMinTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecMinTU.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
wfSRsvpResvTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecMaxTU.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecMaxTU.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
wfSRsvpResvTSpecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvTSpecLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvTSpecLevel.setDescription('If the service is predictive or controlled- delay, this is the service level that is being requested. Otherwise, it is zero, or the agent may return noSuchValue.')
wfSRsvpResvRSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvRSpecRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvRSpecRate.setDescription('If the requested service is Guaranteed, as specified by wfSRsvpResvService, this is the clearing rate that is being requested. Other- wise, it is zero, or the agent may return noSuchValue. UNITS, bits per second')
wfSRsvpResvRSpecSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvRSpecSlack.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvRSpecSlack.setDescription('If the requested service is Guaranteed, as specified by wfSRsvpResvService, this is the delay slack. Otherwise, it is zero, or the agent may return noSuchValue.UNITS, microseconds')
wfSRsvpResvScopeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvScopeNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvScopeNum.setDescription('The number of addresses in wfSRsvpResvScope. In the absence of the scope object, this should be zero')
wfSRsvpResvScope = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvScope.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvScope.setDescription('The contents of the scope object, displayed as an uninterpreted string of octets. In the absence of such an object, this should be of zero length. If the length is non-zero, this contains a series of IP4 or IP6 addresses.')
wfSRsvpResvShared = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvShared.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvShared.setDescription('If TRUE, a reservation shared among senders is requested. If FALSE, a reservation specific to this sender is requested.')
wfSRsvpResvExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvExplicit.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvExplicit.setDescription('If TRUE, individual senders are listed using Filter Specifications. If FALSE, all senders are implicitly selected. The Scope Object will contain a list of senders that need to receive this reservation request for the purpose of routing the RESV message.')
wfSRsvpResvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 16, 1, 1, 10, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSRsvpResvPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: wfSRsvpResvPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
mibBuilder.exportSymbols("Wellfleet-RSVP-MIB", wfSRsvpSenderAdspec=wfSRsvpSenderAdspec, wfSRsvpSenderDestPort=wfSRsvpSenderDestPort, wfRsvpSenderAddr=wfRsvpSenderAddr, wfRsvpSenderAddrLength=wfRsvpSenderAddrLength, wfRsvpSenderHopLih=wfRsvpSenderHopLih, wfRsvpSenderAdspecBreak=wfRsvpSenderAdspecBreak, wfSRsvpResvShared=wfSRsvpResvShared, wfRsvpResvScope=wfRsvpResvScope, wfRsvpIfCct=wfRsvpIfCct, wfRsvpResvStatus=wfRsvpResvStatus, wfRsvpSenderDestAddrLength=wfRsvpSenderDestAddrLength, wfRsvpSenderPolicy=wfRsvpSenderPolicy, wfSRsvp=wfSRsvp, wfSRsvpSenderAdspecMtu=wfSRsvpSenderAdspecMtu, wfRsvpResvFwdScope=wfRsvpResvFwdScope, wfSRsvpSenderAdspecGSHopCount=wfSRsvpSenderAdspecGSHopCount, wfRsvpSenderEntry=wfRsvpSenderEntry, wfRsvpNbrTable=wfRsvpNbrTable, wfRsvpIfUdpNbrs=wfRsvpIfUdpNbrs, wfSRsvpSenderAdspecHopCount=wfSRsvpSenderAdspecHopCount, wfSRsvpResvScopeNum=wfSRsvpResvScopeNum, wfRsvpDebugLogFilter=wfRsvpDebugLogFilter, wfRsvpSenderAdspecGSPathBw=wfRsvpSenderAdspecGSPathBw, wfRsvpSenderTSpecRate=wfRsvpSenderTSpecRate, wfRsvpCurrentSoloistSlot=wfRsvpCurrentSoloistSlot, wfRsvpNbrStatus=wfRsvpNbrStatus, wfSRsvpDisable=wfSRsvpDisable, wfSRsvpResvEntry=wfSRsvpResvEntry, wfRsvpState=wfRsvpState, wfRsvpSenderPort=wfRsvpSenderPort, wfSRsvpResvTSpecMaxTU=wfSRsvpResvTSpecMaxTU, wfSRsvpResvTSpecBurst=wfSRsvpResvTSpecBurst, wfSRsvpResvRSpecRate=wfSRsvpResvRSpecRate, wfSRsvpResvHopAddr=wfSRsvpResvHopAddr, wfRsvpIfRefreshMultiple=wfRsvpIfRefreshMultiple, wfSRsvpSenderAdspecCLHopCount=wfSRsvpSenderAdspecCLHopCount, wfSRsvpSenderAdspecCLBreak=wfSRsvpSenderAdspecCLBreak, wfRsvpResvFwdRSpecRate=wfRsvpResvFwdRSpecRate, wfRsvpSenderTSpecPeakRate=wfRsvpSenderTSpecPeakRate, wfSRsvpSenderIntegrity=wfSRsvpSenderIntegrity, wfRsvpNbrCct=wfRsvpNbrCct, wfSRsvpSenderAdspecCLMinLatency=wfSRsvpSenderAdspecCLMinLatency, wfRsvpSenderPSBTimeout=wfRsvpSenderPSBTimeout, wfSRsvpSenderAdspecPathBw=wfSRsvpSenderAdspecPathBw, wfSRsvpSenderAdspecGSMinLatency=wfSRsvpSenderAdspecGSMinLatency, wfSRsvpSenderAdspecCLOverrides=wfSRsvpSenderAdspecCLOverrides, wfRsvpDisable=wfRsvpDisable, wfSRsvpResvTSpecLevel=wfSRsvpResvTSpecLevel, wfRsvpResvFwdTSpecBurst=wfRsvpResvFwdTSpecBurst, wfRsvpResvDestAddrLength=wfRsvpResvDestAddrLength, wfSRsvpResvInterface=wfSRsvpResvInterface, wfSRsvpSenderInterface=wfSRsvpSenderInterface, wfRsvpResvFwdSenderAddr=wfRsvpResvFwdSenderAddr, wfSRsvpSenderTSpecMaxTU=wfSRsvpSenderTSpecMaxTU, wfRsvpResvFwdDestPort=wfRsvpResvFwdDestPort, wfRsvpIfUdpRequired=wfRsvpIfUdpRequired, wfSRsvpResvExplicit=wfSRsvpResvExplicit, wfSRsvpResvHopLih=wfSRsvpResvHopLih, wfRsvpIfRouteDelay=wfRsvpIfRouteDelay, wfRsvpIfEnable=wfRsvpIfEnable, wfSRsvpState=wfSRsvpState, wfRsvpResvExplicit=wfRsvpResvExplicit, wfSRsvpSenderTSpecBurst=wfSRsvpSenderTSpecBurst, wfRsvpResvFwdEntry=wfRsvpResvFwdEntry, wfSRsvpSenderAdspecGSMtu=wfSRsvpSenderAdspecGSMtu, wfRsvpSenderAdspecMinLatency=wfRsvpSenderAdspecMinLatency, wfRsvpResvEntry=wfRsvpResvEntry, wfRsvpIfNbrs=wfRsvpIfNbrs, wfSRsvpSenderTSpecPeakRate=wfSRsvpSenderTSpecPeakRate, wfRsvpTotalSenders=wfRsvpTotalSenders, wfRsvpSoloistSlots=wfRsvpSoloistSlots, wfRsvpSenderAdspecCLMinLatency=wfRsvpSenderAdspecCLMinLatency, wfSRsvpSenderAdspecGSCsum=wfSRsvpSenderAdspecGSCsum, wfRsvpSenderTSpecMaxTU=wfRsvpSenderTSpecMaxTU, wfRsvpResvRSBTimeout=wfRsvpResvRSBTimeout, wfSRsvpSenderAdspecGSOverrides=wfSRsvpSenderAdspecGSOverrides, wfRsvpResvSenderAddrLength=wfRsvpResvSenderAddrLength, wfRsvpSenderAdspecGSDsum=wfRsvpSenderAdspecGSDsum, wfRsvpResvFwdPolicy=wfRsvpResvFwdPolicy, wfRsvpIfRefreshBlockadeMultiple=wfRsvpIfRefreshBlockadeMultiple, wfRsvpResvFwdShared=wfRsvpResvFwdShared, wfSRsvpSoloistSlot=wfSRsvpSoloistSlot, wfRsvpIfTTL=wfRsvpIfTTL, wfRsvpSenderAdspecGSHopCount=wfRsvpSenderAdspecGSHopCount, wfRsvpResvFwdInterface=wfRsvpResvFwdInterface, wfRsvpResvFwdInterval=wfRsvpResvFwdInterval, wfRsvpSessionDestAddr=wfRsvpSessionDestAddr, wfSRsvpSenderHopLih=wfSRsvpSenderHopLih, wfSRsvpResvFilterSpecNum=wfSRsvpResvFilterSpecNum, wfSRsvpResvTSpecMinTU=wfSRsvpResvTSpecMinTU, wfRsvpSenderAdspecCLPathBw=wfRsvpSenderAdspecCLPathBw, wfRsvpSenderAdspecGSCtot=wfRsvpSenderAdspecGSCtot, wfRsvpResvFwdTSpecMaxTU=wfRsvpResvFwdTSpecMaxTU, wfRsvpResvFwdDestAddr=wfRsvpResvFwdDestAddr, wfRsvpResvRSpecRate=wfRsvpResvRSpecRate, wfRsvpInfoLogFilter=wfRsvpInfoLogFilter, wfSRsvpSenderHopAddr=wfSRsvpSenderHopAddr, wfSRsvpResvDestReplicate=wfSRsvpResvDestReplicate, wfSRsvpSenderCreate=wfSRsvpSenderCreate, wfSRsvpResvIntegrity=wfSRsvpResvIntegrity, wfSRsvpResvCreate=wfSRsvpResvCreate, wfRsvpResvTSpecMinTU=wfRsvpResvTSpecMinTU, wfRsvp=wfRsvp, wfRsvpSenderAdspecPathBw=wfRsvpSenderAdspecPathBw, wfRsvpSenderAdspecCLHopCount=wfRsvpSenderAdspecCLHopCount, wfRsvpResvFwdTSpecMinTU=wfRsvpResvFwdTSpecMinTU, wfRsvpResvFwdTable=wfRsvpResvFwdTable, wfSRsvpInfoLogFilter=wfSRsvpInfoLogFilter, wfRsvpSenderAdspecGSCsum=wfRsvpSenderAdspecGSCsum, wfRsvpIfDelete=wfRsvpIfDelete, wfRsvpSenderAdspecGSSvc=wfRsvpSenderAdspecGSSvc, wfRsvpSenderTable=wfRsvpSenderTable, wfRsvpSenderProtocol=wfRsvpSenderProtocol, wfRsvpSessionSenders=wfRsvpSessionSenders, wfRsvpSenderTSpecMinTU=wfRsvpSenderTSpecMinTU, wfRsvpResvTSpecMaxTU=wfRsvpResvTSpecMaxTU, wfRsvpSenderAdspecCLSvc=wfRsvpSenderAdspecCLSvc, wfSRsvpSenderDestAddrLength=wfSRsvpSenderDestAddrLength, wfSRsvpSenderPort=wfSRsvpSenderPort, wfRsvpResvRSVPHop=wfRsvpResvRSVPHop, wfSRsvpSenderTSpecMinTU=wfSRsvpSenderTSpecMinTU, wfRsvpResvFwdHopAddr=wfRsvpResvFwdHopAddr, wfRsvpSenderAdspecHopCount=wfRsvpSenderAdspecHopCount, wfSRsvpSenderAdspecBreak=wfSRsvpSenderAdspecBreak, wfSRsvpResvTSpecRate=wfSRsvpResvTSpecRate, wfRsvpSessionDestAddrLength=wfRsvpSessionDestAddrLength, wfRsvpResvFwdSenderAddrLength=wfRsvpResvFwdSenderAddrLength, wfSRsvpResvPolicy=wfSRsvpResvPolicy, wfRsvpSessionEntry=wfRsvpSessionEntry, wfRsvpSessionPort=wfRsvpSessionPort, wfRsvpSenderInterval=wfRsvpSenderInterval, wfRsvpIfIpNbrs=wfRsvpIfIpNbrs, wfRsvpNbrProtocol=wfRsvpNbrProtocol, wfRsvpResvTable=wfRsvpResvTable, wfRsvpResvInterface=wfRsvpResvInterface, wfSRsvpSenderDestAddr=wfSRsvpSenderDestAddr, wfRsvpResvFwdTSpecLevel=wfRsvpResvFwdTSpecLevel, wfRsvpIfTable=wfRsvpIfTable, wfSRsvpResvDestPort=wfSRsvpResvDestPort, wfSRsvpRefreshInterval=wfSRsvpRefreshInterval, wfSRsvpSenderTSpecRate=wfSRsvpSenderTSpecRate, wfRsvpResvSenderAddr=wfRsvpResvSenderAddr, wfSRsvpResvPort=wfSRsvpResvPort, wfSRsvpResvService=wfSRsvpResvService, wfRsvpResvPort=wfRsvpResvPort, wfRsvpResvTSpecLevel=wfRsvpResvTSpecLevel, wfSRsvpSenderAddr=wfSRsvpSenderAddr, wfRsvpNbrEntry=wfRsvpNbrEntry, wfRsvpSenderAdspecGSMinLatency=wfRsvpSenderAdspecGSMinLatency, wfRsvpSenderDestPort=wfRsvpSenderDestPort, wfRsvpResvFwdProtocol=wfRsvpResvFwdProtocol, wfRsvpSenderRSVPHop=wfRsvpSenderRSVPHop, wfRsvpResvFwdService=wfRsvpResvFwdService, wfRsvpResvFwdTSpecPeakRate=wfRsvpResvFwdTSpecPeakRate, wfSRsvpSenderAdspecGSDsum=wfSRsvpSenderAdspecGSDsum, wfSRsvpResvStatus=wfSRsvpResvStatus, wfRsvpResvProtocol=wfRsvpResvProtocol, wfRsvpResvFwdRSpecSlack=wfRsvpResvFwdRSpecSlack, wfRsvpSenderAdspecGSDtot=wfRsvpSenderAdspecGSDtot, wfSRsvpResvScope=wfSRsvpResvScope, wfSRsvpSenderAdspecCLPathBw=wfSRsvpSenderAdspecCLPathBw, wfRsvpResvPolicy=wfRsvpResvPolicy, wfRsvpSenderAdspecCLBreak=wfRsvpSenderAdspecCLBreak, wfRsvpResvFwdDestAddrLength=wfRsvpResvFwdDestAddrLength, wfSRsvpSenderEntry=wfSRsvpSenderEntry, wfRsvpTotalReserved=wfRsvpTotalReserved, wfRsvpSenderLastChange=wfRsvpSenderLastChange, wfRsvpIfRefreshInterval=wfRsvpIfRefreshInterval, wfSRsvpTotalSenders=wfSRsvpTotalSenders, wfSRsvpSenderEnable=wfSRsvpSenderEnable, wfRsvpSenderDestAddr=wfRsvpSenderDestAddr, wfRsvpSenderAdspecGSBreak=wfRsvpSenderAdspecGSBreak, wfRsvpResvRSpecSlack=wfRsvpResvRSpecSlack, wfRsvpSenderAdspecCLMtu=wfRsvpSenderAdspecCLMtu, wfRsvpIfEntry=wfRsvpIfEntry, wfSRsvpSenderReplicate=wfSRsvpSenderReplicate, wfRsvpResvShared=wfRsvpResvShared, wfSRsvpSenderTimeValue=wfSRsvpSenderTimeValue, wfSRsvpSenderStatus=wfSRsvpSenderStatus, wfRsvpSessionReceivers=wfRsvpSessionReceivers, wfRsvpResvFwdRSVPHop=wfRsvpResvFwdRSVPHop, wfRsvpSenderAdspecMtu=wfRsvpSenderAdspecMtu, wfRsvpResvDestAddr=wfRsvpResvDestAddr, wfRsvpResvFwdHopLih=wfRsvpResvFwdHopLih, wfRsvpResvTSpecBurst=wfRsvpResvTSpecBurst, wfRsvpResvFwdStatus=wfRsvpResvFwdStatus, wfSRsvpResvReplicate=wfSRsvpResvReplicate, wfSRsvpSenderPolicy=wfSRsvpSenderPolicy, wfSRsvpResvNumber=wfSRsvpResvNumber, wfRsvpSenderHopAddr=wfRsvpSenderHopAddr, wfSRsvpResvProtocol=wfSRsvpResvProtocol, wfSRsvpTraceLogFilter=wfSRsvpTraceLogFilter, wfRsvpTotalReservations=wfRsvpTotalReservations, wfSRsvpDebugLogFilter=wfSRsvpDebugLogFilter, wfSRsvpTotalReservations=wfSRsvpTotalReservations, wfSRsvpDelete=wfSRsvpDelete, wfSRsvpSenderNumber=wfSRsvpSenderNumber, wfSRsvpResvSenderAddr=wfSRsvpResvSenderAddr, wfRsvpResvLastChange=wfRsvpResvLastChange, wfSRsvpResvSenderAddrLength=wfSRsvpResvSenderAddrLength, wfRsvpResvFwdLastChange=wfRsvpResvFwdLastChange, wfRsvpIfState=wfRsvpIfState, wfRsvpResvFwdExplicit=wfRsvpResvFwdExplicit, wfRsvpNbrAddress=wfRsvpNbrAddress, wfRsvpSessionRequests=wfRsvpSessionRequests, wfSRsvpSenderDestReplicate=wfSRsvpSenderDestReplicate, wfSRsvpResvEnable=wfSRsvpResvEnable, wfSRsvpResvTimeValue=wfSRsvpResvTimeValue, wfRsvpResvHopAddr=wfRsvpResvHopAddr, wfSRsvpResvRSpecSlack=wfSRsvpResvRSpecSlack, wfRsvpTraceLogFilter=wfRsvpTraceLogFilter, wfRsvpSessionTable=wfRsvpSessionTable, wfSRsvpResvTable=wfSRsvpResvTable, wfRsvpResvInterval=wfRsvpResvInterval, wfSRsvpSenderAdspecCLSvc=wfSRsvpSenderAdspecCLSvc, wfRsvpSenderInterface=wfRsvpSenderInterface, wfRsvpSenderStatus=wfRsvpSenderStatus, wfRsvpResvFwdTSpecRate=wfRsvpResvFwdTSpecRate, wfSRsvpResvTSpecPeakRate=wfSRsvpResvTSpecPeakRate, wfSRsvpSenderAdspecGSPathBw=wfSRsvpSenderAdspecGSPathBw, wfRsvpSenderTSpecBurst=wfRsvpSenderTSpecBurst, wfSRsvpSenderAdspecGSDtot=wfSRsvpSenderAdspecGSDtot, wfRsvpSenderAdspecGSMtu=wfRsvpSenderAdspecGSMtu, wfSRsvpResvDestAddrLength=wfSRsvpResvDestAddrLength, wfRsvpDelete=wfRsvpDelete, wfSRsvpSenderAddrLength=wfSRsvpSenderAddrLength, wfSRsvpResvDestAddr=wfSRsvpResvDestAddr, wfRsvpGroup=wfRsvpGroup, wfSRsvpSenderAdspecGSSvc=wfSRsvpSenderAdspecGSSvc, wfSRsvpSenderAdspecGSBreak=wfSRsvpSenderAdspecGSBreak, wfRsvpResvDestPort=wfRsvpResvDestPort, wfRsvpResvFwdPort=wfRsvpResvFwdPort, wfSRsvpSenderProtocol=wfSRsvpSenderProtocol, wfSRsvpSenderAdspecMinLatency=wfSRsvpSenderAdspecMinLatency, wfSRsvpSenderAdspecCLMtu=wfSRsvpSenderAdspecCLMtu, wfSRsvpSenderAdspecGSCtot=wfSRsvpSenderAdspecGSCtot, wfSRsvpSenderTable=wfSRsvpSenderTable, wfRsvpResvTSpecRate=wfRsvpResvTSpecRate, wfRsvpSessionProtocol=wfRsvpSessionProtocol, wfRsvpResvService=wfRsvpResvService, wfRsvpResvHopLih=wfRsvpResvHopLih, wfRsvpResvTSpecPeakRate=wfRsvpResvTSpecPeakRate)
