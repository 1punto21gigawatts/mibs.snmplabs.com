#
# PySNMP MIB module XEDIA-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
bgpPeerEntry, bgp4PathAttrEntry = mibBuilder.importSymbols("BGP4-MIB", "bgpPeerEntry", "bgp4PathAttrEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Counter32, NotificationType, Unsigned32, iso, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, TimeTicks, Counter64, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "NotificationType", "Unsigned32", "iso", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "TimeTicks", "Counter64", "ObjectIdentity", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaBgpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 9))
if mibBuilder.loadTexts: xediaBgpMIB.setLastUpdated('9711212155Z')
if mibBuilder.loadTexts: xediaBgpMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaBgpMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaBgpMIB.setDescription('This module defines additional objects for management of BGP in Xedia devices, above and beyond what is defined in the standard rfc1657, and proposed drafts.')
xbgpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 9, 1))
xbgpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 9, 2))
xbgpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: xbgpAdminStatus.setDescription("The administrative status of BGP in the router. It is the desired state of BGP. The value 'enabled(1)' indicates that the BGP process should be active in the router, while 'disabled(2)' indicates that BGP shold not be active in the router.")
xbgpOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgpOperStatus.setStatus('current')
if mibBuilder.loadTexts: xbgpOperStatus.setDescription('The current operational state of BGP on the router.')
xbgpReflection = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("noClientToClient", 2), ("none", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpReflection.setStatus('current')
if mibBuilder.loadTexts: xbgpReflection.setDescription("The administrative status of BGP route reflection. The value 'full(1)' indicates that BGP will perform full route reflection among client and non-client peers. A value of 'nonClientToClient(2)' indicates that routes will only be reflected between clients and non-clients, not among clients. A value of 'none(3)' indicates that no reflection will occur, regardless of the specific peer configuration.")
xbgpClusterId = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpClusterId.setStatus('current')
if mibBuilder.loadTexts: xbgpClusterId.setDescription('The route reflector cluster id used when there are multiple route reflectors in a cluster.')
xbgpConfiguredMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000)).clone(81920)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpConfiguredMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: xbgpConfiguredMaxRoutes.setDescription('The maximum number of routed Networks in the internal Route Table. It is the maximum total number of Dest/Mask (network) route entries. Depending upon system configuration and the number of route entries in the route table that are destination addresses with multple masks, it may not be possible to have a route table with the maximum number of routed networks. If this variable is changed, it will not take effect until the box is reset.')
xbgpOperationalMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgpOperationalMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: xbgpOperationalMaxRoutes.setDescription('The maximum number of routed Networks in the internal Route Table. It is the maximum total number of Dest/Mask (network) route entries. Depending upon system configuration and the number of route entries in the route table that are destination addresses with multple masks, it may not be possible to have a route table with the maximum number of routed networks. If this variable is changed, it will not take effect until the box is reset.')
xbgpConfiguredMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(20480)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpConfiguredMaxPaths.setStatus('current')
if mibBuilder.loadTexts: xbgpConfiguredMaxPaths.setDescription('')
xbgpOperationalMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgpOperationalMaxPaths.setStatus('current')
if mibBuilder.loadTexts: xbgpOperationalMaxPaths.setDescription('')
xbgpConfiguredPeers = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgpConfiguredPeers.setStatus('current')
if mibBuilder.loadTexts: xbgpConfiguredPeers.setDescription('The number of peers currently configured.')
xbgpEstablishedPeers = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgpEstablishedPeers.setStatus('current')
if mibBuilder.loadTexts: xbgpEstablishedPeers.setDescription('The number of peers currently configured and in the established state.')
xBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 10), )
if mibBuilder.loadTexts: xBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: xBgpPeerTable.setDescription('A list of BGP Peer entries.')
xBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 10, 1), )
bgpPeerEntry.registerAugmentions(("XEDIA-BGP-MIB", "xBgpPeerEntry"))
xBgpPeerEntry.setIndexNames(*bgpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: xBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: xBgpPeerEntry.setDescription('An entry containing additional management information applicable to a particular BGP Peer.')
xbgpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 10, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: xbgpPeerRowStatus.setDescription("This variable displays the status of the entry. Setting it to 'destroy' or 'notInService' removes the entry from the table. Setting it to either 'create', or 'active' will add a row to the table.")
xbgpPeerReflectionClient = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 10, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xbgpPeerReflectionClient.setStatus('current')
if mibBuilder.loadTexts: xbgpPeerReflectionClient.setDescription('Enables a peer to receive IBGP routes reflected from this speaker.')
xBgp4PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11), )
if mibBuilder.loadTexts: xBgp4PathAttrTable.setStatus('current')
if mibBuilder.loadTexts: xBgp4PathAttrTable.setDescription('A list of BGP Peer entries.')
xBgp4PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11, 1), )
bgp4PathAttrEntry.registerAugmentions(("XEDIA-BGP-MIB", "xBgp4PathAttrEntry"))
xBgp4PathAttrEntry.setIndexNames(*bgp4PathAttrEntry.getIndexNames())
if mibBuilder.loadTexts: xBgp4PathAttrEntry.setStatus('current')
if mibBuilder.loadTexts: xBgp4PathAttrEntry.setDescription('An entry containing additional management information applicable to a particular BGP Path.')
xbgp4PathAttrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgp4PathAttrCommunity.setStatus('current')
if mibBuilder.loadTexts: xbgp4PathAttrCommunity.setDescription('The Community attribute specified for a path.')
xbgp4PathAttrOrigId = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgp4PathAttrOrigId.setStatus('current')
if mibBuilder.loadTexts: xbgp4PathAttrOrigId.setDescription('The address of the originator of the route in the AS created by a route reflector.')
xbgp4PathAttrClusterList = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgp4PathAttrClusterList.setStatus('current')
if mibBuilder.loadTexts: xbgp4PathAttrClusterList.setDescription('The cluster list for a reflected path.')
xbgp4PathAttrDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 9, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xbgp4PathAttrDistance.setStatus('current')
if mibBuilder.loadTexts: xbgp4PathAttrDistance.setDescription('Administrative distance of the path.')
xbgpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 9, 2, 1))
xbgpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 9, 2, 2))
xbgpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 9, 2, 1, 1)).setObjects(("XEDIA-BGP-MIB", "xbgpAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xbgpCompliance = xbgpCompliance.setStatus('current')
if mibBuilder.loadTexts: xbgpCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xbgpAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 9, 2, 2, 1)).setObjects(("XEDIA-BGP-MIB", "xbgpAdminStatus"), ("XEDIA-BGP-MIB", "xbgpOperStatus"), ("XEDIA-BGP-MIB", "xbgpReflection"), ("XEDIA-BGP-MIB", "xbgpClusterId"), ("XEDIA-BGP-MIB", "xbgpConfiguredMaxRoutes"), ("XEDIA-BGP-MIB", "xbgpOperationalMaxRoutes"), ("XEDIA-BGP-MIB", "xbgpConfiguredMaxPaths"), ("XEDIA-BGP-MIB", "xbgpOperationalMaxPaths"), ("XEDIA-BGP-MIB", "xbgpConfiguredPeers"), ("XEDIA-BGP-MIB", "xbgpEstablishedPeers"), ("XEDIA-BGP-MIB", "xbgpPeerRowStatus"), ("XEDIA-BGP-MIB", "xbgpPeerReflectionClient"), ("XEDIA-BGP-MIB", "xbgp4PathAttrCommunity"), ("XEDIA-BGP-MIB", "xbgp4PathAttrOrigId"), ("XEDIA-BGP-MIB", "xbgp4PathAttrClusterList"), ("XEDIA-BGP-MIB", "xbgp4PathAttrDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xbgpAllGroup = xbgpAllGroup.setStatus('current')
if mibBuilder.loadTexts: xbgpAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-BGP-MIB", xBgpPeerTable=xBgpPeerTable, xbgp4PathAttrDistance=xbgp4PathAttrDistance, xbgpOperationalMaxPaths=xbgpOperationalMaxPaths, xbgpObjects=xbgpObjects, xbgpConfiguredMaxPaths=xbgpConfiguredMaxPaths, xbgpOperationalMaxRoutes=xbgpOperationalMaxRoutes, xbgp4PathAttrClusterList=xbgp4PathAttrClusterList, xbgpConfiguredMaxRoutes=xbgpConfiguredMaxRoutes, xbgpCompliance=xbgpCompliance, xbgpPeerRowStatus=xbgpPeerRowStatus, xbgpReflection=xbgpReflection, xbgp4PathAttrCommunity=xbgp4PathAttrCommunity, xbgp4PathAttrOrigId=xbgp4PathAttrOrigId, xbgpConfiguredPeers=xbgpConfiguredPeers, xBgpPeerEntry=xBgpPeerEntry, xbgpClusterId=xbgpClusterId, xbgpGroups=xbgpGroups, xbgpAdminStatus=xbgpAdminStatus, xbgpAllGroup=xbgpAllGroup, xBgp4PathAttrEntry=xBgp4PathAttrEntry, xediaBgpMIB=xediaBgpMIB, xbgpPeerReflectionClient=xbgpPeerReflectionClient, xbgpEstablishedPeers=xbgpEstablishedPeers, PYSNMP_MODULE_ID=xediaBgpMIB, xbgpConformance=xbgpConformance, xBgp4PathAttrTable=xBgp4PathAttrTable, xbgpCompliances=xbgpCompliances, xbgpOperStatus=xbgpOperStatus)
