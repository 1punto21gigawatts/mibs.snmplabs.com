#
# PySNMP MIB module REDLINE-AN50-PMP-V1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-AN50-PMP-V1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Gauge32, ModuleIdentity, NotificationType, IpAddress, Unsigned32, ObjectIdentity, Counter32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "ModuleIdentity", "NotificationType", "IpAddress", "Unsigned32", "ObjectIdentity", "Counter32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "TimeTicks", "MibIdentifier")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
redline = MibIdentifier((1, 3, 6, 1, 4, 1, 10728))
redlineProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 1))
redlineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2))
redlineAN50 = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 1, 1))
redlineAN50PMPV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 51))
an50pmpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1), )
if mibBuilder.loadTexts: an50pmpLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkTable.setDescription('Table with Wireless links and connections information configured into AN50 PMP device based on V1 processor.')
an50pmpLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V1-MIB", "an50pmpLinkID"))
if mibBuilder.loadTexts: an50pmpLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkEntry.setDescription('A unique set of link parameters.')
an50pmpLinkID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkID.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkID.setDescription('Link ID, a unique number between 1 and 1024 that identifies a particular link.')
an50pmpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkName.setDescription('The name of the Link/Connection ')
an50pmpLinkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkGroupID.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkGroupID.setDescription('Group assigned to this link.')
an50pmpLinkPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkPeerMac.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkPeerMac.setDescription('Link Destination MAC address.')
an50pmpLinkMaxDLBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxDLBurstRate.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkMaxDLBurstRate.setDescription('Maximum downlink rate for this link. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkMaxULBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxULBurstRate.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkMaxULBurstRate.setDescription('Maximum uplink rate for this link. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkMaxHost = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkMaxHost.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkMaxHost.setDescription('Maximum number of hosts for this link.')
an50pmpLinkCIDDLCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDDLCIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkCIDDLCIR.setDescription('The downlink commited rate for this connection in kb/s.')
an50pmpLinkCIDDLPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDDLPIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkCIDDLPIR.setDescription('The downlink peak rate for this connection in kb/s.')
an50pmpLinkCIDULCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDULCIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkCIDULCIR.setDescription('The uplink commited rate for this connection in kb/s.')
an50pmpLinkCIDULPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkCIDULPIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkCIDULPIR.setDescription('The uplink peak rate for this connection in kb/s.')
an50pmpLinkDLQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkDLQoS.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLQoS.setDescription('The downlink QoS level.')
an50pmpLinkULQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkULQoS.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULQoS.setDescription('The uplink QoS level.')
an50pmpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkRowStatus.setDescription('Status of the row')
an50pmpLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2), )
if mibBuilder.loadTexts: an50pmpLinkStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkStatusTable.setDescription('Statistics per uplink connections.')
an50pmpLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1), ).setIndexNames((0, "REDLINE-AN50-PMP-V1-MIB", "an50pmpLinkID"))
if mibBuilder.loadTexts: an50pmpLinkStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkStatusEntry.setDescription('Statistics for a link connection.')
an50pmpLinkStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkStatusID.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkStatusID.setDescription('Index for an50pmpLinkStatusTable table')
an50pmpLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkStatus.setDescription('Status of the Link.')
an50pmpLinkStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkStatusCode.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkStatusCode.setDescription('Alarm bits shown as a hex number.')
an50pmpLinkRegConn = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkRegConn.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkRegConn.setDescription('Number of connections configured for this link.')
an50pmpLinkDLBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLBurstRate.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLBurstRate.setDescription('Current master Tx burst rate. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8. ')
an50pmpLinkDLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLRSSI.setDescription('RSSI (Received Signal Strength Indicator) at slave.')
an50pmpLinkDLSINADR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLSINADR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLSINADR.setDescription('SINADR (Signal Interference and Noise Distorsion Ratio) at slave.')
an50pmpLinkDLStatLostFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatLostFrm.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLStatLostFrm.setDescription('SINADR at slave.')
an50pmpLinkDLStatBlksTot = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksTot.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksTot.setDescription('Blocks transmitted from master to slave.')
an50pmpLinkDLStatBlksRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksRetr.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksRetr.setDescription('Block re-transmitted from master to slave.')
an50pmpLinkDLStatBlksDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLStatBlksDisc.setDescription('Blocks lost from master to slave')
an50pmpLinkDLCIDStatPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktDisc.setDescription('Packets discarded by master due to buffer full.')
an50pmpLinkDLCIDStatPktTran = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktTran.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktTran.setDescription('Packets transmitted from master to slave.')
an50pmpLinkDLCIDStatPktRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktRecv.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkDLCIDStatPktRecv.setDescription('Packets received by slave')
an50pmpLinkULBurstRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULBurstRate.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULBurstRate.setDescription('Current Slave Tx Burst Rate. Rate range: 6Mb/s=1, 9Mb/s=2, 12Mb/s=3, 18Mb/s=4, 24Mb/s=5, 36Mb/s=6, 48Mb/s=7, 54Mbs=8.')
an50pmpLinkULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULRSSI.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULRSSI.setDescription('RSSI at master.')
an50pmpLinkULSINADR = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULSINADR.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULSINADR.setDescription('SINADR at master.')
an50pmpLinkULStatLostFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatLostFrm.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULStatLostFrm.setDescription('Frames lost from slave to master')
an50pmpLinkULStatBlksTot = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksTot.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksTot.setDescription('Blocks transmitted slave to master.')
an50pmpLinkULStatBlksRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksRetr.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksRetr.setDescription('Block re-transmitted slave to master.')
an50pmpLinkULStatBlksDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULStatBlksDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULStatBlksDisc.setDescription('Blocks lost from slave to master.')
an50pmpLinkULCIDStatPktDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktDisc.setDescription('Packets discarded by slave due to buffer full.')
an50pmpLinkULCIDStatPktTran = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktTran.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktTran.setDescription('Packets transmitted from slave to master.')
an50pmpLinkULCIDStatPktRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktRecv.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkULCIDStatPktRecv.setDescription('Packets received by master from slave.')
an50pmpLinkUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkUpTime.setDescription('Time since the link is UP (in hundreth a of second).')
an50pmpLinkLostCount = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 51, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLinkLostCount.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLinkLostCount.setDescription('Number of times the link has been lost.')
an50pmpCIDSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpCIDSaveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpCIDSaveConfig.setDescription('The attribute saves the entire config set of the AN50 PMP.')
an50pmpLastModifiedCID = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastModifiedCID.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLastModifiedCID.setDescription('The attribute represents the last modified CID.')
an50pmpLastMissedSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastMissedSsMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLastMissedSsMacAddress.setDescription('MAC address of the SS that missed the registration with the BS.')
an50pmpLastRegisteredSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastRegisteredSsMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLastRegisteredSsMacAddress.setDescription('MAC address of the last SS that successfuly registered with the BS.')
an50pmpLastSuccessfulID = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50pmpLastSuccessfulID.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLastSuccessfulID.setDescription('The ID of the Link registered in BS table that is sent through LastSuccessfulRegisteredSS Trap(number10).')
an50pmpLastDeniedSsMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 51, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50pmpLastDeniedSsMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: an50pmpLastDeniedSsMacAddress.setDescription('MAC address of the SS that will be denied by thisBS.')
mibBuilder.exportSymbols("REDLINE-AN50-PMP-V1-MIB", an50pmpLinkDLQoS=an50pmpLinkDLQoS, an50pmpLinkULStatLostFrm=an50pmpLinkULStatLostFrm, an50pmpLastSuccessfulID=an50pmpLastSuccessfulID, an50pmpLinkDLCIDStatPktDisc=an50pmpLinkDLCIDStatPktDisc, an50pmpLinkDLStatBlksTot=an50pmpLinkDLStatBlksTot, an50pmpLinkULStatBlksTot=an50pmpLinkULStatBlksTot, an50pmpLinkULCIDStatPktTran=an50pmpLinkULCIDStatPktTran, an50pmpLinkStatus=an50pmpLinkStatus, an50pmpLinkCIDULPIR=an50pmpLinkCIDULPIR, an50pmpLinkID=an50pmpLinkID, an50pmpLastDeniedSsMacAddress=an50pmpLastDeniedSsMacAddress, an50pmpLinkTable=an50pmpLinkTable, an50pmpLinkULStatBlksDisc=an50pmpLinkULStatBlksDisc, an50pmpLinkCIDULCIR=an50pmpLinkCIDULCIR, an50pmpLinkStatusID=an50pmpLinkStatusID, an50pmpLinkStatusCode=an50pmpLinkStatusCode, an50pmpLinkDLCIDStatPktRecv=an50pmpLinkDLCIDStatPktRecv, an50pmpLinkULCIDStatPktDisc=an50pmpLinkULCIDStatPktDisc, an50pmpLinkULStatBlksRetr=an50pmpLinkULStatBlksRetr, an50pmpLastModifiedCID=an50pmpLastModifiedCID, redlineAN50PMPV1=redlineAN50PMPV1, an50pmpLinkUpTime=an50pmpLinkUpTime, an50pmpLinkStatusTable=an50pmpLinkStatusTable, an50pmpLinkDLBurstRate=an50pmpLinkDLBurstRate, an50pmpLinkULCIDStatPktRecv=an50pmpLinkULCIDStatPktRecv, an50pmpLinkULBurstRate=an50pmpLinkULBurstRate, redlineMgmt=redlineMgmt, an50pmpLinkULQoS=an50pmpLinkULQoS, an50pmpLinkULRSSI=an50pmpLinkULRSSI, an50pmpLinkMaxHost=an50pmpLinkMaxHost, an50pmpLinkCIDDLPIR=an50pmpLinkCIDDLPIR, redlineAN50=redlineAN50, an50pmpLinkDLCIDStatPktTran=an50pmpLinkDLCIDStatPktTran, an50pmpLinkDLStatBlksRetr=an50pmpLinkDLStatBlksRetr, redlineProducts=redlineProducts, an50pmpLinkPeerMac=an50pmpLinkPeerMac, an50pmpLinkGroupID=an50pmpLinkGroupID, an50pmpLinkMaxULBurstRate=an50pmpLinkMaxULBurstRate, an50pmpLinkRegConn=an50pmpLinkRegConn, an50pmpLinkULSINADR=an50pmpLinkULSINADR, an50pmpCIDSaveConfig=an50pmpCIDSaveConfig, an50pmpLinkStatusEntry=an50pmpLinkStatusEntry, an50pmpLinkLostCount=an50pmpLinkLostCount, an50pmpLinkDLRSSI=an50pmpLinkDLRSSI, an50pmpLinkRowStatus=an50pmpLinkRowStatus, an50pmpLinkDLStatLostFrm=an50pmpLinkDLStatLostFrm, an50pmpLinkMaxDLBurstRate=an50pmpLinkMaxDLBurstRate, an50pmpLastMissedSsMacAddress=an50pmpLastMissedSsMacAddress, an50pmpLinkEntry=an50pmpLinkEntry, an50pmpLinkDLStatBlksDisc=an50pmpLinkDLStatBlksDisc, an50pmpLastRegisteredSsMacAddress=an50pmpLastRegisteredSsMacAddress, an50pmpLinkDLSINADR=an50pmpLinkDLSINADR, an50pmpLinkCIDDLCIR=an50pmpLinkCIDDLCIR, redline=redline, an50pmpLinkName=an50pmpLinkName)
