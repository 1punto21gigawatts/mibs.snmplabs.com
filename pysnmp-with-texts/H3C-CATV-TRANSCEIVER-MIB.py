#
# PySNMP MIB module H3C-CATV-TRANSCEIVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-CATV-TRANSCEIVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, MibIdentifier, NotificationType, Bits, Integer32, Unsigned32, Counter32, Counter64, ObjectIdentity, ModuleIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibIdentifier", "NotificationType", "Bits", "Integer32", "Unsigned32", "Counter32", "Counter64", "ObjectIdentity", "ModuleIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
h3cCATVTransceiver = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94))
if mibBuilder.loadTexts: h3cCATVTransceiver.setLastUpdated('200807251008Z')
if mibBuilder.loadTexts: h3cCATVTransceiver.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: h3cCATVTransceiver.setContactInfo('SMB BG Team H3C Technologies Co., Ltd. 310 Liuhe Road, Zhijiang Science Park, Hangzhou, P.R.China http://www.h3c.com Zip:310053.')
if mibBuilder.loadTexts: h3cCATVTransceiver.setDescription(' The objects in this MIB module are used to manage and display common configuration for CATV(Community Antenna Television) transceiver module. ')
h3cCATVTransStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1))
h3cCATVTransStatusScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1, 1))
h3cCATVTransState = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCATVTransState.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransState.setDescription(' The state of CATV transceiver. ')
h3cCATVTransInputPwr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1, 1, 2), Integer32()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCATVTransInputPwr.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransInputPwr.setDescription(' The input power of CATV transceiver. If transceiver is not on site, the value should be zero. ')
h3cCATVTransOutputLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1, 1, 3), Integer32()).setUnits('dbuv').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCATVTransOutputLevel.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransOutputLevel.setDescription(' The output level of CATV transceiver. If transceiver is not on site, the value should be zero. ')
h3cCATVTransTemperature = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 1, 1, 4), Integer32()).setUnits('centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cCATVTransTemperature.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransTemperature.setDescription(' The temperature of CATV transceiver. If transceiver is not on site, the value should be zero. ')
h3cCATVTransceiverMan = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 2))
h3cCATVTransCtrlScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 2, 1))
h3cCATVTransInputPwrLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 2, 1, 1), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCATVTransInputPwrLowerThr.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransInputPwrLowerThr.setDescription(" A threshold for the CATV transceiver's input power. When the input power of CATV transceiver is lower than threshold, a trap should be generated. ")
h3cCATVTransOutputLvlLowerThr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 2, 1, 2), Integer32()).setUnits('dbuv').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCATVTransOutputLvlLowerThr.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransOutputLvlLowerThr.setDescription(" A threshold for the CATV transceiver's output level. When the output level of CATV transceiver is lower than threshold, a trap should be generated. ")
h3cCATVTransTempratureUpperThr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 2, 1, 3), Integer32()).setUnits('').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cCATVTransTempratureUpperThr.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransTempratureUpperThr.setDescription(" A threshold for the CATV transceiver's temperature. When the temperature of CATV transceiver is higher than threshold, a trap should be generated. ")
h3cCATVTansTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3))
h3cCATVTransTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0))
h3cCATVTransInputPwrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 1)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransInputPwr"))
if mibBuilder.loadTexts: h3cCATVTransInputPwrTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransInputPwrTrap.setDescription(' A h3cCATVTransInputPwrTrap notification is sent when the input power of CATV transceiver is lower than the threshold. ')
h3cCATVTransInputPwrReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 2)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransInputPwr"))
if mibBuilder.loadTexts: h3cCATVTransInputPwrReTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransInputPwrReTrap.setDescription(' A h3cCATVTransInputPwrReTrap notification is sent when the input power of CATV transceiver recovered from the last trap. ')
h3cCATVTransOutputLvlTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 3)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransOutputLevel"))
if mibBuilder.loadTexts: h3cCATVTransOutputLvlTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransOutputLvlTrap.setDescription(' A h3cCATVTransOutputLvlTrap notification is sent when the output level of CATV transceiver is lower than the threshold. ')
h3cCATVTransOutputLvlReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 4)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransOutputLevel"))
if mibBuilder.loadTexts: h3cCATVTransOutputLvlReTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransOutputLvlReTrap.setDescription(' A h3cCATVTransOutputLvlReTrap notification is sent when the output level of CATV transceiver recovered from the last trap. ')
h3cCATVTransTemperatureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 5)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransTemperature"))
if mibBuilder.loadTexts: h3cCATVTransTemperatureTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransTemperatureTrap.setDescription(' A h3cCATVTransTemperatureTrap notification is sent when the temperature of CATV transceiver is higher than the threshold. ')
h3cCATVTransTemperatureReTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 94, 3, 0, 6)).setObjects(("H3C-CATV-TRANSCEIVER-MIB", "h3cCATVTransTemperature"))
if mibBuilder.loadTexts: h3cCATVTransTemperatureReTrap.setStatus('current')
if mibBuilder.loadTexts: h3cCATVTransTemperatureReTrap.setDescription(' A h3cCATVTransTemperatureReTrap notification is sent when the temperature of CATV transceiver recovered from the last trap. ')
mibBuilder.exportSymbols("H3C-CATV-TRANSCEIVER-MIB", h3cCATVTransceiver=h3cCATVTransceiver, h3cCATVTransInputPwr=h3cCATVTransInputPwr, h3cCATVTransState=h3cCATVTransState, h3cCATVTransStatus=h3cCATVTransStatus, h3cCATVTransOutputLvlLowerThr=h3cCATVTransOutputLvlLowerThr, h3cCATVTransOutputLvlReTrap=h3cCATVTransOutputLvlReTrap, h3cCATVTransCtrlScalarObjects=h3cCATVTransCtrlScalarObjects, h3cCATVTransTemperatureReTrap=h3cCATVTransTemperatureReTrap, h3cCATVTransInputPwrLowerThr=h3cCATVTransInputPwrLowerThr, h3cCATVTransOutputLevel=h3cCATVTransOutputLevel, h3cCATVTransInputPwrReTrap=h3cCATVTransInputPwrReTrap, h3cCATVTransTemperatureTrap=h3cCATVTransTemperatureTrap, h3cCATVTransceiverMan=h3cCATVTransceiverMan, PYSNMP_MODULE_ID=h3cCATVTransceiver, h3cCATVTansTrap=h3cCATVTansTrap, h3cCATVTransInputPwrTrap=h3cCATVTransInputPwrTrap, h3cCATVTransTrapPrefix=h3cCATVTransTrapPrefix, h3cCATVTransTemperature=h3cCATVTransTemperature, h3cCATVTransStatusScalarObjects=h3cCATVTransStatusScalarObjects, h3cCATVTransTempratureUpperThr=h3cCATVTransTempratureUpperThr, h3cCATVTransOutputLvlTrap=h3cCATVTransOutputLvlTrap)
