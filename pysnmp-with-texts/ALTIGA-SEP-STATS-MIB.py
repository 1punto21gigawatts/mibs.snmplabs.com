#
# PySNMP MIB module ALTIGA-SEP-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-SEP-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alSepMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alSepMibModule")
alStatsSep, alSepGroup = mibBuilder.importSymbols("ALTIGA-MIB", "alStatsSep", "alSepGroup")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, MibIdentifier, TimeTicks, Unsigned32, IpAddress, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, iso, ModuleIdentity, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "TimeTicks", "Unsigned32", "IpAddress", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "iso", "ModuleIdentity", "Counter32", "Counter64")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
altigaSepStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 35, 2))
altigaSepStatsMibModule.setRevisions(('2003-03-27 00:00', '2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaSepStatsMibModule.setRevisionsDescriptions(('Added new enum value to alSepModuleStatsType and alSepModuleStatsState.', 'Added module compliance.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaSepStatsMibModule.setLastUpdated('200303270000Z')
if mibBuilder.loadTexts: altigaSepStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaSepStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaSepStatsMibModule.setDescription('The Cisco VPN 3000 Series SEP Statistics MIB models counters and objects that are of management interest for the SEP hardware. Acronyms The following acronyms are used in this document: MIB: Management Information Base RSA: Rivest, Shamir, and Adelman SEP: Scalable Encryption Processor ')
alSepModuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2), )
if mibBuilder.loadTexts: alSepModuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsTable.setDescription('List of SEPs modules found.')
alSepModuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1), ).setIndexNames((0, "ALTIGA-SEP-STATS-MIB", "alSepModuleStatsSlotNum"))
if mibBuilder.loadTexts: alSepModuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsEntry.setDescription('An entry in the alSepModuleStatsTable.')
alSepModuleStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alSepModuleStatsRowStatus.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRowStatus.setDescription('The status of this row.')
alSepModuleStatsSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: alSepModuleStatsSlotNum.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsSlotNum.setDescription('The physical slot this SEP is connected to.')
alSepModuleStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cryptSet", 1), ("cryptIc", 2), ("bcm582x", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsType.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsType.setDescription('Indicates the type of HW engine used to perform the cryptographic transforms. cryptSet: First generation of Hardware Cryptographic Processor. cryptIc: Cryptographic Integrated Circuit. bcm582x: BroadCom 582x series Hardware Cryptographic Products. ')
alSepModuleStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sepNotFound", 1), ("sepFound", 2), ("sepDiagFailure", 3), ("sepNotOperational", 4), ("sepLoading", 5), ("sepInitializing", 6), ("sepOperational", 7), ("sepDisabled", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsState.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsState.setDescription('The functional state of this SEP. sepNotFound: SEP is not found. sepFound: SEP is found. sepDiagFailure: SEP dialog fail. sepNotOperational: SEP is not operational. sepLoading: SEP is loading data. sepInitializing: SEP is initializing. sepOperational: SEP is operational. sepDisabled: SEP is disabled. ')
alSepModuleStatsDspCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDspCodeVersion.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDspCodeVersion.setDescription('The version of DSP microcode running on this SEP.')
alSepModuleStatsHashOutboundPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashOutboundPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashOutboundPackets.setDescription('The number of outbound authentication-only packets processed by this SEP.')
alSepModuleStatsHashOutboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashOutboundOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashOutboundOctets.setDescription('The number of outbound octets authenticated by this SEP.')
alSepModuleStatsHashInboundPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashInboundPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashInboundPackets.setDescription('The number of inbound authentication-only packets processed by this SEP.')
alSepModuleStatsHashInboundOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashInboundOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashInboundOctets.setDescription('The number of inbound octets authenticated by this SEP.')
alSepModuleStatsEncPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsEncPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsEncPackets.setDescription('The number of outbound encryption-only packets processed by this SEP.')
alSepModuleStatsEncOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsEncOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsEncOctets.setDescription('The number of outbound octets encrypted by this SEP.')
alSepModuleStatsDecPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDecPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDecPackets.setDescription('The number of inbound decryption-only packets processed by this SEP.')
alSepModuleStatsDecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDecOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDecOctets.setDescription('The number of inbound octets decrypted by this SEP.')
alSepModuleStatsHashEncPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashEncPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashEncPackets.setDescription('The number of combined outbound hash/encrypt packets processed by this SEP.')
alSepModuleStatsHashDecPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsHashDecPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsHashDecPackets.setDescription('The number of combined inbound hash/decrypt packets processed by this SEP.')
alSepModuleStatsCryptoTransformsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsCryptoTransformsTotal.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsCryptoTransformsTotal.setDescription('The total number of hash, encryption, decryption, hash/encrypt, and hash/decrypt transforms performed by this SEP.')
alSepModuleStatsPacketDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsPacketDrops.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsPacketDrops.setDescription('The number of packets intended for SEP processing, dropped due to the SEP ring being full.')
alSepModuleStatsRandRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRandRequests.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRandRequests.setDescription('The number of random # requests made to the SEP.')
alSepModuleStatsRandReplens = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRandReplens.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRandReplens.setDescription('The number of random # requests fulfilled by the SEP.')
alSepModuleStatsRandBytesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRandBytesAvail.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRandBytesAvail.setDescription('The number of random bytes currently cached on the Host.')
alSepModuleStatsRandCacheEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRandCacheEmpty.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRandCacheEmpty.setDescription("The number of times a random # request came in and we had no SEP generated random #'s available on the host.")
alSepModuleStatsDHKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDHKeysGenerated.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDHKeysGenerated.setDescription('The number of times a new Diffie Hellman key pair has been generated by a SEP.')
alSepModuleStatsDHDerivedSecretKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDHDerivedSecretKeys.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDHDerivedSecretKeys.setDescription('The number of times a SEP has derived the Diffie Hellman secret key.')
alSepModuleStatsRSASignings = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSASignings.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSASignings.setDescription('The number of times an RSA Digital Signature has been generated by a SEP.')
alSepModuleStatsRSAVerifications = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSAVerifications.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSAVerifications.setDescription('The number of times an RSA Digital Signature has been verified by a SEP.')
alSepModuleStatsRSAEncPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSAEncPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSAEncPackets.setDescription('The number of packets RSA-encrypted by this SEP.')
alSepModuleStatsRSAEncOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSAEncOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSAEncOctets.setDescription('The number of octets RSA-encrypted by this SEP.')
alSepModuleStatsRSADecPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSADecPackets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSADecPackets.setDescription('The number of packets RSA-decrypted by this SEP.')
alSepModuleStatsRSADecOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSADecOctets.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSADecOctets.setDescription('The number of octets RSA-decrypted by this SEP.')
alSepModuleStatsDSAKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDSAKeysGenerated.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDSAKeysGenerated.setDescription('The number of times a new DSA Key pair has been generated by a SEP.')
alSepModuleStatsDSASignings = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDSASignings.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDSASignings.setDescription('The number of times a DSA Digital Signature has been generated by a SEP.')
alSepModuleStatsDSAVerifications = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsDSAVerifications.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsDSAVerifications.setDescription('The number of times a DSA Digital Signature has been verified by a SEP.')
alSepModuleStatsRSAKeysGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 30, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSepModuleStatsRSAKeysGenerated.setStatus('current')
if mibBuilder.loadTexts: alSepModuleStatsRSAKeysGenerated.setDescription('The number of times a new RSA Key pair has been generated by a SEP.')
altigaSepStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 35, 2, 1))
altigaSepStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 35, 2, 1, 1))
altigaSepStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 35, 2, 1, 1, 1)).setObjects(("ALTIGA-SEP-STATS-MIB", "altigaSepStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaSepStatsMibCompliance = altigaSepStatsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: altigaSepStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga SEP Statistics MIB.')
altigaSepStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 30, 2)).setObjects(("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRowStatus"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsType"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsState"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDspCodeVersion"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashOutboundPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashOutboundOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashInboundPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashInboundOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsEncPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsEncOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDecPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDecOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashEncPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsHashDecPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsCryptoTransformsTotal"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsPacketDrops"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRandRequests"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRandReplens"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRandBytesAvail"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRandCacheEmpty"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDHKeysGenerated"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDHDerivedSecretKeys"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSASignings"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSAVerifications"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSAEncPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSAEncOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSADecPackets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSADecOctets"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDSAKeysGenerated"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDSASignings"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsDSAVerifications"), ("ALTIGA-SEP-STATS-MIB", "alSepModuleStatsRSAKeysGenerated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaSepStatsGroup = altigaSepStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaSepStatsGroup.setDescription('The objects for the SEP Module statistics.')
mibBuilder.exportSymbols("ALTIGA-SEP-STATS-MIB", alSepModuleStatsRandRequests=alSepModuleStatsRandRequests, altigaSepStatsMibModule=altigaSepStatsMibModule, alSepModuleStatsTable=alSepModuleStatsTable, alSepModuleStatsHashInboundPackets=alSepModuleStatsHashInboundPackets, alSepModuleStatsRSADecPackets=alSepModuleStatsRSADecPackets, alSepModuleStatsHashEncPackets=alSepModuleStatsHashEncPackets, altigaSepStatsMibCompliance=altigaSepStatsMibCompliance, alSepModuleStatsHashOutboundOctets=alSepModuleStatsHashOutboundOctets, alSepModuleStatsRandBytesAvail=alSepModuleStatsRandBytesAvail, alSepModuleStatsRandReplens=alSepModuleStatsRandReplens, alSepModuleStatsDHDerivedSecretKeys=alSepModuleStatsDHDerivedSecretKeys, altigaSepStatsGroup=altigaSepStatsGroup, alSepModuleStatsDHKeysGenerated=alSepModuleStatsDHKeysGenerated, alSepModuleStatsDspCodeVersion=alSepModuleStatsDspCodeVersion, alSepModuleStatsHashInboundOctets=alSepModuleStatsHashInboundOctets, alSepModuleStatsRSAKeysGenerated=alSepModuleStatsRSAKeysGenerated, alSepModuleStatsRSASignings=alSepModuleStatsRSASignings, alSepModuleStatsRandCacheEmpty=alSepModuleStatsRandCacheEmpty, alSepModuleStatsDecOctets=alSepModuleStatsDecOctets, alSepModuleStatsDSASignings=alSepModuleStatsDSASignings, alSepModuleStatsPacketDrops=alSepModuleStatsPacketDrops, alSepModuleStatsEntry=alSepModuleStatsEntry, alSepModuleStatsType=alSepModuleStatsType, alSepModuleStatsDSAVerifications=alSepModuleStatsDSAVerifications, alSepModuleStatsRSAVerifications=alSepModuleStatsRSAVerifications, alSepModuleStatsEncPackets=alSepModuleStatsEncPackets, alSepModuleStatsHashDecPackets=alSepModuleStatsHashDecPackets, alSepModuleStatsState=alSepModuleStatsState, altigaSepStatsMibCompliances=altigaSepStatsMibCompliances, alSepModuleStatsCryptoTransformsTotal=alSepModuleStatsCryptoTransformsTotal, alSepModuleStatsEncOctets=alSepModuleStatsEncOctets, alSepModuleStatsHashOutboundPackets=alSepModuleStatsHashOutboundPackets, alSepModuleStatsRowStatus=alSepModuleStatsRowStatus, alSepModuleStatsRSAEncOctets=alSepModuleStatsRSAEncOctets, alSepModuleStatsRSAEncPackets=alSepModuleStatsRSAEncPackets, PYSNMP_MODULE_ID=altigaSepStatsMibModule, alSepModuleStatsSlotNum=alSepModuleStatsSlotNum, alSepModuleStatsDSAKeysGenerated=alSepModuleStatsDSAKeysGenerated, alSepModuleStatsDecPackets=alSepModuleStatsDecPackets, alSepModuleStatsRSADecOctets=alSepModuleStatsRSADecOctets, altigaSepStatsMibConformance=altigaSepStatsMibConformance)
