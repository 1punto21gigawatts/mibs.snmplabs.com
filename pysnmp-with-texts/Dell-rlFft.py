#
# PySNMP MIB module Dell-rlFft (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-rlFft
# Produced by pysmi-0.3.4 at Wed May  1 12:57:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
rnd, = mibBuilder.importSymbols("Dell-MIB", "rnd")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Counter64, Integer32, NotificationType, Gauge32, TimeTicks, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Counter64", "Integer32", "NotificationType", "Gauge32", "TimeTicks", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Unsigned32", "MibIdentifier")
TruthValue, TextualConvention, DisplayString, RowStatus, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "PhysAddress")
class Percents(TextualConvention, Integer32):
    description = 'Specifies percents.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class NetNumber(TextualConvention, OctetString):
    description = 'Specifies the network identification.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

rlFFT = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 47))
rlFFT.setRevisions(('2004-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlFFT.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlFFT.setLastUpdated('200406010000Z')
if mibBuilder.loadTexts: rlFFT.setOrganization('Dell')
if mibBuilder.loadTexts: rlFFT.setContactInfo('www.dell.com')
if mibBuilder.loadTexts: rlFFT.setDescription('The private MIB module definition for RND Fast Forwarding Tables.')
rlIpFFT = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 47, 1))
rlIpFftMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpFftMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlIpFftMibVersion.setDescription("MIB's version, the current version is 1.")
rlInetMaxFftNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetMaxFftNumber.setStatus('current')
if mibBuilder.loadTexts: rlInetMaxFftNumber.setDescription('The maximum number of IP FFTs.')
rlInetFftDynamicSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftDynamicSupported.setStatus('current')
if mibBuilder.loadTexts: rlInetFftDynamicSupported.setDescription('Specifies whether dynamic IP FFTs are supported.')
rlInetFftSubnetSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubnetSupported.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubnetSupported.setDescription('Specifies whether subtable per IP subnet is supported.')
rlIpFftUnknownAddrMsgUsed = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpFftUnknownAddrMsgUsed.setStatus('current')
if mibBuilder.loadTexts: rlIpFftUnknownAddrMsgUsed.setDescription('Specifies whether the 3SW uses the unknown address message.')
rlInetFftAgingTimeSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftAgingTimeSupported.setStatus('current')
if mibBuilder.loadTexts: rlInetFftAgingTimeSupported.setDescription('Specifies whether aging time is supported.')
rlIpFftSrcAddrSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpFftSrcAddrSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpFftSrcAddrSupported.setDescription('Specifies whether an IP subtable per station contains source IP address.')
rlInetFftAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlInetFftAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: rlInetFftAgingTimeout.setDescription('The aging timeout in seconds.')
rlIpFftRedBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 9), Percents()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpFftRedBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpFftRedBoundary.setDescription('The red boundary in percents.')
rlIpFftYellowBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 10), Percents()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpFftYellowBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpFftYellowBoundary.setDescription('The yellow boundary in percents.')
rlInetFftNumTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 12), )
if mibBuilder.loadTexts: rlInetFftNumTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumTable.setDescription("The (conceptual) table containing routes' numbers of the IP SFFTs and IP NFFTs. ")
rlInetFftNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftNumIndex"), (0, "Dell-rlFft", "rlInetFftNumAddressType"))
if mibBuilder.loadTexts: rlInetFftNumEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumEntry.setDescription("An entry (conceptual row) containing the containing routes' numbers of IP SFFT and IP NFFT ")
rlInetFftNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNumIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumIndex.setDescription('The value of the index of the IP FFT. ')
rlInetFftNumAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNumAddressType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumAddressType.setDescription('The inet address type that are contained in the IP SFFT. ')
rlInetFftNumStnRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNumStnRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumStnRoutesNumber.setDescription('The number of routes that are contained in the IP SFFT. ')
rlInetFftNumSubRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNumSubRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumSubRoutesNumber.setDescription('The number of routes that are contained in the IP NFFT. ')
rlInetFftNumInetTomeRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNumInetTomeRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNumInetTomeRoutesNumber.setDescription('The number of routes that are Inet To Me. ')
rlInetFftStnTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 13), )
if mibBuilder.loadTexts: rlInetFftStnTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnTable.setDescription('The (conceptual) table contains IP Fast Forwarding information per station for IP datagrams. ')
rlInetFftStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftStnIndex"), (0, "Dell-rlFft", "rlInetFftStnMrid"), (0, "Dell-rlFft", "rlInetFftStnDstInetAddressType"), (0, "Dell-rlFft", "rlInetFftStnDstInetAddress"))
if mibBuilder.loadTexts: rlInetFftStnEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnEntry.setDescription('An entry (conceptual row) contains the IP fast forwarding information for IP datagrams from a particular source and destination addresses.')
rlInetFftStnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnIndex.setDescription('The value of the index of the IP FFT. ')
rlInetFftStnMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnMrid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnMrid.setDescription("The router's Instance Identifier in the SFFT. ")
rlInetFftStnDstInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnDstInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnDstInetAddressType.setDescription('The Ip destination type for which this entry contains IP forwarding information.')
rlInetFftStnDstInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnDstInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnDstInetAddress.setDescription('The IP destination address for which this entry contains IP forwarding information.')
rlInetFftStnDstRouteInetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnDstRouteInetPrefix.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnDstRouteInetPrefix.setDescription('The IP destination prefix for which this entry contains IP forwarding information.')
rlInetFftStnDstInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnDstInetAddrType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnDstInetAddrType.setDescription('The IP destination address type. ')
rlInetFftStnDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnDstMacAddress.setDescription('The MAC destination address.')
rlInetFftStnSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnSrcMacAddress.setDescription('The MAC source address.')
rlInetFftStnOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnOutIfIndex.setDescription('The value of ifIndex of output physical port.')
rlInetFftStnVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnVid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnVid.setDescription('The vid of the output port.')
rlInetFftStnTaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("basedPortConfig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnTaggedMode.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnTaggedMode.setDescription('The tagged value of the port. When the Tagged field is not a part of the FFT table in the ASIC, the Tagged field gets the BasedPortConfig value ')
rlInetFftStnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftStnAge.setStatus('current')
if mibBuilder.loadTexts: rlInetFftStnAge.setDescription('The age of the entry in seconds from the inserting.')
rlInetFftSubTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 14), )
if mibBuilder.loadTexts: rlInetFftSubTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubTable.setDescription('The (conceptual) table containing IP Fast Forwarding information per subnet for IP datagrams. ')
rlInetFftSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftSubMrid"), (0, "Dell-rlFft", "rlInetFftSubDstInetSubnetType"), (0, "Dell-rlFft", "rlInetFftSubDstInetSubnet"), (0, "Dell-rlFft", "rlInetFftSubDstInetPrefix"))
if mibBuilder.loadTexts: rlInetFftSubEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubEntry.setDescription('An entry (conceptual row) containing the IP fast forwarding information for IP datagrams from a particular source and destination addresses.')
rlInetFftSubMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubMrid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubMrid.setDescription("The router's Instance Identifier in the NFFT. ")
rlInetFftSubDstInetSubnetType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubDstInetSubnetType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubDstInetSubnetType.setDescription('The IP destination subnet type for which this entry contains IP forwarding information.')
rlInetFftSubDstInetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubDstInetSubnet.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubDstInetSubnet.setDescription('The IP destination subnet for which this entry contains IP forwarding information.')
rlInetFftSubDstInetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubDstInetPrefix.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubDstInetPrefix.setDescription('The IP destination prefix for which this entry contains IP forwarding information.')
rlInetFftSubNextHopSetRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopSetRefCount.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopSetRefCount.setDescription('The number of NFFT entries that used the given NextHop set (ECMP path). ')
rlInetFftSubNextHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopCount.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopCount.setDescription('The number of used NextHops in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex1.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex1.setDescription('The first NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr1Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr1Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr1.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr1.setDescription('The first NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex2.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex2.setDescription('The second NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr2Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr2Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr2.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr2.setDescription('The second NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex3.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex3.setDescription('The third NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr3Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr3Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr3.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr3.setDescription('The third NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex4.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex4.setDescription('The fourth NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr4Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr4Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr4.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr4.setDescription('The fourth NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex5.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex5.setDescription('The fifth NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr5Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr5Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr5 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr5.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr5.setDescription('The fifth NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex6 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex6.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex6.setDescription('The six NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr6Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr6Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr6 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr6.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr6.setDescription('The six NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex7 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex7.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex7.setDescription('The seven NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr7Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr7Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr7Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr7 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr7.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr7.setDescription('The seven NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopIfindex8 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex8.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopIfindex8.setDescription('The eight NextHop Ifindex in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr8Type = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 29), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr8Type.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr8Type.setDescription('The first NextHop IP address type in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubNextHopInetAddr8 = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 30), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr8.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubNextHopInetAddr8.setDescription('The eight NextHop IP address in the given NextHop set (ECMP path) for the NFFT entry. ')
rlInetFftSubAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 14, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftSubAge.setStatus('current')
if mibBuilder.loadTexts: rlInetFftSubAge.setDescription('The age of the entry in seconds from the inserting.')
rlInetFftCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 15), )
if mibBuilder.loadTexts: rlInetFftCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftCountersTable.setDescription('The (conceptual) table containing IP Counters information per one IP FFT.')
rlInetFftCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 15, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftCountersIndex"))
if mibBuilder.loadTexts: rlInetFftCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftCountersEntry.setDescription('An entry (conceptual row) containing the IP Counters information containing amount of IP datagrams passed by certain IP FFT.')
rlInetFftCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftCountersIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftCountersIndex.setDescription('The value of the index of the IP FFT.')
rlInetFftInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftInReceives.setStatus('current')
if mibBuilder.loadTexts: rlInetFftInReceives.setDescription('The amount of received IP datagrams ')
rlInetFftForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: rlInetFftForwDatagrams.setDescription('The amount of forwarded IP datagrams ')
rlInetFftInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftInDiscards.setStatus('current')
if mibBuilder.loadTexts: rlInetFftInDiscards.setDescription('The amount of discarded IP datagrams ')
rlInetFftNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 16), )
if mibBuilder.loadTexts: rlInetFftNextHopTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopTable.setDescription('The (conceptual) table contains NextHop information used for routing IP datagrams. ')
rlInetFftNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftNextHopifindex"), (0, "Dell-rlFft", "rlInetFftNextHopInetAddressType"), (0, "Dell-rlFft", "rlInetFftNextHopInetAddress"))
if mibBuilder.loadTexts: rlInetFftNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopEntry.setDescription('An entry (conceptual row) contains the NextHop info information for routing IP datagrams.')
rlInetFftNextHopifindex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopifindex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopifindex.setDescription('The value of the IP Interface index of the NextHop. ')
rlInetFftNextHopInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopInetAddressType.setDescription('The IP address type of a NextHop for which an entry contains IP forwarding information. ')
rlInetFftNextHopInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopInetAddress.setDescription('The IP address of a NextHop for which an entry contains IP forwarding information. ')
rlInetFftNextHopValid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopValid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopValid.setDescription('The NextHop Valid bit. When L2 info is missing, a NextHop has Invalid value. ')
rlInetFftNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("reject", 3), ("drop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopType.setDescription('The NextHop type. ')
rlInetFftNextHopReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopReferenceCount.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopReferenceCount.setDescription('IF LPM is supported: If ecmp supported: the field NextHop_ref_count used to save number of NextHop SETs that use the NextHop. Otherwise, NextHop_ref_count used to save number of NFFT entries that use the NextHop. IF LPM is NOT supported: NextHop_ref_count used to save number of Remote SFFT entries that use the NextHop. ')
rlInetFftNextHopNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopNetAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopNetAddress.setDescription('The NextHop Physical Address.')
rlInetFftNextHopVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopVid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopVid.setDescription('The vid of the output port.')
rlInetFftNextHopMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopMacAddress.setDescription('The MAC destination address.')
rlInetFftNextHopOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftNextHopOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftNextHopOutIfIndex.setDescription('The value of ifIndex of output physical port.')
rlInetFftL2InfoTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 1, 17), )
if mibBuilder.loadTexts: rlInetFftL2InfoTable.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoTable.setDescription('The (conceptual) table contains L2 information used for routing IP datagrams. ')
rlInetFftL2InfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1), ).setIndexNames((0, "Dell-rlFft", "rlInetFftL2InfoIfindex"), (0, "Dell-rlFft", "rlInetFftL2InfoDstMacAddress"))
if mibBuilder.loadTexts: rlInetFftL2InfoEntry.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoEntry.setDescription('An entry (conceptual row) contains the L2 info information for routing IP datagrams.')
rlInetFftL2InfoIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoIfindex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoIfindex.setDescription('The VLAN Ifindex of the destination port. ')
rlInetFftL2InfoDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoDstMacAddress.setDescription('The MAC destination address.')
rlInetFftL2InfoValid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoValid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoValid.setDescription('The L2 info entry valid bit. When L2 info is missing some information, an L2 info has Invalid value. ')
rlInetFftL2InfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoType.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoType.setDescription('The L2 info type. With Enthernet media l2 info type is vlan. WIth Tunneling feature, l2 info type will be expanded. ')
rlInetFftL2InfoReferenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoReferenceCount.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoReferenceCount.setDescription('The reference count contains a number of NextHop entries that use this L2 info.')
rlInetFftL2InfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoVid.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoVid.setDescription('The vid of the destination port. ')
rlInetFftL2InfoSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoSrcMacAddress.setDescription('The MAC source address placed to Ehernet Header of IP forwarded packet.')
rlInetFftL2InfoOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoOutIfIndex.setDescription('The value of ifIndex of output physical port the packet is forwarded through.')
rlInetFftL2InfoTaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("untagged", 1), ("tagged", 2), ("basedPortConfig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlInetFftL2InfoTaggedMode.setStatus('current')
if mibBuilder.loadTexts: rlInetFftL2InfoTaggedMode.setDescription('The tagged value of the port. When the Tagged field is not a part of the FFT table in the ASIC, the Tagged field get the BasedPortConfig value.')
rlIpv6FftRedBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 18), Percents()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6FftRedBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpv6FftRedBoundary.setDescription('The red boundary in percents.')
rlIpv6FftYellowBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 1, 19), Percents()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpv6FftYellowBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpv6FftYellowBoundary.setDescription('The yellow boundary in percents.')
rlIpxFFT = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 47, 2))
rlIpxFftMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftMibVersion.setDescription("MIB's version, the current version is 1.")
rlIpxMaxFftNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxMaxFftNumber.setStatus('current')
if mibBuilder.loadTexts: rlIpxMaxFftNumber.setDescription('The maximun number of IPX FFTs. An IPX FFT gets a number from 1 until rlIpxMaxFftSetNumber.')
rlIpxFftDynamicSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftDynamicSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftDynamicSupported.setDescription('Specifies whether dynamic IPX FFTs are supported.')
rlIpxFftNetworkSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftNetworkSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNetworkSupported.setDescription('Specifies whether subtable per IPX network is supported.')
rlIpxFftUnknownAddrMsgUsed = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftUnknownAddrMsgUsed.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftUnknownAddrMsgUsed.setDescription('Specifies whether the 3SW uses the unknown address message.')
rlIpxFftAgingTimeSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftAgingTimeSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftAgingTimeSupported.setDescription('Specifies whether aging time is supported for subtable per station.')
rlIpxFftSrcAddrSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSrcAddrSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSrcAddrSupported.setDescription('Specifies whether an IPX subtable per station contains source IPX address.')
rlIpxFftAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpxFftAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftAgingTimeout.setDescription('The aging timeout in seconds.')
rlIpxFftRedBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpxFftRedBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftRedBoundary.setDescription('The red boundary in percents.')
rlIpxFftYellowBoundary = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 2, 10), Percents()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpxFftYellowBoundary.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftYellowBoundary.setDescription('The yellow boundary in percents.')
rlIpxFftNumTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 2, 12), )
if mibBuilder.loadTexts: rlIpxFftNumTable.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNumTable.setDescription('The (conceptual) table containing number routes of the IPX Fast Forwarding Table. ')
rlIpxFftNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 2, 12, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpxFftNumIndex"))
if mibBuilder.loadTexts: rlIpxFftNumEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNumEntry.setDescription('An entry (conceptual row) containing the containing number routes of of IPX SFFT and IPX NFFT ')
rlIpxFftNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftNumIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNumIndex.setDescription('The value of the index of the IPX FFT. ')
rlIpxFftNumStnRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftNumStnRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNumStnRoutesNumber.setDescription('The number of routes containing in the IPX SFFT. ')
rlIpxFftNumSubRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftNumSubRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftNumSubRoutesNumber.setDescription('The number of routes containing in the IPX NFFT. ')
rlIpxFftStnTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 2, 13), )
if mibBuilder.loadTexts: rlIpxFftStnTable.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnTable.setDescription('The (conceptual) table containing IPX Fast Forwarding information per station for IPX. ')
rlIpxFftStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpxFftStnIndex"), (0, "Dell-rlFft", "rlIpxFftStnDstNetid"), (0, "Dell-rlFft", "rlIpxFftStnDstNode"), (0, "Dell-rlFft", "rlIpxFftStnSrcNetid"), (0, "Dell-rlFft", "rlIpxFftStnSrcNode"))
if mibBuilder.loadTexts: rlIpxFftStnEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnEntry.setDescription('An entry (conceptual row) containing the IP fast forwarding information for IP datagrams from a particular source and destination addresses.')
rlIpxFftStnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnIndex.setDescription('The value of the index of the IPX FFT. ')
rlIpxFftStnDstNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnDstNetid.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnDstNetid.setDescription('The destination network for which this entry contains IPX forwarding information.')
rlIpxFftStnDstNode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnDstNode.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnDstNode.setDescription('The destination node for which this entry contains IPX forwarding information.')
rlIpxFftStnSrcNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 4), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnSrcNetid.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnSrcNetid.setDescription('The source network for which this entry contains IPX forwarding information.')
rlIpxFftStnSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnSrcNode.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnSrcNode.setDescription('The destination node for which this entry contains IPX forwarding information.')
rlIpxFftStnDstIpxAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnDstIpxAddrType.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnDstIpxAddrType.setDescription('The destination address type. ')
rlIpxFftStnEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("novell", 1), ("ethernet", 2), ("llc", 3), ("snap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnEncapsulation.setDescription('The encapsulation method associated with this route.')
rlIpxFftStnDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 8), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnDstMacAddress.setDescription('The MAC destination address.')
rlIpxFftStnSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnSrcMacAddress.setDescription('The MAC source address.')
rlIpxFftStnOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnOutIfIndex.setDescription('The value of ifIndex of output physical port.')
rlIpxFftStnTci = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnTci.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnTci.setDescription('The value of TCI or 0.')
rlIpxFftStnFacsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnFacsIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnFacsIndex.setDescription('The value of index of the FACS Table.')
rlIpxFftStnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftStnAge.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftStnAge.setDescription('The age of the entry in seconds.')
rlIpxFftSubTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 2, 14), )
if mibBuilder.loadTexts: rlIpxFftSubTable.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubTable.setDescription('The (conceptual) table containing IPX Fast Forwarding information per network for IPX . ')
rlIpxFftSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpxFftSubIndex"), (0, "Dell-rlFft", "rlIpxFftSubDstNetid"))
if mibBuilder.loadTexts: rlIpxFftSubEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubEntry.setDescription('An entry (conceptual row) containing the IP fast forwarding information for IP datagrams from a particular source and destination addresses.')
rlIpxFftSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubIndex.setDescription('The value of the index of the IPX FFT. ')
rlIpxFftSubDstNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubDstNetid.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubDstNetid.setDescription('The destination network for which this entry contains IPX forwarding information.')
rlIpxFftSubEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("novell", 1), ("ethernet", 2), ("llc", 3), ("snap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubEncapsulation.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubEncapsulation.setDescription('The encapsulation method associated with this route.')
rlIpxFftSubDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubDstMacAddress.setDescription('The MAC destination address.')
rlIpxFftSubSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubSrcMacAddress.setDescription('The MAC source address.')
rlIpxFftSubOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubOutIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubOutIfIndex.setDescription('The value of ifIndex of output physical port.')
rlIpxFftSubTci = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubTci.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubTci.setDescription('The value of TCI or 0.')
rlIpxFftSubFacsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubFacsIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubFacsIndex.setDescription('The value of index of the FACS Table.')
rlIpxFftSubAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftSubAge.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftSubAge.setDescription('The age of the entry in seconds.')
rlIpxFftCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 2, 15), )
if mibBuilder.loadTexts: rlIpxFftCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftCountersTable.setDescription('The (conceptual) table containing IPX Counters information per one IPX FFT.')
rlIpxFftCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 2, 15, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpxFftCountersIndex"))
if mibBuilder.loadTexts: rlIpxFftCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftCountersEntry.setDescription('An entry (conceptual row) containing the IP Counters information containing amount of IPX datagrams passed by certain IPX FFT.')
rlIpxFftCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftCountersIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftCountersIndex.setDescription('The value of the index of the IPX FFT.')
rlIpxFftInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftInReceives.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftInReceives.setDescription('The amount of received IPX datagrams ')
rlIpxFftForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftForwDatagrams.setDescription('The amount of forwarded IPX datagrams ')
rlIpxFftInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpxFftInDiscards.setStatus('current')
if mibBuilder.loadTexts: rlIpxFftInDiscards.setDescription('The amount of discarded IPX datagrams ')
rlIpmFFT = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 47, 3))
rlIpmFftMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftMibVersion.setDescription("MIB's version, the current version is 1.")
rlIpmMaxFftNumber = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmMaxFftNumber.setStatus('current')
if mibBuilder.loadTexts: rlIpmMaxFftNumber.setDescription('The maximun number of IPM FFTs. NT_IPM gets a number from Host Parameters')
rlIpmFftDynamicSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftDynamicSupported.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftDynamicSupported.setDescription('Specifies whether dynamic IPM FFTs are supported. An NT_IPM gets a number from Host Parameters')
rlIpmFftUnknownAddrMsgUsed = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftUnknownAddrMsgUsed.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftUnknownAddrMsgUsed.setDescription('Specifies whether the 3SW uses the unknown address message. An NT_IPM gets a number from Host Parameters')
rlIpmFftUserAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpmFftUserAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftUserAgingTimeout.setDescription('The aging timeout in seconds. SNMP user writes. There is a default value of aging timeout.')
rlIpmFftRouterAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 89, 47, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftRouterAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftRouterAgingTimeout.setDescription('The aging timeout in seconds. NT_IPM keeps value that Router level gave. This is high priority value for aging timeout.')
rlIpmFftNumTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 3, 8), )
if mibBuilder.loadTexts: rlIpmFftNumTable.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftNumTable.setDescription('The (conceptual) table containing number routes of the IPM Fast Forwarding Table. ')
rlIpmFftNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 3, 8, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpmFftNumIndex"))
if mibBuilder.loadTexts: rlIpmFftNumEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftNumEntry.setDescription('An entry (conceptual row) containing the containing number routes of an IPM FFT.')
rlIpmFftNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftNumIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftNumIndex.setDescription('The value of the index of the IPM FFT.')
rlIpmFftNumRoutesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftNumRoutesNumber.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftNumRoutesNumber.setDescription('The number of routes containing in the IPM FFT.')
rlIpmFftTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 3, 9), )
if mibBuilder.loadTexts: rlIpmFftTable.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftTable.setDescription('The (conceptual) table containing IPM Fast Forwarding information for IPM datagrams.')
rlIpmFftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpmFftIndex"), (0, "Dell-rlFft", "rlIpmFftSrcIpAddress"), (0, "Dell-rlFft", "rlIpmFftDstIpAddress"))
if mibBuilder.loadTexts: rlIpmFftEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftEntry.setDescription('An entry (conceptual row) containing the IPM fast forwarding information for IP datagrams from a particular source and destination addresses.')
rlIpmFftIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftIndex.setDescription('The value of the index of the IPM FFT. ')
rlIpmFftSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftSrcIpAddress.setDescription('The IP source address for which this entry contains IPM forwarding information.')
rlIpmFftDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftDstIpAddress.setDescription('The IPM destination address for which this entry contains IPM forwarding information.')
rlIpmFftSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftSrcIpMask.setDescription('The IP source mask for which this entry contains IP forwarding information.')
rlIpmFftInputIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftInputIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftInputIfIndex.setDescription('The input ifIndex for which this entry contains IPM forwarding information.')
rlIpmFftInputVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftInputVlanTag.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftInputVlanTag.setDescription('The input Vlan tag together with input ifIndex defines pair (ifIndex, tag)')
rlIpmFftForwardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftForwardAction.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftForwardAction.setDescription('The IPM forward action.')
rlIpmFftInportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sentToCPU", 1), ("discard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftInportAction.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftInportAction.setDescription('The IPM illegal input port action.')
rlIpmFftAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftAge.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftAge.setDescription('The age of the entry in seconds from the moment of inserting. ')
rlIpmFftPortTagTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 3, 10), )
if mibBuilder.loadTexts: rlIpmFftPortTagTable.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortTagTable.setDescription('The (conceptual) table containing IPM FFT output port tag information for IPM datagrams.')
rlIpmFftPortTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpmFftPortIndex"), (0, "Dell-rlFft", "rlIpmFftPortSrcIpAddress"), (0, "Dell-rlFft", "rlIpmFftPortDstIpAddress"), (0, "Dell-rlFft", "rlIpmFftPortOutputifIndex"), (0, "Dell-rlFft", "rlIpmFftPortOutputTag"))
if mibBuilder.loadTexts: rlIpmFftPortTagEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortTagEntry.setDescription('An entry (conceptual row) containing the IPM FFT output port tag information for IP datagrams from a particular source and destination addresses.')
rlIpmFftPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortIndex.setDescription('The value of the index of the IPM FFT. ')
rlIpmFftPortSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftPortSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortSrcIpAddress.setDescription('The IP source address for which this entry contains IPM output port tag information.')
rlIpmFftPortDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftPortDstIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortDstIpAddress.setDescription('The IPM destination address for which this entry contains IPM port tag information.')
rlIpmFftPortOutputifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftPortOutputifIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortOutputifIndex.setDescription('The output ifIndex ')
rlIpmFftPortOutputTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftPortOutputTag.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftPortOutputTag.setDescription('The output Vlan tag together with output ifIndex defines pair (ifIndex, tag)')
rlIpmFftCountersTable = MibTable((1, 3, 6, 1, 4, 1, 89, 47, 3, 11), )
if mibBuilder.loadTexts: rlIpmFftCountersTable.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftCountersTable.setDescription('The (conceptual) table containing IPM Counters information per FFT number. ')
rlIpmFftCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 47, 3, 11, 1), ).setIndexNames((0, "Dell-rlFft", "rlIpmFftCountersIndex"))
if mibBuilder.loadTexts: rlIpmFftCountersEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftCountersEntry.setDescription('An entry (conceptual row) containing the IPM Counters information containing amount of IPM datagrams passed by certain FFT.')
rlIpmFftCountersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftCountersIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftCountersIndex.setDescription('The value of the index of the IPM FFT. ')
rlIpmFftInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftInReceives.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftInReceives.setDescription('The amount of received IPM datagrams ')
rlIpmFftForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftForwDatagrams.setDescription('The amount of forwarded IPM datagrams ')
rlIpmFftInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 47, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpmFftInDiscards.setStatus('current')
if mibBuilder.loadTexts: rlIpmFftInDiscards.setDescription('The amount of discarded IPM datagrams ')
mibBuilder.exportSymbols("Dell-rlFft", rlInetFftSubNextHopIfindex2=rlInetFftSubNextHopIfindex2, rlIpxFFT=rlIpxFFT, rlInetFftSubNextHopInetAddr5=rlInetFftSubNextHopInetAddr5, Percents=Percents, rlIpmFftPortOutputTag=rlIpmFftPortOutputTag, rlIpmFftEntry=rlIpmFftEntry, rlIpxFftRedBoundary=rlIpxFftRedBoundary, rlInetFftSubMrid=rlInetFftSubMrid, rlInetFftL2InfoSrcMacAddress=rlInetFftL2InfoSrcMacAddress, rlInetFftSubNextHopInetAddr6=rlInetFftSubNextHopInetAddr6, rlIpxFftStnSrcMacAddress=rlIpxFftStnSrcMacAddress, rlIpmFftPortDstIpAddress=rlIpmFftPortDstIpAddress, rlIpmFftCountersEntry=rlIpmFftCountersEntry, rlIpmFftCountersIndex=rlIpmFftCountersIndex, rlInetFftSubnetSupported=rlInetFftSubnetSupported, rlInetMaxFftNumber=rlInetMaxFftNumber, rlInetFftSubEntry=rlInetFftSubEntry, rlIpxFftStnTci=rlIpxFftStnTci, rlInetFftNumIndex=rlInetFftNumIndex, rlInetFftSubDstInetSubnetType=rlInetFftSubDstInetSubnetType, rlIpmFftInportAction=rlIpmFftInportAction, rlIpmFftIndex=rlIpmFftIndex, rlInetFftL2InfoType=rlInetFftL2InfoType, rlIpxFftSubTable=rlIpxFftSubTable, rlIpxFftNetworkSupported=rlIpxFftNetworkSupported, rlIpmFftInputIfIndex=rlIpmFftInputIfIndex, rlIpmFftSrcIpAddress=rlIpmFftSrcIpAddress, rlIpmMaxFftNumber=rlIpmMaxFftNumber, rlInetFftStnVid=rlInetFftStnVid, rlIpxFftSubEncapsulation=rlIpxFftSubEncapsulation, rlInetFftSubDstInetSubnet=rlInetFftSubDstInetSubnet, rlInetFftSubTable=rlInetFftSubTable, rlIpmFftMibVersion=rlIpmFftMibVersion, rlInetFftNextHopValid=rlInetFftNextHopValid, rlIpFftUnknownAddrMsgUsed=rlIpFftUnknownAddrMsgUsed, rlInetFftNumSubRoutesNumber=rlInetFftNumSubRoutesNumber, rlInetFftSubDstInetPrefix=rlInetFftSubDstInetPrefix, rlIpmFftRouterAgingTimeout=rlIpmFftRouterAgingTimeout, rlIpmFftPortSrcIpAddress=rlIpmFftPortSrcIpAddress, rlIpxFftAgingTimeSupported=rlIpxFftAgingTimeSupported, rlInetFftNumStnRoutesNumber=rlInetFftNumStnRoutesNumber, rlInetFftSubNextHopInetAddr8=rlInetFftSubNextHopInetAddr8, rlInetFftSubNextHopInetAddr4Type=rlInetFftSubNextHopInetAddr4Type, rlIpmFftUnknownAddrMsgUsed=rlIpmFftUnknownAddrMsgUsed, rlIpxFftStnSrcNetid=rlIpxFftStnSrcNetid, rlIpmFftInDiscards=rlIpmFftInDiscards, rlIpFftYellowBoundary=rlIpFftYellowBoundary, rlIpmFftDstIpAddress=rlIpmFftDstIpAddress, rlIpxFftCountersEntry=rlIpxFftCountersEntry, rlInetFftDynamicSupported=rlInetFftDynamicSupported, rlIpxFftSubDstNetid=rlIpxFftSubDstNetid, rlInetFftStnDstInetAddressType=rlInetFftStnDstInetAddressType, rlIpmFftAge=rlIpmFftAge, rlIpFftRedBoundary=rlIpFftRedBoundary, rlInetFftNextHopifindex=rlInetFftNextHopifindex, rlInetFftStnAge=rlInetFftStnAge, rlInetFftNextHopMacAddress=rlInetFftNextHopMacAddress, rlInetFftStnEntry=rlInetFftStnEntry, rlInetFftCountersIndex=rlInetFftCountersIndex, rlIpxFftStnEntry=rlIpxFftStnEntry, rlInetFftInReceives=rlInetFftInReceives, rlInetFftStnDstInetAddrType=rlInetFftStnDstInetAddrType, rlIpxFftStnSrcNode=rlIpxFftStnSrcNode, rlInetFftSubNextHopInetAddr4=rlInetFftSubNextHopInetAddr4, rlInetFftCountersEntry=rlInetFftCountersEntry, rlIpxFftUnknownAddrMsgUsed=rlIpxFftUnknownAddrMsgUsed, rlInetFftForwDatagrams=rlInetFftForwDatagrams, rlIpxFftStnDstMacAddress=rlIpxFftStnDstMacAddress, rlIpxFftSubAge=rlIpxFftSubAge, rlIpxFftNumIndex=rlIpxFftNumIndex, rlIpmFftUserAgingTimeout=rlIpmFftUserAgingTimeout, rlInetFftSubNextHopInetAddr2=rlInetFftSubNextHopInetAddr2, rlIpxFftNumSubRoutesNumber=rlIpxFftNumSubRoutesNumber, rlInetFftSubNextHopInetAddr3Type=rlInetFftSubNextHopInetAddr3Type, rlInetFftL2InfoVid=rlInetFftL2InfoVid, rlInetFftSubNextHopIfindex1=rlInetFftSubNextHopIfindex1, rlIpxFftNumStnRoutesNumber=rlIpxFftNumStnRoutesNumber, rlIpxFftStnIndex=rlIpxFftStnIndex, rlIpmFftCountersTable=rlIpmFftCountersTable, rlIpxFftStnDstNetid=rlIpxFftStnDstNetid, rlIpmFftPortOutputifIndex=rlIpmFftPortOutputifIndex, rlInetFftAgingTimeout=rlInetFftAgingTimeout, rlInetFftSubNextHopCount=rlInetFftSubNextHopCount, rlIpxFftStnOutIfIndex=rlIpxFftStnOutIfIndex, rlIpmFftNumRoutesNumber=rlIpmFftNumRoutesNumber, rlInetFftStnMrid=rlInetFftStnMrid, rlInetFftSubNextHopInetAddr3=rlInetFftSubNextHopInetAddr3, rlIpxFftYellowBoundary=rlIpxFftYellowBoundary, rlIpxFftSubFacsIndex=rlIpxFftSubFacsIndex, rlIpxFftInDiscards=rlIpxFftInDiscards, rlIpxFftAgingTimeout=rlIpxFftAgingTimeout, rlInetFftNumAddressType=rlInetFftNumAddressType, rlInetFftSubNextHopInetAddr7=rlInetFftSubNextHopInetAddr7, rlIpFftMibVersion=rlIpFftMibVersion, rlIpmFftInputVlanTag=rlIpmFftInputVlanTag, rlIpxFftSubOutIfIndex=rlIpxFftSubOutIfIndex, rlInetFftSubNextHopSetRefCount=rlInetFftSubNextHopSetRefCount, rlInetFftSubNextHopInetAddr5Type=rlInetFftSubNextHopInetAddr5Type, rlIpv6FftRedBoundary=rlIpv6FftRedBoundary, rlInetFftSubNextHopInetAddr1=rlInetFftSubNextHopInetAddr1, rlInetFftSubNextHopInetAddr8Type=rlInetFftSubNextHopInetAddr8Type, rlIpmFftTable=rlIpmFftTable, rlInetFftStnIndex=rlInetFftStnIndex, rlIpxFftInReceives=rlIpxFftInReceives, rlInetFftNextHopNetAddress=rlInetFftNextHopNetAddress, rlIpmFftNumEntry=rlIpmFftNumEntry, rlFFT=rlFFT, rlIpmFftPortIndex=rlIpmFftPortIndex, rlInetFftStnDstMacAddress=rlInetFftStnDstMacAddress, rlInetFftSubNextHopInetAddr7Type=rlInetFftSubNextHopInetAddr7Type, rlInetFftNextHopInetAddress=rlInetFftNextHopInetAddress, rlInetFftL2InfoEntry=rlInetFftL2InfoEntry, rlIpxFftMibVersion=rlIpxFftMibVersion, rlIpxFftStnDstIpxAddrType=rlIpxFftStnDstIpxAddrType, rlIpxFftSubEntry=rlIpxFftSubEntry, rlIpmFftForwardAction=rlIpmFftForwardAction, rlIpmFftPortTagEntry=rlIpmFftPortTagEntry, rlInetFftSubNextHopIfindex4=rlInetFftSubNextHopIfindex4, rlInetFftSubNextHopIfindex8=rlInetFftSubNextHopIfindex8, rlIpmFFT=rlIpmFFT, rlIpxFftSubIndex=rlIpxFftSubIndex, rlIpxMaxFftNumber=rlIpxMaxFftNumber, rlIpxFftSubTci=rlIpxFftSubTci, rlInetFftStnDstRouteInetPrefix=rlInetFftStnDstRouteInetPrefix, rlIpxFftCountersIndex=rlIpxFftCountersIndex, rlIpxFftForwDatagrams=rlIpxFftForwDatagrams, rlIpxFftNumTable=rlIpxFftNumTable, rlIpmFftNumTable=rlIpmFftNumTable, rlIpmFftForwDatagrams=rlIpmFftForwDatagrams, rlInetFftL2InfoTable=rlInetFftL2InfoTable, rlInetFftNextHopInetAddressType=rlInetFftNextHopInetAddressType, rlInetFftNextHopType=rlInetFftNextHopType, rlIpmFftDynamicSupported=rlIpmFftDynamicSupported, rlInetFftStnDstInetAddress=rlInetFftStnDstInetAddress, rlInetFftSubNextHopIfindex7=rlInetFftSubNextHopIfindex7, rlIpmFftInReceives=rlIpmFftInReceives, rlInetFftSubNextHopInetAddr6Type=rlInetFftSubNextHopInetAddr6Type, rlInetFftNumInetTomeRoutesNumber=rlInetFftNumInetTomeRoutesNumber, rlIpmFftPortTagTable=rlIpmFftPortTagTable, rlIpxFftStnAge=rlIpxFftStnAge, rlInetFftNextHopReferenceCount=rlInetFftNextHopReferenceCount, rlInetFftStnTaggedMode=rlInetFftStnTaggedMode, rlInetFftAgingTimeSupported=rlInetFftAgingTimeSupported, rlIpxFftStnDstNode=rlIpxFftStnDstNode, rlInetFftSubNextHopIfindex6=rlInetFftSubNextHopIfindex6, rlIpmFftNumIndex=rlIpmFftNumIndex, rlIpxFftStnTable=rlIpxFftStnTable, rlIpxFftSrcAddrSupported=rlIpxFftSrcAddrSupported, rlInetFftL2InfoTaggedMode=rlInetFftL2InfoTaggedMode, rlIpxFftNumEntry=rlIpxFftNumEntry, rlIpFftSrcAddrSupported=rlIpFftSrcAddrSupported, rlInetFftL2InfoIfindex=rlInetFftL2InfoIfindex, rlIpxFftStnEncapsulation=rlIpxFftStnEncapsulation, rlIpxFftCountersTable=rlIpxFftCountersTable, rlInetFftL2InfoDstMacAddress=rlInetFftL2InfoDstMacAddress, rlIpxFftSubSrcMacAddress=rlIpxFftSubSrcMacAddress, rlIpv6FftYellowBoundary=rlIpv6FftYellowBoundary, rlIpxFftStnFacsIndex=rlIpxFftStnFacsIndex, rlInetFftStnOutIfIndex=rlInetFftStnOutIfIndex, rlInetFftSubNextHopInetAddr1Type=rlInetFftSubNextHopInetAddr1Type, rlInetFftSubNextHopIfindex5=rlInetFftSubNextHopIfindex5, rlInetFftCountersTable=rlInetFftCountersTable, rlIpxFftDynamicSupported=rlIpxFftDynamicSupported, rlInetFftNextHopOutIfIndex=rlInetFftNextHopOutIfIndex, rlInetFftStnSrcMacAddress=rlInetFftStnSrcMacAddress, rlInetFftNumEntry=rlInetFftNumEntry, rlInetFftSubNextHopInetAddr2Type=rlInetFftSubNextHopInetAddr2Type, rlInetFftInDiscards=rlInetFftInDiscards, rlInetFftL2InfoReferenceCount=rlInetFftL2InfoReferenceCount, rlInetFftSubNextHopIfindex3=rlInetFftSubNextHopIfindex3, rlInetFftSubAge=rlInetFftSubAge, rlInetFftL2InfoOutIfIndex=rlInetFftL2InfoOutIfIndex, PYSNMP_MODULE_ID=rlFFT, NetNumber=NetNumber, rlIpFFT=rlIpFFT, rlIpmFftSrcIpMask=rlIpmFftSrcIpMask, rlInetFftNextHopEntry=rlInetFftNextHopEntry, rlInetFftNextHopVid=rlInetFftNextHopVid, rlInetFftNumTable=rlInetFftNumTable, rlIpxFftSubDstMacAddress=rlIpxFftSubDstMacAddress, rlInetFftL2InfoValid=rlInetFftL2InfoValid, rlInetFftStnTable=rlInetFftStnTable, rlInetFftNextHopTable=rlInetFftNextHopTable)
