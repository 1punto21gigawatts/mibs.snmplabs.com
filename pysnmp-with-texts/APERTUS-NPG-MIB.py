#
# PySNMP MIB module APERTUS-NPG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-NPG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, iso, NotificationType, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, enterprises, Integer32, Counter64, Counter32, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "iso", "NotificationType", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "enterprises", "Integer32", "Counter64", "Counter32", "MibIdentifier", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
npg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 5))
npgMib = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 5, 1))
npgMibVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgMibVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: npgMibVersionNumber.setDescription('The version number of this MIB.')
npgVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: npgVersionNumber.setDescription('The version number of NPG.')
npgSessionTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3), )
if mibBuilder.loadTexts: npgSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionTable.setDescription('Table of active sessions')
npgSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1), ).setIndexNames((0, "APERTUS-NPG-MIB", "npgSessionName"))
if mibBuilder.loadTexts: npgSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionEntry.setDescription('This table contains the list of active print sessions')
npgSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionName.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionName.setDescription('Name of print session')
npgSessionCorrectState = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCorrectState.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCorrectState.setDescription('State print session should be in')
npgSessionCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCurrentState.setDescription('State print session is in')
npgSessionWhenLastUp = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionWhenLastUp.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionWhenLastUp.setDescription('Time print session was last up')
npgSessionWhenLastDown = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionWhenLastDown.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionWhenLastDown.setDescription('Time print session was last down')
npgSessionLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionLastErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionLastErrorCode.setDescription('Last error code print session generated')
npgSessionLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionLastErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionLastErrorMessage.setDescription('Last error message print session generated')
npgSessionTimeOfNextRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionTimeOfNextRetry.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionTimeOfNextRetry.setDescription('Time print session attempt re-connect')
npgSessionCurrentRetryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCurrentRetryValue.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCurrentRetryValue.setDescription('Time period print session waits before attempting re-connect')
npgSessionRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionRetryCount.setDescription('Number of times print session had attempted re-connect so far')
npgSessionTimeOfActiveReset = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionTimeOfActiveReset.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionTimeOfActiveReset.setDescription('Time of last active session stats reset')
npgSessionActiveStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsProcessingTime.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionActiveStatsProcessingTime.setDescription('Active Stats -- time spent processing jobs')
npgSessionActiveStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsBytesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionActiveStatsBytesPrinted.setDescription('Active Stats -- total bytes printed')
npgSessionActiveStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsLinesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionActiveStatsLinesPrinted.setDescription('Active Stats -- total lines printed')
npgSessionActiveStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsPagesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionActiveStatsPagesPrinted.setDescription('Active Stats -- total pages printed')
npgSessionActiveStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsJobsPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionActiveStatsJobsPrinted.setDescription('Active Stats -- total jobs printed')
npgSessionCumulativeStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsProcessingTime.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCumulativeStatsProcessingTime.setDescription('Cumulative Stats -- time spent processing jobs')
npgSessionCumulativeStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsBytesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCumulativeStatsBytesPrinted.setDescription('Cumulative Stats -- total bytes printed')
npgSessionCumulativeStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsLinesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCumulativeStatsLinesPrinted.setDescription('Cumulative Stats -- total lines printed')
npgSessionCumulativeStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsPagesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCumulativeStatsPagesPrinted.setDescription('Cumulative Stats -- total pages printed')
npgSessionCumulativeStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsJobsPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionCumulativeStatsJobsPrinted.setDescription('Cumulative Stats -- total jobs printed')
npgSessionConfigTn3270eServer = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigTn3270eServer.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionConfigTn3270eServer.setDescription('Configured TN3270E server')
npgSessionConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionConfigPort.setDescription('Configured port')
npgSessionConfigPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: npgSessionConfigPrinterName.setDescription('Configured printer name')
npgDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4), )
if mibBuilder.loadTexts: npgDestinationTable.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationTable.setDescription('Table of active destinations')
npgDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1), ).setIndexNames((0, "APERTUS-NPG-MIB", "npgDestinationName"))
if mibBuilder.loadTexts: npgDestinationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationEntry.setDescription('This table contains the list of active print destinations')
npgDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationName.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationName.setDescription('Name of print destination')
npgDestinationTimeOfActiveReset = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationTimeOfActiveReset.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationTimeOfActiveReset.setDescription('Time of last active destination stats reset')
npgDestinationActiveStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsProcessingTime.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationActiveStatsProcessingTime.setDescription('Active Stats -- time spent processing jobs')
npgDestinationActiveStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsBytesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationActiveStatsBytesPrinted.setDescription('Active Stats -- total bytes printed')
npgDestinationActiveStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsLinesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationActiveStatsLinesPrinted.setDescription('Active Stats -- total lines printed')
npgDestinationActiveStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsPagesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationActiveStatsPagesPrinted.setDescription('Active Stats -- total pages printed')
npgDestinationActiveStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsJobsPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationActiveStatsJobsPrinted.setDescription('Active Stats -- total jobs printed')
npgDestinationCumulativeStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsProcessingTime.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationCumulativeStatsProcessingTime.setDescription('Cumulative Stats -- time spent processing jobs')
npgDestinationCumulativeStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsBytesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationCumulativeStatsBytesPrinted.setDescription('Cumulative Stats -- total bytes printed')
npgDestinationCumulativeStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsLinesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationCumulativeStatsLinesPrinted.setDescription('Cumulative Stats -- total lines printed')
npgDestinationCumulativeStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsPagesPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationCumulativeStatsPagesPrinted.setDescription('Cumulative Stats -- total pages printed')
npgDestinationCumulativeStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsJobsPrinted.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationCumulativeStatsJobsPrinted.setDescription('Cumulative Stats -- total jobs printed')
npgDestinationConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationConfigType.setDescription('Print destination type')
npgDestinationConfigProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationConfigProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: npgDestinationConfigProfileName.setDescription('Print destination profile name')
mibBuilder.exportSymbols("APERTUS-NPG-MIB", npgSessionCumulativeStatsPagesPrinted=npgSessionCumulativeStatsPagesPrinted, npgDestinationName=npgDestinationName, npgSessionActiveStatsPagesPrinted=npgSessionActiveStatsPagesPrinted, npgSessionConfigTn3270eServer=npgSessionConfigTn3270eServer, npgSessionTable=npgSessionTable, npgSessionActiveStatsLinesPrinted=npgSessionActiveStatsLinesPrinted, npgDestinationActiveStatsJobsPrinted=npgDestinationActiveStatsJobsPrinted, npgDestinationCumulativeStatsPagesPrinted=npgDestinationCumulativeStatsPagesPrinted, npgDestinationTable=npgDestinationTable, npgSessionLastErrorCode=npgSessionLastErrorCode, npgDestinationConfigType=npgDestinationConfigType, npgSessionTimeOfActiveReset=npgSessionTimeOfActiveReset, enterprises=enterprises, npgSessionWhenLastUp=npgSessionWhenLastUp, npgSessionEntry=npgSessionEntry, npgVersionNumber=npgVersionNumber, isg=isg, npgSessionCurrentRetryValue=npgSessionCurrentRetryValue, npgSessionActiveStatsProcessingTime=npgSessionActiveStatsProcessingTime, npgSessionCumulativeStatsProcessingTime=npgSessionCumulativeStatsProcessingTime, npgSessionConfigPrinterName=npgSessionConfigPrinterName, npgDestinationActiveStatsLinesPrinted=npgDestinationActiveStatsLinesPrinted, npgSessionTimeOfNextRetry=npgSessionTimeOfNextRetry, npgMibVersionNumber=npgMibVersionNumber, npgDestinationActiveStatsPagesPrinted=npgDestinationActiveStatsPagesPrinted, npg=npg, npgDestinationConfigProfileName=npgDestinationConfigProfileName, apertus=apertus, npgDestinationCumulativeStatsLinesPrinted=npgDestinationCumulativeStatsLinesPrinted, npgDestinationCumulativeStatsProcessingTime=npgDestinationCumulativeStatsProcessingTime, npgSessionCorrectState=npgSessionCorrectState, npgSessionCumulativeStatsLinesPrinted=npgSessionCumulativeStatsLinesPrinted, npgMib=npgMib, mgmt=mgmt, npgDestinationCumulativeStatsJobsPrinted=npgDestinationCumulativeStatsJobsPrinted, experimental=experimental, npgSessionRetryCount=npgSessionRetryCount, npgSessionActiveStatsBytesPrinted=npgSessionActiveStatsBytesPrinted, npgDestinationEntry=npgDestinationEntry, npgDestinationTimeOfActiveReset=npgDestinationTimeOfActiveReset, npgSessionWhenLastDown=npgSessionWhenLastDown, directory=directory, private=private, npgDestinationActiveStatsProcessingTime=npgDestinationActiveStatsProcessingTime, npgSessionName=npgSessionName, internet=internet, npgSessionLastErrorMessage=npgSessionLastErrorMessage, npgDestinationActiveStatsBytesPrinted=npgDestinationActiveStatsBytesPrinted, npgSessionConfigPort=npgSessionConfigPort, npgSessionCumulativeStatsBytesPrinted=npgSessionCumulativeStatsBytesPrinted, npgSessionCumulativeStatsJobsPrinted=npgSessionCumulativeStatsJobsPrinted, npgSessionCurrentState=npgSessionCurrentState, npgDestinationCumulativeStatsBytesPrinted=npgDestinationCumulativeStatsBytesPrinted, npgSessionActiveStatsJobsPrinted=npgSessionActiveStatsJobsPrinted)
