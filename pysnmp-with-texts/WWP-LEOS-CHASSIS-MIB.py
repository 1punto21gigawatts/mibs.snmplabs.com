#
# PySNMP MIB module WWP-LEOS-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, Counter32, TimeTicks, Gauge32, ModuleIdentity, Bits, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Counter32", "TimeTicks", "Gauge32", "ModuleIdentity", "Bits", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "NotificationType", "Counter64")
MacAddress, DisplayString, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "DateAndTime")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11))
wwpLeosChassisMIB.setRevisions(('2012-09-27 00:00', '2011-11-14 00:00', '2011-03-22 00:00', '2010-01-27 00:00', '2009-11-09 00:00', '2008-10-06 00:00', '2008-06-14 00:00', '2007-05-06 00:48', '2003-04-28 00:00', '2003-03-11 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosChassisMIB.setRevisionsDescriptions(('Added new last reset reasons.', 'Added wwpLeosChassisDoorAlarmTable for configuring door alarm dampening on the 3911.', 'Added wwpLeosChassisExternalAlarmStatusChangeNotification.', 'Added wwpLeosChassisInnerDoorStatusChangeNotification and wwpLeosChassisOuterDoorStatusChangeNotification.', 'Added objects to specify chassis Attributes like the deviceId, h/w version, param version, Inner/Outer Door status, Mfg Date, MAC address. Also added notification objects for Dying Gasp and Inner/Outer Door open/close.', 'The MIB module for the WWP Specifc chassis mib. It contains the variables which applies on the whole chassis for the WWP System.', 'Added the power capabilities and FPGA AOAM fields under wwpLeosChassisPlatformCaps.', 'Updated the battery status. Added the four notifications for the battery state change. The new added notification wwpLeosChassisPowerSourceNotification replaces the wwpLeosChassisPowerSwitchNotification.', 'Added valid range check for time-offset settings using the wwpLeosChassisSystemTimeOffset object. The range was previously unchecked accepting the maximum 32bit signed integer values.', 'Changed the temperature thresholds to be read-write. Added Battery States and updated the notification for the battery states. Added dry contact, door and RF notifications.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosChassisMIB.setLastUpdated('201209270000Z')
if mibBuilder.loadTexts: wwpLeosChassisMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosChassisMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosChassisMIB.setDescription('Added wwpLeosSystemPartNumber and wwpLeosSystemSerialNumber')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class FileName(TextualConvention, OctetString):
    description = 'Represents the textual convention which defines the name string and display hint'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

wwpLeosChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1))
wwpLeosChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1))
wwpLeosChassisNotifAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2))
wwpLeosChassisModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1))
wwpLeosChassisBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2))
wwpLeosChassisPowerSupplyModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3))
wwpLeosChassisFanModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4))
wwpLeosChassisTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5))
wwpLeosChassisNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 7))
wwpLeosChassisPlatformCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8))
wwpLeosChassisResourceCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9))
wwpLeosChassisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2))
wwpLeosChassisMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0))
wwpLeosChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3))
wwpLeosChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3, 1))
wwpLeosChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 3, 2))
wwpLeosChassisRebootState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRebootState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisRebootState.setDescription('Setting this to true will cause chassis to reboot only if software upgrade is not in progress.')
wwpLeosChassisSystemTimeOffsetScope = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("user", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffsetScope.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffsetScope.setDescription('This object specifies who has configured system time-offset.')
wwpLeosChassisSystemTimeOffset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-43200, 50400))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSystemTimeOffset.setDescription('The system time-offset in seconds from UTC -- positive->east, negative->west.')
wwpLeosChassisSerialConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleState.setDescription('This object specifies the current state of serial console. It can be set to disabled/enabled.')
wwpLeosChassisShellInactivityTimerState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimerState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimerState.setDescription('This object specifies if device should close the shell sessions which are inactive for sometime. The time is decided by wwpLeosChassisShellInactivityTimeout.')
wwpLeosChassisShellInactivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1500))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisShellInactivityTimeout.setDescription('This object specifies the idle time after which the device will forcefully close the shell sessions if enabled (decided by wwpLeosChassisShellInactivityTimerState).')
wwpLeosChassisSerialConsoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleDataBits.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleDataBits.setDescription('The data bits to be used for the serial console.')
wwpLeosChassisSerialConsoleParity = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("even", 1), ("mark", 2), ("none", 3), ("odd", 4), ("space", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleParity.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleParity.setDescription('The parity to be used for the serial console.')
wwpLeosChassisSerialConsoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleStopBits.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSerialConsoleStopBits.setDescription('The stop bits to be used for the serial console.')
wwpLeosChassisRebootNow = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRebootNow.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisRebootNow.setDescription('Setting this to true will force the device to reboot irrespective of whether software upgrade is in progress or not.')
wwpLeosChassisShellLoginTimerState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimerState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimerState.setDescription('This object specifies if device should terminate a login session which is inactive for sometime. The time is decided by wwpLeosChassisShellLoginTimeout.')
wwpLeosChassisShellLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisShellLoginTimeout.setDescription('This object specifies the idle time after which the device will forcefully close the login session if enabled by wwpLeosChassisShellLoginTimerState.')
wwpLeosChassisScheduledRebootTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17), )
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTable.setDescription('Schedule a system reboot for this box.')
wwpLeosChassisWelcomeBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 18), FileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisWelcomeBanner.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisWelcomeBanner.setDescription('Gets or sets the name of the current welcome banner file used after the CLI Login.')
wwpLeosChassisResetWelcomeBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisResetWelcomeBanner.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResetWelcomeBanner.setDescription('Resets the welcome banner to the default if set.')
wwpLeosChassisLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 20), FileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisLoginBanner.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisLoginBanner.setDescription('Gets or sets the name of the current login banner file used before the CLI Login.')
wwpLeosChassisResetLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisResetLoginBanner.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResetLoginBanner.setDescription('Resets the login banner to the default if set.')
wwpLeosChassisMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 50), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisMacAddress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisMacAddress.setDescription('This object indicates the chassis MAC address.')
wwpLeosChassisDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisDeviceId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDeviceId.setDescription('This object indicates the device ID of the chassis.')
wwpLeosChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSerialNumber.setDescription('This object indicates the chassis serial number.')
wwpLeosChassisMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisMfgDate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisMfgDate.setDescription('This object indicates the chassis manufacturing date.')
wwpLeosChassisParamVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisParamVersion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisParamVersion.setDescription('This object indicates the chassis param version.')
wwpLeosChassisHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisHardwareVersion.setDescription('This object indicates the chassis Hardware version.')
wwpLeosChassisInnerDoorStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("closed", 2), ("override", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatus.setDescription('Specifies the status of the Inner Door.')
wwpLeosChassisOuterDoorStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatus.setDescription('Specifies the status of the Outer Door.')
wwpLeosChassisPostState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisPostState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostState.setDescription('Specifies the POST state of the chassis.')
wwpLeosChassisPostResultTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61), )
if mibBuilder.loadTexts: wwpLeosChassisPostResultTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostResultTable.setDescription('Display the Post Results only when the Chassis Post State is enabled.')
wwpLeosChassisExternalAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("cleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatus.setDescription('This OID is sent in the wwpLeosChassisExternalAlarmStatusChangeNotification trap to identify whether a specific external alarm has been raised or cleared.')
wwpLeosChassisExternalAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarm.setDescription('This OID is sent in the wwpLeosChassisExternalAlarmStatusChangeNotification trap to identify which alarm was triggered.')
wwpLeosSystemPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSystemPartNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSystemPartNumber.setDescription('This object indicates the system part/revision number.')
wwpLeosSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosSystemSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosSystemSerialNumber.setDescription('This object indicates the system serial number.')
wwpLeosChassisPostResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostResultIndex"))
if mibBuilder.loadTexts: wwpLeosChassisPostResultEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostResultEntry.setDescription('.')
wwpLeosChassisPostResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: wwpLeosChassisPostResultIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostResultIndex.setDescription('Unique index for the Post Result Table.')
wwpLeosChassisPostResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPostResultCode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostResultCode.setDescription('The result code returned by the device POST test.')
wwpLeosChassisPostResultMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 61, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPostResultMessage.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostResultMessage.setDescription('The test result string generated by the POST tests')
wwpLeosChassisScheduledRebootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisScheduledRebootIndex"))
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootEntry.setDescription('An entry in the ScheduledRebootTable holding the date/time.')
wwpLeosChassisScheduledRebootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootIndex.setDescription('Denotes singleton table entry.')
wwpLeosChassisScheduledRebootTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTimestamp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootTimestamp.setDescription('The date and time of the reboot scheduled for this box.')
wwpLeosChassisScheduledRebootActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootActive.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootActive.setDescription('Indicates whether a scheduled reboot is desired or exists.')
wwpLeosChassisScheduledRebootNopost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootNopost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootNopost.setDescription('Indicates whether POST is disabled for next reboot.')
wwpLeosChassisScheduledRebootDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisScheduledRebootDelay.setDescription('Denotes seconds to wait before reboot.')
wwpLeosChassisDoorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64), )
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmTable.setDescription('Door alarm settings.')
wwpLeosChassisDoorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmIndex"))
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmEntry.setDescription('An entry in the DoorAlarmTable containing door alarm flap settings.')
wwpLeosChassisDoorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inner", 0), ("outer", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmIndex.setDescription('An index into the DoorAlarmTable.')
wwpLeosChassisDoorAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatus.setDescription('Indicates if the door alarm is enabled or disabled.')
wwpLeosChassisDoorAlarmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmAdminStatus.setDescription('Indicates if the door alarm admin is set to enabled or disabled.')
wwpLeosChassisDoorAlarmFlapDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetect.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetect.setDescription('Indicates if the door alarm flap detection is either enabled or disabled.')
wwpLeosChassisDoorAlarmFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapCount.setDescription('The number of events that must occur during the door flap detect time for door monitoring to be disabled.')
wwpLeosChassisDoorAlarmFlapDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetectTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapDetectTime.setDescription('The amount of time in seconds during which the door flap count must be reached for door monitoring to be disabled.')
wwpLeosChassisDoorAlarmFlapHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 1, 64, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmFlapHoldTime.setDescription('The amount of time in seconds required to elapse before door alarm monitoring will be re-enabled.')
wwpLeosChassisPowerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosChassisPowerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerTable.setDescription('A list of power supply entries.')
wwpLeosChassisPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyNum"))
if mibBuilder.loadTexts: wwpLeosChassisPowerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerEntry.setDescription('An entry in the powerTable providing objects for a power supply.')
wwpLeosChassisPowerSupplyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyNum.setDescription('Denotes the power supply.')
wwpLeosChassisPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("faulted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyState.setDescription("Specifies the power supply's state.")
wwpLeosChassisPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2), ("unequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyType.setDescription('Specifies the power supply type.')
wwpLeosChassisPowerSupplyRedundantState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("protected", 1), ("unprotected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyRedundantState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyRedundantState.setDescription('Specfiies power supply redundant state.')
wwpLeosChassisRedPowerSupplyNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisRedPowerSupplyNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisRedPowerSupplyNotifEnabled.setDescription('This variable indicates whether the system generates the wwpLeosChassisRedPowerSupplyNotification. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wwpLeosChassisFanModuleTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleTable.setDescription('A list of fan module entries.')
wwpLeosChassisFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleNum"))
if mibBuilder.loadTexts: wwpLeosChassisFanModuleEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleEntry.setDescription('An entry in the fan module Table providing objects for a fan module.')
wwpLeosChassisFanModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNum.setDescription('Denotes the Fan module.')
wwpLeosChassisFanModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("hotSwappable", 2), ("unequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleType.setDescription("Denotes the fan modules type. 'fixed' means fan is fixed and cannot be removed. 'hotswappable' means fan can be removed and inserted whenever required. 'unequipped' means fan is not installed.")
wwpLeosChassisFanModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("pending", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleStatus.setDescription("Denotes the fan modules status. 'ok' means fan is operational, 'pending' means fan is installed but statistics are not yet available, 'failure' means fan is not working.")
wwpLeosChassisFanAvgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanAvgSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanAvgSpeed.setDescription('The fans average speed in RPM. The average is calculated on a continuous basis from system startup.')
wwpLeosChassisFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanCurrentSpeed.setDescription('The current speed of the fan in RPM.')
wwpLeosChassisFanMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisFanMinSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanMinSpeed.setDescription('The minimum speed of the fan in RPM.')
wwpLeosChassisFanModuleNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotifEnabled.setDescription('This variable indicates whether the system generates the wwpLeosChassisFanModuleNotification. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wwpLeosChassisTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorTable.setDescription('A list of Temp Sensors entries.')
wwpLeosChassisTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1), ).setIndexNames((0, "WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorNum"))
if mibBuilder.loadTexts: wwpLeosChassisTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorEntry.setDescription('An entry in the Temp Sensor Table providing objects for a Temp Sensor.')
wwpLeosChassisTempSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorNum.setDescription('Denotes the Temp sensor module.')
wwpLeosChassisTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 2), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorValue.setDescription('The value of temperature measured by the sensor inside the device in degrees C.')
wwpLeosChassisTempSensorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorHighThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorHighThreshold.setDescription('The highest value that the object wwpLeosChassisTempSensorValue may obtain at which a wwpLeosChassisMIBTempNotification is sent.')
wwpLeosChassisTempSensorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorLowThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorLowThreshold.setDescription('The Lowest value that the object wwpLeosChassisTempSensorValue may obtain at which a wwpLeosChassisMIBTempNotification is sent.')
wwpLeosChassisTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("higherThanThreshold", 0), ("normal", 1), ("lowerThanThreshold", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisTempSensorState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempSensorState.setDescription('The state indicates whether the current temp is greater than, equal to or less than the threshold state.')
wwpLeosChassisTempNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempNotifEnabled.setDescription('This variable indicates whether the system generates the wwpLeosChassisTempNotification. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisTempHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempHighThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempHighThreshold.setDescription('This variable indicates the high temperature threshold to be used by the device when checking temperature of the device. This object is similar to wwpLeosChassisTempSensorHighThreshold only difference is that wwpLeosChassisTempHighThreshold is global attribute not per sensor based. wwpLeosChassisTempSensorHighThreshold will have the same value as wwpLeosChassisTempHighThreshold at all times. wwpLeosChassisTempSensorHighThreshold is basically redundant.')
wwpLeosChassisTempLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisTempLowThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempLowThreshold.setDescription('This variable indicates the low temperature threshold to be used by the device when checking temperature of the device. This object is similar to wwpLeosChassisTempSensorLowThreshold only difference is that wwpLeosChassisTempLowThreshold is global attribute not per sensor based. wwpLeosChassisTempSensorLowThreshold will have the same value as wwpLeosChassisTempLowThreshold at all times. wwpLeosChassisTempSensorLowThreshold is basically redundant.')
wwpPowerSwitchingOp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("acToBattery", 1), ("bateryToAC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setStatus('current')
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setDescription('The object to notify whether the input power supply is switching from ac to Battery or vice versa.')
wwpLeosChassisBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("online", 0), ("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatus.setDescription("Describes the current status of the battery. If battery is connected then the status is indicated as 'present'.")
wwpLeosChassisBatteryVoltageLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevel.setDescription('Describes the current voltage level of the battery.')
wwpLeosChassisBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisBatteryCondition.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryCondition.setDescription('Describes the current condition of the battery.')
wwpLeosChassisPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryPower", 1), ("battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPowerSource.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSource.setDescription('Describes the current power source for the device.')
wwpLeosChassisBatteryNormalStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryNormalStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryNormalStateName.setDescription('The state name associated with the normal state of the battery.')
wwpLeosChassisBatteryLowStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateName.setDescription('The state name associated with the low state of the battery.')
wwpLeosChassisBatteryGoodStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryGoodStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryGoodStateName.setDescription('The state name associated with the good state of the battery.')
wwpLeosChassisBatteryBadStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateName.setDescription('The state name associated with the bad state of the battery.')
wwpLeosChassisBatteryPresentStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPresentStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryPresentStateName.setDescription("The state name associated with the battery state 'present'.")
wwpLeosChassisBatteryMissingStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateName.setDescription("The state name associated with the battery state 'missing'.")
wwpLeosChassisBatteryPowerPrimaryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerPrimaryStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerPrimaryStateName.setDescription('The state name associated with the state when the device is on primary power.')
wwpLeosChassisBatteryPowerBatteryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerBatteryStateName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerBatteryStateName.setDescription('The state name associated with the state when the device is on battery power.')
wwpLeosChassisBatteryLowStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryLowStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpLeosChassisBatteryStatusNotification in case of battery state changing from normal to low or vice versa. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisBatteryBadStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryBadStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpLeosChassisBatteryStatusNotification in case of battery state changing from good to bad or vice versa. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisBatteryMissingStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryMissingStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpLeosChassisBatteryStatusNotification in case of battery state changing from present to missing or vice versa. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisBatteryPowerNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 2, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryPowerNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpLeosChassisBatteryStatusNotification in case of input power changing from primary to battery or vice versa. A false value prevents this notifications from being generated by this system.')
wwpLeosChassisPostErrorCategory = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chassis", 1), ("blade", 2), ("port", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCategory.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCategory.setDescription('This variable indicates the category of post errors. This object is sent out as one of the binding in Post Error Notification.')
wwpLeosChassisPostErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostErrorValue.setDescription('This variable indicates the value associated with category wwpLeosChassisPostErrorCategory. If this value is 0 then no value corresponds to wwpLeosChassisPostErrorCategory.')
wwpLeosChassisPostErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostErrorCode.setDescription('This variable indicates the post error code.')
wwpLeosChassisPostErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisPostErrorMsg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostErrorMsg.setDescription('This variable indicates the post error message associated with category wwpLeosChassisPostErrorCategory.')
wwpLeosChassisRebootReasonErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("snmp", 2), ("powerFailure", 3), ("appload", 4), ("errorHandler", 5), ("watchDog", 6), ("upgrade", 7), ("cli", 8), ("resetButton", 9), ("serviceModeChange", 10), ("guardianReboot", 11), ("guardianSaosRestart", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisRebootReasonErrorType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisRebootReasonErrorType.setDescription('This variable indicates the type of reboot reasons included in the wwpLeosChassisRebootNotification trap.')
wwpLeosChassisSnmpState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosChassisSnmpState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSnmpState.setDescription('This variable indicates the snmp state.')
wwpLeosChassisPowerSupplyStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 1)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyNum"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyState"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSupplyType"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyStatusNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSupplyStatusNotification.setDescription('A wwpLeosChassisPowerSupplyStatusNotification is sent if a power supply state is changed.')
wwpLeosChassisFanModuleNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 2)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleNum"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisFanModuleStatus"))
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisFanModuleNotification.setDescription('A wwpLeosChassisFanModuleNotification is sent if the fan state changes.')
wwpLeosChassisTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 3)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorState"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorValue"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorHighThreshold"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisTempSensorLowThreshold"))
if mibBuilder.loadTexts: wwpLeosChassisTempNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisTempNotification.setDescription('A wwpLeosChassisTempNotification is sent if the wwpLeosChassisTempSensorState is changed.')
wwpLeosChassisPowerSwitchNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 4)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpPowerSwitchingOp"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSwitchNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSwitchNotification.setDescription('A wwpLeosChassisPowerSwitchNotification is sent if the input power supply is switched to Battery from the AC power or switched from the Battery to the AC Power.')
wwpLeosChassisBatteryStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 5)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryStatus"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatusNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryStatusNotification.setDescription('A wwpLeosChassisBatteryStatusNotification is sent if the Battery status changes. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpLeosChassisBatteryVoltageLevelNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 6)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryVoltageLevel"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevelNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryVoltageLevelNotification.setDescription('A wwpLeosChassisBatteryVoltageLevelNotification is sent if the Battery voltage level changes from normal to low or vice versa. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpLeosChassisBatteryConditionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 7)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisBatteryCondition"))
if mibBuilder.loadTexts: wwpLeosChassisBatteryConditionNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisBatteryConditionNotification.setDescription('A wwpLeosChassisBatteryConditionNotification is sent if the Battery condition changes from good to bad or vice versa. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpLeosChassisPowerSourceNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 8)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPowerSource"))
if mibBuilder.loadTexts: wwpLeosChassisPowerSourceNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPowerSourceNotification.setDescription('A wwpLeosChassisPowerSourceNotification is sent if the Battery input power source changes from battery to primary power or vice versa. A device which supports wwpLeosChassisPowerSwitchNotification should not support this notification. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpLeosChassisPostErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 9)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorCategory"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorValue"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorCode"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisPostErrorMsg"))
if mibBuilder.loadTexts: wwpLeosChassisPostErrorNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPostErrorNotification.setDescription('A wwpLeosChassisPostErrorNotification is sent after cold start trap if the device detects post errors.')
wwpLeosChassisRebootNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 10)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisRebootReasonErrorType"))
if mibBuilder.loadTexts: wwpLeosChassisRebootNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisRebootNotification.setDescription('A wwpLeosChassisRebootNotification is sent whenever device is rebooted using CLI / SNMP.')
wwpLeosChassisSnmpStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 11)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSnmpState"))
if mibBuilder.loadTexts: wwpLeosChassisSnmpStateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisSnmpStateNotification.setDescription('This notification is sent everytime SNMP operational state is changed. If SNMP is globally disabled then device will not send COLD start Trap but instead it will send wwpLeosChassisSnmpStateNotification notification.')
wwpLeosChassisDyingGaspNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 12)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"))
if mibBuilder.loadTexts: wwpLeosChassisDyingGaspNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDyingGaspNotification.setDescription('This notification is sent when the system goes down')
wwpLeosChassisDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 13)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisInnerDoorStatus"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisDoorStatusChangeNotification.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosChassisDoorStatusChangeNotification.setDescription('This notification is sent each time the chassis door is opened.')
wwpLeosChassisInnerDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 14)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisInnerDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisInnerDoorStatusChangeNotification.setDescription('This notification is sent each time the chassis inner door status changes.')
wwpLeosChassisOuterDoorStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 15)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"))
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisOuterDoorStatusChangeNotification.setDescription('This notification is sent each time the chassis outer door status changes.')
wwpLeosChassisExternalAlarmStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 16)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDeviceId"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisHardwareVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisSerialNumber"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMacAddress"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisMfgDate"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisParamVersion"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisOuterDoorStatus"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisExternalAlarm"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisExternalAlarmStatus"))
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisExternalAlarmStatusChangeNotification.setDescription('This notification is sent each time the chassis external alarm status changes.')
wwpLeosChassisDoorAlarmStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 2, 0, 17)).setObjects(("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmIndex"), ("WWP-LEOS-CHASSIS-MIB", "wwpLeosChassisDoorAlarmStatus"))
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisDoorAlarmStatusChangeNotification.setDescription('This notification is sent each time the door alarm status changes.')
wwpLeosChassisPlatformCapsMaxPhysPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxPhysPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxPhysPorts.setDescription('The maximum number of physical ports supported on this machine.')
wwpLeosChassisPlatformCapsMaxAggrPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxAggrPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxAggrPorts.setDescription('The maximum number of LAGs supported on this machine.')
wwpLeosChassisPlatformCapsMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVlans.setDescription('The maximum number of VLANs supported on this machine.')
wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans.setDescription('The maximum number of IGMP VLANs snooped simultaneously on this machine.')
wwpLeosChassisPlatformCapsMaxMulticastgroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxMulticastgroups.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxMulticastgroups.setDescription('The maximum number of IGMP multicast groups supported on this machine.')
wwpLeosChassisPlatformCapsMaxRstpDomains = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxRstpDomains.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxRstpDomains.setDescription('The maximum number of RSTP domains supported on this machine.')
wwpLeosChassisPlatformCapsMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxTunnels.setDescription('The maximum number of transport tunnels supported on this machine.')
wwpLeosChassisPlatformCapsMaxIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIngressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxIngressTunnels.setDescription('The maximum number of ingress tunnels supported on this machine.')
wwpLeosChassisPlatformCapsMaxEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEgressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEgressTunnels.setDescription('The maximum number of egress tunnels supported on this machine.')
wwpLeosChassisPlatformCapsMaxVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVcs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVcs.setDescription('The maximum number of virtual circuits supported on this machine.')
wwpLeosChassisPlatformCapsMaxVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVss.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVss.setDescription('The maximum number of virtual switches supported on this machine.')
wwpLeosChassisPlatformCapsMaxVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVsMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxVsMembers.setDescription('The maximum number of virtual switch members supported on this machine.')
wwpLeosChassisPlatformCapsMaxLearnedMacs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxLearnedMacs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxLearnedMacs.setDescription('The maximum number of learned MACs supported on this machine.')
wwpLeosChassisPlatformCapsMaxFsmtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtEntries.setDescription('The maximum number of FSMT entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxFsmtCosEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtCosEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxFsmtCosEntries.setDescription('The maximum number of FSMT COS entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxL4ProtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxL4ProtEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxL4ProtEntries.setDescription('The maximum number of L4 Prot/P entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxSltEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltEntries.setDescription('The maximum number of SLT entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxSactEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSactEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSactEntries.setDescription('The maximum number of SACT entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxSmtEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSmtEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSmtEntries.setDescription('The maximum number of SMT entries supported on this machine.')
wwpLeosChassisPlatformCapsMaxEprSnids = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEprSnids.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxEprSnids.setDescription('The maximum number of EPR snids supported on this machine.')
wwpLeosChassisPlatformCapsMaxSltWildcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltWildcards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMaxSltWildcards.setDescription('The maximum number of SLT wildcards supported on this machine.')
wwpLeosChassisPlatformCapsVlanTranslation = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVlanTranslation.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVlanTranslation.setDescription('Denotes whether VLAN translation is supported on this machine.')
wwpLeosChassisPlatformCapsProtocolFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsProtocolFilters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsProtocolFilters.setDescription('Denotes whether protocol filters are supported on this machine.')
wwpLeosChassisPlatformCapsMultiSubsPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMultiSubsPerPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsMultiSubsPerPort.setDescription('Denotes whether multiple subscribers per port are supported on this machine.')
wwpLeosChassisPlatformCapsVplsFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVplsFpga.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsVplsFpga.setDescription('Denotes whether VPLS FPGA hardware exists on this machine.')
wwpLeosChassisPlatformCapsPbtFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsPbtFpga.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsPbtFpga.setDescription('Denotes whether PBT FPGA hardware exists on this machine.')
wwpLeosChassisPlatformCapsAoamFpga = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAoamFpga.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAoamFpga.setDescription('Denotes whether AOAM FPGA hardware exists on this machine.')
wwpLeosChassisPlatformCapsDcPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsDcPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsDcPower.setDescription('Denotes whether DC Power is supported on this machine.')
wwpLeosChassisPlatformCapsAcPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAcPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsAcPower.setDescription('Denotes whether AC Power is supported on this machine.')
wwpLeosChassisPlatformCapsRedunPower = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 8, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsRedunPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisPlatformCapsRedunPower.setDescription('Denotes whether Redundant Power is supported on this machine.')
wwpLeosChassisResourcesMaxPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPorts.setDescription('The maximum number of ports on this machine.')
wwpLeosChassisResourcesFreePorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePorts.setDescription('The maximum number of ports free on this machine.')
wwpLeosChassisResourcesMaxAggrPorts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxAggrPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxAggrPorts.setDescription('The maximum number of LAG ports on this machine.')
wwpLeosChassisResourcesFreeAggrs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeAggrs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeAggrs.setDescription('The number of LAG ports free on this machine.')
wwpLeosChassisResourcesMaxPortStateGrps = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPortStateGrps.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPortStateGrps.setDescription('The maximum number of Port State groups on this machine.')
wwpLeosChassisResourcesFreePortStateGrps = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePortStateGrps.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePortStateGrps.setDescription('The number of Port State Groups free on this machine.')
wwpLeosChassisResourcesMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlans.setDescription('The maximum number of VLANs on this machine.')
wwpLeosChassisResourcesFreeVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlans.setDescription('The number of VLANs free on this machine.')
wwpLeosChassisResourcesMaxVlanMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 170688))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlanMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVlanMembers.setDescription('The maximum number of VLAN members on this machine.')
wwpLeosChassisResourcesFreeVlanMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 170688))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlanMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVlanMembers.setDescription('The number of VLAN members free on this machine.')
wwpLeosChassisResourcesMaxEprSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEprSnets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEprSnets.setDescription('The maximum number of EPR VLANs on this machine.')
wwpLeosChassisResourcesFreeEprSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEprSnets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEprSnets.setDescription('The number of EPR VLANs free on this machine.')
wwpLeosChassisResourcesMaxMcastSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastSnets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastSnets.setDescription('The maximum number of multicast VLANs on this machine.')
wwpLeosChassisResourcesFreeMcastSnets = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastSnets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastSnets.setDescription('The number of multicast VLANs free on this machine.')
wwpLeosChassisResourcesMaxMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastGroups.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxMcastGroups.setDescription('The maximum number of multicast groups on this machine.')
wwpLeosChassisResourcesFreeMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastGroups.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeMcastGroups.setDescription('The number of multicast groups free on this machine.')
wwpLeosChassisResourcesMaxDhcpRelayAgnts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDhcpRelayAgnts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDhcpRelayAgnts.setDescription('The maximum number of DHCP Relay Agents on this machine.')
wwpLeosChassisResourcesFreeDhcpRelayAgnts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDhcpRelayAgnts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDhcpRelayAgnts.setDescription('The number of DHCP Relay Agents free on this machine.')
wwpLeosChassisResourcesMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTunnels.setDescription('The maximum number of tunnels on this machine.')
wwpLeosChassisResourcesFreeTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 20), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTunnels.setDescription('The number of tunnels free on this machine.')
wwpLeosChassisResourcesMaxIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxIngressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxIngressTunnels.setDescription('The maximum number of Ingress tunnels on this machine.')
wwpLeosChassisResourcesFreeIngressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeIngressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeIngressTunnels.setDescription('The number of Ingress tunnels free on this machine.')
wwpLeosChassisResourcesMaxEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEgressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxEgressTunnels.setDescription('The maximum number of Egress tunnels on this machine.')
wwpLeosChassisResourcesFreeEgressTunnels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 24), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEgressTunnels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeEgressTunnels.setDescription('The number of Egress tunnels free on this machine.')
wwpLeosChassisResourcesMaxVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVcs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVcs.setDescription('The maximum number of Virtual Circuits on this machine.')
wwpLeosChassisResourcesFreeVcs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 26), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVcs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVcs.setDescription('The number of Virtual Circuits free on this machine.')
wwpLeosChassisResourcesMaxVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVss.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVss.setDescription('The maximum number of Virtual Switches on this machine.')
wwpLeosChassisResourcesFreeVss = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 28), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVss.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVss.setDescription('The number of Virtual Switches free on this machine.')
wwpLeosChassisResourcesMaxVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVsMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxVsMembers.setDescription('The maximum number of Virtual Switch members on this machine.')
wwpLeosChassisResourcesFreeVsMembers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 30), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 5334))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVsMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeVsMembers.setDescription('The number of Virtual Switch members free on this machine.')
wwpLeosChassisResourcesMaxSlevelWcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevelWcards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevelWcards.setDescription('The maximum number of Service Level Wildcards on this machine.')
wwpLeosChassisResourcesFreeSlevelWcards = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 32), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevelWcards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevelWcards.setDescription('The number of Service Level Wildcards free on this machine.')
wwpLeosChassisResourcesMaxSlevels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 102))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSlevels.setDescription('The maximum number of Service Level Wildcards on this machine.')
wwpLeosChassisResourcesFreeSlevels = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 102))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevels.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSlevels.setDescription('The number of Service Levels free on this machine.')
wwpLeosChassisResourcesMaxSmappings = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappings.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappings.setDescription('The maximum number of Service Mappings on this machine.')
wwpLeosChassisResourcesFreeSmappings = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 36), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappings.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappings.setDescription('The number of Service Mappings free on this machine.')
wwpLeosChassisResourcesMaxSmappingCosResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingCosResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingCosResources.setDescription('The maximum number of Service Mapping COS resources on this machine.')
wwpLeosChassisResourcesFreeSmappingCosResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 38), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingCosResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingCosResources.setDescription('The number of Service Mapping COS resources free on this machine.')
wwpLeosChassisResourcesMaxSmappingPrtclResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingPrtclResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmappingPrtclResources.setDescription('The maximum number of Service Mapping Protocol resources on this machine.')
wwpLeosChassisResourcesFreeSmappingPrtclResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingPrtclResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmappingPrtclResources.setDescription('The number of Service Mapping Protocol resources free on this machine.')
wwpLeosChassisResourcesMaxQosResEgs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxQosResEgs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxQosResEgs.setDescription('The maximum number of QosResEg resources on this machine.')
wwpLeosChassisResourcesFreeQosResEgs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 42), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeQosResEgs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeQosResEgs.setDescription('The number of QosResEg resources free on this machine.')
wwpLeosChassisResourcesMaxTprofGblCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofGblCscdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofGblCscdEntries.setDescription('The maximum number of TprofGblCscdEntries on this machine.')
wwpLeosChassisResourcesFreeTprofGblCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 44), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofGblCscdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofGblCscdEntries.setDescription('The number of TprofGblCscdEntries free on this machine.')
wwpLeosChassisResourcesMaxTprofCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofCscdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofCscdEntries.setDescription('The maximum number of TprofCscdEntries on this machine.')
wwpLeosChassisResourcesFreeTprofCscdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 46), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofCscdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofCscdEntries.setDescription('The number of TprofCscdEntries free on this machine.')
wwpLeosChassisResourcesMaxTprofStdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofStdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxTprofStdEntries.setDescription('The maximum number of TprofStdEntries on this machine.')
wwpLeosChassisResourcesFreeTprofStdEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 48), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 336))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofStdEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeTprofStdEntries.setDescription('The number of TprofStdEntries free on this machine.')
wwpLeosChassisResourcesMaxSaccessEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSaccessEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSaccessEntries.setDescription('The maximum number of SaccessEntries on this machine.')
wwpLeosChassisResourcesFreeSaccessEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 50), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2074))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSaccessEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSaccessEntries.setDescription('The number of SaccessEntries free on this machine.')
wwpLeosChassisResourcesMaxSmacEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmacEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxSmacEntries.setDescription('The maximum number of SmacEntries on this machine.')
wwpLeosChassisResourcesFreeSmacEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 52), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmacEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeSmacEntries.setDescription('The number of SmacEntries free on this machine.')
wwpLeosChassisResourcesMaxDrvNoLrnSacResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDrvNoLrnSacResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxDrvNoLrnSacResources.setDescription('The maximum number of DrvNoLrnSacResources on this machine.')
wwpLeosChassisResourcesFreeDrvNoLrnSacResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 54), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDrvNoLrnSacResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeDrvNoLrnSacResources.setDescription('The number of DrvNoLrnSacResources free on this machine.')
wwpLeosChassisResourcesMaxLearnEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxLearnEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxLearnEntries.setDescription('The maximum number of LearnEntries on this machine.')
wwpLeosChassisResourcesFreeLearnEntries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 56), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeLearnEntries.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeLearnEntries.setDescription('The number of LearnEntries free on this machine.')
wwpLeosChassisResourcesMaxCustomPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxCustomPrtcls.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxCustomPrtcls.setDescription('The maximum number of CustomPrtcls on this machine.')
wwpLeosChassisResourcesFreeCustomPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 58), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeCustomPrtcls.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeCustomPrtcls.setDescription('The number of CustomPrtcls free on this machine.')
wwpLeosChassisResourcesMaxPrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtcls.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtcls.setDescription('The maximum number of Prtcls on this machine.')
wwpLeosChassisResourcesFreePrtcls = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 60), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtcls.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtcls.setDescription('The number of Prtcls free on this machine.')
wwpLeosChassisResourcesMaxPrtclFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilters.setDescription('The maximum number of PrtclFilters on this machine.')
wwpLeosChassisResourcesFreePrtclFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 62), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilters.setDescription('The number of PrtclFilters free on this machine.')
wwpLeosChassisResourcesMaxPrtclFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilterMembs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxPrtclFilterMembs.setDescription('The maximum number of PrtclFilterMembs on this machine.')
wwpLeosChassisResourcesFreePrtclFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 64), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilterMembs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreePrtclFilterMembs.setDescription('The number of PrtclFilterMembs free on this machine.')
wwpLeosChassisResourcesMaxBcastFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilters.setDescription('The maximum number of BcastFilters on this machine.')
wwpLeosChassisResourcesFreeBcastFilters = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 66), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilters.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilters.setDescription('The number of BcastFilters free on this machine.')
wwpLeosChassisResourcesMaxBcastFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilterMembs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesMaxBcastFilterMembs.setDescription('The maximum number of BcastFilterMembs on this machine.')
wwpLeosChassisResourcesFreeBcastFilterMembs = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 11, 1, 1, 9, 68), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilterMembs.setStatus('current')
if mibBuilder.loadTexts: wwpLeosChassisResourcesFreeBcastFilterMembs.setDescription('The number of BcastFilterMembs free on this machine.')
mibBuilder.exportSymbols("WWP-LEOS-CHASSIS-MIB", wwpLeosChassisPowerSource=wwpLeosChassisPowerSource, wwpLeosChassisPostResultMessage=wwpLeosChassisPostResultMessage, wwpLeosChassisResourcesFreePorts=wwpLeosChassisResourcesFreePorts, wwpLeosChassisDoorAlarmFlapHoldTime=wwpLeosChassisDoorAlarmFlapHoldTime, wwpLeosChassisResourcesMaxLearnEntries=wwpLeosChassisResourcesMaxLearnEntries, wwpLeosChassisMfgDate=wwpLeosChassisMfgDate, wwpLeosChassisPostErrorCode=wwpLeosChassisPostErrorCode, wwpLeosChassisResourcesFreeLearnEntries=wwpLeosChassisResourcesFreeLearnEntries, wwpLeosChassisRebootNow=wwpLeosChassisRebootNow, wwpLeosChassisPostErrorCategory=wwpLeosChassisPostErrorCategory, wwpLeosChassisBatteryLowStateNotifEnabled=wwpLeosChassisBatteryLowStateNotifEnabled, wwpLeosChassisPlatformCaps=wwpLeosChassisPlatformCaps, wwpLeosChassisInnerDoorStatusChangeNotification=wwpLeosChassisInnerDoorStatusChangeNotification, wwpLeosChassisResourcesMaxTunnels=wwpLeosChassisResourcesMaxTunnels, wwpLeosChassisPowerSupplyNum=wwpLeosChassisPowerSupplyNum, wwpLeosChassisSerialConsoleParity=wwpLeosChassisSerialConsoleParity, wwpLeosChassisBatteryStatus=wwpLeosChassisBatteryStatus, wwpLeosChassisPlatformCapsMaxVlans=wwpLeosChassisPlatformCapsMaxVlans, wwpLeosChassisWelcomeBanner=wwpLeosChassisWelcomeBanner, wwpLeosChassisTempSensorNum=wwpLeosChassisTempSensorNum, wwpLeosSystemPartNumber=wwpLeosSystemPartNumber, wwpLeosChassisResourcesMaxSlevels=wwpLeosChassisResourcesMaxSlevels, wwpLeosChassisRebootNotification=wwpLeosChassisRebootNotification, wwpLeosChassisPlatformCapsMaxVss=wwpLeosChassisPlatformCapsMaxVss, wwpLeosChassisFanCurrentSpeed=wwpLeosChassisFanCurrentSpeed, wwpLeosChassisPowerSupplyModule=wwpLeosChassisPowerSupplyModule, wwpLeosChassisTempSensorState=wwpLeosChassisTempSensorState, wwpLeosChassisPlatformCapsMaxRstpDomains=wwpLeosChassisPlatformCapsMaxRstpDomains, wwpLeosChassisResourcesFreeTunnels=wwpLeosChassisResourcesFreeTunnels, wwpLeosChassisPowerSupplyRedundantState=wwpLeosChassisPowerSupplyRedundantState, wwpLeosChassisShellInactivityTimeout=wwpLeosChassisShellInactivityTimeout, wwpLeosChassisScheduledRebootActive=wwpLeosChassisScheduledRebootActive, wwpLeosChassisPlatformCapsMaxMulticastgroups=wwpLeosChassisPlatformCapsMaxMulticastgroups, wwpLeosChassisPowerTable=wwpLeosChassisPowerTable, wwpLeosChassisTempLowThreshold=wwpLeosChassisTempLowThreshold, wwpLeosChassisPlatformCapsProtocolFilters=wwpLeosChassisPlatformCapsProtocolFilters, wwpLeosChassisResourcesFreeEprSnets=wwpLeosChassisResourcesFreeEprSnets, wwpLeosChassisResourcesMaxQosResEgs=wwpLeosChassisResourcesMaxQosResEgs, wwpLeosChassisResourcesFreeCustomPrtcls=wwpLeosChassisResourcesFreeCustomPrtcls, wwpLeosChassisFanModuleTable=wwpLeosChassisFanModuleTable, wwpLeosChassisPowerEntry=wwpLeosChassisPowerEntry, wwpLeosChassisBatteryPowerPrimaryStateName=wwpLeosChassisBatteryPowerPrimaryStateName, wwpLeosChassisHardwareVersion=wwpLeosChassisHardwareVersion, wwpLeosChassisResourcesMaxIngressTunnels=wwpLeosChassisResourcesMaxIngressTunnels, wwpLeosChassisSerialConsoleState=wwpLeosChassisSerialConsoleState, wwpLeosChassisResetLoginBanner=wwpLeosChassisResetLoginBanner, wwpLeosChassisResourcesFreePrtclFilters=wwpLeosChassisResourcesFreePrtclFilters, wwpLeosChassisPlatformCapsMaxFsmtCosEntries=wwpLeosChassisPlatformCapsMaxFsmtCosEntries, wwpLeosChassisOuterDoorStatusChangeNotification=wwpLeosChassisOuterDoorStatusChangeNotification, wwpLeosChassisPlatformCapsMaxVsMembers=wwpLeosChassisPlatformCapsMaxVsMembers, wwpLeosChassisResourcesFreeQosResEgs=wwpLeosChassisResourcesFreeQosResEgs, wwpLeosChassisResourcesFreeIngressTunnels=wwpLeosChassisResourcesFreeIngressTunnels, wwpLeosChassisScheduledRebootNopost=wwpLeosChassisScheduledRebootNopost, wwpLeosChassisResourcesFreeMcastGroups=wwpLeosChassisResourcesFreeMcastGroups, wwpLeosChassisTempNotifEnabled=wwpLeosChassisTempNotifEnabled, wwpLeosChassisPlatformCapsVlanTranslation=wwpLeosChassisPlatformCapsVlanTranslation, wwpLeosChassisResourcesMaxEprSnets=wwpLeosChassisResourcesMaxEprSnets, wwpLeosChassisBatteryVoltageLevel=wwpLeosChassisBatteryVoltageLevel, wwpLeosChassisScheduledRebootEntry=wwpLeosChassisScheduledRebootEntry, wwpLeosChassisResourcesMaxDrvNoLrnSacResources=wwpLeosChassisResourcesMaxDrvNoLrnSacResources, wwpLeosChassisResetWelcomeBanner=wwpLeosChassisResetWelcomeBanner, wwpLeosChassisResourcesMaxPrtclFilterMembs=wwpLeosChassisResourcesMaxPrtclFilterMembs, wwpLeosChassisResourcesMaxPrtcls=wwpLeosChassisResourcesMaxPrtcls, wwpLeosChassisPostResultEntry=wwpLeosChassisPostResultEntry, wwpLeosChassisPostErrorNotification=wwpLeosChassisPostErrorNotification, wwpLeosChassisResourcesMaxBcastFilterMembs=wwpLeosChassisResourcesMaxBcastFilterMembs, wwpLeosChassisMIBConformance=wwpLeosChassisMIBConformance, wwpLeosChassisResourcesMaxVsMembers=wwpLeosChassisResourcesMaxVsMembers, wwpLeosChassisPlatformCapsAoamFpga=wwpLeosChassisPlatformCapsAoamFpga, PYSNMP_MODULE_ID=wwpLeosChassisMIB, wwpLeosChassisFanModuleStatus=wwpLeosChassisFanModuleStatus, wwpLeosChassisFanMinSpeed=wwpLeosChassisFanMinSpeed, wwpLeosChassisMIBNotifications=wwpLeosChassisMIBNotifications, wwpLeosChassisResourcesMaxPorts=wwpLeosChassisResourcesMaxPorts, wwpLeosChassisPlatformCapsMaxLearnedMacs=wwpLeosChassisPlatformCapsMaxLearnedMacs, wwpLeosChassisResourcesFreeSlevelWcards=wwpLeosChassisResourcesFreeSlevelWcards, wwpPowerSwitchingOp=wwpPowerSwitchingOp, wwpLeosChassisBatteryMissingStateNotifEnabled=wwpLeosChassisBatteryMissingStateNotifEnabled, wwpLeosChassisResourcesMaxTprofStdEntries=wwpLeosChassisResourcesMaxTprofStdEntries, wwpLeosChassisPostState=wwpLeosChassisPostState, wwpLeosChassisBatteryPowerNotifEnabled=wwpLeosChassisBatteryPowerNotifEnabled, wwpLeosChassisPlatformCapsPbtFpga=wwpLeosChassisPlatformCapsPbtFpga, wwpLeosChassisTempSensor=wwpLeosChassisTempSensor, wwpLeosChassisPlatformCapsMaxAggrPorts=wwpLeosChassisPlatformCapsMaxAggrPorts, wwpLeosChassisBatteryBadStateNotifEnabled=wwpLeosChassisBatteryBadStateNotifEnabled, wwpLeosChassisBatteryCondition=wwpLeosChassisBatteryCondition, wwpLeosChassisResourcesFreeTprofCscdEntries=wwpLeosChassisResourcesFreeTprofCscdEntries, wwpLeosChassisPowerSupplyState=wwpLeosChassisPowerSupplyState, wwpLeosChassisBatteryStatusNotification=wwpLeosChassisBatteryStatusNotification, wwpLeosChassisParamVersion=wwpLeosChassisParamVersion, wwpLeosSystemSerialNumber=wwpLeosSystemSerialNumber, wwpLeosChassisRedPowerSupplyNotifEnabled=wwpLeosChassisRedPowerSupplyNotifEnabled, wwpLeosChassisPlatformCapsRedunPower=wwpLeosChassisPlatformCapsRedunPower, wwpLeosChassisResourcesFreeAggrs=wwpLeosChassisResourcesFreeAggrs, wwpLeosChassisFanModuleNum=wwpLeosChassisFanModuleNum, wwpLeosChassisTempSensorEntry=wwpLeosChassisTempSensorEntry, wwpLeosChassisScheduledRebootTimestamp=wwpLeosChassisScheduledRebootTimestamp, wwpLeosChassisPlatformCapsMaxVcs=wwpLeosChassisPlatformCapsMaxVcs, wwpLeosChassisResourcesMaxSlevelWcards=wwpLeosChassisResourcesMaxSlevelWcards, wwpLeosChassisBatteryModule=wwpLeosChassisBatteryModule, wwpLeosChassisResourcesFreeSmappingCosResources=wwpLeosChassisResourcesFreeSmappingCosResources, wwpLeosChassisBatteryMissingStateName=wwpLeosChassisBatteryMissingStateName, wwpLeosChassisSerialConsoleDataBits=wwpLeosChassisSerialConsoleDataBits, wwpLeosChassisResourcesMaxPrtclFilters=wwpLeosChassisResourcesMaxPrtclFilters, wwpLeosChassisTempSensorValue=wwpLeosChassisTempSensorValue, wwpLeosChassisInnerDoorStatus=wwpLeosChassisInnerDoorStatus, wwpLeosChassisResourcesFreeSlevels=wwpLeosChassisResourcesFreeSlevels, wwpLeosChassisShellLoginTimeout=wwpLeosChassisShellLoginTimeout, wwpLeosChassisPowerSourceNotification=wwpLeosChassisPowerSourceNotification, wwpLeosChassisPostResultIndex=wwpLeosChassisPostResultIndex, wwpLeosChassisPostResultCode=wwpLeosChassisPostResultCode, wwpLeosChassisResourcesMaxSmappings=wwpLeosChassisResourcesMaxSmappings, wwpLeosChassisMIBNotificationPrefix=wwpLeosChassisMIBNotificationPrefix, wwpLeosChassisFanAvgSpeed=wwpLeosChassisFanAvgSpeed, wwpLeosChassisResourcesMaxPortStateGrps=wwpLeosChassisResourcesMaxPortStateGrps, wwpLeosChassisResourcesFreePrtclFilterMembs=wwpLeosChassisResourcesFreePrtclFilterMembs, wwpLeosChassisPowerSupplyStatusNotification=wwpLeosChassisPowerSupplyStatusNotification, wwpLeosChassisFanModule=wwpLeosChassisFanModule, wwpLeosChassisMIBObjects=wwpLeosChassisMIBObjects, wwpLeosChassisDoorStatusChangeNotification=wwpLeosChassisDoorStatusChangeNotification, wwpLeosChassisResourcesFreeVlans=wwpLeosChassisResourcesFreeVlans, wwpLeosChassisSerialNumber=wwpLeosChassisSerialNumber, wwpLeosChassisResourcesMaxSmappingCosResources=wwpLeosChassisResourcesMaxSmappingCosResources, wwpLeosChassisPlatformCapsMaxL4ProtEntries=wwpLeosChassisPlatformCapsMaxL4ProtEntries, wwpLeosChassisResourcesFreePrtcls=wwpLeosChassisResourcesFreePrtcls, wwpLeosChassisBatteryConditionNotification=wwpLeosChassisBatteryConditionNotification, wwpLeosChassisShellInactivityTimerState=wwpLeosChassisShellInactivityTimerState, wwpLeosChassisSystemTimeOffsetScope=wwpLeosChassisSystemTimeOffsetScope, wwpLeosChassisScheduledRebootIndex=wwpLeosChassisScheduledRebootIndex, wwpLeosChassisPowerSwitchNotification=wwpLeosChassisPowerSwitchNotification, wwpLeosChassisPlatformCapsMaxIngressTunnels=wwpLeosChassisPlatformCapsMaxIngressTunnels, wwpLeosChassisPlatformCapsMaxPhysPorts=wwpLeosChassisPlatformCapsMaxPhysPorts, wwpLeosChassisSnmpState=wwpLeosChassisSnmpState, wwpLeosChassisPlatformCapsAcPower=wwpLeosChassisPlatformCapsAcPower, wwpLeosChassisDoorAlarmIndex=wwpLeosChassisDoorAlarmIndex, wwpLeosChassisResourcesFreeSaccessEntries=wwpLeosChassisResourcesFreeSaccessEntries, wwpLeosChassisPostErrorValue=wwpLeosChassisPostErrorValue, wwpLeosChassisResourcesMaxAggrPorts=wwpLeosChassisResourcesMaxAggrPorts, wwpLeosChassisResourcesFreeSmacEntries=wwpLeosChassisResourcesFreeSmacEntries, wwpLeosChassisSerialConsoleStopBits=wwpLeosChassisSerialConsoleStopBits, wwpLeosChassisBatteryNormalStateName=wwpLeosChassisBatteryNormalStateName, wwpLeosChassisRebootReasonErrorType=wwpLeosChassisRebootReasonErrorType, wwpLeosChassisFanModuleEntry=wwpLeosChassisFanModuleEntry, wwpLeosChassisScheduledRebootTable=wwpLeosChassisScheduledRebootTable, wwpLeosChassisResourcesFreeEgressTunnels=wwpLeosChassisResourcesFreeEgressTunnels, wwpLeosChassisExternalAlarm=wwpLeosChassisExternalAlarm, wwpLeosChassisExternalAlarmStatus=wwpLeosChassisExternalAlarmStatus, wwpLeosChassisDoorAlarmFlapCount=wwpLeosChassisDoorAlarmFlapCount, wwpLeosChassisBatteryGoodStateName=wwpLeosChassisBatteryGoodStateName, wwpLeosChassisModule=wwpLeosChassisModule, wwpLeosChassisShellLoginTimerState=wwpLeosChassisShellLoginTimerState, wwpLeosChassisResourcesFreeVlanMembers=wwpLeosChassisResourcesFreeVlanMembers, wwpLeosChassisResourcesFreeBcastFilters=wwpLeosChassisResourcesFreeBcastFilters, wwpLeosChassisBatteryBadStateName=wwpLeosChassisBatteryBadStateName, wwpLeosChassisResourcesMaxVlanMembers=wwpLeosChassisResourcesMaxVlanMembers, wwpLeosChassisTempHighThreshold=wwpLeosChassisTempHighThreshold, wwpLeosChassisScheduledRebootDelay=wwpLeosChassisScheduledRebootDelay, wwpLeosChassisTempNotification=wwpLeosChassisTempNotification, wwpLeosChassisDoorAlarmStatus=wwpLeosChassisDoorAlarmStatus, wwpLeosChassisBatteryLowStateName=wwpLeosChassisBatteryLowStateName, wwpLeosChassisNotif=wwpLeosChassisNotif, wwpLeosChassisTempSensorHighThreshold=wwpLeosChassisTempSensorHighThreshold, wwpLeosChassisDyingGaspNotification=wwpLeosChassisDyingGaspNotification, wwpLeosChassisResourcesFreeMcastSnets=wwpLeosChassisResourcesFreeMcastSnets, wwpLeosChassisBatteryPresentStateName=wwpLeosChassisBatteryPresentStateName, wwpLeosChassisResourcesMaxBcastFilters=wwpLeosChassisResourcesMaxBcastFilters, wwpLeosChassisResourcesMaxCustomPrtcls=wwpLeosChassisResourcesMaxCustomPrtcls, wwpLeosChassisRebootState=wwpLeosChassisRebootState, PortList=PortList, wwpLeosChassisPlatformCapsMultiSubsPerPort=wwpLeosChassisPlatformCapsMultiSubsPerPort, FileName=FileName, wwpLeosChassisResourcesMaxSmacEntries=wwpLeosChassisResourcesMaxSmacEntries, wwpLeosChassisResourcesMaxVcs=wwpLeosChassisResourcesMaxVcs, wwpLeosChassisResourcesFreeSmappingPrtclResources=wwpLeosChassisResourcesFreeSmappingPrtclResources, wwpLeosChassisFanModuleNotification=wwpLeosChassisFanModuleNotification, wwpLeosChassisResourcesFreePortStateGrps=wwpLeosChassisResourcesFreePortStateGrps, wwpLeosChassisExternalAlarmStatusChangeNotification=wwpLeosChassisExternalAlarmStatusChangeNotification, wwpLeosChassisPlatformCapsVplsFpga=wwpLeosChassisPlatformCapsVplsFpga, wwpLeosChassisResourceCounts=wwpLeosChassisResourceCounts, wwpLeosChassisDoorAlarmAdminStatus=wwpLeosChassisDoorAlarmAdminStatus, wwpLeosChassisTempSensorLowThreshold=wwpLeosChassisTempSensorLowThreshold, wwpLeosChassisPlatformCapsMaxFsmtEntries=wwpLeosChassisPlatformCapsMaxFsmtEntries, wwpLeosChassisPlatformCapsMaxEprSnids=wwpLeosChassisPlatformCapsMaxEprSnids, wwpLeosChassisResourcesFreeTprofGblCscdEntries=wwpLeosChassisResourcesFreeTprofGblCscdEntries, wwpLeosChassisResourcesFreeDrvNoLrnSacResources=wwpLeosChassisResourcesFreeDrvNoLrnSacResources, wwpLeosChassisSnmpStateNotification=wwpLeosChassisSnmpStateNotification, wwpLeosChassisResourcesFreeVcs=wwpLeosChassisResourcesFreeVcs, wwpLeosChassisResourcesMaxMcastSnets=wwpLeosChassisResourcesMaxMcastSnets, wwpLeosChassisLoginBanner=wwpLeosChassisLoginBanner, wwpLeosChassisDoorAlarmStatusChangeNotification=wwpLeosChassisDoorAlarmStatusChangeNotification, wwpLeosChassisDoorAlarmFlapDetectTime=wwpLeosChassisDoorAlarmFlapDetectTime, wwpLeosChassisResourcesMaxTprofGblCscdEntries=wwpLeosChassisResourcesMaxTprofGblCscdEntries, wwpLeosChassisResourcesMaxSaccessEntries=wwpLeosChassisResourcesMaxSaccessEntries, wwpLeosChassis=wwpLeosChassis, wwpLeosChassisPlatformCapsMaxTunnels=wwpLeosChassisPlatformCapsMaxTunnels, wwpLeosChassisFanModuleNotifEnabled=wwpLeosChassisFanModuleNotifEnabled, wwpLeosChassisResourcesFreeVss=wwpLeosChassisResourcesFreeVss, wwpLeosChassisPlatformCapsMaxEgressTunnels=wwpLeosChassisPlatformCapsMaxEgressTunnels, wwpLeosChassisResourcesMaxVlans=wwpLeosChassisResourcesMaxVlans, wwpLeosChassisBatteryVoltageLevelNotification=wwpLeosChassisBatteryVoltageLevelNotification, wwpLeosChassisPlatformCapsMaxSltWildcards=wwpLeosChassisPlatformCapsMaxSltWildcards, wwpLeosChassisResourcesFreeVsMembers=wwpLeosChassisResourcesFreeVsMembers, wwpLeosChassisSystemTimeOffset=wwpLeosChassisSystemTimeOffset, wwpLeosChassisDoorAlarmFlapDetect=wwpLeosChassisDoorAlarmFlapDetect, wwpLeosChassisOuterDoorStatus=wwpLeosChassisOuterDoorStatus, wwpLeosChassisPostErrorMsg=wwpLeosChassisPostErrorMsg, wwpLeosChassisDoorAlarmTable=wwpLeosChassisDoorAlarmTable, wwpLeosChassisPlatformCapsMaxSmtEntries=wwpLeosChassisPlatformCapsMaxSmtEntries, wwpLeosChassisResourcesMaxEgressTunnels=wwpLeosChassisResourcesMaxEgressTunnels, wwpLeosChassisResourcesFreeSmappings=wwpLeosChassisResourcesFreeSmappings, wwpLeosChassisResourcesFreeBcastFilterMembs=wwpLeosChassisResourcesFreeBcastFilterMembs, wwpLeosChassisTempSensorTable=wwpLeosChassisTempSensorTable, wwpLeosChassisPowerSupplyType=wwpLeosChassisPowerSupplyType, wwpLeosChassisPlatformCapsMaxSactEntries=wwpLeosChassisPlatformCapsMaxSactEntries, wwpLeosChassisPlatformCapsDcPower=wwpLeosChassisPlatformCapsDcPower, wwpLeosChassisMIBGroups=wwpLeosChassisMIBGroups, wwpLeosChassisNotifAttrs=wwpLeosChassisNotifAttrs, wwpLeosChassisResourcesMaxTprofCscdEntries=wwpLeosChassisResourcesMaxTprofCscdEntries, wwpLeosChassisMIB=wwpLeosChassisMIB, wwpLeosChassisDeviceId=wwpLeosChassisDeviceId, wwpLeosChassisPostResultTable=wwpLeosChassisPostResultTable, wwpLeosChassisResourcesMaxDhcpRelayAgnts=wwpLeosChassisResourcesMaxDhcpRelayAgnts, wwpLeosChassisMIBCompliances=wwpLeosChassisMIBCompliances, wwpLeosChassisMacAddress=wwpLeosChassisMacAddress, wwpLeosChassisBatteryPowerBatteryStateName=wwpLeosChassisBatteryPowerBatteryStateName, wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans=wwpLeosChassisPlatformCapsMaxIgmpSnoopVlans, wwpLeosChassisResourcesMaxMcastGroups=wwpLeosChassisResourcesMaxMcastGroups, wwpLeosChassisResourcesMaxSmappingPrtclResources=wwpLeosChassisResourcesMaxSmappingPrtclResources, wwpLeosChassisFanModuleType=wwpLeosChassisFanModuleType, wwpLeosChassisResourcesFreeDhcpRelayAgnts=wwpLeosChassisResourcesFreeDhcpRelayAgnts, wwpLeosChassisPlatformCapsMaxSltEntries=wwpLeosChassisPlatformCapsMaxSltEntries, wwpLeosChassisDoorAlarmEntry=wwpLeosChassisDoorAlarmEntry, wwpLeosChassisResourcesMaxVss=wwpLeosChassisResourcesMaxVss, wwpLeosChassisResourcesFreeTprofStdEntries=wwpLeosChassisResourcesFreeTprofStdEntries)
