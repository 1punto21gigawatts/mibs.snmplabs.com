#
# PySNMP MIB module ONEACCESS-SNMP-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ONEACCESS-SNMP-CONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
oacExpIMManagement, oacMIBModules, oacExpIMIpAcl = mibBuilder.importSymbols("ONEACCESS-GLOBAL-REG", "oacExpIMManagement", "oacMIBModules", "oacExpIMIpAcl")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, MibIdentifier, ModuleIdentity, Integer32, TimeTicks, Counter64, iso, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "iso", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Unsigned32", "Gauge32")
TextualConvention, RowStatus, TruthValue, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString", "PhysAddress")
oacSnmpConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 13191, 1, 100, 2002))
oacSnmpConfigMIB.setRevisions(('2011-07-29 00:00', '2011-07-26 00:00', '2011-06-15 00:00', '2010-07-08 00:01',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: oacSnmpConfigMIB.setRevisionsDescriptions(('Fixed the issues related to octet string range', 'Contact updated', 'Updated with review comments.', 'OneOS can be managed via snmp. The snmp agent on the device supports all the three formats v1, v2, and v3. The current mib is an requirement to create snmpv3 users on the device using snmp protocol. Hence this snmp configuration mib will provide tables and scalars requried to configure an v3 user on ONE OS. The snmpv3 user creation is dependent on the views and the snmp groups. Hence the mib should support creating views and groups. The user of this mib can configure the following using this mib Configuring SNMP Views Configuring Snmp Group Snmpv3 User Table EningeId ',))
if mibBuilder.loadTexts: oacSnmpConfigMIB.setLastUpdated('201107290000Z')
if mibBuilder.loadTexts: oacSnmpConfigMIB.setOrganization(' OneAccess ')
if mibBuilder.loadTexts: oacSnmpConfigMIB.setContactInfo('Pascal KESTELOOT Postal: ONE ACCESS 381 Avenue du Gnral de Gaulle 92140 Clamart, France FRANCE Tel: (+33) 01 41 87 70 00 Fax: (+33) 01 41 87 74 00 E-mail: pascal.kesteloot@oneaccess-net.com')
if mibBuilder.loadTexts: oacSnmpConfigMIB.setDescription('fixed compilation issues')
oacSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20))
oacSnmpConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1))
oacSnmpConfigConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 2))
oacSnmpSource = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpSource.setStatus('current')
if mibBuilder.loadTexts: oacSnmpSource.setDescription('snmp source { <interface> | any }')
oacSnmpTrapSource = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone('any')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpTrapSource.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapSource.setDescription('snmp trap-source { <interface> | any }')
oacSnmpMibIfDescrShort = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpMibIfDescrShort.setStatus('current')
if mibBuilder.loadTexts: oacSnmpMibIfDescrShort.setDescription('will display the interface name with out spaces between the interface and unit')
oacSnmpChassisId = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpChassisId.setStatus('current')
if mibBuilder.loadTexts: oacSnmpChassisId.setDescription('Chassis Id of this device.')
oacSnmpMaxMsgSize = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 5), Integer32().clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpMaxMsgSize.setStatus('current')
if mibBuilder.loadTexts: oacSnmpMaxMsgSize.setDescription('maximum size of the snmp message')
oacSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6), )
if mibBuilder.loadTexts: oacSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityConfigTable.setDescription('This table will hold the configuration required to apply the SNMP view on a read/write V2C community.')
oacSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1), ).setIndexNames((0, "ONEACCESS-SNMP-CONFIG-MIB", "oacSnmpCommunityString"), (0, "ONEACCESS-SNMP-CONFIG-MIB", "oacSnmpCommunityAccessType"))
if mibBuilder.loadTexts: oacSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityConfigEntry.setDescription('A Entry will hold the view applied for a community.')
oacSnmpCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: oacSnmpCommunityString.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityString.setDescription('The community string')
oacSnmpCommunityAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-read-community", 1), ("set-write-community", 2))))
if mibBuilder.loadTexts: oacSnmpCommunityAccessType.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityAccessType.setDescription('This object identifies the type of community for which this community string is attached.')
oacSnmpCommunityAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpCommunityAclType.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityAclType.setDescription('Ipv4 or Ipv6 Acl attached to this snmp community string')
oacSnmpCommunityAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpCommunityAclName.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityAclName.setDescription('Ipv4 Acl attached to this snmp community string')
oacSnmpCommunityV2GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpCommunityV2GroupName.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityV2GroupName.setDescription('Snmp group attached to this community string')
oacSnmpCommunityisEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpCommunityisEncrypted.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityisEncrypted.setDescription('if true the string should be encrypted. If false it will be a plain text string.')
oacSnmpCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpCommunityRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacSnmpCommunityRowStatus.setDescription('The row status for this entry')
oacSnmpEngineId = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpEngineId.setStatus('current')
if mibBuilder.loadTexts: oacSnmpEngineId.setDescription('By default on OneOS the engineId is created by using the mac address of FastEthernet Interface.')
oacSnmpRemoteAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oacSnmpRemoteAgentIpAddr.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteAgentIpAddr.setDescription("From the ip address provided remote agent's engine id is discovered.")
oacSnmpRemoteEngineIdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9), )
if mibBuilder.loadTexts: oacSnmpRemoteEngineIdConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineIdConfigTable.setDescription('This table will hold the configuration for snmp traps.')
oacSnmpRemoteEngineIdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9, 1), ).setIndexNames((0, "ONEACCESS-SNMP-CONFIG-MIB", "oacSnmpRemoteEngineId"))
if mibBuilder.loadTexts: oacSnmpRemoteEngineIdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineIdConfigEntry.setDescription('A Entry will hold if a trap is enabled or disabled.')
oacSnmpRemoteEngineId = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: oacSnmpRemoteEngineId.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineId.setDescription('Engine Id of the remote.')
oacSnmpRemoteEngineIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpRemoteEngineIpAddr.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineIpAddr.setDescription('if true the string should be encrypted. If false it will be a plain text string.')
oacSnmpRemoteEngineMaxMsgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(484, 8192)).clone(8192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpRemoteEngineMaxMsgSize.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineMaxMsgSize.setDescription('if true the string should be encrypted. if false it will be a plain text string.')
oacSnmpRemoteEngineRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpRemoteEngineRowstatus.setStatus('current')
if mibBuilder.loadTexts: oacSnmpRemoteEngineRowstatus.setDescription('The row status for this entry')
oacSnmpTrapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 10), )
if mibBuilder.loadTexts: oacSnmpTrapConfigTable.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapConfigTable.setDescription('This table will hold the configuration for snmp traps.')
oacSnmpTrapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 10, 1), ).setIndexNames((0, "ONEACCESS-SNMP-CONFIG-MIB", "oacSnmpTrapConfigType"))
if mibBuilder.loadTexts: oacSnmpTrapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapConfigEntry.setDescription('A Entry will hold if a trap is enabled or disabled.')
oacSnmpTrapConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("standard", 1), ("acl", 2), ("bgp", 3), ("ipsec", 4), ("isakmp", 5), ("isdn", 6), ("nat", 7), ("pstn", 8), ("vrrp", 9))))
if mibBuilder.loadTexts: oacSnmpTrapConfigType.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapConfigType.setDescription('The user can enable or disable the following traps: 1. standard, 2. acl, 3. bgp, 4. ipsec, 5. isakmp, 6. isdn, 7. nat, 8. pstn, 9. vrrp')
oacSnmpTrapConfigisEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 10, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpTrapConfigisEnabled.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapConfigisEnabled.setDescription('if true the string should be encrypted. if false it will be a plain text string.')
oacSnmpTrapConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oacSnmpTrapConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: oacSnmpTrapConfigRowStatus.setDescription('The row status for this entry')
oacSnmpConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 2, 1))
oacSnmpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 2, 1, 1)).setObjects(("ONEACCESS-SNMP-CONFIG-MIB", "oacSnmpTrapConfigisEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oacSnmpConfigGroup = oacSnmpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: oacSnmpConfigGroup.setDescription('Group of SNMP objects')
oacSnmpCompls = MibIdentifier((1, 3, 6, 1, 4, 1, 13191, 10, 3, 4, 20, 2, 2))
mibBuilder.exportSymbols("ONEACCESS-SNMP-CONFIG-MIB", oacSnmpConfigMIB=oacSnmpConfigMIB, oacSnmpCommunityisEncrypted=oacSnmpCommunityisEncrypted, oacSnmpCommunityAccessType=oacSnmpCommunityAccessType, oacSnmpTrapConfigRowStatus=oacSnmpTrapConfigRowStatus, oacSnmpRemoteEngineIdConfigEntry=oacSnmpRemoteEngineIdConfigEntry, oacSnmpRemoteEngineId=oacSnmpRemoteEngineId, oacSnmpTrapConfigEntry=oacSnmpTrapConfigEntry, oacSnmpCommunityAclType=oacSnmpCommunityAclType, oacSnmpRemoteEngineIdConfigTable=oacSnmpRemoteEngineIdConfigTable, oacSnmpEngineId=oacSnmpEngineId, oacSnmpRemoteEngineMaxMsgSize=oacSnmpRemoteEngineMaxMsgSize, oacSnmpCommunityConfigTable=oacSnmpCommunityConfigTable, oacSnmpRemoteEngineRowstatus=oacSnmpRemoteEngineRowstatus, oacSnmpTrapConfigTable=oacSnmpTrapConfigTable, oacSnmpTrapSource=oacSnmpTrapSource, oacSnmpRemoteEngineIpAddr=oacSnmpRemoteEngineIpAddr, oacSnmpCommunityConfigEntry=oacSnmpCommunityConfigEntry, oacSnmpCompls=oacSnmpCompls, oacSnmpSource=oacSnmpSource, oacSnmpCommunityV2GroupName=oacSnmpCommunityV2GroupName, oacSnmpMaxMsgSize=oacSnmpMaxMsgSize, oacSnmpConfig=oacSnmpConfig, oacSnmpTrapConfigType=oacSnmpTrapConfigType, PYSNMP_MODULE_ID=oacSnmpConfigMIB, oacSnmpRemoteAgentIpAddr=oacSnmpRemoteAgentIpAddr, oacSnmpConfigGroup=oacSnmpConfigGroup, oacSnmpConfigGroups=oacSnmpConfigGroups, oacSnmpCommunityAclName=oacSnmpCommunityAclName, oacSnmpConfigObjects=oacSnmpConfigObjects, oacSnmpChassisId=oacSnmpChassisId, oacSnmpConfigConformance=oacSnmpConfigConformance, oacSnmpMibIfDescrShort=oacSnmpMibIfDescrShort, oacSnmpTrapConfigisEnabled=oacSnmpTrapConfigisEnabled, oacSnmpCommunityRowStatus=oacSnmpCommunityRowStatus, oacSnmpCommunityString=oacSnmpCommunityString)
