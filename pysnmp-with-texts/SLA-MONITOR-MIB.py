#
# PySNMP MIB module SLA-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SLA-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:06:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Bits, Gauge32, MibIdentifier, ObjectIdentity, Counter32, NotificationType, iso, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Bits", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter32", "NotificationType", "iso", "Integer32", "IpAddress")
RowStatus, TextualConvention, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "StorageType")
policy, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "policy")
slaMonitorMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 4, 8))
slaMonitorMib.setRevisions(('2015-05-29 00:00', '2013-03-05 00:00', '2013-01-31 00:00', '2012-12-11 00:00', '2012-09-19 00:00', '2012-09-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: slaMonitorMib.setRevisionsDescriptions(('Version 6: Corrected MIB compiling errors.', 'Version 5: Added support for remote NTR and RTP test initiation and results retrieval using SNMP. Defined attribute to support refusing server test requests.', 'Version 4: Added slaMonitorAgentServerBypass and updated conformance statements for cross-platform use.', 'Version 3: Added slaMonitorAgentCertFileInstallAction, slaMonitorAgentCertFile for VSP9K/ERS8800', 'Version 2: Added slaMonitorAgentConfiguredAgentVrfName, slaMonitorAgentSlaParameter for VSP9K', 'Version 1: Initial version. Basic agent support.',))
if mibBuilder.loadTexts: slaMonitorMib.setLastUpdated('201505290000Z')
if mibBuilder.loadTexts: slaMonitorMib.setOrganization('Avaya Networks, Inc.')
if mibBuilder.loadTexts: slaMonitorMib.setContactInfo(' John Seligson Avaya Networks, Inc. 4655 Great America Parkway Santa Clara, CA 95054 USA Phone: +1 408 496 3424 Email: jseligso@avaya.com')
if mibBuilder.loadTexts: slaMonitorMib.setDescription('An Avaya management module containing data definitions related to the SLA Monitor Agent.')
slaMonitorMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 0))
slaMonitorMibClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 1))
slaMonitorMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 2))
slaMonitorAgtClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1))
slaMonitorAgentStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentStatus.setDescription('The value of this attribute indicates whether the SLA Monitor agent is enabled or not. An agent that is enabled will respond to SLA Monitor server discovery packets. A disabled agent will remain dormant until manually enabled.')
slaMonitorAgentAddressType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentAddressType.setDescription('The type of IP address used by the agent. This object is limited to IPv4 and IPv6 addresses.')
slaMonitorAgentAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentAddress.setDescription('The IP address currently used by the SLA Monitor agent.')
slaMonitorAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentPort.setDescription('The UDP port currently used by the SLA Monitor agent for agent-server communication.')
slaMonitorAgentRegisteredWithServer = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("registered", 1), ("notRegistered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentRegisteredWithServer.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRegisteredWithServer.setDescription('The value of this attribute indicates whether the SLA Monitor agent is registered with an SLA Monitor server or not.')
slaMonitorAgentRegisteredServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerAddrType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerAddrType.setDescription('The type of IP address used by the server. This object is limited to IPv4 and IPv6 addresses.')
slaMonitorAgentRegisteredServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerAddr.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerAddr.setDescription('The IP address of the SLA Monitor server with which the agent is currently registered.')
slaMonitorAgentRegisteredServerPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRegisteredServerPort.setDescription('The TCP port utilized by the SLA Monitor server with which the agent is currently registered.')
slaMonitorAgentRegistrationTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentRegistrationTime.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRegistrationTime.setDescription('Specifies the maximum amount of time, in seconds, until the current registration period expires.')
slaMonitorAgentCliAvailable = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentCliAvailable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentCliAvailable.setDescription('The value of this attribute indicates whether the SLA Monitor agent CLI is available or not.')
slaMonitorAgentCliTimeout = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentCliTimeout.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentCliTimeout.setDescription("Specifies the maximum amount of time, in seconds, until the CLI session is automatically terminated. The value of this attribute is pertinent only if CLI timeouts are enabled (slaMonitorAgentCliTimeoutMode equals 'enable(1)').")
slaMonitorAgentCliTimeoutMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentCliTimeoutMode.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentCliTimeoutMode.setDescription("The value of this attribute indicates whether the SLA Monitor agent automatic CLI session timeout is enabled or not. When this attribute is set to 'enable(1)', a CLI session will automatically timeout after slaMonitorAgentCliTimeout seconds.")
slaMonitorAgentSupportedApps = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 13), Bits().clone(namedValues=NamedValues(("other", 0), ("ntr", 1), ("rtp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentSupportedApps.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentSupportedApps.setDescription('An enumeration of the SLA Monitor agent capabilities.')
slaMonitorAgentConfiguredAgentAddrType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 14), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentAddrType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentAddrType.setDescription('The type of IP address used by the agent. This object is limited to IPv4 and IPv6 addresses.')
slaMonitorAgentConfiguredAgentAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 15), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentAddr.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentAddr.setDescription('The IP address of the SLA Monitor agent. If the value of this attribute is 0.0.0.0, the SLA Monitor agent will utilize an active device IP address by default.')
slaMonitorAgentConfiguredAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 16), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentPort.setDescription('The UDP port utilized by the SLA Monitor agent for agent-server communication. If the value of this attribute is zero, the SLA Monitor agent will utilize a default port value for communication purposes.')
slaMonitorAgentConfiguredServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 17), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerAddrType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerAddrType.setDescription('The type of IP address used by the server. This object is limited to IPv4 and IPv6 addresses.')
slaMonitorAgentConfiguredServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 18), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerAddr.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerAddr.setDescription('The IP address of the SLA Monitor server with which the agent is allowed to register. If the value of this attribute is not 0.0.0.0, the SLA Monitor agent may only respond to server requests originating at the specified IP address (or the IP address specified by the slaMonitorAgentConfiguredAltServerAddr object if it is non-zero).')
slaMonitorAgentConfiguredServerPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 19), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredServerPort.setDescription('The TCP port utilized by the SLA Monitor server with which the agent is allowed to register. If the value of this attribute is non-zero, the SLA Monitor agent may only respond to server requests originating from the specified port (or from the port specified by the slaMonitorAgentConfiguredAltServerPort object if it is non-zero).')
slaMonitorAgentConfiguredAltServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 20), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerAddrType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerAddrType.setDescription('The type of IP address used by the server. This object is limited to IPv4 and IPv6 addresses.')
slaMonitorAgentConfiguredAltServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 21), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerAddr.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerAddr.setDescription('The IP address of the alternate SLA Monitor server with which the agent is allowed to register. If the value of this attribute is not 0.0.0.0, the SLA Monitor agent may only respond to server requests originating at the specified IP address (or the IP address specified by the slaMonitorAgentConfiguredServerAddr object if it is non-zero).')
slaMonitorAgentConfiguredAltServerPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 22), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAltServerPort.setDescription('The TCP port utilized by the alternate SLA Monitor server with which the agent is allowed to register. If the value of this attribute is non-zero, the SLA Monitor agent may only respond to server requests originating from the specified port (or from the port specified by the slaMonitorAgentConfiguredServerPort object if it is non-zero).')
slaMonitorAgentToAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 23), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentToAgentPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentToAgentPort.setDescription('The base UDP port currently used by the SLA Monitor agent for agent-agent communication. The base UDP port is used to derive multiple agent communication ports. An even base port values causes slaMonitorAgentToAgentPort and slaMonitorAgentToAgentPort+1 ports to be used. An odd base port values causes slaMonitorAgentToAgentPort and slaMonitorAgentToAgentPort-1 ports to be used.')
slaMonitorAgentConfiguredAgentToAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 24), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentToAgentPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentToAgentPort.setDescription('The UDP port utilized by the SLA Monitor agent for agent-agent communication. If the value of this attribute is zero, the SLA Monitor agent will utilize a default port value for the base agent-agent UDP communication port.')
slaMonitorAgentEncryptionSupport = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorAgentEncryptionSupport.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentEncryptionSupport.setDescription('Specifies if encrypted agent-server communication is supported by the agent.')
slaMonitorAgentConfiguredAgentVrfName = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentVrfName.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfiguredAgentVrfName.setDescription('The name of the virtual Router which SLA Monitor Agent IP address (slaMonitorAgentConfiguredAgentAddr) is associated with. This is only supported on VSP9K for now')
slaMonitorAgentSlaParameter = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentSlaParameter.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentSlaParameter.setDescription(' String directly passed to the SLA Agent as parameter')
slaMonitorAgentCertFileInstallAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("install", 2), ("deinstall", 3))).clone('noAction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentCertFileInstallAction.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentCertFileInstallAction.setDescription("Operation object to install and deinstall the certificate file to a platform specific location. 'noactio' -is default setting and always is returned when this object is queried. 'install', object slaMonitorAgentCertFile will be used as source certificate file to install . 'deinstall', will ignore object slaMonitorAgentCertFile and just deinstall or remove the certificate file from the installed location")
slaMonitorAgentCertFile = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentCertFile.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentCertFile.setDescription('the certification file name for installation. It is only valid or used when object slaMonitorAgentCertFileInstallAction is set to install. Otherwise, it will be ignored')
slaMonitorAgentServerBypass = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentServerBypass.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentServerBypass.setDescription("The value of this attribute determines whether the SLA Monitor agent can perform certain operations without being registered with a server. When this attribute is set to 'enable(1)', an agent will respond to agent-to-agent test requests regardless of the server registration status. A 'disable(2)' setting will restrict agent responses when the agent is not registered with an SLA Monitor server.")
slaMonitorAgentRefuseServerTests = MibScalar((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("refuse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaMonitorAgentRefuseServerTests.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRefuseServerTests.setDescription("The value of this attribute determines whether the SLA Monitor agent will refuse test requests from the server. When this attribute is set to 'allow(1)', an agent will accept test requests from the server. A 'refuse(2)' setting will cause the agent to reject test requests from the server. From a usage perspective, it may be necessary to temporarily refuse server test requests if the agent is being actively managed by a server but the administrator wishes to use the CLI or SNMP interfaces to initiate tests manually.")
slaMonitorAgtTestClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2))
slaMonitorNtrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1), )
if mibBuilder.loadTexts: slaMonitorNtrCtrlTable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlTable.setDescription('Defines the SLAMon agent NTR test control table supporting the ability to initiate NTR tests remotely. The results of NTR test operations are stored in the slaMonitorNtrResultsTable and the slaMonitorNtrHopsTable.')
slaMonitorNtrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1), ).setIndexNames((0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlOwnerId"), (0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlTestName"))
if mibBuilder.loadTexts: slaMonitorNtrCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlEntry.setDescription('Defines an entry in the slaMonitorNtrCtrlTable. The first index element, slaMonitorNtrCtrlOwnerId, is of type SnmpAdminString, allowing for a management application to identify its entries. The second index, slaMonitorNtrCtrlTestName (also an SnmpAdminString), enables the same management application to have multiple requests configured.')
slaMonitorNtrCtrlOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: slaMonitorNtrCtrlOwnerId.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlOwnerId.setDescription('The owner of an NTR test.')
slaMonitorNtrCtrlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: slaMonitorNtrCtrlTestName.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlTestName.setDescription('The name of an NTR test. This value is locally unique, within the scope of an slaMonitorNtrCtrlOwnerId.')
slaMonitorNtrCtrlTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlTargetAddressType.setDescription('Specifies the target address type.')
slaMonitorNtrCtrlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlTargetAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlTargetAddress.setDescription('Specifies the target address used for the NTR test. The address type can be determined by examining the value of the corresponding slaMonitorNtrCtrlTargetAddressType. A value for this object MUST be provided during entry creation.')
slaMonitorNtrCtrlDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 5), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlDscp.setDescription('Specifies the DSCP value for use in packets that are generated by the NTR test.')
slaMonitorNtrCtrlAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlAttempts.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlAttempts.setDescription('Specifies the number of attempts are generated by the NTR test.')
slaMonitorNtrCtrlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 200000)).clone(20000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlPeriod.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlPeriod.setDescription('Specifies the interval between packets, in microseconds, generated by the NTR test.')
slaMonitorNtrCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlAdminStatus.setDescription("Used to initiate an NTR test: enabled(1) - initiate the test as defined by this slaMonitorNtrCtrlEntry. disabled(2) - deactivate the test defined by this slaMonitorNtrCtrlEntry, if possible. Refer to the corresponding slaMonitorNtrResultsOperStatus to determine the operational state of the test defined by this entry. When queried, 'disabled(2)' is always returned for this attribute.")
slaMonitorNtrCtrlLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlLabel.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlLabel.setDescription('A label used to reference the NTR control entry in a textual manner.')
slaMonitorNtrCtrlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 10), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlStorageType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
slaMonitorNtrCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorNtrCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrCtrlRowStatus.setDescription('This object allows entries to be created and deleted in the slaMonitorNtrCtrlTable. Deletion of an entry in this table results in the deletion of all corresponding (i.e., entries with the same slaMonitorNtrCtrlOwnerId and slaMonitorNtrCtrlTestName index values) entries in the slaMonitorNtrResultsTable and the slaMonitorNtrHopsTable. Initiation of an NTR test corresponding to this entry is controlled via slaMonitorNtrCtrlAdminStatus and not by entry creation. The operational state of an NTR test can be determined by examining the corresponding slaMonitorNtrResultsOperStatus object.')
slaMonitorNtrResultsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2), )
if mibBuilder.loadTexts: slaMonitorNtrResultsTable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsTable.setDescription("Defines the SLAMon agent NTR results table that is used to track the status of NTR tests initiated through the the slaMonitorNtrCtrlTable. An entry is added to the slaMonitorNtrResultsTable when an NTR test defined by an slaMonitorNtrCtrlEntry is started by transition of its slaMonitorNtrCtrlAdminStatus object to 'enabled(1)'. If the object slaMonitorNtrCtrlAdminStatus has the value 'disabled(2)', then successfully writing 'enabled(1)' to the object slaMonitorNtrCtrlAdminStatus re-initializes an already existing entry in the slaMonitorNtrResultsTable. The values of objects in the re-initialized entry are the same as the values of objects in a new entry would be. An entry is removed from the slaMonitorNtrResultsTable when its corresponding slaMonitorNtrCtrlEntry is deleted.")
slaMonitorNtrResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1), ).setIndexNames((0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlOwnerId"), (0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlTestName"))
if mibBuilder.loadTexts: slaMonitorNtrResultsEntry.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsEntry.setDescription('Defines an entry in the slaMonitorNtrResultsTable. The slaMonitorNtrResultsTable has the same indexing as the slaMonitorNtrCtrlTable so that a slaMonitorNtrResultsEntry corresponds to the slaMonitorNtrCtrlEntry that caused it to be created.')
slaMonitorNtrResultsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("aborted", 2), ("completed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsOperStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsOperStatus.setDescription('Reflects the operational state of an slaMonitorNtrCtrlEntry: inProgress(1) - test is active. aborted(2) - test has been stopped. Refer to object slaMonitorNtrResultsAbortData for details. completed(3) - test is completed. Refer to objects slaMonitorNtrResultsCompletionData and slaMonitorNtrResultsCompletionSummary for details.')
slaMonitorNtrResultsSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcAddressType.setDescription('Specifies the address type of the source IP address used for this test.')
slaMonitorNtrResultsSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcAddress.setDescription('Specifies the source IP address used for this test.')
slaMonitorNtrResultsDstAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsDstAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsDstAddressType.setDescription('Specifies the address type of the destination IP address used for this test.')
slaMonitorNtrResultsDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsDstAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsDstAddress.setDescription('Specifies the destination IP address used for this test.')
slaMonitorNtrResultsSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsSrcPort.setDescription('Specifies the Layer 4 source port used for this test.')
slaMonitorNtrResultsDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsDstPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsDstPort.setDescription('Specifies the Layer 4 destination port used for this test.')
slaMonitorNtrResultsDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 8), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsDscp.setDescription('Specifies the DSCP value contained in NTR test packets generated by the agent for this test.')
slaMonitorNtrResultsTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsTTL.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsTTL.setDescription('The maximum time-to-live (TTL) value used during the execution of this test.')
slaMonitorNtrResultsCompletionData = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 10), Bits().clone(namedValues=NamedValues(("other", 0), ("remoteUnreachable", 1), ("remotePortUnreachable", 2), ("remoteNetUnreachable", 3), ("remoteHostUnreachable", 4), ("remoteProtocolUnreachable", 5), ("remoteFirewalledUnreachable", 6), ("remoteResponded", 7), ("remoteResponseLikely", 8), ("remoteNoResponse", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsCompletionData.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsCompletionData.setDescription('Provides details related to test completion. Multiple bits may be set to convey test status.')
slaMonitorNtrResultsCompletionSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsCompletionSummary.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsCompletionSummary.setDescription('A user-readable string that is used to convey test results for completed tests in an easy-to-understand format.')
slaMonitorNtrResultsAbortData = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 12), Bits().clone(namedValues=NamedValues(("other", 0), ("agentDisabled", 1), ("agentBusy", 2), ("timeout", 3), ("cancelled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsAbortData.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsAbortData.setDescription('Provides details for tests that were aborted. Multiple bits may be set to convey test status.')
slaMonitorNtrResultsHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrResultsHopCount.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrResultsHopCount.setDescription('The total number of hops for which information has been acquired during the execution of this test.')
slaMonitorNtrHopsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3), )
if mibBuilder.loadTexts: slaMonitorNtrHopsTable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsTable.setDescription('Defines the SLAMon agent NTR test hop table for keeping track of the results of NTR tests on a per-hop basis.')
slaMonitorNtrHopsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1), ).setIndexNames((0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlOwnerId"), (0, "SLA-MONITOR-MIB", "slaMonitorNtrCtrlTestName"), (0, "SLA-MONITOR-MIB", "slaMonitorNtrHopsHopIndex"))
if mibBuilder.loadTexts: slaMonitorNtrHopsEntry.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsEntry.setDescription('Defines an entry in the slaMonitorNtrHopsTable. The first two index elements identify the slaMonitorNtrCtrlEntry with which this slaMonitorNtrHopsEntry is associated. The third index element, slaMonitorNtrHopsHopIndex, selects a hop in an NTR test path.')
slaMonitorNtrHopsHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: slaMonitorNtrHopsHopIndex.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsHopIndex.setDescription('Specifies the hop index for an NTR test hop. Values for this object with respect to the same slaMonitorNtrCtrlOwnerId and slaMonitorNtrCtrlTestName MUST start at 1 and be given increasing values for subsequent hops. The value of slaMonitorNtrHopsHopIndex does not necessarily represent the number of the hop on the traced path, though this is normally the case.')
slaMonitorNtrHopsTgtAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrHopsTgtAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsTgtAddressType.setDescription('This object indicates the type of address stored in the corresponding slaMonitorNtrHopsTgtAddress object.')
slaMonitorNtrHopsTgtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrHopsTgtAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsTgtAddress.setDescription('This object reports the IP address associated with the NTR test hop.')
slaMonitorNtrHopsRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrHopsRtt.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsRtt.setDescription('The NTR test round-trip-time (RTT), in microseconds, computed for this hop.')
slaMonitorNtrHopsIngressDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 5), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrHopsIngressDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsIngressDscp.setDescription('The DSCP value in the NTR test packet received by the target host (slaMonitorNtrHopsTgtAddress) for this hop.')
slaMonitorNtrHopsEgressDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 3, 1, 6), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorNtrHopsEgressDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorNtrHopsEgressDscp.setDescription('The DSCP value in the NTR test response packet received by the SLAMon agent for this hop.')
slaMonitorRtpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4), )
if mibBuilder.loadTexts: slaMonitorRtpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlTable.setDescription('Defines the SLAMon agent RTP test control table supporting the ability to initiate RTP tests remotely. The results of RTP test operations are stored in the slaMonitorRtpResultsTable.')
slaMonitorRtpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1), ).setIndexNames((0, "SLA-MONITOR-MIB", "slaMonitorRtpCtrlOwnerId"), (0, "SLA-MONITOR-MIB", "slaMonitorRtpCtrlTestName"))
if mibBuilder.loadTexts: slaMonitorRtpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlEntry.setDescription('Defines an entry in the slaMonitorRtpCtrlTable. The first index element, slaMonitorRtpCtrlOwnerId, is of type SnmpAdminString, allowing for a management application to identify its entries. The second index, slaMonitorRtpCtrlTestName (also an SnmpAdminString), enables the same management application to have multiple requests configured.')
slaMonitorRtpCtrlOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: slaMonitorRtpCtrlOwnerId.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlOwnerId.setDescription('The owner of an RTP test.')
slaMonitorRtpCtrlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: slaMonitorRtpCtrlTestName.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlTestName.setDescription('The name of an RTP test. This is locally unique, within the scope of an slaMonitorRtpCtrlOwnerId.')
slaMonitorRtpCtrlTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlTargetAddressType.setDescription('Specifies the target address type.')
slaMonitorRtpCtrlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlTargetAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlTargetAddress.setDescription('Specifies the target address used for the RTP test. The address type can be determined by examining the value of the corresponding slaMonitorRtpCtrlTargetAddressType. A value for this object MUST be provided during entry creation.')
slaMonitorRtpCtrlDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 5), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlDscp.setDescription('Specifies the DSCP value for use in packets that are generated by the RTP test.')
slaMonitorRtpCtrlTestPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlTestPackets.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlTestPackets.setDescription('Specifies the number of test packets that are generated by the RTP test. Test packets are used for jitter determination.')
slaMonitorRtpCtrlSyncPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlSyncPackets.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlSyncPackets.setDescription('Specifies the number of synchronization packets that are generated by the RTP test. Sync packets are used for network delay determination.')
slaMonitorRtpCtrlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 200000)).clone(20000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlPeriod.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlPeriod.setDescription('Specifies the interval between packets (in microseconds) generated by the RTP test.')
slaMonitorRtpCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlAdminStatus.setDescription("Used to initiate an RTP test: enabled(1) - initiate the test as defined by this slaMonitorRtpCtrlEntry. disabled(2) - deactivate the test defined by this slaMonitorRtpCtrlEntry, if possible. Refer to the corresponding slaMonitorRtpResultsOperStatus to determine the operational state of the test defined by this entry. When queried, 'disabled(2)' is always returned for this attribute.")
slaMonitorRtpCtrlLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlLabel.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlLabel.setDescription('A label used to reference the RTP control entry in a textual manner.')
slaMonitorRtpCtrlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 11), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlStorageType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
slaMonitorRtpCtrlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slaMonitorRtpCtrlRowStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpCtrlRowStatus.setDescription('This object allows entries to be created and deleted in the slaMonitorRtpCtrlTable. Deletion of an entry in this table results in the deletion of all corresponding (i.e., entries with the same slaMonitorRtpCtrlOwnerId and slaMonitorRtpCtrlTestName index values) entries in the slaMonitorRtpResultsTable. Initiation of an RTP test corresponding to this entry is controlled via slaMonitorRtpCtrlAdminStatus and not by entry creation. The operational state of an RTP test can be determined by examining the corresponding slaMonitorRtpResultsOperStatus object.')
slaMonitorRtpResultsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5), )
if mibBuilder.loadTexts: slaMonitorRtpResultsTable.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsTable.setDescription("Defines the SLAMon agent RTP results table that is used to track the status of RTP tests initiated through the the slaMonitorRtpCtrlTable. An entry is added to the slaMonitorRtpResultsTable when an RTP test defined by an slaMonitorRtpCtrlEntry is started by transition of its slaMonitorRtpCtrlAdminStatus object to 'enabled(1)'. If the object slaMonitorRtpCtrlAdminStatus has the value 'disabled(2)', then successfully writing 'enabled(1)' to the object slaMonitorRtpCtrlAdminStatus re-initializes an already existing entry in the slaMonitorRtpResultsTable. The values of objects in the re-initialized entry are the same as the values of objects in a new entry would be. An entry is removed from the slaMonitorRtpResultsTable when its corresponding slaMonitorRtpCtrlEntry is deleted.")
slaMonitorRtpResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1), ).setIndexNames((0, "SLA-MONITOR-MIB", "slaMonitorRtpCtrlOwnerId"), (0, "SLA-MONITOR-MIB", "slaMonitorRtpCtrlTestName"))
if mibBuilder.loadTexts: slaMonitorRtpResultsEntry.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsEntry.setDescription('Defines an entry in the slaMonitorRtpResultsTable. The slaMonitorRtpResultsTable has the same indexing as the slaMonitorRtpCtrlTable so that a slaMonitorRtpResultsEntry corresponds to the slaMonitorRtpCtrlEntry that caused it to be created.')
slaMonitorRtpResultsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inProgress", 1), ("aborted", 2), ("completed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsOperStatus.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsOperStatus.setDescription('Reflects the operational state of an slaMonitorRtpCtrlEntry: inProgress(1) - test is active. aborted(2) - test has been stopped. Refer to object slaMonitorRtpResultsAbortData for details. completed(3) - test is completed. Refer to objects that contain completed test results (all attributes except slaMonitorRtpResultsAbortData) for details.')
slaMonitorRtpResultsSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcAddressType.setDescription('Specifies the address type of the source IP address used for this test.')
slaMonitorRtpResultsSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcAddress.setDescription('Specifies the source IP address used for this test.')
slaMonitorRtpResultsDstAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsDstAddressType.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsDstAddressType.setDescription('Specifies the address type of the destination IP address used for this test.')
slaMonitorRtpResultsDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsDstAddress.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsDstAddress.setDescription('Specifies the destination IP address used for this test.')
slaMonitorRtpResultsSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsSrcPort.setDescription('Specifies the Layer 4 source port used for this test.')
slaMonitorRtpResultsDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsDstPort.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsDstPort.setDescription('Specifies the Layer 4 destination port used for this test.')
slaMonitorRtpResultsDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 8), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsDscp.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsDscp.setDescription('Specifies the DSCP value contained in RTP test packets generated by the agent for this test.')
slaMonitorRtpResultsAverageDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsAverageDelay.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsAverageDelay.setDescription('The average network delay (RTT) experienced during this test sequence, in microseconds.')
slaMonitorRtpResultsMedianDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsMedianDelay.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsMedianDelay.setDescription('The median network delay (RTT) experienced during this test sequence, in microseconds.')
slaMonitorRtpResultsPacketLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsPacketLoss.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsPacketLoss.setDescription('A count of packets lost during this test sequence.')
slaMonitorRtpResultsOutOfOrderArrivals = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsOutOfOrderArrivals.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsOutOfOrderArrivals.setDescription('The number of out-of-order arrivals detected during this test sequence.')
slaMonitorRtpResultsJitterQuartile0 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile0.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile0.setDescription('The quartile 0 network jitter value, in microseconds, experienced during this test sequence.')
slaMonitorRtpResultsJitterQuartile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile1.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile1.setDescription('The quartile 1 network jitter value, in microseconds, experienced during this test sequence.')
slaMonitorRtpResultsJitterQuartile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile2.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile2.setDescription('The quartile 2 network jitter value, in microseconds, experienced during this test sequence.')
slaMonitorRtpResultsJitterQuartile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile3.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile3.setDescription('The quartile 3 network jitter value, in microseconds, experienced during this test sequence.')
slaMonitorRtpResultsJitterQuartile4 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile4.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsJitterQuartile4.setDescription('The quartile 4 network jitter value, in microseconds, experienced during this test sequence.')
slaMonitorRtpResultsAbortData = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 4, 8, 1, 2, 5, 1, 18), Bits().clone(namedValues=NamedValues(("other", 0), ("agentDisabled", 1), ("agentBusy", 2), ("timeout", 3), ("cancelled", 4), ("deniedByTarget", 5), ("networkIssue", 6), ("timeSync", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slaMonitorRtpResultsAbortData.setStatus('current')
if mibBuilder.loadTexts: slaMonitorRtpResultsAbortData.setDescription('Provides details for tests that were aborted. Multiple bits may be set to convey test status.')
slaMonitorAgentExceptionDetected = NotificationType((1, 3, 6, 1, 4, 1, 45, 4, 8, 0, 1))
if mibBuilder.loadTexts: slaMonitorAgentExceptionDetected.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentExceptionDetected.setDescription('Indicates that an exception event that impacts the local SLA Monitor agent has been detected.')
slaMonitorMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 1))
slaMonitorMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 2))
slaMonitorMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 1, 1)).setObjects(("SLA-MONITOR-MIB", "slaMonitorAgentConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slaMonitorMibCompliance = slaMonitorMibCompliance.setStatus('current')
if mibBuilder.loadTexts: slaMonitorMibCompliance.setDescription('Describes the requirements for conformance to the Avaya Networks SLA Monitor Agent MIB.')
slaMonitorAgentConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 2, 1)).setObjects(("SLA-MONITOR-MIB", "slaMonitorAgentStatus"), ("SLA-MONITOR-MIB", "slaMonitorAgentAddressType"), ("SLA-MONITOR-MIB", "slaMonitorAgentAddress"), ("SLA-MONITOR-MIB", "slaMonitorAgentPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentRegisteredWithServer"), ("SLA-MONITOR-MIB", "slaMonitorAgentRegisteredServerAddrType"), ("SLA-MONITOR-MIB", "slaMonitorAgentRegisteredServerAddr"), ("SLA-MONITOR-MIB", "slaMonitorAgentRegisteredServerPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentRegistrationTime"), ("SLA-MONITOR-MIB", "slaMonitorAgentCliAvailable"), ("SLA-MONITOR-MIB", "slaMonitorAgentCliTimeout"), ("SLA-MONITOR-MIB", "slaMonitorAgentCliTimeoutMode"), ("SLA-MONITOR-MIB", "slaMonitorAgentSupportedApps"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAgentAddrType"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAgentAddr"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAgentPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredServerAddrType"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredServerAddr"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredServerPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAltServerAddrType"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAltServerAddr"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAltServerPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentToAgentPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAgentToAgentPort"), ("SLA-MONITOR-MIB", "slaMonitorAgentEncryptionSupport"), ("SLA-MONITOR-MIB", "slaMonitorAgentConfiguredAgentVrfName"), ("SLA-MONITOR-MIB", "slaMonitorAgentSlaParameter"), ("SLA-MONITOR-MIB", "slaMonitorAgentCertFileInstallAction"), ("SLA-MONITOR-MIB", "slaMonitorAgentCertFile"), ("SLA-MONITOR-MIB", "slaMonitorAgentServerBypass"), ("SLA-MONITOR-MIB", "slaMonitorAgentRefuseServerTests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slaMonitorAgentConfigGroup = slaMonitorAgentConfigGroup.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentConfigGroup.setDescription('Objects used for SLA Monitor Agent configuration and monitoring.')
slaMonitorAgentNtrTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 2, 2)).setObjects(("SLA-MONITOR-MIB", "slaMonitorNtrCtrlTargetAddressType"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlTargetAddress"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlDscp"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlAttempts"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlPeriod"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlAdminStatus"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlLabel"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlStorageType"), ("SLA-MONITOR-MIB", "slaMonitorNtrCtrlRowStatus"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsOperStatus"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsSrcAddressType"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsSrcAddress"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsDstAddressType"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsDstAddress"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsSrcPort"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsDstPort"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsDscp"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsTTL"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsCompletionData"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsCompletionSummary"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsAbortData"), ("SLA-MONITOR-MIB", "slaMonitorNtrResultsHopCount"), ("SLA-MONITOR-MIB", "slaMonitorNtrHopsTgtAddressType"), ("SLA-MONITOR-MIB", "slaMonitorNtrHopsTgtAddress"), ("SLA-MONITOR-MIB", "slaMonitorNtrHopsRtt"), ("SLA-MONITOR-MIB", "slaMonitorNtrHopsIngressDscp"), ("SLA-MONITOR-MIB", "slaMonitorNtrHopsEgressDscp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slaMonitorAgentNtrTestGroup = slaMonitorAgentNtrTestGroup.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentNtrTestGroup.setDescription('Objects used for SLA Monitor Agent NTR test execution and results reporting.')
slaMonitorAgentRtpTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 4, 8, 2, 2, 3)).setObjects(("SLA-MONITOR-MIB", "slaMonitorRtpCtrlTargetAddressType"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlTargetAddress"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlDscp"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlTestPackets"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlSyncPackets"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlPeriod"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlAdminStatus"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlLabel"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlStorageType"), ("SLA-MONITOR-MIB", "slaMonitorRtpCtrlRowStatus"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsOperStatus"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsSrcAddressType"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsSrcAddress"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsDstAddressType"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsDstAddress"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsSrcPort"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsDstPort"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsDscp"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsAverageDelay"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsMedianDelay"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsPacketLoss"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsOutOfOrderArrivals"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsJitterQuartile0"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsJitterQuartile1"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsJitterQuartile2"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsJitterQuartile3"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsJitterQuartile4"), ("SLA-MONITOR-MIB", "slaMonitorRtpResultsAbortData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slaMonitorAgentRtpTestGroup = slaMonitorAgentRtpTestGroup.setStatus('current')
if mibBuilder.loadTexts: slaMonitorAgentRtpTestGroup.setDescription('Objects used for SLA Monitor Agent RTP test execution and results reporting.')
mibBuilder.exportSymbols("SLA-MONITOR-MIB", slaMonitorNtrHopsTable=slaMonitorNtrHopsTable, slaMonitorNtrResultsSrcAddressType=slaMonitorNtrResultsSrcAddressType, slaMonitorRtpResultsDscp=slaMonitorRtpResultsDscp, slaMonitorRtpResultsSrcAddress=slaMonitorRtpResultsSrcAddress, slaMonitorNtrResultsOperStatus=slaMonitorNtrResultsOperStatus, slaMonitorRtpResultsJitterQuartile2=slaMonitorRtpResultsJitterQuartile2, slaMonitorAgentSupportedApps=slaMonitorAgentSupportedApps, slaMonitorAgentPort=slaMonitorAgentPort, slaMonitorNtrResultsDstAddress=slaMonitorNtrResultsDstAddress, slaMonitorNtrResultsSrcAddress=slaMonitorNtrResultsSrcAddress, slaMonitorRtpCtrlTargetAddressType=slaMonitorRtpCtrlTargetAddressType, slaMonitorAgentNtrTestGroup=slaMonitorAgentNtrTestGroup, slaMonitorAgentServerBypass=slaMonitorAgentServerBypass, slaMonitorRtpCtrlDscp=slaMonitorRtpCtrlDscp, slaMonitorRtpCtrlAdminStatus=slaMonitorRtpCtrlAdminStatus, slaMonitorNtrHopsIngressDscp=slaMonitorNtrHopsIngressDscp, slaMonitorNtrCtrlRowStatus=slaMonitorNtrCtrlRowStatus, slaMonitorRtpCtrlRowStatus=slaMonitorRtpCtrlRowStatus, slaMonitorAgtClasses=slaMonitorAgtClasses, slaMonitorAgentRegisteredServerPort=slaMonitorAgentRegisteredServerPort, slaMonitorMibCompliance=slaMonitorMibCompliance, slaMonitorAgentConfiguredAgentToAgentPort=slaMonitorAgentConfiguredAgentToAgentPort, slaMonitorNtrResultsDscp=slaMonitorNtrResultsDscp, slaMonitorAgentConfiguredServerPort=slaMonitorAgentConfiguredServerPort, slaMonitorAgentCliAvailable=slaMonitorAgentCliAvailable, slaMonitorRtpCtrlOwnerId=slaMonitorRtpCtrlOwnerId, slaMonitorRtpResultsDstAddress=slaMonitorRtpResultsDstAddress, slaMonitorRtpResultsSrcAddressType=slaMonitorRtpResultsSrcAddressType, slaMonitorNtrResultsEntry=slaMonitorNtrResultsEntry, slaMonitorNtrCtrlLabel=slaMonitorNtrCtrlLabel, slaMonitorAgentCliTimeout=slaMonitorAgentCliTimeout, slaMonitorAgentCliTimeoutMode=slaMonitorAgentCliTimeoutMode, slaMonitorRtpResultsDstAddressType=slaMonitorRtpResultsDstAddressType, slaMonitorRtpResultsMedianDelay=slaMonitorRtpResultsMedianDelay, slaMonitorRtpCtrlTable=slaMonitorRtpCtrlTable, slaMonitorNtrResultsTable=slaMonitorNtrResultsTable, slaMonitorRtpResultsJitterQuartile3=slaMonitorRtpResultsJitterQuartile3, PYSNMP_MODULE_ID=slaMonitorMib, slaMonitorRtpResultsJitterQuartile0=slaMonitorRtpResultsJitterQuartile0, slaMonitorNtrCtrlStorageType=slaMonitorNtrCtrlStorageType, slaMonitorRtpCtrlPeriod=slaMonitorRtpCtrlPeriod, slaMonitorAgentRegistrationTime=slaMonitorAgentRegistrationTime, slaMonitorMib=slaMonitorMib, slaMonitorRtpCtrlTestName=slaMonitorRtpCtrlTestName, slaMonitorAgentConfiguredAltServerAddrType=slaMonitorAgentConfiguredAltServerAddrType, slaMonitorRtpCtrlTestPackets=slaMonitorRtpCtrlTestPackets, slaMonitorRtpResultsOperStatus=slaMonitorRtpResultsOperStatus, slaMonitorAgentConfiguredAgentAddr=slaMonitorAgentConfiguredAgentAddr, slaMonitorRtpResultsPacketLoss=slaMonitorRtpResultsPacketLoss, slaMonitorAgentRtpTestGroup=slaMonitorAgentRtpTestGroup, slaMonitorNtrResultsDstAddressType=slaMonitorNtrResultsDstAddressType, slaMonitorNtrHopsTgtAddressType=slaMonitorNtrHopsTgtAddressType, slaMonitorRtpResultsDstPort=slaMonitorRtpResultsDstPort, slaMonitorNtrCtrlTable=slaMonitorNtrCtrlTable, slaMonitorRtpResultsOutOfOrderArrivals=slaMonitorRtpResultsOutOfOrderArrivals, slaMonitorAgentConfiguredAgentPort=slaMonitorAgentConfiguredAgentPort, slaMonitorRtpResultsJitterQuartile4=slaMonitorRtpResultsJitterQuartile4, slaMonitorNtrResultsSrcPort=slaMonitorNtrResultsSrcPort, slaMonitorRtpResultsEntry=slaMonitorRtpResultsEntry, slaMonitorNtrResultsTTL=slaMonitorNtrResultsTTL, slaMonitorMibNotifications=slaMonitorMibNotifications, slaMonitorAgentRegisteredServerAddr=slaMonitorAgentRegisteredServerAddr, slaMonitorAgentEncryptionSupport=slaMonitorAgentEncryptionSupport, slaMonitorAgentCertFile=slaMonitorAgentCertFile, slaMonitorRtpCtrlStorageType=slaMonitorRtpCtrlStorageType, slaMonitorRtpResultsJitterQuartile1=slaMonitorRtpResultsJitterQuartile1, slaMonitorMibConformance=slaMonitorMibConformance, slaMonitorNtrHopsEntry=slaMonitorNtrHopsEntry, slaMonitorNtrHopsHopIndex=slaMonitorNtrHopsHopIndex, slaMonitorAgentAddress=slaMonitorAgentAddress, slaMonitorAgentToAgentPort=slaMonitorAgentToAgentPort, slaMonitorAgentRegisteredServerAddrType=slaMonitorAgentRegisteredServerAddrType, slaMonitorAgentConfiguredAltServerPort=slaMonitorAgentConfiguredAltServerPort, slaMonitorNtrCtrlTargetAddressType=slaMonitorNtrCtrlTargetAddressType, slaMonitorNtrHopsTgtAddress=slaMonitorNtrHopsTgtAddress, slaMonitorAgentConfiguredServerAddr=slaMonitorAgentConfiguredServerAddr, slaMonitorAgentRefuseServerTests=slaMonitorAgentRefuseServerTests, slaMonitorMibClasses=slaMonitorMibClasses, slaMonitorMibGroups=slaMonitorMibGroups, slaMonitorAgentRegisteredWithServer=slaMonitorAgentRegisteredWithServer, slaMonitorRtpResultsAverageDelay=slaMonitorRtpResultsAverageDelay, slaMonitorNtrCtrlPeriod=slaMonitorNtrCtrlPeriod, slaMonitorAgentCertFileInstallAction=slaMonitorAgentCertFileInstallAction, slaMonitorNtrCtrlEntry=slaMonitorNtrCtrlEntry, slaMonitorNtrCtrlTestName=slaMonitorNtrCtrlTestName, slaMonitorAgentExceptionDetected=slaMonitorAgentExceptionDetected, slaMonitorNtrCtrlDscp=slaMonitorNtrCtrlDscp, slaMonitorAgentConfigGroup=slaMonitorAgentConfigGroup, slaMonitorNtrResultsCompletionData=slaMonitorNtrResultsCompletionData, slaMonitorRtpCtrlLabel=slaMonitorRtpCtrlLabel, slaMonitorNtrResultsDstPort=slaMonitorNtrResultsDstPort, slaMonitorAgentConfiguredServerAddrType=slaMonitorAgentConfiguredServerAddrType, slaMonitorAgentConfiguredAltServerAddr=slaMonitorAgentConfiguredAltServerAddr, slaMonitorNtrCtrlAdminStatus=slaMonitorNtrCtrlAdminStatus, slaMonitorNtrCtrlAttempts=slaMonitorNtrCtrlAttempts, slaMonitorNtrCtrlTargetAddress=slaMonitorNtrCtrlTargetAddress, slaMonitorNtrHopsEgressDscp=slaMonitorNtrHopsEgressDscp, slaMonitorAgentConfiguredAgentAddrType=slaMonitorAgentConfiguredAgentAddrType, slaMonitorAgentSlaParameter=slaMonitorAgentSlaParameter, slaMonitorNtrResultsHopCount=slaMonitorNtrResultsHopCount, slaMonitorRtpCtrlEntry=slaMonitorRtpCtrlEntry, slaMonitorAgentStatus=slaMonitorAgentStatus, slaMonitorAgentConfiguredAgentVrfName=slaMonitorAgentConfiguredAgentVrfName, slaMonitorAgentAddressType=slaMonitorAgentAddressType, slaMonitorNtrResultsCompletionSummary=slaMonitorNtrResultsCompletionSummary, slaMonitorAgtTestClasses=slaMonitorAgtTestClasses, slaMonitorRtpResultsSrcPort=slaMonitorRtpResultsSrcPort, slaMonitorRtpResultsAbortData=slaMonitorRtpResultsAbortData, slaMonitorRtpCtrlSyncPackets=slaMonitorRtpCtrlSyncPackets, slaMonitorNtrResultsAbortData=slaMonitorNtrResultsAbortData, slaMonitorNtrHopsRtt=slaMonitorNtrHopsRtt, slaMonitorRtpCtrlTargetAddress=slaMonitorRtpCtrlTargetAddress, slaMonitorRtpResultsTable=slaMonitorRtpResultsTable, slaMonitorNtrCtrlOwnerId=slaMonitorNtrCtrlOwnerId, slaMonitorMibCompliances=slaMonitorMibCompliances)
