#
# PySNMP MIB module CISCO-WAN-BBIF-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-BBIF-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
bbIfCnf, bbIfStateGrp, bbIfCnt = mibBuilder.importSymbols("BASIS-MIB", "bbIfCnf", "bbIfStateGrp", "bbIfCnt")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Gauge32, ModuleIdentity, TimeTicks, Unsigned32, IpAddress, ObjectIdentity, NotificationType, Integer32, iso, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Gauge32", "ModuleIdentity", "TimeTicks", "Unsigned32", "IpAddress", "ObjectIdentity", "NotificationType", "Integer32", "iso", "Bits", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanBbifPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 32))
ciscoWanBbifPortMIB.setRevisions(('2002-08-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanBbifPortMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanBbifPortMIB.setLastUpdated('200208300000Z')
if mibBuilder.loadTexts: ciscoWanBbifPortMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanBbifPortMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanBbifPortMIB.setDescription('The MIB module for configuration of ATM logical ports in PXM1 Service module in MGX82xx series. This MIB contains information on ATM Logical port statistics.')
bbIfCnfPortGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1))
bbIfCnfPortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: bbIfCnfPortGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbIfCnfPortGrpTable.setDescription(' The Broadband Interface config table is for logical interface. There will an entry for each of the logical partition of the physical line. ')
bbIfCnfPortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-PORT-MIB", "bbIfNum"))
if mibBuilder.loadTexts: bbIfCnfPortGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbIfCnfPortGrpEntry.setDescription(' An entry for the logical interface. The interface may be further be configured to be used as a virtual trunk OR as a UNI Port. ')
bbIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfNum.setStatus('current')
if mibBuilder.loadTexts: bbIfNum.setDescription('This is logical interface number within a physical line num. In MGX PXM1 card, a physical port can have a maximum of 32 logical interfaces.')
bbIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: bbIfRowStatus.setDescription('This variable enables or disables the logical interface. 1 - enable 2 - disable 3 - modify')
bbIfAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("writeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfAdmin.setStatus('current')
if mibBuilder.loadTexts: bbIfAdmin.setDescription('This variable enables or disables the logical interface. 1 - up 2 - down 3 - writeOnly')
bbIfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfLineNum.setStatus('current')
if mibBuilder.loadTexts: bbIfLineNum.setDescription('The line number associated with the logical interface. For PXM1, there is currently 4 physical lines.')
bbIfIngrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfIngrPctBandwidth.setStatus('current')
if mibBuilder.loadTexts: bbIfIngrPctBandwidth.setDescription('The percentage of aggregate physical line bandwidth, available for this broadband interface - Ingress. Default is 0 %.')
bbIfEgrPctBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfEgrPctBandwidth.setStatus('current')
if mibBuilder.loadTexts: bbIfEgrPctBandwidth.setDescription('The percentage of aggregate physical line bandwidth, available for this broadband interface - Egress . Default is 0 %.')
bbIfMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMinVpi.setStatus('current')
if mibBuilder.loadTexts: bbIfMinVpi.setDescription('The lower limit of VPI range to be reserved for this logical interface.')
bbIfMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMaxVpi.setStatus('current')
if mibBuilder.loadTexts: bbIfMaxVpi.setDescription('The upper limit of VPI range to be reserved for this logical interface. For virtual trunks, bbIfMinVpi and bbIfMaxVpi should be the same.')
bbIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfSpeed.setStatus('current')
if mibBuilder.loadTexts: bbIfSpeed.setDescription('The speed of the port in cells per second.')
bbIfMaxCellRatePct = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfMaxCellRatePct.setStatus('current')
if mibBuilder.loadTexts: bbIfMaxCellRatePct.setDescription('The maximum cell rate allowed for the port in terms of percentage. Must be greater than or equal to bbIfIngrPctBandwidth. The default is 100 percent.')
nextBbIfNumAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextBbIfNumAvailable.setStatus('current')
if mibBuilder.loadTexts: nextBbIfNumAvailable.setDescription('Indicates the next logical broadband interface number that is available.')
bbIfStateGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1), )
if mibBuilder.loadTexts: bbIfStateGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbIfStateGrpTable.setDescription('The state table for the logical interface.')
bbIfStateGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-PORT-MIB", "bbStateIfNum"))
if mibBuilder.loadTexts: bbIfStateGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbIfStateGrpEntry.setDescription('An entry for each logical interface representing the state.')
bbStateIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbStateIfNum.setStatus('current')
if mibBuilder.loadTexts: bbStateIfNum.setDescription('This is logical interface number within a physical line num. In MGX PXM1 card, a physical port can have a maximum of 32 logical interfaces.')
bbIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("linefailure", 4), ("signallingfailure", 5), ("inactive", 6), ("lineinloopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfState.setStatus('current')
if mibBuilder.loadTexts: bbIfState.setDescription('This variable indicates the status of the logical interface. The following values are not supported for the logical interface. remoteloopback (3), outofcelldelineation (6), localloopback (7).')
bbIfOversubscribed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfOversubscribed.setStatus('current')
if mibBuilder.loadTexts: bbIfOversubscribed.setDescription('This variable indicates the whether the logical interface is over subscribed or not.')
bbIfIngrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfIngrPercentUtil.setStatus('current')
if mibBuilder.loadTexts: bbIfIngrPercentUtil.setDescription('Percentage Utilization of the interface in the Ingress direction.')
bbIfEgrPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfEgrPercentUtil.setStatus('current')
if mibBuilder.loadTexts: bbIfEgrPercentUtil.setDescription('Percentage Utilization of the interface in the Egress direction.')
bbIfCntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1))
bbIfCntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1), )
if mibBuilder.loadTexts: bbIfCntGrpTable.setStatus('current')
if mibBuilder.loadTexts: bbIfCntGrpTable.setDescription('The Broadband Interface Count table is for logical interface. There will an entry for each of the logical partition of the physical line.')
bbIfCntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-BBIF-PORT-MIB", "bbCntIfNum"))
if mibBuilder.loadTexts: bbIfCntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: bbIfCntGrpEntry.setDescription('An entry for logical interface.')
bbCntIfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbCntIfNum.setStatus('current')
if mibBuilder.loadTexts: bbCntIfNum.setDescription('Refers to the logical interface index.')
bbIfTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfTotalCells.setStatus('current')
if mibBuilder.loadTexts: bbIfTotalCells.setDescription('Total number of cells (VC plus Qbin) that belong to this Interface. This maps on to the virtual interface of QE.')
bbIfRcvValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvValidOAMCells.setDescription('Total number of OAM cell received.')
bbIfRcvRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvRmCells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvRmCells.setDescription('Total number of RM cells Received.')
bbIfRcvClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp0Cells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvClp0Cells.setDescription('Total number of CLP-0 cells Received.')
bbIfRcvClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp1Cells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvClp1Cells.setDescription('Total number of CLP-1 cells Received.')
bbIfRcvClp0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp0DiscCells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvClp0DiscCells.setDescription('Total number of CLP-0 cells discarded at Ingress.')
bbIfRcvClp1DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvClp1DiscCells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvClp1DiscCells.setDescription('Total number of CLP-1 cells discarded at Ingress.')
bbIfXmtOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtOAMCells.setStatus('current')
if mibBuilder.loadTexts: bbIfXmtOAMCells.setDescription('Total number of OAM cells transmitted.')
bbIfXmtRmCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtRmCells.setStatus('current')
if mibBuilder.loadTexts: bbIfXmtRmCells.setDescription('Total number of RM cells transmitted.')
bbIfXmtClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtClp0Cells.setStatus('current')
if mibBuilder.loadTexts: bbIfXmtClp0Cells.setDescription('Total number of CLP-0 cells transmitted.')
bbIfXmtClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfXmtClp1Cells.setStatus('current')
if mibBuilder.loadTexts: bbIfXmtClp1Cells.setDescription('Total number of CLP-1 cells transmitted.')
bbIfCntClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("resetCounter32s", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bbIfCntClrButton.setStatus('current')
if mibBuilder.loadTexts: bbIfCntClrButton.setDescription('Writing a value of 2 resets all the counters.')
bbIfRcvErroredCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bbIfRcvErroredCells.setStatus('current')
if mibBuilder.loadTexts: bbIfRcvErroredCells.setDescription('Total number of cells with Invalid VPI VCI or Invalid PTI fields This is a card level counter and hence will be the same for all instances of the ports.')
cwbPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 32, 2))
cwbPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 1))
cwbPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 2))
cwbPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 2, 1)).setObjects(("CISCO-WAN-BBIF-PORT-MIB", "cwbPortConfGroup"), ("CISCO-WAN-BBIF-PORT-MIB", "cwbPortStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbPortCompliance = cwbPortCompliance.setStatus('current')
if mibBuilder.loadTexts: cwbPortCompliance.setDescription('The compliance statement for objects related to SRM MIB.')
cwbPortGenearlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 1, 1)).setObjects(("CISCO-WAN-BBIF-PORT-MIB", "nextBbIfNumAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbPortGenearlGroup = cwbPortGenearlGroup.setStatus('current')
if mibBuilder.loadTexts: cwbPortGenearlGroup.setDescription('The collection of objects which are applicable for general information about logical ports.')
cwbPortConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 1, 2)).setObjects(("CISCO-WAN-BBIF-PORT-MIB", "bbIfNum"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRowStatus"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfAdmin"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfLineNum"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfIngrPctBandwidth"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfEgrPctBandwidth"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfMinVpi"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfMaxVpi"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfSpeed"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfMaxCellRatePct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbPortConfGroup = cwbPortConfGroup.setStatus('current')
if mibBuilder.loadTexts: cwbPortConfGroup.setDescription('The collection of objects which are used for configuring ATM logical ports(known as broad band interface ports).')
cwbPortStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 1, 3)).setObjects(("CISCO-WAN-BBIF-PORT-MIB", "bbStateIfNum"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfState"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfOversubscribed"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfIngrPercentUtil"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfEgrPercentUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbPortStateGroup = cwbPortStateGroup.setStatus('current')
if mibBuilder.loadTexts: cwbPortStateGroup.setDescription('The collection of objects which are used for finding the state of ATM logical ports(known as broad band interface ports).')
cwbPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 32, 2, 1, 4)).setObjects(("CISCO-WAN-BBIF-PORT-MIB", "bbCntIfNum"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfTotalCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvValidOAMCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvRmCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvClp0Cells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvClp1Cells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvClp0DiscCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvClp1DiscCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfXmtOAMCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfXmtRmCells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfXmtClp0Cells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfXmtClp1Cells"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfCntClrButton"), ("CISCO-WAN-BBIF-PORT-MIB", "bbIfRcvErroredCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwbPortStatsGroup = cwbPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cwbPortStatsGroup.setDescription('The collection of objects containing the statistics information for ATM Logical ports.')
mibBuilder.exportSymbols("CISCO-WAN-BBIF-PORT-MIB", bbIfLineNum=bbIfLineNum, bbIfCntGrp=bbIfCntGrp, cwbPortStateGroup=cwbPortStateGroup, bbIfMaxVpi=bbIfMaxVpi, bbIfEgrPercentUtil=bbIfEgrPercentUtil, PYSNMP_MODULE_ID=ciscoWanBbifPortMIB, bbIfCnfPortGrpTable=bbIfCnfPortGrpTable, bbIfRcvClp0DiscCells=bbIfRcvClp0DiscCells, cwbPortConfGroup=cwbPortConfGroup, bbIfRcvValidOAMCells=bbIfRcvValidOAMCells, bbIfAdmin=bbIfAdmin, cwbPortMIBCompliances=cwbPortMIBCompliances, bbIfNum=bbIfNum, bbIfRcvErroredCells=bbIfRcvErroredCells, bbIfOversubscribed=bbIfOversubscribed, nextBbIfNumAvailable=nextBbIfNumAvailable, cwbPortMIBGroups=cwbPortMIBGroups, bbIfStateGrpEntry=bbIfStateGrpEntry, bbIfCntGrpTable=bbIfCntGrpTable, bbIfRcvClp1DiscCells=bbIfRcvClp1DiscCells, bbIfXmtRmCells=bbIfXmtRmCells, bbIfCntClrButton=bbIfCntClrButton, bbCntIfNum=bbCntIfNum, cwbPortCompliance=cwbPortCompliance, bbIfRcvClp0Cells=bbIfRcvClp0Cells, bbIfStateGrpTable=bbIfStateGrpTable, bbStateIfNum=bbStateIfNum, cwbPortMIBConformance=cwbPortMIBConformance, bbIfMaxCellRatePct=bbIfMaxCellRatePct, bbIfXmtClp1Cells=bbIfXmtClp1Cells, bbIfSpeed=bbIfSpeed, bbIfIngrPctBandwidth=bbIfIngrPctBandwidth, cwbPortGenearlGroup=cwbPortGenearlGroup, bbIfState=bbIfState, bbIfXmtClp0Cells=bbIfXmtClp0Cells, bbIfCnfPortGrp=bbIfCnfPortGrp, cwbPortStatsGroup=cwbPortStatsGroup, bbIfCntGrpEntry=bbIfCntGrpEntry, bbIfRowStatus=bbIfRowStatus, bbIfMinVpi=bbIfMinVpi, bbIfRcvRmCells=bbIfRcvRmCells, bbIfXmtOAMCells=bbIfXmtOAMCells, bbIfEgrPctBandwidth=bbIfEgrPctBandwidth, bbIfCnfPortGrpEntry=bbIfCnfPortGrpEntry, bbIfRcvClp1Cells=bbIfRcvClp1Cells, bbIfTotalCells=bbIfTotalCells, ciscoWanBbifPortMIB=ciscoWanBbifPortMIB, bbIfIngrPercentUtil=bbIfIngrPercentUtil)
