#
# PySNMP MIB module DTRConcentratorMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DTRConcentratorMIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, TimeTicks, enterprises, iso, Gauge32, ModuleIdentity, Integer32, ObjectIdentity, MibIdentifier, Bits, Counter32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "TimeTicks", "enterprises", "iso", "Gauge32", "ModuleIdentity", "Integer32", "ObjectIdentity", "MibIdentifier", "Bits", "Counter32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm8272 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66))
ibm8272Ts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1))
ibm8272TsExpMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3))
dtrMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1))
dtrConcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1))
dtrMacMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 2))
dtrExt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3))
dtrConcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1))
dtrConcMIBBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1))
dtrConcMIBSpTree = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2))
dtrConcMIBForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3))
dtrConcMIBMRI = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4))
dtrConcMIBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5))
class Counter32(Counter32):
    pass

class Integer32(Integer32):
    pass

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class InterfaceIndex(Integer32):
    pass

class IANAifType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54))

class BridgeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class DynamicFdbStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5))

class StaticFdbStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4))

class PortId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class RouteDescriptor(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class Timeout(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

dtrConcentratorAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrConcentratorAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dtrConcentratorAddress.setDescription(' MAC address used by DTR Concentrator for uniqueness. It must be unique ')
dtrOperNumberOfCrfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrOperNumberOfCrfs.setStatus('mandatory')
if mibBuilder.loadTexts: dtrOperNumberOfCrfs.setDescription(' Number of Concentrator Relay Functions within the DTR Concentrator. Min value is 1. Writing this object sets the number of CRFs within the DTR Concentrator. ')
dtrOperNumberOfBridgeRelays = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrOperNumberOfBridgeRelays.setStatus('mandatory')
if mibBuilder.loadTexts: dtrOperNumberOfBridgeRelays.setDescription(' Number of bridge relay functions within the DTR Concentrator. Value of 0 or 1 is permitted. Writing this object sets the number of bridge relay functions within the DTR Concentrator. ')
dtrCRFTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6), )
if mibBuilder.loadTexts: dtrCRFTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFTable.setDescription(' This table contains information for each concentrator relay function in the DTR Concentrator.')
dtrCRFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFIndex"))
if mibBuilder.loadTexts: dtrCRFEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFEntry.setDescription(' ')
dtrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFIndex.setDescription(' The CRF number identifying this instance of CRF. The valid range is 0 - 255.')
dtrCRFNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFNumberOfPorts.setDescription(' The number of CRF Ports controlled by this CRF ')
dtrCRFPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortMask.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortMask.setDescription(' The set of ports that are associated with this instance of a CRF. Each Octet within the value of this object specifies a set of eight interfaces, with the first octet specifying ports 1 through 8, the second octet specifying interfaces 9 through 16 and so on. Within each octet, the most significant bit represents the lowest numbered interface, and the least significant bit represents the highest numbered interface. Writing this variable will modify the CRF configuration and update the value contained in dtrCRFNumberOfPorts.')
dtrCRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFName.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFName.setDescription(" The textual name of the CRF. The value of this object should be the name of the CRF as assigned by the DTR Concentrator and should be suitable for use in commands entered at the DTR Concentrator 'console'")
dtrCRFMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 18200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFMaxInfo.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFMaxInfo.setDescription(' The maximum size of the INFO field that the CRF can transmit/receive ')
dtrCRFMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFMacAddress.setDescription(' The MAC address used with the dtrCRFSpTreePriority to form the CRF Identifier used in the spanning tree protocol. This address must be unique and it is recommended that this address be the specific MAC address of the lowest numbered C-Port. ')
dtrCRFLocalLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFLocalLanId.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFLocalLanId.setDescription(' This is the value of the local lan id used by the CRF. This value may be assigned or may be learned by the CRF learning process. Valid values range from 0 to 4095. Values outside this range indicate that the lan id value has not been assigned or learned.')
dtrCRFFdbAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFFdbAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFFdbAgingTime.setDescription(' The timeout period in seconds for aging out dynamic entries from the Filtering Database. Range is 0 to 9999 seconds. 0 value DISABLES aging out dynamic entries. Recommended default is 300 seconds.')
dtrCRFMRIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFMRIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFMRIEnable.setDescription(' This object enables/disables the MRI function in the CRF ')
dtrCRFLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFLearnedEntryDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFLearnedEntryDiscards.setDescription(' The total number of CRF Filtering Database entries, which have been or would have been learned, but have been discarded due to a lack of space to store them in the Filtering Database ')
dtrCRFPortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: dtrCRFPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortTable.setDescription(' This table contains information for each CRF Port in a Concentrator Relay Function ')
dtrCRFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortNumber"))
if mibBuilder.loadTexts: dtrCRFPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortEntry.setDescription(' ')
dtrCRFPortCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortCRFIndex.setDescription(' The CRF number identifying an instance of CRF ')
dtrCRFPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortNumber.setDescription(' The CRF Port number for which this entry contains CRF management information.')
dtrCRFPortifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortifIndex.setDescription(' A unique value, greater than zero that corresponds to the interface this CRF Port is assigned (corresponds to ifIndex).')
dtrCRFPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortEnable.setDescription(' The enable/disable status of the CRF Port. This control can be used to disable a port.')
dtrCRFOperPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFOperPortType.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFOperPortType.setDescription(' Indicates the type of interface that this CRF Port is assigned to. Only two types are permitted, a C-Port and an interal bridge relay function. Write this object to set the type of interface.')
dtrCRFPortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortMtuExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortMtuExceededDiscards.setDescription(' The number of frames discarded by the CRF Port due to excessive size (exceeds CrfMaxInfo) ')
dtrCRFPortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortDelayExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortDelayExceededDiscards.setDescription(' The number of frames discarded by the CRF Port due to excessive delay through the CRF ')
dtrSpanningTreeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeHoldTime.setDescription('The minimum time period, in seconds, elapsing between the transmission of Configuration PDUs through a given port (CRFP or internal bridge). This is a fixed parameter of the DTR Concentrator used by all member CRF and bridge entities. Value specified by 802.1d is 1 second ')
dtrSpanningTreeProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeProtocolSpecification.setDescription(' An indication of what version of the Spanning Tree Protocol is being run on the DTR Concentrator ')
dtrSpanningTreeTimeSinceTopoChange = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeTimeSinceTopoChange.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeTimeSinceTopoChange.setDescription(' The time (in 1/100ths of a second) since the last topology change was detected by the CRF or bridge entities within the DTR Concentrator. ')
dtrSpanningTreeTopologyChanges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrSpanningTreeTopologyChanges.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeTopologyChanges.setDescription(' The total number of topology changes detected by this concentrator since the management entity was last reset or initialized ')
dtrSpanningTreeBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeBridgeForwardDelay.setDescription(' The value of the Forward Delay parameter when the entity (CRF or bridge) is the Root or is attempting to become the Root. The granularity of this timer is 1 second. ')
dtrSpanningTreeBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeBridgeHelloTime.setDescription(' The value of the Hello Time parameter when the entity (CRF or Bridge) is the Root or attempting to become the Root. The time interval between transmissions of Topology Change Notification PDUs. The granularity of this timer is 1 second. ')
dtrSpanningTreeTreeBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrSpanningTreeTreeBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrSpanningTreeTreeBridgeMaxAge.setDescription(' The value of the Max Age parameter when the entity (CRF or bridge) is the Root or is attempting to become the Root. The granularity of this timer is 1 second. ')
dtrCRFSpTreeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9), )
if mibBuilder.loadTexts: dtrCRFSpTreeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeTable.setDescription('This table contains the spanning tree information for each CRF.')
dtrCRFSpTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFSpTreeCRFIndex"))
if mibBuilder.loadTexts: dtrCRFSpTreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeEntry.setDescription(' ')
dtrCRFSpTreeCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrCRFSpTreePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFSpTreePriority.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreePriority.setDescription(' The value of the write-able portion of the CRF Identifier and the first two octets of the CRF Identifier. The last 6 octets of the CRF ID are given by the value of dtrCRFMacAddress. ')
dtrCRFSpTreeDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeDesignatedRoot.setDescription(' The bridge identifier of the root of the spanning tree as determined by the spanning tree protocol executed at this node ')
dtrCRFSpTreeRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeRootCost.setDescription(' The cost of the path to the root as seen from this CRF ')
dtrCRFSpTreeRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeRootPort.setDescription(' The CRF Port number of the CRF Port which offers the lowest cost path from this CRF to the root ')
dtrCRFSpTreeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 6), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeMaxAge.setDescription(' The maximum age of Spanning Tree Protocol information learned from the network on any port (CRF or bridge within the DTR Concentrator) before it is discarded. Units are in 1/100th of a second. This is the actual value currently in use')
dtrCRFSpTreeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 7), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeHelloTime.setDescription(' The amount of time between transmission of Configuration bridge PDUs used by a CRF that is attempting to become the Root or is the Root. This is the value currently in use ')
dtrCRFSpTreeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 9, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFSpTreeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFSpTreeForwardDelay.setDescription(' This time value, measured in 1/100th of a second, is used to control the amount of time spent in the Listening state when moving from the Blocking state to the Listening state and the amount of time in the Learning state when moving from the Learning state to the Forwarding state. This time value is used for ageing dynamic entries in the Filtering Database while the Topology Change flag is set in protocol messages received from the root. This is the value the CRF is currently using ')
dtrCRFPortSpTreeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10), )
if mibBuilder.loadTexts: dtrCRFPortSpTreeTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeTable.setDescription('This table contains spanning tree information for each CRF Port.')
dtrCRFPortSpTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortSpTreeCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortSpTreeNumber"))
if mibBuilder.loadTexts: dtrCRFPortSpTreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeEntry.setDescription(' ')
dtrCRFPortSpTreeCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrCRFPortSpTreeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeNumber.setDescription('The CRF Port number for which this entry contains CRF management information.')
dtrCRFPortSpTreePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortSpTreePriority.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreePriority.setDescription(' The value of the priority field which is contained in the first byte of the CRF Port Identifier. The second byte of the CRF Port Identifier is given by the value of CRF Port as identified by dtrCRFPortSpTreeNumber')
dtrCRFPortSpTreeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeState.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeState.setDescription(' The CRF Port state as defined by the Spanning Tree. If the DTR concentrator detects that a port is malfunctioning, it will place that port into the broken(6) state. the states are defined as: disabled(1), blocking(2), listening(3), learning(4), forwarding(5), and broken(6). ')
dtrCRFPortSpTreePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrCRFPortSpTreePathCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreePathCost.setDescription(' The contribution of the path through this CRF Port, identified by dtrCRFPortSpTreeNumber when the CRF Port is the Root Port, to the total cost of the path to the Root for this CRF ')
dtrCRFPortSpTreeDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedRoot.setDescription(' The unique bridge identifier of the bridge recorded as the Root in the root identifier parameter of the Configuration PDUs transmitted by the designated bridge for the LAN to which the CRF Port is attached. ')
dtrCRFPortSpTreeDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedCost.setDescription(' The cost of the path to the Root offered by the Designated Port on the LAN to which this CRF Port is attached ')
dtrCRFPortSpTreeDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedBridge.setDescription(' The unique Bridge or CRF Identifier of the Bridge or CRF believed to be the Designated Bridge for the LAN associated with the CRF Port ')
dtrCRFPortSpTreeDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeDesignatedPort.setDescription(' The Port Identifier of the Bridge or CRF port believed to be the Designated Port for the LAN associated with the CRF Port ')
dtrCRFPortSpTreeForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortSpTreeForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortSpTreeForwardTransitions.setDescription(' The number of times this CRF Port, as identified by dtrCRFPortSpTreeNumber, has transitioned from the Learning state to the Forwarding State ')
dtrFdbDynamicAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: dtrFdbDynamicAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrTable.setDescription('This table contains information about specific dynamic MAC address entries in the CRF Filtering Database.')
dtrFdbDynamicAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbDynamicAddrCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbDynamicAddrStnAddress"))
if mibBuilder.loadTexts: dtrFdbDynamicAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrEntry.setDescription(' CRF Filtering Database Dynamic MAC address entry')
dtrFdbDynamicAddrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrFdbDynamicAddrStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrStnAddress.setDescription(' A unicast MAC address for which the CRF has forwarding information. This object is updated by the Learning Process in the CRF.')
dtrFdbDynamicAddrPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrPortNumber.setDescription(' The CRF Port number of the CRF Port that a frame with an address matching dtrFdbDynamicAddrStnAddress in this dtrFdbDynamicAddrTable Entry has been seen. A value of zero is assigned when dtrFdbDynamicAddrStnAddress is known, but the CRF Port number (dtrFdbDynamicAddrPortNumber) has not been learned.')
dtrFdbDynamicAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 1, 1, 4), DynamicFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicAddrStatus.setDescription(' Status of this entry. Other (1) indicates that some other MIB object is being used to determine how/if the frame is forwarded. Invalid(2) indicates this entry is no longer valid, but has not been flushed from the table. Learned(3) indicates that dtrFdbDynamicAddrPortNumber for this entry was learned. Self(4) indicates dtrFdbDynamicAddrStnAddress represents one of the CRF Port Addresses. Mgmt(5) indicates dtrFdbDynamicAddrStnAddress is also a value of an existing dtrFdbStaticAddrStnAddress')
dtrFdbStaticAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: dtrFdbStaticAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrTable.setDescription('This table contains information about specific static MAC address entries in the CRF Filtering Database. ')
dtrFdbStaticAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbStaticAddrCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbStaticAddrStnAddress"))
if mibBuilder.loadTexts: dtrFdbStaticAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrEntry.setDescription(' CRF Filtering Database Static MAC Address Entry ')
dtrFdbStaticAddrCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrFdbStaticAddrStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrStnAddress.setDescription(' The MAC address for this entry. It may include group or broadcast addresses.')
dtrFdbStaticAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrRowStatus.setDescription(' Allows creation and deletion of static entries. ')
dtrFdbStaticAddrInMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrInMask.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrInMask.setDescription(' The set of CRF Ports which receive frames with a destination address matching the address specified by the DtrFdbStaticAddrStnAddress in this entry that may forward this frame to any output CRF Port indicated by DtrFdbStaticAddrOutMask. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying CRF Ports 1 through 8, the second octet specifying CRF Ports 9 through 16 and so on. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. ')
dtrFdbStaticAddrOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticAddrOutMask.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrOutMask.setDescription(' The set of CRF Ports to which frames with a destination address matching the address specified by the DtrFdbStaticAddrStnAddress in this entry may be forwarded to. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying CRF Ports 1 through 8, the second octet specifying CRF Ports 9 through 16 and so on. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
dtrFdbStaticAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 2, 1, 6), StaticFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticAddrStatus.setDescription(' Status of this entry. Other(1) indicates this entry is currently in use under conditions different from the available status definitions that follow. Invalid(2) indicates this entry is no longer valid, but has not been flushed from the table. Writing this value to the object removes the entry. Permanent(3) indicates that the entry is currently in use and will remain so after the next reset. DeleteOnReset(4) indicates the entry is currently in use and will remain so until the next reset. ')
dtrFdbDynamicRDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: dtrFdbDynamicRDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDTable.setDescription('This table contains information about a specific dynamic route descriptor entry in the CRF Filtering Database. ')
dtrFdbDynamicRDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbDynamicRDCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbDynamicRDRouteDesc"))
if mibBuilder.loadTexts: dtrFdbDynamicRDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDEntry.setDescription(' ')
dtrFdbDynamicRDCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrFdbDynamicRDRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 2), RouteDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDRouteDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDRouteDesc.setDescription(' A Route Descriptor for which the CRF has forwarding information. The Route Descriptor (RD) consists of 2 parts; a 4 bit Bridge Number and a 12 bit LAN ID. This identifies a bridge (BN) that has a port on the local LAN and a port connected to the indicated LAN ID. This object consists of 3 octets. The first octet contains the BN in the 4 least significant bits. The second octet contains the most significant octet of the LAN ID and the final octet contains the least significant 4 bits of the LAN ID in the 4 most significant bits of the octet. ')
dtrFdbDynamicRDPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDPortNumber.setDescription(' The CRF Port number of the CRF Port that a frame with a Route Descriptor matching dtrFdbDynamicRDRouteDesc in this DtrFdbDynamicRDEntry has been seen. A value of zero is assigned when dtrFdbDynamicRDRouteDesc is known, but the CRF Port number has not been learned ')
dtrFdbDynamicRDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 3, 1, 4), DynamicFdbStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbDynamicRDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbDynamicRDStatus.setDescription('Status of this entry. Other (1) indicates that some other MIB object is being used to determine how/if the frame is forwarded. Invalid (2) indicates this entry is no longer valid, but has not been flushed from the table. Learned (3) indicates that dtrFdbDynamicRDPortNumber for this entry was learned. Self(4) indicates dtrFdbDynamicRDRouteDesc represents a relay across the Bridge relay function of this DTR Concentrator. Mgmt(5) indicates dtrFdbDynamicRDRouteDesc is also a value of an existing dtrFdbStaticRDRouteDesc in the dtrFdbStaticRDTable.')
dtrFdbStaticRDTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5), )
if mibBuilder.loadTexts: dtrFdbStaticRDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDTable.setDescription('A table containing information about specific static route descriptor entries in the CRF Filtering Database.')
dtrFdbStaticRDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrFdbStaticRDCRFIndex"), (0, "DTRConcentratorMIB", "dtrFdbStaticRDRouteDesc"))
if mibBuilder.loadTexts: dtrFdbStaticRDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDEntry.setDescription(' ')
dtrFdbStaticRDCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticRDCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrFdbStaticRDRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 2), RouteDescriptor()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrFdbStaticRDRouteDesc.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDRouteDesc.setDescription(' Static Entries contain route descriptor information for internal Bridge Ports. These entries are added as part of the initialization of the DTR Concentrator when an internal bridge relay function is enabled (dtrOperNumberOfBridgeRelays=1) The Route Descriptor (RD) consists of 2 parts; a 4 bit Bridge Number and a 12 bit LAN ID. This identifies a bridge (BN) that has a port on the local LAN and a port connected to the indicated LAN ID. This object consists of 3 octets. The first octet contains the BN in the 4 least significant bits. The second octet contains the most significant octet of the LAN ID and the final octet contains the least significant 4 bits of the LAN ID in the 4 most significant bits of the octet. ')
dtrFdbStaticRDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDRowStatus.setDescription('Allows creation and deletion of static entries')
dtrFdbStaticRDPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDPortNumber.setDescription(' The CRF Port number of the CRF Port that a frame with a Route Descriptor matching dtrFdbStaticRDRouteDesc in this DtrFdbStaticRDEntry is forwarded to.')
dtrFdbStaticRDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 3, 5, 1, 5), StaticFdbStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrFdbStaticRDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtrFdbStaticRDStatus.setDescription('Status of this entry. Other (1) indicates this entry is currently in use under conditions different from the available status definitions that follow. Invalid(2) indicates this entry is no longer valid, but has not been flushed from the table. Writing this value to the object removes the entry. Permanent (3) indicates that the entry is currently in use and will remain so after the next reset. DeleteOnReset(4) indicates the entry is currently in use and will remain so until the next reset.')
dtrMRITable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1), )
if mibBuilder.loadTexts: dtrMRITable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrMRITable.setDescription('This table contains information about the CRF port out mask for specific management functions. ')
dtrMRIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrMRICRFIndex"), (0, "DTRConcentratorMIB", "dtrMRIMgmtType"))
if mibBuilder.loadTexts: dtrMRIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrMRIEntry.setDescription(' ')
dtrMRICRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrMRICRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrMRICRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrMRIMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrMRIMgmtType.setStatus('mandatory')
if mibBuilder.loadTexts: dtrMRIMgmtType.setDescription(' Identifies the function class for this entry. The MRI forwards frames with a destination class equal to dtrMRIMgmtType using the corresponding mask entry (dtrMRIOutMask). When the destination class is 0 and the source class is not 0, the destination address in the MAC frame is used to forward the frame. MAC frames with a destination class not found in this table are not forwarded by the MRI.')
dtrMRIOutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrMRIOutMask.setStatus('mandatory')
if mibBuilder.loadTexts: dtrMRIOutMask.setDescription(' The set of CRF Ports to which frames with a destination class matching the function class specified by the dtrMRIMgmtType in this entry may be forwarded to. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying CRF Ports 1 through 8, the second octet specifying CRF Ports 9 through 16 and so on. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. ')
dtrCRFPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: dtrCRFPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsTable.setDescription(' This table contains the counters for each CRF Port.')
dtrCRFPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrCRFPortStatsCRFIndex"), (0, "DTRConcentratorMIB", "dtrCRFPortStatsPortNumber"))
if mibBuilder.loadTexts: dtrCRFPortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsEntry.setDescription(' ')
dtrCRFPortStatsCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsCRFIndex.setDescription(' The CRF number identifying this instance of CRF ')
dtrCRFPortStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsPortNumber.setDescription(' The CRF Port number for which this entry contains CRF management information. When the dtrCrfOperPortType indicates a C-Port, the C-Port number is found in dtrCRFPortConfigCPort.')
dtrCRFPortStatsAreInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsAreInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsAreInFrames.setDescription(' The number of ARE frames received at this CRF Port. This count does not include ARE frames that have been misdirected (final Lan Id does not match the local Lan Id maintained by the CRF (dtrCRFLocalLanId))')
dtrCRFPortStatsAreOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsAreOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsAreOutFrames.setDescription(' The number of ARE frames transmitted by this CRF Port. This count does not include ARE frames that have been misdirected (final Lan Id does not match the Local Lan Id maintained by the CRF (dtrCRFLocalLanId)) ')
dtrCRFPortStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsInFrames.setDescription(' The number of valid frames received by this CRF Port ')
dtrCRFPortStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsOutFrames.setDescription(' The number of frames that have been transmitted by this CRF Port. ')
dtrCRFPortStatsSrfInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSrfInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsSrfInFrames.setDescription(' The number of SRF frames that have been received by this CRF Port and forwarded to another port on the CRF.')
dtrCRFPortStatsSrfOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSrfOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsSrfOutFrames.setDescription(' The number of SRF frames that have been transmitted by this CRF Port.')
dtrCRFPortStatsSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSteInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsSteInFrames.setDescription(' The number of STE frames received at this CRF Port. This count does not include STE frames that have been misdirected (final Lan Id does not match the local Lan Id maintained by the CRF (dtrCRFLocalLanId)). ')
dtrCRFPortStatsSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsSteOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsSteOutFrames.setDescription(' The number of STE frames transmitted by this CRF Port. This count does not include STE frames that have been misdirected (final Lan Id does not match the local Lan Id maintained by the CRF (dtrCRFLocalLanId)). ')
dtrCRFPortStatsInvalidRI = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInvalidRI.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsInvalidRI.setDescription(' Count of frames that were discarded due to a formatting error (i.e. an odd RI length, or 0 RI length) (Reference 802.1d C4.2.1.1.3) ')
dtrCRFPortStatsInMisdirected = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInMisdirected.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsInMisdirected.setDescription(' This is a count of source routed frames that have been received at this CRF Port where the local Lan Id (dtrCRFLocalLanId) is not present or is not last (explorer frame). Explorer frames (ARE and STE) are broadcast to all Forwarding CRF Ports. SRF frames are discarded if the DA is specific and they are broadcast if the DA is multicast. ')
dtrCRFPortStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrCRFPortStatsInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: dtrCRFPortStatsInDiscards.setDescription(' The number of frames that have been discarded by the Forwarding Process. This count may include frames that are discarded by the Frame Reception process ')
dtrExSrbGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1))
dtrExSrbStp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2))
dtrExSrbStpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1))
dtrExSrbBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbBridgeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbBridgeNumber.setDescription('The bridge number identifies the source route bridge.')
dtrExSrbBridgeNumberOfCrfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbBridgeNumberOfCrfs.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbBridgeNumberOfCrfs.setDescription('Number of Concentrator Relay Functions within the Bridge Relay Function.')
dtrExSrbStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID. The other (last) 6 octets of the Bridge ID are given by the value of dtrExSrbStpAddress.')
dtrExSrbStpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. When concatonated with dtrExSrbBridgeStpPriority a unique Bridge Identifier is formed which is used in the Source Route Spanning Tree Protocol.')
dtrExSrbStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. The granularity of this timer is 1 second. Thus the range is 6-40 seconds.')
dtrExSrbStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 4), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is 1 second. Thus the range is 1-10 seconds.')
dtrExSrbStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. The granularity of this timer is 1 second. Thus the range is 4-30 seconds.')
dtrExSrbStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifer parameter in all Configuration Brdige PDUs originated by this node.')
dtrExSrbStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
dtrExSrbStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 8), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpRootPort.setDescription('The port identifier of the Logical Bridge Port which offers the lowest cost path from this bridge to the root bridge.')
dtrExSrbStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 9), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
dtrExSrbStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 10), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
dtrExSrbStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
dtrExSrbStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in Listening state which precedes the Forwarding state. This value is the one that this bridge is currently using, in contrast to dtrExSrbStpForwardDelay which is the value that this bridge and all others would start using if/when this bridge were to become the root.')
dtrExSrbStpMode = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("automatic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbStpMode.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbStpMode.setDescription("Determines whether the source route bridge runs an automatic or manual spanning tree. The value `automatic' indicates that the bridge will participate in the Spanning Tree Protocol. The value `manual' indicates that the bridge will not participate in the Spanning Tree Protocol.")
dtrExSrbPortStpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: dtrExSrbPortStpTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpTable.setDescription('This table contains spanning tree information for each Logical Bridge Port.')
dtrExSrbPortStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrExSrbPortStpCRFIndex"), (0, "DTRConcentratorMIB", "dtrExSrbPortStpPort"))
if mibBuilder.loadTexts: dtrExSrbPortStpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpEntry.setDescription(' ')
dtrExSrbPortStpCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpCRFIndex.setDescription('The CRF number identifying this instance of CRF')
dtrExSrbPortStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 563))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpPort.setDescription('The Logical Bridge Port number for which this entry contains CRF management information.')
dtrExSrbPortStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpPriority.setDescription('Priority is not meaningful in source route bridging. This is included so this table will be symmetric with dtrCRFPortSpTreeTable.')
dtrExSrbPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("forwarding", 4), ("broken", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpState.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpState.setDescription("The Logical Bridge Port's current state as defined by the Spanning Tree. This state controls what action the port takes on reception of a frame. If the bridge has detected a Logical Bridge Port that is malufunctioning, it will place that port into the broken(5) state.")
dtrExSrbPortStpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortStpPathCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpPathCost.setDescription('The contribution of this Logical Bridge Port to the path cost of paths towards the Source Route spanning tree root which include this Logical Bridge Port.')
dtrExSrbPortStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Source Route Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the Logical Bridge Port is attached.')
dtrExSrbPortStpDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedCost.setDescription('The cost of the path to the root offered by dtrExSrbPortStpDesignatedPort.')
dtrExSrbPortStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this Logical Bridge Port considers to be the Designated Bridge for the Source Route spanning tree for this Logical Bridge Port's segment.")
dtrExSrbPortStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 9), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpDesignatedPort.setDescription("The Port Identifier of the Logical Bridge Port on the Designated Bridge for this Logical Bridge Port's segment.")
dtrExSrbPortStpForwardTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortStpForwardTrans.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortStpForwardTrans.setDescription('The number of times this Logical Bridge Port, as identified by dtrExSrbPortStpPort, has transitioned from the Listening state to the Forwarding state.')
dtrExSrbPortHopTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3), )
if mibBuilder.loadTexts: dtrExSrbPortHopTable.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopTable.setDescription('This table contains Explorer framemaximum hop count information for each Logical Bridge Port.')
dtrExSrbPortHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1), ).setIndexNames((0, "DTRConcentratorMIB", "dtrExSrbPortHopCRFIndex"), (0, "DTRConcentratorMIB", "dtrExSrbPortHopPort"))
if mibBuilder.loadTexts: dtrExSrbPortHopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopEntry.setDescription(' ')
dtrExSrbPortHopCRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortHopCRFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopCRFIndex.setDescription('The CRF number identifying this instance of CRF')
dtrExSrbPortHopPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 563))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtrExSrbPortHopPort.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopPort.setDescription('The Logical Bridge Port number for which this entry contains CRF management information.')
dtrExSrbPortHopAreRcvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopAreRcvMax.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopAreRcvMax.setDescription('The maximum number of route descriptors allowed in All Routes Explorer frames received on this Logical Bridge Port.')
dtrExSrbPortHopAreXmtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopAreXmtMax.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopAreXmtMax.setDescription('The maximum number of route descriptors allowed in All Routes Explorer frames transmitted on this Logical Bridge Port.')
dtrExSrbPortHopSteRcvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopSteRcvMax.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopSteRcvMax.setDescription('The maximum number of route descriptors allowed in Spanning Tree Explorer frames received on this Logical Bridge Port.')
dtrExSrbPortHopSteXmtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 66, 1, 3, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtrExSrbPortHopSteXmtMax.setStatus('mandatory')
if mibBuilder.loadTexts: dtrExSrbPortHopSteXmtMax.setDescription('The maximum number of route descriptors allowed in Spanning Tree Explorer frames transmitted on this Logical Bridge Port.')
mibBuilder.exportSymbols("DTRConcentratorMIB", dtrCRFIndex=dtrCRFIndex, dtrExSrbPortHopAreXmtMax=dtrExSrbPortHopAreXmtMax, dtrCRFMacAddress=dtrCRFMacAddress, dtrCRFSpTreeMaxAge=dtrCRFSpTreeMaxAge, dtrFdbStaticRDRouteDesc=dtrFdbStaticRDRouteDesc, dtrFdbDynamicAddrStnAddress=dtrFdbDynamicAddrStnAddress, dtrExSrbStpDesignatedRoot=dtrExSrbStpDesignatedRoot, dtrCRFPortSpTreeTable=dtrCRFPortSpTreeTable, dtrOperNumberOfCrfs=dtrOperNumberOfCrfs, dtrExSrbPortStpDesignatedBridge=dtrExSrbPortStpDesignatedBridge, dtrSpanningTreeProtocolSpecification=dtrSpanningTreeProtocolSpecification, Timeout=Timeout, dtrCRFPortSpTreeEntry=dtrCRFPortSpTreeEntry, dtrMRICRFIndex=dtrMRICRFIndex, dtrExSrbPortStpPriority=dtrExSrbPortStpPriority, dtrCRFSpTreeEntry=dtrCRFSpTreeEntry, dtrExSrbStpAddress=dtrExSrbStpAddress, dtrConcMIBForwarding=dtrConcMIBForwarding, dtrCRFPortSpTreeDesignatedRoot=dtrCRFPortSpTreeDesignatedRoot, ibm8272Ts=ibm8272Ts, BridgeId=BridgeId, MacAddress=MacAddress, dtrCRFPortEnable=dtrCRFPortEnable, dtrCRFSpTreePriority=dtrCRFSpTreePriority, dtrExSrbPortHopCRFIndex=dtrExSrbPortHopCRFIndex, dtrMRIOutMask=dtrMRIOutMask, DynamicFdbStatus=DynamicFdbStatus, dtrCRFPortStatsInFrames=dtrCRFPortStatsInFrames, dtrFdbStaticAddrOutMask=dtrFdbStaticAddrOutMask, dtrCRFPortSpTreeForwardTransitions=dtrCRFPortSpTreeForwardTransitions, dtrCRFLearnedEntryDiscards=dtrCRFLearnedEntryDiscards, dtrCRFMaxInfo=dtrCRFMaxInfo, dtrFdbStaticRDTable=dtrFdbStaticRDTable, Integer32=Integer32, dtrExSrbBridgeNumberOfCrfs=dtrExSrbBridgeNumberOfCrfs, dtrExSrbPortStpPort=dtrExSrbPortStpPort, dtrCRFPortSpTreeCRFIndex=dtrCRFPortSpTreeCRFIndex, dtrCRFPortTable=dtrCRFPortTable, dtrCRFPortStatsSrfOutFrames=dtrCRFPortStatsSrfOutFrames, dtrExSrbPortStpDesignatedRoot=dtrExSrbPortStpDesignatedRoot, dtrCRFSpTreeTable=dtrCRFSpTreeTable, ibm8272TsExpMIBs=ibm8272TsExpMIBs, RouteDescriptor=RouteDescriptor, dtrFdbDynamicAddrEntry=dtrFdbDynamicAddrEntry, dtrExSrbStpHoldTime=dtrExSrbStpHoldTime, dtrFdbDynamicRDCRFIndex=dtrFdbDynamicRDCRFIndex, dtrCRFSpTreeRootCost=dtrCRFSpTreeRootCost, dtrCRFPortMtuExceededDiscards=dtrCRFPortMtuExceededDiscards, dtrCRFPortStatsEntry=dtrCRFPortStatsEntry, dtrCRFPortStatsSrfInFrames=dtrCRFPortStatsSrfInFrames, dtrExSrbPortStpForwardTrans=dtrExSrbPortStpForwardTrans, dtrCRFOperPortType=dtrCRFOperPortType, dtrCRFSpTreeForwardDelay=dtrCRFSpTreeForwardDelay, dtrCRFPortMask=dtrCRFPortMask, dtrFdbDynamicAddrPortNumber=dtrFdbDynamicAddrPortNumber, dtrCRFPortifIndex=dtrCRFPortifIndex, dtrFdbDynamicRDStatus=dtrFdbDynamicRDStatus, dtrExSrbStpMaxAge=dtrExSrbStpMaxAge, dtrExSrbPortStpDesignatedPort=dtrExSrbPortStpDesignatedPort, ibm8272=ibm8272, dtrExSrbStpMode=dtrExSrbStpMode, dtrExSrbPortHopPort=dtrExSrbPortHopPort, dtrCRFPortEntry=dtrCRFPortEntry, dtrConcMIBMRI=dtrConcMIBMRI, dtrSpanningTreeBridgeHelloTime=dtrSpanningTreeBridgeHelloTime, dtrCRFPortSpTreeDesignatedPort=dtrCRFPortSpTreeDesignatedPort, dtrMIBs=dtrMIBs, ibm=ibm, dtrSpanningTreeTreeBridgeMaxAge=dtrSpanningTreeTreeBridgeMaxAge, dtrFdbDynamicRDRouteDesc=dtrFdbDynamicRDRouteDesc, dtrCRFPortSpTreeNumber=dtrCRFPortSpTreeNumber, dtrCRFSpTreeRootPort=dtrCRFSpTreeRootPort, dtrFdbStaticAddrRowStatus=dtrFdbStaticAddrRowStatus, dtrSpanningTreeHoldTime=dtrSpanningTreeHoldTime, dtrFdbDynamicAddrCRFIndex=dtrFdbDynamicAddrCRFIndex, dtrFdbDynamicRDTable=dtrFdbDynamicRDTable, dtrExSrbPortStpEntry=dtrExSrbPortStpEntry, dtrExSrbPortStpDesignatedCost=dtrExSrbPortStpDesignatedCost, dtrCRFPortStatsInMisdirected=dtrCRFPortStatsInMisdirected, dtrCRFPortStatsPortNumber=dtrCRFPortStatsPortNumber, dtrSpanningTreeBridgeForwardDelay=dtrSpanningTreeBridgeForwardDelay, dtrCRFPortSpTreeDesignatedCost=dtrCRFPortSpTreeDesignatedCost, Counter32=Counter32, dtrCRFPortStatsAreOutFrames=dtrCRFPortStatsAreOutFrames, dtrExSrbStpPriority=dtrExSrbStpPriority, dtrExSrbStpRootPort=dtrExSrbStpRootPort, dtrCRFPortCRFIndex=dtrCRFPortCRFIndex, dtrExSrbStpRootCost=dtrExSrbStpRootCost, InterfaceIndex=InterfaceIndex, dtrCRFPortStatsSteOutFrames=dtrCRFPortStatsSteOutFrames, dtrExSrbPortHopSteXmtMax=dtrExSrbPortHopSteXmtMax, dtrCRFSpTreeCRFIndex=dtrCRFSpTreeCRFIndex, ibmProd=ibmProd, dtrExSrbStpGlobal=dtrExSrbStpGlobal, dtrSpanningTreeTimeSinceTopoChange=dtrSpanningTreeTimeSinceTopoChange, dtrExSrbPortHopAreRcvMax=dtrExSrbPortHopAreRcvMax, dtrCRFPortSpTreePathCost=dtrCRFPortSpTreePathCost, dtrMRITable=dtrMRITable, dtrCRFPortStatsOutFrames=dtrCRFPortStatsOutFrames, dtrExSrbPortHopTable=dtrExSrbPortHopTable, dtrFdbStaticRDPortNumber=dtrFdbStaticRDPortNumber, dtrMRIEntry=dtrMRIEntry, dtrExSrbStpForwardDelay=dtrExSrbStpForwardDelay, dtrExt=dtrExt, dtrCRFPortDelayExceededDiscards=dtrCRFPortDelayExceededDiscards, dtrConcMIBBase=dtrConcMIBBase, dtrCRFPortStatsSteInFrames=dtrCRFPortStatsSteInFrames, dtrCRFNumberOfPorts=dtrCRFNumberOfPorts, dtrFdbStaticRDRowStatus=dtrFdbStaticRDRowStatus, PortId=PortId, dtrExSrbStpHelloTime=dtrExSrbStpHelloTime, dtrCRFPortStatsCRFIndex=dtrCRFPortStatsCRFIndex, dtrCRFLocalLanId=dtrCRFLocalLanId, dtrExSrbStpBridgeHelloTime=dtrExSrbStpBridgeHelloTime, dtrFdbDynamicAddrTable=dtrFdbDynamicAddrTable, dtrFdbStaticAddrEntry=dtrFdbStaticAddrEntry, dtrConcMIB=dtrConcMIB, dtrCRFPortStatsTable=dtrCRFPortStatsTable, dtrCRFName=dtrCRFName, dtrFdbStaticAddrStatus=dtrFdbStaticAddrStatus, dtrConcMIBObjects=dtrConcMIBObjects, IANAifType=IANAifType, dtrOperNumberOfBridgeRelays=dtrOperNumberOfBridgeRelays, dtrExSrbPortStpPathCost=dtrExSrbPortStpPathCost, dtrCRFMRIEnable=dtrCRFMRIEnable, dtrFdbDynamicRDPortNumber=dtrFdbDynamicRDPortNumber, dtrFdbStaticAddrInMask=dtrFdbStaticAddrInMask, dtrConcMIBStats=dtrConcMIBStats, dtrFdbStaticAddrTable=dtrFdbStaticAddrTable, dtrMRIMgmtType=dtrMRIMgmtType, dtrCRFPortSpTreeDesignatedBridge=dtrCRFPortSpTreeDesignatedBridge, dtrFdbStaticAddrStnAddress=dtrFdbStaticAddrStnAddress, dtrCRFPortSpTreePriority=dtrCRFPortSpTreePriority, dtrExSrbPortStpCRFIndex=dtrExSrbPortStpCRFIndex, dtrCRFSpTreeHelloTime=dtrCRFSpTreeHelloTime, dtrFdbStaticAddrCRFIndex=dtrFdbStaticAddrCRFIndex, dtrCRFTable=dtrCRFTable, dtrExSrbStpBridgeForwardDelay=dtrExSrbStpBridgeForwardDelay, dtrCRFPortStatsInDiscards=dtrCRFPortStatsInDiscards, dtrCRFPortNumber=dtrCRFPortNumber, dtrExSrbPortHopEntry=dtrExSrbPortHopEntry, dtrCRFPortStatsInvalidRI=dtrCRFPortStatsInvalidRI, dtrFdbStaticRDCRFIndex=dtrFdbStaticRDCRFIndex, dtrCRFEntry=dtrCRFEntry, dtrExSrbPortStpTable=dtrExSrbPortStpTable, dtrExSrbPortStpState=dtrExSrbPortStpState, dtrConcentratorAddress=dtrConcentratorAddress, StaticFdbStatus=StaticFdbStatus, dtrFdbStaticRDEntry=dtrFdbStaticRDEntry, RowStatus=RowStatus, dtrFdbDynamicRDEntry=dtrFdbDynamicRDEntry, dtrCRFPortStatsAreInFrames=dtrCRFPortStatsAreInFrames, dtrConcMIBSpTree=dtrConcMIBSpTree, dtrCRFFdbAgingTime=dtrCRFFdbAgingTime, dtrCRFPortSpTreeState=dtrCRFPortSpTreeState, dtrSpanningTreeTopologyChanges=dtrSpanningTreeTopologyChanges, dtrFdbDynamicAddrStatus=dtrFdbDynamicAddrStatus, dtrExSrbStp=dtrExSrbStp, dtrExSrbPortHopSteRcvMax=dtrExSrbPortHopSteRcvMax, dtrExSrbBridgeNumber=dtrExSrbBridgeNumber, dtrExSrbStpBridgeMaxAge=dtrExSrbStpBridgeMaxAge, dtrCRFSpTreeDesignatedRoot=dtrCRFSpTreeDesignatedRoot, dtrExSrbGlobal=dtrExSrbGlobal, dtrFdbStaticRDStatus=dtrFdbStaticRDStatus, dtrMacMIB=dtrMacMIB)
