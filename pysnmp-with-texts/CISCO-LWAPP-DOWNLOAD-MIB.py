#
# PySNMP MIB module CISCO-LWAPP-DOWNLOAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOWNLOAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
cLApSysMacAddress, ciscoLwappApMIB = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApSysMacAddress", "ciscoLwappApMIB")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, NotificationType, Unsigned32, iso, Counter32, Gauge32, Bits, Integer32, ObjectIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Unsigned32", "iso", "Counter32", "Gauge32", "Bits", "Integer32", "ObjectIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity")
DisplayString, TruthValue, DateAndTime, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "DateAndTime", "RowStatus", "TextualConvention")
ciscoLwappDownloadMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 513, 4))
ciscoLwappDownloadMIB.setRevisions(('2008-05-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDownloadMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoLwappDownloadMIB.setLastUpdated('200805120000Z')
if mibBuilder.loadTexts: ciscoLwappDownloadMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDownloadMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDownloadMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. The relationship between the controller and the LWAPP APs is depicted as follows. A measure of the quality of the signal relative to the strength of noise expressed in 'dB'. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol ")
ciscoLwappDownloadMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 0))
ciscoLwappDownloadMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1))
ciscoLwappDownloadMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2))
ciscoLwappDLApBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1))
ciscoLwappDLReset = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2))
clDLApBootTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1), )
if mibBuilder.loadTexts: clDLApBootTable.setStatus('current')
if mibBuilder.loadTexts: clDLApBootTable.setDescription('This table represents primary and backup version of a a mesh AP. An entry in this table gets added when a mesh AP associates to the controller and entry gets removed when mesh AP disassociates from the controller.')
cldlApBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: cldlApBootEntry.setStatus('current')
if mibBuilder.loadTexts: cldlApBootEntry.setDescription('An (conceptual) entry in this table represents version information for a AP.')
cldlAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldlAPName.setStatus('current')
if mibBuilder.loadTexts: cldlAPName.setDescription('This object represents the name of the AP.')
cldlAPPrimaryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldlAPPrimaryVersion.setStatus('current')
if mibBuilder.loadTexts: cldlAPPrimaryVersion.setDescription('This object represents the primary image version of the AP.')
cldlAPBackupVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldlAPBackupVersion.setStatus('current')
if mibBuilder.loadTexts: cldlAPBackupVersion.setDescription('This object represents the backup image version of the AP.')
cldlAPSwapImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldlAPSwapImage.setStatus('current')
if mibBuilder.loadTexts: cldlAPSwapImage.setDescription('This object is used to swap the AP image. true : swaps the image of AP. false: do not swaps the image of AP.')
cldlApDownloadImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('backup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldlApDownloadImage.setStatus('current')
if mibBuilder.loadTexts: cldlApDownloadImage.setDescription('This object is used to configure the image. primary : Downloads primary image from the controller. backup : Downloads backup image from the controller.')
clDLResetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1), )
if mibBuilder.loadTexts: clDLResetTable.setStatus('current')
if mibBuilder.loadTexts: clDLResetTable.setDescription("This table used to reset the WLC and AP. User resets WLC by adding a row to this table through explicit management action from the network manager. A row is created by specifying clResetTime, or clResetDate and clResetTime setting the RowStatus object to 'createAndGo'.")
cldlResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetIndex"))
if mibBuilder.loadTexts: cldlResetEntry.setStatus('current')
if mibBuilder.loadTexts: cldlResetEntry.setDescription('An (conceptual) entry in this table used to reset the WLC and AP.')
cldlResetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cldlResetIndex.setStatus('current')
if mibBuilder.loadTexts: cldlResetIndex.setDescription('This object uniquely identifies one instance of sheduled reset vector of the controller.')
cldlResetDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cldlResetDateAndTime.setDescription('This object used to schedule the future reset time of the controller. Format: MM/DD/YY:HH/MM/SS.')
cldlResetSwapImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetSwapImage.setStatus('current')
if mibBuilder.loadTexts: cldlResetSwapImage.setDescription('This object used to select the image to be loaded after reset.')
cldlResetAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetAP.setStatus('current')
if mibBuilder.loadTexts: cldlResetAP.setDescription('This object is used to reset all the APs associate to the controller. true : resets all the APs. false : do not resets the APs.')
cldlResetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cldlResetRowStatus.setDescription('This object is the status column used for creating and deleting instances of the columnar objects in this table. destory : will clear the reset. The following object is mandatory for successful creation of an entry: clResetDateAndTime.')
cldlResetSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetSaveConfig.setStatus('current')
if mibBuilder.loadTexts: cldlResetSaveConfig.setDescription('This object is used to save the configuration before rebooting the controller. true : save and resets the controller. false : resets the controller with out saving configuration.')
cldlResetAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlResetAlertTime.setStatus('current')
if mibBuilder.loadTexts: cldlResetAlertTime.setDescription('This object is used to specify the number of seconds before the scheduled reset at which the trap message will be generated.')
ciscoLwappScheduledResetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 0, 1)).setObjects(("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetAlertTime"))
if mibBuilder.loadTexts: ciscoLwappScheduledResetNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappScheduledResetNotif.setDescription('This notification is generated if we scheduled the status and controller is going to reboot.')
ciscoLwappResetFailedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 0, 2))
if mibBuilder.loadTexts: ciscoLwappResetFailedNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappResetFailedNotif.setDescription('This notification is generated if we failed to schedule reset.')
ciscoLwappClearResetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 0, 3))
if mibBuilder.loadTexts: ciscoLwappClearResetNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappClearResetNotif.setDescription('This notification is generated if we cancelled the scheduled reset.')
ciscoLwappDownloadMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 1))
ciscoLwappDownloadMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 2))
ciscoLwappDownloadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappDLApGroup"), ("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappDLResetGroup"), ("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappDLNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDownloadMIBCompliance = ciscoLwappDownloadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDownloadMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDownloadMIB module.')
ciscoLwappDLApGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOWNLOAD-MIB", "cldlAPName"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlAPPrimaryVersion"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlAPBackupVersion"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlAPSwapImage"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlApDownloadImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDLApGroup = ciscoLwappDLApGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDLApGroup.setDescription('This collection of objects represents the information about the general attributes and functional parameters of those APs that have joined the controller.')
ciscoLwappDLResetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetDateAndTime"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetSwapImage"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetAP"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetRowStatus"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetSaveConfig"), ("CISCO-LWAPP-DOWNLOAD-MIB", "cldlResetAlertTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDLResetGroup = ciscoLwappDLResetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDLResetGroup.setDescription('This collection of objects represents the information about scheduled reset date and time of the controller.')
ciscoLwappDLNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 513, 4, 2, 2, 3)).setObjects(("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappScheduledResetNotif"), ("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappResetFailedNotif"), ("CISCO-LWAPP-DOWNLOAD-MIB", "ciscoLwappClearResetNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDLNotifsGroup = ciscoLwappDLNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDLNotifsGroup.setDescription('This supplemental collection of objects represents the shecduled reset related notifications sent by the agent to a network management station. ')
mibBuilder.exportSymbols("CISCO-LWAPP-DOWNLOAD-MIB", ciscoLwappDLReset=ciscoLwappDLReset, cldlResetDateAndTime=cldlResetDateAndTime, clDLResetTable=clDLResetTable, ciscoLwappResetFailedNotif=ciscoLwappResetFailedNotif, ciscoLwappDownloadMIBGroups=ciscoLwappDownloadMIBGroups, ciscoLwappDownloadMIBConform=ciscoLwappDownloadMIBConform, clDLApBootTable=clDLApBootTable, ciscoLwappScheduledResetNotif=ciscoLwappScheduledResetNotif, cldlAPName=cldlAPName, cldlResetIndex=cldlResetIndex, cldlResetEntry=cldlResetEntry, cldlResetAlertTime=cldlResetAlertTime, cldlResetSaveConfig=cldlResetSaveConfig, cldlResetSwapImage=cldlResetSwapImage, cldlAPSwapImage=cldlAPSwapImage, ciscoLwappDLResetGroup=ciscoLwappDLResetGroup, PYSNMP_MODULE_ID=ciscoLwappDownloadMIB, ciscoLwappDownloadMIBCompliance=ciscoLwappDownloadMIBCompliance, cldlAPBackupVersion=cldlAPBackupVersion, cldlApDownloadImage=cldlApDownloadImage, cldlApBootEntry=cldlApBootEntry, ciscoLwappDLApGroup=ciscoLwappDLApGroup, ciscoLwappDownloadMIBObjects=ciscoLwappDownloadMIBObjects, ciscoLwappDownloadMIB=ciscoLwappDownloadMIB, ciscoLwappDLApBoot=ciscoLwappDLApBoot, cldlAPPrimaryVersion=cldlAPPrimaryVersion, cldlResetAP=cldlResetAP, ciscoLwappDownloadMIBNotifs=ciscoLwappDownloadMIBNotifs, cldlResetRowStatus=cldlResetRowStatus, ciscoLwappDLNotifsGroup=ciscoLwappDLNotifsGroup, ciscoLwappClearResetNotif=ciscoLwappClearResetNotif, ciscoLwappDownloadMIBCompliances=ciscoLwappDownloadMIBCompliances)
