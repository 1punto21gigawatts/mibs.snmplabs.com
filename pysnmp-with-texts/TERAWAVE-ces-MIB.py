#
# PySNMP MIB module TERAWAVE-ces-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-ces-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, Integer32, Unsigned32, Bits, Gauge32, TimeTicks, Counter64, NotificationType, enterprises, ObjectIdentity, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Integer32", "Unsigned32", "Bits", "Gauge32", "TimeTicks", "Counter64", "NotificationType", "enterprises", "ObjectIdentity", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagment = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfCESmib = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2))
atmfCES = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2))
atmfCESObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1))
atmfCESConTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: atmfCESConTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESConTable.setDescription(' table atmfCESConTable')
atmfCESConTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "TERAWAVE-ces-MIB", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmfCESConTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESConTableEntry.setDescription(' table entry atmfCESConTableEntry ')
atmfCESCbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESCbrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCbrIndex.setDescription('')
atmfCESAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESAtmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESAtmIndex.setDescription('')
atmfCESAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESAtmVpi.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESAtmVpi.setDescription('')
atmfCESAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESAtmVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESAtmVci.setDescription('')
atmfCESCbrService = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESCbrService.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCbrService.setDescription('')
atmfCESCbrClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3), ("looped", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESCbrClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCbrClockMode.setDescription('')
atmfCESCas = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4), ("j2Cas", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESCas.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCas.setDescription('')
atmfCESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESPartialFill.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESPartialFill.setDescription('')
atmfCESBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESBufMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESBufMaxSize.setDescription('')
atmfCESCdvtRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESCdvtRxT.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCdvtRxT.setDescription('')
atmfCESCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESCellLossIntegrationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCellLossIntegrationPeriod.setDescription('')
atmfCESConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pvc", 2), ("activeSvc", 3), ("passiveSvc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESConnType.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESConnType.setDescription('')
atmfCESLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESLocalAddr.setDescription('')
atmfCESAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESAdminStatus.setDescription('')
atmfCESOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESOperStatus.setDescription('')
atmCESConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESConfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmCESConfRowStatus.setDescription('')
atmfCESMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2), )
if mibBuilder.loadTexts: atmfCESMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESMappingTable.setDescription(' table atmfCESMappingTable')
atmfCESMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2, 1), ).setIndexNames((0, "TERAWAVE-ces-MIB", "atmfCESAtmIndex"), (0, "TERAWAVE-ces-MIB", "atmfCESAtmVpi"), (0, "TERAWAVE-ces-MIB", "atmfCESAtmVci"))
if mibBuilder.loadTexts: atmfCESMappingTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESMappingTableEntry.setDescription(' table entry atmfCESMappingTableEntry ')
atmfCESMappingCbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESMappingCbrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESMappingCbrIndex.setDescription('')
atmfCESStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3), )
if mibBuilder.loadTexts: atmfCESStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESStatsTable.setDescription(' table atmfCESStatsTable')
atmfCESStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1), ).setIndexNames((0, "TERAWAVE-ces-MIB", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmfCESStatsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESStatsTableEntry.setDescription(' table entry atmfCESStatsTableEntry ')
atmfCESReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESReassCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESReassCells.setDescription('')
atmfCESHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESHdrErrors.setDescription('')
atmfCESPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESPointerReframes.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESPointerReframes.setDescription('')
atmfCESPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESPointerParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESPointerParityErrors.setDescription('')
atmfCESAal1SeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESAal1SeqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESAal1SeqErrors.setDescription('')
atmfCESLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLostCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESLostCells.setDescription('')
atmfCESMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESMisinsertedCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESMisinsertedCells.setDescription('')
atmfCESBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESBufUnderflows.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESBufUnderflows.setDescription('')
atmfCESBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESBufOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESBufOverflows.setDescription('')
atmfCESCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noloss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESCellLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESCellLossStatus.setDescription('')
atmfCESActiveSvcTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4), )
if mibBuilder.loadTexts: atmfCESActiveSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESActiveSvcTable.setDescription(' table atmfCESActiveSvcTable')
atmfCESActiveSvcTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1), ).setIndexNames((0, "TERAWAVE-ces-MIB", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmfCESActiveSvcTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESActiveSvcTableEntry.setDescription(' table entry atmfCESActiveSvcTableEntry ')
atmfCESRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESRemoteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESRemoteAddr.setDescription('')
atmfCESFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESFirstRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESFirstRetryInterval.setDescription('')
atmfCESRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESRetryTimer.setDescription('')
atmfCESRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESRetryLimit.setDescription('')
atmfCESRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESRetryFailures.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESRetryFailures.setDescription('')
atmfCESActiveSvcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESActiveSvcRestart.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESActiveSvcRestart.setDescription('')
atmfCESActiveSvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESActiveSvcOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESActiveSvcOperStatus.setDescription('')
atmfCESLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESLastReleaseCause.setDescription('')
atmfCESLastReleaseDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLastReleaseDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: atmfCESLastReleaseDiagnostics.setDescription('')
mibBuilder.exportSymbols("TERAWAVE-ces-MIB", atmfCESActiveSvcRestart=atmfCESActiveSvcRestart, atmfCESAal1SeqErrors=atmfCESAal1SeqErrors, atmfCESRetryFailures=atmfCESRetryFailures, atmfCESCdvtRxT=atmfCESCdvtRxT, atmfCESCbrClockMode=atmfCESCbrClockMode, atmfCESObjects=atmfCESObjects, atmfCESConTable=atmfCESConTable, atmfCESLocalAddr=atmfCESLocalAddr, atmfCESMappingTableEntry=atmfCESMappingTableEntry, atmfCESCas=atmfCESCas, atmfCESRetryTimer=atmfCESRetryTimer, atmfCESAtmIndex=atmfCESAtmIndex, atmfCESCellLossIntegrationPeriod=atmfCESCellLossIntegrationPeriod, atmfCESConTableEntry=atmfCESConTableEntry, atmfCESPointerParityErrors=atmfCESPointerParityErrors, atmForumNetworkManagment=atmForumNetworkManagment, atmfCESAdminStatus=atmfCESAdminStatus, atmfCESFirstRetryInterval=atmfCESFirstRetryInterval, atmfCESConnType=atmfCESConnType, atmfCESActiveSvcTable=atmfCESActiveSvcTable, atmfCESRetryLimit=atmfCESRetryLimit, atmfCESStatsTableEntry=atmfCESStatsTableEntry, atmfCESBufOverflows=atmfCESBufOverflows, atmForum=atmForum, atmfCESLastReleaseCause=atmfCESLastReleaseCause, atmfCESOperStatus=atmfCESOperStatus, atmfCESPartialFill=atmfCESPartialFill, atmfCES=atmfCES, atmfCESLastReleaseDiagnostics=atmfCESLastReleaseDiagnostics, atmfCESLostCells=atmfCESLostCells, atmfCESAtmVci=atmfCESAtmVci, atmfCESCbrIndex=atmfCESCbrIndex, atmfCESCellLossStatus=atmfCESCellLossStatus, atmfCESActiveSvcTableEntry=atmfCESActiveSvcTableEntry, atmfCESHdrErrors=atmfCESHdrErrors, atmfCESActiveSvcOperStatus=atmfCESActiveSvcOperStatus, atmfCESmib=atmfCESmib, atmCESConfRowStatus=atmCESConfRowStatus, atmfCESReassCells=atmfCESReassCells, atmfCESCbrService=atmfCESCbrService, atmfCESRemoteAddr=atmfCESRemoteAddr, atmfCESPointerReframes=atmfCESPointerReframes, atmfCESMappingTable=atmfCESMappingTable, atmfCESBufMaxSize=atmfCESBufMaxSize, atmfCESAtmVpi=atmfCESAtmVpi, atmfCESStatsTable=atmfCESStatsTable, atmfCESBufUnderflows=atmfCESBufUnderflows, atmfCESMisinsertedCells=atmfCESMisinsertedCells, atmfCESMappingCbrIndex=atmfCESMappingCbrIndex)
