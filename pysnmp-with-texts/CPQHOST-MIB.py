#
# PySNMP MIB module CPQHOST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQHOST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, TimeTicks, IpAddress, Counter64, Counter32, iso, NotificationType, Gauge32, Bits, Integer32, enterprises, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "TimeTicks", "IpAddress", "Counter64", "Counter32", "iso", "NotificationType", "Gauge32", "Bits", "Integer32", "enterprises", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
compaq = MibIdentifier((1, 3, 6, 1, 4, 1, 232))
cpqHostOs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11))
cpqHoMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 1))
cpqHoComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2))
cpqHoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 1))
cpqHoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 2))
cpqHoUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 3))
cpqHoFileSys = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 4))
cpqHoIfPhysMap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 5))
cpqHoSWRunning = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 6))
cpqHoSwVer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 7))
cpqHoGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 8))
cpqHoSwPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 9))
cpqHoSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 10))
cpqHoTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 11))
cpqHoClients = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 12))
cpqHoMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 13))
cpqHoFwVer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 14))
cpqHoHWInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 15))
cpqPwrThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 16))
cpqHoOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4))
cpqHoMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoMibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information. Correct interpretation of data may require a MIB document with the same major revision level.')
cpqHoMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoMibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqHoMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoMibCondition.setDescription("The overall condition. This object represents the overall status of the server's host system represented by this MIB.")
cpqHoOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoOsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail. An agent may choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqHoOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqHoOsCommonModuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleTable.setDescription('A table of software modules that provide an interface to the device this MIB describes.')
cpqHoOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqHoOsCommonModuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
cpqHoOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleIndex.setDescription('A unique index for this module description.')
cpqHoOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleName.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleName.setDescription('The module name.')
cpqHoOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleVersion.setDescription('The module version in XX.YY format. Where XX is the major version number and YY is the minor version number. This field will be null (size 0) string if the agent cannot provide the module version.')
cpqHoOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleDate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqHoOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModulePurpose.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoOsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
cpqHoName = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoName.setDescription('The name of the host operating system (OS).')
cpqHoVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoVersion.setDescription('The version of the host OS.')
cpqHoDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoDesc.setDescription('A further description of the host OS.')
cpqHoOsType = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("other", 1), ("netware", 2), ("windowsnt", 3), ("sco-unix", 4), ("unixware", 5), ("os-2", 6), ("ms-dos", 7), ("dos-windows", 8), ("windows95", 9), ("windows98", 10), ("open-vms", 11), ("nsk", 12), ("windowsCE", 13), ("linux", 14), ("windows2000", 15), ("tru64UNIX", 16), ("windows2003", 17), ("windows2003-x64", 18), ("solaris", 19), ("windows2003-ia64", 20), ("windows2008", 21), ("windows2008-x64", 22), ("windows2008-ia64", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoOsType.setDescription('Host Operating system enumeration.')
cpqHoTelnet = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoTelnet.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoTelnet.setDescription('Telnet on socket 23 is available.')
cpqHoSystemRole = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSystemRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSystemRole.setDescription("The system role. This is a settable free form text field intended to be assigned by a remote console briefly describing the system's function.")
cpqHoSystemRoleDetail = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSystemRoleDetail.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSystemRoleDetail.setDescription('The system detailed description. This is a settable free form text field intended to be assigned by a remote console describing the system function in detail.')
cpqHoCrashDumpState = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("completememorydump", 1), ("kernelmemorydump", 2), ("smallmemorydump", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCrashDumpState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCrashDumpState.setDescription("Crash dump state. Value of 'Unknown (-1)' is returned when crash dump state could not be determined.")
cpqHoCrashDumpCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCrashDumpCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCrashDumpCondition.setDescription('The condition of the Crash dump configuration.')
cpqHoCrashDumpMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoCrashDumpMonitoring.setStatus('optional')
if mibBuilder.loadTexts: cpqHoCrashDumpMonitoring.setDescription("Enable/disable crash dump monitoring. If crash dump monitoring is enabled both crash dump TRAP's are generated and crash dump condition is updated. If crash dump monitoring is disabled, no crash dump TRAP is generated and the crash dump condition is set to other")
cpqHoMaxLogicalCPUSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMaxLogicalCPUSupported.setStatus('optional')
if mibBuilder.loadTexts: cpqHoMaxLogicalCPUSupported.setDescription('Maximum number of logical CPUs supported by Operating System.')
cpqHoCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1), )
if mibBuilder.loadTexts: cpqHoCpuUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilTable.setDescription('A table of CPU utilization entries.')
cpqHoCpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoCpuUtilUnitIndex"))
if mibBuilder.loadTexts: cpqHoCpuUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilEntry.setDescription("A description of a CPU's utilization.")
cpqHoCpuUtilUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilUnitIndex.setDescription('This number uniquely specifies a processor unit. A processing unit may be a set of processing chips that are on the same board or for other reasons work together as a unit. The main processor unit (if such a concept is valid for this machine) will always have the lowest (first) index.')
cpqHoCpuUtilMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilMin.setDescription('The CPU utilization as a percentage of the theoretical maximum during the last minute. A value of -1 indicates that no CPU utilization information is available for this processor.')
cpqHoCpuUtilFiveMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilFiveMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilFiveMin.setDescription('The CPU utilization as a percentage of the theoretical maximum during the last five minutes. A value of -1 indicates that no CPU utilization information is available for this processor.')
cpqHoCpuUtilThirtyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilThirtyMin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilThirtyMin.setDescription('The CPU utilization as a percentage of the theoretical maximum during the last thirty minutes. A value of -1 indicates that no CPU utilization information is available for this processor.')
cpqHoCpuUtilHour = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilHour.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCpuUtilHour.setDescription('The CPU utilization as a percentage of the theoretical maximum during the last hour. A value of -1 indicates that no CPU utilization information is available for this processor.')
cpqHoCpuUtilHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilHwLocation.setStatus('optional')
if mibBuilder.loadTexts: cpqHoCpuUtilHwLocation.setDescription('A text description of the hardware location, on complex multi SBB hardware only, for the CPU. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqHoFileSysTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1), )
if mibBuilder.loadTexts: cpqHoFileSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysTable.setDescription('A table of file system descriptions.')
cpqHoFileSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoFileSysIndex"))
if mibBuilder.loadTexts: cpqHoFileSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysEntry.setDescription('A file system description.')
cpqHoFileSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysIndex.setDescription('An index that uniquely specifies this entry.')
cpqHoFileSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysDesc.setDescription('A description of the file system.')
cpqHoFileSysSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysSpaceTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysSpaceTotal.setDescription('The file system size in megabytes. This item will be set to -1 if the agent is unable to determine this information.')
cpqHoFileSysSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysSpaceUsed.setDescription('The megabytes of file system space currently in use. This item will be set to -1 if the agent is unable to determine this information.')
cpqHoFileSysPercentSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysPercentSpaceUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysPercentSpaceUsed.setDescription('The percent of file system space currently in use. This item will be set to -1 if this information is not available.')
cpqHoFileSysAllocUnitsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsTotal.setDescription('The total number of files (directory entries) that can be stored on the file system if a limit exists other than total space used. This item will be set to -1 if no such limit exists.')
cpqHoFileSysAllocUnitsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsUsed.setDescription('The number of files (directory entries) on this file system. This item will be set to -1 if the agent does not determine this information.')
cpqHoFileSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysStatus.setDescription('The Threshold Status. This object represent the status of the Filesystem threshold.')
cpqHoFileSysCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFileSysCondition.setDescription("The overall condition of File System Threshold. This object represents the overall status of the server's File System Threshold.")
cpqHoIfPhysMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1), )
if mibBuilder.loadTexts: cpqHoIfPhysMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapTable.setDescription('A table of interface to physical hardware mappings.')
cpqHoIfPhysMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoIfPhysMapIndex"))
if mibBuilder.loadTexts: cpqHoIfPhysMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapEntry.setDescription('A mapping of an interface table entry to physical hardware.')
cpqHoIfPhysMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapIndex.setDescription('An index that uniquely specifies this entry. This value is equal to the index of the entry in the MIB-II interface table to which this entry corresponds.')
cpqHoIfPhysMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapSlot.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapSlot.setDescription('The number of the slot containing the physical hardware that implements this interface. The number zero (0) indicates an embedded interface (on the system board) or an interface whose slot is unknown. Values may be unknown if the physical hardware has not been configured using the EISA Configuration Utility.')
cpqHoIfPhysMapIoBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIoBaseAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapIoBaseAddr.setDescription('The base I/O address of the physical hardware that implements this interface.')
cpqHoIfPhysMapIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIrq.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapIrq.setDescription('The number of the IRQ (interrupt) used for this physical hardware interface. The number zero (0) indicates that this device does not use an IRQ or this information is unavailable.')
cpqHoIfPhysMapDma = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapDma.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapDma.setDescription('The number of the DMA channel used for this physical hardware interface. The number -1 indicates that this device does not use a DMA channel or this information is unavailable.')
cpqHoIfPhysMapMemBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapMemBaseAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapMemBaseAddr.setDescription('The base memory address used by this physical hardware interface. The number zero (0) indicates that this device does not use system memory or this information is unavailable.')
cpqHoIfPhysMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapPort.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapPort.setDescription('The port number of the interface for multi-port NICs. A port number of -1 indicates that the port could not be determined.')
cpqHoIfPhysMapDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapDuplexState.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapDuplexState.setDescription('This variable describes the configured duplex state of the NIC.')
cpqHoIfPhysMapCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapCondition.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapCondition.setDescription('The condition of this interface.')
cpqHoIfPhysMapOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapOverallCondition.setStatus('deprecated')
if mibBuilder.loadTexts: cpqHoIfPhysMapOverallCondition.setDescription('The overall condition of all interfaces.')
cpqHoSWRunningTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1), )
if mibBuilder.loadTexts: cpqHoSWRunningTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningTable.setDescription('A table of descriptions of software running on the system.')
cpqHoSWRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoSWRunningIndex"))
if mibBuilder.loadTexts: cpqHoSWRunningEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningEntry.setDescription('A description of a software program running on the system.')
cpqHoSWRunningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningIndex.setDescription('An index that uniquely specifies this entry.')
cpqHoSWRunningName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningName.setDescription('The name of the software.')
cpqHoSWRunningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningDesc.setDescription('A description of the software.')
cpqHoSWRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningVersion.setDescription('The version of the software. This field will be a null (size 0) string if the agent cannot provide the software version.')
cpqHoSWRunningDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningDate.setDescription('The software date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the software date. The hour, minute, and second field will be set to zero (0) if they are not relevant.')
cpqHoSWRunningMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("stop", 3), ("startAndStop", 4), ("count", 5), ("startAndCount", 6), ("countAndStop", 7), ("startCountAndStop", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningMonitor.setDescription('The user specified monitor option for a process.')
cpqHoSWRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stopped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSWRunningState.setDescription('The current state of monitored process.')
cpqHoSWRunningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningCount.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningCount.setDescription('For each process name, the number of instances of the process running on the system is kept count of, in this variable.')
cpqHoSWRunningCountMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSWRunningCountMin.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningCountMin.setDescription('This is the lower threshold on cpqHoSWRunningCount to be set by the user.')
cpqHoSWRunningCountMax = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSWRunningCountMax.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningCountMax.setDescription('This is the upper threshold on cpqHoSWRunningCount to be set by the user.')
cpqHoSWRunningEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningEventTime.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningEventTime.setDescription('The system time at which the monitored event, as per cpqHoSWRunningMonitor, last occurred. field octets contents range ===== ====== ======== ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) The hour, minute, and second field will be set to zero (0) if they are not relevant.')
cpqHoSWRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningStatus.setDescription('The overall alarm state of the resources managed by the software, or the software itself.')
cpqHoSWRunningConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("starting", 2), ("initialized", 3), ("configured", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningConfigStatus.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningConfigStatus.setDescription('The configuration state of the software. The level of initialization the software has performed.')
cpqHoSWRunningIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningIdentifier.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningIdentifier.setDescription('The unique identifier of the sofware. This identifier should be unique for all instances of the sofware running in the environment.')
cpqHoSWRunningRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("slave", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningRedundancyMode.setStatus('optional')
if mibBuilder.loadTexts: cpqHoSWRunningRedundancyMode.setDescription('When the software is running in a high availability mode, the failover mode of this instance of the software.')
cpqHoSwRunningTrapDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwRunningTrapDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwRunningTrapDesc.setDescription('The error message for a process monitor event.')
cpqHoSwVerNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerNextIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerNextIndex.setDescription('The index of the next available entry in the cpqHoSwVer table. If the maximum number of entries to the cpqHoSwVer table has been reached, this index will contain -1.')
cpqHoSwVerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2), )
if mibBuilder.loadTexts: cpqHoSwVerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerTable.setDescription('A list of software item entries.')
cpqHoSwVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoSwVerIndex"))
if mibBuilder.loadTexts: cpqHoSwVerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerEntry.setDescription('A list of software items that are on the machine.')
cpqHoSwVerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerIndex.setDescription('An index that uniquely identifies an entry in the cpqHoSwVer table.')
cpqHoSwVerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("loaded", 2), ("notloaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerStatus.setDescription('Status for the software item.')
cpqHoSwVerType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("driver", 2), ("agent", 3), ("sysutil", 4), ("application", 5), ("keyfile", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerType.setDescription('Type of software item.')
cpqHoSwVerName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerName.setDescription('The name of this software item.')
cpqHoSwVerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerDescription.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerDescription.setDescription('The description of this software item.')
cpqHoSwVerDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerDate.setDescription('The date of the software item, if any. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65535 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) The year field is set with the most significant octet first. An entry of zero (0) means that there is no date associated with this software item. Zero is the default.')
cpqHoSwVerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerLocation.setDescription('The location of this software item on the server.')
cpqHoSwVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerVersion.setDescription('An string that specifies the version of this item.')
cpqHoSwVerVersionBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerVersionBinary.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerVersionBinary.setDescription('An string that specifies the version of this item based on the binary version resource.')
cpqHoSwVerAgentsVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerAgentsVer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwVerAgentsVer.setDescription('A string that specifies the version of the Insight Management Agents running on the system.')
cpqHoGenericData = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGenericData.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoGenericData.setDescription('Data for the generic trap.')
cpqHoCriticalSoftwareUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoCriticalSoftwareUpdateData.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCriticalSoftwareUpdateData.setDescription('Data for the Critical Software Update trap.')
cpqHoSwPerfAppErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwPerfAppErrorDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoSwPerfAppErrorDesc.setDescription(' This string holds error information about the last application error that occurred in the system. ')
cpqHoMibStatusArray = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibStatusArray.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoMibStatusArray.setDescription('The MIB Status Array is an array of MIB status structures. Each structure is made up of 4 octets. The first octet is the MIB presence. The second octet is MIB condition. The third octet is MIB major revision. The fourth octet is MIB minor revision. These blocks of 4 octets each are index by the mib identifier just after the compaq enterprise (eg in 1.3.6.1.232.11 mib, the index is 11). The 4 octets in the first block (block 0) are reserved for systems management and serve as an aggregate of the other mibs. Array element 0 is the status for all MIBs in the Compaq Enterprise. Array element n, where n > 0, is the status for the nth MIB in the Compaq Enterprise (.1.3.6.1.4.1.232.n). Octet Element Field ======== ======= ========= 0 0 Status of any Compaq MIBs 1 Condition of all Compaq MIBs 2 System Flags (see below) 3 Detailed type (see below) 4 1 Status of Compaq MIB 1 5 Condition of Compaq MIB 1 6 Major Revision of Compaq MIB 1 7 Minor Revision of Compaq MIB 1 8 2 Status of Compaq MIB 2 9 Condition of Compaq MIB 2 10 Major Revision of Compaq MIB 2 11 Minor Revision of Compaq MIB 2 . . . . n*4 n Status of Compaq MIB n (n*4)+1 Condition of Compaq MIB n (n*4)+2 Major Revision of Compaq MIB n (n*4)+3 Minor Revision of Compaq MIB n System Flags (octet 2) Bit Meaning ===== ========= 0 Equals 1 if the device is not a server, see detailed type below Equals 0 if the device is a server 1 This system contains enabled remote console functionality. 2 This system is configured to be an Integration Server. 3 Web Based Management is enabled. 4-7 Reserved (reserved Bits should be zero) Detailed Type (octet 3) Bits 0-4 Detailed Type, only used if bit 0 in octet 2 is 1. Bits 5-7 Reserved for expansion. note, use these last in case we need more then 32 types someday. Type Values for Bits 0-4 (maps to CIM7 types) Unknown = 0 Server = 1 (yes a duplicate of the server flag) Desktop = 2 Workstation = 3 Portable = 4 Router = 5 Cluster = 6 Printer = 7 Switch = 8 (network switch) Repeater = 9 Remote Access Device = 10 Other = 11 Management Processor = 12 (rib, RILOE, iLo) Rack = 13 Enclosure = 14 KVM Switch = 15 (IP enabled keyboard video mouse switch). UPS = 16 Power Distribution Unit = 17 Environmental Monitor = 18 (eg CMC) Power Distribution Rack = 19 (PDR) Storage Device = 20 For all other blocks, they are defined as: Status This is a collection of flags. Each bit has the following meaning when it is on (1): Bit 2-7: RESERVED: Always 0 Bit 1: MIB is from offline data (only applies to global system status) Bit 0: MIB is available NOTE: bit 7 is the most significant bit, bit 0 is the least significant. Condition 0 - Not available 1 - Other 2 - OK 3 - Degraded 4 - Failed Major Revision 0..255, where 0 is not available Minor Revision 0..255, where 0 is not available')
cpqHoConfigChangedDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoConfigChangedDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoConfigChangedDate.setDescription('The date/time when the agents were last loaded. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the date/time. The year field is set with the most significant octet first.')
cpqHoGUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoGUID.setDescription("The globally unique identifier of this physical server. If the OS cannot determine a unique ID, it will default the variable to contain all 0's. The management station can then perform a SET to this variable to provide the unique ID. When the system is cellular, it will have its partition number appended at the end.")
cpqHoCodeServer = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCodeServer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoCodeServer.setDescription('This item indicates how many code server shares are currently configured on the system. If the value of this attribute is 0, this server has not been configured with code server shares.')
cpqHoWebMgmtPort = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoWebMgmtPort.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoWebMgmtPort.setDescription('This item indicates the port used by the Insight Web Agent. If the port cannot be determined or the Web Management agent is not enabled, this value will be -1.')
cpqHoGUIDCanonical = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGUIDCanonical.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoGUIDCanonical.setDescription('The globally unique identifier in canonical format of this physical server. If the OS cannot determine a unique ID, it will default the variable to blank.')
cpqHoTrapFlags = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoTrapFlags.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoTrapFlags.setDescription('The Trap Flags. This is a collection of flags used during trap delivery. Each bit has the following meaning: Bit 5-31: RESERVED: Always 0. Bit 2-4: Trap Condition 0 = Not used (for backward compatibility) 1 = Condition unknown or N/A 2 = Condition ok 3 = Condition degraded 4 = Condition failed 5-7 = reserved Bit 1: Client IP address type 0 = static entry 1 = DHCP entry Bit 0: Agent Type 0 = Server 1 = Client NOTE: bit 31 is the most significant bit, bit 0 is the least significant.')
cpqHoClientLastModified = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientLastModified.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientLastModified.setDescription("The date/time of the last modification to the client table. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to all 0's if there are no entries to the client table. The year field will be set to 0xFFFF if the agent does not support the client table. The year field is set with the most significant octet first.")
cpqHoClientDelete = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoClientDelete.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientDelete.setDescription('Setting this variable to the name of a client in the client table will cause that row in the table to be deleted. Any other set will fail. Note that the indices of the table will (most likely) be renumbered following a deletion.')
cpqHoClientTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3), )
if mibBuilder.loadTexts: cpqHoClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientTable.setDescription('A table of client descriptions.')
cpqHoClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoClientIndex"))
if mibBuilder.loadTexts: cpqHoClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientEntry.setDescription('A client description.')
cpqHoClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientIndex.setDescription('An index that uniquely specifies this entry.')
cpqHoClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientName.setDescription('The Win95 machine name of this client.')
cpqHoClientIpxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIpxAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientIpxAddress.setDescription('The IPX address for this client, all octets should be set to 0xff if this machine does not support IPX. The format is NetAddr:NodeNumber and sent in MSB order: 1111111111 01234567:890123456789')
cpqHoClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientIpAddress.setDescription('The IP address for this client, all octets should be set to 0xff if this machine does not support IP. The order will be in network byte order (ie MSB first.)')
cpqHoClientCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientCommunity.setDescription('A community name that can be used to query the client with SNMP. This community name should have, but is not required to have, the greatest possible access to client information.')
cpqHoClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoClientID.setDescription('The unique identifier of this client.')
cpqHoPhysicalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPhysicalMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoPhysicalMemorySize.setDescription('Total amount of physical memory as seen by the OS (in megabytes). A -1 will be returned if this value could not be determined.')
cpqHoPhysicalMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPhysicalMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoPhysicalMemoryFree.setDescription('The amount of free physical memory (in megabytes). A -1 will be returned if this value could not be determined.')
cpqHoPagingMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPagingMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoPagingMemorySize.setDescription('Total virtual memory available from the OS (in megabytes). A -1 will be returned if this value could not be determined.')
cpqHoPagingMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPagingMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoPagingMemoryFree.setDescription('Available paging memory (in megabytes). A -1 will be returned if this value could not be determined.')
cpqHoBootPagingFileSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoBootPagingFileSize.setDescription('The paging file size of the boot volume in the format xxxMB or xxxGB, where xxx is the paging file size in that unit shown right after it. NULL value will be returned if this value could not be determined.')
cpqHoBootPagingFileMinimumSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileMinimumSize.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoBootPagingFileMinimumSize.setDescription('Minimum paging file size of the boot volume required to save the memory dump in the event of a system crash. The format is xxxMB or xxxGB, where xxx is the minimum paging file size in that unit shown right after it.')
cpqHoBootPagingFileVolumeFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileVolumeFreeSpace.setStatus('optional')
if mibBuilder.loadTexts: cpqHoBootPagingFileVolumeFreeSpace.setDescription('Free space of the boot volume required to save the memory dump in the event of a system crash. The format is xxxMB or xxxGB, where xxx is the minimum paging file size in that unit shown right after it.')
cpqHoFwVerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1), )
if mibBuilder.loadTexts: cpqHoFwVerTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerTable.setDescription('A list of firmware item entries.')
cpqHoFwVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoFwVerIndex"))
if mibBuilder.loadTexts: cpqHoFwVerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerEntry.setDescription('A list of firmware items that are on the machine.')
cpqHoFwVerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerIndex.setDescription('Firmware Version Index. The firmware version index uniquely identifies an entry in the cpqHoFwVer table.')
cpqHoFwVerCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("storage", 2), ("nic", 3), ("rib", 4), ("system", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerCategory.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerCategory.setDescription('Firmware Version Category.')
cpqHoFwVerDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("other", 1), ("internalArrayController", 2), ("fibreArrayController", 3), ("scsiController", 4), ("fibreChannelTapeController", 5), ("modularDataRouter", 6), ("ideCdRomDrive", 7), ("ideDiskDrive", 8), ("scsiCdRom-ScsiAttached", 9), ("scsiDiskDrive-ScsiAttached", 10), ("scsiTapeDrive-ScsiAttached", 11), ("scsiTapeLibrary-ScsiAttached", 12), ("scsiDiskDrive-ArrayAttached", 13), ("scsiTapeDrive-ArrayAttached", 14), ("scsiTapeLibrary-ArrayAttached", 15), ("scsiDiskDrive-FibreAttached", 16), ("scsiTapeDrive-FibreAttached", 17), ("scsiTapeLibrary-FibreAttached", 18), ("scsiEnclosureBackplaneRom-ScsiAttached", 19), ("scsiEnclosureBackplaneRom-ArrayAttached", 20), ("scsiEnclosureBackplaneRom-FibreAttached", 21), ("scsiEnclosureBackplaneRom-ra4x00", 22), ("systemRom", 23), ("networkInterfaceController", 24), ("remoteInsightBoard", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerDeviceType.setDescription('Firmware Version Device Type.')
cpqHoFwVerDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerDisplayName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerDisplayName.setDescription('Firmware Version Device Display Name. This is the display name of the device containing the firmware.')
cpqHoFwVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerVersion.setDescription('Firmware Version. This is the version of the device firmware.')
cpqHoFwVerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerLocation.setDescription('Firmware Version Device Location. This is a printable string that specifies the location of the device that contains the firmware.')
cpqHoFwVerXmlString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerXmlString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerXmlString.setDescription('Firmware Version Xml String. This is an XML string that specifies the location of the device that contains the firmware. This will be NULL string (size 0) if this information could not be provided.')
cpqHoFwVerKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerKeyString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerKeyString.setDescription('Firmware Version Key String. This field is differentiate devices of the same type.')
cpqHoFwVerUpdateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noUpdate", 2), ("softwareflash", 3), ("replacePhysicalRom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerUpdateMethod.setStatus('mandatory')
if mibBuilder.loadTexts: cpqHoFwVerUpdateMethod.setDescription('Firmware Version update method.')
cpqHoHWInfoPlatform = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("cellular", 2), ("foundation", 3), ("virtualMachine", 4), ("serverBlade", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoHWInfoPlatform.setStatus('optional')
if mibBuilder.loadTexts: cpqHoHWInfoPlatform.setDescription("Hardware platform type. This object represents the platform type of the server's host system represented by this MIB.")
cpqPwrWarnType = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqPwrWarnType.setDescription('Type of power reading on which the warning is based.')
cpqPwrWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cpqPwrWarnThreshold.setDescription('The threshold the power usage must exceed (in Watts).')
cpqPwrWarnDuration = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cpqPwrWarnDuration.setDescription('Duration that power usage must be exceeded before warning (in minutes).')
cpqSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSerialNum.setDescription('Serial number of the server.')
cpqServerUUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqServerUUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqServerUUID.setDescription('Server UUID')
cpqHoGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11001)).setObjects(("CPQHOST-MIB", "cpqHoGenericData"))
if mibBuilder.loadTexts: cpqHoGenericTrap.setDescription('Generic trap.')
cpqHoAppErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11002)).setObjects(("CPQHOST-MIB", "cpqHoSwPerfAppErrorDesc"))
if mibBuilder.loadTexts: cpqHoAppErrorTrap.setDescription('An application has generated an exception. Specific error information is contained in the variable cpqHoSwPerfAppErrorDesc.')
cpqHo2GenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGenericData"))
if mibBuilder.loadTexts: cpqHo2GenericTrap.setDescription('Generic trap.')
cpqHo2AppErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSwPerfAppErrorDesc"))
if mibBuilder.loadTexts: cpqHo2AppErrorTrap.setDescription('An application has generated an exception. Specific error information is contained in the variable cpqHoSwPerfAppErrorDesc.')
cpqHo2NicStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
if mibBuilder.loadTexts: cpqHo2NicStatusOk.setDescription('This trap will be sent any time the status of a NIC changes to the OK condition.')
cpqHo2NicStatusFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
if mibBuilder.loadTexts: cpqHo2NicStatusFailed.setDescription('This trap will be sent any time the status of a NIC changes to the Failed condition.')
cpqHo2NicSwitchoverOccurred = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
if mibBuilder.loadTexts: cpqHo2NicSwitchoverOccurred.setDescription('This trap will be sent any time the configured redundant NIC becomes the active NIC.')
cpqHo2NicStatusOk2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
if mibBuilder.loadTexts: cpqHo2NicStatusOk2.setDescription('This trap will be sent any time the status of a NIC changes to the OK condition.')
cpqHo2NicStatusFailed2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
if mibBuilder.loadTexts: cpqHo2NicStatusFailed2.setDescription('This trap will be sent any time the status of a NIC changes to the Failed condition.')
cpqHo2NicSwitchoverOccurred2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
if mibBuilder.loadTexts: cpqHo2NicSwitchoverOccurred2.setDescription('This trap will be sent any time the configured redundant NIC becomes the active NIC.')
cpqHoProcessEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSwRunningTrapDesc"))
if mibBuilder.loadTexts: cpqHoProcessEventTrap.setDescription('A monitored process has either started or stopped running.')
cpqHoProcessCountWarning = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningCount"), ("CPQHOST-MIB", "cpqHoSWRunningCountMin"), ("CPQHOST-MIB", "cpqHoSWRunningCountMax"), ("CPQHOST-MIB", "cpqHoSWRunningEventTime"))
if mibBuilder.loadTexts: cpqHoProcessCountWarning.setDescription('A monitored process count has violated the thresholds set on cpqHoSWRunningCount')
cpqHoProcessCountNormal = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningCount"), ("CPQHOST-MIB", "cpqHoSWRunningCountMin"), ("CPQHOST-MIB", "cpqHoSWRunningCountMax"), ("CPQHOST-MIB", "cpqHoSWRunningEventTime"))
if mibBuilder.loadTexts: cpqHoProcessCountNormal.setDescription('A monitored process count has returned back to normal.')
cpqHoCriticalSoftwareUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCriticalSoftwareUpdateData"))
if mibBuilder.loadTexts: cpqHoCriticalSoftwareUpdateTrap.setDescription('This trap is a send to the user to notify him of a Critical Software Update.')
cpqHoCrashDumpNotEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"))
if mibBuilder.loadTexts: cpqHoCrashDumpNotEnabledTrap.setDescription('This trap is sent to the user to notify him that the Crash Dump is not enabled. This trap is not sent if cpqHoCrashDumpMonitoring is disabled.')
cpqHoBootPagingFileTooSmallTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"), ("CPQHOST-MIB", "cpqHoBootPagingFileSize"), ("CPQHOST-MIB", "cpqHoBootPagingFileMinimumSize"))
if mibBuilder.loadTexts: cpqHoBootPagingFileTooSmallTrap.setDescription('This trap is sent when the paging file size of the boot volume or the target volume of the memory dump file is too small to hold a crash dump. This trap is not sent if cpqHoCrashDumpMonitoring is disabled.')
cpqHoSWRunningStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningDesc"), ("CPQHOST-MIB", "cpqHoSwRunningTrapDesc"), ("CPQHOST-MIB", "cpqHoSWRunningVersion"), ("CPQHOST-MIB", "cpqHoSWRunningStatus"), ("CPQHOST-MIB", "cpqHoSWRunningConfigStatus"), ("CPQHOST-MIB", "cpqHoSWRunningIdentifier"), ("CPQHOST-MIB", "cpqHoSWRunningRedundancyMode"))
if mibBuilder.loadTexts: cpqHoSWRunningStatusChangeTrap.setDescription('This trap notifies the user that the running software has changed status, configuration status, or redundancy mode.')
cpqHo2PowerThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqPwrWarnType"), ("CPQHOST-MIB", "cpqPwrWarnThreshold"), ("CPQHOST-MIB", "cpqPwrWarnDuration"), ("CPQHOST-MIB", "cpqSerialNum"), ("CPQHOST-MIB", "cpqServerUUID"))
if mibBuilder.loadTexts: cpqHo2PowerThresholdTrap.setDescription('Power threshold exceeded.')
cpqHoBootPagingFileOrFreeSpaceTooSmallTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"), ("CPQHOST-MIB", "cpqHoBootPagingFileSize"), ("CPQHOST-MIB", "cpqHoBootPagingFileVolumeFreeSpace"), ("CPQHOST-MIB", "cpqHoBootPagingFileMinimumSize"))
if mibBuilder.loadTexts: cpqHoBootPagingFileOrFreeSpaceTooSmallTrap.setDescription('This trap is sent when the paging file size of the boot volume or the free space of memory dump target volume is too small to hold a crash dump.')
mibBuilder.exportSymbols("CPQHOST-MIB", cpqHoFileSysSpaceUsed=cpqHoFileSysSpaceUsed, cpqHoSwVerDescription=cpqHoSwVerDescription, cpqHo2NicSwitchoverOccurred=cpqHo2NicSwitchoverOccurred, cpqHoVersion=cpqHoVersion, cpqHoSwVerLocation=cpqHoSwVerLocation, cpqHoSwVerNextIndex=cpqHoSwVerNextIndex, cpqHoSWRunningEventTime=cpqHoSWRunningEventTime, cpqHoClientIpAddress=cpqHoClientIpAddress, cpqHoClientID=cpqHoClientID, cpqHoSWRunning=cpqHoSWRunning, cpqHoPagingMemorySize=cpqHoPagingMemorySize, cpqHoSWRunningRedundancyMode=cpqHoSWRunningRedundancyMode, cpqHoSwVerStatus=cpqHoSwVerStatus, cpqHoSystemRole=cpqHoSystemRole, cpqHoBootPagingFileMinimumSize=cpqHoBootPagingFileMinimumSize, cpqHoGUIDCanonical=cpqHoGUIDCanonical, cpqHoCpuUtilFiveMin=cpqHoCpuUtilFiveMin, cpqHoSWRunningState=cpqHoSWRunningState, cpqHoSWRunningCountMin=cpqHoSWRunningCountMin, cpqHoSWRunningDesc=cpqHoSWRunningDesc, cpqHoOsCommonPollFreq=cpqHoOsCommonPollFreq, cpqHoSWRunningEntry=cpqHoSWRunningEntry, cpqHoSWRunningVersion=cpqHoSWRunningVersion, cpqHoGenericData=cpqHoGenericData, cpqHoSWRunningConfigStatus=cpqHoSWRunningConfigStatus, cpqHoMibCondition=cpqHoMibCondition, cpqHoOsCommonModuleName=cpqHoOsCommonModuleName, cpqHoCrashDumpState=cpqHoCrashDumpState, cpqHoSWRunningDate=cpqHoSWRunningDate, cpqHoComponent=cpqHoComponent, cpqHoGUID=cpqHoGUID, cpqHoPhysicalMemoryFree=cpqHoPhysicalMemoryFree, cpqHoFwVerDisplayName=cpqHoFwVerDisplayName, cpqHoFileSysPercentSpaceUsed=cpqHoFileSysPercentSpaceUsed, cpqHoIfPhysMapSlot=cpqHoIfPhysMapSlot, cpqHoCpuUtilThirtyMin=cpqHoCpuUtilThirtyMin, cpqHoDesc=cpqHoDesc, cpqHoFwVerDeviceType=cpqHoFwVerDeviceType, cpqHoCrashDumpCondition=cpqHoCrashDumpCondition, cpqHoProcessEventTrap=cpqHoProcessEventTrap, cpqHoSWRunningTable=cpqHoSWRunningTable, cpqHoInterface=cpqHoInterface, cpqHoName=cpqHoName, cpqHoFwVerUpdateMethod=cpqHoFwVerUpdateMethod, cpqHoFwVerEntry=cpqHoFwVerEntry, cpqHoAppErrorTrap=cpqHoAppErrorTrap, cpqHoCpuUtilUnitIndex=cpqHoCpuUtilUnitIndex, cpqHoOsCommon=cpqHoOsCommon, cpqHoFwVerIndex=cpqHoFwVerIndex, cpqHoIfPhysMapEntry=cpqHoIfPhysMapEntry, cpqHoCrashDumpNotEnabledTrap=cpqHoCrashDumpNotEnabledTrap, cpqHoFwVerCategory=cpqHoFwVerCategory, cpqHoWebMgmtPort=cpqHoWebMgmtPort, cpqPwrWarnDuration=cpqPwrWarnDuration, cpqHoCpuUtilMin=cpqHoCpuUtilMin, cpqHoIfPhysMapIndex=cpqHoIfPhysMapIndex, compaq=compaq, cpqHoSWRunningCount=cpqHoSWRunningCount, cpqHoMaxLogicalCPUSupported=cpqHoMaxLogicalCPUSupported, cpqHo2NicStatusFailed2=cpqHo2NicStatusFailed2, cpqHoSwVerVersionBinary=cpqHoSwVerVersionBinary, cpqHoIfPhysMapPort=cpqHoIfPhysMapPort, cpqHoSwVerType=cpqHoSwVerType, cpqHoCpuUtilTable=cpqHoCpuUtilTable, cpqHoSwVerAgentsVer=cpqHoSwVerAgentsVer, cpqHo2GenericTrap=cpqHo2GenericTrap, cpqPwrWarnThreshold=cpqPwrWarnThreshold, cpqPwrWarnType=cpqPwrWarnType, cpqHoSWRunningStatus=cpqHoSWRunningStatus, cpqHoIfPhysMapMemBaseAddr=cpqHoIfPhysMapMemBaseAddr, cpqHoFileSysDesc=cpqHoFileSysDesc, cpqHoSwVer=cpqHoSwVer, cpqHoClientCommunity=cpqHoClientCommunity, cpqHoClientIndex=cpqHoClientIndex, cpqHoFwVer=cpqHoFwVer, cpqHoSWRunningStatusChangeTrap=cpqHoSWRunningStatusChangeTrap, cpqHoMibRev=cpqHoMibRev, cpqHoSwVerVersion=cpqHoSwVerVersion, cpqHoIfPhysMapOverallCondition=cpqHoIfPhysMapOverallCondition, cpqHoSwRunningTrapDesc=cpqHoSwRunningTrapDesc, cpqHoCpuUtilHwLocation=cpqHoCpuUtilHwLocation, cpqHoClientDelete=cpqHoClientDelete, cpqHoSwVerName=cpqHoSwVerName, cpqHoHWInfo=cpqHoHWInfo, cpqHoOsCommonModulePurpose=cpqHoOsCommonModulePurpose, cpqPwrThreshold=cpqPwrThreshold, cpqHoFileSysAllocUnitsUsed=cpqHoFileSysAllocUnitsUsed, cpqHoOsCommonModuleIndex=cpqHoOsCommonModuleIndex, cpqHoIfPhysMapIoBaseAddr=cpqHoIfPhysMapIoBaseAddr, cpqHoInfo=cpqHoInfo, cpqHoFileSysCondition=cpqHoFileSysCondition, cpqHoCrashDumpMonitoring=cpqHoCrashDumpMonitoring, cpqHoSWRunningIndex=cpqHoSWRunningIndex, cpqHoFileSysAllocUnitsTotal=cpqHoFileSysAllocUnitsTotal, cpqHoFileSysSpaceTotal=cpqHoFileSysSpaceTotal, cpqHoBootPagingFileSize=cpqHoBootPagingFileSize, cpqHoIfPhysMap=cpqHoIfPhysMap, cpqHoPagingMemoryFree=cpqHoPagingMemoryFree, cpqHoMibRevMinor=cpqHoMibRevMinor, cpqHo2AppErrorTrap=cpqHo2AppErrorTrap, cpqHoCriticalSoftwareUpdateTrap=cpqHoCriticalSoftwareUpdateTrap, cpqHoProcessCountNormal=cpqHoProcessCountNormal, cpqHoSystemRoleDetail=cpqHoSystemRoleDetail, cpqHoSwVerTable=cpqHoSwVerTable, cpqHoHWInfoPlatform=cpqHoHWInfoPlatform, cpqHoFwVerTable=cpqHoFwVerTable, cpqHoFileSysTable=cpqHoFileSysTable, cpqHoClientLastModified=cpqHoClientLastModified, cpqHoSwPerf=cpqHoSwPerf, cpqHoSwVerIndex=cpqHoSwVerIndex, cpqHoTelnet=cpqHoTelnet, cpqSerialNum=cpqSerialNum, cpqHo2NicStatusOk2=cpqHo2NicStatusOk2, cpqHoFwVerLocation=cpqHoFwVerLocation, cpqHoCriticalSoftwareUpdateData=cpqHoCriticalSoftwareUpdateData, cpqHoClientEntry=cpqHoClientEntry, cpqHoConfigChangedDate=cpqHoConfigChangedDate, cpqHoOsCommonModuleDate=cpqHoOsCommonModuleDate, cpqHoCodeServer=cpqHoCodeServer, cpqHoSWRunningMonitor=cpqHoSWRunningMonitor, cpqHoBootPagingFileTooSmallTrap=cpqHoBootPagingFileTooSmallTrap, cpqHoTrapInfo=cpqHoTrapInfo, cpqHoSWRunningCountMax=cpqHoSWRunningCountMax, cpqHoIfPhysMapCondition=cpqHoIfPhysMapCondition, cpqHoIfPhysMapTable=cpqHoIfPhysMapTable, cpqHoMibStatusArray=cpqHoMibStatusArray, cpqHoClients=cpqHoClients, cpqHoGenericTrap=cpqHoGenericTrap, cpqHoFileSys=cpqHoFileSys, cpqHoSWRunningName=cpqHoSWRunningName, cpqHoOsType=cpqHoOsType, cpqHoIfPhysMapIrq=cpqHoIfPhysMapIrq, cpqHostOs=cpqHostOs, cpqHoSWRunningIdentifier=cpqHoSWRunningIdentifier, cpqHoClientTable=cpqHoClientTable, cpqServerUUID=cpqServerUUID, cpqHoMemory=cpqHoMemory, cpqHoSwVerDate=cpqHoSwVerDate, cpqHoMibRevMajor=cpqHoMibRevMajor, cpqHoProcessCountWarning=cpqHoProcessCountWarning, cpqHoGeneric=cpqHoGeneric, cpqHoOsCommonModuleVersion=cpqHoOsCommonModuleVersion, cpqHoSwPerfAppErrorDesc=cpqHoSwPerfAppErrorDesc, cpqHoBootPagingFileVolumeFreeSpace=cpqHoBootPagingFileVolumeFreeSpace, cpqHoBootPagingFileOrFreeSpaceTooSmallTrap=cpqHoBootPagingFileOrFreeSpaceTooSmallTrap, cpqHoUtil=cpqHoUtil, cpqHoFileSysIndex=cpqHoFileSysIndex, cpqHoSystemStatus=cpqHoSystemStatus, cpqHo2NicSwitchoverOccurred2=cpqHo2NicSwitchoverOccurred2, cpqHoSwVerEntry=cpqHoSwVerEntry, cpqHoCpuUtilHour=cpqHoCpuUtilHour, cpqHoFileSysEntry=cpqHoFileSysEntry, cpqHoFwVerKeyString=cpqHoFwVerKeyString, cpqHoClientName=cpqHoClientName, cpqHoCpuUtilEntry=cpqHoCpuUtilEntry, cpqHoFwVerXmlString=cpqHoFwVerXmlString, cpqHoIfPhysMapDuplexState=cpqHoIfPhysMapDuplexState, cpqHo2NicStatusFailed=cpqHo2NicStatusFailed, cpqHoTrapFlags=cpqHoTrapFlags, cpqHo2NicStatusOk=cpqHo2NicStatusOk, cpqHoClientIpxAddress=cpqHoClientIpxAddress, cpqHoFwVerVersion=cpqHoFwVerVersion, cpqHo2PowerThresholdTrap=cpqHo2PowerThresholdTrap, cpqHoOsCommonModuleTable=cpqHoOsCommonModuleTable, cpqHoOsCommonModuleEntry=cpqHoOsCommonModuleEntry, cpqHoIfPhysMapDma=cpqHoIfPhysMapDma, cpqHoPhysicalMemorySize=cpqHoPhysicalMemorySize, cpqHoFileSysStatus=cpqHoFileSysStatus)
