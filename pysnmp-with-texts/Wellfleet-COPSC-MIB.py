#
# PySNMP MIB module Wellfleet-COPSC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-COPSC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, NotificationType, Gauge32, Unsigned32, IpAddress, TimeTicks, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "NotificationType", "Gauge32", "Unsigned32", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfCopsCGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfCopsCGroup")
wfCopsCBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1))
wfCopsCDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCDelete.setDescription('Create/Delete parameter')
wfCopsCDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCDisable.setDescription('Enable/Disable parameter')
wfCopsCState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("localrecovery", 2), ("init", 3), ("down", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCopsCState.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCState.setDescription('State parameter')
wfCopsCCurrentSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCopsCCurrentSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCCurrentSlotMask.setDescription('Slot mask indicating which slots COPS Client is currently up and running. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN.')
wfCopsCSoloSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCopsCSoloSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCSoloSlot.setDescription('The current soloist slot.')
wfCopsCSoloSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 6), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCSoloSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCSoloSlotMask.setDescription('Slot mask for which slots soloist is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN.')
wfCopsCDebugLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCDebugLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCDebugLogFilter.setDescription('Turn logging ON or OFF for COPS Client debugging messages. The bit position is used to represent a COPS Client module: CopsC_LOG_COPS_PROCESSING 0x0001 - COPS processing.')
wfCopsCIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCIPAddr.setDescription("Client's IP Address.")
wfCopsCID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCID.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCID.setDescription("COPS Client's ID.")
wfCopsSvrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2), )
if mibBuilder.loadTexts: wfCopsSvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrTable.setDescription('This tabulates the COPS Servers to contact.')
wfCopsSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1), ).setIndexNames((0, "Wellfleet-COPSC-MIB", "wfCopsSvrIPAddr"))
if mibBuilder.loadTexts: wfCopsSvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrEntry.setDescription('Entry summary.')
wfCopsSvrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrDelete.setDescription('Create/Delete parameter')
wfCopsSvrDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrDisable.setDescription('Enable/Disable parameter')
wfCopsSvrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCopsSvrIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrIPAddr.setDescription("Server's IP Address.")
wfCopsSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrPriority.setDescription('Priority for being the active server. Higher value wins. Server IP Address will be used as tie-breaker.')
wfCopsSvrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("serverready", 1), ("connnegotiation", 2), ("connrecovery", 3), ("servercontacted", 4), ("noconn", 5))).clone('noconn')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfCopsSvrConnState.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrConnState.setDescription('State of server connection.')
wfCopsSvrConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrConnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrConnTimer.setDescription('Time period between connection retries, in seconds.')
wfCopsSvrConnRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrConnRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrConnRetryCount.setDescription('Connection attempt retry before giving up on server.')
wfCopsSvrKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrKeepAliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrKeepAliveTimer.setDescription('Time period between sending of Keep Alives, in seconds.')
wfCopsSvrReportTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(360)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrReportTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrReportTimer.setDescription('Time period between sending of Reports, in seconds.')
wfCopsSvrTCPKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveInterval.setDescription('KeepAlive packets will be sent into inactive, established TCP connections after this time interval (in seconds). A time of zero disables this keepalive feature.')
wfCopsSvrTCPKeepAliveRetryTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveRetryTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveRetryTimeOut.setDescription('TCP Keep Alive retransmit timeout period, in seconds. This is the interval at which unacknowledged Keep Alive messages will be retransmitted. If the Interval Timer is set to zero, this timer is ignored. If the Interval Timer is non-zero and this timer IS zero, no Keep Alives are sent and the session is terminated upon expiration of the Interval Timer.')
wfCopsSvrTCPKeepAliveMaxRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveMaxRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrTCPKeepAliveMaxRetryCount.setDescription('Number of unacknowledged Keep Alive messages retransmitted before the TCP session is terminated. If this count is set to zero, only one Keep Alive message will be sent.')
wfCopsSvrRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 25, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3288)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsSvrRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsSvrRemotePort.setDescription("Server's Remote TCP Port.")
mibBuilder.exportSymbols("Wellfleet-COPSC-MIB", wfCopsSvrConnState=wfCopsSvrConnState, wfCopsSvrTable=wfCopsSvrTable, wfCopsSvrEntry=wfCopsSvrEntry, wfCopsSvrConnRetryCount=wfCopsSvrConnRetryCount, wfCopsCSoloSlot=wfCopsCSoloSlot, wfCopsCDisable=wfCopsCDisable, wfCopsCState=wfCopsCState, wfCopsSvrKeepAliveTimer=wfCopsSvrKeepAliveTimer, wfCopsSvrTCPKeepAliveRetryTimeOut=wfCopsSvrTCPKeepAliveRetryTimeOut, wfCopsCID=wfCopsCID, wfCopsSvrReportTimer=wfCopsSvrReportTimer, wfCopsCDelete=wfCopsCDelete, wfCopsSvrIPAddr=wfCopsSvrIPAddr, wfCopsSvrTCPKeepAliveMaxRetryCount=wfCopsSvrTCPKeepAliveMaxRetryCount, wfCopsSvrDisable=wfCopsSvrDisable, wfCopsSvrConnTimer=wfCopsSvrConnTimer, wfCopsSvrTCPKeepAliveInterval=wfCopsSvrTCPKeepAliveInterval, wfCopsSvrPriority=wfCopsSvrPriority, wfCopsSvrDelete=wfCopsSvrDelete, wfCopsCCurrentSlotMask=wfCopsCCurrentSlotMask, wfCopsCDebugLogFilter=wfCopsCDebugLogFilter, wfCopsCBase=wfCopsCBase, wfCopsSvrRemotePort=wfCopsSvrRemotePort, wfCopsCSoloSlotMask=wfCopsCSoloSlotMask, wfCopsCIPAddr=wfCopsCIPAddr)
