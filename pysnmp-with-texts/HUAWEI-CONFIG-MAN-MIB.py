#
# PySNMP MIB module HUAWEI-CONFIG-MAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-CONFIG-MAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
huaweiUtility, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiUtility")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Unsigned32, iso, ObjectIdentity, TimeTicks, Integer32, Counter32, ModuleIdentity, NotificationType, Bits, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "TimeTicks", "Integer32", "Counter32", "ModuleIdentity", "NotificationType", "Bits", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier")
DateAndTime, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hwConfig = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 10))
hwConfig.setRevisions(('2015-04-27 14:02', '2015-04-13 11:19', '2015-02-02 23:00', '2014-09-18 22:00', '2014-09-16 10:20', '2014-08-21 16:02', '2014-05-29 22:30', '2014-05-26 22:30', '2013-09-03 22:30', '2013-08-30 22:30', '2006-08-22 22:30', '2006-08-22 22:30', '2006-08-22 22:30', '2006-08-22 22:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwConfig.setRevisionsDescriptions(('add trap node hwConfigInconsistent and hwConfigConsistent.', 'modified trap node hwCfgRestoreFail, and MIB node hwCfgRestoreErrCode for hwCfgRestoreFail.', 'Add new trap node hwCfgRestoreFail, and new MIB node hwCfgRestoreErrCode for hwCfgRestoreFail.', 'Modify the length and description of hwCfgBackupPassword.', 'Modify the description of hwCfgOperateFileName.', 'Modify the length and description of hwCfgBackupPassword.', 'Modify the length range of hwCfgLogTerminalUser.', 'Modify the length range of hwCfgLogTerminalUser.', 'Add new mib node hwCfgOperateVpnInstance of hwCfgOperateEntry.', 'Add new mib node hwCfgOperateServerAddressType and hwCfgOperateServerAddressNet of hwCfgOperateEntry.', 'Add new mib node hwCfgBackupVpnInstance of table HwCfgBackup2ServerEntry.', 'Modify the description of hwCfgBackupProtocol.', 'Modify the description of hwCfgBackupPassword And hwCfgOperateUserPassword.', 'The initial revision of this MIB module .',))
if mibBuilder.loadTexts: hwConfig.setLastUpdated('201504271402Z')
if mibBuilder.loadTexts: hwConfig.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwConfig.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwConfig.setDescription('The HUAWEI-CONFIG-MAN-MIB contains objects to manage the system configuration. It defines the model used to represent configuration data that exists elsewhere in the system and in peripheral devices. The MIB is proper for system configuration. NMS can query configuration change log information and operate configuration. There are no constraints on this MIB.')
class ConfigOperationType(TextualConvention, Integer32):
    description = 'Specify operation types on configuration. Currently, following types of operation are provided: running2Startup(1):refresh the saved configuration file used currently with current configuration running in the system. The operation is the same as that of [save] command from command line.(running->startup) startup2Running(2):append the configration of the saved configuration file used currently to current configuration running in the system.(running<-startup) running2Net(3):Send the current configuration running in the system to the network through a certain protocol.(running->networkFile) net2Running(4):append the configration of a remote file from network to current configuration running in the system through a certain protocol.(running<-networkFile) net2Startup(5):Download a remote file to the local system to be the saved configuration file used currently through a certain protocol.(startup<-networkFile) startup2Net(6):Send the saved configuration file used currently to the network through a certain protocol. (startup ->networkFile)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("running2Startup", 1), ("startup2Running", 2), ("running2Net", 3), ("net2Running", 4), ("net2Startup", 5), ("startup2Net", 6))

hwConfigManObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1))
hwCfgLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1))
hwCfgRunModifiedLast = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgRunModifiedLast.setStatus('current')
if mibBuilder.loadTexts: hwCfgRunModifiedLast.setDescription('The object records the value of sysUpTime when the current configuration running in the system was last modified.')
hwCfgRunSavedLast = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgRunSavedLast.setStatus('current')
if mibBuilder.loadTexts: hwCfgRunSavedLast.setDescription('The object records the value of sysUpTime when the current configuration running in the system was last saved. If the value of the object is smaller than hwCfgRunModifiedLast, the current configuration has been modified but not saved.')
hwCfgStartModifiedLast = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgStartModifiedLast.setStatus('current')
if mibBuilder.loadTexts: hwCfgStartModifiedLast.setDescription('The object records the value of sysUpTime when the saved configuration used currently was last modified. It may have been changed by a save of the current configuration running in the system or other methods such as copy.')
hwCfgLogLimitedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogLimitedEntries.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogLimitedEntries.setDescription('The object shows the maximum number of rows in hwCfgLogTable. The value supported by the system is 10. ')
hwCfgLogDeletedEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogDeletedEntries.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogDeletedEntries.setDescription('The total number of rows deleted from hwCfgLogTable. ')
hwCfgLogWantBackup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgLogWantBackup.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogWantBackup.setDescription('Decides whether or not to backup the configuration log information. If the value is true, the data of configuration log on the master will be sent to slave. Otherwise the data of log will be lost when master switches to slave. Default value is true.')
hwCfgLogTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7), )
if mibBuilder.loadTexts: hwCfgLogTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTable.setDescription('A table of configuration log on this device. ')
hwCfgLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgLogIndex"))
if mibBuilder.loadTexts: hwCfgLogEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogEntry.setDescription('Information about a configuration log in this system.')
hwCfgLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwCfgLogIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogIndex.setDescription(' The index of hwCfgLogTable, which is a incremental integer. The maximum value of the node is 2147483647.The table should wrap the value to 1 and flush all the existing entries when the maximum value is reached.')
hwCfgLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTime.setDescription('Specifies the sysUpTime when the configuration log was generated.')
hwCfgLogSrcCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cmdLine", 1), ("snmp", 2), ("netconf", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogSrcCmd.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogSrcCmd.setDescription('Specifies the source command resulting in the log. Currently we provide the types of source: 1.cmdLine(1):configuration log instigated by command line. 2.snmp(2):configuration log instigated by snmp. 3.other(3):configuration log instigated by other source unknown.')
hwCfgLogSrcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("erase", 1), ("runningData", 2), ("commandSource", 3), ("startupData", 4), ("local", 5), ("netFtp", 6), ("hotPlugging", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogSrcData.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogSrcData.setDescription('The configuration data source for the event. erase erasing destination running operational data alive commandSource the command source itself startup what the system will use next reboot local local NVRAM or flash netFtp FTP network transfer hotPlugging board is inserted or pulled out on line ')
hwCfgLogDesData = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("runningData", 2), ("commandSource", 3), ("startupData", 4), ("local", 5), ("netkFtp", 6), ("hotPlugging", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogDesData.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogDesData.setDescription('The configuration data destination for the event. unknown unknown running operational data alive commandSource the command source itself startup what the system will use next reboot local local NVRAM or flash netFtp FTP network transfer hotPlugging board is inserted or pulled out on line')
hwCfgLogTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("unknown", 2), ("console", 3), ("terminal", 4), ("virtual", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogTerminalType.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTerminalType.setDescription("Specifies the terminal type. If hwCfgLogSrcData is not 'cmdLine', the value of the object is 'notApplicable'. The value list: notApplicable(1): no meaning at this time. unknown(2): unknown terminal type. console(3): terminal(4) virtual(5) auxiliary(6)")
hwCfgLogTerminalUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogTerminalUser.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTerminalUser.setDescription(" The name of a logging user which is available when hwCfgLogSrcCmd is 'cmdLine'. When hwCfgLogTerminalType is 'virtual' and user login in authentication, the object will be the name of the user. Otherwise, it is a zero length string.")
hwCfgLogTerminalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogTerminalNum.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTerminalNum.setDescription("Specifies the terminal number. If hwCfgLogSrcCmd variable is not 'cmdLine'(such as 'snmp'or 'other'), the value of the object is '-1'. If hwCfgLogSrcCmd variable is 'cmdLine', the value '-1' means that it is not the active terminal user. ")
hwCfgLogTerminalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogTerminalLocation.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogTerminalLocation.setDescription("The available location of the terminal when hwCfgLogSrcCmd is 'cmdLine'. Otherwise, it is a zero length string. ")
hwCfgLogCmdSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogCmdSrcAddress.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogCmdSrcAddress.setDescription(" The address from which a request comes when the value of hwCfgLogSrcCmd is 'snmp(2)'. The ip address of the remote system connected when the value of hwCfgLogTerminalType is 'virtual'. Otherwise, the value of the object is 0.0.0.0. ")
hwCfgLogVirHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogVirHost.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogVirHost.setDescription("The available host name of the remote system connected if hwCfgLogTerminalType has the value of 'virtual'. Otherwise, the value of the object is a zero length string. ")
hwCfgLogUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogUserName.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogUserName.setDescription("The user name used when hwCfgLogSrcData or hwCfgLogDesData has the value of 'netFtp'. Otherwise, the value of the object is a zero length string. ")
hwCfgLogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogServerAddress.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogServerAddress.setDescription("The remote server address when hwCfgLogSrcData or hwCfgLogDesData has the value of 'netFtp'. Otherwise, the value of the object is 0.0.0.0. ")
hwCfgLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogFile.setStatus('current')
if mibBuilder.loadTexts: hwCfgLogFile.setDescription("The remote file name when hwCfgLogSrcData or hwCfgLogDesData has the value of 'netFtp'. Otherwise, the value of the object is a zero length string. ")
hwCfgLogConfigChangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogConfigChangeId.setStatus('obsolete')
if mibBuilder.loadTexts: hwCfgLogConfigChangeId.setDescription('This is the sequence ID of configuration. When configuration is changed, ID is added. ')
hwCfgLogCfgBaselineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 1, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgLogCfgBaselineTime.setStatus('obsolete')
if mibBuilder.loadTexts: hwCfgLogCfgBaselineTime.setDescription('Specifies the time of system confiuration was baseline. ')
hwCfgOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2))
hwCfgOperateGlobalEntryLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateGlobalEntryLimit.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateGlobalEntryLimit.setDescription('The maximum number of copy entries that may be held in hwCfgOperateTable. A particular setting does not guarantee that much data can be held. ')
hwCfgOperateEntryAgeOutTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgOperateEntryAgeOutTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateEntryAgeOutTime.setDescription('This value indicates the primary reference time of the hwCfgOperateEntry saved in the hwCfgOperateTable.This value is not valid if there is extra space in the hwCfgOperateTable, that is, the hwCfgOperateEntry is not deleted periodically. If there is no space in the hwCfgOperateTable to save a new hwCfgOperateEntry, the expired hwCfgOperateEntry that is unactivated or the hwCfgOperateEntry that is processed may be deleted. Default value is 5.')
hwCfgOperateResultGlobalEntryLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgOperateResultGlobalEntryLimit.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultGlobalEntryLimit.setDescription('The maximum number of copy entries that may be held in hwCfgOperateResultTable. A particular setting does not guarantee that much data can be held. Default value is 5. ')
hwCfgOperateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4), )
if mibBuilder.loadTexts: hwCfgOperateTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateTable.setDescription('A table of config-operation requests. ')
hwCfgOperateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateIndex"))
if mibBuilder.loadTexts: hwCfgOperateEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateEntry.setDescription('An operate request entry.')
hwCfgOperateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwCfgOperateIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateIndex.setDescription('The unique index value of a row in this table.')
hwCfgOperateType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 2), ConfigOperationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateType.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateType.setDescription('Specifies the type of an operation on configuration. For detailed information, please see the ConfigOperationType definition. ')
hwCfgOperateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2), ("sftp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateProtocol.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateProtocol.setDescription('If the value of hwCfgOperateType is running2Net,net2Running,net2Startup or startup2net, this object specifies the protocol which is used for file transfer . The default protocol is ftp if no protocol is specified. And for other value of hwCfgOperateType , this object may be ignored by the implementation. When hwCfgOperateProtocol is specified as SFTP, only password authentication-type is valid. ')
hwCfgOperateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateFileName.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateFileName.setDescription('When the object of hwCfgOperateType has the value of net2Startup, net2Running or running2Net, the value must be specified. The file name may include the path if applicable. If the value of hwCfgOperateType is net2Startup or net2Running, this node specifies the source file name of transfers. If the value of hwCfgOperateType is running2Net, this node specifies the destination file name of transfers. If the value of hwCfgOperateType is running2Startup, this node specifies the saved file name of current running configuration. When hwCfgOperateType has the value of startup2Net or startup2Running, the object may not be created instead of using the file name of startup configuration file. ')
hwCfgOperateServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateServerAddress.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateServerAddress.setDescription('When the operation type is running2Net,net2Running,net2Startup or startup2net , the ip address of the FTP/TFTP/SFTP server from/to which to download/upload must be specified. Values of 0.0.0.0 or FF.FF.FF.FF are not permitted.')
hwCfgOperateUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateUserName.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateUserName.setDescription("When the operation type is running2Net,net2Running,net2Startup or startup2net , the user name for the FTP/SFTP server from/to which to download/upload should be specified. The object must be created if hwCfgOperateProtocol has the value of 'ftp'. ")
hwCfgOperateUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateUserPassword.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateUserPassword.setDescription("When the operation type is running2Net,net2Running,net2Startup or startup2net , the user password for the FTP/SFTP server from/to which to download/upload should be specified. The object must be created if hwCfgOperateProtocol has the value of 'ftp'. When get the value of the field, the device will return a zero-length string. When set the field, its value cannot be a string that contains no character.")
hwCfgOperateEndNotificationSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateEndNotificationSwitch.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateEndNotificationSwitch.setDescription('Specifies whether or not a notification should be issued on the completion of the operation.')
hwCfgOperateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateRowStatus.setDescription('The status of this table entry. When the status is active : (1) In the situation that the specified transfer operation by ftp/tftp is in progress, the transfer operation will be aborted if the status is set to notInService. (2) In any other situations, the specified operation will not be aborted even if the status is set to notInService. ')
hwCfgOperateServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateServerPort.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateServerPort.setDescription('This object specifies the SFTP/FTP server port that is used for file transfer only if the value of hwCfgOperateProtocol is sftp/ftp. The default SFTP server port is 22 if no port is specified. The default FTP server port is 21 if no port is specified. If the value of hwCfgOperateProtocol is not sftp/ftp, this object is ignored by the implementation. ')
hwCfgOperateSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateSourceAddress.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateSourceAddress.setDescription('The source IP address. When the operation type is running2Net, net2Running, net2Startup or startup2net, the source IP address of the client may be specified or not. Default is 0.0.0.0 . If the source type is set to both of IP address and interface, the former has the priority.')
hwCfgOperateSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateSourceInterface.setDescription('The name of the interface.When the operation type is running2Net, net2Running,net2Startup or startup2net, the source interface of the FTP/TFTP client may be specified or not. If the source type is set to both of IP address and interface,the former has the priority.')
hwCfgOperateOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("continueOnError", 1), ("stopOnError", 2), ("rollbackOnError", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateOnError.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateOnError.setDescription('This object specifies the action when a configuration command fails to be executed. continueOnError: skips the failed configuration command and continues to run other configuration commands. stopOnError: stops running the failed configuration command and does not run other configuration commands. rollbackOnError: rolls back the configuration to that before the configuration file is executed.')
hwCfgOperateServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 17), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateServerAddressType.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateServerAddressType.setDescription('The ip address type of the FTP/TFTP/SFTP server from/to which to download/upload must be specified. 1 is used for ipv4, 2 is used for ipv6.')
hwCfgOperateServerAddressNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 18), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateServerAddressNet.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateServerAddressNet.setDescription('Address or host name of the FTP/TFTP/SFTP server from/to which to download/upload must be specified. ')
hwCfgOperateVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgOperateVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateVpnInstance.setDescription('The VPN instance name that through which to transfer the file.')
hwCfgOperateResultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5), )
if mibBuilder.loadTexts: hwCfgOperateResultTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultTable.setDescription('A table of config-operation requests result.')
hwCfgOperateResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateResultIndex"))
if mibBuilder.loadTexts: hwCfgOperateResultEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultEntry.setDescription('The result entries of configuration operation requests.')
hwCfgOperateResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwCfgOperateResultIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultIndex.setDescription(' The index of Table, which is an incremental integer. The maximum value of the node is 2147483647.The agent should wrap the value to 1 and flush all the existing entries when the maximum value is reached.')
hwCfgOperateResultOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateResultOptIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultOptIndex.setDescription('The operation index in the hwCfgOperateTable.')
hwCfgOperateResultOpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 3), ConfigOperationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateResultOpType.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateResultOpType.setDescription('The operation type in the hwCfgOperateTable.')
hwCfgOperateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("opInProgress", 1), ("opSuccess", 2), ("opInvalidOperation", 3), ("opInvalidProtocol", 4), ("opInvalidSourceName", 5), ("opInvalidDestName", 6), ("opInvalidServerAddress", 7), ("opDeviceBusy", 8), ("opDeviceOpenError", 9), ("opDeviceError", 10), ("opDeviceNotProgrammable", 11), ("opDeviceFull", 12), ("opFileOpenError", 13), ("opFileTransferError", 14), ("opFileChecksumError", 15), ("opNoMemory", 16), ("opAuthFail", 17), ("opTimeOut", 18), ("opUnknownFailure", 19), ("opAbort", 20), ("opInvalidSourceAddress", 21), ("opInvalidSourceInterface", 22), ("opCmdExecuteFail", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateState.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateState.setDescription('The status of the specified operation. opInProgress : specified operation is active opOperationSuccess : specified operation is supported and completed successfully opInvalidOperation : command invalid or command/protocol/device combination unsupported opInvalidProtocol : invalid protocol specified opInvalidSourceName : invalid source file name specified. opInvalidDestName : invalid target name specified. opInvalidServerAddress : invalid server address specified opDeviceBusy : specified device is in use and locked by another process opDeviceOpenError : invalid device name opDeviceError : device read, write or erase error opDeviceNotProgrammable : device is read-only but a write or erase operation was specified opDeviceFull : device is filled to capacity opFileOpenError : invalid file name; file not found in partition opFileTransferError : file transfer was unsuccessfull; network failure opFileChecksumError : file checksum in Flash failed opNoMemory : system running low on memory opAuthFail: invalid user name or password opTimeOut : file transfer was timeout opUnknownFailure : failure unknown opAbort : transfer operation has been aborted opInvalidSourceAdress : invalid source address specified. opInvalidSourceInterface : invalid source interface specified. opCmdExecuteFail : execute command return error. ')
hwCfgOperateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateTime.setDescription('Records the time taken for the operation. This object will be like a stopwatch, starting when the operation starts, and stopping when the operation completes.')
hwCfgOperateEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateEndTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateEndTime.setDescription('The value of sysUpTime when the configuration operation is finished.')
hwCfgOperateTransferProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateTransferProgress.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateTransferProgress.setDescription('This object indicates progress of file transfer in the hwCfgOperateTable. When hwCfgOperateProtocol is specified as 2(tftp) or 3(sftp), and hwCfgOperateType is specified as net2Running or net2Startup, this object will be set as 65535, which indicates the progress can not be calculated. ')
hwCfgOperateErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateErrorReason.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateErrorReason.setDescription('The failure reason of configuration operation.')
hwCfgModuleChangeTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 6), )
if mibBuilder.loadTexts: hwCfgModuleChangeTimeTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgModuleChangeTimeTable.setDescription('Table on changes of configuration.')
hwCfgModuleChangeTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 6, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgModuleId"))
if mibBuilder.loadTexts: hwCfgModuleChangeTimeEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgModuleChangeTimeEntry.setDescription('Time entity on changes of the configuration module.')
hwCfgModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwCfgModuleId.setStatus('current')
if mibBuilder.loadTexts: hwCfgModuleId.setDescription('Module index. It is an integer without enumeration. This is because the enumeration may expose the classification methods of modules. In addition, this field is uncertain in the beginning stage and once the value is determined, it cannot be modified.')
hwCfgModuleChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 6, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgModuleChangeTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgModuleChangeTime.setDescription('Time on changes of the module.')
hwCfgOperateCompareConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("initial", 0), ("same", 1), ("different", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgOperateCompareConfig.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateCompareConfig.setDescription('compare configuration of the files')
hwCfgRestoreErrCode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("warnning", 1), ("fileOpenFail", 2), ("fileNotExist", 3), ("fileVerifyFail", 4), ("other", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgRestoreErrCode.setStatus('current')
if mibBuilder.loadTexts: hwCfgRestoreErrCode.setDescription('ErrorCode: cause of an alarm.(1:Failed to restore some configurations. 2:Failed to restore all configurations because of a failure to open the configuration file. 3:Failed to restore all configurations because of the nonexistent configuration file. 4:Failed to restore all configurations because of the nonexistent configuration file. 5: Failed to restore all configurations because of other reasons.)')
hwCfgSave = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3))
hwCfgSaveAutoInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 43200), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgSaveAutoInterval.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveAutoInterval.setDescription('The object records the interval minute of saving configuration automatically. the function of saving configuration automatically is disable when the interval is zero, else it is enable(the default is 30 minutes). ')
hwCfgSaveAutoTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgSaveAutoTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveAutoTime.setDescription('The object records the latest date and time when the current configurations were saved automatically in the system.')
hwCfgSaveManualTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgSaveManualTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveManualTime.setDescription('The object records the latest date and time when the current configurations were saved manually in the system.')
hwCfgSaveAutoCpuLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgSaveAutoCpuLimit.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveAutoCpuLimit.setDescription('This object indicates the upper limit of the CPU usage when configurations are automatically saved.If the function of saving configuration automatically is not enabled, the value is insignificant. Default value is 50.')
hwCfgSaveAutoNoCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgSaveAutoNoCfgInterval.setStatus('obsolete')
if mibBuilder.loadTexts: hwCfgSaveAutoNoCfgInterval.setDescription('This object indicates the interval from the time configurations are automatically saved to now.If the function of saving configuration automatically is not enabled, the value is insignificant. Default value is 30.')
hwCfgSaveAutoDelay = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgSaveAutoDelay.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveAutoDelay.setDescription('This object indicates the delay minute after some configurations change happens then configurations are automatically saved.If the function of saving configuration automatically is not enabled, the value is insignificant. Default value is 5.')
hwCfgBackup2ServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7), )
if mibBuilder.loadTexts: hwCfgBackup2ServerTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackup2ServerTable.setDescription('A table of config-operation requests. ')
hwCfgBackup2ServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgBackupIndex"))
if mibBuilder.loadTexts: hwCfgBackup2ServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackup2ServerEntry.setDescription('An operate request entry.')
hwCfgBackupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfgBackupIndex.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupIndex.setDescription('The unique index value of a row in this table.')
hwCfgBackupServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupServerIp.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupServerIp.setDescription('The ip address of the FTP/TFTP/SFTP server to which to the device backup configuration automatically. Values of 0.0.0.0 or FF.FF.FF.FF are not permitted.')
hwCfgBackupProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2), ("sftp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupProtocol.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupProtocol.setDescription('The protocol used to backup configuration to server automatically.')
hwCfgBackupUser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupUser.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupUser.setDescription('The length of the user name should range from 1 to 64.')
hwCfgBackupPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 392))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupPassword.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupPassword.setDescription('The password can be plain text or encripted text. If the password is plain text, its length should range from 0 to 255. If the password is in cipher text, its length is 24 or from 32 to 392. When get the value of the field, the device will return a zero-length string. When set the field, its value cannot be a string that contains no character.')
hwCfgBackupServerPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupServerPath.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupServerPath.setDescription('The length of the path in the backup server should range from 1 to 64.')
hwCfgBackupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupRowStatus.setDescription('The status of this table entry.')
hwCfgBackupResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgBackupResult.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupResult.setDescription('This object is only for trap information, and does not support get and get-next operation.')
hwCfgBackupVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 3, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwCfgBackupVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwCfgBackupVpnInstance.setDescription('The VPN instance name that through which to transfer the file.')
hwCfgLock = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4))
hwCfgOperateLockConfigDataStore = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCfgOperateLockConfigDataStore.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLockConfigDataStore.setDescription('Config data unit lock/unlock controller,if set active(2),the lock will be locked if no one locked it before. if set inactive(1),the lock will be unlocked if the currunt user locked it before. ')
hwCfgOperateLevelUsersTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2), )
if mibBuilder.loadTexts: hwCfgOperateLevelUsersTable.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersTable.setDescription('Table on users of configuration lock or level.')
hwCfgOperateLevelUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1), ).setIndexNames((0, "HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersSessionID"))
if mibBuilder.loadTexts: hwCfgOperateLevelUsersEntry.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersEntry.setDescription('Users entity on lock or level of the configuration module.')
hwCfgOperateLevelUsersSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersSessionID.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersSessionID.setDescription('SessionID of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersSessionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersSessionDesc.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersSessionDesc.setDescription('Description of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersName.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersName.setDescription('UserName of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersLockedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersLockedTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersLockedTime.setDescription('LoginTime of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersIPAddr.setDescription('IP Address of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersLastCfgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersLastCfgTime.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersLastCfgTime.setDescription('The last configurate Time of users who have the configuration level or have locked the configuration.')
hwCfgOperateLevelUsersTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 10, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCfgOperateLevelUsersTimeout.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateLevelUsersTimeout.setDescription('Unlock without configuration seconds, 1-7200, the default is 30')
hwConfigManNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2))
hwCfgManEventlog = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 1)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogSrcCmd"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogSrcData"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogDesData"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTerminalUser"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogCmdSrcAddress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogConfigChangeId"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogCfgBaselineTime"))
if mibBuilder.loadTexts: hwCfgManEventlog.setStatus('current')
if mibBuilder.loadTexts: hwCfgManEventlog.setDescription('If the system configuration is changed, a notification is generated.')
hwCfgOperateCompletion = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 2)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateType"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateState"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateEndTime"))
if mibBuilder.loadTexts: hwCfgOperateCompletion.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateCompletion.setDescription('When a configuration operation has been done, a notification may be generated.')
hwCfgInconsistent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 3))
if mibBuilder.loadTexts: hwCfgInconsistent.setStatus('obsolete')
if mibBuilder.loadTexts: hwCfgInconsistent.setDescription('When the system automatically detects that configurations of the AMB and the SMB are inconsistent, the trap is generated.')
hwCfgInconsistentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 4))
if mibBuilder.loadTexts: hwCfgInconsistentResume.setStatus('obsolete')
if mibBuilder.loadTexts: hwCfgInconsistentResume.setDescription('When the system automatically detects that configurations of the AMB and the SMB change from inconsistent to consistent, the trap is generated.')
hwCfgB2STransferFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 5)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgBackupIndex"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgBackupServerIp"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgBackupProtocol"))
if mibBuilder.loadTexts: hwCfgB2STransferFail.setStatus('current')
if mibBuilder.loadTexts: hwCfgB2STransferFail.setDescription('When the system failed to backup current configuration to specified server, this trap will generate to indicates the details information.')
hwCfgB2SOperate = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 6))
if mibBuilder.loadTexts: hwCfgB2SOperate.setStatus('current')
if mibBuilder.loadTexts: hwCfgB2SOperate.setDescription('When the system begin to backup current configuration to servers, this trap will generate.')
hwCfgRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 7)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgRestoreErrCode"))
if mibBuilder.loadTexts: hwCfgRestoreFail.setStatus('current')
if mibBuilder.loadTexts: hwCfgRestoreFail.setDescription('When configuration restoration fails, this trap is generated.')
hwConfigInconsistent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 8))
if mibBuilder.loadTexts: hwConfigInconsistent.setStatus('current')
if mibBuilder.loadTexts: hwConfigInconsistent.setDescription('When system automatically detects that configurations of the main board and the slave board are inconsistent, this trap is generated.')
hwConfigConsistent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 10, 2, 9))
if mibBuilder.loadTexts: hwConfigConsistent.setStatus('current')
if mibBuilder.loadTexts: hwConfigConsistent.setDescription('When system automatically detects that configurations of the main board and the slave board change from inconsistent to consistent, this trap is generated.')
hwConfigManConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3))
hwConfigManCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 1))
hwConfigManCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 1, 1)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgManLogGroup"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateGroup"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgManNotificationGroup"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConfigManCompliance = hwConfigManCompliance.setStatus('current')
if mibBuilder.loadTexts: hwConfigManCompliance.setDescription('The compliance statement for entities implementing the Huawei Configuration Management MIB')
hwConfigManGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 2))
hwCfgManLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 2, 1)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgRunModifiedLast"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgRunSavedLast"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgStartModifiedLast"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogLimitedEntries"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogDeletedEntries"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogSrcCmd"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTerminalType"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTerminalNum"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTerminalUser"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogTerminalLocation"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogCmdSrcAddress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogVirHost"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogServerAddress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogFile"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogUserName"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogWantBackup"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogSrcData"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogDesData"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogConfigChangeId"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgLogCfgBaselineTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCfgManLogGroup = hwCfgManLogGroup.setStatus('current')
if mibBuilder.loadTexts: hwCfgManLogGroup.setDescription('A collection of objects configuration log group.')
hwCfgOperateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 2, 2)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateGlobalEntryLimit"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateEntryAgeOutTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateType"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateProtocol"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateFileName"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateServerAddress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateUserName"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateUserPassword"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateEndNotificationSwitch"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateResultGlobalEntryLimit"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateState"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateRowStatus"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateServerPort"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateSourceAddress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateSourceInterface"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateOnError"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateServerAddressType"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateServerAddressNet"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateVpnInstance"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateResultOptIndex"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateResultOpType"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateEndTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateTransferProgress"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateErrorReason"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgModuleChangeTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLockConfigDataStore"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersSessionID"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersSessionDesc"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersName"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersLockedTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersIPAddr"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersLastCfgTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateLevelUsersTimeout"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateCompareConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCfgOperateGroup = hwCfgOperateGroup.setStatus('current')
if mibBuilder.loadTexts: hwCfgOperateGroup.setDescription('A group of configuration operation.')
hwCfgManNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 2, 3)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgManEventlog"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgOperateCompletion"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgInconsistent"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgInconsistentResume"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgB2STransferFail"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgB2SOperate"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgRestoreFail"), ("HUAWEI-CONFIG-MAN-MIB", "hwConfigInconsistent"), ("HUAWEI-CONFIG-MAN-MIB", "hwConfigConsistent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCfgManNotificationGroup = hwCfgManNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwCfgManNotificationGroup.setDescription('Collection of notification objects.')
hwCfgSaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 10, 3, 2, 4)).setObjects(("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveAutoInterval"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveAutoTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveManualTime"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveAutoCpuLimit"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveAutoNoCfgInterval"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgSaveAutoDelay"), ("HUAWEI-CONFIG-MAN-MIB", "hwCfgRestoreErrCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCfgSaveGroup = hwCfgSaveGroup.setStatus('current')
if mibBuilder.loadTexts: hwCfgSaveGroup.setDescription('A group of configuration operation.')
mibBuilder.exportSymbols("HUAWEI-CONFIG-MAN-MIB", hwCfgLogUserName=hwCfgLogUserName, hwCfgSave=hwCfgSave, hwConfigManGroups=hwConfigManGroups, hwCfgOperateRowStatus=hwCfgOperateRowStatus, hwCfgSaveAutoDelay=hwCfgSaveAutoDelay, hwCfgOperateTransferProgress=hwCfgOperateTransferProgress, hwCfgLogVirHost=hwCfgLogVirHost, hwCfgRunModifiedLast=hwCfgRunModifiedLast, hwCfgOperateResultOptIndex=hwCfgOperateResultOptIndex, hwCfgBackupServerIp=hwCfgBackupServerIp, hwCfgBackupProtocol=hwCfgBackupProtocol, hwCfgOperateResultEntry=hwCfgOperateResultEntry, hwCfgModuleChangeTimeTable=hwCfgModuleChangeTimeTable, hwCfgOperateType=hwCfgOperateType, hwCfgOperateLevelUsersName=hwCfgOperateLevelUsersName, hwCfgSaveAutoNoCfgInterval=hwCfgSaveAutoNoCfgInterval, hwCfgModuleChangeTimeEntry=hwCfgModuleChangeTimeEntry, hwCfgBackup2ServerTable=hwCfgBackup2ServerTable, ConfigOperationType=ConfigOperationType, hwCfgOperateEntry=hwCfgOperateEntry, hwCfgLogEntry=hwCfgLogEntry, hwCfgLogConfigChangeId=hwCfgLogConfigChangeId, hwCfgOperateOnError=hwCfgOperateOnError, hwCfgOperateEndTime=hwCfgOperateEndTime, hwConfigManConformance=hwConfigManConformance, hwCfgOperateLevelUsersLastCfgTime=hwCfgOperateLevelUsersLastCfgTime, hwCfgOperateResultGlobalEntryLimit=hwCfgOperateResultGlobalEntryLimit, hwCfgOperateEndNotificationSwitch=hwCfgOperateEndNotificationSwitch, hwCfgOperateLevelUsersSessionID=hwCfgOperateLevelUsersSessionID, hwCfgOperateIndex=hwCfgOperateIndex, hwCfgManEventlog=hwCfgManEventlog, hwCfgOperateProtocol=hwCfgOperateProtocol, hwCfgOperateUserName=hwCfgOperateUserName, hwConfigManObjects=hwConfigManObjects, hwCfgOperateSourceAddress=hwCfgOperateSourceAddress, hwCfgBackupVpnInstance=hwCfgBackupVpnInstance, hwCfgSaveManualTime=hwCfgSaveManualTime, hwCfgLogTerminalType=hwCfgLogTerminalType, hwConfig=hwConfig, hwCfgLogSrcCmd=hwCfgLogSrcCmd, hwCfgInconsistentResume=hwCfgInconsistentResume, hwCfgSaveGroup=hwCfgSaveGroup, hwConfigManNotifications=hwConfigManNotifications, hwCfgOperateSourceInterface=hwCfgOperateSourceInterface, hwCfgOperateCompletion=hwCfgOperateCompletion, hwCfgOperateGlobalEntryLimit=hwCfgOperateGlobalEntryLimit, hwCfgLogDeletedEntries=hwCfgLogDeletedEntries, hwCfgLogIndex=hwCfgLogIndex, hwCfgModuleId=hwCfgModuleId, hwCfgLogTable=hwCfgLogTable, hwCfgManLogGroup=hwCfgManLogGroup, hwCfgLog=hwCfgLog, hwConfigConsistent=hwConfigConsistent, hwCfgLogFile=hwCfgLogFile, hwCfgOperateFileName=hwCfgOperateFileName, hwCfgOperateLevelUsersLockedTime=hwCfgOperateLevelUsersLockedTime, hwCfgLogSrcData=hwCfgLogSrcData, hwConfigManCompliance=hwConfigManCompliance, hwCfgBackupServerPath=hwCfgBackupServerPath, hwCfgSaveAutoCpuLimit=hwCfgSaveAutoCpuLimit, hwCfgOperateUserPassword=hwCfgOperateUserPassword, hwCfgManNotificationGroup=hwCfgManNotificationGroup, hwCfgLogTime=hwCfgLogTime, hwCfgOperateCompareConfig=hwCfgOperateCompareConfig, hwCfgBackupRowStatus=hwCfgBackupRowStatus, hwCfgModuleChangeTime=hwCfgModuleChangeTime, hwCfgBackup2ServerEntry=hwCfgBackup2ServerEntry, hwCfgLogServerAddress=hwCfgLogServerAddress, hwCfgOperateTime=hwCfgOperateTime, hwCfgLogWantBackup=hwCfgLogWantBackup, hwCfgBackupPassword=hwCfgBackupPassword, hwCfgB2STransferFail=hwCfgB2STransferFail, hwCfgRestoreFail=hwCfgRestoreFail, hwCfgOperateVpnInstance=hwCfgOperateVpnInstance, hwCfgOperateResultTable=hwCfgOperateResultTable, hwCfgOperateServerAddressType=hwCfgOperateServerAddressType, hwCfgOperateLevelUsersTable=hwCfgOperateLevelUsersTable, hwConfigManCompliances=hwConfigManCompliances, hwCfgOperateGroup=hwCfgOperateGroup, hwCfgOperateLevelUsersEntry=hwCfgOperateLevelUsersEntry, hwCfgOperateLevelUsersSessionDesc=hwCfgOperateLevelUsersSessionDesc, hwCfgOperateLevelUsersTimeout=hwCfgOperateLevelUsersTimeout, hwCfgLogCfgBaselineTime=hwCfgLogCfgBaselineTime, hwCfgOperate=hwCfgOperate, hwCfgB2SOperate=hwCfgB2SOperate, hwCfgLogCmdSrcAddress=hwCfgLogCmdSrcAddress, hwCfgLogDesData=hwCfgLogDesData, hwCfgLogTerminalLocation=hwCfgLogTerminalLocation, hwCfgSaveAutoTime=hwCfgSaveAutoTime, hwCfgOperateLockConfigDataStore=hwCfgOperateLockConfigDataStore, hwCfgBackupResult=hwCfgBackupResult, hwCfgOperateServerAddress=hwCfgOperateServerAddress, PYSNMP_MODULE_ID=hwConfig, hwCfgLock=hwCfgLock, hwCfgOperateEntryAgeOutTime=hwCfgOperateEntryAgeOutTime, hwCfgBackupUser=hwCfgBackupUser, hwCfgOperateErrorReason=hwCfgOperateErrorReason, hwCfgOperateResultIndex=hwCfgOperateResultIndex, hwCfgRestoreErrCode=hwCfgRestoreErrCode, hwCfgOperateServerPort=hwCfgOperateServerPort, hwCfgOperateTable=hwCfgOperateTable, hwCfgStartModifiedLast=hwCfgStartModifiedLast, hwCfgLogLimitedEntries=hwCfgLogLimitedEntries, hwCfgInconsistent=hwCfgInconsistent, hwCfgOperateState=hwCfgOperateState, hwCfgLogTerminalUser=hwCfgLogTerminalUser, hwCfgBackupIndex=hwCfgBackupIndex, hwCfgOperateResultOpType=hwCfgOperateResultOpType, hwCfgLogTerminalNum=hwCfgLogTerminalNum, hwCfgOperateLevelUsersIPAddr=hwCfgOperateLevelUsersIPAddr, hwCfgOperateServerAddressNet=hwCfgOperateServerAddressNet, hwConfigInconsistent=hwConfigInconsistent, hwCfgRunSavedLast=hwCfgRunSavedLast, hwCfgSaveAutoInterval=hwCfgSaveAutoInterval)
