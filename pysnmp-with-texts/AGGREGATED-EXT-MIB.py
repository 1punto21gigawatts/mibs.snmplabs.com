#
# PySNMP MIB module AGGREGATED-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AGGREGATED-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
snmpModules, ObjectName, Counter32, IpAddress, Integer32, TimeTicks, ModuleIdentity, Unsigned32, Gauge32, NotificationType, enterprises, Counter64, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "snmpModules", "ObjectName", "Counter32", "IpAddress", "Integer32", "TimeTicks", "ModuleIdentity", "Unsigned32", "Gauge32", "NotificationType", "enterprises", "Counter64", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso")
RowStatus, TruthValue, TestAndIncr, DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TestAndIncr", "DisplayString", "TimeStamp", "TextualConvention")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
excel = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67))
excel1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 1))
excel2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 2))
excel3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 3))
excel4 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 67, 4))
softSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
if mibBuilder.loadTexts: softSwitch.setLastUpdated('240701')
if mibBuilder.loadTexts: softSwitch.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: softSwitch.setContactInfo('')
if mibBuilder.loadTexts: softSwitch.setDescription('The MIB module for entities implementing the xxxx protocol.')
h323DeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3))
resourceMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4))
sipDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5))
psaxDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6))
cdrDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7))
spinsDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8))
fcDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9))
softswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10))
mantraAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 99))
mantraTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1))
h323TrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2))
rmTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3))
fcTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4))
mantraTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 99, 0))
h323DS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 1))
h323DS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 3, 2))
sipDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5, 1))
sipDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 5, 2))
cdrDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7, 1))
cdrDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 7, 2))
spinsDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 1))
spinsDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 2))
fcDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 1))
fcDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 2))
psaxDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 1))
psaxDS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 2))
rm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 1))
rm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 2))
rm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 3))
rm4 = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 4, 4))
pepName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pepName.setStatus('current')
if mibBuilder.loadTexts: pepName.setDescription('Name of the pep the action has occurred on.')
devName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: devName.setStatus('current')
if mibBuilder.loadTexts: devName.setDescription('Name of the deviceServer the action has occurred on.')
file = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: file.setStatus('current')
if mibBuilder.loadTexts: file.setDescription('Name of the file the action has occurred on.')
host = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: host.setStatus('current')
if mibBuilder.loadTexts: host.setDescription('Name of the host the action has occurred on.')
port = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: port.setStatus('current')
if mibBuilder.loadTexts: port.setDescription('Port number associated with the pep the action has occurred on.')
oldFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldFile.setStatus('current')
if mibBuilder.loadTexts: oldFile.setDescription('Name of the file the action has occurred on.')
newFile = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: newFile.setStatus('current')
if mibBuilder.loadTexts: newFile.setDescription('Name of the file the action has occurred on.')
minutes = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: minutes.setStatus('current')
if mibBuilder.loadTexts: minutes.setDescription('Name of the file the action has occurred on.')
result = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: result.setStatus('current')
if mibBuilder.loadTexts: result.setDescription('Result of the action taken.')
reason = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: reason.setStatus('current')
if mibBuilder.loadTexts: reason.setDescription('The reason the action was taken.')
snName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: snName.setStatus('current')
if mibBuilder.loadTexts: snName.setDescription('The reason the action was taken.')
myHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myHost.setStatus('current')
if mibBuilder.loadTexts: myHost.setDescription('Name of the host the action has occurred on.')
myPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: myPort.setStatus('current')
if mibBuilder.loadTexts: myPort.setDescription('Port number associated with the pep the action has occurred on.')
mateHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mateHost.setStatus('current')
if mibBuilder.loadTexts: mateHost.setDescription('Name of the host the action has occurred on.')
matePort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 32565))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: matePort.setStatus('current')
if mibBuilder.loadTexts: matePort.setDescription('Port number associated with the pep the action has occurred on.')
deviceType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceType.setStatus('current')
if mibBuilder.loadTexts: deviceType.setDescription('This is either CC, H323, SS7 or EBGen (the various modules in SARAS)')
domain = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: domain.setStatus('current')
if mibBuilder.loadTexts: domain.setDescription('Name of the domain the action has occurred on.')
group = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: group.setStatus('current')
if mibBuilder.loadTexts: group.setDescription('Name of the group the action has occurred on.')
name = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: name.setStatus('current')
if mibBuilder.loadTexts: name.setDescription('Name of the process the action has occurred on.')
runStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: runStatus.setStatus('current')
if mibBuilder.loadTexts: runStatus.setDescription('A short summary of the status of the mantra software modules.')
timeOccurred = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: timeOccurred.setStatus('current')
if mibBuilder.loadTexts: timeOccurred.setDescription('')
code = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: code.setStatus('current')
if mibBuilder.loadTexts: code.setDescription('')
csID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csID.setStatus('current')
if mibBuilder.loadTexts: csID.setDescription('')
csType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csType.setStatus('current')
if mibBuilder.loadTexts: csType.setDescription('')
registrationStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: registrationStatus.setStatus('current')
if mibBuilder.loadTexts: registrationStatus.setDescription('')
comment = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: comment.setStatus('current')
if mibBuilder.loadTexts: comment.setDescription('')
gwID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwID.setStatus('current')
if mibBuilder.loadTexts: gwID.setDescription('Gateway ID')
moduleID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: moduleID.setStatus('current')
if mibBuilder.loadTexts: moduleID.setDescription('Gateway ID')
percent = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: percent.setStatus('current')
if mibBuilder.loadTexts: percent.setDescription('Gateway ID')
gwIP = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 10), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwIP.setStatus('current')
if mibBuilder.loadTexts: gwIP.setDescription('Gateway ip address')
gwType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gwType.setStatus('current')
if mibBuilder.loadTexts: gwType.setDescription('Gateway type')
percentage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: percentage.setStatus('current')
if mibBuilder.loadTexts: percentage.setDescription('Gateway type')
status = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: status.setStatus('current')
if mibBuilder.loadTexts: status.setDescription('Gateway type')
load = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: load.setStatus('current')
if mibBuilder.loadTexts: load.setDescription('Gateway type')
disk = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: disk.setStatus('current')
if mibBuilder.loadTexts: disk.setDescription('Gateway type')
curSize = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: curSize.setStatus('current')
if mibBuilder.loadTexts: curSize.setDescription('Gateway type')
maxSize = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: maxSize.setStatus('current')
if mibBuilder.loadTexts: maxSize.setDescription('Gateway type')
processName = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: processName.setStatus('current')
if mibBuilder.loadTexts: processName.setDescription('Gateway type')
processID = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: processID.setStatus('current')
if mibBuilder.loadTexts: processID.setDescription('processID')
cpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpuUsage.setStatus('current')
if mibBuilder.loadTexts: cpuUsage.setDescription('CPU usage percentage')
memUsage = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: memUsage.setStatus('current')
if mibBuilder.loadTexts: memUsage.setDescription('CPU usage percentage')
sbProducerHost = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sbProducerHost.setStatus('current')
if mibBuilder.loadTexts: sbProducerHost.setDescription('Socket based producer host name')
sbProducerPort = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 10, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sbProducerPort.setStatus('current')
if mibBuilder.loadTexts: sbProducerPort.setDescription('Socket based producer name')
unknownDeviceTrapContents = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownDeviceTrapContents.setStatus('current')
if mibBuilder.loadTexts: unknownDeviceTrapContents.setDescription('This is a string field (just to have a legal oid) for traps generated neither from SS7 nor from the CC.')
lastAggNode = MibScalar((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastAggNode.setStatus('current')
if mibBuilder.loadTexts: lastAggNode.setDescription('This is a flag variable, kept to indicate the end of aggregated mib during a snmpwalk. It always returns the following string: Reached the End of Aggregated MIB')
mibBuilder.exportSymbols("AGGREGATED-EXT-MIB", excel1=excel1, devName=devName, csID=csID, deviceType=deviceType, h323TrapVariables=h323TrapVariables, snName=snName, processName=processName, mantraAdmin=mantraAdmin, unknownDeviceTrapContents=unknownDeviceTrapContents, psaxDS2=psaxDS2, products=products, cdrDS2=cdrDS2, curSize=curSize, newFile=newFile, mantraTraps=mantraTraps, host=host, excel=excel, port=port, myPort=myPort, code=code, fcDeviceServer=fcDeviceServer, moduleID=moduleID, percentage=percentage, disk=disk, file=file, sipDS2=sipDS2, mantraTrapVars=mantraTrapVars, rmTrapVariables=rmTrapVariables, psaxDS1=psaxDS1, group=group, processID=processID, PYSNMP_MODULE_ID=softSwitch, fcDS1=fcDS1, pepName=pepName, h323DS1=h323DS1, cdrDeviceServer=cdrDeviceServer, gwIP=gwIP, sbProducerPort=sbProducerPort, cpuUsage=cpuUsage, csType=csType, rm3=rm3, sipDS1=sipDS1, fcDS2=fcDS2, mateHost=mateHost, name=name, softSwitch=softSwitch, gwType=gwType, sbProducerHost=sbProducerHost, percent=percent, rm2=rm2, result=result, cdrDS1=cdrDS1, softswitchTraps=softswitchTraps, rm4=rm4, oldFile=oldFile, load=load, resourceMonitor=resourceMonitor, comment=comment, gwID=gwID, excel3=excel3, myHost=myHost, sipDeviceServer=sipDeviceServer, psaxDeviceServer=psaxDeviceServer, status=status, runStatus=runStatus, registrationStatus=registrationStatus, excel2=excel2, rm1=rm1, minutes=minutes, spinsDeviceServer=spinsDeviceServer, domain=domain, h323DeviceServer=h323DeviceServer, lastAggNode=lastAggNode, excel4=excel4, timeOccurred=timeOccurred, reason=reason, fcTrapVariables=fcTrapVariables, spinsDS2=spinsDS2, h323DS2=h323DS2, spinsDS1=spinsDS1, memUsage=memUsage, lucent=lucent, matePort=matePort, maxSize=maxSize)
