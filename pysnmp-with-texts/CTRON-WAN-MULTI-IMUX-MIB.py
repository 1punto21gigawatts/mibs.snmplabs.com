#
# PySNMP MIB module CTRON-WAN-MULTI-IMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-WAN-MULTI-IMUX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:31:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ctWanServices, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctWanServices")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibIdentifier, ModuleIdentity, iso, Integer32, ObjectIdentity, IpAddress, Counter32, Bits, Counter64, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "ModuleIdentity", "iso", "Integer32", "ObjectIdentity", "IpAddress", "Counter32", "Bits", "Counter64", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctWanMultiMux = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2))
ctWANMMuxGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 1))
ctWANMMuxMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWANMMuxMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: ctWANMMuxMaxNum.setDescription('Get the maximum number of Inverse Multiplexer applications allowed to be programmed for this IP host.')
ctWanMMuxTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2), )
if mibBuilder.loadTexts: ctWanMMuxTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxTable.setDescription('Information describing the global parameters that apply to Inverse Multiplexer entities.')
ctWanMMuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2, 1), ).setIndexNames((0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxId"))
if mibBuilder.loadTexts: ctWanMMuxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxEntry.setDescription('A description of a single Inverse Multiplexer entry.')
ctWanMMuxId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxId.setDescription('A unique value identifying an element in a sequence of Inverse Multiplexer Applications which belong to an IP host. This value ranges from 1 to the maximum number of programmable applications as described by ctWANMMuxMaxNum. This index is associated with a physical WAN interface containing multiple DS1 connections.')
ctWanMMuxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxIfIndex.setDescription('The value for this object is equal to the value of ifIndex from the Interfaces table of MIB II (RFC 1213). Specifically, this index is associated with the physical interface containing multiple DS1 connections to be used for Cabletron WAN Inverse Multiplexing.')
ctWanMMuxMaxNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxMaxNumGroups.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxMaxNumGroups.setDescription('Get the maximum number of Inverse Multiplexer groups allowed to be programmed for this IMUX entity. This value is the number of physical WAN connections, divided by the minimum number of channels for a single mux to be operational (2). However, some devices may only support a single inverse multiplexer group.')
ctWanMMuxAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanMMuxAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxAdmin.setDescription('Used to enable and disable an Inverse Multiplexer Application. This object is used to enable/disable Inverse Multiplexing for a single IMUX entity. Inverse Multiplexer Groups may be enabled/disabled independently using ctWanMMuxGroupAdmin. This object must be set to enabled for any inverse multiplexing to occur on the IMUX entity.')
ctWanMMuxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3), )
if mibBuilder.loadTexts: ctWanMMuxGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupTable.setDescription('Information describing the configured parameters of one of the Inverse Multiplexer groups.')
ctWanMMuxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1), ).setIndexNames((0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxGroupMMuxId"), (0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxGroupId"))
if mibBuilder.loadTexts: ctWanMMuxGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupEntry.setDescription('A description of a single Inverse Multiplexer group entry.')
ctWanMMuxGroupMMuxId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxGroupMMuxId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupMMuxId.setDescription('A unique value identifying an element in a sequence of Inverse Multiplexer Applications which belong to an IP host. This value ranges from 1 to the maximum number of programmable applications as described by ctWANMMuxMaxNum. This index is the same as ctWanMMuxId.')
ctWanMMuxGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupId.setDescription('A unique value identifying an element in a sequence of groups which belong to the WAN Inverse Multiplexer. This value ranges from 1 to the maximum number of programmable groups as described by ctWANMMuxMaxNumGroups.')
ctWanMMuxGroupAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanMMuxGroupAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupAdmin.setDescription("Used to enable and disable an Inverse Multiplexer group which evenly distributes data traffic in a properly sequenced fashion, over two or more single channel Wide Area Network connections such as DS1, E1, DDS, or SYNC. Each of the single channel connections must be configured with an appropriate datalink protocol. A minimum of two channels, each assigned to it's own physical interface, is required before the Inverse Multiplexer group can be enabled.")
ctWanMMuxGroupNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxGroupNumChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupNumChannels.setDescription("Get the number of channels currently associated with this Inverse Multiplexer group. A minimum of two channels, each assigned to it's own physical interface, is required before the Inverse Multiplexer group can be enabled.")
ctWanMMuxGroupAddChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanMMuxGroupAddChannel.setReference('rfc-1213')
if mibBuilder.loadTexts: ctWanMMuxGroupAddChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupAddChannel.setDescription('Add a channel to the channel list used by this Inverse Multiplexer group. Before a channel is added, the channel must be assigned a MIB II ifindex, and an acceptable Datalink Protocol. When this object is set, it is set with the ifindex value. This object is always read as a 1.')
ctWanMMuxGroupDelChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctWanMMuxGroupDelChannel.setReference('rfc-1213')
if mibBuilder.loadTexts: ctWanMMuxGroupDelChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxGroupDelChannel.setDescription("Delete a channel to the channel list used by this Inverse Multiplexer group. Before a channel is deleted, the channel must exist in the Inverse Multiplexer group's channel table. When this object is set, it is set with the ifindex value of the channel the user wishes to delete from the channel table. This object is always read as a 1.")
ctWanMMuxChannelTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4), )
if mibBuilder.loadTexts: ctWanMMuxChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelTable.setDescription('Table containing ifindex values, representing WAN channels, used by the Inverse Multiplexer. The table also contains statistics reported about each channel.')
ctWanMMuxChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1), ).setIndexNames((0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxChannelMMuxId"), (0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxChannelGroupId"), (0, "CTRON-WAN-MULTI-IMUX-MIB", "ctWanMMuxChannelId"))
if mibBuilder.loadTexts: ctWanMMuxChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelEntry.setDescription('A description of a single entry.')
ctWanMMuxChannelMMuxId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelMMuxId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelMMuxId.setDescription('A unique value identifying an element in a sequence of Inverse Multiplexer Applications which belong to an IP host. This value ranges from 1 to the maximum number of programmable applications as described by ctWANMMuxMaxNum. This index is the same as ctWanMMuxId.')
ctWanMMuxChannelGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelGroupId.setDescription('A unique value identifying an element in a sequence of groups which belong to the WAN Inverse Multiplexer. This value ranges from 1 to the maximum number of programmable groups as described by ctWANMMuxMaxNumGroups.')
ctWanMMuxChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelId.setDescription('A unique value identifying an element in a sequence of member channel ifindex values which belong to a WAN Inverse Multiplexer group.')
ctWanMMuxChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelIfIndex.setDescription('Returns an ifindex associated with a WAN channel used for Inverse Multiplexing.')
ctWanMMuxChannelPhysNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelPhysNum.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelPhysNum.setDescription("Returns a unique physical connection identifier associated with this channel's physical WAN connection.")
ctWanMMuxChannelBwAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelBwAvail.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelBwAvail.setDescription('Returns a value which represents the available bandwidth for transmitting data existing for the physical WAN connection associated with this channel. The value is represented in bits/sec.')
ctWanMMuxChannelByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelByteCount.setDescription('Returns a value which represents a cumulative count of bytes transmitted out from this interface. The count includes any bytes transmitted across the physical medium, less physical medium framing.')
ctWanMMuxChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 7, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctWanMMuxChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctWanMMuxChannelStatus.setDescription('Returns the current status of the channel associated with an inverse multiplexer group. The channel is active when the group admin status is enabled, and the channel is operational. The channel is inactive when either the group admin status is disabled, or the channel is not operational.')
mibBuilder.exportSymbols("CTRON-WAN-MULTI-IMUX-MIB", ctWanMMuxGroupAdmin=ctWanMMuxGroupAdmin, ctWanMMuxGroupTable=ctWanMMuxGroupTable, ctWanMMuxChannelBwAvail=ctWanMMuxChannelBwAvail, ctWanMMuxGroupNumChannels=ctWanMMuxGroupNumChannels, ctWanMMuxGroupAddChannel=ctWanMMuxGroupAddChannel, ctWanMMuxChannelGroupId=ctWanMMuxChannelGroupId, ctWANMMuxGeneralGroup=ctWANMMuxGeneralGroup, ctWanMMuxAdmin=ctWanMMuxAdmin, ctWanMMuxChannelId=ctWanMMuxChannelId, ctWanMMuxId=ctWanMMuxId, ctWanMMuxChannelMMuxId=ctWanMMuxChannelMMuxId, ctWANMMuxMaxNum=ctWANMMuxMaxNum, ctWanMMuxChannelIfIndex=ctWanMMuxChannelIfIndex, ctWanMMuxChannelPhysNum=ctWanMMuxChannelPhysNum, ctWanMMuxGroupEntry=ctWanMMuxGroupEntry, ctWanMMuxGroupMMuxId=ctWanMMuxGroupMMuxId, ctWanMMuxEntry=ctWanMMuxEntry, ctWanMultiMux=ctWanMultiMux, ctWanMMuxChannelEntry=ctWanMMuxChannelEntry, ctWanMMuxGroupDelChannel=ctWanMMuxGroupDelChannel, ctWanMMuxChannelTable=ctWanMMuxChannelTable, ctWanMMuxTable=ctWanMMuxTable, ctWanMMuxGroupId=ctWanMMuxGroupId, ctWanMMuxIfIndex=ctWanMMuxIfIndex, ctWanMMuxChannelStatus=ctWanMMuxChannelStatus, ctWanMMuxChannelByteCount=ctWanMMuxChannelByteCount, ctWanMMuxMaxNumGroups=ctWanMMuxMaxNumGroups)
