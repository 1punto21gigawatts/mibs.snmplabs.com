#
# PySNMP MIB module Juniper-IP-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-IP-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:03:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniName, JuniNextIfIndex = mibBuilder.importSymbols("Juniper-TC", "JuniName", "JuniNextIfIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, Counter32, iso, ObjectIdentity, Integer32, Gauge32, MibIdentifier, IpAddress, Bits, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Counter32", "iso", "ObjectIdentity", "Integer32", "Gauge32", "MibIdentifier", "IpAddress", "Bits", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
juniIpTunnelMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51))
juniIpTunnelMIB.setRevisions(('2003-09-29 17:29', '2002-09-16 21:44', '2002-01-14 18:16', '2001-07-23 20:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniIpTunnelMIB.setRevisionsDescriptions(('Product rebranding (JUNOSe).', 'Replaced Unisphere names with Juniper names.', 'Added juniIpTunnelSequenceNumbers.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniIpTunnelMIB.setLastUpdated('200309291729Z')
if mibBuilder.loadTexts: juniIpTunnelMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniIpTunnelMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniIpTunnelMIB.setDescription('The IP Tunnel MIB for the Juniper Networks enterprise.')
juniIpTunnelInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1))
juniIpTunnelNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 1), JuniNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpTunnelNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in juniIpTunnelIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
juniIpTunnelInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2), )
if mibBuilder.loadTexts: juniIpTunnelInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelInterfaceTable.setDescription('This table contains entries of IP Tunnel interfaces.')
juniIpTunnelInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1), ).setIndexNames((0, "Juniper-IP-TUNNEL-MIB", "juniIpTunnelIfIndex"))
if mibBuilder.loadTexts: juniIpTunnelInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelInterfaceEntry.setDescription('Each entry describes the characteristics of a single IP Tunnel interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/juniIfTable.')
juniIpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniIpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelIfIndex.setDescription('The ifIndex of the IP tunnel interface. When creating entries in this table, suitable values for this object are determined by reading juniIpTunnelNextIfIndex.')
juniIpTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelName.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelName.setDescription('The administratively assigned name for this IP Tunnel interface.')
juniIpTunnelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ipTunnelModeGre", 0), ("ipTunnelModeDvmrp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelMode.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelMode.setDescription('The configured mode for this IP Tunnel interface.')
juniIpTunnelVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 4), JuniName().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelVirtualRouter.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelVirtualRouter.setDescription('The transport virtual router associated with this IP tunnel interface. This object need not be set when creating row entries. Note that the default when this object is not specified is the router associated with the agent acting on the management request.')
juniIpTunnelChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelChecksum.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelChecksum.setDescription('The Tunnel checksum configuration for this entry. Setting this object to true(1) will enabled end-to-end checksumming and will cause the system to drop packets with bad checksums received on this interface. Setting this object to false(2) will disable this feature. Note: This configuration object is not supported for DVMRP tunnels.')
juniIpTunnelMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 10240)).clone(10240)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelMtu.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelMtu.setDescription('The tunnel MTU.')
juniIpTunnelDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelDestination.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelDestination.setDescription('The tunnel destination IP address.')
juniIpTunnelSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelSource.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelSource.setDescription('The tunnel source IP address.')
juniIpTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniIpTunnelIfRowStatus juniIpTunnelName juniIpTunnelMode In addition, when creating an entry the following condition must hold: A value for juniIpTunnelIfIndex must have been determined previously, typically by reading juniIpTunnelNextIfIndex. Once created, the following objects may not be modified: juniIpTunnelName juniIpTunnelMode juniIpTunnelVirtualRouter A corresponding entry in ifTable/ifXTable/juniIfTable is created/ destroyed as a result of creating/destroying an entry in this table.')
juniIpTunnelSequenceNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpTunnelSequenceNumbers.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelSequenceNumbers.setDescription('The tunnel sequence number configuration for this entry. Setting this object to true(1) will enable sequence number generation. Setting this object to false(2) will disable this feature. Note: This configuration object is not supported for DVMRP tunnels.')
juniIpTunnelConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2))
juniIpTunnelCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 1))
juniIpTunnelGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 2))
juniIpTunnnelCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 1, 1)).setObjects(("Juniper-IP-TUNNEL-MIB", "juniIpTunnelInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpTunnnelCompliance = juniIpTunnnelCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpTunnnelCompliance.setDescription('Obsolete compliance statement for entities that implement the Juniper IP Tunnel MIB. This compliance statement became obsolete when juniIpTunnelSequenceNumbers was added.')
juniIpTunnnelCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 1, 2)).setObjects(("Juniper-IP-TUNNEL-MIB", "juniIpTunnelInterfaceGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpTunnnelCompliance2 = juniIpTunnnelCompliance2.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnnelCompliance2.setDescription('The compliance statement for entities that implement the Juniper IP Tunnel MIB.')
juniIpTunnelInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 2, 1)).setObjects(("Juniper-IP-TUNNEL-MIB", "juniIpTunnelNextIfIndex"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelName"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelMode"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelVirtualRouter"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelChecksum"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelMtu"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelSource"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelDestination"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpTunnelInterfaceGroup = juniIpTunnelInterfaceGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpTunnelInterfaceGroup.setDescription('Obsolete collection of objects for managing IP Tunnel capabilities in a Juniper product. This group became obsolete when juniIpTunnelSequenceNumbers was added.')
juniIpTunnelInterfaceGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 51, 2, 2, 2)).setObjects(("Juniper-IP-TUNNEL-MIB", "juniIpTunnelNextIfIndex"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelName"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelMode"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelVirtualRouter"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelChecksum"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelMtu"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelSource"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelDestination"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelRowStatus"), ("Juniper-IP-TUNNEL-MIB", "juniIpTunnelSequenceNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpTunnelInterfaceGroup2 = juniIpTunnelInterfaceGroup2.setStatus('current')
if mibBuilder.loadTexts: juniIpTunnelInterfaceGroup2.setDescription('A collection of objects for managing IP Tunnel capabilities in a Juniper product.')
mibBuilder.exportSymbols("Juniper-IP-TUNNEL-MIB", juniIpTunnelNextIfIndex=juniIpTunnelNextIfIndex, juniIpTunnelCompliances=juniIpTunnelCompliances, juniIpTunnelVirtualRouter=juniIpTunnelVirtualRouter, juniIpTunnelMtu=juniIpTunnelMtu, juniIpTunnelDestination=juniIpTunnelDestination, juniIpTunnelInterfaceEntry=juniIpTunnelInterfaceEntry, juniIpTunnelInterfaceGroup=juniIpTunnelInterfaceGroup, PYSNMP_MODULE_ID=juniIpTunnelMIB, juniIpTunnelInterfaceGroup2=juniIpTunnelInterfaceGroup2, juniIpTunnnelCompliance=juniIpTunnnelCompliance, juniIpTunnelMode=juniIpTunnelMode, juniIpTunnelIfIndex=juniIpTunnelIfIndex, juniIpTunnelInterfaceObjects=juniIpTunnelInterfaceObjects, juniIpTunnelConformance=juniIpTunnelConformance, juniIpTunnelSequenceNumbers=juniIpTunnelSequenceNumbers, juniIpTunnelInterfaceTable=juniIpTunnelInterfaceTable, juniIpTunnelMIB=juniIpTunnelMIB, juniIpTunnnelCompliance2=juniIpTunnnelCompliance2, juniIpTunnelChecksum=juniIpTunnelChecksum, juniIpTunnelGroups=juniIpTunnelGroups, juniIpTunnelName=juniIpTunnelName, juniIpTunnelRowStatus=juniIpTunnelRowStatus, juniIpTunnelSource=juniIpTunnelSource)
