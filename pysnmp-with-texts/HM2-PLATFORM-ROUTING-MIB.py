#
# PySNMP MIB module HM2-PLATFORM-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-ROUTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
hm2PlatformMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs", "HmEnabledStatus")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressIPv4")
ospfIfEntry, ospfIfMetricEntry, ospfAreaEntry, ospfVirtIfEntry, RouterID, ospfNbrEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfIfEntry", "ospfIfMetricEntry", "ospfAreaEntry", "ospfVirtIfEntry", "RouterID", "ospfNbrEntry")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter64, Counter32, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, IpAddress, iso, Bits, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Counter32", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "IpAddress", "iso", "Bits", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
PhysAddress, RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
vrrpOperVrId, = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId")
hm2PlatformRouting = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2))
hm2PlatformRouting.setRevisions(('2011-09-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformRouting.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformRouting.setLastUpdated('201109080000Z')
if mibBuilder.loadTexts: hm2PlatformRouting.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformRouting.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformRouting.setDescription('The Hirschmann Platform2 MIB for Layer3 Switching. Copyright (C) 2011. All Rights Reserved.')
hm2AgentSwitchArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 1))
hm2AgentSwitchArpAgeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 21600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpAgeoutTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpAgeoutTime.setDescription('HiOS: Configures the exact ARP entry age-out time in seconds. HiSecOS: Configures the average ARP entry age-out time in seconds, with each entry aging out after a random time between 0.5*hm2AgentSwitchArpAgeoutTime and 1.5*hm2AgentSwitchArpAgeoutTime.')
hm2AgentSwitchArpResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpResponseTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpResponseTime.setDescription('Configures the ARP request response timeout in seconds. Allowable range: 1-10')
hm2AgentSwitchArpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpMaxRetries.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpMaxRetries.setDescription('Configures the ARP count of maximum request for retries. Allowable range: 0-10')
hm2AgentSwitchArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheSize.setDescription('Configures the ARP maximum number of entries in the cache. Allowable range is platform specific.')
hm2AgentSwitchArpDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 5), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpDynamicRenew.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpDynamicRenew.setDescription('This indicates the current setting of ARP dynamic renew mode.')
hm2AgentSwitchArpTotalEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountCurrent.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountCurrent.setDescription('Current number of entries in the ARP cache.')
hm2AgentSwitchArpTotalEntryCountPeak = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountPeak.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpTotalEntryCountPeak.setDescription('Peak number of entries recorded in the ARP cache over time. This value is restarted whenever the ARP cache size is changed.')
hm2AgentSwitchArpStaticEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountCurrent.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountCurrent.setDescription('Current number of configured static ARP entries.')
hm2AgentSwitchArpStaticEntryCountMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpStaticEntryCountMax.setDescription('Maximum number of configurable static ARP entries.')
hm2AgentSwitchLocalProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11), )
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpTable.setDescription('This table contains the per-interface configuration parameters for local proxy ARP.')
hm2AgentSwitchLocalProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpEntry.setDescription('Represents a logical row in the hm2AgentSwitchLocalProxyArpTable.')
hm2AgentSwitchLocalProxyArpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 11, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchLocalProxyArpMode.setDescription('The local proxy ARP mode for the interface.')
hm2AgentSwitchIntfArpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12), )
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpTable.setDescription('This table augments the MIB-II ipNetToMediaTable by providing per-interface ARP entry information.')
hm2AgentSwitchIntfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfArpIpAddress"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfArpIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpEntry.setDescription('This table augments the MIB-II ipNetToMediaTable by providing per-interface ARP entry information.')
hm2AgentSwitchIntfArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIpAddress.setDescription('The Type of Address assigned to this interface.')
hm2AgentSwitchIntfArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpIfIndex.setDescription('The Associated IfIndex which identified the ARP Entry. This value must be specified for static ARP entries on an unnumbered interface')
hm2AgentSwitchIntfArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpAge.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpAge.setDescription('This defines the time (in seconds) since the ARP entry was last refreshed. This value is 0 for ARP entries of type local(1) or static(3), since these entries are not subject to aging.')
hm2AgentSwitchIntfArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpMacAddress.setDescription('The hardware MAX Address that each interface maps to.')
hm2AgentSwitchIntfArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpType.setDescription('The type of ARP entry.')
hm2AgentSwitchIntfArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfArpStatus.setDescription('The status of this ARP entry. Setting this object destroy will remove the entry.')
hm2AgentSwitchArpSparseLearn = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 100), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpSparseLearn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpSparseLearn.setDescription('This indicates the current setting of ARP sparse learn mode. ')
hm2AgentSwitchArpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("flushARP", 2), ("flushARPWithGateway", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheClear.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchArpCacheClear.setDescription("Setting the object to 'flushARP' will flush the ARP cache. Setting the object to 'flushARPWithGateway' will also flush the ARP cache but includes the ARP entries that are used by gateways of routes. Reading the object always returns 'other'.")
hm2AgentSwitchProxyArpMaxResponseDelay = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 1, 248), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), )).clone(800)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchProxyArpMaxResponseDelay.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchProxyArpMaxResponseDelay.setDescription('Configures the maximum time in ms to wait before a proxy response is sent. Setting this to 0 determines a response to be sent immediately.')
hm2AgentSwitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 2))
hm2AgentSwitchIpRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRoutingMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRoutingMode.setDescription('Administratively enables/disables routing on the switch.')
hm2AgentSwitchIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpDefaultGateway.setDescription('Specifies the default gateway manually configured.')
hm2AgentSwitchIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3), )
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceTable.setDescription('IP interface table.')
hm2AgentSwitchIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceEntry.setDescription('IP interface entry.')
hm2AgentSwitchIpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIfIndex.setDescription('The IfIndex associated with this instance.')
hm2AgentSwitchIPAddressConfigMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("manual", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIPAddressConfigMethod.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIPAddressConfigMethod.setDescription('The source of the IP address. User can set the object to none(0) or dhcp(2). Option dhcp(2) enables DHCP client on the interface. Option none(0) disables DHCP client on the interface. Get on this object returns manual(1) only when the interface has a manually configured address.')
hm2AgentSwitchIpInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIpAddress.setDescription('The IP address assigned to this interface. When setting this value, the value of hm2AgentSwitchIpInterfaceNetMask must be set at the same time.')
hm2AgentSwitchIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetMask.setDescription('The netmask assigned to this interface. When setting this value, the value of hm2AgentSwitchIpInterfaceIpAddress must be set at the same time.')
hm2AgentSwitchIpInterfaceClearIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 5), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceClearIp.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceClearIp.setDescription("When setting this object to 'enable(1)' the interfaces IP address and netmask will be set back to 0.0.0.0. Reading this object always returns 'disable(2).")
hm2AgentSwitchIpInterfaceRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceRoutingMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceRoutingMode.setDescription('Enables or disables routing for this interface.')
hm2AgentSwitchIpInterfaceProxyARPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceProxyARPMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceProxyARPMode.setDescription('Enables or disables proxy ARP for this interface.')
hm2AgentSwitchIpInterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 12266), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceMtuValue.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceMtuValue.setDescription('Configures the MTU value for this interface. The applicable range is 68 to the <interface MTU value - 18>, in bytes. Get of this object returns the effective MTU value on the interface. Set of this object with a value of 0 resets the MTU to the default IP MTU value on the interface. If a packet is received where the size exceeds the mtu value, an icmp destination unreachable message is sent back to the sender with the current mtu.')
hm2AgentSwitchIpInterfaceBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceBandwidth.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceBandwidth.setDescription('Configures the bandwidth value for this interface. If the returned value is 0, bandwidth for this interface is not configured.')
hm2AgentSwitchIpInterfaceUnnumberedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceUnnumberedIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceUnnumberedIfIndex.setDescription('If this object is non-zero, it indicates that the interface is unnumbered and specifies which interface the address is borrowed from.')
hm2AgentSwitchIpInterfaceIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpUnreachables.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpUnreachables.setDescription('If this object is enabled, it indicates that ICMP unreachables can be sent on this interface.')
hm2AgentSwitchIpInterfaceIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpRedirects.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceIcmpRedirects.setDescription('If this object is enabled and hm2AgentSwitchIpIcmpRedirectsMode is also enabled, ICMP redirects can be sent on this interface.')
hm2AgentSwitchDhcpOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("renew", 1), ("release", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchDhcpOperation.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchDhcpOperation.setDescription('Renew or release the IP address learned through DHCP. Get on this object always gives none. None means no operation is performed on DHCP.')
hm2AgentSwitchIpInterfaceSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsuppressed", 0), ("suppressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceSuppressed.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceSuppressed.setDescription(" This mib variable contains the following values, which has the meaning as: 'unsuppressed' - The interface is not suppressed 'suppressed' - The interface is suppressed ")
hm2AgentSwitchIpInterfaceNumberOfFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNumberOfFlaps.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNumberOfFlaps.setDescription('This mib variable displays the number of flaps occurred on the interface')
hm2AgentSwitchIpInterfaceCurrentPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceCurrentPenalty.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceCurrentPenalty.setDescription('This mib variable displays the current penalty of an interface')
hm2AgentSwitchIpInterfaceReUseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceReUseTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceReUseTime.setDescription('This mib variable displays the number of seconds until the interface is allowed to come up ')
hm2AgentSwitchIpInterfaceNetdirectedBCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 3, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetdirectedBCMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpInterfaceNetdirectedBCMode.setDescription('Enables or disables netdirected broadcasts for this interface.')
hm2AgentSwitchIpRouterDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4), )
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryTable.setDescription('There is no global administrative flag for router discovery. The global routing flag (hm2AgentSwitchIpRoutingMode) will be used for this purpose. If routing is disabled, router discovery is disabled as well.')
hm2AgentSwitchIpRouterDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpRouterDiscoveryIfIndex"))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryEntry.setDescription('.')
hm2AgentSwitchIpRouterDiscoveryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryIfIndex.setDescription('Interface Number to configure Router Discovery on.')
hm2AgentSwitchIpRouterDiscoveryAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertiseMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertiseMode.setDescription('Enable or disable router discovery on the interface.')
hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setDescription('Maximum time allowed between sending router advertisements from the interface.')
hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800)).clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval.setDescription('Minimum time allowed between sending router advertisements from the interface. This value must be less than or equal to hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.')
hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime.setDescription('Value of lifetime field of router advertsisement sent from the interface. This value must be greater than or equal to hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.')
hm2AgentSwitchIpRouterDiscoveryPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryPreferenceLevel.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryPreferenceLevel.setDescription('Preferability of the address as a default router address, related to other addresses on the same subnet. This is defined as the larger the number, the higher the preference.')
hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 4, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress.setDescription('Address used when sending router advertisements from the interface.')
hm2AgentSwitchIpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5), )
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanTable.setDescription('A static VLAN for which routing can be enabled/disabled.')
hm2AgentSwitchIpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanEntry.setDescription('A static VLAN for which routing can be enabled/disabled.')
hm2AgentSwitchIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanId.setDescription("The VLAN's ID.")
hm2AgentSwitchIpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanIfIndex.setDescription('The IfIndex associated with this VLAN.')
hm2AgentSwitchIpVlanRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanRoutingStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpVlanRoutingStatus.setDescription('Status of Routing mode per VLAN. active(1) - VLAN is enabled for routing createAndGo(4) - Adds VLAN entry for routing createAndWait(5) - Adds VLAN entry for routing destroy(6) - Removes VLAN from routing')
hm2AgentSwitchSecondaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6), )
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressTable.setDescription('Contains a list of secondary IP addresses associated with an interface.')
hm2AgentSwitchSecondaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchSecondaryIpAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryAddressEntry.setDescription('A secondary IP address for a given interface. This IP address must not conflict with the IP address configured in the hm2AgentSwitchIpInterfaceTable.')
hm2AgentSwitchSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryIpAddress.setDescription('The secondary IP address assigned to this interface.')
hm2AgentSwitchSecondaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryNetMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryNetMask.setDescription('The secondary netmask assigned to this interface. This value must be set during creation and can not be changed.')
hm2AgentSwitchSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchSecondaryStatus.setDescription('Creates a new entry in the secondary address table. Allowed values are: createAndGo(4) - Creates an entry in this table, associating the address with a given interface. The hm2AgentSwitchSecondaryNetMask object must be set during creation. destroy(6) - Removes the associated address from the interface.')
hm2AgentSwitchIpIcmpControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8))
hm2AgentSwitchIpIcmpEchoReplyMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpEchoReplyMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpEchoReplyMode.setDescription('Sets the administrative Echo Reply Mode.')
hm2AgentSwitchIpIcmpRedirectsMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRedirectsMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRedirectsMode.setDescription('Sets the administrative Mode for sending Redirects. ')
hm2AgentSwitchIpIcmpRateLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitInterval.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitInterval.setDescription('HiOS: Specifies the time interval between tokens being placed in the bucket for ICMP Ratelimit. HiSecOS: Specifies the average minimum time between subsequent ICMP packets for each destination, using a token bucket algorithm. In times without ICMP packets, the tokens accumulate to allow for bursts of up to hm2AgentSwitchIpIcmpRateLimitBurstSize packets.')
hm2AgentSwitchIpIcmpRateLimitBurstSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitBurstSize.setDescription('HiOS: Specifies the number of tokens to be placed after timeout. HiSecOS: The size of the token bucket, fixed at 6 tokens.')
hm2AgentSwitchIntfIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10), )
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressTable.setDescription('Contains a list of IP helper addresses associated with an interface.')
hm2AgentSwitchIpFirstActiveAddressType = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 248), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddressType.setDescription('The type of hm2AgentSwitchIpFirstActiveAddress.')
hm2AgentSwitchIpFirstActiveAddress = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 249), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpFirstActiveAddress.setDescription('The lowest ip address of any active routing interface.')
hm2AgentSwitchIpStaticDefaultPref = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 250), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpStaticDefaultPref.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpStaticDefaultPref.setDescription('The default preference for static routes.')
hm2AgentSwitchIntfIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpInterfaceIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfIpHelperUdpPort"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIntfIpHelperIpAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperAddressEntry.setDescription('An IP helper address for a given interface.')
hm2AgentSwitchIntfIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperUdpPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperUdpPort.setDescription('UDP port number. Received packets with this destination UDP port number are forwarded to the helper address in this entry. A relay entry with port 0 allows dhcp, time, winnameserver, tacacs, dns, tftp, netbios-ns and netbios-dgm relay.')
hm2AgentSwitchIntfIpHelperIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperIpAddress.setDescription('An IP helper address for packets received on this interface. An address of 0.0.0.0 identifies the entry as a discard entry. Packets that match a discard entry are dropped.')
hm2AgentSwitchIntfIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperHitCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperHitCount.setDescription('The number of times a packet has been forwarded or discarded according to this entry.')
hm2AgentSwitchIntfIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIntfIpHelperStatus.setDescription('Creates a new entry in the Helper Address table. Allowed values are: createAndGo(4) - Creates an IP helper entry in this table. destroy(6) - Removes the IP helper entry.')
hm2AgentSwitchClearIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchClearIpDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchClearIpDefaultGateway.setDescription('Resets the Global Default Gateway address.')
hm2AgentRouterRipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 3))
hm2AgentRouterRipAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipAdminState.setDescription('Sets the administrative mode of RIP in the router.')
hm2AgentRouterRipSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipSplitHorizonMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipSplitHorizonMode.setDescription('Sets the RIP split horizon operating mode in the router. A value of none(1) means split horizon processing is disabled. When set to simple(2), the simple split horizon technique is used. When set to poisonReverse(3), the split horizon with poison reverse technique is used. The default split horizon mode is simple(2).')
hm2AgentRouterRipAutoSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipAutoSummaryMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipAutoSummaryMode.setDescription('Sets the RIP auto summarization mode in the router. A value of enable(1) means that routes advertized by this RIP router are combined, or summarized, whenever possible into aggregates. When set to disable(2), routes are not aggregated in RIP updates generated by this router. The default auto summary mode is enable(1).')
hm2AgentRouterRipHostRoutesAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 4), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipHostRoutesAcceptMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipHostRoutesAcceptMode.setDescription('Sets the RIP host route acceptance mode in the router. A value of enable(1) means that host routes advertized to this RIP router will be accepted (learned) into its routing table. When set to disable(2), host routes advertized in RIP updates from neighboring routers are ignored. The default host routes accept mode is enable(1).')
hm2AgentRouterRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetric.setDescription('Default metric of redistributed routes, when RIP redistributes from other protocols. {0} indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..15).')
hm2AgentRouterRipDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultMetricConfigured.setDescription("Flag to determine whether RIP default-metric is configured or not. Set to 'false' to unconfigure the default route metric. Set to 'true' is not allowed.")
hm2AgentRouterRipDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipDefaultInfoOriginate.setDescription('Flag to determine, whether RIP can advertise a default-route learned from another protocol.')
hm2AgentRipRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8), )
if mibBuilder.loadTexts: hm2AgentRipRouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for RIP. Here, RIP is the Destination protocol and the source protocols can be any of : BGP, OSPF, Static, Connected.')
hm2AgentRipRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentRipRouteRedistSource"))
if mibBuilder.loadTexts: hm2AgentRipRouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistEntry.setDescription('The entries of the table.')
hm2AgentRipRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistSource.setDescription('Source route, from which RIP can redistribute routes. This object also acts as the identifier for the RIP redistribution Table entry.')
hm2AgentRipRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMode.setDescription('User enabels/disables route-redistribution for a particular source protocol.')
hm2AgentRipRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into RIP. {0} indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..15).')
hm2AgentRipRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMetricConfigured.setDescription("Flag to determine whether RIP redistribute-metric is configured or not. Set to 'false' to unconfigure redistribute metric. Set to 'true' is not allowed.")
hm2AgentRipRouteRedistMatchInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchInternal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchInternal.setDescription('If this flag is true, RIP redistributes OSPF internal routes. It will be non-applicable, when source protocol is other than ospf.')
hm2AgentRipRouteRedistMatchExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal1.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal1.setDescription('If this flag is true, RIP redistributes OSPF External1 routes. It will be non-applicable, when source protocol is other than ospf.')
hm2AgentRipRouteRedistMatchExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal2.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchExternal2.setDescription('If this flag is true, RIP redistributes OSPF External2 routes. It will be non-applicable, when source protocol is other than ospf.')
hm2AgentRipRouteRedistMatchNSSAExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal1.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal1.setDescription('If this flag is true, RIP redistributes OSPF NSSA-External1 routes. It will be non-applicable, when source protocol is other than ospf.')
hm2AgentRipRouteRedistMatchNSSAExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal2.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistMatchNSSAExternal2.setDescription('If this flag is true, RIP redistributes OSPF NSSA-External2 routes. It will be non-applicable, when source protocol is other than ospf.')
hm2AgentRipRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1000, 1099), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistList.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistList.setDescription('Access-list number of the access-list, which filters routes received from a source-protocol.')
hm2AgentRipRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 8, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistListConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRouteRedistDistListConfigured.setDescription('Flag to determine whether Access-list is configured or not.')
hm2AgentRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9), )
if mibBuilder.loadTexts: hm2AgentRip2IfConfTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRip2IfConfTable.setDescription('A list of subnets which require separate configuration in RIP. Augments rip2IfConfTable in the RIPv2-MIB.')
hm2AgentRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9, 1), )
rip2IfConfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentRip2IfConfEntry"))
hm2AgentRip2IfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentRip2IfConfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRip2IfConfEntry.setDescription('A Single Routing Domain in a single Subnet. Augments rip2IfConfEntry in RIPv2-MIB.')
hm2AgentRip2IfConfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentRip2IfConfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRip2IfConfAuthKeyId.setDescription('The identifier for the authentication key used on this interface. This field is only meaningful when the RIPv2-MIB rip2IfConfAuthType is md5(3); otherwise, the value is not used.')
hm2AgentRouterRipRoutePref = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipRoutePref.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipRoutePref.setDescription('The route preference, sometimes called administrative distance, for RIP routes. A route with a preference of 255 is considered unreachable.')
hm2AgentRouterRipUpdateTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 3, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterRipUpdateTimerInterval.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRipUpdateTimerInterval.setDescription('Sets the RIP update timer interval in the router. This is the time in seconds between two full routing table update packets.')
hm2AgentRouterOspfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 4))
hm2AgentOspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetric.setDescription('Default metric of redistributed routes, when OSPF redistributes from other protocols. {0} indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..16777214).')
hm2AgentOspfDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultMetricConfigured.setDescription("Flag to determine whether OSPF default-metric is configured or not. Set to 'false' to unconfigure the OSPF default-metric. Set to 'true' is not allowed.")
hm2AgentOspfDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginate.setDescription('Flag to determine, whether OSPF can advertise a default-route learned from another protocol.')
hm2AgentOspfDefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateAlways.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateAlways.setDescription("When this flag is true, the router advertises 0.0.0.0/0.0.0.0 always. Without this option, OSPF will only advertise 0.0.0.0/0.0.0.0 if the router's forwarding table contains a default route.")
hm2AgentOspfDefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16777214), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetric.setDescription('Metric of the default route, which OSPF advertises when learned from other protocol. (0) indicates that the parameter is not configured, this value should not be set. Valid range for set is (1..16777214).')
hm2AgentOspfDefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricConfigured.setDescription('Flag to determine whether OSPF default-info originate metric is configured or not. Setting to false unconfigures the default route metric. Setting to true is not allowed.')
hm2AgentOspfDefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultInfoOriginateMetricType.setDescription('Metric Type of the default route,which OSPF advertises when learned from other protocol. It can be 1(external type 1) or 2(external type 2).')
hm2AgentOspfRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8), )
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTable.setDescription('This table contains the MIB objects required to configure route-redistribution for OSPF. Here, OSPF is the Destination protocol and the source protocols can be any of : BGP, RIP, Static, Connected.')
hm2AgentOspfRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteRedistSource"))
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistEntry.setDescription('The entries of the table.')
hm2AgentOspfRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("rip", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSource.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSource.setDescription('Source protocol, from which OSPF can redistribute routes. This object also acts as the identifier for the OSPF redistribution Table entry.')
hm2AgentOspfRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMode.setDescription('User enables/disables route-redistribution for a particular source protocol.')
hm2AgentOspfRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetric.setDescription('Metric used for redistributing a particular source protocol route into OSPF.')
hm2AgentOspfRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricConfigured.setDescription('Flag to determine whether OSPF redistribute-metric is configured or not.')
hm2AgentOspfRouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistMetricType.setDescription('Metric Type of routes,which OSPF redistributes from other source protocols. It can be 1(external type 1) or 2(external type 2).')
hm2AgentOspfRouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistTag.setDescription('It specifies the tag field in routes redistributed by OSPF.')
hm2AgentOspfRouteRedistSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSubnets.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistSubnets.setDescription('If this value is false, then OSPF will not redistribute subnetted routes.')
hm2AgentOspfRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistList.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistList.setDescription('Access-list number of the access-list, which filters routes received from a source-protocol. HiOS: Valid access list numbers are between 1000 and 1099. HiSecOS: Valid access list numbers are between 1 and 10000.')
hm2AgentOspfRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistListConfigured.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteRedistDistListConfigured.setDescription('Flag to determine whether Access-list is configured or not.')
hm2AgentOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9), )
if mibBuilder.loadTexts: hm2AgentOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF. Augments ospfIfTable from the OSPF-MIB.')
hm2AgentOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1), )
ospfIfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfIfEntry"))
hm2AgentOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF. Augments ospfIfEntry in OSPF-MIB.')
hm2AgentOspfIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentOspfIfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfAuthKeyId.setDescription('The identifier for the authentication key used on this interface. This field is only meaningful when the OSPF-MIB ospfIfAuthType is md5(2); otherwise, the value is not used.')
hm2AgentOspfIfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 2), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfIpMtuIgnoreFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfIpMtuIgnoreFlag.setDescription('Configures the IP MTU Ignore Flag value for this OSPF interface.')
hm2AgentOspfIfPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfPassiveMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfPassiveMode.setDescription('Flag to determine whether the interface is passive. A passive interface will not participate in the OSPF adjacency formation.')
hm2AgentOspfIfAdvertiseSecondaries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 4), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfAdvertiseSecondaries.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfAdvertiseSecondaries.setDescription('Configures the advertisability of the secondary addresses configured on this interface.')
hm2AgentOspfIfFastHelloMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 9, 1, 248), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfIfFastHelloMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfFastHelloMode.setDescription('Configures the fast hello mode on this interface. If enabled, hello packets are sent every 250ms, ospfIfHelloInterval is ignored. The dead interval and spf delay need to be re-configured accordingly for faster convergence.')
hm2AgentOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10), )
if mibBuilder.loadTexts: hm2AgentOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfVirtIfTable.setDescription("Information about this router's virtual inter- faces. Augments ospfVirtIfTable from the OSPF-MIB.")
hm2AgentOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10, 1), )
ospfVirtIfEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfVirtIfEntry"))
hm2AgentOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfVirtIfEntry.setDescription('Information about a single Virtual Interface. Augments ospfVirtIfEntry in OSPF-MIB.')
hm2AgentOspfVirtIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentOspfVirtIfAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfVirtIfAuthKeyId.setDescription('The identifier for the authentication key used on this virtual interface. This field is only meaningful when the OSPF-MIB ospfVirtIfAuthType is md5(2); otherwise, the value is not used.')
hm2AgentRouterOspfRFC1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterOspfRFC1583CompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterOspfRFC1583CompatibilityMode.setDescription("From RFC2328: Controls the preference rules used in Section 16.4 when choosing among multiple AS-external-LSAs advertising the same destination. When set to 'enabled', the preference rules remain those specified by RFC 1583 ([Ref9]). When set to 'disabled', the preference rules are those stated in Section 16.4.1, which prevent routing loops when AS- external-LSAs for the same destination have been originated from different areas. Set to 'enabled' by default. In order to minimize the chance of routing loops, all OSPF routers in an OSPF routing domain should have RFC1583Compatibility set identically. When there are routers present that have not been updated with the functionality specified in Section 16.4.1 of this memo, all routers should have RFC1583Compatibility set to 'enabled'. Otherwise, all routers should have RFC1583Compatibility set to 'disabled', preventing all routing loops.")
hm2AgentOspfSpfDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfSpfDelayTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfDelayTime.setDescription('Delay time (in seconds) between when OSPF receives a topology change and when it starts an SPF calculation. It can be an integer from 0 to 65535. The default time is 5 seconds. A value of 0 means that there is no delay; that is, the SPF calculation is started immediately.')
hm2AgentOspfSpfHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfHoldTime.setDescription('Minimum time (in seconds) between two consecutive SPF calculations. It can be an integer from 0 to 65535. The default time is 10 seconds. A value of 0 means that there is no delay; that is, two SPF calculations can be done, one immediately after the other.')
hm2AgentOspfAutoCostRefBw = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAutoCostRefBw.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAutoCostRefBw.setDescription('Auto cost reference bandwidth of the router interfaces for ospf metric calculations. It can be an integer from 1 to 4294967. The default reference bandwidth is 100 Mbps.')
hm2AgentOspfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: hm2AgentOspfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types. This object is persistent and when written the entity SHOULD save the change to non-volatile storage.")
hm2AgentOspfAreaOpaqueLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16), )
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbTable.setDescription("The OSPF Process's Area Link State Database (LSDB). The LSDB contains type-10 Link State Advertisements from throughout the areas that the device is attached to.")
hm2AgentOspfAreaOpaqueLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbAreaId"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaOpaqueLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbEntry.setDescription('A single AreaOpaque Link State Advertisement.')
hm2AgentOspfAreaOpaqueLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
hm2AgentOspfAreaOpaqueLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10))).clone(namedValues=NamedValues(("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
hm2AgentOspfAreaOpaqueLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
hm2AgentOspfAreaOpaqueLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
hm2AgentOspfAreaOpaqueLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
hm2AgentOspfAreaOpaqueLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
hm2AgentOspfAreaOpaqueLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
hm2AgentOspfAreaOpaqueLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 16, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaOpaqueLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size')
hm2AgentOspfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17), )
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbTable.setDescription("The OSPF Process's Link-Local Link State Database for non-virtual links. This table is identical to the OSPF LSDB Table in format, but contains only Link-Local Link State Advertisements for non-virtual links. The purpose is to allow Link-Local LSAs to be displayed for each non-virtual interface. This table is implemented to support type-9 LSAs which are defined in 'The OSPF Opaque LSA Option'.")
hm2AgentOspfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbIpAddress"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbAddressLessIf"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfLocalLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbEntry.setDescription('A single Link State Advertisement.')
hm2AgentOspfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbIpAddress.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbIpAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbIpAddress.setDescription('The IP Address of the interface from which the LSA was received if the interface is numbered.')
hm2AgentOspfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAddressLessIf.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAddressLessIf.setDescription('The Interface Index of the interface from which the LSA was received if the interface is unnumbered.')
hm2AgentOspfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header and ')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
hm2AgentOspfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32 bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
hm2AgentOspfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
hm2AgentOspfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
hm2AgentOspfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 7), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
hm2AgentOspfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
hm2AgentOspfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 17, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLocalLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
hm2AgentOspfAsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18), )
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbTable.setDescription("The OSPF Process's AS-scope LSA Link State Database. The Database contains the AS-scope Link State Advertisements from throughout the areas that the device is attached to. This table is identical to the OSPF LSDB Table in format, but contains only AS-scope Link State Advertisements. The purpose is to allow AS-scope LSAs to be displayed once for the router rather than once in each non-stub area.")
hm2AgentOspfAsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbLsid"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAsLsdbRouterId"))
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbEntry.setDescription('A single Link State Advertisement.')
hm2AgentOspfAsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11))).clone(namedValues=NamedValues(("asOpaqueLink", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
hm2AgentOspfAsLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
hm2AgentOspfAsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
hm2AgentOspfAsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbSequence.setDescription("The sequence number field is a signed 32-bit integer. It starts with the value '80000001'h, or -'7FFFFFFF'h, and increments until '7FFFFFFF'h. Thus, a typical sequence number will be very negative. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.")
hm2AgentOspfAsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
hm2AgentOspfAsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
hm2AgentOspfAsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 18, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements. Note that for variable length LSAs, SNMP agents may not be able to return the largest string size.')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAsLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
hm2AgentOspfDefaultPassiveMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfDefaultPassiveMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultPassiveMode.setDescription('Flag to determine, whether all the interfaces are passive interfaces by default. A passive interface will not participate in the OSPF adjacency formation.')
hm2AgentOspfRoutePrefIntraArea = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefIntraArea.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefIntraArea.setDescription('The route preference, sometimes called administrative distance, for intra-area OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
hm2AgentOspfRoutePrefInterArea = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefInterArea.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefInterArea.setDescription('The route preference, sometimes called administrative distance, for inter-area OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
hm2AgentOspfRoutePrefExternal = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(110)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefExternal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRoutePrefExternal.setDescription('The route preference, sometimes called administrative distance, for external OSPFv2 routes. A route with a preference of 255 is considered unreachable.')
hm2AgentOspfAreaNSSATable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248), )
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSATable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSATable.setDescription('Information about all the configured Not-So-Stubby-Area(NSSAs) in OSPF. Augments ospfAreaTable from the OSPF-MIB.')
hm2AgentOspfAreaNSSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1), )
ospfAreaEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfAreaNSSAEntry"))
hm2AgentOspfAreaNSSAEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAEntry.setDescription('Information about a single Not-So-Stubby-Area(NSSA). Augments ospfAreaEntry in OSPF-MIB.')
hm2AgentOspfAreaNSSAImportSummaries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAImportSummaries.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSAImportSummaries.setDescription("When set to enabled, OSPF's summary routes are imported into the NSSA as Type-3 summary-LSAs. When set to disabled, summary routes are not imported into the NSSA. The default setting is enabled.")
hm2AgentOspfAreaNSSARedistribute = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSARedistribute.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSARedistribute.setDescription('When set to enabled NSSA ASBRs will not redistribute external routes into the NSSA and they will cease to originate Type-7 external LSAs for external routes.')
hm2AgentOspfAreaNSSADefaultInfoOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultInfoOriginate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultInfoOriginate.setDescription('Determines if the router will originate a Type-7 default LSA into the NSSA. This command will cause a default LSA to be originated only if the router is an NSSA ABR or ASBR.')
hm2AgentOspfAreaNSSADefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetric.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetric.setDescription('Defines the metric value advertised in the Type-7 default LSA originated by this router')
hm2AgentOspfAreaNSSADefaultMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 248, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparable", 2), ("nonComparable", 3))).clone('nonComparable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetricType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfAreaNSSADefaultMetricType.setDescription('Defines the metric type advertised in the Type-7 default LSA originated by this router')
hm2AgentOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249), )
if mibBuilder.loadTexts: hm2AgentOspfIfMetricTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfMetricTable.setDescription('Information about interface metrics.')
hm2AgentOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249, 1), )
ospfIfMetricEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfIfMetricEntry"))
hm2AgentOspfIfMetricEntry.setIndexNames(*ospfIfMetricEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfIfMetricEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfMetricEntry.setDescription('Information about interface metrics.')
hm2AgentOspfIfMetricCalculatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 4, 249, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfIfMetricCalculatedCost.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIfMetricCalculatedCost.setDescription('Returns the actual cost value used by OSPF for this interface.')
hm2AgentSnmpTrapFlagsConfigGroupLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 5))
hm2AgentSnmpVRRPNewMasterTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 5, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpVRRPNewMasterTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSnmpVRRPNewMasterTrapFlag.setDescription('This flag enables the sending of VRRP new master notification traps.')
hm2AgentSnmpVRRPAuthFailureTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 5, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSnmpVRRPAuthFailureTrapFlag.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSnmpVRRPAuthFailureTrapFlag.setDescription('This flag enables the sending of VRRP authentication failure notification traps.')
hm2AgentBootpDhcpRelayGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 6))
hm2AgentBootpDhcpRelayMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMaxHopCount.setDescription('The BOOTP/DHCP Max Hop Count. The relay agent silently discards BOOTREQUEST messages whose hops field exceeds the value 16 assuming that the request is looped through the intermediate agents. The default value is 4.')
hm2AgentBootpDhcpRelayMinWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMinWaitTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayMinWaitTime.setDescription("The BOOTP/DHCP Minimum Wait Time. When the BOOTP relay agent receives a BOOTREQUEST message, it MAY use the value of the 'secs' (seconds since client began booting) field of the request as a factor in deciding whether to relay the request or not.")
hm2AgentBootpDhcpRelayCircuitIdOptionMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 6, 5), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayCircuitIdOptionMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBootpDhcpRelayCircuitIdOptionMode.setDescription('The BOOTP/DHCP Circuit ID Option Mode. This flag is set to enable/disable the network element to add/remove the DHCP Relay agent Circuit ID sub-options.')
hm2AgentECMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 7))
hm2AgentECMPOspfMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentECMPOspfMaxPaths.setStatus('current')
if mibBuilder.loadTexts: hm2AgentECMPOspfMaxPaths.setDescription('It sets the number of paths that OSPF can report for a given destination where maxpaths is platform-dependent.')
hm2AgentRouterVrrpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 8))
hm2AgentRouterVrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 8, 1), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentRouterVrrpAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterVrrpAdminState.setDescription('Sets the administrative mode of VRRP in the router.')
hm2AgentVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 9))
hm2AgentRouterVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1), )
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperTable.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of `hm2AgentRouterVrrpOperEntry' items.")
hm2AgentRouterVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperEntry.setDescription('An entry in the table contains operational priority that is associated with a virtual router.')
hm2AgentRouterVrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperPriority.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentRouterVrrpOperPriority.setDescription('This object specifies the operational priority of the VRRP router. This value will be afftected by both the tracking process and the configured priority set by the vrrpOperPriority object.')
hm2AgentRouterVrrpNumberOfFastInst = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 9, 248), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouterVrrpNumberOfFastInst.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterVrrpNumberOfFastInst.setDescription('Number of VRRP instances with advertisement interval less than one second.')
hm2AgentIpHelperGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 11))
hm2AgentIpHelperAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 1), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentIpHelperAdminMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpHelperAdminMode.setDescription('Administratively enable or disable IP helper.')
hm2AgentDhcpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsReceived.setDescription('The Number of DHCP Requests Received. Total number of DHCP requests received from all clients.')
hm2AgentDhcpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDhcpClientMsgsRelayed.setDescription('The Number of DHCP Requests Forwarded. Total number of DHCP requests relayed to a server.')
hm2AgentDhcpServerMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsReceived.setDescription('The number of DHCP messages received from a server.')
hm2AgentDhcpServerMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDhcpServerMsgsRelayed.setDescription('The number of DHCP messages relayed to a server.')
hm2AgentUdpClientMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsReceived.setDescription('The number of UDP messages received from all clients.')
hm2AgentUdpClientMsgsRelayed = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsRelayed.setDescription('The number of UDP messages relayed to a server.')
hm2AgentSwitchIpHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8), )
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressTable.setDescription('Contains a list of IP helper addresses configured globally.')
hm2AgentSwitchIpHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpHelperUdpPort"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchIpHelperAddress"))
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddressEntry.setDescription('An IP Helper address that applies to packets received on any interface.')
hm2AgentSwitchIpHelperUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperUdpPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperUdpPort.setDescription('UDP port number. A relay entry with port 0 allows dhcp, time, winnameserver, tacacs, dns, tftp, netbios-ns and netbios-dgm relay.')
hm2AgentSwitchIpHelperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperAddress.setDescription('The IP Helper address assigned to this interface.')
hm2AgentSwitchIpHelperHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperHitCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperHitCount.setDescription('The number of times a packet has been forwarded or discarded according to this entry.')
hm2AgentSwitchIpHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpHelperStatus.setDescription('Creates a new entry in the global IP Helper address table. Allowed values are: createAndGo(4) - Creates an IP helper entry in this table. destroy(6) - Removes the IP helper entry.')
hm2AgentUdpClientMsgsTtlExpired = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsTtlExpired.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsTtlExpired.setDescription('The number of UDP messages received with an expired TTL.')
hm2AgentUdpClientMsgsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsDiscarded.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUdpClientMsgsDiscarded.setDescription('The number of UDP messages that matched a discard entry.')
hm2AgentInternalVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 12))
hm2AgentInternalVlanBase = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 1), VlanId().clone(4093)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentInternalVlanBase.setStatus('current')
if mibBuilder.loadTexts: hm2AgentInternalVlanBase.setDescription('The VLAN ID internally assigned to the first port-based routing interface.')
hm2AgentInternalVlanPolicy = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ascending", 0), ("descending", 1))).clone('descending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentInternalVlanPolicy.setStatus('current')
if mibBuilder.loadTexts: hm2AgentInternalVlanPolicy.setDescription('Whether to search up or down from the base VLAN ID for a free VLAN ID to assign to a port-based routing interface.')
hm2AgentSwitchInternalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3), )
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanTable.setDescription('Contains a list of VLAN IDs used internally for port-based routing interfaces.')
hm2AgentSwitchInternalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentSwitchInternalVlanId"))
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanEntry.setDescription('A VLAN ID internally assigned to a port-based routing interface.')
hm2AgentSwitchInternalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanId.setDescription('A VLAN ID internally assigned to a port-based routing interface.')
hm2AgentSwitchInternalVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 12, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchInternalVlanIfIndex.setDescription('Interface index of port-based routing interface using this VLAN ID.')
hm2AgentOspfQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 13))
hm2AgentOspfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1), )
if mibBuilder.loadTexts: hm2AgentOspfQueueTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueTable.setDescription('Table lists information about OSPFv2 message queue utilization.')
hm2AgentOspfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfQueueIndex"))
if mibBuilder.loadTexts: hm2AgentOspfQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueEntry.setDescription('Information on a specific OSPFv2 message queue.')
hm2AgentOspfQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentOspfQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueIndex.setDescription('Index value for this message queue.')
hm2AgentOspfQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueName.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueName.setDescription('Name of an OSPFv2 message queue.')
hm2AgentOspfQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueLength.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueLength.setDescription('The number of messages currently in the message queue.')
hm2AgentOspfQueueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueHigh.setDescription('The high water mark of the number of messages in the message queue.')
hm2AgentOspfQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueDrops.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueDrops.setDescription('The number of items dropped because the message queue was full.')
hm2AgentOspfQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 13, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfQueueLimit.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfQueueLimit.setDescription('The maximum number of messages this queue can hold.')
hm2AgentOspfPacketStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 14))
hm2AgentOspfCountersCleared = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfCountersCleared.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfCountersCleared.setDescription('The time since OSPFv2 counters were last cleared, in seconds.')
hm2AgentOspfLsaRetxCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsaRetxCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsaRetxCount.setDescription('The total number of LSAs retransmitted since OSPF counters were last cleared. If the same LSA is retransmitted to multiple neighbors, the count is incremented for each neighbor.')
hm2AgentOspfHellosRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfHellosRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfHellosRx.setDescription('The total number of OSPFv2 Hello packets received since OSPF counters were last cleared.')
hm2AgentOspfHellosTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfHellosTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfHellosTx.setDescription('The total number of OSPFv2 Hello packets transmitted since OSPF counters were last cleared.')
hm2AgentOspfDdRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfDdRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDdRx.setDescription('The total number of OSPFv2 Database Description packets received since OSPF counters were last cleared.')
hm2AgentOspfDdTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfDdTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDdTx.setDescription('The total number of OSPFv2 Database Description packets transmitted since OSPF counters were last cleared.')
hm2AgentOspfLsReqRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsReqRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsReqRx.setDescription('The total number of OSPFv2 LS Request packets received since OSPF counters were last cleared.')
hm2AgentOspfLsReqTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsReqTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsReqTx.setDescription('The total number of OSPFv2 LS Request packets transmitted since OSPF counters were last cleared.')
hm2AgentOspfLsUpdatesRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRx.setDescription('The total number of OSPFv2 LS Update packets received since OSPF counters were last cleared.')
hm2AgentOspfLsUpdatesTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTx.setDescription('The total number of OSPFv2 LS Update packets transmitted since OSPF counters were last cleared.')
hm2AgentOspfLsAckRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsAckRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsAckRx.setDescription('The total number of OSPFv2 LS Acknowledgement packets received since OSPF counters were last cleared.')
hm2AgentOspfLsAckTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsAckTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsAckTx.setDescription('The total number of OSPFv2 LS Acknowledgement packets transmitted since OSPF counters were last cleared.')
hm2AgentOspfLsUpdatesRxMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRxMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesRxMax.setDescription('The maximum rate of OSPFv2 LS Update packets received over any 5-second interval since OSPF counters were last cleared. The rate is given in packets per second (that is, the number of packets received during the 5-second interval, divided by 5).')
hm2AgentOspfLsUpdatesTxMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTxMax.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfLsUpdatesTxMax.setDescription('The maximum rate of OSPFv2 LS Update packets transmitted over any 5-second interval since OSPF counters were last cleared. The rate is given in packets per second (that is, the number of packets transmitted during the 5-second interval, divided by 5).')
hm2AgentOspfType1LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType1LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType1LsasRx.setDescription('The number of type 1 (router) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType2LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType2LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType2LsasRx.setDescription('The number of type 2 (network) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType3LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType3LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType3LsasRx.setDescription('The number of type 3 (network summary) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType4LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType4LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType4LsasRx.setDescription('The number of type 4 (ASBR summary) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType5LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType5LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType5LsasRx.setDescription('The number of type 5 (external) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType7LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType7LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType7LsasRx.setDescription('The number of type 7 (NSSA external) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType9LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType9LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType9LsasRx.setDescription('The number of type 9 (Link Opaque) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType10LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType10LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType10LsasRx.setDescription('The number of type 10 (Area Opaque) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfType11LsasRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfType11LsasRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfType11LsasRx.setDescription('The number of type 11 (AS Opaque) LSAs received since OSPF counters were last cleared.')
hm2AgentOspfSpfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 15), )
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsTable.setDescription('Contains statistics for the twenty most recent SPF runs. Statistics are reported from the oldest SPF first to the most recent.')
hm2AgentOspfSpfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfSpfIndex"))
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsEntry.setDescription('Statistics for a single SPF run.')
hm2AgentOspfSpfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hm2AgentOspfSpfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfIndex.setDescription('Integer that uniquely identifies an SPF run. This value is incremented each time OSPF runs a full routing table calculation.')
hm2AgentOspfSpfStatsDeltaT = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsDeltaT.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsDeltaT.setDescription('How long since this routing table calculation ran. The time is given in seconds.')
hm2AgentOspfSpfStatsIntra = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 3), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsIntra.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsIntra.setDescription('Number of milliseconds to compute intra-area routes.')
hm2AgentOspfSpfStatsSumm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 4), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSumm.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSumm.setDescription('Number of milliseconds to compute inter-area routes.')
hm2AgentOspfSpfStatsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 5), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsExt.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsExt.setDescription('Number of milliseconds to compute external routes.')
hm2AgentOspfSpfStatsSpfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 6), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSpfTotal.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsSpfTotal.setDescription('Number of milliseconds for entire routing table calculation.')
hm2AgentOspfSpfStatsRibUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 7), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsRibUpdate.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsRibUpdate.setDescription('Number of milliseconds to update the common routing table.')
hm2AgentOspfSpfStatsReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsReason.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfSpfStatsReason.setDescription('Reasons why a routing table calculation was required. R - new router LSA, N - new Network LSA, SN - new network summary LSA, SA - new ASBR summary LSA, X - new external LSA.')
hm2AgentRoutingHeapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 16))
hm2AgentRoutingHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapSize.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRoutingHeapSize.setDescription('The size of the routing heap, in bytes. Unicast routing protocols and ARP allocate memory from the routing heap.')
hm2AgentRoutingHeapInUse = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapInUse.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRoutingHeapInUse.setDescription('The number of bytes currently allocated from the routing heap.')
hm2AgentRoutingHeapHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 16, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRoutingHeapHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRoutingHeapHigh.setDescription('High water mark for the number of bytes allocated from the routing heap.')
hm2AgentRoutingTableSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 17))
hm2AgentConnectedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentConnectedRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentConnectedRoutes.setDescription('The number of connected routes in the IPv4 routing table.')
hm2AgentStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStaticRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticRoutes.setDescription('The number of static routes in the IPv4 routing table.')
hm2AgentRipRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRipRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRipRoutes.setDescription('The number of RIP routes in the IPv4 routing table.')
hm2AgentOspfRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRoutes.setDescription('The number of OSPFv2 routes in the IPv4 routing table.')
hm2AgentOspfIntraRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfIntraRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfIntraRoutes.setDescription('The number of OSPFv2 intra-area routes in the IPv4 routing table.')
hm2AgentOspfInterRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfInterRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfInterRoutes.setDescription('The number of OSPFv2 inter-area routes in the IPv4 routing table.')
hm2AgentOspfExt1Routes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfExt1Routes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfExt1Routes.setDescription('The number of OSPFv2 external type 1 routes in the IPv4 routing table.')
hm2AgentOspfExt2Routes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfExt2Routes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfExt2Routes.setDescription('The number of OSPFv2 external type 2 routes in the IPv4 routing table.')
hm2AgentBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBgpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBgpRoutes.setDescription('The number of BGP routes in the IPv4 routing table.')
hm2AgentEbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEbgpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEbgpRoutes.setDescription('The number of external BGP routes in the IPv4 routing table.')
hm2AgentIbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentIbgpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIbgpRoutes.setDescription('The number of internal BGP routes in the IPv4 routing table.')
hm2AgentLocalBgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLocalBgpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLocalBgpRoutes.setDescription('The number of local BGP routes in the IPv4 routing table.')
hm2AgentRejectRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRejectRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRejectRoutes.setDescription('The number of reject routes in the IPv4 routing table.')
hm2AgentTotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentTotalRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentTotalRoutes.setDescription('The number of routes in the IPv4 routing table.')
hm2AgentBestRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBestRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBestRoutes.setDescription('The number of IPv4 routes in the forwarding table.')
hm2AgentBestRoutesHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentBestRoutesHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentBestRoutesHigh.setDescription('The highest number of IPv4 routes in the forwarding table.')
hm2AgentAlternateRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentAlternateRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentAlternateRoutes.setDescription('The number of alternate routes in the IPv4 routing table. An alternate route is less preferred than the best route and is not used for forwarding.')
hm2AgentRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteAdds.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouteAdds.setDescription('The number of routes added to the IPv4 routing table.')
hm2AgentRouteModifies = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteModifies.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouteModifies.setDescription('The number of routes changed in the IPv4 routing table.')
hm2AgentRouteDeletes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentRouteDeletes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouteDeletes.setDescription('The number of routes removed from the IPv4 routing table.')
hm2AgentUnresolvedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUnresolvedRouteAdds.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUnresolvedRouteAdds.setDescription("The number of IPv4 route adds that failed because none of the route's next hops were on a local subnet.")
hm2AgentInvalidRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentInvalidRouteAdds.setStatus('current')
if mibBuilder.loadTexts: hm2AgentInvalidRouteAdds.setDescription('The number of IPv4 routes adds that failed because the route was invalid.')
hm2AgentFailedRouteAdds = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentFailedRouteAdds.setStatus('current')
if mibBuilder.loadTexts: hm2AgentFailedRouteAdds.setDescription('The number of IPv4 routes adds that failed because of a resource limitation in the routing table')
hm2AgentReservedLocals = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentReservedLocals.setStatus('current')
if mibBuilder.loadTexts: hm2AgentReservedLocals.setDescription('The number of IPv4 routing table entries reserved for a local subnet on a routing interface that is down. ')
hm2AgentUniqueNextHops = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUniqueNextHops.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUniqueNextHops.setDescription('The number of distinct next hops used among all IPv4 routes currently in the routing table. These include local interfaces for local routes and neighbors for indirect routes.')
hm2AgentUniqueNextHopsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentUniqueNextHopsHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentUniqueNextHopsHigh.setDescription('The highest count of unique next hops since counters were last cleared.')
hm2AgentNextHopGroups = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentNextHopGroups.setStatus('current')
if mibBuilder.loadTexts: hm2AgentNextHopGroups.setDescription('The current number of next hop groups in use by one or more routes. Each next hop group includes one or more next hops.')
hm2AgentNextHopGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentNextHopGroupsHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentNextHopGroupsHigh.setDescription('The highest count of next hop groups since counters were last cleared.')
hm2AgentEcmpGroups = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpGroups.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpGroups.setDescription('The number of next hop groups with multiple next hops.')
hm2AgentEcmpGroupsHigh = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpGroupsHigh.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpGroupsHigh.setDescription('The high water mark of the number of ECMP groups.')
hm2AgentEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpRoutes.setDescription('The current number of IPv4 routes with multiple next hops.')
hm2AgentTruncEcmpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentTruncEcmpRoutes.setStatus('current')
if mibBuilder.loadTexts: hm2AgentTruncEcmpRoutes.setDescription('The number of ECMP routes that are currently installed in the forwarding table with just one next hop. The forwarding table may limit the number of ECMP routes or the number of ECMP groups. When an ECMP route cannot be installed because such a limit is reached, the route is installed with a single next hop.')
hm2AgentEcmpRetries = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 17, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRetries.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpRetries.setDescription('The number of ECMP routes that have been installed in the forwarding table after initially being installed with a single next hop.')
hm2AgentEcmpCountTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 18), )
if mibBuilder.loadTexts: hm2AgentEcmpCountTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpCountTable.setDescription('A count of the number of routes with each number of ECMP next hops.')
hm2AgentEcmpCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentEcmpNextHopCount"))
if mibBuilder.loadTexts: hm2AgentEcmpCountEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpCountEntry.setDescription('Number of IPv4 routes with a given number of next hops.')
hm2AgentEcmpNextHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hm2AgentEcmpNextHopCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpNextHopCount.setDescription('The number of next hops in a route. From 0 to the maximum number of next hops in an ECMP route. The maximum varies by platform.')
hm2AgentEcmpRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 18, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentEcmpRouteCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentEcmpRouteCount.setDescription('The number of IPv4 routes with agentEcmpNextHopCount next hops.')
hm2AgentOspfStubRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 19))
hm2AgentOspfStubRouterAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("doNotAdvertise", 1), ("advertise", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfStubRouterAdvertisement.setDescription('Specifies how the router LSAs are advertised by the router. The value doNotAdvertise indicates the advertisement of a standard router LSA and is the default value. The value advertise indicates the advertisement of a stub router LSA.')
hm2AgentOspfStubRouterReason = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("configured", 0), ("startup", 1), ("resource-limitation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterReason.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfStubRouterReason.setDescription("This indicates the reason because of which the router is in Stub mode. This is valid only if the agentOspfStubRouterMode is 'active'.")
hm2AgentOspfStubRouterStartupTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterStartupTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfStubRouterStartupTimeRemaining.setDescription("The time remaining (in seconds) for the router to come out of the stub mode. This is valid only if the agentOspfStubRouterReason is 'startup'.")
hm2AgentOspfStubRouterDuration = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 2, 19, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfStubRouterDuration.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfStubRouterDuration.setDescription("Time elapsed (in seconds) since the router last entered the stub router mode. This is valid only if the agentOspfStubRouterMode is 'active' and agentOspfStubRouterReason is 'resource-limitation'.")
hm2AgentOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 249), )
if mibBuilder.loadTexts: hm2AgentOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfNbrTable.setDescription("Information about this router's neighbors. Augments ospfNbrTable from the OSPF-MIB.")
hm2AgentOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 249, 1), )
ospfNbrEntry.registerAugmentions(("HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfNbrEntry"))
hm2AgentOspfNbrEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: hm2AgentOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfNbrEntry.setDescription('Information about a single neighbor. Augments ospfNbrEntry in OSPF-MIB.')
hm2AgentOspfNbrDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 249, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfNbrDeadTime.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfNbrDeadTime.setDescription("The neighbor's Dead Time is the amount of remaining time since the last OSPF hello packet received, before declaring the neighbor status as down.")
hm2AgentOspfRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 250), )
if mibBuilder.loadTexts: hm2AgentOspfRouteTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteTable.setDescription("Information about this router's OSPF routes.")
hm2AgentOspfRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteNet"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentOspfRouteMask"))
if mibBuilder.loadTexts: hm2AgentOspfRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteEntry.setDescription('Information about a single route.')
hm2AgentOspfRouteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hm2AgentOspfRouteNet.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteNet.setDescription('The IP Address of the Net or Subnet indicated by the route.')
hm2AgentOspfRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 2), InetAddressIPv4())
if mibBuilder.loadTexts: hm2AgentOspfRouteMask.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteMask.setDescription('The Subnet Mask that pertains to the Net or Subnet.')
hm2AgentOspfRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteCost.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteCost.setDescription('The route cost calculated in the SPF algorithm to reach the network.')
hm2AgentOspfRouteProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 250, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("intra", 1), ("inter", 2), ("ext-type1", 3), ("ext-type2", 4), ("nssa-type1", 5), ("nssa-type2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentOspfRouteProtoType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRouteProtoType.setDescription('The type of route that was learned from OSPF.')
hm2AgentVrrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 260))
hm2AgentVrrpTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1), )
if mibBuilder.loadTexts: hm2AgentVrrpTrackingTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackingTable.setDescription('This table contains variables to define an entry in the VRRP Tracking database.')
hm2AgentVrrpTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackVrid"), (1, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpTrackId"))
if mibBuilder.loadTexts: hm2AgentVrrpTrackingEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackingEntry.setDescription('The entries of the table.')
hm2AgentVrrpTrackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2AgentVrrpTrackIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackIfIndex.setDescription('DURABLE: { 1:all } The interface number of the virtual router')
hm2AgentVrrpTrackVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hm2AgentVrrpTrackVrid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackVrid.setDescription('DURABLE: { 1:all } The virtual router id for this virtual router')
hm2AgentVrrpTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 3), SnmpAdminString())
if mibBuilder.loadTexts: hm2AgentVrrpTrackId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackId.setDescription('DURABLE: { 1:all } The id of the object being tracked')
hm2AgentVrrpTrackDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpTrackDecrement.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackDecrement.setDescription('DURABLE: { 1:all } The value by wich the current priority of the virtual router is decremented when the tracked object goes DOWN.')
hm2AgentVrrpTrackOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notReady", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpTrackOperStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackOperStatus.setDescription('Shows if the tracked object is currently UP or DOWN or NOT-READY')
hm2AgentVrrpTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentVrrpTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpTrackRowStatus.setDescription('DURABLE: { 1:all } Defines the status of a vrrp tracking database entry. Set to createAndGo(4) to create a new row. Set to destroy(6) to delete an entry. Reads as active(1) if the tracked object exists and is trackable, notReady(3) otherwise.')
hm2AgentVrrpExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2), )
if mibBuilder.loadTexts: hm2AgentVrrpExtTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtTable.setDescription('This table contains variables to define an entry in the VRRP enhancements database.')
hm2AgentVrrpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpExtIfIndex"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpExtVrid"))
if mibBuilder.loadTexts: hm2AgentVrrpExtEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtEntry.setDescription('The entry of the hm2AgentVrrpExtTable.')
hm2AgentVrrpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2AgentVrrpExtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtIfIndex.setDescription('The interface number of the virtual router')
hm2AgentVrrpExtVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hm2AgentVrrpExtVrid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtVrid.setDescription('The virtual router id for this virtual router')
hm2AgentVrrpExtDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainId.setDescription('The domain this virtual router is a member of. If set to 0, the virtual router is not a member of any domain.')
hm2AgentVrrpExtDomainRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("member", 2), ("supervisor", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainRole.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainRole.setDescription('The role of this virtual router in its domain. This is none(1) if the virtual router is not member of a domain, supervisor(3) if it is the supervisor of its domain, member(2) otherwise.')
hm2AgentVrrpExtDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtDomainStatus.setDescription('Shows if the domain configuration is correct for this virtual router')
hm2AgentVrrpExtAdvertAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 6), IpAddress().clone(hexValue="E0000012")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertAddress.setDescription('The IP address advertisements of the virtual router are sent to')
hm2AgentVrrpExtAdvertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 255000)).clone(1000)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertTimer.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtAdvertTimer.setDescription('This is used to set the interval between advertisements in milliseconds. This accesses the same value as vrrpOperAdvertisementInterval.')
hm2AgentVrrpExtCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtCfgPriority.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtCfgPriority.setDescription('The configured priority of the virtual router. This can be different from the operating priority if tracked objects are down or the virtual router is the ip address owner')
hm2AgentVrrpExtNotifyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyAddress.setDescription('The IP address notifications of the virtual router are sent to')
hm2AgentVrrpExtNotifyLinkdown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyLinkdown.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtNotifyLinkdown.setDescription("Enables or disables sending of notification messages if the virtual router's interface goes down.")
hm2AgentVrrpExtPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtPreemptionDelay.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtPreemptionDelay.setDescription('Time (in seconds) after startup of the virtual router by which the preemption of a Master with a lower priority is delayed.')
hm2AgentVrrpPrimaryVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpPrimaryVirtualAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpPrimaryVirtualAddress.setDescription('The virtual IP address in the subnet of the primary ip address on the interface. If no match is found, an unspecified virtual address is returned. If no virtual address is configured, 0.0.0.0 is returned.')
hm2AgentVrrpExtMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("config", 2), ("ttdp", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpExtMethod.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpExtMethod.setDescription('The source of the VRRP instance. User can set the object to none(1), config(2), ttdp(3).')
hm2AgentVrrpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3), )
if mibBuilder.loadTexts: hm2AgentVrrpDomainTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainTable.setDescription('This table contains variables to define an entry in the VRRP domain database.')
hm2AgentVrrpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentVrrpDomainId"))
if mibBuilder.loadTexts: hm2AgentVrrpDomainEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainEntry.setDescription('The entries of the table.')
hm2AgentVrrpDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hm2AgentVrrpDomainId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainId.setDescription('The domain ID.')
hm2AgentVrrpDomainMemberSendAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentVrrpDomainMemberSendAdv.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainMemberSendAdv.setDescription('DURABLE: { 1:all } Determines if the members of this domain send advertisement packets. If set to disabled(2), only the supervisor of the domain sends packets.')
hm2AgentVrrpDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainStatus.setDescription('Shows if the configuration of the domain is complete.')
hm2AgentVrrpDomainSupervisorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorIfIndex.setDescription('The interface number of the supervisor of the domain')
hm2AgentVrrpDomainSupervisorVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorVrid.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorVrid.setDescription('The virtual router id of the supervisor of the domain. 0 if unconfigured')
hm2AgentVrrpDomainOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainOperPriority.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainOperPriority.setDescription('The current operating priority of the domain. This can be different from the configured priority if tracked objects are down. For domain members this is the priority of the supervisor of that Domain if the supervisor is configured and up.')
hm2AgentVrrpDomainSupervisorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 260, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorOperState.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpDomainSupervisorOperState.setDescription('Shows the current operational state of the domain supervisor.')
hm2AgentNeighbourGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 270))
hm2AgentStaticNeighbourTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10), )
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTable.setDescription('.')
hm2AgentStaticNeighbourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentStaticNeighbourAddressType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentStaticNeighbourAddress"))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourEntry.setDescription('.')
hm2AgentStaticNeighbourAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddressType.setDescription('.')
hm2AgentStaticNeighbourAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourAddress.setDescription('.')
hm2AgentStaticNeighbourPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourPhysAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourPhysAddress.setDescription('.')
hm2AgentStaticNeighbourIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourIfIndex.setDescription('.')
hm2AgentStaticNeighbourRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentStaticNeighbourRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourRowStatus.setDescription('The status of this entry. Setting this object destroy will remove the entry.')
hm2AgentDynamicNeighbourTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11), )
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourTable.setDescription('.')
hm2AgentDynamicNeighbourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1), ).setIndexNames((0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentDynamicNeighbourAddressType"), (0, "HM2-PLATFORM-ROUTING-MIB", "hm2AgentDynamicNeighbourAddress"))
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourEntry.setDescription('.')
hm2AgentDynamicNeighbourAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddressType.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddressType.setDescription('.')
hm2AgentDynamicNeighbourAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAddress.setDescription('.')
hm2AgentDynamicNeighbourPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourPhysAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourPhysAddress.setDescription('.')
hm2AgentDynamicNeighbourIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourIfIndex.setDescription('.')
hm2AgentDynamicNeighbourAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 2, 270, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("delete", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAction.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicNeighbourAction.setDescription('.')
hm2AgentRoutingSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 2, 280))
hm2AgentIpHelperTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 1))
if mibBuilder.loadTexts: hm2AgentIpHelperTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpHelperTableFullErrorReturn.setDescription('The maximum number of IP helper entries has been reached')
hm2AgentIpHelperInvalidServerAddrErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 2))
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidServerAddrErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidServerAddrErrorReturn.setDescription('Invalid IP server address.')
hm2AgentRouterOspfDependenciesNotMet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 3))
if mibBuilder.loadTexts: hm2AgentRouterOspfDependenciesNotMet.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterOspfDependenciesNotMet.setDescription('Cannot modify OSPF admin state on this interface. Set primary IP address.')
hm2AgentRouterOspfRangeTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 4))
if mibBuilder.loadTexts: hm2AgentRouterOspfRangeTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterOspfRangeTableFullErrorReturn.setDescription('The maximum number of area-range entries has been reached.')
hm2AgentRouterOspfVirtNbrTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 5))
if mibBuilder.loadTexts: hm2AgentRouterOspfVirtNbrTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterOspfVirtNbrTableFullErrorReturn.setDescription('The maximum number of virtual neighbor entries has been reached.')
hm2AgentRouterRIPDependenciesNotMet = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 8))
if mibBuilder.loadTexts: hm2AgentRouterRIPDependenciesNotMet.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterRIPDependenciesNotMet.setDescription('Cannot modify RIP admin state on this interface. Set primary IP address.')
hm2AgentIpHelperInvalidUdpPortErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 9))
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidUdpPortErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentIpHelperInvalidUdpPortErrorReturn.setDescription('Invalid UDP port.')
hm2AgentStaticNeighbourTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 10))
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentStaticNeighbourTableFullErrorReturn.setDescription('Static Neighbour Table is full.')
hm2AgentSecondaryAddrNoPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 11))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrNoPrimaryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrNoPrimaryErrorReturn.setDescription('Cannot add the secondary IP address because the interface has no primary IP address.')
hm2AgentSecondaryAddrDifferentPrimaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 12))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrDifferentPrimaryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrDifferentPrimaryErrorReturn.setDescription('The secondary IP address must be different from the primary IP address.')
hm2AgentSecondaryAddrWrongIpClassErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 13))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongIpClassErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongIpClassErrorReturn.setDescription('The network number of the secondary IP address is not valid to be used on a routing interface.')
hm2AgentSecondaryAddrWrongSubnetErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 14))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongSubnetErrorReturn.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrWrongSubnetErrorReturn.setDescription('All IP addresses on the interface must be from different subnets.')
hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 15))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn.setDescription('The maximum number of secondary IP addresses on the interface has been reached.')
hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 16))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn.setDescription('The maximum number of IP addresses on the system has been reached.')
hm2AgentSecondaryAddrStaticRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 17))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticRouteErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticRouteErrorReturn.setDescription('The secondary IP address is same as the next hop address of a static route.')
hm2AgentSecondaryAddrStaticARPErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 18))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticARPErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrStaticARPErrorReturn.setDescription('The secondary IP address is same as a static ARP entry.')
hm2AgentSecondaryAddrAbsentEntryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 19))
if mibBuilder.loadTexts: hm2AgentSecondaryAddrAbsentEntryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSecondaryAddrAbsentEntryErrorReturn.setDescription('The secondary IP address is not configured on the interface.')
hm2AgentPrimaryAddrWrongIpClassErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 20))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrWrongIpClassErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrWrongIpClassErrorReturn.setDescription('The primary IP address is out of the allowed IP class.')
hm2AgentPrimaryAddrConflictErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 21))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrConflictErrorReturn.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrConflictErrorReturn.setDescription('The primary IP address conflicts with another IP address on a routing interface.')
hm2AgentPrimaryAddrStaticRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 22))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticRouteErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticRouteErrorReturn.setDescription('The primary IP address is same as the next hop address of a static route.')
hm2AgentPrimaryAddrStaticARPErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 23))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticARPErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrStaticARPErrorReturn.setDescription('The primary IP address is same as a static ARP entry.')
hm2AgentPrimaryAddrExistingSecondaryErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 24))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrExistingSecondaryErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrExistingSecondaryErrorReturn.setDescription('The primary IP address cannot be changed because the interface has secondary IP addresses configured.')
hm2AgentPrimaryAddrNetworkConflictErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 25))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrNetworkConflictErrorReturn.setStatus('obsolete')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrNetworkConflictErrorReturn.setDescription('The primary IP address conflicts with the management IP address.')
hm2AgentPrimaryAddrRoutingTableFullErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 26))
if mibBuilder.loadTexts: hm2AgentPrimaryAddrRoutingTableFullErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPrimaryAddrRoutingTableFullErrorReturn.setDescription('The primary IP address cannot be added because there are no free entries in the routing table.')
hm2AgentDstAddrHostBitSetErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 27))
if mibBuilder.loadTexts: hm2AgentDstAddrHostBitSetErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDstAddrHostBitSetErrorReturn.setDescription('The route cannot be added. Host bits must not be set in the destination. Network address is {0}.')
hm2AgentSamePrefRouteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 28))
if mibBuilder.loadTexts: hm2AgentSamePrefRouteErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSamePrefRouteErrorReturn.setDescription('Route cannot be added because reject route and next hop route cannot share the same preference.')
hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 29))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress.setDescription('The virtual address does not matching the current interface address configuration.')
hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 30))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress.setDescription('The virtual address is not valid with the current interface address configuration.')
hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 31))
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID.setStatus('current')
if mibBuilder.loadTexts: hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID.setDescription('Unknown virtual router id.')
hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 32))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn.setDescription('Min advertisement interval is bigger then max advertisement interval.')
hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 33))
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn.setDescription('Max advertisement interval is bigger then advertisement life time.')
hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 34))
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn.setDescription('Rate limit ratio exceeds 100 packets per second.')
hm2AgentRouterOspfMaxAreaErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 35))
if mibBuilder.loadTexts: hm2AgentRouterOspfMaxAreaErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentRouterOspfMaxAreaErrorReturn.setDescription('The maximum number of OSPF areas has been reached.')
hm2AgentospfRouterIdChange = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 36))
if mibBuilder.loadTexts: hm2AgentospfRouterIdChange.setStatus('current')
if mibBuilder.loadTexts: hm2AgentospfRouterIdChange.setDescription('OSPF must be disabled to change the router ID.')
hm2AgentOspfRedistDistList = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 37))
if mibBuilder.loadTexts: hm2AgentOspfRedistDistList.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfRedistDistList.setDescription('Please add a redistribute list.')
hm2AgentOspfDefaultAreaDeleteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 38))
if mibBuilder.loadTexts: hm2AgentOspfDefaultAreaDeleteErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentOspfDefaultAreaDeleteErrorReturn.setDescription('The default area cannot be deleted.')
hm2AgentLocalArpDeleteErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 39))
if mibBuilder.loadTexts: hm2AgentLocalArpDeleteErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLocalArpDeleteErrorReturn.setDescription('Local ARP entries cannot be deleted.')
hm2AgentDynamicVlanRoutingErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 12, 2, 280, 40))
if mibBuilder.loadTexts: hm2AgentDynamicVlanRoutingErrorReturn.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDynamicVlanRoutingErrorReturn.setDescription('Dynamic VLANs cannot be used for routing interfaces.')
mibBuilder.exportSymbols("HM2-PLATFORM-ROUTING-MIB", hm2AgentDynamicNeighbourPhysAddress=hm2AgentDynamicNeighbourPhysAddress, hm2AgentStaticNeighbourAddressType=hm2AgentStaticNeighbourAddressType, hm2AgentOspfSpfStatsRibUpdate=hm2AgentOspfSpfStatsRibUpdate, hm2AgentRouterRipAdminState=hm2AgentRouterRipAdminState, hm2AgentOspfAsLsdbSequence=hm2AgentOspfAsLsdbSequence, hm2AgentSwitchArpSparseLearn=hm2AgentSwitchArpSparseLearn, hm2AgentStaticNeighbourIfIndex=hm2AgentStaticNeighbourIfIndex, hm2AgentUdpClientMsgsRelayed=hm2AgentUdpClientMsgsRelayed, hm2AgentOspfPacketStatsGroup=hm2AgentOspfPacketStatsGroup, hm2AgentRouteDeletes=hm2AgentRouteDeletes, hm2AgentUdpClientMsgsTtlExpired=hm2AgentUdpClientMsgsTtlExpired, hm2AgentRouterRipHostRoutesAcceptMode=hm2AgentRouterRipHostRoutesAcceptMode, hm2AgentSwitchIntfIpHelperAddressEntry=hm2AgentSwitchIntfIpHelperAddressEntry, hm2AgentSwitchIpVlanEntry=hm2AgentSwitchIpVlanEntry, hm2AgentOspfRouteNet=hm2AgentOspfRouteNet, hm2AgentOspfSpfStatsExt=hm2AgentOspfSpfStatsExt, hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime=hm2AgentSwitchIpRouterDiscoveryAdvertisementLifetime, hm2AgentSnmpTrapFlagsConfigGroupLayer3=hm2AgentSnmpTrapFlagsConfigGroupLayer3, hm2AgentVrrpExtMethod=hm2AgentVrrpExtMethod, hm2AgentSwitchIpHelperHitCount=hm2AgentSwitchIpHelperHitCount, hm2AgentIpHelperInvalidServerAddrErrorReturn=hm2AgentIpHelperInvalidServerAddrErrorReturn, hm2AgentECMPGroup=hm2AgentECMPGroup, hm2AgentSwitchIntfArpEntry=hm2AgentSwitchIntfArpEntry, hm2AgentOspfRoutePrefExternal=hm2AgentOspfRoutePrefExternal, hm2AgentRipRouteRedistMatchInternal=hm2AgentRipRouteRedistMatchInternal, hm2AgentOspfRouteMask=hm2AgentOspfRouteMask, hm2AgentOspfSpfStatsSpfTotal=hm2AgentOspfSpfStatsSpfTotal, hm2AgentSwitchIntfIpHelperHitCount=hm2AgentSwitchIntfIpHelperHitCount, hm2AgentBootpDhcpRelayMaxHopCount=hm2AgentBootpDhcpRelayMaxHopCount, hm2AgentSwitchIpInterfaceIfIndex=hm2AgentSwitchIpInterfaceIfIndex, hm2AgentLocalBgpRoutes=hm2AgentLocalBgpRoutes, hm2AgentVrrpTrackId=hm2AgentVrrpTrackId, hm2AgentVrrpDomainSupervisorVrid=hm2AgentVrrpDomainSupervisorVrid, hm2AgentOspfCountersCleared=hm2AgentOspfCountersCleared, hm2AgentOspfIfAuthKeyId=hm2AgentOspfIfAuthKeyId, hm2AgentTruncEcmpRoutes=hm2AgentTruncEcmpRoutes, hm2AgentVrrpExtGroup=hm2AgentVrrpExtGroup, hm2AgentUdpClientMsgsReceived=hm2AgentUdpClientMsgsReceived, hm2AgentRouterRipSplitHorizonMode=hm2AgentRouterRipSplitHorizonMode, hm2AgentOspfLsaRetxCount=hm2AgentOspfLsaRetxCount, hm2AgentRouterVrrpAdminState=hm2AgentRouterVrrpAdminState, hm2AgentSecondaryAddrWrongIpClassErrorReturn=hm2AgentSecondaryAddrWrongIpClassErrorReturn, hm2AgentVrrpDomainSupervisorOperState=hm2AgentVrrpDomainSupervisorOperState, hm2AgentospfRouterIdChange=hm2AgentospfRouterIdChange, hm2AgentOspfAsLsdbRouterId=hm2AgentOspfAsLsdbRouterId, hm2AgentRouterOspfRFC1583CompatibilityMode=hm2AgentRouterOspfRFC1583CompatibilityMode, hm2AgentBootpDhcpRelayMinWaitTime=hm2AgentBootpDhcpRelayMinWaitTime, hm2AgentSwitchInternalVlanIfIndex=hm2AgentSwitchInternalVlanIfIndex, hm2AgentOspfDefaultInfoOriginateAlways=hm2AgentOspfDefaultInfoOriginateAlways, hm2AgentRouterVrrpOperPriority=hm2AgentRouterVrrpOperPriority, hm2AgentRouterVrrpNumberOfFastInst=hm2AgentRouterVrrpNumberOfFastInst, hm2AgentECMPOspfMaxPaths=hm2AgentECMPOspfMaxPaths, hm2AgentOspfIfIpMtuIgnoreFlag=hm2AgentOspfIfIpMtuIgnoreFlag, hm2AgentOspfRedistDistList=hm2AgentOspfRedistDistList, hm2AgentOspfVirtIfAuthKeyId=hm2AgentOspfVirtIfAuthKeyId, hm2AgentPrimaryAddrExistingSecondaryErrorReturn=hm2AgentPrimaryAddrExistingSecondaryErrorReturn, hm2AgentVrrpTrackIfIndex=hm2AgentVrrpTrackIfIndex, hm2AgentSwitchIpIcmpRedirectsMode=hm2AgentSwitchIpIcmpRedirectsMode, hm2AgentOspfQueueHigh=hm2AgentOspfQueueHigh, hm2AgentVrrpExtNotifyLinkdown=hm2AgentVrrpExtNotifyLinkdown, hm2AgentSwitchProxyArpMaxResponseDelay=hm2AgentSwitchProxyArpMaxResponseDelay, hm2AgentOspfAsLsdbChecksum=hm2AgentOspfAsLsdbChecksum, hm2AgentOspfType7LsasRx=hm2AgentOspfType7LsasRx, hm2AgentRip2IfConfAuthKeyId=hm2AgentRip2IfConfAuthKeyId, hm2AgentOspfAreaOpaqueLsdbChecksum=hm2AgentOspfAreaOpaqueLsdbChecksum, hm2AgentOspfRouteRedistMetricConfigured=hm2AgentOspfRouteRedistMetricConfigured, hm2AgentSwitchIpHelperUdpPort=hm2AgentSwitchIpHelperUdpPort, hm2AgentBestRoutesHigh=hm2AgentBestRoutesHigh, hm2AgentNextHopGroups=hm2AgentNextHopGroups, hm2AgentOspfQueueLimit=hm2AgentOspfQueueLimit, hm2AgentOspfType11LsasRx=hm2AgentOspfType11LsasRx, hm2AgentOspfStubRouterDuration=hm2AgentOspfStubRouterDuration, hm2AgentVrrpPrimaryVirtualAddress=hm2AgentVrrpPrimaryVirtualAddress, hm2AgentRouterVrrpOperTable=hm2AgentRouterVrrpOperTable, hm2AgentOspfIfFastHelloMode=hm2AgentOspfIfFastHelloMode, hm2AgentSwitchInternalVlanTable=hm2AgentSwitchInternalVlanTable, hm2AgentOspfType1LsasRx=hm2AgentOspfType1LsasRx, hm2AgentOspfQueueGroup=hm2AgentOspfQueueGroup, hm2AgentRip2IfConfTable=hm2AgentRip2IfConfTable, hm2AgentOspfStubRouterGroup=hm2AgentOspfStubRouterGroup, hm2AgentRipRouteRedistDistListConfigured=hm2AgentRipRouteRedistDistListConfigured, hm2AgentSnmpVRRPNewMasterTrapFlag=hm2AgentSnmpVRRPNewMasterTrapFlag, hm2AgentOspfIfMetricTable=hm2AgentOspfIfMetricTable, hm2AgentRoutingTableSummaryGroup=hm2AgentRoutingTableSummaryGroup, hm2AgentDynamicNeighbourAction=hm2AgentDynamicNeighbourAction, hm2AgentOspfLocalLsdbIpAddress=hm2AgentOspfLocalLsdbIpAddress, hm2AgentOspfNbrTable=hm2AgentOspfNbrTable, hm2AgentSwitchIpInterfaceCurrentPenalty=hm2AgentSwitchIpInterfaceCurrentPenalty, hm2AgentSwitchIpInterfaceNetMask=hm2AgentSwitchIpInterfaceNetMask, hm2AgentEcmpGroupsHigh=hm2AgentEcmpGroupsHigh, hm2AgentRipRouteRedistMatchExternal2=hm2AgentRipRouteRedistMatchExternal2, hm2AgentOspfIfMetricCalculatedCost=hm2AgentOspfIfMetricCalculatedCost, hm2AgentVrrpDomainStatus=hm2AgentVrrpDomainStatus, hm2AgentPrimaryAddrStaticARPErrorReturn=hm2AgentPrimaryAddrStaticARPErrorReturn, hm2AgentUdpClientMsgsDiscarded=hm2AgentUdpClientMsgsDiscarded, hm2AgentSwitchArpStaticEntryCountCurrent=hm2AgentSwitchArpStaticEntryCountCurrent, hm2AgentOspfSpfStatsEntry=hm2AgentOspfSpfStatsEntry, hm2AgentOspfRouteRedistDistList=hm2AgentOspfRouteRedistDistList, hm2AgentOspfExt1Routes=hm2AgentOspfExt1Routes, hm2AgentSwitchIpInterfaceIcmpUnreachables=hm2AgentSwitchIpInterfaceIcmpUnreachables, hm2AgentOspfQueueIndex=hm2AgentOspfQueueIndex, hm2AgentSwitchIpFirstActiveAddressType=hm2AgentSwitchIpFirstActiveAddressType, hm2AgentUnresolvedRouteAdds=hm2AgentUnresolvedRouteAdds, hm2AgentSwitchSecondaryIpAddress=hm2AgentSwitchSecondaryIpAddress, hm2AgentOspfDefaultInfoOriginateMetricConfigured=hm2AgentOspfDefaultInfoOriginateMetricConfigured, hm2AgentOspfVirtIfTable=hm2AgentOspfVirtIfTable, hm2AgentOspfAreaOpaqueLsdbLsid=hm2AgentOspfAreaOpaqueLsdbLsid, hm2AgentBgpRoutes=hm2AgentBgpRoutes, hm2AgentSamePrefRouteErrorReturn=hm2AgentSamePrefRouteErrorReturn, hm2AgentOspfAsLsdbType=hm2AgentOspfAsLsdbType, hm2AgentAlternateRoutes=hm2AgentAlternateRoutes, hm2AgentRoutingHeapSize=hm2AgentRoutingHeapSize, hm2AgentDynamicNeighbourIfIndex=hm2AgentDynamicNeighbourIfIndex, hm2AgentVrrpTrackVrid=hm2AgentVrrpTrackVrid, hm2AgentOspfIfAdvertiseSecondaries=hm2AgentOspfIfAdvertiseSecondaries, hm2AgentOspfLocalLsdbAddressLessIf=hm2AgentOspfLocalLsdbAddressLessIf, hm2AgentVrrpExtAdvertTimer=hm2AgentVrrpExtAdvertTimer, hm2AgentSecondaryAddrStaticRouteErrorReturn=hm2AgentSecondaryAddrStaticRouteErrorReturn, hm2AgentOspfQueueEntry=hm2AgentOspfQueueEntry, hm2AgentOspfRouteRedistMetricType=hm2AgentOspfRouteRedistMetricType, hm2AgentBootpDhcpRelayGroup=hm2AgentBootpDhcpRelayGroup, hm2AgentStaticRoutes=hm2AgentStaticRoutes, hm2AgentRouterRipUpdateTimerInterval=hm2AgentRouterRipUpdateTimerInterval, hm2AgentOspfRoutePrefInterArea=hm2AgentOspfRoutePrefInterArea, hm2AgentOspfRouteRedistDistListConfigured=hm2AgentOspfRouteRedistDistListConfigured, hm2AgentSwitchIntfArpStatus=hm2AgentSwitchIntfArpStatus, hm2AgentVrrpExtVrid=hm2AgentVrrpExtVrid, hm2AgentSwitchArpStaticEntryCountMax=hm2AgentSwitchArpStaticEntryCountMax, hm2AgentOspfLocalLsdbEntry=hm2AgentOspfLocalLsdbEntry, hm2AgentSwitchArpResponseTime=hm2AgentSwitchArpResponseTime, hm2AgentVrrpTrackingEntry=hm2AgentVrrpTrackingEntry, hm2AgentOspfDefaultInfoOriginateMetricType=hm2AgentOspfDefaultInfoOriginateMetricType, hm2AgentOspfRouteTable=hm2AgentOspfRouteTable, hm2PlatformRouting=hm2PlatformRouting, hm2AgentIbgpRoutes=hm2AgentIbgpRoutes, hm2AgentSwitchArpGroup=hm2AgentSwitchArpGroup, hm2AgentVrrpExtNotifyAddress=hm2AgentVrrpExtNotifyAddress, hm2AgentDynamicNeighbourAddressType=hm2AgentDynamicNeighbourAddressType, hm2AgentOspfDefaultMetricConfigured=hm2AgentOspfDefaultMetricConfigured, hm2AgentOspfDefaultInfoOriginate=hm2AgentOspfDefaultInfoOriginate, hm2AgentRipRoutes=hm2AgentRipRoutes, hm2AgentSwitchIpInterfaceProxyARPMode=hm2AgentSwitchIpInterfaceProxyARPMode, hm2AgentOspfAutoCostRefBw=hm2AgentOspfAutoCostRefBw, hm2AgentSecondaryAddrWrongSubnetErrorReturn=hm2AgentSecondaryAddrWrongSubnetErrorReturn, hm2AgentInternalVlanGroup=hm2AgentInternalVlanGroup, hm2AgentOspfLsUpdatesTx=hm2AgentOspfLsUpdatesTx, hm2AgentSwitchIpStaticDefaultPref=hm2AgentSwitchIpStaticDefaultPref, hm2AgentRipRouteRedistMetric=hm2AgentRipRouteRedistMetric, hm2AgentSwitchIntfArpAge=hm2AgentSwitchIntfArpAge, hm2AgentVrrpExtDomainId=hm2AgentVrrpExtDomainId, hm2AgentStaticNeighbourRowStatus=hm2AgentStaticNeighbourRowStatus, hm2AgentOspfType5LsasRx=hm2AgentOspfType5LsasRx, hm2AgentSwitchIpRouterDiscoveryEntry=hm2AgentSwitchIpRouterDiscoveryEntry, hm2AgentOspfRoutePrefIntraArea=hm2AgentOspfRoutePrefIntraArea, hm2AgentOspfQueueName=hm2AgentOspfQueueName, hm2AgentVrrpDomainSupervisorIfIndex=hm2AgentVrrpDomainSupervisorIfIndex, hm2AgentPrimaryAddrNetworkConflictErrorReturn=hm2AgentPrimaryAddrNetworkConflictErrorReturn, hm2AgentOspfVirtIfEntry=hm2AgentOspfVirtIfEntry, hm2AgentTotalRoutes=hm2AgentTotalRoutes, hm2AgentRouterRIPDependenciesNotMet=hm2AgentRouterRIPDependenciesNotMet, hm2AgentRouterOspfConfigGroup=hm2AgentRouterOspfConfigGroup, hm2AgentSwitchIpInterfaceReUseTime=hm2AgentSwitchIpInterfaceReUseTime, hm2AgentRipRouteRedistMode=hm2AgentRipRouteRedistMode, hm2AgentOspfIfEntry=hm2AgentOspfIfEntry, hm2AgentVrrpExtEntry=hm2AgentVrrpExtEntry, hm2AgentInternalVlanBase=hm2AgentInternalVlanBase, hm2AgentVrrpExtDomainRole=hm2AgentVrrpExtDomainRole, hm2AgentSwitchIpRouterDiscoveryAdvertiseMode=hm2AgentSwitchIpRouterDiscoveryAdvertiseMode, hm2AgentSwitchIpRouterDiscoveryTable=hm2AgentSwitchIpRouterDiscoveryTable, hm2AgentOspfLocalLsdbLsid=hm2AgentOspfLocalLsdbLsid, hm2AgentOspfAsLsdbTable=hm2AgentOspfAsLsdbTable, hm2AgentStaticNeighbourPhysAddress=hm2AgentStaticNeighbourPhysAddress, hm2AgentOspfNbrEntry=hm2AgentOspfNbrEntry, hm2AgentPrimaryAddrWrongIpClassErrorReturn=hm2AgentPrimaryAddrWrongIpClassErrorReturn, hm2AgentSwitchArpTotalEntryCountPeak=hm2AgentSwitchArpTotalEntryCountPeak, hm2AgentOspfAreaNSSATable=hm2AgentOspfAreaNSSATable, hm2AgentOspfInterRoutes=hm2AgentOspfInterRoutes, hm2AgentDynamicVlanRoutingErrorReturn=hm2AgentDynamicVlanRoutingErrorReturn, hm2AgentOspfIfPassiveMode=hm2AgentOspfIfPassiveMode, hm2AgentSwitchIpInterfaceBandwidth=hm2AgentSwitchIpInterfaceBandwidth, hm2AgentEcmpGroups=hm2AgentEcmpGroups, hm2AgentOspfQueueLength=hm2AgentOspfQueueLength, hm2AgentOspfAreaNSSARedistribute=hm2AgentOspfAreaNSSARedistribute, hm2AgentSwitchIntfIpHelperAddressTable=hm2AgentSwitchIntfIpHelperAddressTable, hm2AgentEcmpNextHopCount=hm2AgentEcmpNextHopCount, hm2AgentRoutingHeapInUse=hm2AgentRoutingHeapInUse, hm2AgentRouterRipDefaultMetric=hm2AgentRouterRipDefaultMetric, hm2AgentOspfLsReqTx=hm2AgentOspfLsReqTx, hm2AgentRouteModifies=hm2AgentRouteModifies, hm2AgentOspfLsUpdatesRxMax=hm2AgentOspfLsUpdatesRxMax, hm2AgentPrimaryAddrConflictErrorReturn=hm2AgentPrimaryAddrConflictErrorReturn, hm2AgentOspfAreaNSSADefaultMetricType=hm2AgentOspfAreaNSSADefaultMetricType, hm2AgentOspfSpfIndex=hm2AgentOspfSpfIndex, hm2AgentOspfRouteRedistSubnets=hm2AgentOspfRouteRedistSubnets, hm2AgentSwitchIpInterfaceIcmpRedirects=hm2AgentSwitchIpInterfaceIcmpRedirects, hm2AgentSwitchIntfArpTable=hm2AgentSwitchIntfArpTable, hm2AgentStaticNeighbourTableFullErrorReturn=hm2AgentStaticNeighbourTableFullErrorReturn, hm2AgentOspfAreaNSSAEntry=hm2AgentOspfAreaNSSAEntry, hm2AgentSwitchIpVlanIfIndex=hm2AgentSwitchIpVlanIfIndex, hm2AgentRipRouteRedistMatchNSSAExternal2=hm2AgentRipRouteRedistMatchNSSAExternal2, hm2AgentNeighbourGroup=hm2AgentNeighbourGroup, hm2AgentIpHelperInvalidUdpPortErrorReturn=hm2AgentIpHelperInvalidUdpPortErrorReturn, hm2AgentEcmpRoutes=hm2AgentEcmpRoutes, hm2AgentOspfAreaOpaqueLsdbAdvertisement=hm2AgentOspfAreaOpaqueLsdbAdvertisement, hm2AgentOspfDefaultPassiveMode=hm2AgentOspfDefaultPassiveMode, hm2AgentVrrpTrackOperStatus=hm2AgentVrrpTrackOperStatus, hm2AgentIpHelperTableFullErrorReturn=hm2AgentIpHelperTableFullErrorReturn, hm2AgentSwitchIpRoutingMode=hm2AgentSwitchIpRoutingMode, hm2AgentOspfType4LsasRx=hm2AgentOspfType4LsasRx, hm2AgentRouterRipDefaultInfoOriginate=hm2AgentRouterRipDefaultInfoOriginate, hm2AgentEcmpRetries=hm2AgentEcmpRetries, hm2AgentVrrpDomainEntry=hm2AgentVrrpDomainEntry, hm2AgentPrimaryAddrStaticRouteErrorReturn=hm2AgentPrimaryAddrStaticRouteErrorReturn, hm2AgentOspfLsUpdatesRx=hm2AgentOspfLsUpdatesRx, hm2AgentVrrpExtPreemptionDelay=hm2AgentVrrpExtPreemptionDelay, hm2AgentRipRouteRedistDistList=hm2AgentRipRouteRedistDistList, hm2AgentSwitchIpHelperAddressTable=hm2AgentSwitchIpHelperAddressTable, hm2AgentRipRouteRedistMatchExternal1=hm2AgentRipRouteRedistMatchExternal1, hm2AgentOspfAsLsdbLsid=hm2AgentOspfAsLsdbLsid, hm2AgentOspfSpfStatsDeltaT=hm2AgentOspfSpfStatsDeltaT, hm2AgentOspfRouteRedistTable=hm2AgentOspfRouteRedistTable, hm2AgentPrimaryAddrRoutingTableFullErrorReturn=hm2AgentPrimaryAddrRoutingTableFullErrorReturn, hm2AgentSwitchArpAgeoutTime=hm2AgentSwitchArpAgeoutTime, hm2AgentOspfHellosTx=hm2AgentOspfHellosTx, hm2AgentRouterOspfMaxAreaErrorReturn=hm2AgentRouterOspfMaxAreaErrorReturn, hm2AgentOspfAreaOpaqueLsdbType=hm2AgentOspfAreaOpaqueLsdbType, hm2AgentOspfType10LsasRx=hm2AgentOspfType10LsasRx, hm2AgentConnectedRoutes=hm2AgentConnectedRoutes, hm2AgentSwitchIpHelperStatus=hm2AgentSwitchIpHelperStatus, hm2AgentInvalidRouteAdds=hm2AgentInvalidRouteAdds, hm2AgentVrrpDomainOperPriority=hm2AgentVrrpDomainOperPriority, hm2AgentSwitchSecondaryStatus=hm2AgentSwitchSecondaryStatus, hm2AgentOspfSpfStatsSumm=hm2AgentOspfSpfStatsSumm, hm2AgentOspfIfMetricEntry=hm2AgentOspfIfMetricEntry, hm2AgentDstAddrHostBitSetErrorReturn=hm2AgentDstAddrHostBitSetErrorReturn, hm2AgentSnmpVRRPAuthFailureTrapFlag=hm2AgentSnmpVRRPAuthFailureTrapFlag, PYSNMP_MODULE_ID=hm2PlatformRouting, hm2AgentEbgpRoutes=hm2AgentEbgpRoutes, hm2AgentSwitchIpInterfaceUnnumberedIfIndex=hm2AgentSwitchIpInterfaceUnnumberedIfIndex, hm2AgentOspfStubRouterAdvertisement=hm2AgentOspfStubRouterAdvertisement, hm2AgentOspfLocalLsdbType=hm2AgentOspfLocalLsdbType, hm2AgentRoutingHeapHigh=hm2AgentRoutingHeapHigh, hm2AgentInternalVlanPolicy=hm2AgentInternalVlanPolicy, hm2AgentSecondaryAddrDifferentPrimaryErrorReturn=hm2AgentSecondaryAddrDifferentPrimaryErrorReturn, hm2AgentOspfExt2Routes=hm2AgentOspfExt2Routes, hm2AgentRoutingSNMPExtensionGroup=hm2AgentRoutingSNMPExtensionGroup, hm2AgentDhcpServerMsgsReceived=hm2AgentDhcpServerMsgsReceived, hm2AgentOspfLocalLsdbTable=hm2AgentOspfLocalLsdbTable, hm2AgentSwitchIpInterfaceSuppressed=hm2AgentSwitchIpInterfaceSuppressed, hm2AgentOspfLocalLsdbRouterId=hm2AgentOspfLocalLsdbRouterId, hm2AgentOspfStubRouterStartupTimeRemaining=hm2AgentOspfStubRouterStartupTimeRemaining, hm2AgentSwitchIpInterfaceNumberOfFlaps=hm2AgentSwitchIpInterfaceNumberOfFlaps, hm2AgentSwitchInternalVlanId=hm2AgentSwitchInternalVlanId, hm2AgentOspfStubRouterReason=hm2AgentOspfStubRouterReason)
mibBuilder.exportSymbols("HM2-PLATFORM-ROUTING-MIB", hm2AgentRouterRipRoutePref=hm2AgentRouterRipRoutePref, hm2AgentOspfDdRx=hm2AgentOspfDdRx, hm2AgentOspfAreaNSSADefaultInfoOriginate=hm2AgentOspfAreaNSSADefaultInfoOriginate, hm2AgentVrrpOperations=hm2AgentVrrpOperations, hm2AgentOspfAreaOpaqueLsdbEntry=hm2AgentOspfAreaOpaqueLsdbEntry, hm2AgentSwitchArpDynamicRenew=hm2AgentSwitchArpDynamicRenew, hm2AgentSwitchIpVlanRoutingStatus=hm2AgentSwitchIpVlanRoutingStatus, hm2AgentSwitchArpCacheSize=hm2AgentSwitchArpCacheSize, hm2AgentOspfType3LsasRx=hm2AgentOspfType3LsasRx, hm2AgentOspfRouteRedistTag=hm2AgentOspfRouteRedistTag, hm2AgentBootpDhcpRelayCircuitIdOptionMode=hm2AgentBootpDhcpRelayCircuitIdOptionMode, hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn=hm2AgentSwitchIpRouterDiscMinMaxAdvtIntErrorRtrn, hm2AgentOspfDdTx=hm2AgentOspfDdTx, hm2AgentVrrpExtDomainStatus=hm2AgentVrrpExtDomainStatus, hm2AgentOspfLsAckRx=hm2AgentOspfLsAckRx, hm2AgentSwitchDhcpOperation=hm2AgentSwitchDhcpOperation, hm2AgentSwitchLocalProxyArpEntry=hm2AgentSwitchLocalProxyArpEntry, hm2AgentOspfSpfStatsReason=hm2AgentOspfSpfStatsReason, hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn=hm2AgentSecondaryAddrMaxSystemEntriesErrorReturn, hm2AgentSwitchIpIcmpControlGroup=hm2AgentSwitchIpIcmpControlGroup, hm2AgentRouterOspfVirtNbrTableFullErrorReturn=hm2AgentRouterOspfVirtNbrTableFullErrorReturn, hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval=hm2AgentSwitchIpRouterDiscoveryMinAdvertisementInterval, hm2AgentOspfAreaOpaqueLsdbSequence=hm2AgentOspfAreaOpaqueLsdbSequence, hm2AgentOspfAsLsdbEntry=hm2AgentOspfAsLsdbEntry, hm2AgentVrrpExtCfgPriority=hm2AgentVrrpExtCfgPriority, hm2AgentSwitchIpInterfaceNetdirectedBCMode=hm2AgentSwitchIpInterfaceNetdirectedBCMode, hm2AgentSwitchIntfIpHelperUdpPort=hm2AgentSwitchIntfIpHelperUdpPort, hm2AgentRouterRipAutoSummaryMode=hm2AgentRouterRipAutoSummaryMode, hm2AgentOspfAreaOpaqueLsdbAreaId=hm2AgentOspfAreaOpaqueLsdbAreaId, hm2AgentOspfDefaultInfoOriginateMetric=hm2AgentOspfDefaultInfoOriginateMetric, hm2AgentSwitchArpCacheClear=hm2AgentSwitchArpCacheClear, hm2AgentOspfSpfDelayTime=hm2AgentOspfSpfDelayTime, hm2AgentSwitchIpInterfaceEntry=hm2AgentSwitchIpInterfaceEntry, hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn=hm2AgentSwitchIpRouterDiscLifeTimeMaxAdvIntErrorRtrn, hm2AgentOspfIfTable=hm2AgentOspfIfTable, hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn=hm2AgentSwitchIpIcmpRateLimitExceedingRatioErrorReturn, hm2AgentSwitchIpGroup=hm2AgentSwitchIpGroup, hm2AgentOspfRoutes=hm2AgentOspfRoutes, hm2AgentOspfNbrDeadTime=hm2AgentOspfNbrDeadTime, hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress=hm2AgentVrrpAssoIpAddrRowStatusInconsistentAddress, hm2AgentVrrpExtIfIndex=hm2AgentVrrpExtIfIndex, hm2AgentDhcpClientMsgsRelayed=hm2AgentDhcpClientMsgsRelayed, hm2AgentDhcpServerMsgsRelayed=hm2AgentDhcpServerMsgsRelayed, hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn=hm2AgentSecondaryAddrMaxIntfEntriesErrorReturn, hm2AgentRoutingHeapGroup=hm2AgentRoutingHeapGroup, hm2AgentSwitchIpRouterDiscoveryPreferenceLevel=hm2AgentSwitchIpRouterDiscoveryPreferenceLevel, hm2AgentSecondaryAddrNoPrimaryErrorReturn=hm2AgentSecondaryAddrNoPrimaryErrorReturn, hm2AgentOspfType9LsasRx=hm2AgentOspfType9LsasRx, hm2AgentDynamicNeighbourEntry=hm2AgentDynamicNeighbourEntry, hm2AgentOspfLocalLsdbAdvertisement=hm2AgentOspfLocalLsdbAdvertisement, hm2AgentRejectRoutes=hm2AgentRejectRoutes, hm2AgentOspfLocalLsdbAge=hm2AgentOspfLocalLsdbAge, hm2AgentVrrpDomainMemberSendAdv=hm2AgentVrrpDomainMemberSendAdv, hm2AgentOspfDefaultMetric=hm2AgentOspfDefaultMetric, hm2AgentSwitchClearIpDefaultGateway=hm2AgentSwitchClearIpDefaultGateway, hm2AgentRouterVrrpOperEntry=hm2AgentRouterVrrpOperEntry, hm2AgentVrrpExtAdvertAddress=hm2AgentVrrpExtAdvertAddress, hm2AgentOspfSpfStatsIntra=hm2AgentOspfSpfStatsIntra, hm2AgentOspfAreaOpaqueLsdbAge=hm2AgentOspfAreaOpaqueLsdbAge, hm2AgentOspfRouteProtoType=hm2AgentOspfRouteProtoType, hm2AgentSwitchIPAddressConfigMethod=hm2AgentSwitchIPAddressConfigMethod, hm2AgentSwitchLocalProxyArpTable=hm2AgentSwitchLocalProxyArpTable, hm2AgentUniqueNextHopsHigh=hm2AgentUniqueNextHopsHigh, hm2AgentSwitchIpIcmpEchoReplyMode=hm2AgentSwitchIpIcmpEchoReplyMode, hm2AgentOspfRouteRedistSource=hm2AgentOspfRouteRedistSource, hm2AgentRipRouteRedistTable=hm2AgentRipRouteRedistTable, hm2AgentOspfAreaOpaqueLsdbTable=hm2AgentOspfAreaOpaqueLsdbTable, hm2AgentOspfRouteCost=hm2AgentOspfRouteCost, hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval=hm2AgentSwitchIpRouterDiscoveryMaxAdvertisementInterval, hm2AgentSecondaryAddrAbsentEntryErrorReturn=hm2AgentSecondaryAddrAbsentEntryErrorReturn, hm2AgentOspfHellosRx=hm2AgentOspfHellosRx, hm2AgentOspfQueueTable=hm2AgentOspfQueueTable, hm2AgentOspfSpfHoldTime=hm2AgentOspfSpfHoldTime, hm2AgentSwitchIpVlanId=hm2AgentSwitchIpVlanId, hm2AgentRouterOspfRangeTableFullErrorReturn=hm2AgentRouterOspfRangeTableFullErrorReturn, hm2AgentSwitchIntfArpIfIndex=hm2AgentSwitchIntfArpIfIndex, hm2AgentIpHelperGroup=hm2AgentIpHelperGroup, hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress=hm2AgentVrrpAssoIpAddrRowStatusInvalidAddress, hm2AgentVrrpTrackDecrement=hm2AgentVrrpTrackDecrement, hm2AgentNextHopGroupsHigh=hm2AgentNextHopGroupsHigh, hm2AgentVrrpExtTable=hm2AgentVrrpExtTable, hm2AgentOspfOpaqueLsaSupport=hm2AgentOspfOpaqueLsaSupport, hm2AgentSwitchArpTotalEntryCountCurrent=hm2AgentSwitchArpTotalEntryCountCurrent, hm2AgentSwitchSecondaryNetMask=hm2AgentSwitchSecondaryNetMask, hm2AgentEcmpCountTable=hm2AgentEcmpCountTable, hm2AgentBestRoutes=hm2AgentBestRoutes, hm2AgentOspfSpfStatsTable=hm2AgentOspfSpfStatsTable, hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID=hm2AgentVrrpAssoIpAddrRowStatusUnknownVRID, hm2AgentOspfIntraRoutes=hm2AgentOspfIntraRoutes, hm2AgentDynamicNeighbourTable=hm2AgentDynamicNeighbourTable, hm2AgentRouterRipDefaultMetricConfigured=hm2AgentRouterRipDefaultMetricConfigured, hm2AgentOspfRouteRedistMetric=hm2AgentOspfRouteRedistMetric, hm2AgentSwitchIpInterfaceIpAddress=hm2AgentSwitchIpInterfaceIpAddress, hm2AgentOspfAsLsdbAge=hm2AgentOspfAsLsdbAge, hm2AgentOspfType2LsasRx=hm2AgentOspfType2LsasRx, hm2AgentVrrpTrackRowStatus=hm2AgentVrrpTrackRowStatus, hm2AgentSwitchIpHelperAddress=hm2AgentSwitchIpHelperAddress, hm2AgentStaticNeighbourTable=hm2AgentStaticNeighbourTable, hm2AgentSwitchLocalProxyArpMode=hm2AgentSwitchLocalProxyArpMode, hm2AgentOspfRouteRedistEntry=hm2AgentOspfRouteRedistEntry, hm2AgentSwitchArpMaxRetries=hm2AgentSwitchArpMaxRetries, hm2AgentRipRouteRedistMatchNSSAExternal1=hm2AgentRipRouteRedistMatchNSSAExternal1, hm2AgentOspfAreaNSSAImportSummaries=hm2AgentOspfAreaNSSAImportSummaries, hm2AgentSwitchIpDefaultGateway=hm2AgentSwitchIpDefaultGateway, hm2AgentVrrpTrackingTable=hm2AgentVrrpTrackingTable, hm2AgentRouterOspfDependenciesNotMet=hm2AgentRouterOspfDependenciesNotMet, hm2AgentStaticNeighbourAddress=hm2AgentStaticNeighbourAddress, hm2AgentRipRouteRedistMetricConfigured=hm2AgentRipRouteRedistMetricConfigured, hm2AgentRouteAdds=hm2AgentRouteAdds, hm2AgentOspfAsLsdbAdvertisement=hm2AgentOspfAsLsdbAdvertisement, hm2AgentEcmpRouteCount=hm2AgentEcmpRouteCount, hm2AgentOspfLsAckTx=hm2AgentOspfLsAckTx, hm2AgentSwitchIntfArpMacAddress=hm2AgentSwitchIntfArpMacAddress, hm2AgentOspfLocalLsdbSequence=hm2AgentOspfLocalLsdbSequence, hm2AgentSwitchIpVlanTable=hm2AgentSwitchIpVlanTable, hm2AgentSwitchSecondaryAddressEntry=hm2AgentSwitchSecondaryAddressEntry, hm2AgentEcmpCountEntry=hm2AgentEcmpCountEntry, hm2AgentOspfAreaNSSADefaultMetric=hm2AgentOspfAreaNSSADefaultMetric, hm2AgentLocalArpDeleteErrorReturn=hm2AgentLocalArpDeleteErrorReturn, hm2AgentOspfLsReqRx=hm2AgentOspfLsReqRx, hm2AgentSwitchIpIcmpRateLimitInterval=hm2AgentSwitchIpIcmpRateLimitInterval, hm2AgentSwitchIpFirstActiveAddress=hm2AgentSwitchIpFirstActiveAddress, hm2AgentSwitchIpInterfaceTable=hm2AgentSwitchIpInterfaceTable, hm2AgentSwitchIpInterfaceClearIp=hm2AgentSwitchIpInterfaceClearIp, hm2AgentSwitchIpInterfaceMtuValue=hm2AgentSwitchIpInterfaceMtuValue, hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress=hm2AgentSwitchIpRouterDiscoveryAdvertisementAddress, hm2AgentOspfQueueDrops=hm2AgentOspfQueueDrops, hm2AgentStaticNeighbourEntry=hm2AgentStaticNeighbourEntry, hm2AgentOspfAreaOpaqueLsdbRouterId=hm2AgentOspfAreaOpaqueLsdbRouterId, hm2AgentSecondaryAddrStaticARPErrorReturn=hm2AgentSecondaryAddrStaticARPErrorReturn, hm2AgentRip2IfConfEntry=hm2AgentRip2IfConfEntry, hm2AgentRipRouteRedistSource=hm2AgentRipRouteRedistSource, hm2AgentSwitchIntfArpIpAddress=hm2AgentSwitchIntfArpIpAddress, hm2AgentSwitchIpRouterDiscoveryIfIndex=hm2AgentSwitchIpRouterDiscoveryIfIndex, hm2AgentIpHelperAdminMode=hm2AgentIpHelperAdminMode, hm2AgentSwitchInternalVlanEntry=hm2AgentSwitchInternalVlanEntry, hm2AgentReservedLocals=hm2AgentReservedLocals, hm2AgentRouterVrrpConfigGroup=hm2AgentRouterVrrpConfigGroup, hm2AgentFailedRouteAdds=hm2AgentFailedRouteAdds, hm2AgentOspfRouteEntry=hm2AgentOspfRouteEntry, hm2AgentOspfRouteRedistMode=hm2AgentOspfRouteRedistMode, hm2AgentSwitchSecondaryAddressTable=hm2AgentSwitchSecondaryAddressTable, hm2AgentSwitchIntfIpHelperIpAddress=hm2AgentSwitchIntfIpHelperIpAddress, hm2AgentUniqueNextHops=hm2AgentUniqueNextHops, hm2AgentSwitchIpIcmpRateLimitBurstSize=hm2AgentSwitchIpIcmpRateLimitBurstSize, hm2AgentSwitchIpHelperAddressEntry=hm2AgentSwitchIpHelperAddressEntry, hm2AgentVrrpDomainTable=hm2AgentVrrpDomainTable, hm2AgentOspfLocalLsdbChecksum=hm2AgentOspfLocalLsdbChecksum, hm2AgentDynamicNeighbourAddress=hm2AgentDynamicNeighbourAddress, hm2AgentSwitchIntfIpHelperStatus=hm2AgentSwitchIntfIpHelperStatus, hm2AgentVrrpDomainId=hm2AgentVrrpDomainId, hm2AgentSwitchIpInterfaceRoutingMode=hm2AgentSwitchIpInterfaceRoutingMode, hm2AgentOspfLsUpdatesTxMax=hm2AgentOspfLsUpdatesTxMax, hm2AgentOspfDefaultAreaDeleteErrorReturn=hm2AgentOspfDefaultAreaDeleteErrorReturn, hm2AgentRouterRipConfigGroup=hm2AgentRouterRipConfigGroup, hm2AgentDhcpClientMsgsReceived=hm2AgentDhcpClientMsgsReceived, hm2AgentSwitchIntfArpType=hm2AgentSwitchIntfArpType, hm2AgentRipRouteRedistEntry=hm2AgentRipRouteRedistEntry)
