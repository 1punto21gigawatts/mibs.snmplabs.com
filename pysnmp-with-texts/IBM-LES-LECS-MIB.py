#
# PySNMP MIB module IBM-LES-LECS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-LES-LECS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
AtmPrivateAddrEsi, AtmSelector, Bandwidth, mssServerLanE, AtmVccTrafficType = mibBuilder.importSymbols("NWAYSMSS-MIB", "AtmPrivateAddrEsi", "AtmSelector", "Bandwidth", "mssServerLanE", "AtmVccTrafficType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Bits, ObjectIdentity, Counter32, Gauge32, iso, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Bits", "ObjectIdentity", "Counter32", "Gauge32", "iso", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "IpAddress", "NotificationType")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
ibmLesLecsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2))
ibmLesLecsConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1))
ibmLesLecsMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2))
ibmLesLecsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 1))
ibmLesLecsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 2))
lesLecsConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: lesLecsConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsConfTable.setDescription('This table contains the the configuration for LES-LECS interfaces.')
lesLecsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "IBM-LES-LECS-MIB", "lesLecsAtmDevNum"))
if mibBuilder.loadTexts: lesLecsConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsConfEntry.setDescription('Each entry in this table contains configuration parameters for the LES-LECS operation for an individual ATM physical interface. Object lesLecsRowStatus is required during row creation and deletion.')
lesLecsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsOperStatus.setDescription('The operational state of LES/LECS on this entry. Other defines the transition states between up and down.')
lesLecsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsAdminStatus.setDescription('The administrative state of the LES/LECS on this entry.')
lesLecsAtmDevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsAtmDevNum.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsAtmDevNum.setDescription('Identifies ATM device to be used to interface with LECS.')
lesLecsAtmDevLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lesLecsAtmDevLineSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsAtmDevLineSpeed.setDescription('Line Speed of LECS ATM Device. This should not exposed to the user.')
lesLecsUseBurnedInEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsUseBurnedInEsi.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsUseBurnedInEsi.setDescription('Specifies whether a MAC Address burned into the ATM device should be used as the End System Identifier component of local ATM Address used when calling LECS.')
lesLecsConfiguredEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 6), AtmPrivateAddrEsi()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfiguredEsi.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsConfiguredEsi.setDescription('Locally Administered End System Identifier that is to be used as the ESI component of the local ATM Address used when calling the LECS.')
lesLecsConfiguredSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 7), AtmSelector()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfiguredSelector.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsConfiguredSelector.setDescription('Specifies value to be used as Selector field component of local ATM Address used when calling the LECS.')
configDirectVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 8), AtmVccTrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectVccType.setStatus('mandatory')
if mibBuilder.loadTexts: configDirectVccType.setDescription('Specifies type of traffic characteristics to be associated with Configuration Direct VCC to LECS. Bandwidth is not reserved for best effort traffic.')
configDirectPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 9), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectPcr.setStatus('mandatory')
if mibBuilder.loadTexts: configDirectPcr.setDescription('Specifies the Peak Cell Rate (PCR) Traffic Parameter for the Configuration Direct VCC to the LECS. The specified rate is used for both forward and backward directions. When a best effort connection is rejected due to the PCR, the call may be automatically retried with a lower PCR. Retries are performed under the following conditions: if (rejected PCR > 100 Mbps) retry with PCR = 100 Mbps else if (25 < rejected PCR <= 100 Mbps) retry with PCR = 25 Mbps')
configDirectScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 10), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDirectScr.setStatus('mandatory')
if mibBuilder.loadTexts: configDirectScr.setDescription('Specifies the Sustained Cell Rate (SCR) Traffic Parameter for the Configuration Direct VCC to the LECS. The specified rate is used for both forward and backward directions. If the SCR equals the PCR specified in LECS-INTF-7, the call is signalled with PCR only. If SCR is signalled, the Maximum Burst Size traffic parameter is set to accomodate the maximum control frame size of 1516 bytes.')
lesLecsConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 1, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lesLecsConfRowStatus.setReference('RFC 1903, Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).')
if mibBuilder.loadTexts: lesLecsConfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lesLecsConfRowStatus.setDescription('This object is used to create or delete entries in the lesLecsConfTable.')
ibmLesLecsCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 1, 1))
ibmLesLecsMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 2, 2, 2, 1))
mibBuilder.exportSymbols("IBM-LES-LECS-MIB", ibmLesLecsMIBGroups=ibmLesLecsMIBGroups, ibmLesLecsMIBConformance=ibmLesLecsMIBConformance, lesLecsConfiguredEsi=lesLecsConfiguredEsi, configDirectScr=configDirectScr, ibmLesLecsCConfGroup=ibmLesLecsCConfGroup, ibmLesLecsConfGroup=ibmLesLecsConfGroup, lesLecsUseBurnedInEsi=lesLecsUseBurnedInEsi, lesLecsOperStatus=lesLecsOperStatus, lesLecsConfiguredSelector=lesLecsConfiguredSelector, ibmLesLecsMIBCompliances=ibmLesLecsMIBCompliances, ibmLesLecsMIB=ibmLesLecsMIB, lesLecsAdminStatus=lesLecsAdminStatus, configDirectPcr=configDirectPcr, configDirectVccType=configDirectVccType, lesLecsAtmDevNum=lesLecsAtmDevNum, lesLecsConfRowStatus=lesLecsConfRowStatus, lesLecsAtmDevLineSpeed=lesLecsAtmDevLineSpeed, ibmLesLecsMIBCompliance=ibmLesLecsMIBCompliance, lesLecsConfEntry=lesLecsConfEntry, lesLecsConfTable=lesLecsConfTable)
