#
# PySNMP MIB module RBN-IPPOOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-IPPOOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddressPrefixLength, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressPrefixLength", "InetAddress")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPercentage, = mibBuilder.importSymbols("RBN-TC", "RbnPercentage")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, MibIdentifier, ModuleIdentity, iso, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, Unsigned32, Counter32, TimeTicks, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "ModuleIdentity", "iso", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "Unsigned32", "Counter32", "TimeTicks", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
rbnIpPoolMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 15))
rbnIpPoolMib.setRevisions(('2010-02-10 00:00', '2005-06-17 00:00', '2005-03-14 00:00', '2004-09-28 00:00', '2001-11-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnIpPoolMib.setRevisionsDescriptions(('Defined textual conventions for representing IP Pool type and threshold management: RbnInetPoolType, RbnInetIpPoolThresholdType, RbnInetIpPoolThreshold, and RbnInetIpPoolThrshNotify. Added the following tables and notifications to support IPv6: rbnInetIpPoolTable, rbnInetIpPoolCtxTable, rbnInetIpPoolHiFallingThrshMet, rbnInetIpPoolLoFallingThrshMet, rbnInetIpPoolCtxHiFallingThrshMet, rbnInetIpPoolCtxLoFallingThrshMet, Updated CONTACT-INFO. ', 'Added an IP Pool total size object, an IP Pool percentage threshold table and a notification for monitoring per-context IP Pool percentage thresholds.', 'Added an ip pool type, an end ip address for range ip pools, and updated conformance information.', 'Added an ip pool name and updated conformance information.', 'Initial version.',))
if mibBuilder.loadTexts: rbnIpPoolMib.setLastUpdated('201002100000Z')
if mibBuilder.loadTexts: rbnIpPoolMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnIpPoolMib.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134-1362 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com')
if mibBuilder.loadTexts: rbnIpPoolMib.setDescription('Defines the objects necessary to obtain information about IP Pools for interfaces within a context.')
rbnIpPoolMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0))
rbnIpPoolMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1))
rbnIpPoolMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2))
class RbnInetPoolType(TextualConvention, Integer32):
    description = 'Denotes a generic IP Pool Type. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipv6", 1), ("dhcpv6", 2))

class RbnInetIpPoolThresholdType(TextualConvention, Integer32):
    description = ' A value that represents a type of IP Pool threshold value. none(0) No threshold setting. This value MUST be used if the value of all corresponding RbnInetIpPoolThreshold objects in the same logical row are zeroes. absolute(1) RbnInetIpPoolThreshold values in the same logical row defined as absolute values with the range of (1..IP Pool size) percentage(2) RbnInetIpPoolThreshold values in the same logical row defined as percentages with the range of (1..100). Implementations must ensure that RbnInetIpPoolThresholdType objects and any dependent objects (e.g., RbnInetIpPoolThreshold objects) are consistent. The relationship between absolute value and percentage is: absolute = IP Pool size * percentage '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("absolute", 1), ("percentage", 2))

class RbnInetIpPoolThreshold(TextualConvention, Unsigned32):
    description = 'Denotes a generic IP Pool threshold. An RbnInetIpPoolThreshold value is always interpreted within the context of an RbnInetIpPoolThresholdType value. The usages of the RbnInetIpPoolThreshold textual convention in the same logical row is required to specify the RbnInetIpPoolThresholdType object that provides the context. The value of an RbnInetIpPoolThreshold object must always be consistent with the value of the associated RbnInetIpPoolThresholdType object. '
    status = 'current'
    displayHint = 'd'

class RbnInetIpPoolThrshNotify(TextualConvention, Integer32):
    description = ' Denotes a logging method for monitoring falling thresholds '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("log", 1), ("trap", 2), ("both", 3))

rbnIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1), )
if mibBuilder.loadTexts: rbnIpPoolTable.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolTable.setDescription('The purpose of this table is to allow customers to monitor the status of IP Pools on their SMS systems through SNMP. This table contains the objects which identify information about IP Pools. Each row in the table corresponds to one IP Pool for a given interface within a particular context. Objects defined in this table are only accessible within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1), ).setIndexNames((0, "RBN-IPPOOL-MIB", "rbnIpPoolInterfaceIdx"), (0, "RBN-IPPOOL-MIB", "rbnIpPoolAddr"))
if mibBuilder.loadTexts: rbnIpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolEntry.setDescription('A conceptual row in the rbnIpPoolTable.')
rbnIpPoolInterfaceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rbnIpPoolInterfaceIdx.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolInterfaceIdx.setDescription('The index of the interface containing the IP Pool.')
rbnIpPoolAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: rbnIpPoolAddr.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolAddr.setDescription('The start address of the IP Pool.')
rbnIpPoolInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolInterfaceName.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolInterfaceName.setDescription('The name of the interface containing the IP Pool.')
rbnIpPoolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolMask.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolMask.setDescription('The subnet mask of the IP Pool. This object will be instantiated for IP Pools of type subnet only.')
rbnIpPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolSize.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolSize.setDescription('The size of the IP Pool is defined to be the sum of the available addresses plus the unusable addresses.')
rbnIpPoolAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolAvailable.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolAvailable.setDescription('The number of addresses of an IP Pool that are available.')
rbnIpPoolUnusable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolUnusable.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolUnusable.setDescription('Unusable IP addresses in an IP Pool consist of the ip address of the interface, and those used by the network address and the broadcast address of the interface.')
rbnIpPoolInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolInuse.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolInuse.setDescription('The number of addresses of an IP Pool that are in use.')
rbnIpPoolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolThreshold.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolThreshold.setDescription('The threshold of an IP Pool is the value for currently available addresses, as reported in rbnIpPoolAvailable, which causes a trap and/or log message to be generated when this value is reached. This is a falling threshold, so a trap and/or log message will only be sent on a transition of the value of available addresss from (rbnIpPoolThreshold+1) addresses to rbnIpPoolThreshold addresses. Additionally, the action of sending the trap and/or log message is subject to the values of rbnIpPoolSendTrap and rbnIpPoolLogMessage. A value of zero means there is no threshold.')
rbnIpPoolSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolSendTrap.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolSendTrap.setDescription('If true, upon detection of reaching a per-pool threshold event, a trap will be sent. See the definition of the rbnIpPoolThresholdMet for the information included in the trap. Note, both rbnIpPoolSendTrap and rbnIpPoolLogMessage are allowed to be TRUE at the same time.')
rbnIpPoolLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolLogMessage.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolLogMessage.setDescription('If true, upon detection of reaching a per-pool threshold event, a message will be logged. The information contained in the message is the same as that included in the rbnIpPoolThresholdMet trap. Note, both rbnIpPoolSendTrap and rbnIpPoolLogMessage are allowed to be TRUE at the same time.')
rbnIpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolName.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolName.setDescription('The name of the IP Pool.')
rbnIpPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("subnet", 0), ("range", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolType.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolType.setDescription('The type of the IP Pool.')
rbnIpPoolEndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolEndAddr.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolEndAddr.setDescription('The end address of the IP Pool. This object will be instantiated for range IP Pools only.')
rbnIpPoolSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2))
rbnIpPoolContextName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextName.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextName.setDescription('The name of the context containing the IP Pool.')
rbnIpPoolContextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextAvailable.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextAvailable.setDescription('The total number of IP addresses available in all pools of all interfaces in the context valid in the current view.')
rbnIpPoolContextThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextThreshold.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThreshold.setDescription('The per-context threshold of an IP Pool is the value for currently available per-context addresses, as reported in rbnIpPoolContextAvailable, which causes a trap and/or log message to be generated when this value is reached. This is a falling threshold, so a trap and/or log message will only be sent on a transition of the value of available addresss from (rbnIpPoolContextThreshold+1) addresses to rbnIpPoolContextThreshold addresses. Additionally, the action of sending the trap and/or log message is subject to the values of rbnIpPoolContextSendTrap and rbnIpPoolContextLogMessage. A value of zero means there is no per-context threshold.')
rbnIpPoolContextSendTrap = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextSendTrap.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextSendTrap.setDescription('If true, upon detection of a per-context threshold crossing event, a trap will be sent. See the definition of the rbnIpPoolContextThresholdMet for the information included in the trap. Note, both rbnIpPoolContextSendTrap and rbnIpPoolContextLogMessage are allowed to be true at the same time.')
rbnIpPoolContextLogMessage = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextLogMessage.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextLogMessage.setDescription('If true, upon detection of a per-context threshold crossing event, a message will be logged. The information contained in the message logged is the same as that included in the rbnIpPoolContextThresholdMet trap. Note, both rbnIpPoolContextSendTrap and rbnIpPoolContextLogMessage are allowed to be true at the same time.')
rbnIpPoolContextTotalSize = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextTotalSize.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextTotalSize.setDescription('The total number of IP addresses configured in all pools of all interfaces in the context valid in the current view. It is the sum of the available addresses plus the unusable addresses.')
rbnIpPoolContextThresholdPercentTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7), )
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentTable.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentTable.setDescription('The purpose of this table is to allow customers to monitor the status of per-context IP Pool percentage thresholds through SNMP. This table contains the objects which identify information about per-context IP Pool thresholds expressed in percentage. Each row in the table corresponds to one IP Pool percentage threshold configured within a particular context. Objects defined in this table are only accessible within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnIpPoolContextThresholdPercentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7, 1), ).setIndexNames((0, "RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdIndex"))
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentEntry.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentEntry.setDescription('A conceptual row in the rbnIpPoolContextThresholdPercentTable.')
rbnIpPoolContextThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rbnIpPoolContextThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdIndex.setDescription('The index of the IP Pool percentage threshold.')
rbnIpPoolContextThresholdPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7, 1, 2), RbnPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentage.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentage.setDescription('A threshold for the percentage of the number of currently available IP Pool addresses against the total number of IP Pool addresses configured within the context. This is a falling threshold, so an SNMP trap and/or log message will only be sent when the current value, which is the % of rbnIpPoolContextAvailable/rbnIpPoolContextTotalSize truncated to a whole number in percentage, is less than or equal to this threshold, and the percentage value at the last check was greater than this threshold. Additionally, the action of sending the SNMP trap and/or logging a message is subject to the values of rbnIpPoolContextThresholdSendTrap and rbnIpPoolContextThresholdLogMessage.')
rbnIpPoolContextThresholdSendTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextThresholdSendTrap.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdSendTrap.setDescription('If true, upon detection of a per-context threshold crossing event, an SNMP trap will be sent. See the definition of the rbnIpPoolContextThresholdPercentageMet for the information included in the trap. Note, both rbnIpPoolContextThresholdSendTrap and rbnIpPoolContextThresholdLogMessage are allowed to be true at the same time.')
rbnIpPoolContextThresholdLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 2, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIpPoolContextThresholdLogMessage.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdLogMessage.setDescription('If true, upon detection of a per-context threshold crossing event, a message will be logged. The information contained in the message logged is the same as that included in the rbnIpPoolContextThresholdPercentageMet trap. Note, both rbnIpPoolContextThresholdSendTrap and rbnIpPoolContextThresholdLogMessage are allowed to be true at the same time.')
rbnIpPoolThresholdMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 1)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnIpPoolMask"), ("RBN-IPPOOL-MIB", "rbnIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolThreshold"))
if mibBuilder.loadTexts: rbnIpPoolThresholdMet.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolThresholdMet.setDescription('A notification indicating that the per pool falling threshold has been reached.')
rbnIpPoolContextThresholdMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 2)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThreshold"))
if mibBuilder.loadTexts: rbnIpPoolContextThresholdMet.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdMet.setDescription('A notification indicating that the per-context falling threshold has been reached.')
rbnIpPoolContextThresholdPercentageMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 3)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextTotalSize"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdPercentage"))
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentageMet.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextThresholdPercentageMet.setDescription('A notification indicating that the per-context percentage falling threshold has been reached.')
rbnInetIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3), )
if mibBuilder.loadTexts: rbnInetIpPoolTable.setReference('[RFC4861] Neighbor Discovery for IP version 6 (IPv6)')
if mibBuilder.loadTexts: rbnInetIpPoolTable.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolTable.setDescription('This table contains the objects which identify information about IP Pools (such as ND IPv6 pool and DHCP-PD IPv6 Pool). Each row in the table corresponds to one IP Pool for either a given interface within a particular context or only within a particular context . If this pool is only configured per context basis, the interface index is set to zero. The IPv6 pool range is from start prefix/length to the end prefix/length. The prefix length for start and end prefixes are the same, and refer to the prefix length to be advertised or delegated. Objects defined in this table are only accessible within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnInetIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1), ).setIndexNames((0, "RBN-IPPOOL-MIB", "rbnInetIpPoolType"), (0, "RBN-IPPOOL-MIB", "rbnInetIpPoolIfIndex"), (0, "RBN-IPPOOL-MIB", "rbnInetIpPoolStartPrefixType"), (0, "RBN-IPPOOL-MIB", "rbnInetIpPoolStartPrefix"), (0, "RBN-IPPOOL-MIB", "rbnInetIpPoolStartPrefixLen"))
if mibBuilder.loadTexts: rbnInetIpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolEntry.setDescription('A conceptual row in the rbnInetIpPoolTable.')
rbnInetIpPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 1), RbnInetPoolType())
if mibBuilder.loadTexts: rbnInetIpPoolType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolType.setDescription('The type of IP Pool. ')
rbnInetIpPoolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: rbnInetIpPoolIfIndex.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolIfIndex.setDescription("The index of the interface containing the IP Pool. The interface identified by a particular value of this index is the same interface as identified by the same value of the IF-MIB's ifIndex.")
rbnInetIpPoolStartPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 3), InetAddressType())
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefixType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefixType.setDescription('The address type of rbnInetIpPoolPrefix. ')
rbnInetIpPoolStartPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 4), InetAddress())
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefix.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefix.setDescription('The start address prefix of this pool. The address type of this object is specified in rbnInetIpPoolPrefixType. The length of this object is the standard length for objects of that type (always 16 bytes). Any bits after rbnInetIpPoolStartPrefixLen must be zero. ')
rbnInetIpPoolStartPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 5), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefixLen.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolStartPrefixLen.setDescription(' The prefix length associated with this prefix. It refers to advertised or delegated prefix length. ')
rbnInetIpPoolEndPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefixType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefixType.setDescription('The address type of rbnInetIpPoolPrefix. The value of this object is always ipv6 (2). ')
rbnInetIpPoolEndPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefix.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefix.setDescription('The end IP address prefix of this pool. The address type of this object is specified in rbnInetIpPoolPrefixType. Any bits after rbnInetIpPoolPrefixLen must be zero.')
rbnInetIpPoolEndPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 8), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefixLen.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolEndPrefixLen.setDescription(' The IP prefix length associated with this prefix. It refers to the advertised or delegated prefix length. See rbnInetIpPoolEndPrefixLen. ')
rbnInetIpPoolInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolInterfaceName.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolInterfaceName.setDescription('The name of the interface containing the IP Pool.')
rbnInetIpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolName.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolName.setDescription('The name of the IP Pool.')
rbnInetIpPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolSize.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolSize.setDescription('The size of the IP Pool is defined to be the sum of the available prefixes plus the unusable prefixes.')
rbnInetIpPoolAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolAvailable.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolAvailable.setDescription('The number of IP address prefixes of an IP Pool that are available.')
rbnInetIpPoolUnusable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolUnusable.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolUnusable.setDescription('Unusable IP prefixes in an IP Pool. ')
rbnInetIpPoolInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolInuse.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolInuse.setDescription('The number of IP prefixes of an IP Pool that are in use.')
rbnInetIpPoolThrshType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 15), RbnInetIpPoolThresholdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolThrshType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolThrshType.setDescription('This object indicates the value type of all threshold values in this logical row, including rbnInetIpPoolHiFallingThrsh, rbnInetIpPoolLoFallingThrsh. ')
rbnInetIpPoolHiFallingThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 16), RbnInetIpPoolThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingThrsh.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingThrsh.setDescription('The falling threshold of an IP Pool. When the value of rbnInetIpPoolAvailable crosses from (rbnInetIpPoolHiFallingThrsh + 1) to rbnInetIpPoolHiFallingThrsh in either absolute value or percentage specified by rbnInetIpPoolThrshType, a rbnInetIpPoolHiFallingThrshMet notification and/or log is generated. The value of this object should never be smaller than the value of rbnInetIpPoolLoFallingThrsh. A value of zero means that this falling threshold is not configured. ')
rbnInetIpPoolHiFallingNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 17), RbnInetIpPoolThrshNotify()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingNotify.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingNotify.setDescription(' This object specifies if rbnInetIpPoolHiFallingThrshMet and/or log is generated. See the description of rbnInetIpPoolHiFallingThrsh for conditions which generate the notification. ')
rbnInetIpPoolLoFallingThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 18), RbnInetIpPoolThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingThrsh.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingThrsh.setDescription('The falling threshold of an IP Pool. When the value of rbnInetIpPoolAvailable crosses from (rbnInetIpPoolLoFallingThrsh + 1) to rbnInetIpPoolLoFallingThrsh (either absolute value or percentage) specified by rbnInetIpPoolThrshType, a rbnInetIpPoolLoFallingThrshMet notification and/or log is generated. The value of this object should never be greater than the value of rbnInetIpPoolHiFallingThrsh. A value of zero means that this falling threshold is not configured. ')
rbnInetIpPoolLoFallingNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 3, 1, 19), RbnInetIpPoolThrshNotify()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingNotify.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingNotify.setDescription('This object specifies if rbnInetIpPoolLoFallingThrshMet and/or log is generated. See the description of rbnInetIpPoolLoFallingThrsh for conditions which generate the notification. ')
rbnInetIpPoolSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4))
rbnInetIpPoolCtxName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnInetIpPoolCtxName.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxName.setDescription('The name of the context containing the IP Pool.')
rbnInetIpPoolCtxTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2), )
if mibBuilder.loadTexts: rbnInetIpPoolCtxTable.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxTable.setDescription('The purpose of this table is to allow customers to monitor the status of IP Pool context summary and thresholds through SNMP. This table contains the objects which identify information about per-context IP Pool thresholds expressed in absolute value or percentage. Each row in the table corresponds to one IP Pool threshold configured within a particular context. Objects defined in this table are only accessible within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnInetIpPoolCtxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1), ).setIndexNames((0, "RBN-IPPOOL-MIB", "rbnInetIpPoolCtxPoolType"))
if mibBuilder.loadTexts: rbnInetIpPoolCtxEntry.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxEntry.setDescription('A conceptual row in the rbnInetIpPoolCtxTable.')
rbnInetIpPoolCtxPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 1), RbnInetPoolType())
if mibBuilder.loadTexts: rbnInetIpPoolCtxPoolType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxPoolType.setDescription('The type of ip pool. ')
rbnInetIpPoolCtxAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxAvailable.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxAvailable.setDescription('The number of IP address prefixes of an IP Pool that are available.')
rbnInetIpPoolCtxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxPoolSize.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxPoolSize.setDescription('The total number of IP prefixes configured in all pools of all interfaces in the context valid in the current view. It is the sum of the available plus the unusable prefixes.')
rbnInetIpPoolCtxThrshType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 4), RbnInetIpPoolThresholdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxThrshType.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxThrshType.setDescription('This object indicates the value type of all threshold values in this logical row, including rbnInetIpPoolCtxHiFallingThrsh, rbnInetIpPoolCtxLoFallingThrsh. ')
rbnInetIpPoolCtxHiFallingThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 5), RbnInetIpPoolThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingThrsh.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingThrsh.setDescription('The falling threshold of an IP Pool. When the value of rbnInetIpPoolCtxAvailable crosses from (rbnInetIpPoolCtxHiFallingThrsh + 1) to rbnInetIpPoolCtxHiFallingThrsh in either absolute value or percentage specified by rbnInetIpPoolCtxThrshType, a rbnInetIpPoolCtxHiFallingThrshMet notification and/or log is generated. The value of this object should never be smaller than the value of rbnInetIpPoolCtxLoFallingThrsh. A value of zero means that this falling threshold is not configured. ')
rbnInetIpPoolCtxHiFallingNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 6), RbnInetIpPoolThrshNotify()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingNotify.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingNotify.setDescription('This object specifies if rbnInetIpPoolCtxHiFallingThrshMet and/or log is generated. See the description of rbnInetIpPoolCtxHiFallingThrsh for conditions which generate the notification. ')
rbnInetIpPoolCtxLoFallingThrsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 7), RbnInetIpPoolThreshold()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingThrsh.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingThrsh.setDescription('The falling threshold of an IP Pool. When the value of rbnInetIpPoolCtxAvailable crosses from (rbnInetIpPoolCtxLoFallingThrsh + 1) to rbnInetIpPoolCtxLoFallingThrsh (either absolute value or percentage) specified by rbnInetIpPoolCtxThrshType, a rbnInetIpPoolCtxLoFallingThrshMet notification and/or log is generated. The value of this object should never be greater than the value of rbnInetIpPoolCtxHiFallingThrsh. A value of zero means that this falling threshold is not configured. ')
rbnInetIpPoolCtxLoFallingNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 15, 1, 4, 2, 1, 8), RbnInetIpPoolThrshNotify()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingNotify.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingNotify.setDescription(' This object specifies if rbnInetIpPoolCtxLoFallingThrshMet and/or log is generated. See the description of rbnInetIpPoolCtxLoFallingThrsh for conditions which generate the notification. ')
rbnInetIpPoolHiFallingThrshMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 4)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefix"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixLen"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolHiFallingThrsh"))
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingThrshMet.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolHiFallingThrshMet.setDescription('A notification indicating that the falling threshold with the high water mark(rbnInetIpPoolHiFallingThrsh) per IP Pool has been reached.')
rbnInetIpPoolLoFallingThrshMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 5)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefix"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixLen"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolLoFallingThrsh"))
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingThrshMet.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolLoFallingThrshMet.setDescription('A notification indicating that the falling threshold with the low water mark(rbnInetIpPoolLoFallingThrsh) per IP Pool has been reached.')
rbnInetIpPoolCtxHiFallingThrshMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 6)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxHiFallingThrsh"))
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingThrshMet.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxHiFallingThrshMet.setDescription('A notification indicating that the falling threshold with the high water mark(rbnInetIpPoolCtxHiFallingThrsh) per IP Pool has been reached.')
rbnInetIpPoolCtxLoFallingThrshMet = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 15, 0, 7)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxLoFallingThrsh"))
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingThrshMet.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCtxLoFallingThrshMet.setDescription('A notification indicating that the falling threshold with the low water mark(rbnInetIpPoolCtxLoFallingThrsh) per IP Pool has been reached.')
rbnIpPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1))
rbnIpPoolGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2))
rbnIpPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 1)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnIpPoolMask"), ("RBN-IPPOOL-MIB", "rbnIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolUnusable"), ("RBN-IPPOOL-MIB", "rbnIpPoolInuse"), ("RBN-IPPOOL-MIB", "rbnIpPoolThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolLogMessage"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextLogMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolGroup = rbnIpPoolGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolGroup.setDescription('The collection of objects providing interface IP Pool information.')
rbnIpPoolNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 2)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolThresholdMet"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdMet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolNotifyGroup = rbnIpPoolNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolNotifyGroup.setDescription('The collection of notifications related to IP Pools.')
rbnIpPoolNameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 3)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolNameGroup = rbnIpPoolNameGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolNameGroup.setDescription('An object providing the IP pool name.')
rbnIpPoolGroupV2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 4)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnIpPoolMask"), ("RBN-IPPOOL-MIB", "rbnIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolUnusable"), ("RBN-IPPOOL-MIB", "rbnIpPoolInuse"), ("RBN-IPPOOL-MIB", "rbnIpPoolThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolLogMessage"), ("RBN-IPPOOL-MIB", "rbnIpPoolType"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextLogMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolGroupV2 = rbnIpPoolGroupV2.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolGroupV2.setDescription('The collection of objects providing interface IP Pool information.')
rbnIpPoolRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 5)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolEndAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolRangeGroup = rbnIpPoolRangeGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolRangeGroup.setDescription('An object providing an IP pool range information.')
rbnIpPoolInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 6)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnIpPoolMask"), ("RBN-IPPOOL-MIB", "rbnIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolUnusable"), ("RBN-IPPOOL-MIB", "rbnIpPoolInuse"), ("RBN-IPPOOL-MIB", "rbnIpPoolThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolLogMessage"), ("RBN-IPPOOL-MIB", "rbnIpPoolName"), ("RBN-IPPOOL-MIB", "rbnIpPoolType"), ("RBN-IPPOOL-MIB", "rbnIpPoolEndAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolInterfaceGroup = rbnIpPoolInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolInterfaceGroup.setDescription('The collection of objects providing interface IP Pool information.')
rbnIpPoolContextGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 7)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolContextName"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextAvailable"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThreshold"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextLogMessage"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextTotalSize"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdPercentage"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdSendTrap"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdLogMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolContextGroup = rbnIpPoolContextGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolContextGroup.setDescription('The collection of objects providing context IP Pool information.')
rbnIpPoolNotifyGroupV2 = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 8)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolThresholdMet"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdMet"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextThresholdPercentageMet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolNotifyGroupV2 = rbnIpPoolNotifyGroupV2.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolNotifyGroupV2.setDescription('The collection of notifications related to IP Pools.')
rbnInetIpPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 9)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefix"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolEndPrefixLen"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolInterfaceName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolUnusable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolInuse"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolHiFallingThrsh"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolHiFallingNotify"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolLoFallingThrsh"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolLoFallingNotify"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxName"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxAvailable"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxPoolSize"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxThrshType"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxHiFallingThrsh"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxHiFallingNotify"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxLoFallingThrsh"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxLoFallingNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnInetIpPoolGroup = rbnInetIpPoolGroup.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolGroup.setDescription('The collection of objects providing context IP Pool information.')
rbnInetIpPoolNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 2, 10)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolHiFallingThrshMet"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolLoFallingThrshMet"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxHiFallingThrshMet"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolCtxLoFallingThrshMet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnInetIpPoolNotifyGroup = rbnInetIpPoolNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolNotifyGroup.setDescription('The collection of notifications related to IP Pools.')
rbnIpPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 1)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolCompliance = rbnIpPoolCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB.')
rbnIpPoolNameCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 2)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolNameCompliance = rbnIpPoolNameCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolNameCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB, including support for named pools.')
rbnIpPoolComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 3)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolGroupV2"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolComplianceV2 = rbnIpPoolComplianceV2.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolComplianceV2.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB.')
rbnIpPoolNameComplianceV2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 4)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolGroupV2"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolNameGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolNameComplianceV2 = rbnIpPoolNameComplianceV2.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolNameComplianceV2.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB, including support for named pools.')
rbnIpPoolRangeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 5)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolGroupV2"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolRangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolRangeCompliance = rbnIpPoolRangeCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolRangeCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB, including support for range ip pools.')
rbnIpPoolThresholdPercentCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 6)).setObjects(("RBN-IPPOOL-MIB", "rbnIpPoolInterfaceGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolContextGroup"), ("RBN-IPPOOL-MIB", "rbnIpPoolNotifyGroupV2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIpPoolThresholdPercentCompliance = rbnIpPoolThresholdPercentCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnIpPoolThresholdPercentCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback IP Pool MIB, including support for per-context KIP Pool percentage thresholds.')
rbnInetIpPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 15, 2, 1, 7)).setObjects(("RBN-IPPOOL-MIB", "rbnInetIpPoolGroup"), ("RBN-IPPOOL-MIB", "rbnInetIpPoolNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnInetIpPoolCompliance = rbnInetIpPoolCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnInetIpPoolCompliance.setDescription('The compliance statement for SNMP entities which implement the IP Pool MIB, including support DHCP-PD & ND IPv6 Pool.')
mibBuilder.exportSymbols("RBN-IPPOOL-MIB", rbnIpPoolThresholdMet=rbnIpPoolThresholdMet, rbnInetIpPoolCtxLoFallingNotify=rbnInetIpPoolCtxLoFallingNotify, rbnIpPoolGroupV2=rbnIpPoolGroupV2, rbnIpPoolContextAvailable=rbnIpPoolContextAvailable, rbnIpPoolContextThresholdMet=rbnIpPoolContextThresholdMet, rbnIpPoolMIBObjects=rbnIpPoolMIBObjects, rbnIpPoolInterfaceIdx=rbnIpPoolInterfaceIdx, rbnInetIpPoolInuse=rbnInetIpPoolInuse, rbnIpPoolRangeGroup=rbnIpPoolRangeGroup, rbnIpPoolLogMessage=rbnIpPoolLogMessage, rbnInetIpPoolCtxPoolSize=rbnInetIpPoolCtxPoolSize, RbnInetPoolType=RbnInetPoolType, rbnInetIpPoolEndPrefixLen=rbnInetIpPoolEndPrefixLen, rbnInetIpPoolTable=rbnInetIpPoolTable, rbnIpPoolGroup=rbnIpPoolGroup, rbnIpPoolContextName=rbnIpPoolContextName, rbnInetIpPoolEndPrefixType=rbnInetIpPoolEndPrefixType, rbnIpPoolInuse=rbnIpPoolInuse, rbnIpPoolSize=rbnIpPoolSize, rbnIpPoolName=rbnIpPoolName, rbnInetIpPoolName=rbnInetIpPoolName, rbnInetIpPoolHiFallingNotify=rbnInetIpPoolHiFallingNotify, rbnIpPoolContextThresholdIndex=rbnIpPoolContextThresholdIndex, rbnIpPoolMib=rbnIpPoolMib, rbnIpPoolContextThresholdSendTrap=rbnIpPoolContextThresholdSendTrap, rbnIpPoolContextThresholdPercentEntry=rbnIpPoolContextThresholdPercentEntry, rbnIpPoolUnusable=rbnIpPoolUnusable, rbnIpPoolContextThresholdPercentTable=rbnIpPoolContextThresholdPercentTable, rbnIpPoolThreshold=rbnIpPoolThreshold, rbnInetIpPoolSize=rbnInetIpPoolSize, rbnIpPoolRangeCompliance=rbnIpPoolRangeCompliance, rbnInetIpPoolLoFallingThrsh=rbnInetIpPoolLoFallingThrsh, rbnIpPoolNotifyGroupV2=rbnIpPoolNotifyGroupV2, rbnIpPoolMask=rbnIpPoolMask, rbnInetIpPoolCompliance=rbnInetIpPoolCompliance, RbnInetIpPoolThreshold=RbnInetIpPoolThreshold, rbnIpPoolContextSendTrap=rbnIpPoolContextSendTrap, rbnInetIpPoolInterfaceName=rbnInetIpPoolInterfaceName, rbnIpPoolAvailable=rbnIpPoolAvailable, rbnIpPoolType=rbnIpPoolType, rbnInetIpPoolCtxAvailable=rbnInetIpPoolCtxAvailable, rbnIpPoolInterfaceGroup=rbnIpPoolInterfaceGroup, rbnIpPoolNameComplianceV2=rbnIpPoolNameComplianceV2, rbnInetIpPoolUnusable=rbnInetIpPoolUnusable, rbnIpPoolNameGroup=rbnIpPoolNameGroup, rbnIpPoolAddr=rbnIpPoolAddr, rbnIpPoolSummary=rbnIpPoolSummary, rbnInetIpPoolEntry=rbnInetIpPoolEntry, rbnInetIpPoolType=rbnInetIpPoolType, rbnInetIpPoolGroup=rbnInetIpPoolGroup, rbnInetIpPoolCtxEntry=rbnInetIpPoolCtxEntry, rbnIpPoolGroups=rbnIpPoolGroups, rbnIpPoolContextLogMessage=rbnIpPoolContextLogMessage, rbnIpPoolContextThreshold=rbnIpPoolContextThreshold, RbnInetIpPoolThrshNotify=RbnInetIpPoolThrshNotify, rbnInetIpPoolCtxTable=rbnInetIpPoolCtxTable, rbnIpPoolContextThresholdLogMessage=rbnIpPoolContextThresholdLogMessage, rbnInetIpPoolAvailable=rbnInetIpPoolAvailable, rbnInetIpPoolLoFallingNotify=rbnInetIpPoolLoFallingNotify, rbnIpPoolContextThresholdPercentageMet=rbnIpPoolContextThresholdPercentageMet, rbnIpPoolInterfaceName=rbnIpPoolInterfaceName, rbnIpPoolEntry=rbnIpPoolEntry, rbnIpPoolMIBNotifications=rbnIpPoolMIBNotifications, rbnInetIpPoolSummary=rbnInetIpPoolSummary, rbnInetIpPoolHiFallingThrsh=rbnInetIpPoolHiFallingThrsh, rbnIpPoolSendTrap=rbnIpPoolSendTrap, rbnIpPoolComplianceV2=rbnIpPoolComplianceV2, rbnIpPoolNameCompliance=rbnIpPoolNameCompliance, rbnInetIpPoolCtxThrshType=rbnInetIpPoolCtxThrshType, rbnIpPoolTable=rbnIpPoolTable, rbnInetIpPoolThrshType=rbnInetIpPoolThrshType, rbnIpPoolContextThresholdPercentage=rbnIpPoolContextThresholdPercentage, rbnInetIpPoolStartPrefix=rbnInetIpPoolStartPrefix, rbnInetIpPoolCtxPoolType=rbnInetIpPoolCtxPoolType, rbnInetIpPoolCtxName=rbnInetIpPoolCtxName, rbnInetIpPoolCtxLoFallingThrsh=rbnInetIpPoolCtxLoFallingThrsh, rbnInetIpPoolLoFallingThrshMet=rbnInetIpPoolLoFallingThrshMet, rbnIpPoolContextGroup=rbnIpPoolContextGroup, rbnInetIpPoolStartPrefixLen=rbnInetIpPoolStartPrefixLen, rbnIpPoolContextTotalSize=rbnIpPoolContextTotalSize, rbnInetIpPoolCtxHiFallingThrsh=rbnInetIpPoolCtxHiFallingThrsh, rbnInetIpPoolStartPrefixType=rbnInetIpPoolStartPrefixType, rbnInetIpPoolEndPrefix=rbnInetIpPoolEndPrefix, rbnInetIpPoolNotifyGroup=rbnInetIpPoolNotifyGroup, rbnIpPoolCompliance=rbnIpPoolCompliance, PYSNMP_MODULE_ID=rbnIpPoolMib, rbnInetIpPoolIfIndex=rbnInetIpPoolIfIndex, rbnInetIpPoolHiFallingThrshMet=rbnInetIpPoolHiFallingThrshMet, rbnIpPoolEndAddr=rbnIpPoolEndAddr, rbnIpPoolThresholdPercentCompliance=rbnIpPoolThresholdPercentCompliance, rbnInetIpPoolCtxLoFallingThrshMet=rbnInetIpPoolCtxLoFallingThrshMet, rbnInetIpPoolCtxHiFallingThrshMet=rbnInetIpPoolCtxHiFallingThrshMet, rbnIpPoolMIBConformance=rbnIpPoolMIBConformance, RbnInetIpPoolThresholdType=RbnInetIpPoolThresholdType, rbnIpPoolCompliances=rbnIpPoolCompliances, rbnInetIpPoolCtxHiFallingNotify=rbnInetIpPoolCtxHiFallingNotify, rbnIpPoolNotifyGroup=rbnIpPoolNotifyGroup)
