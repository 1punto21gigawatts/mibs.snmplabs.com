#
# PySNMP MIB module CYCLONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYCLONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Bits, Unsigned32, ObjectIdentity, Integer32, Counter32, Gauge32, ModuleIdentity, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Bits", "Unsigned32", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "ModuleIdentity", "MibIdentifier", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
storagemanagement = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
cyclone = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5))
cycTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000))
cycManagerID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManagerID.setStatus('mandatory')
if mibBuilder.loadTexts: cycManagerID.setDescription('ASCII String description of SCSI Manager')
cycHostAdapterID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterID.setStatus('mandatory')
if mibBuilder.loadTexts: cycHostAdapterID.setDescription('ASCII String description of Hostadapter')
cycHostAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycHostAdapterNumber.setDescription('The unique Hostadapter Number')
cycVendor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cycVendor.setDescription('This indicates the Name of the Vendor')
cycProduct = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycProduct.setStatus('mandatory')
if mibBuilder.loadTexts: cycProduct.setDescription('This indicates the product information')
cycControllerModel = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9006), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycControllerModel.setStatus('mandatory')
if mibBuilder.loadTexts: cycControllerModel.setDescription('The model of the associated controller e.g ATHENA, VIKING etc')
cycBusNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycBusNumber.setDescription('The PCI Bus number')
cycChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cycChannelNumber.setDescription('Channel Number')
cycScsiTargetID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycScsiTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: cycScsiTargetID.setDescription('SCSI Target ID')
cycLun = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycLun.setStatus('mandatory')
if mibBuilder.loadTexts: cycLun.setDescription('The LUN of the device ID')
cycArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9011), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycArrayName.setDescription('Array name')
cycMisCompares = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycMisCompares.setStatus('mandatory')
if mibBuilder.loadTexts: cycMisCompares.setDescription('The number of miscompares in verify ')
cycDriver = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycDriver.setStatus('mandatory')
if mibBuilder.loadTexts: cycDriver.setDescription('The Driver version')
cycManager = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManager.setStatus('mandatory')
if mibBuilder.loadTexts: cycManager.setDescription('The CI/O Manager version')
cycOldArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9015), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycOldArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycOldArrayName.setDescription('Old Array name')
cycNewArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9016), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycNewArrayName.setStatus('mandatory')
if mibBuilder.loadTexts: cycNewArrayName.setDescription('Changed Array name')
cycPriority = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cycPriority.setDescription('The Priority of the operation')
cycSenseInfo = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycSenseInfo.setStatus('mandatory')
if mibBuilder.loadTexts: cycSenseInfo.setDescription('The sense info of the PFA')
sCSISmart1 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,101))
if mibBuilder.loadTexts: sCSISmart1.setDescription('SNMP Agent is up.')
sCSISmart2 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,102))
if mibBuilder.loadTexts: sCSISmart2.setDescription('SNMP Agent is down.')
sCSISmart3 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,107))
if mibBuilder.loadTexts: sCSISmart3.setDescription('Cyclone: duplicate hostadapter ID')
sCSISmart4 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,108)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycHostAdapterID"), ("CYCLONE-MIB", "cycManagerID"))
if mibBuilder.loadTexts: sCSISmart4.setDescription('The HostAdapter# %d with HostAdapter Id %s and Manager Id %s is discovered')
sCSISmart5 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,109)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycHostAdapterID"), ("CYCLONE-MIB", "cycManagerID"))
if mibBuilder.loadTexts: sCSISmart5.setDescription('The HostAdapter# %d has new HostAdapter Id %s and Manager Id %s')
sCSISmart6 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,110)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"))
if mibBuilder.loadTexts: sCSISmart6.setDescription('The HostAdapter# %d has Failed')
sCSISmart7 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,111)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"))
if mibBuilder.loadTexts: sCSISmart7.setDescription('Host Adapter# %d recovered')
sCSISmart8 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,112)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"))
if mibBuilder.loadTexts: sCSISmart8.setDescription('The HostAdapter# %d, TargetID %d, Lun# %d has failed')
sCSISmart9 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,113)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"))
if mibBuilder.loadTexts: sCSISmart9.setDescription('The HostAdapter# %d, TargetID %d, Lun# %d of vendor %s product %s has discovered')
sCSISmart10 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,114)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"))
if mibBuilder.loadTexts: sCSISmart10.setDescription('The HostAdapter# %d, TargetID %d,Lun# %d has recovered')
sCSISmart11 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,115)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"))
if mibBuilder.loadTexts: sCSISmart11.setDescription('The HostAdapter# %d, TargetID %d, Lun# %d has new Vendor %s and Product %s information')
sCSISmart12 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,116)).setObjects(("CYCLONE-MIB", "cycHostAdapterNumber"), ("CYCLONE-MIB", "cycScsiTargetID"), ("CYCLONE-MIB", "cycLun"), ("CYCLONE-MIB", "cycVendor"), ("CYCLONE-MIB", "cycProduct"), ("CYCLONE-MIB", "cycSenseInfo"))
if mibBuilder.loadTexts: sCSISmart12.setDescription('The HostAdapter# %d, TargetID %d, Lun# %d has Predictive Failure Condition on vendor %s product %s with sense info MSB(sense code), next 8 bits (sense code Qual) next 8 bits (Add sense code Qual) LSB (0000) %d')
sCSISmart13 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,117))
if mibBuilder.loadTexts: sCSISmart13.setDescription('The Aspi database is cleared and therefore all the previous information are not available')
sCSISmart14 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,118))
if mibBuilder.loadTexts: sCSISmart14.setDescription('The Aspi has crashed')
sCSISmart15 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,119))
if mibBuilder.loadTexts: sCSISmart15.setDescription('No memory left for Aspi Operations')
sCSISmart16 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,120))
if mibBuilder.loadTexts: sCSISmart16.setDescription('Unable to open Aspi file for writing, problem exists in server hard disk')
sCSISmart17 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,121))
if mibBuilder.loadTexts: sCSISmart17.setDescription('Unable to open Aspi file, problem exists in server hard disk')
sCSISmart18 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,122))
if mibBuilder.loadTexts: sCSISmart18.setDescription('Aspi device file doesnot exist')
sCSISmart19 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,123))
if mibBuilder.loadTexts: sCSISmart19.setDescription('Aspi: Memory allocation is failing')
sCSISmart20 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,124))
if mibBuilder.loadTexts: sCSISmart20.setDescription('Aspi: unable to read the file server hard disk might have problems')
sCSISmart21 = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,125))
if mibBuilder.loadTexts: sCSISmart21.setDescription('Aspi: database is corrupted')
mibBuilder.exportSymbols("CYCLONE-MIB", cycSenseInfo=cycSenseInfo, sCSISmart19=sCSISmart19, sCSISmart10=sCSISmart10, cycPriority=cycPriority, cycBusNumber=cycBusNumber, sCSISmart1=sCSISmart1, sCSISmart12=sCSISmart12, cycDriver=cycDriver, sCSISmart13=sCSISmart13, sCSISmart3=sCSISmart3, cyclone=cyclone, sCSISmart21=sCSISmart21, sCSISmart16=sCSISmart16, cycMisCompares=cycMisCompares, cycLun=cycLun, sCSISmart17=sCSISmart17, sCSISmart8=sCSISmart8, cycOldArrayName=cycOldArrayName, cycNewArrayName=cycNewArrayName, cycHostAdapterNumber=cycHostAdapterNumber, sCSISmart4=sCSISmart4, sCSISmart20=sCSISmart20, cycControllerModel=cycControllerModel, sCSISmart14=sCSISmart14, adaptec=adaptec, sCSISmart15=sCSISmart15, cycVendor=cycVendor, cycManager=cycManager, sCSISmart18=sCSISmart18, cycArrayName=cycArrayName, cycScsiTargetID=cycScsiTargetID, cycTraps=cycTraps, sCSISmart7=sCSISmart7, cycHostAdapterID=cycHostAdapterID, cycManagerID=cycManagerID, cycChannelNumber=cycChannelNumber, sCSISmart6=sCSISmart6, sCSISmart9=sCSISmart9, sCSISmart2=sCSISmart2, cycProduct=cycProduct, sCSISmart11=sCSISmart11, storagemanagement=storagemanagement, sCSISmart5=sCSISmart5)
