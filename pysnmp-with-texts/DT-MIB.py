#
# PySNMP MIB module DT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, ObjectIdentity, IpAddress, NotificationType, MibIdentifier, ModuleIdentity, Integer32, TimeTicks, Unsigned32, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ObjectIdentity", "IpAddress", "NotificationType", "MibIdentifier", "ModuleIdentity", "Integer32", "TimeTicks", "Unsigned32", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
hpSwitchDt = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27))
hpSwitchDt.setRevisions(('2012-05-22 18:00', '2011-08-09 00:00', '2011-03-22 18:00', '2007-10-27 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchDt.setRevisionsDescriptions(('Added new object hpSwitchDtSystemInfo', 'Added hpSwitchDtConfiguration, hpSwitchDtPeerKeepAliveConfig, hpSwitchDtIscProtocolStats, hpSwitchDtPeerKeepAliveStats.', 'Added new MIB objects hpSwitchDtLacpLocalIfLacpAdminKey hpSwitchDtLacpLocalIfLacpOperKey.', 'Initial revision.',))
if mibBuilder.loadTexts: hpSwitchDt.setLastUpdated('201205221800Z')
if mibBuilder.loadTexts: hpSwitchDt.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpSwitchDt.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchDt.setDescription('This MIB module contains HP proprietary Distributed Trunking(DT) MIB.')
hpSwitchISCPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchISCPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchISCPortIndex.setDescription('The ifIndex value of Inter Switch Connection (ISC) port. The default value is 0, which means there is no ISC port configured.')
hpSwitchRemoteISCPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchRemoteISCPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchRemoteISCPortIndex.setDescription('The logical port value of remote switch Inter Switch Connection Port. The default value is 0, which means there is no ISC port configured.')
hpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7))
hpSwitchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1))
hpSwitchDtLacpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3))
hpSwitchDtLacpStatusLocalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1), )
if mibBuilder.loadTexts: hpSwitchDtLacpStatusLocalTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpStatusLocalTable.setDescription("This table holds the lacp status information of all ports that are members of trunks configured as type 'dt-lacp'.")
hpSwitchDtLacpStatusLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1), ).setIndexNames((0, "DT-MIB", "hpSwitchDtLacpLocalIfIndex"))
if mibBuilder.loadTexts: hpSwitchDtLacpStatusLocalEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpStatusLocalEntry.setDescription("The lacp status information of each local port that is part of a trunk configured as type 'dt-lacp'.")
hpSwitchDtLacpLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfIndex.setDescription('The ifIndex value of the local interface.')
hpSwitchDtLacpLocalIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfName.setDescription('The ifName value of the local interface.')
hpSwitchDtLacpLocalIfLacpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpEnable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpEnable.setDescription('The lacp configuration for the local interface.')
hpSwitchDtLacpLocalIfTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfTrunkGroup.setDescription('The trunk group information of the local interface.')
hpSwitchDtLacpLocalIfLacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpPortStatus.setDescription('The lacp port status information of the local interface.')
hpSwitchDtLacpLocalIfLacpPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpPartner.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpPartner.setDescription('The lacp partner information of the local interface.')
hpSwitchDtLacpLocalIfLacpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpStatus.setDescription('The lacp status information of the local interface.')
hpSwitchDtLacpLocalIfLacpAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpAdminKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpAdminKey.setDescription('The lacp admin key information of the local interface.')
hpSwitchDtLacpLocalIfLacpOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpOperKey.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpLocalIfLacpOperKey.setDescription('The lacp operational key information of the local interface.')
hpSwitchDtLacpStatusPeerTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2), )
if mibBuilder.loadTexts: hpSwitchDtLacpStatusPeerTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpStatusPeerTable.setDescription("This table holds the lacp status information of all ports that are members of trunks configured as type 'dt-lacp'.")
hpSwitchDtLacpStatusPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1), ).setIndexNames((0, "DT-MIB", "hpSwitchDtLacpPeerIfIndex"))
if mibBuilder.loadTexts: hpSwitchDtLacpStatusPeerEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpStatusPeerEntry.setDescription("The lacp status information of each peer port that is part of a trunk configured as type 'dt-lacp'.")
hpSwitchDtLacpPeerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfIndex.setDescription('The ifIndex value of the peer interface.')
hpSwitchDtLacpPeerIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfName.setDescription('The ifName value of the peer interface.')
hpSwitchDtLacpPeerIfLacpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpEnable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpEnable.setDescription('The lacp configuration for the peer interface.')
hpSwitchDtLacpPeerIfTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfTrunkGroup.setDescription('The trunk group information of the peer interface.')
hpSwitchDtLacpPeerIfLacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpPortStatus.setDescription('The lacp port status information of the peer interface.')
hpSwitchDtLacpPeerIfLacpPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpPartner.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpPartner.setDescription('The lacp partner information of the peer interface.')
hpSwitchDtLacpPeerIfLacpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLacpPeerIfLacpStatus.setDescription('The lacp status information of the peer interface.')
hpSwitchDtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4))
hpSwitchDtPeerKeepAliveConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1))
hpSwitchDtPeerKeepAliveDestAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestAddressType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestAddressType.setDescription('The address type of the peer keep-alive destination address. Only IPv4 type is supported.')
hpSwitchDtPeerKeepAliveDestAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestAddress.setDescription('The destination IP address to be used by DT switches to send peer keep-alive packets to the peer DT switch.')
hpSwitchDtPeerKeepAliveVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveVlanId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveVlanId.setDescription('The interface on which peer keep-alive packets are sent out. A value of zero indicates peer keep-alive interface is not configured.')
hpSwitchDtPeerKeepAliveDestUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 4), InetPortNumber().clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestUdpPort.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveDestUdpPort.setDescription('The current value of the destination UDP port for transmitting peer keep-alive messages.')
hpSwitchDtPeerKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 5), Integer32().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveInterval.setDescription('The current value of peer keep-alive packet transmission interval for DT switches in milliseconds.')
hpSwitchDtPeerKeepAliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 6), Integer32().clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveTimeout.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveTimeout.setDescription('The peer keep-alive timeout period for DT switches in seconds.')
hpSwitchDtPeerKeepAliveHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 4, 1, 7), Integer32().clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveHoldTime.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveHoldTime.setDescription('The current value of keep-alive hold timer for DT switches in seconds.')
hpSwitchDtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5))
hpSwitchDtIscProtocolStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1))
hpSwitchDtPeerKeepAliveStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 2))
hpSwitchDtIscHelloPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscHelloPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscHelloPktsSent.setDescription('The total number of ISC protocol hello packets sent to the peer DT switch.')
hpSwitchDtIscHelloPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscHelloPktsRecv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscHelloPktsRecv.setDescription('The total number of ISC protocol hello packets received from the peer DT switch.')
hpSwitchDtIscMACLearnPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscMACLearnPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscMACLearnPktsSent.setDescription('The total number of MAC learn packets sent to the peer switch.')
hpSwitchDtIscMACLearnPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscMACLearnPktsRecv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscMACLearnPktsRecv.setDescription('The total number of MAC learn packets received from the peer switch.')
hpSwitchDtIscMACAgedPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscMACAgedPktsSent.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscMACAgedPktsSent.setDescription('The total number of MAC ageout packets sent to the peer switch.')
hpSwitchDtIscMACAgedPktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtIscMACAgedPktsRecv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscMACAgedPktsRecv.setDescription('The total number of MAC ageouts received from the peer switch.')
hpSwitchDtPeerKeepAlivePktsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 2, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAlivePktsSent.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAlivePktsSent.setDescription('The number of peer keep-alive packets sent on the keep-alive interface.')
hpSwitchDtPeerKeepAlivePktsRecv = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 5, 2, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAlivePktsRecv.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAlivePktsRecv.setDescription('The number of valid peer keep-alive packets received on the keep-alive interface.')
hpSwitchDtSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6))
hpSwitchDtSystemISCProtocolState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inSync", 2), ("outOfSync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtSystemISCProtocolState.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemISCProtocolState.setDescription('The current value of DT ISC protocol state. This OID will return error when DT is not configured.')
hpSwitchDtSystemDtLacpSystemID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtSystemDtLacpSystemID.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemDtLacpSystemID.setDescription('The current value of system ID used by DT LACPDU. This OID will return error when DT is not configured otherwise it returns the system ID.')
hpSwitchDtSystemAdminRolePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchDtSystemAdminRolePriority.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemAdminRolePriority.setDescription('The admin value for DT role priority. The DT switch with lower priority value will be elected as DT primary when dual active scenario is detected.')
hpSwitchDtSystemOperRolePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtSystemOperRolePriority.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemOperRolePriority.setDescription('The operational value of DT role priority which is currently used by the protocol.')
hpSwitchDtSystemPeerOperRolePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtSystemPeerOperRolePriority.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemPeerOperRolePriority.setDescription('The operational role priority value of the connected DT partner.')
hpSwitchDtSystemRole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchDtSystemRole.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemRole.setDescription('The current role of the DT switch. This is represented as primary or secondary. Primary switch will keep the DT links active while secondary will block its DT links when dual active is detected.When the ISC link is up role is not applicable.')
hpSwitchDtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256))
hpSwitchDtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 1))
hpSwitchDtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2))
hpSwitchDtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 1, 1)).setObjects(("DT-MIB", "hpSwitchDtIscGroup"), ("DT-MIB", "hpSwitchDtLocalLacpGroup"), ("DT-MIB", "hpSwitchDtRemoteLacpGroup"), ("DT-MIB", "hpSwitchDtPeerKeepAliveGroup"), ("DT-MIB", "hpSwitchDtIscStatsGroup"), ("DT-MIB", "hpSwitchDtPeerKeepAliveStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtCompliance = hpSwitchDtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpSwitchDtCompliance.setDescription('The compliance statement for the entries in the Distributed Trunking MIB.')
hpSwitchDtCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 1, 2)).setObjects(("DT-MIB", "hpSwitchDtIscGroup"), ("DT-MIB", "hpSwitchDtLocalLacpGroup"), ("DT-MIB", "hpSwitchDtRemoteLacpGroup"), ("DT-MIB", "hpSwitchDtPeerKeepAliveGroup"), ("DT-MIB", "hpSwitchDtSystemInfoGroup"), ("DT-MIB", "hpSwitchDtIscStatsGroup"), ("DT-MIB", "hpSwitchDtPeerKeepAliveStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtCompliance1 = hpSwitchDtCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtCompliance1.setDescription('The compliance statement for the entries in the Distributed Trunking MIB.')
hpSwitchDtIscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 1)).setObjects(("DT-MIB", "hpSwitchISCPortIndex"), ("DT-MIB", "hpSwitchRemoteISCPortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtIscGroup = hpSwitchDtIscGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscGroup.setDescription('A collection of objects providing information about switch-interconnect port.')
hpSwitchDtLocalLacpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 2)).setObjects(("DT-MIB", "hpSwitchDtLacpLocalIfIndex"), ("DT-MIB", "hpSwitchDtLacpLocalIfName"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpEnable"), ("DT-MIB", "hpSwitchDtLacpLocalIfTrunkGroup"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpPortStatus"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpPartner"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpStatus"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpAdminKey"), ("DT-MIB", "hpSwitchDtLacpLocalIfLacpOperKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtLocalLacpGroup = hpSwitchDtLocalLacpGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtLocalLacpGroup.setDescription('A collection of objects providing information about local dt-lacp ports.')
hpSwitchDtRemoteLacpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 3)).setObjects(("DT-MIB", "hpSwitchDtLacpPeerIfIndex"), ("DT-MIB", "hpSwitchDtLacpPeerIfName"), ("DT-MIB", "hpSwitchDtLacpPeerIfLacpEnable"), ("DT-MIB", "hpSwitchDtLacpPeerIfTrunkGroup"), ("DT-MIB", "hpSwitchDtLacpPeerIfLacpPortStatus"), ("DT-MIB", "hpSwitchDtLacpPeerIfLacpPartner"), ("DT-MIB", "hpSwitchDtLacpPeerIfLacpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtRemoteLacpGroup = hpSwitchDtRemoteLacpGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtRemoteLacpGroup.setDescription('A collection of objects providing information about remote dt-lacp ports.')
hpSwitchDtPeerKeepAliveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 4)).setObjects(("DT-MIB", "hpSwitchDtPeerKeepAliveDestAddressType"), ("DT-MIB", "hpSwitchDtPeerKeepAliveDestAddress"), ("DT-MIB", "hpSwitchDtPeerKeepAliveVlanId"), ("DT-MIB", "hpSwitchDtPeerKeepAliveDestUdpPort"), ("DT-MIB", "hpSwitchDtPeerKeepAliveInterval"), ("DT-MIB", "hpSwitchDtPeerKeepAliveTimeout"), ("DT-MIB", "hpSwitchDtPeerKeepAliveHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtPeerKeepAliveGroup = hpSwitchDtPeerKeepAliveGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveGroup.setDescription('A collection of objects providing information about peer keep-alive interface.')
hpSwitchDtIscStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 5)).setObjects(("DT-MIB", "hpSwitchDtIscHelloPktsSent"), ("DT-MIB", "hpSwitchDtIscHelloPktsRecv"), ("DT-MIB", "hpSwitchDtIscMACLearnPktsSent"), ("DT-MIB", "hpSwitchDtIscMACLearnPktsRecv"), ("DT-MIB", "hpSwitchDtIscMACAgedPktsSent"), ("DT-MIB", "hpSwitchDtIscMACAgedPktsRecv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtIscStatsGroup = hpSwitchDtIscStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtIscStatsGroup.setDescription('A collection of objects providing information about DT ISC protocol.')
hpSwitchDtPeerKeepAliveStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 6)).setObjects(("DT-MIB", "hpSwitchDtPeerKeepAlivePktsSent"), ("DT-MIB", "hpSwitchDtPeerKeepAlivePktsRecv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtPeerKeepAliveStatsGroup = hpSwitchDtPeerKeepAliveStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtPeerKeepAliveStatsGroup.setDescription('A collection of objects providing information about peer keep-alive protocol.')
hpSwitchDtSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 7, 1, 27, 256, 2, 7)).setObjects(("DT-MIB", "hpSwitchDtSystemISCProtocolState"), ("DT-MIB", "hpSwitchDtSystemDtLacpSystemID"), ("DT-MIB", "hpSwitchDtSystemAdminRolePriority"), ("DT-MIB", "hpSwitchDtSystemOperRolePriority"), ("DT-MIB", "hpSwitchDtSystemPeerOperRolePriority"), ("DT-MIB", "hpSwitchDtSystemRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchDtSystemInfoGroup = hpSwitchDtSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchDtSystemInfoGroup.setDescription('A collection of objects providing system wide information.')
mibBuilder.exportSymbols("DT-MIB", hpSwitchDt=hpSwitchDt, hpSwitchConfig=hpSwitchConfig, hpSwitchDtIscProtocolStats=hpSwitchDtIscProtocolStats, hpSwitchDtLacpLocalIfLacpOperKey=hpSwitchDtLacpLocalIfLacpOperKey, hpSwitchDtIscMACLearnPktsRecv=hpSwitchDtIscMACLearnPktsRecv, hpSwitchDtSystemPeerOperRolePriority=hpSwitchDtSystemPeerOperRolePriority, hpSwitchDtIscStatsGroup=hpSwitchDtIscStatsGroup, hpSwitchDtLacpLocalIfLacpPortStatus=hpSwitchDtLacpLocalIfLacpPortStatus, hpSwitchDtIscMACLearnPktsSent=hpSwitchDtIscMACLearnPktsSent, hpSwitchDtLacpLocalIfLacpStatus=hpSwitchDtLacpLocalIfLacpStatus, hpSwitchISCPortIndex=hpSwitchISCPortIndex, hpSwitchDtLacpStatus=hpSwitchDtLacpStatus, hpSwitchDtSystemAdminRolePriority=hpSwitchDtSystemAdminRolePriority, hpSwitchDtLacpPeerIfTrunkGroup=hpSwitchDtLacpPeerIfTrunkGroup, hpSwitchDtLacpStatusLocalEntry=hpSwitchDtLacpStatusLocalEntry, hpSwitchDtSystemRole=hpSwitchDtSystemRole, hpSwitchDtCompliance=hpSwitchDtCompliance, hpConfig=hpConfig, hpSwitchDtGroups=hpSwitchDtGroups, hpSwitchDtLacpLocalIfLacpEnable=hpSwitchDtLacpLocalIfLacpEnable, hpSwitchDtLacpPeerIfLacpStatus=hpSwitchDtLacpPeerIfLacpStatus, hpSwitchDtPeerKeepAliveStats=hpSwitchDtPeerKeepAliveStats, hpSwitchDtRemoteLacpGroup=hpSwitchDtRemoteLacpGroup, hpSwitchDtLacpLocalIfTrunkGroup=hpSwitchDtLacpLocalIfTrunkGroup, hpSwitchDtSystemOperRolePriority=hpSwitchDtSystemOperRolePriority, hpSwitchDtPeerKeepAlivePktsRecv=hpSwitchDtPeerKeepAlivePktsRecv, hpSwitchDtLacpPeerIfLacpPortStatus=hpSwitchDtLacpPeerIfLacpPortStatus, hpSwitchDtPeerKeepAliveDestAddressType=hpSwitchDtPeerKeepAliveDestAddressType, hpSwitchDtSystemInfo=hpSwitchDtSystemInfo, hpSwitchDtLacpPeerIfLacpEnable=hpSwitchDtLacpPeerIfLacpEnable, hpSwitchDtLacpPeerIfLacpPartner=hpSwitchDtLacpPeerIfLacpPartner, hpSwitchDtLacpLocalIfIndex=hpSwitchDtLacpLocalIfIndex, hpSwitchDtIscHelloPktsRecv=hpSwitchDtIscHelloPktsRecv, hpSwitchDtLacpStatusLocalTable=hpSwitchDtLacpStatusLocalTable, hpSwitchDtLacpLocalIfLacpAdminKey=hpSwitchDtLacpLocalIfLacpAdminKey, hpSwitchDtStats=hpSwitchDtStats, hpSwitchDtPeerKeepAliveHoldTime=hpSwitchDtPeerKeepAliveHoldTime, hpSwitchDtIscMACAgedPktsSent=hpSwitchDtIscMACAgedPktsSent, hpSwitchDtSystemInfoGroup=hpSwitchDtSystemInfoGroup, hpSwitchDtLacpLocalIfLacpPartner=hpSwitchDtLacpLocalIfLacpPartner, PYSNMP_MODULE_ID=hpSwitchDt, hpSwitchDtPeerKeepAliveDestAddress=hpSwitchDtPeerKeepAliveDestAddress, hpSwitchDtLacpStatusPeerEntry=hpSwitchDtLacpStatusPeerEntry, hpSwitchDtPeerKeepAliveDestUdpPort=hpSwitchDtPeerKeepAliveDestUdpPort, hpSwitchDtPeerKeepAliveVlanId=hpSwitchDtPeerKeepAliveVlanId, hpSwitchDtLacpLocalIfName=hpSwitchDtLacpLocalIfName, hpSwitchDtPeerKeepAliveConfig=hpSwitchDtPeerKeepAliveConfig, hpSwitchDtLocalLacpGroup=hpSwitchDtLocalLacpGroup, hpSwitchDtPeerKeepAlivePktsSent=hpSwitchDtPeerKeepAlivePktsSent, hpSwitchDtSystemISCProtocolState=hpSwitchDtSystemISCProtocolState, hpSwitchDtSystemDtLacpSystemID=hpSwitchDtSystemDtLacpSystemID, hpSwitchDtPeerKeepAliveGroup=hpSwitchDtPeerKeepAliveGroup, hpSwitchDtIscHelloPktsSent=hpSwitchDtIscHelloPktsSent, hpSwitchRemoteISCPortIndex=hpSwitchRemoteISCPortIndex, hpSwitchDtConfig=hpSwitchDtConfig, hpSwitchDtConformance=hpSwitchDtConformance, hpSwitchDtCompliances=hpSwitchDtCompliances, hpSwitchDtPeerKeepAliveInterval=hpSwitchDtPeerKeepAliveInterval, hpSwitchDtIscMACAgedPktsRecv=hpSwitchDtIscMACAgedPktsRecv, hpSwitchDtCompliance1=hpSwitchDtCompliance1, hpSwitchDtLacpPeerIfName=hpSwitchDtLacpPeerIfName, hpSwitchDtIscGroup=hpSwitchDtIscGroup, hpSwitchDtPeerKeepAliveStatsGroup=hpSwitchDtPeerKeepAliveStatsGroup, hpSwitchDtPeerKeepAliveTimeout=hpSwitchDtPeerKeepAliveTimeout, hpSwitchDtLacpPeerIfIndex=hpSwitchDtLacpPeerIfIndex, hpSwitchDtLacpStatusPeerTable=hpSwitchDtLacpStatusPeerTable)
