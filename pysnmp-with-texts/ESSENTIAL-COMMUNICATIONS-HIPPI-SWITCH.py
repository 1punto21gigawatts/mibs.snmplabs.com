#
# PySNMP MIB module ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH
# Produced by pysmi-0.3.4 at Wed May  1 13:06:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ecExperimental, = mibBuilder.importSymbols("ESSENTIAL-COMMUNICATIONS-GLOBAL-REG", "ecExperimental")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, enterprises, Bits, iso, Integer32, ObjectIdentity, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter64, TimeTicks, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "Bits", "iso", "Integer32", "ObjectIdentity", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter64", "TimeTicks", "IpAddress", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
essentialCommunications = MibIdentifier((1, 3, 6, 1, 4, 1, 2159))
ecRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1))
ecProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3))
ecExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 6))
hippiSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 6, 1))
hippiSwitchMIBv103 = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1))
switchObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1))
switchDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDescription.setStatus('mandatory')
if mibBuilder.loadTexts: switchDescription.setDescription('Returns the description, vendor, and version numbers of the switch.')
switchNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: switchNumOfPorts.setDescription('The number of slots in this switch. (Max number of media access cards).')
sccDescription = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sccDescription.setDescription('The model, vendor, and version number of the switch control card.')
sccDateTime = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: sccDateTime.setDescription('The date/time in the real time clock. Format: yyyymmddhhmmss.')
sccAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sccAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sccAdminStatus.setDescription('The desired state of the switch.')
sccOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("reseting", 2), ("busy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sccOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sccOperStatus.setDescription('The current state of the switch. SNMP operations can not occur when the switch is busy. SNMP operations can not occur when the switch is resetting.')
backPlaneTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7), )
if mibBuilder.loadTexts: backPlaneTable.setStatus('mandatory')
if mibBuilder.loadTexts: backPlaneTable.setDescription('This table represent all of the slots in a HIPPI switch. None of the rows can be added to or deleted by the user.')
backPlaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "backPlaneIndex"))
if mibBuilder.loadTexts: backPlaneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: backPlaneEntry.setDescription('A row in the table describing one slot in the switch backplane. ')
backPlaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 1), Gauge32())
if mibBuilder.loadTexts: backPlaneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: backPlaneIndex.setDescription('The table index for this slot on the backplane.')
backPlaneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: backPlaneNumber.setDescription('The slot number as seen printed on the switch (backPlaneIndex + 1)')
backPlaneCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("parallel", 2), ("serial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: backPlaneCard.setStatus('mandatory')
if mibBuilder.loadTexts: backPlaneCard.setDescription('The type of MIC present in this slot of the backplane on the switch')
mICPowerUpInitError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICPowerUpInitError.setStatus('mandatory')
if mibBuilder.loadTexts: mICPowerUpInitError.setDescription('True if error detected by MIC on start-up.')
mICHippiParityBurstError = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICHippiParityBurstError.setStatus('mandatory')
if mibBuilder.loadTexts: mICHippiParityBurstError.setDescription('Valid the SMIC only. Type of parity error.')
mICLinkReady = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICLinkReady.setStatus('mandatory')
if mibBuilder.loadTexts: mICLinkReady.setDescription('Valid the SMIC only. True if link ready asserted.')
mICSourceInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceInterconnect.setStatus('mandatory')
if mibBuilder.loadTexts: mICSourceInterconnect.setDescription('Source interconnect is valid for the PMIC only.')
mICSourceRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mICSourceRequest.setDescription('True if source request is asserted.')
mICSourceConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceConnect.setStatus('mandatory')
if mibBuilder.loadTexts: mICSourceConnect.setDescription('True if source connect is asserted.')
mICSourceLastConnectAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICSourceLastConnectAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: mICSourceLastConnectAttempt.setDescription('True if last source request was successful.')
mICDestinationInterconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationInterconnect.setStatus('mandatory')
if mibBuilder.loadTexts: mICDestinationInterconnect.setDescription('True if destination interconnect is asserted.')
mICDestinationRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mICDestinationRequest.setDescription('True if destination request is asserted.')
mICDestinationConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICDestinationConnect.setStatus('mandatory')
if mibBuilder.loadTexts: mICDestinationConnect.setDescription('True if destination connect is asserted.')
mICByteCounterOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICByteCounterOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: mICByteCounterOverflow.setDescription('The number of times the byte counter has over-flowed.')
mICNumberOfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mICNumberOfBytes.setDescription('The number of bytes that have passed through the MIC.')
mICNumberOfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICNumberOfPackets.setStatus('mandatory')
if mibBuilder.loadTexts: mICNumberOfPackets.setDescription('The number of times packets has been asserted.')
mICConnectsSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mICConnectsSuccessful.setStatus('mandatory')
if mibBuilder.loadTexts: mICConnectsSuccessful.setDescription('The number of times this MIC has connected since reset.')
sourceRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8), )
if mibBuilder.loadTexts: sourceRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: sourceRouteTable.setDescription('This table holds all of the source routes for this switch. FORMAT: OutputPort InputPortList Status. Output port is 0 to 15 Input port is 0 to 15 List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2. Status is 0 (disabled) or 1 (enabled)')
sourceRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "srcIndex"))
if mibBuilder.loadTexts: sourceRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sourceRouteEntry.setDescription('One row in the source route table.')
srcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: srcIndex.setDescription('The row number for this row of the table.')
srcRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srcRoute.setStatus('mandatory')
if mibBuilder.loadTexts: srcRoute.setDescription('One source route. FORMAT: OutputPort InputPortList Status. Output port is 0 to 15 Input port is 0 to 15 List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2. Status is 0 (disabled) or 1 (enabled)')
srcWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srcWriteRow.setStatus('mandatory')
if mibBuilder.loadTexts: srcWriteRow.setDescription('Setting this variable alters source routes. FORMAT: OutputPortList InputPortList Status. Output port is 0 to 15 Input port is 0 to 15 List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2. Status is 0 (disabled) or 1 (enabled)')
destRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10), )
if mibBuilder.loadTexts: destRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: destRouteTable.setDescription('This table holds all of destination routes (logical address routes) for this switch. FORMAT: LogicalAddress InputPortList Huntgroup. LogicalAddress is 0 to 4095. Input port is 0 to 15 Huntgroup is 0 to 31. List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2.')
destRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "destIndex"))
if mibBuilder.loadTexts: destRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: destRouteEntry.setDescription('A row in the destination route table.')
destIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destIndex.setStatus('mandatory')
if mibBuilder.loadTexts: destIndex.setDescription('The index for this row of the table.')
destRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destRoute.setStatus('mandatory')
if mibBuilder.loadTexts: destRoute.setDescription('One Destination Route. FORMAT: LogicalAddress InputPortList Huntgroup. LogicalAddress is 0 to 4095. Input port is 0 to 15. Huntgroup is 0 to 31. List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2.')
destWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destWriteRow.setStatus('mandatory')
if mibBuilder.loadTexts: destWriteRow.setDescription('Setting this variable will alter the desitination routes. FORMAT: LogicalAddressList Huntgroup InputPortList. LogicalAddress is 0 to 4095. Huntgroup is 0 to 31. 31 will disable this route. Input port is 0 to 15. List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2.')
huntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12), )
if mibBuilder.loadTexts: huntGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: huntGroupTable.setDescription('This table holds all of the huntgroups for this switch. FORMAT: Huntgroup ( OutportList ) Huntgroup is 0 to 31. OutportList is an orderd list of output ports in Huntgroup.')
huntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "hg"))
if mibBuilder.loadTexts: huntGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: huntGroupEntry.setDescription('A row in the huntgroup table.')
hg = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hg.setStatus('mandatory')
if mibBuilder.loadTexts: hg.setDescription('The huntgroup number.')
hgOutPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOutPortList.setStatus('mandatory')
if mibBuilder.loadTexts: hgOutPortList.setDescription('The definition of one Huntgroup. FORMAT: Huntgroup ( OutportList ) Huntgroup is 0 to 31. OutportList is an orderd list of output ports in Huntgroup.')
hgLWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgLWriteRow.setStatus('mandatory')
if mibBuilder.loadTexts: hgLWriteRow.setDescription('Setting this variable will alter the huntgroup table by setting every huntgroup in list to include outPortList. FORMAT: HuntgroupList OutportList Huntgroup is 0 to 31. Outport is 0 to 15 and 16. 16 will clear the huntgroup. List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2.')
huntGroupOrderTable = MibTable((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14), )
if mibBuilder.loadTexts: huntGroupOrderTable.setStatus('mandatory')
if mibBuilder.loadTexts: huntGroupOrderTable.setDescription('This table holds all of the huntgroup order information for this switch. i.e. The order huntgroups are processed in when more than one huntgroup contends for the same output port. FORMAT: OutputPort HuntGroupList OutputPort is 0 to 15. Huntgroup is 0 to 31. List is an ordered list of huntgroups.')
huntGroupOrderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1), ).setIndexNames((0, "ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", "hg"))
if mibBuilder.loadTexts: huntGroupOrderEntry.setStatus('mandatory')
if mibBuilder.loadTexts: huntGroupOrderEntry.setDescription("One record on an output port's huntgroup priority.")
hgOrderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOrderIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hgOrderIndex.setDescription('The backplane slot number containing output port.')
hgOrderList = MibTableColumn((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hgOrderList.setStatus('mandatory')
if mibBuilder.loadTexts: hgOrderList.setDescription("An ordered list of an output port's huntgroup priority. FORMAT: OutputPort HuntGroupList OutputPort is 0 to 15. Huntgroup is 0 to 31. List is an ordered list of huntgroups.")
hgOWriteRow = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgOWriteRow.setStatus('mandatory')
if mibBuilder.loadTexts: hgOWriteRow.setDescription('Setting this variable will alter the huntgroup order table. FORMAT: OutputPort HuntGroupList Output port is 0 to 15. Huntgroup is 0 to 31. Huntgroup must contain output port in its output port list. List is NUMBER or NUMBER1-NUMBER2 where NUMBER1 < NUMBER2.')
hgSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hgSaveRestore.setStatus('mandatory')
if mibBuilder.loadTexts: hgSaveRestore.setDescription(' Writting a 1 saves all hunt group information on the switch. Writting a 2 restores all hunt group information on the switch.')
routesSaveRestore = MibScalar((1, 3, 6, 1, 4, 1, 2159, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routesSaveRestore.setStatus('mandatory')
if mibBuilder.loadTexts: routesSaveRestore.setDescription(' Writting a 1 saves all source/destination routes on the switch. Writting a 2 restores all source/destination routes on the switch.')
mibBuilder.exportSymbols("ESSENTIAL-COMMUNICATIONS-HIPPI-SWITCH", srcWriteRow=srcWriteRow, hg=hg, hippiSwitchMIBv103=hippiSwitchMIBv103, switchDescription=switchDescription, backPlaneTable=backPlaneTable, mICNumberOfPackets=mICNumberOfPackets, backPlaneNumber=backPlaneNumber, hgLWriteRow=hgLWriteRow, mICPowerUpInitError=mICPowerUpInitError, sccAdminStatus=sccAdminStatus, huntGroupOrderEntry=huntGroupOrderEntry, sccDescription=sccDescription, backPlaneCard=backPlaneCard, huntGroupTable=huntGroupTable, ecProducts=ecProducts, mICHippiParityBurstError=mICHippiParityBurstError, srcRoute=srcRoute, destWriteRow=destWriteRow, switchNumOfPorts=switchNumOfPorts, destRoute=destRoute, sourceRouteTable=sourceRouteTable, destIndex=destIndex, hgOWriteRow=hgOWriteRow, mICSourceRequest=mICSourceRequest, mICDestinationInterconnect=mICDestinationInterconnect, hgOrderIndex=hgOrderIndex, ecRoot=ecRoot, destRouteTable=destRouteTable, hgSaveRestore=hgSaveRestore, sccOperStatus=sccOperStatus, ecExperimental=ecExperimental, mICSourceLastConnectAttempt=mICSourceLastConnectAttempt, backPlaneIndex=backPlaneIndex, sccDateTime=sccDateTime, hgOutPortList=hgOutPortList, mICSourceConnect=mICSourceConnect, mICDestinationConnect=mICDestinationConnect, mICByteCounterOverflow=mICByteCounterOverflow, srcIndex=srcIndex, mICLinkReady=mICLinkReady, switchObjs=switchObjs, mICSourceInterconnect=mICSourceInterconnect, backPlaneEntry=backPlaneEntry, huntGroupEntry=huntGroupEntry, routesSaveRestore=routesSaveRestore, sourceRouteEntry=sourceRouteEntry, hgOrderList=hgOrderList, mICDestinationRequest=mICDestinationRequest, huntGroupOrderTable=huntGroupOrderTable, hippiSwitchMIB=hippiSwitchMIB, mICConnectsSuccessful=mICConnectsSuccessful, mICNumberOfBytes=mICNumberOfBytes, essentialCommunications=essentialCommunications, destRouteEntry=destRouteEntry)
