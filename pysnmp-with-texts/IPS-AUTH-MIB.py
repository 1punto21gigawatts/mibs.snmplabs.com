#
# PySNMP MIB module IPS-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPS-AUTH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, IpAddress, ObjectIdentity, Gauge32, Unsigned32, Counter64, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, iso, NotificationType, Integer32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "ObjectIdentity", "Gauge32", "Unsigned32", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "iso", "NotificationType", "Integer32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
AutonomousType, TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
ipsAuthMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 141))
ipsAuthMibModule.setRevisions(('2006-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ipsAuthMibModule.setRevisionsDescriptions(('Initial version of the IP Storage Authentication MIB module, published as RFC 4545',))
if mibBuilder.loadTexts: ipsAuthMibModule.setLastUpdated('200605220000Z')
if mibBuilder.loadTexts: ipsAuthMibModule.setOrganization('IETF IPS Working Group')
if mibBuilder.loadTexts: ipsAuthMibModule.setContactInfo(' Mark Bakke Postal: Cisco Systems, Inc 7900 International Drive, Suite 400 Bloomington, MN USA 55425 E-mail: mbakke@cisco.com James Muchow Postal: Qlogic Corp. 6321 Bury Dr. Eden Prairie, MN USA 55346 E-Mail: james.muchow@qlogic.com')
if mibBuilder.loadTexts: ipsAuthMibModule.setDescription('The IP Storage Authorization MIB module. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4545; see the RFC itself for full legal notices.')
ipsAuthNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 0))
ipsAuthObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1))
ipsAuthConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2))
class IpsAuthAddress(TextualConvention, OctetString):
    reference = 'IANA-ADDRESS-FAMILY-NUMBERS-MIB; INET-ADDRESS-MIB (RFC 4001); FC-MGMT-MIB (RFC 4044).'
    description = 'IP Storage requires the use of address information that uses not only the InetAddress type defined in the INET-ADDRESS-MIB, but also Fibre Channel type defined in the Fibre Channel Management MIB. Although these address types are recognized in the IANA Address Family Numbers MIB, the addressing mechanisms have not been merged into a well-known, common type. This data type, the IpsAuthAddress, performs the merging for this MIB module. The formats of objects of this type are determined by a corresponding object with syntax AddressFamilyNumbers, and thus every object defined using this TC must identify the object with syntax AddressFamilyNumbers that specifies its type. The syntax and semantics of this object depend on the identified AddressFamilyNumbers object as follows: AddressFamilyNumbers this object ==================== =========== ipV4(1) restricted to the same syntax and semantics as the InetAddressIPv4 TC. ipV6(2) restricted to the same syntax and semantics as the InetAddressIPv6 TC. fibreChannelWWPN (22) & fibreChannelWWNN(23) restricted to the same syntax and semantics as the FcNameIdOrZero TC. Types other than the above should not be used unless the corresponding format of the IpsAuthAddress object is further specified (e.g., in a future revision of this TC).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

ipsAuthDescriptors = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 1))
ipsAuthMethodTypes = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1))
if mibBuilder.loadTexts: ipsAuthMethodTypes.setStatus('current')
if mibBuilder.loadTexts: ipsAuthMethodTypes.setDescription('Registration point for Authentication Method Types.')
if mibBuilder.loadTexts: ipsAuthMethodTypes.setReference('RFC 3720, iSCSI Protocol Specification.')
ipsAuthMethodNone = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 1))
if mibBuilder.loadTexts: ipsAuthMethodNone.setStatus('current')
if mibBuilder.loadTexts: ipsAuthMethodNone.setDescription('The authoritative identifier when no authentication method is used.')
if mibBuilder.loadTexts: ipsAuthMethodNone.setReference('RFC 3720, iSCSI Protocol Specification.')
ipsAuthMethodSrp = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 2))
if mibBuilder.loadTexts: ipsAuthMethodSrp.setStatus('current')
if mibBuilder.loadTexts: ipsAuthMethodSrp.setDescription('The authoritative identifier when the authentication method is SRP.')
if mibBuilder.loadTexts: ipsAuthMethodSrp.setReference('RFC 3720, iSCSI Protocol Specification.')
ipsAuthMethodChap = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 3))
if mibBuilder.loadTexts: ipsAuthMethodChap.setStatus('current')
if mibBuilder.loadTexts: ipsAuthMethodChap.setDescription('The authoritative identifier when the authentication method is CHAP.')
if mibBuilder.loadTexts: ipsAuthMethodChap.setReference('RFC 3720, iSCSI Protocol Specification.')
ipsAuthMethodKerberos = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 4))
if mibBuilder.loadTexts: ipsAuthMethodKerberos.setStatus('current')
if mibBuilder.loadTexts: ipsAuthMethodKerberos.setDescription('The authoritative identifier when the authentication method is Kerberos.')
if mibBuilder.loadTexts: ipsAuthMethodKerberos.setReference('RFC 3720, iSCSI Protocol Specification.')
ipsAuthInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 2))
ipsAuthInstanceAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 2, 2), )
if mibBuilder.loadTexts: ipsAuthInstanceAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstanceAttributesTable.setDescription('A list of Authorization instances present on the system.')
ipsAuthInstanceAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"))
if mibBuilder.loadTexts: ipsAuthInstanceAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstanceAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular Authorization instance.')
ipsAuthInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthInstIndex.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstIndex.setDescription('An arbitrary integer used to uniquely identify a particular authorization instance. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
ipsAuthInstDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsAuthInstDescr.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstDescr.setDescription('A character string, determined by the implementation to describe the authorization instance. When only a single instance is present, this object may be set to the zero-length string; with multiple authorization instances, it must be set to a unique value in an implementation-dependent manner to describe the purpose of the respective instance. If this is deployed in a master agent with more than one subagent implementing this MIB module, the master agent is responsible for ensuring that this object is unique across all subagents.')
ipsAuthInstStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsAuthInstStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstStorageType.setDescription("The storage type for all read-write objects within this row. Rows in this table are always created via an external process, and may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row. If this object has the value 'volatile', modifications to read-write objects in this row are not persistent across reboots. If this object has the value 'nonVolatile', modifications to objects in this row are persistent. An implementation may choose to allow this object to be set to either 'nonVolatile' or 'volatile', allowing the management application to choose this behavior.")
ipsAuthIdentity = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 3))
ipsAuthIdentAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 3, 1), )
if mibBuilder.loadTexts: ipsAuthIdentAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAttributesTable.setDescription('A list of user identities, each belonging to a particular ipsAuthInstance.')
ipsAuthIdentAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"))
if mibBuilder.loadTexts: ipsAuthIdentAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAttributesEntry.setDescription('An entry (row) containing management information describing a user identity within an authorization instance on this node.')
ipsAuthIdentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentIndex.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentIndex.setDescription('An arbitrary integer used to uniquely identify a particular identity instance within an authorization instance present on the node. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
ipsAuthIdentDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentDescription.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentDescription.setDescription('A character string describing this particular identity.')
ipsAuthIdentRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthIdentDescription may be set while ipsAuthIdentRowStatus is 'active'.")
ipsAuthIdentStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthIdentityName = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 4))
ipsAuthIdentNameAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 4, 1), )
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesTable.setDescription('A list of unique names that can be used to positively identify a particular user identity.')
ipsAuthIdentNameAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentNameIndex"))
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesEntry.setDescription('An entry (row) containing management information applicable to a unique identity name, which can be used to identify a user identity within a particular authorization instance.')
ipsAuthIdentNameIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentNameIndex.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameIndex.setDescription('An arbitrary integer used to uniquely identify a particular identity name instance within an ipsAuthIdentity within an authorization instance. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
ipsAuthIdentName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentName.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentName.setDescription('A character string that is the unique name of an identity that may be used to identify this ipsAuthIdent entry.')
ipsAuthIdentNameRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthIdentName may be set when this value is 'active'.")
ipsAuthIdentNameStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentNameStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthIdentityAddress = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 5))
ipsAuthIdentAddrAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 5, 1), )
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesTable.setDescription('A list of address ranges that are allowed to serve as the endpoint addresses of a particular identity. An address range includes a starting and ending address and an optional netmask, and an address type indicator, which can specify whether the address is IPv4, IPv6, FC-WWPN, or FC-WWNN.')
ipsAuthIdentAddrAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentAddrIndex"))
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesEntry.setDescription('An entry (row) containing management information applicable to an address range that is used as part of the authorization of an identity within an authorization instance on this node.')
ipsAuthIdentAddrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentAddrIndex.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrIndex.setDescription('An arbitrary integer used to uniquely identify a particular ipsAuthIdentAddress instance within an ipsAuthIdentity within an authorization instance present on the node. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
ipsAuthIdentAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 2), AddressFamilyNumbers()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrType.setDescription('The address types used in the ipsAuthIdentAddrStart and ipsAuthAddrEnd objects. This type is taken from the IANA address family types.')
ipsAuthIdentAddrStart = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 3), IpsAuthAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrStart.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrStart.setDescription('The starting address of the allowed address range. The format of this object is determined by ipsAuthIdentAddrType.')
ipsAuthIdentAddrEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 4), IpsAuthAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrEnd.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrEnd.setDescription('The ending address of the allowed address range. If the ipsAuthIdentAddrEntry specifies a single address, this shall match the ipsAuthIdentAddrStart. The format of this object is determined by ipsAuthIdentAddrType.')
ipsAuthIdentAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The values of ipsAuthIdentAddrStart and ipsAuthIdentAddrEnd may be set when this value is 'active'. The value of ipsAuthIdentAddrType may not be set when this value is 'active'.")
ipsAuthIdentAddrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthCredential = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 6))
ipsAuthCredentialAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 6, 1), )
if mibBuilder.loadTexts: ipsAuthCredentialAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredentialAttributesTable.setDescription('A list of credentials related to user identities that are allowed as valid authenticators of the particular identity.')
ipsAuthCredentialAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredentialAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredentialAttributesEntry.setDescription('An entry (row) containing management information applicable to a credential that verifies a user identity within an authorization instance. To provide complete information in this MIB for a credential, the management station must not only create the row in this table but must also create a row in another table, where the other table is determined by the value of ipsAuthCredAuthMethod, e.g., if ipsAuthCredAuthMethod has the value ipsAuthMethodChap, a row must be created in the ipsAuthCredChapAttributesTable.')
ipsAuthCredIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthCredIndex.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredIndex.setDescription('An arbitrary integer used to uniquely identify a particular Credential instance within an instance present on the node. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
ipsAuthCredAuthMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 2), AutonomousType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredAuthMethod.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredAuthMethod.setDescription('This object contains an OBJECT IDENTIFIER that identifies the authentication method used with this credential. When a row is created in this table, a corresponding row must be created by the management station in a corresponding table specified by this value. When a row is deleted from this table, the corresponding row must be automatically deleted by the agent in the corresponding table specified by this value. If the value of this object is ipsAuthMethodNone, no corresponding rows are created or deleted from other tables. Some standardized values for this object are defined within the ipsAuthMethodTypes subtree.')
ipsAuthCredRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthCredAuthMethod must not be changed while this row is 'active'.")
ipsAuthCredStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthCredChap = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 7))
ipsAuthCredChapAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 7, 1), )
if mibBuilder.loadTexts: ipsAuthCredChapAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredChapAttributesTable.setDescription("A list of CHAP attributes for credentials that use ipsAuthMethodChap as their ipsAuthCredAuthMethod. A row in this table can only exist when an instance of the ipsAuthCredAuthMethod object exists (or is created simultaneously) having the same instance identifiers and a value of 'ipsAuthMethodChap'.")
ipsAuthCredChapAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredChapAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredChapAttributesEntry.setDescription('An entry (row) containing management information applicable to a credential that uses ipsAuthMethodChap as their ipsAuthCredAuthMethod. When a row is created in ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredChap, the management station must create a corresponding row in this table. When a row is deleted from ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredChap, the agent must delete the corresponding row (if any) in this table.')
ipsAuthCredChapUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapUserName.setReference('W. Simpson, RFC 1994: PPP Challenge Handshake Authentication Protocol (CHAP), August 1996')
if mibBuilder.loadTexts: ipsAuthCredChapUserName.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredChapUserName.setDescription('A character string containing the CHAP user name for this credential.')
ipsAuthCredChapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredChapRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthCredChapUserName may be changed while this row is 'active'.")
ipsAuthCredChapStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredChapStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthCredSrp = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 8))
ipsAuthCredSrpAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 8, 1), )
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesTable.setDescription("A list of SRP attributes for credentials that use ipsAuthMethodSrp as its ipsAuthCredAuthMethod. A row in this table can only exist when an instance of the ipsAuthCredAuthMethod object exists (or is created simultaneously) having the same instance identifiers and a value of 'ipsAuthMethodSrp'.")
ipsAuthCredSrpAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesEntry.setDescription('An entry (row) containing management information applicable to a credential that uses ipsAuthMethodSrp as their ipsAuthCredAuthMethod. When a row is created in ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredSrp, the management station must create a corresponding row in this table. When a row is deleted from ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredSrp, the agent must delete the corresponding row (if any) in this table.')
ipsAuthCredSrpUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpUserName.setReference('T. Wu, RFC 2945: The SRP Authentication and Key Exchange System, September 2000')
if mibBuilder.loadTexts: ipsAuthCredSrpUserName.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredSrpUserName.setDescription('A character string containing the SRP user name for this credential.')
ipsAuthCredSrpRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredSrpRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthCredSrpUserName may be changed while the status of this row is 'active'.")
ipsAuthCredSrpStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredSrpStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthCredKerberos = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 9))
ipsAuthCredKerbAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 9, 1), )
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesTable.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesTable.setDescription("A list of Kerberos attributes for credentials that use ipsAuthMethodKerberos as their ipsAuthCredAuthMethod. A row in this table can only exist when an instance of the ipsAuthCredAuthMethod object exists (or is created simultaneously) having the same instance identifiers and a value of 'ipsAuthMethodKerb'.")
ipsAuthCredKerbAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesEntry.setDescription('An entry (row) containing management information applicable to a credential that uses ipsAuthMethodKerberos as its ipsAuthCredAuthMethod. When a row is created in ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredKerberos, the management station must create a corresponding row in this table. When a row is deleted from ipsAuthCredentialAttributesTable with ipsAuthCredAuthMethod = ipsAuthCredKerberos, the agent must delete the corresponding row (if any) in this table.')
ipsAuthCredKerbPrincipal = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbPrincipal.setReference('C. Neuman, S. Hartman, and K. Raeburn, RFC 4120: The Kerberos Network Authentication Service (V5), July 2005')
if mibBuilder.loadTexts: ipsAuthCredKerbPrincipal.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredKerbPrincipal.setDescription('A character string containing a Kerberos principal for this credential.')
ipsAuthCredKerbRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredKerbRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. Rows may be discarded using RowStatus. The value of ipsAuthCredKerbPrincipal may be changed while this row is 'active'.")
ipsAuthCredKerbStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbStorageType.setStatus('current')
if mibBuilder.loadTexts: ipsAuthCredKerbStorageType.setDescription("The storage type for all read-create objects in this row. Rows in this table that were created through an external process may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
ipsAuthCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2, 1))
ipsAuthGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2, 2))
ipsAuthInstanceAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 1)).setObjects(("IPS-AUTH-MIB", "ipsAuthInstDescr"), ("IPS-AUTH-MIB", "ipsAuthInstStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthInstanceAttributesGroup = ipsAuthInstanceAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthInstanceAttributesGroup.setDescription('A collection of objects providing information about authorization instances.')
ipsAuthIdentAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 2)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentDescription"), ("IPS-AUTH-MIB", "ipsAuthIdentRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentAttributesGroup = ipsAuthIdentAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAttributesGroup.setDescription('A collection of objects providing information about user identities within an authorization instance.')
ipsAuthIdentNameAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 3)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentName"), ("IPS-AUTH-MIB", "ipsAuthIdentNameRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentNameStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentNameAttributesGroup = ipsAuthIdentNameAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesGroup.setDescription('A collection of objects providing information about user names within user identities within an authorization instance.')
ipsAuthIdentAddrAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 4)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentAddrType"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrStart"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrEnd"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentAddrAttributesGroup = ipsAuthIdentAddrAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesGroup.setDescription('A collection of objects providing information about address ranges within user identities within an authorization instance.')
ipsAuthIdentCredAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 5)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredAuthMethod"), ("IPS-AUTH-MIB", "ipsAuthCredRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentCredAttributesGroup = ipsAuthIdentCredAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentCredAttributesGroup.setDescription('A collection of objects providing information about credentials within user identities within an authorization instance.')
ipsAuthIdentChapAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 6)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredChapUserName"), ("IPS-AUTH-MIB", "ipsAuthCredChapRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredChapStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentChapAttrGroup = ipsAuthIdentChapAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentChapAttrGroup.setDescription('A collection of objects providing information about CHAP credentials within user identities within an authorization instance.')
ipsAuthIdentSrpAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 7)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredSrpUserName"), ("IPS-AUTH-MIB", "ipsAuthCredSrpRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredSrpStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentSrpAttrGroup = ipsAuthIdentSrpAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentSrpAttrGroup.setDescription('A collection of objects providing information about SRP credentials within user identities within an authorization instance.')
ipsAuthIdentKerberosAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 8)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredKerbPrincipal"), ("IPS-AUTH-MIB", "ipsAuthCredKerbRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredKerbStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentKerberosAttrGroup = ipsAuthIdentKerberosAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ipsAuthIdentKerberosAttrGroup.setDescription('A collection of objects providing information about Kerberos credentials within user identities within an authorization instance.')
ipsAuthComplianceV1 = ModuleCompliance((1, 3, 6, 1, 2, 1, 141, 2, 1, 1)).setObjects(("IPS-AUTH-MIB", "ipsAuthInstanceAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentNameAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentCredAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentChapAttrGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentSrpAttrGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentKerberosAttrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthComplianceV1 = ipsAuthComplianceV1.setStatus('current')
if mibBuilder.loadTexts: ipsAuthComplianceV1.setDescription('Initial version of compliance statement based on initial version of this MIB module. The Instance and Identity groups are mandatory; at least one of the other groups (Name, Address, Credential, Certificate) is also mandatory for any given implementation.')
mibBuilder.exportSymbols("IPS-AUTH-MIB", ipsAuthCredKerberos=ipsAuthCredKerberos, ipsAuthCredChapUserName=ipsAuthCredChapUserName, ipsAuthInstanceAttributesTable=ipsAuthInstanceAttributesTable, ipsAuthIdentStorageType=ipsAuthIdentStorageType, ipsAuthInstance=ipsAuthInstance, ipsAuthCredential=ipsAuthCredential, ipsAuthMethodSrp=ipsAuthMethodSrp, ipsAuthNotifications=ipsAuthNotifications, ipsAuthCredSrpStorageType=ipsAuthCredSrpStorageType, ipsAuthIdentityAddress=ipsAuthIdentityAddress, PYSNMP_MODULE_ID=ipsAuthMibModule, ipsAuthCredIndex=ipsAuthCredIndex, ipsAuthCredChapStorageType=ipsAuthCredChapStorageType, ipsAuthCredKerbAttributesEntry=ipsAuthCredKerbAttributesEntry, ipsAuthIdentAttributesTable=ipsAuthIdentAttributesTable, ipsAuthIdentDescription=ipsAuthIdentDescription, ipsAuthObjects=ipsAuthObjects, ipsAuthMibModule=ipsAuthMibModule, ipsAuthMethodNone=ipsAuthMethodNone, ipsAuthIdentNameAttributesEntry=ipsAuthIdentNameAttributesEntry, ipsAuthMethodKerberos=ipsAuthMethodKerberos, ipsAuthIdentAddrEnd=ipsAuthIdentAddrEnd, IpsAuthAddress=IpsAuthAddress, ipsAuthIdentName=ipsAuthIdentName, ipsAuthCompliances=ipsAuthCompliances, ipsAuthCredStorageType=ipsAuthCredStorageType, ipsAuthIdentAddrAttributesEntry=ipsAuthIdentAddrAttributesEntry, ipsAuthIdentAddrType=ipsAuthIdentAddrType, ipsAuthComplianceV1=ipsAuthComplianceV1, ipsAuthMethodTypes=ipsAuthMethodTypes, ipsAuthIdentSrpAttrGroup=ipsAuthIdentSrpAttrGroup, ipsAuthCredKerbStorageType=ipsAuthCredKerbStorageType, ipsAuthIdentity=ipsAuthIdentity, ipsAuthCredKerbRowStatus=ipsAuthCredKerbRowStatus, ipsAuthIdentKerberosAttrGroup=ipsAuthIdentKerberosAttrGroup, ipsAuthCredSrp=ipsAuthCredSrp, ipsAuthIdentAddrStorageType=ipsAuthIdentAddrStorageType, ipsAuthGroups=ipsAuthGroups, ipsAuthConformance=ipsAuthConformance, ipsAuthIdentCredAttributesGroup=ipsAuthIdentCredAttributesGroup, ipsAuthInstIndex=ipsAuthInstIndex, ipsAuthIdentNameRowStatus=ipsAuthIdentNameRowStatus, ipsAuthIdentAddrAttributesGroup=ipsAuthIdentAddrAttributesGroup, ipsAuthIdentNameStorageType=ipsAuthIdentNameStorageType, ipsAuthCredRowStatus=ipsAuthCredRowStatus, ipsAuthInstanceAttributesGroup=ipsAuthInstanceAttributesGroup, ipsAuthInstanceAttributesEntry=ipsAuthInstanceAttributesEntry, ipsAuthCredSrpRowStatus=ipsAuthCredSrpRowStatus, ipsAuthCredSrpAttributesTable=ipsAuthCredSrpAttributesTable, ipsAuthCredChapAttributesEntry=ipsAuthCredChapAttributesEntry, ipsAuthIdentIndex=ipsAuthIdentIndex, ipsAuthCredentialAttributesEntry=ipsAuthCredentialAttributesEntry, ipsAuthCredKerbPrincipal=ipsAuthCredKerbPrincipal, ipsAuthCredSrpUserName=ipsAuthCredSrpUserName, ipsAuthInstDescr=ipsAuthInstDescr, ipsAuthIdentNameAttributesGroup=ipsAuthIdentNameAttributesGroup, ipsAuthIdentNameAttributesTable=ipsAuthIdentNameAttributesTable, ipsAuthCredChapAttributesTable=ipsAuthCredChapAttributesTable, ipsAuthIdentRowStatus=ipsAuthIdentRowStatus, ipsAuthIdentAddrRowStatus=ipsAuthIdentAddrRowStatus, ipsAuthIdentChapAttrGroup=ipsAuthIdentChapAttrGroup, ipsAuthIdentAddrIndex=ipsAuthIdentAddrIndex, ipsAuthIdentAddrAttributesTable=ipsAuthIdentAddrAttributesTable, ipsAuthCredChap=ipsAuthCredChap, ipsAuthCredSrpAttributesEntry=ipsAuthCredSrpAttributesEntry, ipsAuthIdentAttributesGroup=ipsAuthIdentAttributesGroup, ipsAuthInstStorageType=ipsAuthInstStorageType, ipsAuthMethodChap=ipsAuthMethodChap, ipsAuthCredAuthMethod=ipsAuthCredAuthMethod, ipsAuthDescriptors=ipsAuthDescriptors, ipsAuthCredentialAttributesTable=ipsAuthCredentialAttributesTable, ipsAuthIdentityName=ipsAuthIdentityName, ipsAuthIdentAttributesEntry=ipsAuthIdentAttributesEntry, ipsAuthCredKerbAttributesTable=ipsAuthCredKerbAttributesTable, ipsAuthIdentNameIndex=ipsAuthIdentNameIndex, ipsAuthCredChapRowStatus=ipsAuthCredChapRowStatus, ipsAuthIdentAddrStart=ipsAuthIdentAddrStart)
