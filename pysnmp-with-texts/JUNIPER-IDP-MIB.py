#
# PySNMP MIB module JUNIPER-IDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-IDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
jnxMibs, jnxTraps = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxTraps")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter32, MibIdentifier, iso, Unsigned32, ModuleIdentity, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter32", "MibIdentifier", "iso", "Unsigned32", "ModuleIdentity", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxIdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 9))
if mibBuilder.loadTexts: jnxIdpMIB.setLastUpdated('200605180000Z')
if mibBuilder.loadTexts: jnxIdpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxIdpMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1195 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxIdpMIB.setDescription('The Structure of IDP MIBS for Juniper Networks.')
jnxIdpSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1))
jnxIdpSensorCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorCpuUsage.setStatus('current')
if mibBuilder.loadTexts: jnxIdpSensorCpuUsage.setDescription('CPU utilization as a percentage.')
jnxIdpSensorMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorMemUsage.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorMemUsage.setDescription('Memory utilization as a percentage.')
jnxIdpSensorSessAllocated = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessAllocated.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorSessAllocated.setDescription('Number of sessions currently allocated for this IDP.')
jnxIdpSensorSessMaximum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessMaximum.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorSessMaximum.setDescription('Maximum number of sessions supported by this IDP.')
jnxIdpSensorFreeDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 5), Gauge32()).setUnits('Megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorFreeDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorFreeDiskSpace.setDescription('Free disk space available on this IDP.')
jnxIdpSensorCpuThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorCpuThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxIdpSensorCpuThreshold.setDescription('CPU alert threshold as a percentage.')
jnxIdpSensorMemThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorMemThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorMemThreshold.setDescription('Memory alert threshold as a percentage.')
jnxIdpSensorSessThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorSessThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorSessThreshold.setDescription('Session alert threshold as a percentage.')
jnxIdpSensorDiskSpaceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxIdpSensorDiskSpaceThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: jnxIdpSensorDiskSpaceThreshold.setDescription('Disk space alert threshold as a percentage.')
jnxIdpTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 12))
jnxIdpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0))
jnxIdpSessionCountNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 1)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorSessAllocated"), ("JUNIPER-IDP-MIB", "jnxIdpSensorSessThreshold"))
if mibBuilder.loadTexts: jnxIdpSessionCountNotify.setStatus('current')
if mibBuilder.loadTexts: jnxIdpSessionCountNotify.setDescription('Session count has exceeded threshold.')
jnxIdpSessionCountLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 2)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorSessAllocated"))
if mibBuilder.loadTexts: jnxIdpSessionCountLimitRestored.setStatus('current')
if mibBuilder.loadTexts: jnxIdpSessionCountLimitRestored.setDescription('Session count has returned to normal.')
jnxIdpCPUUtilizationNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 3)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorCpuUsage"), ("JUNIPER-IDP-MIB", "jnxIdpSensorCpuThreshold"))
if mibBuilder.loadTexts: jnxIdpCPUUtilizationNotify.setStatus('current')
if mibBuilder.loadTexts: jnxIdpCPUUtilizationNotify.setDescription('CPU utilization has exceeded threshold.')
jnxIdpCPUUtilizationLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 4)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorCpuUsage"))
if mibBuilder.loadTexts: jnxIdpCPUUtilizationLimitRestored.setStatus('current')
if mibBuilder.loadTexts: jnxIdpCPUUtilizationLimitRestored.setDescription('CPU utilization has returned to normal.')
jnxIdpMemoryNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 5)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorMemUsage"), ("JUNIPER-IDP-MIB", "jnxIdpSensorMemThreshold"))
if mibBuilder.loadTexts: jnxIdpMemoryNotify.setStatus('current')
if mibBuilder.loadTexts: jnxIdpMemoryNotify.setDescription('RAM memory utilization has exceeded threshold.')
jnxIdpMemoryLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 6)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorMemUsage"))
if mibBuilder.loadTexts: jnxIdpMemoryLimitRestored.setStatus('current')
if mibBuilder.loadTexts: jnxIdpMemoryLimitRestored.setDescription('RAM memory utilization has returned to normal.')
jnxIdpDiskUtilizationNotify = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 7)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorFreeDiskSpace"), ("JUNIPER-IDP-MIB", "jnxIdpSensorDiskSpaceThreshold"))
if mibBuilder.loadTexts: jnxIdpDiskUtilizationNotify.setStatus('current')
if mibBuilder.loadTexts: jnxIdpDiskUtilizationNotify.setDescription('Hard disk space utilization has exceeded threshold.')
jnxIdpDiskUtilizationLimitRestored = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 12, 0, 8)).setObjects(("JUNIPER-IDP-MIB", "jnxIdpSensorFreeDiskSpace"))
if mibBuilder.loadTexts: jnxIdpDiskUtilizationLimitRestored.setStatus('current')
if mibBuilder.loadTexts: jnxIdpDiskUtilizationLimitRestored.setDescription('Hard disk space utilization has returned to normal.')
mibBuilder.exportSymbols("JUNIPER-IDP-MIB", jnxIdpDiskUtilizationLimitRestored=jnxIdpDiskUtilizationLimitRestored, jnxIdpSessionCountNotify=jnxIdpSessionCountNotify, jnxIdpSensorCpuUsage=jnxIdpSensorCpuUsage, jnxIdpCPUUtilizationNotify=jnxIdpCPUUtilizationNotify, jnxIdpSessionCountLimitRestored=jnxIdpSessionCountLimitRestored, jnxIdpTrap=jnxIdpTrap, jnxIdpCPUUtilizationLimitRestored=jnxIdpCPUUtilizationLimitRestored, jnxIdpDiskUtilizationNotify=jnxIdpDiskUtilizationNotify, PYSNMP_MODULE_ID=jnxIdpMIB, jnxIdpTrapsPrefix=jnxIdpTrapsPrefix, jnxIdpSensorSessMaximum=jnxIdpSensorSessMaximum, jnxIdpSensorCpuThreshold=jnxIdpSensorCpuThreshold, jnxIdpMemoryNotify=jnxIdpMemoryNotify, jnxIdpMemoryLimitRestored=jnxIdpMemoryLimitRestored, jnxIdpSensorMemUsage=jnxIdpSensorMemUsage, jnxIdpSensor=jnxIdpSensor, jnxIdpSensorMemThreshold=jnxIdpSensorMemThreshold, jnxIdpSensorSessAllocated=jnxIdpSensorSessAllocated, jnxIdpSensorSessThreshold=jnxIdpSensorSessThreshold, jnxIdpSensorFreeDiskSpace=jnxIdpSensorFreeDiskSpace, jnxIdpMIB=jnxIdpMIB, jnxIdpSensorDiskSpaceThreshold=jnxIdpSensorDiskSpaceThreshold)
