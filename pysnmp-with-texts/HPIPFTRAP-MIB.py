#
# PySNMP MIB module HPIPFTRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPIPFTRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, enterprises, Counter64, IpAddress, Gauge32, NotificationType, Unsigned32, Counter32, TimeTicks, NotificationType, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "enterprises", "Counter64", "IpAddress", "Gauge32", "NotificationType", "Unsigned32", "Counter32", "TimeTicks", "NotificationType", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpIpfE0Events = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 35))
hpIpf02Events = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 45))
hpIpfEvtDetailStr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 35, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIpfEvtDetailStr.setStatus('mandatory')
if mibBuilder.loadTexts: hpIpfEvtDetailStr.setDescription('This string provides a detailed description of the Event along with variable information.')
hpevtBadOsInitChecksum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5001)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBadOsInitChecksum.setDescription('The OS has registered an OS_INIT vector, but is has not passed the checksum')
hpevtBadOsMcaChecksum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5002)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBadOsMcaChecksum.setDescription('The OS has registered an OS_MCA vector, but it has not passed the checksum')
hpevtBootBmcFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5003)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootBmcFailed.setDescription('The BMC has failed testing and has been disabled.')
hpevtBootCellLaunchEfiFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5010)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellLaunchEfiFailure.setDescription('SFW failed to launch EFI')
hpevtBootCellMonSelFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5011)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellMonSelFailure.setDescription('Monarch selection has failed. Data: 0x11 = Calibration Failure 0x22 = Select Code Failure')
hpevtBootCellMonarchCollision = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5013)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellMonarchCollision.setDescription('Monarch Collision has occurred')
hpevtBootCellVirtualizeEfiFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5023)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellVirtualizeEfiFailure.setDescription('SFW attempted to virtualize EFI and failed')
hpevtBootCellVirtualizePalFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5025)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellVirtualizePalFailure.setDescription('SFW was unable to virtualize PAL')
hpevtBootCellVirtualizeSalFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5027)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellVirtualizeSalFailure.setDescription('SFW was unable to virtualize SAL')
hpevtBootCellVirtualizeSalprocFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5028)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellVirtualizeSalprocFailure.setDescription('SFW was unable to virtualize SALPROC')
hpevtBootCpuConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5030)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuConfigFail.setDescription('SFW has failed initializing the CPU Struct. Data: Physical location of CPU that produced failure')
hpevtBootCpuEarlyConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5031)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuEarlyConfigFail.setDescription('A CPU has failed early config.')
hpevtBootCpuEarlyTestFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5033)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuEarlyTestFail.setDescription('A CPU has failed early self test. Data: PAL Test State.')
hpevtBootCpuFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5034)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuFailed.setDescription('SFW has detected that a CPU has failed. Data: The Physical Location of the CPU that failed')
hpevtBootCpuLateTestFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5036)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuLateTestFail.setDescription('SFW has determined a CPU or Memory has failed late test. This could be related to a CPU error or a Correctable Single Bit Memory error. Data: Physical location of CPU See Cause/Action.')
hpevtBootCpuLateTestInsufficientMem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5037)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuLateTestInsufficientMem.setDescription('The CPU late test has failed because of insufficient memory')
hpevtBootEfiAllocateError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5040)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiAllocateError.setDescription('Could not allocate memory for EFI image')
hpevtBootEfiImageCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5041)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiImageCorrupt.setDescription('EFI image is corrupted')
hpevtBootEfiNotInFit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5042)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiNotInFit.setDescription('EFI fit error ')
hpevtBootEfiNvmFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5045)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiNvmFail.setDescription('EFI NVM has failed testing. The cell or system will now halt.')
hpevtBootEfiRomBadSize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5048)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiRomBadSize.setDescription('EFI Image Error')
hpevtBootEfiRomXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5049)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootEfiRomXsumError.setDescription('EFI Image Error.')
hpevtBootExtIntNestLimitedExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5050)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootExtIntNestLimitedExceeded.setDescription('The IVT interrupting nesting depth has been exceeded. This processor will be halted. Data: Number of the offending vector.')
hpevtBootExtIntNotServiced = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5051)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootExtIntNotServiced.setDescription('An external interrupt has been requested and not serviced. Data: Number of the vector')
hpevtBootExtIntTaken = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5052)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootExtIntTaken.setDescription('An external interrupt has been taken. Data: Number of the vector taken.')
hpevtBootFplFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5053)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFplFailed.setDescription('Access to the FPL has failed.')
hpevtBootGetPsrFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5054)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetPsrFailure.setDescription('SFW was unable to read the CPU PSR. Data: Physical location of CPU')
hpevtBootHaltCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5055)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootHaltCell.setDescription('SFW has halted the cell or system')
hpevtBootIncompatiblePal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5056)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootIncompatiblePal.setDescription('SFW has determined that PAL is not compatible with the current processors.')
hpevtBootIncompatibleSlave = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5057)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootIncompatibleSlave.setDescription('SFW has determined that a slave processor is incompatible with the monarch. Data: Physical location of the incompatible processor.')
hpevtBootIntrptClearFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5058)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootIntrptClearFailure.setDescription('Interrupt clear failed during cell config')
hpevtBootIpmiEventFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5059)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootIpmiEventFailed.setDescription('SFW has determined that an IPMI event failed.')
hpevtBootIvtOffset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5060)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootIvtOffset.setDescription('Data: interrupt vector table (IVT) Offset')
hpevtBootLdbStateBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5063)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootLdbStateBad.setDescription('LDB state bad ')
hpevtBootLostContextInt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5064)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootLostContextInt.setDescription('Interrupt context was lost. Data: interrupt number.')
hpevtBootMinStateRegError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5065)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMinStateRegError.setDescription('Registering of the processor min state save area with PAL has failed.')
hpevtBootMonarchTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5067)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMonarchTimeout.setDescription('SFW has determined the monarch has timed out. SFW is deconfiguring the CPU. Data: Physical Location of CPU')
hpevtBootNoPalBInFit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5069)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNoPalBInFit.setDescription('A PAL_B FIT error has occurred')
hpevtBootNoSalBInFit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5070)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNoSalBInFit.setDescription('A SAL_B FIT error has occurred')
hpevtBootNvmFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5073)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNvmFail.setDescription('NVM has failed test. The system will halt')
hpevtBootOutOfRangeVector = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5076)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOutOfRangeVector.setDescription('A interrupt vector has been requested out of the acceptable range. Data: Vector Number.')
hpevtBootPalCopyInfoError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5077)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalCopyInfoError.setDescription('The PAL Copy Info call has failed.')
hpevtBootPalCopyPalError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5078)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalCopyPalError.setDescription('Error copying PAL to memory')
hpevtBootPalProcFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5079)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalProcFailure.setDescription('A PAL Proc has failed. This will halt the processor. Data: Physical Location of CPU')
hpevtBootPlatConsoleDevFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5080)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPlatConsoleDevFailed.setDescription('A console device has failed. Data: Physical Addr of device that failed.')
hpevtBootPlatIntfcDevFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5081)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPlatIntfcDevFailed.setDescription('A console device has failed. Data: Physical Addr of device that failed.')
hpevtBootPlatScrBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5082)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPlatScrBad.setDescription('Platform Scratch RAM has failed the test.')
hpevtBootRendezFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5083)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootRendezFailure.setDescription('A CPU has failed to enter rendezvous. Data: Local CPU Number')
hpevtBootSalExtractError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5084)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSalExtractError.setDescription('SFW could not extract SAL_B from the ROM')
hpevtBootScrFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5085)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootScrFail.setDescription('Platform Scratch RAM has failed test.')
hpevtBootSelFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5087)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSelFull.setDescription('IPMI SEL full ')
hpevtBootSlaveNoFinalWakeupVector = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5091)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSlaveNoFinalWakeupVector.setDescription('No wakeup vector registered for processor Data: Physical location of CPU')
hpevtBootSlaveRendezHandlerFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5092)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSlaveRendezHandlerFail.setDescription('Slave Rendezvous handler has failed. Data: Physical Location of CPU')
hpevtBootSmbiosBuildError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5098)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSmbiosBuildError.setDescription('SFW failed to build the SMBIOS tables')
hpevtBootTrapNestLimitedExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5100)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootTrapNestLimitedExceeded.setDescription('The trap nesting limit has been exceeded. Data: Vector Number')
hpevtBootTrapNotServiced = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5101)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootTrapNotServiced.setDescription('A trap has been requested and not serviced. Data: Vector Number')
hpevtBootTrapTaken = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5102)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootTrapTaken.setDescription('A trap has been taken. Data: Number of the vector taken.')
hpevtBootUnclearedInt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5103)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnclearedInt.setDescription('At least one interrupt was not cleared. Data: The highest pending interrupt number')
hpevtBootUnexpectedExtIntPostRedirTable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5104)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnexpectedExtIntPostRedirTable.setDescription('An unexpected external interrupt has occurred. Data: External Interrupt Number')
hpevtBootUnexpectedIntPreRedirTable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5105)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnexpectedIntPreRedirTable.setDescription('An interrupt has occurred before setting up the Interrupt Vector Table. Data: Interrupt Number')
hpevtBootUnexpectedMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5106)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnexpectedMca.setDescription('An unexpected MCA has occurred before MCAs are unmasked. Data: Local CPU Number.')
hpevtBootUnexpectedTrapPostRedirTable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5107)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnexpectedTrapPostRedirTable.setDescription('An unexpected trap has occurred. The trap number is either invalid or the requested trap has not been registered. Data: Trap Number')
hpevtBootUnknownFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5108)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUnknownFailure.setDescription('SFW has detected an unknown error.')
hpevtErrorsPalFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5118)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorsPalFailure.setDescription('SFW has detected a PAL Failure')
hpevtExpMcNotRegistered = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5119)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtExpMcNotRegistered.setDescription('Expected Machine Check Vector not registered')
hpevtInitInitiated = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5121)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInitInitiated.setDescription("This is the equivalent of a TOC event in the PA RISC Architecture. On IPF systems, this event is called an INIT. This event can be triggered by the 'tc' command from the MP, or from the button labeled 'TOC' :wor 'Transfer of Control' on the Management card or bezel of the system. There are also other causes of an INIT generated by software. Data: Local CPU Number")
hpevtIoCheckLbaMissingErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5123)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoCheckLbaMissingErr.setDescription("An I/O host bridge is missing. Firmware will continue boot and display the following EFI warning, 'Unexpected hardware I/O configuration.' Data Field: Physical location of the missing I/O host bridge.")
hpevtIoCheckNumSlotsErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5124)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoCheckNumSlotsErr.setDescription("Firmware detected an unexpected number of I/O slots connected to an I/O host bridge. Firmware display the following EFI warning message, 'Unexpected hardware I/O configuration.' Data Field: Physical location of the I/O host bridge.")
hpevtIoCheckRopeWidthErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5125)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoCheckRopeWidthErr.setDescription("Firmware found an I/O controller rope of unexpected width. Firmware will configure the I/O host bridge connected to the rope and display the following EFI warning message, 'Unexpected hardware I/O configuration.' Data Field: Physical location of the I/O host bridge connected to the rope.")
hpevtIoCheckXtraLbaFoundErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5127)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoCheckXtraLbaFoundErr.setDescription("Firmware found an unexpected I/O host bridge. Firmware will configure the I/O host bridge and display the following EFI warning message, 'Unexpected hardware I/O configuration.' Data Field: Physical location of the unexpected I/O host bridge.")
hpevtIoDllError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5130)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDllError.setDescription("An I/O host bridge's bus frequency DLL circuit failed. Firmware will deconfigure the failed I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O host bridge.")
hpevtIoHotPlugCtrlFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5131)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoHotPlugCtrlFailed.setDescription("An I/O host bridge's hot-plug controller has failed. Firmware will deconfigure the I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O host bridge.")
hpevtIoInvalidRopeBundle = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5132)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoInvalidRopeBundle.setDescription('Firmware attempts to configure an I/O controller rope to an unsupported width. Firmware will deconfigure any I/O host bridge connected to the rope. Data Field: Physical location of the failed rope.')
hpevtIoLbaClearErrFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5133)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaClearErrFailed.setDescription("During I/O host bridge configuration, firmware found a persistent error condition. Firmware will deconfigure the I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O host bridge.")
hpevtIoLbaResetError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5136)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaResetError.setDescription("An I/O host bridge is inaccessible because an I/O controller rope reset failed to complete. Firmware will deconfigure the I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O host bridge.")
hpevtIoNotEnoughPowerError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5137)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoNotEnoughPowerError.setDescription("There is insufficient power. Firmware will not power on a hot-plug I/O slot. In addition, firmware will display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Date Field: Physical location of the I/O slot.")
hpevtIoPciMappingFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5138)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciMappingFailed.setDescription("Firmware encountered an unexpected error while attempting to configure an I/O host bridge's I/O devices. Firmware will continue boot but will not configure the I/O devices connected to the specified I/O host bridge. Such I/O devices will not be usable as console nor boot devices but might be usable by the O/S. Data Field: Physical location of the I/O host bridge.")
hpevtIoPciMappingTooBig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5139)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciMappingTooBig.setDescription("The total resource requirement from the I/O devices connected to an I/O host bridge exceeds the resource limit of the I/O host bridge. Firmware will continue boot but will not configure the I/O devices connected to the specified I/O host bridge. In addition, firmware will display the following EFI warning message, 'Insufficient resources to assign to one or more I/O devices.' Such I/O devices will not be usable as console nor boot devices but might be usable by the O/S. Data Field: Physical location of the I/O host bridge.")
hpevtIoPciUnmappingFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5140)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciUnmappingFailed.setDescription("Firmware encountered an unexpected error while attempting to clear resource allocations on an I/O host bridge's I/O devices. Data Field: Physical location of the I/O host bridge.")
hpevtIoPcixcapSampleError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5141)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPcixcapSampleError.setDescription("An I/O host bridge failed to determine the appropriate PCI[X] mode and frequency (PCI, PCI-X 66 MHz, PCI-X 133 MHz, etc.) for its bus. Firmware will deconfigure the I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the failed I/O host bridge.")
hpevtIoPmNotRespondingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5142)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPmNotRespondingError.setDescription('Firmware is unable to access the power monitor. Firmware will assume that there is sufficient power and proceed to power on an I/O slot. Data Field: Physical location of the I/O slot.')
hpevtIoRopeResetError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5143)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoRopeResetError.setDescription('An I/O controller rope reset did not complete within the expected time limit. Firmware will deconfigure the I/O host bridge attached to the rope. Data Field: Physical location of the deconfigured I/O host bridge.')
hpevtIoSbaClearErrFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5144)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaClearErrFailed.setDescription('During I/O chipset configuration, firmware found a persistent error condition. Firmware will attempt to continue the boot. Data Field: Physical location of the I/O chipset.')
hpevtIoSlotPowerDefaultError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5145)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSlotPowerDefaultError.setDescription('During boot, firmware has found a hot-plug I/O slot with an incorrect default power state. The slot power should be off by default. Data Field: Physical location of the I/O slot.')
hpevtIoSlotPowerOnError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5146)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSlotPowerOnError.setDescription("Firmware encountered an error while attempting to power on an I/O slot. Firmware will deconfigure the I/O slot and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O slot.")
hpevtIoSlotStandbyPowerError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5147)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSlotStandbyPowerError.setDescription("An I/O slot's standby (Vaux) power has failed. Firmware will deconfigure the I/O slot and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the failed I/O slot.")
hpevtIoUnknownPcixcapVal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5148)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoUnknownPcixcapVal.setDescription("An I/O host bridge or hot-plug controller reported an illegal PCI[X] bus mode for its bus or slot, respectively. Firmware will deconfigure the I/O host bridge or I/O slot and display the following EFI warning, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the failed I/O host bridge or the failed I/O slot.")
hpevtIoUnsupRopeFreq = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5149)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoUnsupRopeFreq.setDescription("Firmware attempted to configure an I/O controller rope to an unsupported frequency. Firmware will deconfigure any I/O host bridge connected to the rope and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the failed rope.")
hpevtIoUnsupportedLba = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5150)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoUnsupportedLba.setDescription("Firmware has found an unsupported I/O host bridge type. Firmware will deconfigure the I/O host bridge and display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the I/O host bridge.")
hpevtMcInitiated = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5152)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcInitiated.setDescription('A Machine Check has been initiated')
hpevtMdtConstructAreaBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5155)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMdtConstructAreaBad.setDescription('There has been a problem building the Memory Data Table (MDT).')
hpevtMdtLmmioEntryNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5156)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMdtLmmioEntryNotFound.setDescription('There has been a problem building the Memory Data Table (MDT).')
hpevtMdtPageZeroBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5157)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMdtPageZeroBad.setDescription('Memory page 0 was slated for deallocation in the PDT. EFI cannot launch with page 0 bad, so the system will halt.')
hpevtMdtUnableToFindSpace = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5158)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMdtUnableToFindSpace.setDescription('There has been a problem building the Memory Data Table (MDT).')
hpevtMediaFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5159)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMediaFailure.setDescription('There has been a media failure.')
hpevtMemBibRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5160)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemBibRegFailure.setDescription('Indicates that the chipset register test has failed. The data field contains the physical address of the failing register.')
hpevtMemCacheLine0WrRdFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5161)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemCacheLine0WrRdFailed.setDescription("After FW's first access to main memory, FW detected that the CEC logged an error after reading back what was just written.")
hpevtMemDimmLoadOrderErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5171)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmLoadOrderErr.setDescription('A DIMM that is required to be loaded in order for this DIMM to function properly is not loaded, so FW will deallocate this DIMM. Currently, none of the platforms require any DIMMs to be loaded in order for this DIMM to work properly.')
hpevtMemDimmSpdChecksum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5172)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmSpdChecksum.setDescription('The DIMM specified by the physical location has an SPD EEPROM that has a bad checksum. The Data field is the physical location of the DIMM.')
hpevtMemDimmSpdFatal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5173)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmSpdFatal.setDescription('Detected a error in DIMM SPD')
hpevtMemDimmTypeIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5174)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmTypeIncompatible.setDescription('A DIMM was installed whose DIMM type is not compatible with the current set of supported DIMMs for this platform.')
hpevtMemDimmTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5175)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmTypeMismatch.setDescription('The DIMM type of this DIMM is not the same as the other DIMMs in the same group. The group of DIMMs is deallocated. If this is the last active group of DIMMs in the system, the system is halted.')
hpevtMemDimmTypeTableFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5176)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmTypeTableFull.setDescription('The DIMM type table is full')
hpevtMemDmtEntryNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5179)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDmtEntryNotFound.setDescription('An entry for the DIMM was not found in the DMT table. The data field contains the DMT entry that the caller wanted to find (in Dimm number format, which is 2 bytes, upper byte is the extender number, lower byte is the chip select of the rank caller is looking for.)')
hpevtMemEccMbeDataTstFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5180)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemEccMbeDataTstFailed.setDescription('The FW selftest of CEC multi-bit error (MBE) detection has failed. The upper 32 bits of the data field contain the Dword offset within the cacheline of the failed MBE detection. The lower 32 bits are split in two, and they contain the bit numbers within the Dword that were flipped in order to cause an MBE.')
hpevtMemEccMbeSignalTstFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5181)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemEccMbeSignalTstFailed.setDescription('The FW selftest of CEC multi-bit error (MBE) signaling has failed. The upper 32 bits of the data field contain the Dword offset within the cacheline of the failed MBE detection. The lower 32 bits are split in two, and they contain the bit numbers within the Dword that were flipped in order to cause an MBE.')
hpevtMemEccSbeDataTstFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5182)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemEccSbeDataTstFailed.setDescription('The FW selftest of CEC single-bit error (SBE) detection has failed. The data field contains the bit within the Dword that was flipped that caused the CEC to not see an SBE.')
hpevtMemEccSbeEccTstFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5183)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemEccSbeEccTstFailed.setDescription('The FW selftest of CEC single-bit error (SBE) detection has failed. The data field contains the bit within the Dword that was flipped that caused the CEC to not see an SBE.')
hpevtMemEnoughMemFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5185)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemEnoughMemFailed.setDescription('Memory FW detected errors below 1MB. FW will not allow boot in this case, so memory FW will reinterleave and retest.')
hpevtMemErrAddrNotInMbat = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5186)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemErrAddrNotInMbat.setDescription('Memory FW could not figure out which rank maps to the physical address specified in the data field.')
hpevtMemErrClearFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5187)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemErrClearFail.setDescription('Memory FW was unable to clear the platform error logs on the CEC. The Datafield contains the error status of the CEC.')
hpevtMemErrLogFailedToClear = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5189)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemErrLogFailedToClear.setDescription('Memory FW was unable to clear the platform error logs on the CEC. The Datafield contains the error status of the CEC.')
hpevtMemErrorRegClearFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5190)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemErrorRegClearFailure.setDescription('The Error registers in the CEC have failed to clear. The data field contains the error status of the CEC after the attempted clear.')
hpevtMemExtFatalLoadOrdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5191)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemExtFatalLoadOrdErr.setDescription('A DIMM that is required to be loaded in order for this DIMM to function properly is not loaded, so FW will deallocate this DIMM. Currently, none of the platforms require any DIMMs to be loaded in order for this DIMM to work properly.')
hpevtMemFirmwareProb = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5193)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemFirmwareProb.setDescription('An error occurred that memory FW does not know how to handle.')
hpevtMemInterleaveCodeFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5199)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemInterleaveCodeFailure.setDescription('The memory interleaving code failed.')
hpevtMemMainMemFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5202)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemMainMemFailed.setDescription('FW was unable to create a memory configuration with no errors in low memory to hand off to EFI.')
hpevtMemMbeInRank = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5204)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemMbeInRank.setDescription('A series of MEM_MBE_IN_RANK chassis code will be sent when an error is detected by firmware. The data fields will contain information on the error based on the data type as follows: Physical Location - location of dimm(s) in error; Physical Address - address affect by error; Syndrome - Firmware generated ECC syndrome that can be used to further isolate the error.')
hpevtMemMcRegFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5205)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemMcRegFailure.setDescription("The chipset's memory controller failed the register test. The data field contains the address of the register that failed selftest.")
hpevtMemNoDimmsInstalled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5208)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemNoDimmsInstalled.setDescription('Memory Discovery could not detect any DIMMs installed.')
hpevtMemNoMemFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5209)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemNoMemFound.setDescription('FW could not continue because there are no valid memory ranks loaded.')
hpevtMemPdtDisabledHalt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5211)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemPdtDisabledHalt.setDescription('The PDT has been disabled, and FW found memory errors during selftest. This is a stopboot condition. Also, the PDT will never be disabled in customer systems, so this event should never be seen in the field.')
hpevtMemPdtDisabledWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5212)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemPdtDisabledWarning.setDescription('An event indicating that the user has the PDT disabled on this boot. The PDT will never be disabled in customer systems, so this event should never be seen in the field.')
hpevtMemPdtNvmErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5214)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemPdtNvmErr.setDescription('Error writing entry into the PDT.')
hpevtMemPdtTableFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5216)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemPdtTableFull.setDescription('An attempt was made to add an entry to a full PDT. The entry is not added, and this event is sent.')
hpevtMemPlatformInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5218)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemPlatformInitFailure.setDescription('Memory FW was unable to save or restore the original error configuration (including CEC error log and signal enable and CPU ECC detection). This event should never be seen in the field unless there is a FW problem')
hpevtMemRankEntryNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5219)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemRankEntryNotFound.setDescription('The rank structure that corresponds to the rankID in the data field could not be found in the Rank table. The Data field is the rankID of the structure it is looking for. This error event should never be seen.')
hpevtMemTestExcessMcBits = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5237)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemTestExcessMcBits.setDescription('More than one error type was detected when only one error type was expected.')
hpevtMemTestFwdProgBitsInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5238)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemTestFwdProgBitsInvalid.setDescription('The forward progress bits that memory FW uses to track state are invalid. The data field is the fwd progress field.')
hpevtMemTestStatusBitsInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5244)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemTestStatusBitsInvalid.setDescription("The memory error status has bits set in it that indicate another non-memory error occurred. The data field contains the CEC's error status.")
hpevtMemTestSummaryBitsInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5245)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemTestSummaryBitsInvalid.setDescription('The memory test summary bits are invalid. The data field is the test summary bits.')
hpevtMemUnexpectedMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5248)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemUnexpectedMca.setDescription('Memory rank shadowing has been selected but is not supported by the revision of the memory controller.')
hpevtMemWarnDistributionCheckBypass = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5250)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnDistributionCheckBypass.setDescription('The control bit to skip the DIMM distribution check is set and the DIMM distribution check was skipped. This bit should only be done in the factory and not in the field.')
hpevtMemWarnLoadingOrderBypass = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5252)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnLoadingOrderBypass.setDescription('The control bit to skip the DIMM loading order check is set and the DIMM loading order check was skipped. This bit should only be done in the factory and not in the field.')
hpevtMemWarnLoopOnDestTest = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5253)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnLoopOnDestTest.setDescription('The control bit to loop on destructive memory test is set and the destructive memory tests are run continuously. This bit should only be done in the factory and not in the field.')
hpevtMemWarnSetCheckBypass = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5255)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnSetCheckBypass.setDescription('The control bit to skip the DIMM set check is set and the DIMM set check was skipped. This bit should only be done in the factory and not in the field.')
hpevtMemWarnSpdBypass = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5256)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnSpdBypass.setDescription('The control bit to skip the DIMM SPD check is set and the checking of the DIMM SPD was skipped. This bit should only be done in the factory and not in the field.')
hpevtMemWarnUsingAltConfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5257)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemWarnUsingAltConfig.setDescription('The control bit to load an alternate memory configuration is set and an alternate memory configuration has been loaded. This bit should only be set in the factory and not in the field.')
hpevtOsInitNotRegistered = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5260)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOsInitNotRegistered.setDescription('The OS_INIT vector has not been registered')
hpevtOsMcaNotRegistered = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5263)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOsMcaNotRegistered.setDescription('The OS_MCA vector has not been registered')
hpevtOsMcaUncorrectedMc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5264)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOsMcaUncorrectedMc.setDescription('An Uncorrected Machine Check has occurred')
hpevtPdhMiscRegFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5266)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhMiscRegFail.setDescription('A PDH register has failed.')
hpevtSalCheckUnknownFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5268)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalCheckUnknownFail.setDescription('The handler for SAL_CHECK has failed for an unknown reason.')
hpevtSalInitUnknownFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5270)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalInitUnknownFail.setDescription('The handler for SAL_INIT has failed for an unknown reason.')
hpevtUndefinedSmcInterleaveErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5278)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUndefinedSmcInterleaveErr.setDescription('Indicates that FW encountered a Fatal interleaving error. The data field contains the return status from the interleaving procedure call.')
hpevtUnexpectedRetToSalCheck = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5279)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpectedRetToSalCheck.setDescription('Unexpected return to SAL_CHECK.')
hpevtUnexpectedRetToSalInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5280)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpectedRetToSalInit.setDescription('The SFW TOC vector (SAL_INIT) has been unexpectedly returned to.')
hpevtFwInstalledCpuDegraded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5335)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwInstalledCpuDegraded.setDescription('Firmware is adding a device tree node for a CPU that is degraded in functionality. The cpu should not be trusted and will not be active in the system.')
hpevtPdRendezTreeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5354)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdRendezTreeError.setDescription('Firmware was unable to locate a required element in the device tree and cannot create a partition. The resource that cannot be located is listed as an ansi string in the data field.')
hpevtPdCellConfigError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5359)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdCellConfigError.setDescription('The currently executing cell is not configured to be part of the cell set it is attempting to rendezvous with.')
hpevtPdRemoteCsrReadError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5360)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdRemoteCsrReadError.setDescription('The current cell could not read a remote cells CSR. The remote cell number is displayed in the data field. These cells will not be able to rendezvous.')
hpevtPdCellLateForRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5361)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdCellLateForRendez.setDescription('The currently executing cell arrived too late to rendezvous with the other cells described in the complex profile as cells it should rendezvous with.')
hpevtPdIncompatibleCpuTypes = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5365)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdIncompatibleCpuTypes.setDescription('The currently executing cell detected CPUs that are incompatible with it to be installed on a cell that the current cell is trying to rendezvous with.')
hpevtPdCellLateLocalRendezSet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5366)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdCellLateLocalRendezSet.setDescription('The current cell was too slow creating the local rendezvous set and the other cells have left it behind. It will not be able to participate in the remainder of the rendezvous. The data field is unused, but the cell emitting this event is the one too late to rendezvous.')
hpevtCellNotInGlobalSet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5376)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellNotInGlobalSet.setDescription('The reporting cell was not included in the final global set that was agreed upon. This means that another cell either could not reach the reporting cell or the reporting cell was too late arriving to a required state.')
hpevtNoViableCoreCellInPd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5380)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoViableCoreCellInPd.setDescription('No cells in the PD can be a core cell. This is fatal.')
hpevtErrorPromotingCoreCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5383)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorPromotingCoreCell.setDescription('System Firmware was unable to notify utilities of the selected core cell number.')
hpevtFabricNoServiceProviders = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5403)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricNoServiceProviders.setDescription('The fabric code is unable to find a service provider for a required banyan service.')
hpevtFabricPortError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5404)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricPortError.setDescription('The fabric port specified in the data field had an error.')
hpevtFabricReadError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5405)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricReadError.setDescription('An error occurred reading a CSR. The CSR address is displayed in the data field.')
hpevtFabricWriteError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5406)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricWriteError.setDescription('Error writing to Fabric. CSR data in data field.')
hpevtXbcSlicesHwVersionDiffer = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5407)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcSlicesHwVersionDiffer.setDescription('Incompatible crossbar slices are installed The data field is the two revisions reported by slice1 and slice0 of the CSR data. Bits [31:0] slice0 revision Bits [63:32] slice1 revision')
hpevtXbcSlicesInDiffLocation = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5408)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcSlicesInDiffLocation.setDescription('Crossbar slices are in different locations. The data field is the two locations reported by slice1 and slice0 of the CSR data.')
hpevtMonarchTakeover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5411)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMonarchTakeover.setDescription('A CPU has taken over as the monarch CPU.')
hpevtDeadSram = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5416)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDeadSram.setDescription('SRAM cannot be accessed on the cell board. Execution cannot continue.')
hpevtDeadDillon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5417)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDeadDillon.setDescription('The PDH Arbiter component/chip cannot be located or used.')
hpevtDeadPdhHw = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5418)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDeadPdhHw.setDescription('A required piece of PDH bus hardware cannot be contacted.')
hpevtIoPciBusMixedSpeeds = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5419)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciBusMixedSpeeds.setDescription('The physical location of the PCI controller with mixed speeds is displayed in the data field.')
hpevtIoPciBusDepthExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5420)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciBusDepthExceeded.setDescription('During walking of the IO busses, the maximum depth was exceeded. This is a hardware configuration problem. The data field contains the physical location.')
hpevtlotimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5432)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtlotimeout.setDescription('A Timeout occurred during RI initialization. The CSR is in the data field. The alert level will vary.')
hpevtIoBuswalkSuperio = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5438)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoBuswalkSuperio.setDescription('SuperIO has been detected in the PCI slot displayed in the data field.')
hpevtIoSbaCorrDataParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5440)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaCorrDataParityErr.setDescription('IO Link Software error was corrected.')
hpevtIoSbaFatalDataParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5442)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaFatalDataParityErr.setDescription('Parity error in Reg FIFO Internal parity error.')
hpevtIoSbaUncFunctionErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5443)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaUncFunctionErr.setDescription('TLB Fetch timeout.')
hpevtIoSbaFatalFunctionErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5444)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaFatalFunctionErr.setDescription('Link presence goes away, FE.')
hpevtIoSbaFatalParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5445)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaFatalParityErr.setDescription('LBA to SBA parity error on command, rope will go fatal.')
hpevtIoSbaFatalMapErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5446)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaFatalMapErr.setDescription('Access to invalid TLB entry Requesting rope fatal.')
hpevtIoSbaFatalTimeoutErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5447)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaFatalTimeoutErr.setDescription('Memory Fetch Timeout.')
hpevtIoLbaInitErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5448)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaInitErr.setDescription('An error was encountered when initing the rope number specified in the data field.')
hpevtIoLbaCorrTimeoutErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5449)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaCorrTimeoutErr.setDescription('LBA correctable timeout error was encountered.')
hpevtIoLbaUncFunctionErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5450)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaUncFunctionErr.setDescription('LBA uncorrectable Function Error was encountered.')
hpevtIoLbaUncTimeoutErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5451)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaUncTimeoutErr.setDescription('LBA uncorrectable Timeout Error was encountered.')
hpevtIoLbaMiscUncErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5452)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaMiscUncErr.setDescription('Misc uncorrectable error discovered on LBA.')
hpevtIoLbaUncParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5453)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaUncParityErr.setDescription('LBA encountered an uncorrectable parity error.')
hpevtIoLbaMiscFatalErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5454)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaMiscFatalErr.setDescription('LBA misc. Fatal Error encountered.')
hpevtIoLbaFatalFunctionErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5455)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaFatalFunctionErr.setDescription('LBA Fatal function error encountered.')
hpevtIoLbaFatalParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5456)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaFatalParityErr.setDescription('LBA Fatal Parity error encountered.')
hpevtIoLbaFatalTimeoutErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5457)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLbaFatalTimeoutErr.setDescription('LBA Fatal timeout error encountered.')
hpevtIoDevAdapterMiscUncErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5458)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDevAdapterMiscUncErr.setDescription('Misc Uncorrectable Error encountered on the card specified in the data field.')
hpevtIoDevAdapterMiscFatalErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5459)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDevAdapterMiscFatalErr.setDescription('Misc fatal error was discovered on the PCI card specified in the data field.')
hpevtMemDimmSpdExtendedChecksum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5464)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmSpdExtendedChecksum.setDescription("The calculated and compared Checksums of the SPD EEPROM don't match.")
hpevtOptsHdrCksumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5467)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOptsHdrCksumError.setDescription('The Options component encountered a header checksum error. The actual data is in the data field of the chassis code.')
hpevtOptsDataCksumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5468)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOptsDataCksumError.setDescription('The Options service data had a bad checksum. Actual data is in the data field.')
hpevtPdMemIntlvWaysMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5473)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemIntlvWaysMismatch.setDescription('Internal inconsistency in the interleave tables.')
hpevtPdMemUnintlvdMemory = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5474)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemUnintlvdMemory.setDescription('The CellInfoList is not null and was expected to be. There has been an error in interleaving.')
hpevtPdMemNoMemoryDesc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5478)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemNoMemoryDesc.setDescription('Error in constructing the Memory Descriptor.')
hpevtPdMemUpdateLocalCellFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5479)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemUpdateLocalCellFailed.setDescription('Unable to update the local memory layout.')
hpevtPdMemPdtAddrNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5483)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemPdtAddrNotFound.setDescription('A required address was not found within a mapped address in the PDT.')
hpevtPdMemPdtInstallFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5485)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemPdtInstallFail.setDescription('Failure to install a partition level PDT. Errors prevented it.')
hpevtUnusableResource = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5490)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnusableResource.setDescription('A critical resource that is required early in the initialization process either could not be found, or was unusable. The specific resource is specified in the data field as follows: Platform Parameters Component not found in FIT: 0xdead0001; SRAM_BASE not found in platform parms: 0xdead0002; SRAM_SIZE not found in Platform Parms: 0xdead0003; firmware framework not found in the fit: 0xdead0004; Framework Segment not usable: 0xdead0005; bad NVRAM: 0xdead0006; PDH Arbiter unusable: 0xdead0007; SRAM unusable: 0xdead0008; CPU unusable: 0xdead0009; Options Component Unusable: 0xdead000a; Real Time Clock unusable: DEAD_RTC; Unknown: 0xdead0086')
hpevtFwError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5491)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwError.setDescription('An internal firmware error was encountered. This is usually caused by a bad parameter passed to a function, corrupt memory, corrupt malloc tables or something similar. The data field contains the IP address of the function that encountered the error.')
hpevtNvramDataCmpError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5492)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramDataCmpError.setDescription('NVRAM failed with a data compare error. 3 chassis codes will be sent. The first one will have the expected data and the second the actual data and the third one will be the address.')
hpevtNvramCrcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5493)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramCrcError.setDescription('An NVRAM CRC Error was detected. There will always be 2 chassis codes sent. The first one will give the expected data and the second the actual data.')
hpevtErm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5494)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErm.setDescription('Get Error Response Mode has been called. The first 8 bytes of the response mode string are displayed in the data field and must be converted to ASCII from the hex values.')
hpevtErrorObtainingSemaphore = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5496)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorObtainingSemaphore.setDescription('The required semaphore could not be obtained due to errors. The data field contains the IP of the routine trying to obtain the semaphore. A request was placed for more NVRAM to be allocated but NVRAM was full.')
hpevtNvramBlockRevMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5498)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBlockRevMismatch.setDescription('The NVRAM block requested has an unexpected revision. This chassis code will be emitted in pairs. The first one will contain the expected revision number, the second will contain the actual revision number.')
hpevtNvramBlockNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5499)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBlockNotFound.setDescription('The requested NVRAM block was not found. The ID that was not found is displayed in the data field.')
hpevtNvramBlockLocked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5500)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBlockLocked.setDescription('The block id specified in the data field is locked.')
hpevtNvramBlockUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5501)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBlockUnlocked.setDescription('Firmware tried to unlock a NVRAM block that was already unlocked. Data field contains the block ID.')
hpevtNvramHeaderNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5502)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramHeaderNotFound.setDescription('The header in the NVRAM space was not found.')
hpevtNvmFreelistCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5503)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvmFreelistCorrupt.setDescription('The Freelist used vor Non-Volatile Memory allocation is corrpt.')
hpevtResetForReconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5505)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtResetForReconfig.setDescription('System firmware has detected a condition that requires the cell to be reset for reconfiguration. The function has been called and is now executing. Data field contains the cell number being reset.')
hpevtPdRendezUtilityError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5507)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdRendezUtilityError.setDescription('During PD rendezvous, system firmware encountered a problem sending commands to the utilities system. This will prevent a fully functional PD from being created.')
hpevtHalt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5509)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHalt.setDescription('System Firmware has determined that cell or system progress must be halted. The data field contains the Instruction Pointer of the function that called for the halt. The second instance of this code being emitted indicates the major state in system change. This code must be emitted in pairs.')
hpevtDuiNoConsole = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5510)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDuiNoConsole.setDescription('The DUI (Developers User Interface) was entered, but there is no console available for the interface.')
hpevtErrorProcFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5511)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorProcFailed.setDescription('During Error processing and reporting, an error was detected that prevented further processing of errors. The data field contains an ASCII message indicating the problem.')
hpevtReconfigResetFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5514)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtReconfigResetFail.setDescription('System firmware is unable to complete the request to reset the cell for reconfiguration. Typically, are required step has not been performed yet or a needed resource is unavailable.')
hpevtPdErrorReachableSet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5515)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdErrorReachableSet.setDescription('The cell was not able to reach all the other cells in its configured set through the fabric. The data field contains the bitmask of actual cells that were reached.')
hpevtIoBridgeDepthExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5518)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoBridgeDepthExceeded.setDescription('Firmware detected a PCI-to-PCI bridge that exceeds the maximum supported bridge depth. Firmware will not configure I/O devices below the maximum bridge depth. Such I/O devices will not be usable as console nor boot devices but might be usable by the O/S. Data Field: PCI function address of the bridge that exceeded the maximum depth limit. Bits 24..31: segment number Bits 16..23: bus number Bits 11..15: device number Bits 8..10: function number Bits 0..7: reserved (0)')
hpevtEfiConsoleDriverError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5521)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiConsoleDriverError.setDescription('Debugging event, not for release. This event is no longer used on Everest/xPeak systems but its event ID is still contained in the code base.')
hpevtMemTestCodeInPage0Corrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5525)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemTestCodeInPage0Corrupt.setDescription('This event is unused')
hpevtRemoteCellStateUnknown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5527)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRemoteCellStateUnknown.setDescription('The reporting cell read an unknown state from a remote cell. This chassis code will be emitted in pairs. The first one indicating the cell number in the data field and the second code indicating the state read in the data field.')
hpevtPdMltplCoreCells = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5528)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMltplCoreCells.setDescription('The reporting Cell thinks that it should be the core cell but has discovered another cell in the same PD that thinks it should be the core cell. This is a serious problem.')
hpevtUtilSendCommandError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5529)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUtilSendCommandError.setDescription('The utilities system firmware component received an error response from the SINC in response to a command being sent. The exact error is displayed in the data field. Typically, this can occur when the SINC cannot talk to the MP.')
hpevtUtilCellSlotError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5530)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUtilCellSlotError.setDescription('System Firmware issued the Retrieve Cell Slot State command to the Sync and got an error back. See related chassis code or the specifics of the error.')
hpevtMcCellRendezFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5546)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcCellRendezFailed.setDescription('This denotes the fact that all the cpus in the cell did not rendezvous.')
hpevtMcNoAccessToPd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5547)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcNoAccessToPd.setDescription('This chassis code indicates that the cell does not have any access to a PD.')
hpevtMcLossOfLockstep = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5548)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcLossOfLockstep.setDescription('This indicates the cell would not be able to join the other cells in the PD level rendezvous. The data portion represents the cell id of the cell that incurred the loss of lockstep.')
hpevtMcPdCellRendezFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5550)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPdCellRendezFailed.setDescription('This indicates that some of the cells did not show up during the PD level rendezvous.')
hpevtMcProcErrHalt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5556)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcProcErrHalt.setDescription('This indicates that catastrophic errors have been found in the PIN block of the cell controller. The cell needs to be reset/ halt.')
hpevtMcCellMonarchTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5557)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcCellMonarchTimeout.setDescription('This means that the cell monach cpu has not completed the assigned task within the timeout and hence it will be deconfigured.')
hpevtMcPdCellMissedRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5558)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPdCellMissedRendez.setDescription('This indicates that the cell is too late for the PD level rendezvous. And hence it will not join the other PD cells.')
hpevtMcPdMonarchTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5559)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPdMonarchTimeout.setDescription('This indicates the state where the PD monarch was not able to complete the task within a certain time. It failed.')
hpevtRemoteSetViewRootError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5560)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRemoteSetViewRootError.setDescription('System firmware on the Core cell was unable to update a slave cell with the location of the root of the partition tree. The CPU that was unable to be contacted is printed in the data field.')
hpevtCsrTestFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5566)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCsrTestFailure.setDescription("Read test on a CSR failed and the CSR contents were not updated. This chassis code will be emitted in 3's, with the CSR Address, expected data, and actual data given.")
hpevtPdMemGetIcmInfoFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5567)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemGetIcmInfoFailed.setDescription('This chassis code reports the failure in collecting the ICM parameters needed for the cell interleaving.')
hpevtPdMemGetCellInfoFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5568)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemGetCellInfoFailed.setDescription('This chassis code indicates that the cell interleaving routine could not get the information on the cell memory.')
hpevtPdMemUpdateCellGniFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5569)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemUpdateCellGniFailed.setDescription('This chassis code is used to represent the failure in updating the GNI information of the cell with the CLM ( cell local memory) information obtained from the Complex Profile.')
hpevtPdMemAdjustMinZiFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5570)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdMemAdjustMinZiFailed.setDescription('This represents the failure in adjusting the memory information with the minimum ZI requirements.')
hpevtStableProfileXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5572)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtStableProfileXsumError.setDescription('Complex Profile A (Stable Profile) stored checksum does not match the calculated checksum. The expected data and actual data are displayed in the 2 reporting event Ids.')
hpevtDynamicProfileXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5573)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDynamicProfileXsumError.setDescription('The Dynamic Complex Profile (Group B) stored checksum did not equal the calculated checksum. The Expected Data and Actual date are displayed in successive chassis codes.')
hpevtPartitionProfileXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5574)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPartitionProfileXsumError.setDescription('The stored value of the complex profile Group C does not match the calculated value. Expected data and actual data are stored in successive chassis codes.')
hpevtStableProfileSeqidInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5575)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtStableProfileSeqidInvalid.setDescription('The Complex Profile Group A sequence ID is invalid. Booting cannot continue. The actual data is in the chassis code data field.')
hpevtDynamicProfileSeqidInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5577)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDynamicProfileSeqidInvalid.setDescription('The Dynamic Complex Profile (Group B) sequence ID is invalid. The invalid Sequence ID is displayed in the data field.')
hpevtPartitionProfileSeqidInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5578)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPartitionProfileSeqidInvalid.setDescription('The Group C Partition Complex Profile Sequence ID is invalid. The value read is displayed in the data field.')
hpevtEfiFwError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5579)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiFwError.setDescription('An internal EFI firmware error was encountered. This is usually caused by a bad parameter passed to a function, corrupt memory, corrupt malloc, corrupt firmware tree or something similar. The data field contains the IP address of the function that encountered the error.')
hpevtCmplxProfilePdNumMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5580)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCmplxProfilePdNumMismatch.setDescription('The Complex Profile Group A PD assignment for this cell does not match the PD or Partition number in Group C of the complex profile. This is a fatal condition for the cell. The PD number from group A will be emitted first, followed by a subsequent code for the PD assigned in group C.')
hpevtCmplxProfilePdNumInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5581)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCmplxProfilePdNumInvalid.setDescription('The Partition (PD) assigned to this cell in the complex profile group A and C is larger than the maximum allowed number of PDs as specified by Group A.')
hpevtXbcPortSm4Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5583)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortSm4Error.setDescription('Tried to obtain the port semaphore but GetPortSemaphore returned an ERROR. Could be a failed write to the port semaphore crossbar CSR or another cell owned the semaphore. Data field bits 32:63 contain the crossbar ID and bits 0:31 contain the port number for which the semaphore was being obtained.')
hpevtXbcPortSm4NotReleased = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5584)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortSm4NotReleased.setDescription('Currently owned the port semaphore but could not release the semaphore. Data field bits 32:63 contain the crossbar ID and bits 0:32 contain the port number.')
hpevtBootBmcTokenUploadFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5594)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootBmcTokenUploadFailure.setDescription('There was an error reading from the BMC token when attempting to write to SAL NVM. This is a stop boot condition. Data: Lower 32 bits, BMC Token Number. Upper 32 bits, bmc return status.')
hpevtBootNvmTokenAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5595)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNvmTokenAccessFailure.setDescription('The read from SAL NVM has failed. This is a stop boot condition. Data: The token number on which the read failed')
hpevtBootBmcTokenDownloadError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5596)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootBmcTokenDownloadError.setDescription('There was an error when trying to write to a BMC Token. This is a boot warning condition. Data: lower 32 bits are BMC token number, upper 32 bits is the status return from the BMC.')
hpevtBootErrorWritingFirstBootToken = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5597)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootErrorWritingFirstBootToken.setDescription('There has been an error writing the BMC_FIRST_BOOT token. This is a stop boot condition.')
hpevtBootFruReadError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5598)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFruReadError.setDescription('The read of a FRU has failed. Data: Device ID of device that failed the FRU read.')
hpevtBootFruXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5599)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFruXsumError.setDescription('The read of a FRU has failed the checksum test. Data: Device ID of device that failed the FRU read.')
hpevtBootFruVersionError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5600)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFruVersionError.setDescription('The read of a FRU has failed due to a version problem. Data: Device ID of device that failed the FRU read.')
hpevtBootRomRevToFitRevWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5601)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootRomRevToFitRevWarning.setDescription("A ROM Rev and FIT Rev do not match. Data: Code for what didn't match: 0x1 = PAL_A, 0x2 = PAL_B, 0x4 = SAL_A, 0x8 = ACPI, 0xA = EFI")
hpevtBootRomRevToRevBlockWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5602)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootRomRevToRevBlockWarning.setDescription("A ROM Rev and Rev Block do not match. Data: Code for what didn't match: 0x3 = PAL, 0x5 = SAL_A, 0x7 = SAL_B, 0x9 = ACPI, 0xB = EFI, 0xC = BMC")
hpevtBootPrimaryFitBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5603)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPrimaryFitBad.setDescription('The FIT is bad.')
hpevtBootSecondaryFitBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5604)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSecondaryFitBad.setDescription('The FIT is bad.')
hpevtBootPalARomWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5605)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalARomWarning.setDescription('PAL_A_ROM has generated a warning.')
hpevtBootPalBRomWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5606)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalBRomWarning.setDescription('PAL_B_ROM has generated a warning.')
hpevtErrorUpdatingGroupBProfile = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5607)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorUpdatingGroupBProfile.setDescription('Firmware tried to default the Dynamic (Group B) complex profile and encountered an error.')
hpevtIoPciPerr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5617)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciPerr.setDescription('An I/O device (or host bridge) detected a bus parity error. An I/O device (or host bridge) mastered a bus transaction and received a parity error response from the target. Data Field: Physical location of the I/O device (or host bridge).')
hpevtIoPciSerr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5618)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciSerr.setDescription('An I/O device (or host bridge) detected an internal error. An I/O device (or host bridge) detected a bus error. Data Field: Physical location of the I/O device (or host bridge).')
hpevtIoCheckLbaDeconfigErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5619)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoCheckLbaDeconfigErr.setDescription("Firmware has deconfigured an I/O host bridge due to an error (see earlier error event). Firmware will display the following EFI warning message, 'Failed I/O slot(s) deconfigured.' Data Field: Physical location of the deconfigured I/O host bridge.")
hpevtErrorUpdatingGroupCProfile = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5621)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrorUpdatingGroupCProfile.setDescription('Firmware tried to default the Partition (Group C) complex profile and encountered an error.')
hpevtCellNotInAPd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5622)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellNotInAPd.setDescription('The Reporting Cell is not configured to be in a PD, according to Complex Profile Group A.')
hpevtMemDimmThermalLoadOrderWarn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5623)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmThermalLoadOrderWarn.setDescription('DIMMs are not loaded on the extender in a thermally optimal way. Boot is still possible, but the DIMM arrangement should be changed to the loading order recommended in the users manual. The data field indicates the number of the extender with incorrectly loaded DIMMs.')
hpevtCellMajorityNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5626)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellMajorityNotPresent.setDescription('Not enough cells made the Rendezvous for boot to continue. The rules are listed in the cause action section.')
hpevtInitRendezvousSlavesFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5638)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInitRendezvousSlavesFail.setDescription("SFW's INIT handler failed to rendezvous the processors.")
hpevtMcIoClearFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5646)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcIoClearFail.setDescription("SFW's Machine Check Handler was unable to log or clear I/O error registers.")
hpevtMcPalCantEscalateToBerr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5655)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPalCantEscalateToBerr.setDescription('Cannot escalate an MCA to BERR')
hpevtMcPalCantEscalateToBinit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5656)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPalCantEscalateToBinit.setDescription('Cannot escalate an MCA to BINIT.')
hpevtMcPalGetFeatFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5657)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPalGetFeatFail.setDescription('SFW failed to get the feature set from PAL.')
hpevtMcPalRendFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5658)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPalRendFail.setDescription('PAL Failed to rendezvous the processors during a MCA.')
hpevtMcPalSetFeatFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5659)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcPalSetFeatFail.setDescription('SFW failed to get the feature set from PAL.')
hpevtMcRendezvousSlavesFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5677)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezvousSlavesFail.setDescription("SFW's MCA Handler has failed to rendezvous all the slaves Data: Return from the rendezvous call.")
hpevtMcRendezBadVectRange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5679)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezBadVectRange.setDescription('A bad rendezvous vector has been registered.')
hpevtMcRendezNoMonarch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5682)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezNoMonarch.setDescription('No Machine Check Monarch exists, exiting MC Rendezvous.')
hpevtMcRendezNoWakeup = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5683)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezNoWakeup.setDescription('The OS has not registered a wake-up mechanism for rendezvous.')
hpevtMcRendezPalCantEscalate = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5684)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezPalCantEscalate.setDescription('PAL call failed to set the BINIT escalation bit')
hpevtMcRendezPalGetFeatFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5685)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezPalGetFeatFail.setDescription('The PAL call PAL_GET_FEATURES has failed.')
hpevtMcRendezPalSetFeatFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5686)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRendezPalSetFeatFail.setDescription('The PAL call PAL_SET_FEATURES has failed.')
hpevtSalAbiFwError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5692)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalAbiFwError.setDescription('An internal SAL_ABI firmware error was encountered. This is usually caused by a bad parameter passed to a function, corrupt memory, corrupt malloc, corrupt firmware tree or something similar. The data field contains the IP address of the function that encountered the error.')
hpevtMemExtLoadOrdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5696)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemExtLoadOrdErr.setDescription('The Memory extenders have not been loaded in the correct order.')
hpevtEfiEsiTableLengthErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5698)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiEsiTableLengthErr.setDescription('The length field within the ESI (Extensible SAL Interface) table does not agree with the product of the entry_count field and the size of each entry. Data Field: computed value of the length based on entry_count and size of the entries.')
hpevtEfiEsiTableChecksumErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5700)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiEsiTableChecksumErr.setDescription('The computed checksum for the ESI (Extensible SAL Interface) table is not zero as expected. EFI is halting. Data Field: the computed checksum.')
hpevtEfiEsiTableUnsupportedEntryType = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5701)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiEsiTableUnsupportedEntryType.setDescription('EFI found an unsupported entry type within the ESI (Extensible SAL Interface) Table. Data Field: unknown type.')
hpevtEfiGuidTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5704)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiGuidTooLarge.setDescription('EFI was attempting to output a GUID in the EFI_GUID_HALF1 and EFI_GUID_HALF2 events which was larger than 128 bits. The data field contains the actual length of the GUID in bytes.')
hpevtEfiHalt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5708)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiHalt.setDescription("EFI is halting. Look for the cause of the halt in preceding events. Data Field: the 'halt' (0x0F) major change in system state code.")
hpevtMemChipspareNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5711)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemChipspareNotSupported.setDescription("This code will be sent when FW detects a rank installed in the system that doesn't support chipspare. The data field is used to indicate the rank that the x8 DIMMs are installed. It is in the format 0x00000000XDXCXBXA or 0x00000000YBYAXBXA where X and Y are the number of the rank.")
hpevtEfiAssertError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5712)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiAssertError.setDescription('EFI has detected an internal error. The actual error is unspecified by this event. Examine previous events and console output for possible explanations.')
hpevtEfiEfiBreakpoint = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5713)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiEfiBreakpoint.setDescription("EFI has executed the 'break' shell command. EFI is halting. The 'break' command is currently implemented as an infinite loop to halt EFI.")
hpevtEfiHcdHostHung = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5714)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiHcdHostHung.setDescription('The EFI USB interrupt service has detected the host controller is hung. EFI is halting.')
hpevtEfiSalHandoffVerMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5715)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalHandoffVerMismatch.setDescription("The EFI/SAL handoff structure's version does not match EFI expectations. EFI is halting. Look for EFI_SAL_HANDOFF_VER_EXPECTED to provide EFI's expected value. Data Field: Actual value of the version in the structure.")
hpevtEfiSalRtcServiceNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5717)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalRtcServiceNotInit.setDescription('EFI is unable to obtain access to all the RTC (Real Time Clock) SAL services. This means that EFI is unable to fully interact with the RTC. EFI is halting. Data Field: Return status from internal EFI function.')
hpevtEfiSalTimerServiceNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5718)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalTimerServiceNotInit.setDescription('EFI is unable to obtain access to all the SAL timer services. This means that EFI is unable to fully interact with the timer. EFI is halting. Data Field: Return status from internal EFI function.')
hpevtEfiSalStarttimerServiceNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5719)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalStarttimerServiceNotInit.setDescription('EFI is unable to start the periodic timer. This timer interrupts EFI periodically to process time sensitive events. EFI is halting. Data Field: Return status for internal EFI function.')
hpevtEfiNoIoPortSpaceRegionFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5720)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiNoIoPortSpaceRegionFound.setDescription('EFI did not find an I/O port space region in the MDT. EFI is halting.')
hpevtEfiBreakpoint = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5721)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiBreakpoint.setDescription('EFI reached an unimplemented section of code. EFI is halting. Data Field: Unique identifier indicating the location reached within the code.')
hpevtEfiSpeedyBootTokenNotRead = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5722)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSpeedyBootTokenNotRead.setDescription('EFI was unable to read the current speedy boot settings. The speedy boot settings are stored within the BMC. EFI will use a default value of 0 and continue booting. The speedy boot functionality is also accessed via the boot test EFI shell command and via the OS. These other accesses will likely fail. Data Field: Return status from internal EFI function..')
hpevtEfiSalCallbackAttempted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5723)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalCallbackAttempted.setDescription('A SAL Callback was attempted. This is not permitted. EFI is halting. Data Field: index of the function that was being called.')
hpevtEfiSalFreqBaseUnknown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5724)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSalFreqBaseUnknown.setDescription('While attempting to calibrate the EFI stall timer, system firmware is unable to determine the frequency of the CPU interval timer. System firmware will assume 800 MHz for the purpose of the stall timer calibration and continue boot. Data Field: error status code (should be 0xFFFFFFFD).')
hpevtEfiSysEventAlreadyInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5725)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysEventAlreadyInit.setDescription('The EFI system events have already been initialized. This is unexpected. EFI is continuing. Data Field: the current value of the system event entry point.')
hpevtEfiSysEventCreateEventFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5726)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysEventCreateEventFail.setDescription("EFI was unable to create an internal virtualization event while initializing EFI's System Events (IPMI events). This internal event is not an IPMI event; rather it serves as a trigger for EFI to virtualize the System Event facility when going virtual. EFI will likely halt. Data Field: return status from internal EFI function.")
hpevtFpgaNodeInitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5728)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFpgaNodeInitError.setDescription('An error was detected while initializing the FPGA node and services associated with the PDH.')
hpevtIoconfigNodeInitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5729)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoconfigNodeInitError.setDescription('Firmware encountered an error when creating the ioconfig node as a child of the pdh node.')
hpevtDillonPdhNodeInitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5730)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDillonPdhNodeInitError.setDescription('System firmware was unable to correctly set up the pdh arbiter node as a child of the pdh node, or was unable to locate and attach the pdh arbiter service to the node. The status is returned in the data field.')
hpevtPdhPropertyError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5731)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhPropertyError.setDescription('The PDH service was unable to either get or set the property specified in the data field as an ASCII message.')
hpevtPdhAcpihwNodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5732)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhAcpihwNodeError.setDescription('PDH encountered an error creating the ACPI Hardware Node in the device tree or installing its properties.')
hpevtPdhIpmiNodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5733)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhIpmiNodeError.setDescription('The PDH service encountered an error while creating the ipmi node or adding properties to it. The status is in the data field.')
hpevtBootCpusNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5734)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpusNotCompatible.setDescription('Installed processors are not of compatible models or families')
hpevtBootCacheSizesInconsistant = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5735)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCacheSizesInconsistant.setDescription('Processors with different cache sizes are installed')
hpevtBootSelectingNewMonarch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5737)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSelectingNewMonarch.setDescription('SFW is selecting a new monarch processor due to compatibility problems.')
hpevtBootMonSelSteppingsNoEqual = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5738)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMonSelSteppingsNoEqual.setDescription('The monarch stepping is not equal to the lowest installed CPU stepping.')
hpevtBootCpuOverClocked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5740)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuOverClocked.setDescription("A CPU's FSB frequency is overclocked. Data: Local CPU Number.")
hpevtBootCpuInfoRomAccessError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5741)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuInfoRomAccessError.setDescription('There was an error reading the info ROM area of the CPU. Data: CPU Physical location')
hpevtBootPalANotExecuted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5742)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalANotExecuted.setDescription('PAL_A has not been executed and control has been transferred back to SAL_B.')
hpevtBootPalBNotExecuted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5743)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPalBNotExecuted.setDescription('PAL_B has not been executed and control has been transferred back to SAL_B.')
hpevtBootProtoTypeCpuInstalled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5744)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootProtoTypeCpuInstalled.setDescription('Data: Lower 32 bits have Local CPU Number')
hpevtBootFinalRendezWatchdogFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5745)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFinalRendezWatchdogFail.setDescription("Data: Monarch's Local CPU Number")
hpevtCpuSupplementalTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5746)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuSupplementalTestFailed.setDescription('Supplemental tests have been run on the cpus in the node and an error was encountered. If this event id is only emitted once, then the cpu detected that it failed on its own and the offending CPU id is in the data field. If the event is emitted three times, then the monarch CPU on the cell detected the error and the offending CPU id, expected data and actual data are reported in the data field of the three events.')
hpevtFabricReadMbeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5747)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricReadMbeError.setDescription('While reading a XBC CSR, a multi-bit error was found. Data field includes the CSR data that includes the error. A previous event, FABRIC_READ_ERROR, details the CSR address that failed.')
hpevtFabricUnexpectedStatus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5749)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricUnexpectedStatus.setDescription('The return value from a function was an unknown value. Data field is the unknown status that was returned.')
hpevtEfiSysidBmcWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5750)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysidBmcWarning.setDescription('EFI queries the BMC on the system board for the status of a system ID. The BMC could not complete the request successfully or on time. Data Field: Internal EFI function status.')
hpevtEfiSysidBmcReadError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5751)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysidBmcReadError.setDescription('BMC reported a system ID status as inaccessible, reported invalid status or cannot return the current value of a system ID. Data Field: uuid status or internal EFI function status. System ID status: a 1 byte value 0 extended to 64bits: 0x00 -> primary and secondary values are valid 0x01 -> primary and secondary values are magic 0x02 -> primary and secondary values are inaccessible 0x04 -> primary and secondary values are invalid 0x08 -> primary and secondary values are null (UUID only) 0x10 -> primary and secondary values are different, value (primary or secondary) is valid 0x11 -> primary and secondary values are different, value (primary or secondary) is magic 0x12 -> primary and secondary values are different, value (primary or secondary) is inaccessible 0x14 -> primary and secondary values are different, value (primary or secondary) is invalid 0x18 -> primary and secondary values are different, value (primary or secondary) is null (UUID only)')
hpevtEfiSysidBmcWriteError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5752)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysidBmcWriteError.setDescription('Firmware tried to write a primary or secondary system ID as requested by the user during the boot sequence. The write failed. Data Field: Internal EFI function status.')
hpevtEfiSysidInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5753)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSysidInvalid.setDescription('The system ID(s) currently in the system is either invalid or, if the EFI_SYSID_BMC_WARNING, EFI_SYSID_BMC_READ_ERROR or EFI_SYSID_BMC_WRITE_ERROR events are also present, inaccessible to the system firmware. A stop boot condition will be generated and software license will probably be invalid. Data Field: 64-bit value. If preceded by 0xbad00000000000 the following valid values are possible: 0000 -> valid UUID (should never see this one) 0001 -> magic UUID 0002 -> inaccessible UUID 0004 -> invalid (bad CRC) UUID If zero, then one of the following conditions occurred: Invalid combination of primary and secondary system ID values User declined copying/entering system ID values when prompted by firmware All other values indicate failure during attempt to update system IDs.')
hpevtEfiRtIvtEsiTableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5755)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiRtIvtEsiTableErr.setDescription('EFI is unable to find the SAL services for installing interrupt handlers. EFI was trying to install the run-time handlers that are required for normal EFI booting. EFI will be halting. Data Field: internal EFI function status.')
hpevtEfiRtIvtEsiQueryErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5756)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiRtIvtEsiQueryErr.setDescription('EFI is unable to find the SAL service to install run-time interrupt handlers. These handlers are required for normal EFI booting. EFI will be halting. Data Field: internal EFI function status.')
hpevtEfiBootIvtEsiTableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5757)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiBootIvtEsiTableErr.setDescription(' EFI is unable to find the SAL services for installing interrupt handlers. EFI was trying to install the boot-time handlers that are required for normal EFI booting. EFI will be halting. Data Field: internal EFI function status.')
hpevtEfiBootIvtEsiQueryErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5758)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiBootIvtEsiQueryErr.setDescription('EFI is unable to find the SAL service to install boot-time interrupt handlers. These handlers are required for normal EFI booting. EFI will be halting. Data Field: internal EFI function status.')
hpevtUtilitiesParmListTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5760)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUtilitiesParmListTooLarge.setDescription('Too many parameters were passed in a request for the utilities system to perform an operation. No more data is provided.')
hpevtXbcPortPresenceError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5762)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortPresenceError.setDescription('A crossbar port is expected to be present, but its presence detect bit is not set. Data field bits 32:43 contain the crossbar ID, bits 44:55 contain the port number for which the error occurred, and bits 0:31 contain the port status information.')
hpevtXbcPortHwLinkError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5763)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortHwLinkError.setDescription('A crossbar port is expected to have its HW_LINK_OK bit set, but it is not. Data field bits 32:43 contain the crossbar ID, bits 44:55 contain the port number for which the error occurred, and bits 0:31 contain the port status information.')
hpevtXbcPortFeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5764)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortFeError.setDescription('A connected crossbar port was found to have its FE bit set. Data field bits 32:43 contain the crossbar ID, bits 44:55 contain the port number for which the error occurred, and bits 0:31 contain the port status information.')
hpevtXinLinkInitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5766)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXinLinkInitError.setDescription('There was an error while initializing the Cell Controller-Xbc interface. The data field contains the address of the Cell Controller CSR for which the error occurred.')
hpevtXinLinkInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5767)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXinLinkInitFailed.setDescription('The CC - XBC link failed to initialize.')
hpevtEfiGetMfgModeNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5768)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiGetMfgModeNotInit.setDescription('EFI is unable to determine current system mode. The EFI/SAL interface is not initialized. This interface should have been initialized before now. This event indicates an internal EFI error. EFI will continue executing.')
hpevtEfiBmcMfgModeInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5769)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiBmcMfgModeInvalid.setDescription('The BMC has returned an invalid system mode. Data Field: the invalid mode. Expected values are 0 or 1.')
hpevtEfiEnterMfgModeNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5770)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiEnterMfgModeNotInit.setDescription('EFI is unable to specify a new system mode. The EFI/SAL interface point is not initialized. This interface should have been initialized before now. This event indicates an internal EFI error. EFI will continue executing in the current mode.')
hpevtEfiExitMfgModeNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5771)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiExitMfgModeNotInit.setDescription('EFI is unable to enter normal system mode. The EFI/SAL interface is not initialized. This interface should have been initialized before now. This event indicates an internal EFI error. EFI will continue executing in the current mode.')
hpevtEfiTaccessServiceNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5772)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiTaccessServiceNotInit.setDescription('EFI is unable to initialize part of the SAL/EFI interface. This crucial service provides access to certain BMC functionality such as the security system. EFI will halt. Data Field: Return status from internal EFI function.')
hpevtTreeNodeNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5774)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtTreeNodeNotFound.setDescription('A needed tree node was not found. The data field contains the ASCII name of the tree node that was not found.')
hpevtEfiSystemStateRunningErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5776)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSystemStateRunningErr.setDescription("EFI is unable to modify the system state from 'booting' to 'running'. This is done as part of Exit Boot Services. The system will not be able to enter a sleep mode. Data Field: For errors, this data is zero. For warnings, this data indicates the current system state as: 0 Error 1 booting 2 running 3 attention 4 fault 5 booting + attention")
hpevtPalBusConfigIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5777)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPalBusConfigIncompatible.setDescription('CPUBusConfigValue setting in options as been compared with what is reported by PAL as settable and CPUBusConfigValue is specifying at least one bit that is not supported by this version of PAL using the Get Processor Bus Dependent Configuration Features. This chassis code is emitted in pairs, the first data field contains the PAL expected values; the second data field contains the requested setting from options.')
hpevtPalGetBusFeaturesFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5778)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPalGetBusFeaturesFailed.setDescription('Firmware was unable to correctly issue the Get Processor Bus Dependent Configuration Features command.')
hpevtMemDimmPairMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5779)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmPairMismatch.setDescription('A pair of DIMMs installed in the system are mismatched, and that pair of DIMMs will not be used. The data field indicates which pair of DIMMs are mismatched in the format 0x000000000000XBXA where X is the number of the rank that is mismatched.')
hpevtEfiPosseLibNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5784)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiPosseLibNotInit.setDescription("EFI is unable to initialize internal library. This collection of internal services is required for much of EFI's functionality. EFI is halting.")
hpevtEfiSecurityNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5785)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecurityNotInit.setDescription('EFI is unable to initialize the security level. The privilege level of the system may or may not be Admin. It is likely certain EFI facilities will be unavailable. EFI will continue booting but security may be compromised. Data Field: Return status from internal EFI function.')
hpevtEfiSecInvalidSysmode = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5786)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInvalidSysmode.setDescription('EFI detected an invalid value for its internal privilege level. This value is stored within SAL. EFI will continue but system security may be compromised. Data Field: The invalid privilege level.')
hpevtEfiSecSetPassLevelErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5787)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecSetPassLevelErr.setDescription('EFI detected an invalid privilege level when setting a BMC password. Only the levels of Admin (0x30) and User (0x20) are permitted. Data Field: the invalid privilege level.')
hpevtMdtBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5788)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMdtBad.setDescription('SFW has determined that the Memory Data Table (MDT) table is invalid.')
hpevtBootCpuBadCoreFixedRatio = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5790)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuBadCoreFixedRatio.setDescription('Processor has incompatible fixed core ratio. Data: Local CPU Number.')
hpevtBootAllCpusSlatedForCompatDeconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5791)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootAllCpusSlatedForCompatDeconfig.setDescription('Data: A bitmask for which CPUs are slated to be deconfigured')
hpevtXbcReadRemoteRouteError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5793)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcReadRemoteRouteError.setDescription('An error occurred while reading a crossbar remote route table, or an unexpected/invalid value was read from the table. The data field consists of the crossbar ID (32:43), the port number of which the table was read (44:55), and the return status of the read call (0:32).')
hpevtXbcReadNeighborInfoError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5794)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcReadNeighborInfoError.setDescription('An error occurred while trying to read the PORT[n]_NEIGHBOR_INFO crossbar CSR. The data field consists of the crossbar ID (32:43) and port number (44:55) for which the CSR was read.')
hpevtMemDimmQuadMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5795)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmQuadMismatch.setDescription('A quad of DIMMs installed in the system are mismatched, and that quad of DIMMs will not be used. The data field indicates which quad of DIMMs are mismatched in the format 0x00000000XDXCXBXA where X is the number of the rank that is mismatched.')
hpevtMemDimmFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5796)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmFailed.setDescription("The DIMM at the physical location given by the data field had excessive errors and has been marked as 'FAILED' by firmware.")
hpevtXbcPortOeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5797)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortOeError.setDescription('A XBC port was expected to be functional, but its OE bit was not set. The data field consists of the contents of the port_status CSR (0:31), the XBC number (32:43), and the port number (44:55).')
hpevtXbcPortStatusError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5798)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortStatusError.setDescription('Unable to read the PORT_STATUS CSR for a XBC port. The data field consists of the contents of the PORT_STATUS CSR (0:31), the XBC number (32:43), and the port number (44:55).')
hpevtXbcPortLandmined = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5799)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortLandmined.setDescription('A XBC port was unexpectedly found to be landmined. The data field consists of the XBC number (32:43) and the port number (44:55).')
hpevtPdIncompatibleCpuSpeeds = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5800)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdIncompatibleCpuSpeeds.setDescription('Reporting cell tried to rendezvous with a cell with processors that are running at a different speed. The data field lists the offending cell')
hpevtFabricCellLinkNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5802)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellLinkNotInit.setDescription('The link between the local CC and the local XBC is unexpectedly not initialized. The data field is the XIN_LINK_STATE CC CSR value.')
hpevtFabricInvalidXbcNum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5803)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricInvalidXbcNum.setDescription('A value that was expected to be a XBC number was found to be an invalid XBC number. The data field is the invalid XBC number.')
hpevtFabricInvalidXbcPortNum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5804)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricInvalidXbcPortNum.setDescription('A value that was expected to be a valid XBC port number was found to be invalid. The data field is the XBC number (33:44) and the invalid XBC port number (44:55).')
hpevtUtilitiesLedParamError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5805)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUtilitiesLedParamError.setDescription('A bad parameter was passed to the utilities function that manipulates the LED on replaceable parts. The offending parameter is displayed in the data field.')
hpevtFabricUnexpectedNtype = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5806)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricUnexpectedNtype.setDescription('A neighbor type read from a XBC PORT_NEIGHBOR_INFO CSR was different than the expected neighbor type. This event is emitted twice, first with expected data and second with actual data. Data field 1: XBC number (43:32), XBC port number (55:44), expected type (31:0) Data field 2: XBC number (43:32), XBC port number (55:44), actual neighbor type (31:0).')
hpevtFabricPortNotCc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5807)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricPortNotCc.setDescription('A XBC port number was unexpectedly found to not be a valid XBC-CC port. The data field consists of the XBC number (32:43) and the port number (44:55).')
hpevtFabricPortNotXbc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5808)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricPortNotXbc.setDescription('A XBC port was unexpectedly found to be an invalid XBC-XBC port. The data field consists of the XBC number (32:43) and the port number (44:55).')
hpevtFabricUnexpectedNChip = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5809)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricUnexpectedNChip.setDescription('The XBC neighbor chip number does not match the expected value for this topology. The data field contains the expected neighbor chip number (32:63) and the actual neighbor chip number (0:31).')
hpevtFabricUnexpectedNPort = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5810)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricUnexpectedNPort.setDescription('The XBC neighbor port number does not match the expected value for this topology. The data field contains the expected neighbor port number (32:63) and the actual neighbor port number (0:31).')
hpevtBootNvmWriteToBmcTokenFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5811)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNvmWriteToBmcTokenFailure.setDescription('A write to a BMC token has failed. This is a boot warning condition. Data: Upper 32 bits, BMC failure return code. Lower 32 bits, BMC token number that failed.')
hpevtUtilitiesLedError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5812)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUtilitiesLedError.setDescription('The utilities system reported an error while trying to carry out the command to turn on, flash or turn off the LED. The status returned by the command is displayed in the data field.')
hpevtDuplicateCpuIds = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5813)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDuplicateCpuIds.setDescription('2 cpus think that they have the same ID within the cell. Typically this would mean that PAL reported the same cpu id for more than 1 cpu on a bus. The cpuid is in the data field.')
hpevtHp_uxCrashdumpStarted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5823)).setLabel("hpevtHp-uxCrashdumpStarted").setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHp_uxCrashdumpStarted.setDescription('OS crashdump started (D700)')
hpevtHp_uxHexFaultCode = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5824)).setLabel("hpevtHp-uxHexFaultCode").setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHp_uxHexFaultCode.setDescription('OS legacy PA hex fault code (Bxxx). Possible I/O error or system panic')
hpevtHp_uxDumpStatus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5825)).setLabel("hpevtHp-uxDumpStatus").setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHp_uxDumpStatus.setDescription('A memory dump occurred on the system, or on one partition in a cellular system. The dump occurred due to either a non-recoverable error or by user request. EFxx is the OS dump status (the success/failure of the writing of the dump). EF00 = success (followed by either EF0A = successful dump with sync, or EF09 = successful dump without sync), EFFF = a general error, EFFE = dump path assertion failure, EFFD = no dump was taken by default, choice or failure, EFFC = dump was aborted by user.')
hpevtSettingProcTimeoutFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5827)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSettingProcTimeoutFail.setDescription('SFW has failed to set the processor timeout value via a PAL call. Data: PAL call return value.')
hpevtEfiSecInitVerifyErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5832)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInitVerifyErr.setDescription('During EFI security initialization, the attempt to determine what privilege level a blank password provides, failed. Most likely this indicates the BMC has failed. EFI assumes that the BMC has failed and will attempt to continue booting. Some EFI functionality may be unavailable. Data Field: Return status from internal EFI function.')
hpevtEfiSecInitCloseErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5833)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInitCloseErr.setDescription('As part of normal security initialization, EFI attempted to issue a close session to the BMC (I.e. force the BMC to GUEST mode). This attempt failed. EFI is unable to initialize the security system. EFI will continue but security may be compromised. Data Field: Return status from internal EFI function.')
hpevtEfiSecInitOpenErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5834)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInitOpenErr.setDescription('As part of normal security initialization, EFI attempted to issue an open session to the BMC in order to raise the privilege level to the highest permitted by a blank password. This attempt failed. EFI is unable to initialize the security system. Data Field: Return status from internal EFI function.')
hpevtEfiSecInitWriteErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5836)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInitWriteErr.setDescription('As part of normal security initialization, EFI attempted to record the current privilege level. This attempt failed. EFI is unable to initialize the security system. Data Field: Return status from internal EFI function.')
hpevtEfiSecInitWriteDenied = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5837)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiSecInitWriteDenied.setDescription('As part of normal security initialization, EFI attempted to record the current privilege level. This attempt failed with a privilege violation error. EFI is unable to initialize the security system. Data Field: Return status from internal EFI function.')
hpevtHp_uxDumpWriteError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5853)).setLabel("hpevtHp-uxDumpWriteError").setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHp_uxDumpWriteError.setDescription('OS dump, error writing image area to disk (E055)')
hpevtErrDeadlockResetDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,5896)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrDeadlockResetDetected.setDescription('Early in bootstrap, the coherency controller (CC) registers are checked for Deadlock Recovery Reset. This chassis code indicates that CC logs will be stored to NVRAM.')
hpevtMemParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6002)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemParityErr.setDescription('SFW detected a memory address parity error. The data field contains the physical location of DIMM that saw the parity error.')
hpevtMemDimmLoadOrdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6074)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmLoadOrdErr.setDescription('The loading order of the DIMMs is incorrect. The cell is halted.')
hpevtMemRefreshStartError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6146)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemRefreshStartError.setDescription('Timeout Waiting for SDRAM parts to become ready - mem_status[0] Refresh Control Register')
hpevtMemExtBaseboardIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6180)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemExtBaseboardIncompatible.setDescription('The version of Memory extender installed in the system has not been qualified to work with the version of the baseboard installed in the system.')
hpevtFabricDifferentTopologies = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6730)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricDifferentTopologies.setDescription('There is a fabric topology mismatch with the XBCs in the complex. Data Field: (Topology of XBC << 32) | Topology of destination XBC 0x00 Topology not yet determined 0x30 Domelight 0x40 U-Turn (Left cabinet) 0x41 U-Turn (Right cabinet) 0x42 Cross-Flex 0x43 U-Turn')
hpevtFabricInvalidXbc2XbcPort = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,6795)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricInvalidXbc2XbcPort.setDescription('While routing the XBC to XBC ports, an invalid port was encountered. The data field is the crossbar number (32:43) and the port number (44:55).')
hpevtFabricGetNeighborInfoError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7652)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricGetNeighborInfoError.setDescription('The XBC could not get neighbor information. Data Field: XBC # << 32 | internal port attempting to access neighbor')
hpevtXbcRoutingErrorState = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7653)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcRoutingErrorState.setDescription('For the XBC being routed, routing has already been attempted, but an error occurred. Inspect chassis codes from other cells for more details regarding the nature of the problem. The data field consists of the XBC number (32:63)')
hpevtNoNvmErrLogSpace = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7655)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoNvmErrLogSpace.setDescription('This means that the error event log cannot be logged to the persistent storage. The data field gives the event type that was supposed to be logged.')
hpevtXbcPortError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7657)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortError.setDescription('An XBC port was found to have an unexpected error. The data field consists of the crossbar number (32:63) and the current port errors (0:31)')
hpevtXbcPortRouteAround = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7658)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortRouteAround.setDescription('During fabric routing a port on a XBC was found in error or had been previously marked as in error. PDC will route around this XBC port. Data Field: XBC number (32:63) and external XBC port number (0:31)')
hpevtXbcUnexpectedState = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7660)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcUnexpectedState.setDescription('Data field: the unexpected forward progress state (0:31) XBC number (32:44) Cell number (56:63)')
hpevtXbcRoutingStateTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7661)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcRoutingStateTimeout.setDescription('A crossbar was found to be in an unexpected forward progress state during fabric routing. This crossbar stayed in the unexpected state until Fabric Discovery timed out. Data field: unexpected forward progress (0:31) XBC number (32:44) Cell number (56:63)')
hpevtXbcNeighborPortNotRoutable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7663)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcNeighborPortNotRoutable.setDescription('An XBC port was found that is not healthy. This indicates at least one of the following about the port: - Hardware link is not okay - Presence detect is false - Fatal error detected - SBE detected - LPE detected - Port landmined The data field of the chassis code indicates which port is unhealthy, as well as the fabric routing state before the problem was encountered.')
hpevtFabricCcToXbcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7664)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCcToXbcError.setDescription('The CC to XBC link is not viable.')
hpevtFabricRouteXbcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7666)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRouteXbcError.setDescription('There was a problem performing remote routing on the local XBC. Chassis codes sent before this one may provide more details about the exact nature of the problem. The data field consists of the XBC number that failed routing (32:63)')
hpevtFabricMaxBrokenLinks = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7667)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricMaxBrokenLinks.setDescription('Two or more XBC-XBC links were found to be broken. The data field is the XBC number (32:63) and a bit map of the ports broken (0:31)')
hpevtXbcSemaphoreTakeoverFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7669)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcSemaphoreTakeoverFailed.setDescription('After unlocking the XBC Global Semaphore for a takeover, this cell did not get the semaphore.')
hpevtXbcForceUnlockSm4Timeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7671)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcForceUnlockSm4Timeout.setDescription('When a cell holds an XBC semaphore for an extended period of time, fabric will attempt to takeover the semaphore so that the rest of the cells will have access to it. Fabric will attempt to take the SM4 for a period of time. If it is unable to unlock the SM4 within the timeout period, it will send this chassis code and halt the cell. Data field: XBC number (32:63) and current owner (cell) of the semaphore (0:31)')
hpevtXbcGetGlobalSm4Timeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7673)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcGetGlobalSm4Timeout.setDescription("During Fabric Discovery, the cell will wait until it gets the XBC's Global Semaphore. It waits for a very long time. This chassis code indicates that the wait has timed out.")
hpevtXbcReleaseSm4Timeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7674)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcReleaseSm4Timeout.setDescription('The XBC Release Semaphore timeout is designed to fail last. The semaphore could not be released. Any other cell (even outside the PD) may be blocked because the XBC is a global resource. Data field: current semaphore owner (0:31) XBC number (32:43) port number (44:55) cell number (56:63)')
hpevtMpBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7684)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMpBatteryFailure.setDescription('Management Processor Firmware detected improper data in NVRAM (bad checksums.) Either the NVRAM layout changed, or the Management Processor Battery may not be maintaining the data through A/C power cycles.')
hpevtMpSoftwareError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7685)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMpSoftwareError.setDescription('Management Processor Firmware detected a software error and is logging an event. The data represents data associated with the error seen.')
hpevtMpI2cCommError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7686)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMpI2cCommError.setDescription('An I2C Communication failure with the Baseboard Management Controller was detected. Without I2C communication, the system cannot be powered on/off or reset.')
hpevtRomCrcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7690)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRomCrcError.setDescription('A stored CRC value did not match the calculated CRC value for the specified address.')
hpevtIoIdentifyIoBpFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7718)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoIdentifyIoBpFailed.setDescription('See Summary.')
hpevtCpuRevisionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7732)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuRevisionMismatch.setDescription('2 cpus in the system are reporting different revisions. This event will be emitted in groups of 3 with the two revisions reported in the first 2 data fields and the cpu number in the 3rd data field.')
hpevtCpuFreqMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7733)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuFreqMismatch.setDescription('This chassis code will be emitted in pairs. 2 cpus are reporting that they are running at different frequencies. The two frequencies are reported in the data fields.')
hpevtCpuOverclocked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7734)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuOverclocked.setDescription('The rating for the cpu and the actual speed will be emitted in 2 sequential event data fields.')
hpevtCmplxProfilIncoherent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7758)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCmplxProfilIncoherent.setDescription("The complex profile is stored in NVRAM on the MP and each cell. All copies must match. For this error to be generated, not only is the MP's copy of the complex profile invalid, but not all of the cell's copies match.")
hpevtDuplicateCabinet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7760)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDuplicateCabinet.setDescription('The MP detected 2 or more cabinets with the same cabinet number.')
hpevtIdCommandRequired = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7767)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIdCommandRequired.setDescription("The complex identification information in group A of the complex profile is invalid. The MP (Manageability Processor) command 'ID' must be run. The SSKEY hardware is required.")
hpevtNvramBatteryFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7771)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBatteryFail.setDescription('The battery on the SBCH is below the safe threshold. The battery can be replaced online.')
hpevtPartitionTimeoutReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7773)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPartitionTimeoutReset.setDescription('The partition is being reset because its watchdog timer expired and automatic restart is enabled.')
hpevtPdhcWatchdogTimedOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7774)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcWatchdogTimedOut.setDescription('The processor dependent hardware controller (PDHC) on the cell board had its watchdog timer expire. The PDHC will reset the watchdog as the main program runs. If the watchdog does not get reset within 7 seconds the timer will expire, resetting the PDHC.')
hpevtAbortPowerupOth = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7781)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAbortPowerupOth.setDescription('The Cabinet Power Up request was aborted due to ambient air over temperature.')
hpevtAbortPwrupBps = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7782)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAbortPwrupBps.setDescription('The power requirements for the cabinet exceeds the capabilities of the available Bulk Power Supplies. The PM3 section of the Utilities Subsystems keeps a tally of the power requirements for all installed entities in a cabinet. The power available from the Bulk Power Supplies does not meet the requirements of the installed entities, according to the Cabinet Power Tally.')
hpevtAbortStartBlowr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7783)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAbortStartBlowr.setDescription('When given a power up request, the cabinet had to abort the start up due to less than the required number of Cabinet Blowers installed.')
hpevtAbortStartIofan = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7784)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAbortStartIofan.setDescription('When given a power up request, the cabinet had to abort the start up due to less than the required number of IO fans present.')
hpevtAcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7786)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcDeleted.setDescription('The AC power connected to the PDCA (Power Distribution Control Assembly) was removed. The data field contains the physical location of the PDCA. The PDCA source that was deleted can be identified by the implementation dependent field (data byte 3) of the physical location: data byte[3]: 0 for PDCA 0, 1 for PDCA 1.')
hpevtBlowrFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7791)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBlowrFail.setDescription('A cabinet main blower has failed. Depending on the number of blowers still operating, the cabinet may or may not shut down. View the Error Log entries to determine if the cabinet is operating. If many log entries call out entities powering off during the same time frame as this BLOWR_FAIL, the cabinet has probably shutdown. Carefully review the log for the first few events within the same time frame for the root cause of the problem. The GSP command, PS, will show a detailed power status for a cabinet. If the +48V LED on the Front Panel Board is not lit, power is not enabled to the cabinet. This is an indication the cabinet blowers have probably gone from N to N - 1 status requiring an immediate cabinet shutdown.')
hpevtBpsFail48flt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7793)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsFail48flt.setDescription("A 48 Volt DC Converter powered by the specified PDCA failed on the designated Bulk Power Supply. The PDCA powering the converter on the BPS that failed can be identified by the implementation dependent field (data byte 3) of the BPS' physical location: data byte[3]: 0 for PDCA 0, 1 for PDCA 1.")
hpevtBpsFailFanflt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7795)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsFailFanflt.setDescription('The designated Bulk Power Supply is reporting its fan has failed. ')
hpevtBpsFailOt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7796)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsFailOt.setDescription('The 48 Volt DC Converter powered by the specified PDCA in the designated Bulk Power Supply, is in over temp condition. The PDCA powering the converter on the BPS that failed can be identified by the activity status (last byte of chassis code): e = PDCA 1 f = PDCA 0')
hpevtBpsNotRedundant = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7798)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsNotRedundant.setDescription('The number of functioning Bulk Power Supplies has decreased to where the Cabinet Power supplied (number of available Bulk Power Supplies times power output per each) minus the estimated Cabinet Power consumed is greater than 0, but less than the output of one Bulk Power Supply.')
hpevtBpsOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7799)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsOvervoltage.setDescription('The PM has detected the value of +48V power, as measured on the UGUY board, has exceeded an upper threshold.')
hpevtBpsUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7803)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsUndervoltage.setDescription('The PM has detected the value of +48V power, as measured on the UGUY board, has fallen below a lower threshold.')
hpevtCabFanFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7806)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCabFanFail.setDescription('A cabinet fan has failed. Depending on the number of cabinet fans still operating, the cabinet may or may not shut down. View the Error Log entries to determine if the cabinet is operating.')
hpevtHkpOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7822)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHkpOvervoltage.setDescription('Housekeeping power has exceeded expected levels.')
hpevtHkpUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7823)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHkpUndervoltage.setDescription('Housekeeping power has fallen below expected levels.')
hpevtIllegalBpsCfgOrPhaseFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7824)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIllegalBpsCfgOrPhaseFlt.setDescription('Through failures or reconfiguration, the BPS for the cabinet named are illegally configured. There must be a BPS connected to each phase of the power. Phase 1 feeds BPS slots 0 & 1, phase 2 feeds slots 2 & 3, and phase 3 feeds 4 & 5. There must be a BPS connected to each phase. If 4 BPS are installed in a cabinet in slots 0 - 3 and 4 & 5 were empty, this would be an illegal configuration. They should be installed in 0,1,2,and 4 or 0,1,3,and 5 or some combination thereof. The PDCA physical location determines which phase is configured incorrectly. Data Byte 3 (implementation dependent field) indicates the PDCA number used when the configuration error occurred:')
hpevtIllegalBpsid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7825)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIllegalBpsid.setDescription('A Bulk Power Supply is reporting an unknown BPS ID. The Bulk Power Supply will not be powered up and added to the Power Available tally. If cabinet is not powered up, it will refuse to power up until this fault is corrected.')
hpevtInletOvertempHi = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7827)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInletOvertempHi.setDescription("The cabinet's Ambient Air Sensor detected a change in air temperature entering the over-temp-high range. The Cabinet will be shutting itself down to prevent component damage.")
hpevtInletOvertempLo = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7828)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInletOvertempLo.setDescription("The cabinet's Ambient Air Sensor detected a change in air temperature crossing to the low range. The air temperature may be rising or falling. This is just a reporting of entering the over-temp-low range.")
hpevtInletOvertempMid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7829)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInletOvertempMid.setDescription("The cabinet's Ambient Air Sensor detected a change in air temperature crossing to the mid range. The air temperature may be rising or falling. This is just a reporting of entering the over-temp-mid range..")
hpevtIofanFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7836)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIofanFail.setDescription('An IO Chassis cooling fan has failed. Depending on the number of fans still operating, the cabinet may or may not shut down. View Error Log entries to determine if the cabinet is operating. If many log entries call out entities powering off during the same time frame as this IOFAN_FAIL, the cabinet has probably shutdown. Carefully review the log for the first few events within the same time frame for the root cause of the problem. The Guardian Service Processor command, PS, will show a detailed power status for a cabinet. The +48V LED on the Front Panel Board not lit, power is not enabled to the cabinet, indicating the cabinet IO Chassis fans have probably gone from N to N - 1 status requiring an immediate cabinet shutdown.')
hpevtPowerOverload = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7842)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPowerOverload.setDescription('This code is issued when the Cabinet Power supplied (number of Bulk Power Supplies times power output per each) minus the estimated Cabinet Power consumed drops below 0. Utilities firmware will not allow a cabinet in this state to power up (see ABORT_PWRUP_BPS). Utilities firmware will not shut down a cabinet in this state. However, there is a possibility of a cabinet brownout, making the cabinet unreliable.')
hpevtShutdownBlowr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7845)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtShutdownBlowr.setDescription('After a BLOWR_FAIL, there were N-1 blowers functioning. This is an illegal condition causing immediate cabinet shutdown to prevent component damage.')
hpevtShutdownIofan = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7846)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtShutdownIofan.setDescription('After a IOFAN_FAIL, there were N-1 fans functioning. This is an illegal condition causing immediate cabinet shutdown to prevent component damage.')
hpevtXucFanFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7849)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXucFanFail.setDescription('One of two fans in the Utility chassis of the IO Expansion Cabinet has failed.')
hpevtCluWatchdogReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7855)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCluWatchdogReset.setDescription('The Watchdog Timer checks for inactivity, or hung state, of the Cabinet Level Utilities (CLU) portion of the UGUY. During activity, the timer is continually reset. If the timer expires, it will automatically reset the CLU microprocessor. This will not affect running partitions.')
hpevtEepromInvalidCksm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7856)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEepromInvalidCksm.setDescription('An invalid checksum was received when reading the FRUID EEPROM for the device named in the chassis code. If this is a single error, the fault lies with the named FRU. If there are many INVALID_CKSM entries in the Event Log, there is probably a problem with the I2C bus.')
hpevtHbpbBoardPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7858)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHbpbBoardPowerFault.setDescription(' One or more of the System Backplane Power Boards is reporting a DC Fault through the System Backplane Local Power Monitor. The physical location of the failing power board is in the Data Field of the event.')
hpevtHiobEepromRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7863)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiobEepromRdFail.setDescription('An attempt to read the EEPROM (FRUID) on the IO Backplane Board failed.')
hpevtHiopbEepromRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7864)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiopbEepromRdFail.setDescription('An attempt to read the EEPROM (FRUID) on the IO Backplane Power Board failed.')
hpevtHiopbLpmFltRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7865)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiopbLpmFltRdFail.setDescription('An attempt to read the Local Power Monitor Fault register on the IO Backplane Power Board failed.')
hpevtHiopbOvertemp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7866)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiopbOvertemp.setDescription('The Local Power Monitor of the named IO Chassis is reporting a Power Brick over temperature condition.')
hpevtHiopbPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7867)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiopbPowerFault.setDescription('The Local Power Monitor on the named IO Chassis has reported a power fault condition.')
hpevtHiopbVoltMrgnFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7871)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHiopbVoltMrgnFail.setDescription('The Local Power Monitor on the named IO Power Board failed to properly margin the power as commanded.')
hpevtSbchEepromRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7873)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSbchEepromRdFail.setDescription('Either by command or as part of initialization, the data from a FRUID EEPROM failed a read command. This does not necessarily mean the FRU has failed, just that the FRUID data cannot be read.')
hpevtUguyEepromRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7874)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUguyEepromRdFail.setDescription("Either by command or as part of initialization, the data from a FRUID EEPROM failed a read command. This does not necessarily mean the FRU has failed, just that the FRUID can't be read.")
hpevtSysBkpEepromRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7875)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBkpEepromRdFail.setDescription('An attempt to read the EEPROM (FRUID) on the System Backplane failed')
hpevtSysBkpI2cRdFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7877)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBkpI2cRdFail.setDescription('A read command on the system backplane I2C bus failed.')
hpevtSysBkpI2cWrFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7878)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBkpI2cWrFail.setDescription('A write command on the system backplane I2C bus failed. The type of command that failed can be identified by the activity status field (last byte) of the encoded field. B = RC Cable Configuration Register write C = Backplane Voltage Margin Register write 9 = Flex circuit configuration register write')
hpevtSysBkpPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7879)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBkpPowerFault.setDescription('The Local Power Monitor on the named System Backplane has detected a power fault. The failing Backplane Power Board status is read from the Backplane LPM I2C interface register and the value is placed in the data field of the event (bits 15-8).')
hpevtSysBkpVoltMrgnFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7880)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBkpVoltMrgnFail.setDescription('Margining voltage to the System Backplane has failed.')
hpevtWriteFruDataFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7891)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWriteFruDataFail.setDescription('An attempt to write data to the FRUID EEPROM by the MFG level MP command WF failed. The FRU handle of the failing FRUID is embedded in the two uppermost bytes of the data field.')
hpevtCpuFanFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7892)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuFanFail.setDescription('The fan on a CPU is not operating in a manner that provides enough air flow to cool the processor')
hpevtCpuFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7893)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuFanSlow.setDescription('The fan on a CPU is operating in a manner that provides enough air flow to cool the processor but is not at normal operation')
hpevtDnaFanFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7894)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDnaFanFail.setDescription('The fan on a CC chip is not operating in a manner that provides enough air flow to cool the processor')
hpevtDnaFanSlow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7895)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDnaFanSlow.setDescription('The fan on a CC chip is operating in a manner that provides enough air flow to cool the processor but is not at normal operation')
hpevtPdhcToSysfwRevMismtch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7896)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcToSysfwRevMismtch.setDescription("System FW and the PDHC have incompatible shared memory interface revisions. Data byte 0 is the PDHC's supported ICM revision number. Data byte 1 is System FW's supported ICM revision number.")
hpevtPdhCtrlrFwMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7902)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhCtrlrFwMismatch.setDescription('The MP checked the FW revision of the PDHC identified in the physical location data field and discovered that it did not recognize the revision as one that it has been qualed with. This is an unsupported configuration.')
hpevtCellPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7903)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellPowerFault.setDescription('The local Power Monitor is reporting a fault with the named Cell Power Board. The data field of this event can be decoded as follows where a bit set in any of the status fields indicates a fault: data byte 0: (power_good << 1) | (power_fault) data byte 1: Cell Power Board converters status bits[0:2] - memory power bricks 0-2 status bits[3:5] - power i/f bus bricks 0-2 status bits[6:7] - JAB core power bricks 0-1 status data byte 2: Cell converters status bit 0 - clock power status bit 1 - cache power status bit 2 - link power status bit 3 - CC core power status bit 4 - FSB power status bit 5 - 48-V status data byte 3: CPU module converters status bit 0 - CPU module 0 core power status bit 2 - CPU module 1 core power status bit 4 - CPU module 2 core power status bit 6 - CPU module 3 core power status')
hpevtCpuInitNodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7938)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuInitNodeError.setDescription('The CPU node retuned an error when calling its initialize node function. The specific status is displayed in the data field.')
hpevtCpuExecuteCmdError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7939)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuExecuteCmdError.setDescription('ExecuteCommand issues commands that execute on remote CPUs via IPI interrupts. If the command failed to execute, this event is printed and the data field contains the status.')
hpevtCpuCmdStateInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7940)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuCmdStateInvalid.setDescription('A remote CPU is in a state where it cannot receive and execute a new command. The current status of the CPU is provided in the data field.')
hpevtCpuPalProcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7948)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuPalProcError.setDescription('An error was encountered when executing a PAL_PROC. This code will be emitted in pairs. The Proc INDEX will be in the data of the first chassis code. The status is in the second data field.')
hpevtBootCpuLoadingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7953)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCpuLoadingError.setDescription('CPUs not loaded in correct order. Correct loading order is CPU 0, 1, 2, 3.')
hpevtXbcPersistantError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7963)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPersistantError.setDescription('The XBC logged a SBE or LPE after they should have been cleared. Either the clear failed, or a new error was logged immediately. Data field: XBC number (32:43), port number (44:55), port status information (0:31)')
hpevtXbcLinkTestError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7964)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcLinkTestError.setDescription('The CC to XBC Link pattern test failed. Data Field: This event will be emitted three times 1st event: XBC number (32:43), port number (44:55) 2nd event: expected pattern (0:63) 3rd event: actual data read (0:63)')
hpevtPltfrmStorageReadErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7965)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPltfrmStorageReadErr.setDescription('System firmware was unable to complete a platform storage read command from the utilities system. The exact status printed in the data field.')
hpevtPltfrmStorageWriteErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7966)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPltfrmStorageWriteErr.setDescription('System firmware was unable to complete a platform storage write command. The actual status is returned in the data field.')
hpevtTreeNodeErrorSequencer = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7973)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtTreeNodeErrorSequencer.setDescription('The Sequencer was unable to find the tree node it needed to complete an operation. The tree node is in the ASCII in the data field.')
hpevtPartitionVariableError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7974)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPartitionVariableError.setDescription('System firmware attempted to read a partition variable from the GSP and store it in options. An error was encountered during this process. The data field contains the partition variable element ID that was being processed.')
hpevtCellRedundtPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,7975)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellRedundtPowerFault.setDescription('One or more power converters on the Cell or Cell Power Board has reported a fault. However, because of redundancy in the power system, the power to the Cell is still good. The data field contains detailed power fault location information that is specific to each platform.')
hpevtPalProcConfigIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8009)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPalProcConfigIncompatible.setDescription('CPUProcConfigValue setting in options as been compared with what is reported by PAL as settable and CPUProcConfigValue is specifying at least one bit that is not supported by this version of PAL using the Get Processor Dependent Features. This chassis code is emitted in pairs, the first data field contains the PAL expected values; the second data field contains the requested setting from options.')
hpevtPalGetProcFeaturesFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8010)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPalGetProcFeaturesFailed.setDescription('System firmware was unable to successfully issue the PAL_GET_PROC_FEATURES PAL proc. The data field is unused')
hpevtPdhcCriticalDebug = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8127)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcCriticalDebug.setDescription('This event is a tool to aid in the debugging and testing of firmware.')
hpevtCluUndefinedCase = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8128)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCluUndefinedCase.setDescription('The CLU has encountered an undefined case in its control flow.')
hpevtCellVoltageMarginUnkn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8130)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellVoltageMarginUnkn.setDescription('The Cell voltage margin settings do not match the Normal, +5%, or -5% values.')
hpevtPdhcAssertionFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8131)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcAssertionFailed.setDescription('For debug purposes, many assumptions made by the PDHC developer(s) are checked at run-time. If this event log is seen, it indicates that the hardware or software is in an unknown state. For developer debug purposes, the data field describes where in the code that the error was detected. Data Bytes[0-1]: The line number within the source code file where the error was detected. Data Bytes[2-7]: The first 6 characters of the source code file name.')
hpevtPdhcFirmwareUnknownErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8132)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcFirmwareUnknownErr.setDescription('An unknown error has been detected by the PDHC firmware. For developer debug purposes, the data field describes where in the code that the error was detected. Data Bytes[0-1]: The line number within the source code file where the error was detected. Data Bytes[2-7]: The first 6 characters of the source code file name.')
hpevtPdhcI2cWriteFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8133)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcI2cWriteFailed.setDescription("An attempt to write to a device on the PDHC's I2C bus has failed. The devices on the I2C bus are the Cell's FRU EEPROM, the Cell Power Board's FRU EEPROM, the voltage margining D-to-A converters, and, if they are accessible, the CPU Module Power Pods' FRU EEPROMs. The Data field information contains information that can identify the exact device that has failed. Refer to the Cell ERS for a mapping of I2C device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: I2C Device Address Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtPdhcI2cReadFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8134)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcI2cReadFailed.setDescription("An attempt to read from a device on the PDHC's I2C bus has failed. The devices on the I2C bus are the Cell's FRU EEPROM, the Cell Power Board's FRU EEPROM, the voltage margining D-to-A converters, and, if they are accessible, the CPU Module Power Pods' FRU EEPROMs. The Data field information contains information that can identify the exact device that has failed. Refer to the Cell ERS for a mapping of I2C device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: I2C Device Address Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtPdhcSmbusWriteFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8135)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcSmbusWriteFailed.setDescription("An attempt to write to a device on the PDHC's SM bus has failed. The devices on the SM bus are the CPU modules' FRU EEPROMs, the CPU modules' Processor Information ROMs, and the CPU modules' thermal sensors. The Data field information contains information that can identify the exact device that has failed. Refer to the Cell ERS for a mapping of SM Bus device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: SM bus Device Address Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtPdhcSmbusReadFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8136)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcSmbusReadFailed.setDescription("An attempt to read from a device on the PDHC's SM bus has failed. The devices on the SM bus are the CPU modules' FRU EEPROMs, the CPU modules' Processor Information ROMs, and the CPU modules' thermal sensors. The Data field information contains information that can identify the exact device that has failed. Refer to the Cell ERS for a mapping of SM Bus device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: SM bus Device Address Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtFrequencyProgramFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8137)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFrequencyProgramFailed.setDescription("The PDHC did not read valid frequency information from the CPU modules' or Cell's FRU EEPROMs, or the frequency registers would not update properly. Following this event, the Cell will not boot until the problem is corrected and Cell Power has been turned off, then on again, using the PE command.")
hpevtSysFwFlashUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8138)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwFlashUpdateError.setDescription('An error has occurred while updating System FW. More details about the update failure may be available as displayed by the Firmware Update Utility (FWUU).')
hpevtPdhcUnexpectedReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8139)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcUnexpectedReset.setDescription('The PDHC firmware was reset for some unknown reason.')
hpevtCpuTmpSensorSetupFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8140)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuTmpSensorSetupFail.setDescription("A hardware fault prevented the PDHC from configuring the thermal sensor(s) on one or more of the CPU modules. Following detection of this fault condition, the Cell will be prevented from booting until the Cell is powered 'off', then 'on', using the PE command.")
hpevtCpuModuleThermalert = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8141)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuModuleThermalert.setDescription("A CPU module's temperature has exceed the high temperature threshold. As a result of this event, an irrevocable 2 minute timer will begin. At the end of 2 minutes, the offending CPU module will be powered off by the Cell hardware. The Cell must be powered off then on using the MP's PE command before the CPU module will be powered again.")
hpevtPdhcFlashUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8143)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcFlashUpdateError.setDescription('An error occurred while updating the PDHC firmware. More specific details of the update error may be displayed by the Firmware Update utility running on the MP.')
hpevtCellTypMismatchWSysfw = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8147)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellTypMismatchWSysfw.setDescription("The cell type (IPF or PA) does not match System FW type. The cell type is detected based on information stored in CPU modules' FRUID EEPROMs. The System FW type is determined based on data that is embedded in the System FW ROM image. This is checked each time Cell power transitions from off to on, and each time the System FW is updated. Following the detection of this mismatch, the Cell will not be allowed to boot until the problem has been resolved.")
hpevtPdhcPdhArbiterTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8149)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcPdhArbiterTimeout.setDescription("This event is emitted after the PDHC has waited longer than a maximum expected time for the PDH arbiter to grant it control of the PDH bus. The PDHC will continue waiting for control of the PDH bus until the arbiter grants it control, or the Cell is powered off using the MP's PE command. While waiting for the PDH bus, the PDHC will NOT perform its normal duties such as monitoring the Cell status, and passing messages from the system to the MP, and the PDHC heartbeat will not blink.")
hpevtPdhcGetSm4Timeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8151)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcGetSm4Timeout.setDescription("This event is emitted after the PDHC has waited longer than a maximum expected time to obtain control of the PDH bus semaphore. The PDHC will continue waiting for control of the PDH bus semaphore until System FW relinquishes control of the semaphore, or the Cell is powered off using the MP's PE command. While waiting for the PDH bus semaphore, the PDHC will NOT perform its normal duties such as monitoring the Cell status, and passing messages from the system to the MP, and the PDHC heartbeat will not blink. The data field contains debug data that may be useful for developers. Data_byte[0] = last value read from PDHC's address for the microSemaphore register. Data_byte[1] = boolean indicator (1=set,0=not_set) of whether the PDHC's flag is set. Data_byte[2] = boolean indicator (1=set,0=not_set) of whether the System FW's flag is set.")
hpevtIpmiBmc2hostMsgFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8153)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIpmiBmc2hostMsgFailure.setDescription('This event indicates that an error occurred while transmitting an IPMI message in the BMC2HOST direction. The data field contains more detailed information about the source of the error. Data Bytes 0 & 1 form a 16-bit IPMI error indicator that has the following values and meanings: 1 - IPMI_HOST_BUSY_TIMEOUT - The PDHC could not put a message in the BMC2HOST hardware message queue for over 10 seconds, so the pending message(s) were dropped. 2 - IPMI_INVALID_MSG_SIZE - The MP sent an IPMI message response that has an embedded size indicator that is less than 4 bytes or greater than the size of the message data. The poorly formed message response will be dropped. 3 - IPMI_BMC2HOST_Q_FULL - The BMC2HOST message queue in the PDHC is full, so a message response from the MP has been dropped.')
hpevtEfiDebugLevelTokenErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8154)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEfiDebugLevelTokenErr.setDescription('EFI was unable to read the initial debug level from the BMC token. EFI will continue with an unknown value for the debug level. Data Field: Return status from internal EFI function.')
hpevtXbcPortNotLandmined = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8156)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPortNotLandmined.setDescription('A XBC port was unexpectedly found to not be landmined. The data field consists of the XBC number (32:43) and the port number (44:55).')
hpevtFabricValidateError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8159)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricValidateError.setDescription('The number of landmined XBC ports was not within the allowable range. There is a minimum number of landmined ports because some ports are always unused. There is a maximum number of landmined ports because there is a limit to the number of broken links allowed in a system. The data field shows the number of landmined ports found')
hpevtFabricISRInvalidBkp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8184)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricISRInvalidBkp.setDescription('Data field contains the backplane type found. During Intra SKD Routing, the backplane type detected was either a Medel backplane or was unrecognized. The backplane could therefore not be routed. This is a firmware sanity check. Data Field: system type')
hpevtFabricXinWrZeroErrMaskError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8186)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinWrZeroErrMaskError.setDescription('Prior to initializing the CC to XBC link, the XIN error mask should be zeroed out to prevent spurious errors from interfering with the link initialization. This write to zero out the error mask failed. Data Field: (cell << 56) | return status')
hpevtFabricCcPriModeRegRdStatus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8187)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCcPriModeRegRdStatus.setDescription("The Coherency Controller's (CC) XIN link did not initialize properly. The data field contains the return status from an attempted read of the CC Primary Error Mode CSR. (0 = SUCCESS)")
hpevtFabricCcPriModeRegRdData = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8188)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCcPriModeRegRdData.setDescription("The Coherency Controller's (CC) XIN link did not initialize properly. The data field contains the data read from the CC Primary Error Mode CSR.")
hpevtFabricCcErrMaskRegRdStatus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8189)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCcErrMaskRegRdStatus.setDescription("The Coherency Controller's (CC) XIN link did not initialize properly. The data field contains the return status from an attempted read of the CC Primary Error Mode CSR. (0 = SUCCESS)")
hpevtFabricCcErrMaskRegRdData = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8190)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCcErrMaskRegRdData.setDescription("The Coherency Controller's (CC) XIN link did not initialize properly. The data field contains the data read from the CC Error Mask CSR.")
hpevtFabricXingNeighborPortBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8194)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXingNeighborPortBad.setDescription("The neighbor's port connected to the link being crossed is not routable. This was the first attempt to cross the link, PDC will now look for another link it can cross. DATA: (xbcNum << 32 ) | (port << 44)")
hpevtFabricISRRdFwdProgErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8195)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricISRRdFwdProgErr.setDescription('Fabric read error. Data field: (XBC number << 32 | return status)')
hpevtFabricGetNeighborMaxLinksBroken = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8198)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricGetNeighborMaxLinksBroken.setDescription('Too many crossbar links are broken. Cell cannot boot, halting. Data field: XBC number << 32')
hpevtPmAssertionFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8199)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPmAssertionFailed.setDescription('For debug purposes, many assumptions made by the PM developer(s) are checked at run-time. If this event log is seen, it will either indicate that the hardware is in a unknown state that is not handled by the PM, or that a programming bug has been found. For developer debug purposes, the data field describes where in the code that the error was detected. Data Bytes[0-1]: The line number within the source code file where the error was detected. Data Bytes[2-7]: The first 6 characters of the source code file name.')
hpevtPmFirmwareUnknownErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8200)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPmFirmwareUnknownErr.setDescription('An unknown error has been detected by the PM firmware. For developer debug purposes, the data field describes where in the code that the error was detected. Data Bytes[0-1]: The line number within the source code file where the error was detected. Data Bytes[2-7]: The first 6 characters of the source code file name.')
hpevtPmCriticalDebug = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8202)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPmCriticalDebug.setDescription('This event is a tool to aid in the debugging and testing of firmware.')
hpevtFabricLinkCorErrTestFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8205)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricLinkCorErrTestFailure.setDescription('Failed link testing to ensure that SBE and LPE errors are detected properly by the XBC. The XBC did not detect any errors. Data field indicates the return status: (1 = err detected, 0 = no err detected, -1 = XBC accesses failed)')
hpevtInvalidCabinetNumber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8206)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvalidCabinetNumber.setDescription('The data field contains the cabinet number that is invalid')
hpevtPdIncompatibleFwRevs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8207)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdIncompatibleFwRevs.setDescription('The cell indicated in the data field is at a different firmware revision than the reporting cell. This is determined by evaluating the checksums of the 2 rom images.')
hpevtPmI2cWriteFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8212)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPmI2cWriteFailed.setDescription("An attempt to write to a device on the PM's I2C bus has failed. The Data field contains information that can identify the exact device that has failed. Refer to the UGUY ERS for a mapping of I2C device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: I2C Device Address Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtPmI2cReadFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8214)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPmI2cReadFailed.setDescription("An attempt to read from a device on the PM's I2C bus has failed. This event is only emitted when the PM is reading a BPS's. The Data field contains information that can identify the exact device that has failed. Refer to the UGUY ERS for a mapping of I2C device addresses to devices. Data Bytes[0-1]: Reserved Data Bytes[2-3]: I2C Device Address (to convert to BPS slot number subtract 1 and divide by 2) Data Bytes[4-5]: Starting Word Address Data Bytes[6-7]: Size of attempted access (in bytes).")
hpevtCellInfoError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8216)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellInfoError.setDescription('An error was encountered trying to obtain the data required for the cell information structure in ICM. The data field is an ASCII message that indicates the information that was not found.')
hpevtSlaveConsoleSetupError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8218)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSlaveConsoleSetupError.setDescription('An error was encountered establishing the slave cells use of the diva console.')
hpevtRegistryMoveToCoreCellError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8219)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRegistryMoveToCoreCellError.setDescription('An error was encountered trying to relocate the registry on a slave cell to point to the core cells main memory structures.')
hpevtProfileGroupCCrcError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8220)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtProfileGroupCCrcError.setDescription('The Calculated CRC for the group C Partition Profile did not match the stored value. The expected value and the actual value will be emitted in 2 sequential chassis codes.')
hpevtMcCoreCellSelectFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8238)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcCoreCellSelectFail.setDescription('Not able to find a core cell in the PD during a global MCA error processing.')
hpevtFabricAssertFabricUtils = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8239)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAssertFabricUtils.setDescription("An unexpected error occurred while initializing the fabric. The firmware is not able to analyze this error. Clues to the cause of this error may be found in the IPMI forward progress log (FPL) either shortly before or after this log entry occurred. The FPL is available from the management processor using the 'sl' command. HP-UX also saves these logs in the /var/stm/logs/os directory, and they can be viewed using the slview utility.")
hpevtSalPmiFwError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8240)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalPmiFwError.setDescription('An internal firmware error was encountered. This is usually caused by a bad parameter passed to a function, corrupt memory, corrupt malloc tables or something similar. The data field contains the IP address of the function that encountered the error.')
hpevtOlaWrongNumberCells = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8243)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOlaWrongNumberCells.setDescription('During the on line addition of a cell the partition adding the cell has determined inconsistent data as to which cell is being added. The cell addition will be aborted and the partition will resume execution without the new cell.')
hpevtFabricXbcRouteSourceCellPortErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8257)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXbcRouteSourceCellPortErr.setDescription("An error occurred while reading the routing from the source cell's port on the source XBC. Data Field: (source cell << 56 | source XBC << 32)")
hpevtBootOlaCellIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8261)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellIncompatible.setDescription('OLA cell cannot be added because it has resources that are not compatible with those already in the partition. Data field specifies the physical location of the cell which is incompatible and on which the OLA was attempted. The preceding chassis code or codes should already have been emitted specifying what the actual incompatibility was. The OLA cell will NOT be added to the partition, and the existing partition should not be affected.')
hpevtBootOlaCellDidNotReachRendezvous = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8263)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellDidNotReachRendezvous.setDescription('Root Cell attempted to OLA a cell which hung somewhere in the OLA process - the cell released from BIB but never made it to its final rendezvous state. Data field contains physical location of the hung OLA cell. The OLA cell will NOT be added to the partition, and the existing partition should not be affected.')
hpevtBootOlaCellStillAtBib = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8264)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellStillAtBib.setDescription('Root cell attempted to OLA a cell that was never released from BIB. Data field contains the physical location of the cell that is being OLAD.')
hpevtBootOlaCellUnexpectedCellState = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8265)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellUnexpectedCellState.setDescription('Partition attempted to OLA a cell in an unexpected Cell state. Data Field contains the unexpected cell state of the OLA cell. The OLA cell will NOT be added to the partition, and the existing partition should not be affected.')
hpevtBootOlaCellCantReachAliveCells = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8267)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellCantReachAliveCells.setDescription('Root cell will emit this chassis code indicating the OLA cell could reach all cells in the alive set of the existing partition. Data field will contain the physical location of the OLA cell. This chassis code should immediately follow a chassis code indicating exactly which cell the OLA cell could not reach. The OLA cell will not be added to the partition and the partition will be unaffected.')
hpevtBootMixedCpuCoreFreqInstalled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8269)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMixedCpuCoreFreqInstalled.setDescription("CPU's of mixed maximum core frequencies are installed")
hpevtXinInitIntermittentFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8271)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXinInitIntermittentFailure.setDescription('The Cell Controller-XBC link initialization is having an intermittent failure. The data field contains the number of initialization sequences that failed before being successful.')
hpevtPdhErrClearOlaSteeringBit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8643)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhErrClearOlaSteeringBit.setDescription('PDC failed clearing the OLA steering bit in the PDH FPGA microstatus register. Data field contains the physical location of the cell with the failure. This can only happen on an OLA cell and will cause that cell to reset and not to join the existing partition.')
hpevtBootOlaFailedUpdatePdAddrMap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8645)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaFailedUpdatePdAddrMap.setDescription('The attempt to update the PD Addr Map to include OLA cell failed.')
hpevtBootOlaFailedUpdatePdPdt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8646)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaFailedUpdatePdPdt.setDescription('Attempt to update the partition PDT with OLA cell PDT data has failed.')
hpevtBootOlaFailedUpdateCellMap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8647)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaFailedUpdateCellMap.setDescription('Attempt to update the cell map to include the OLA Cell failed')
hpevtFabricCc2XbcLinkInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8648)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2XbcLinkInitFailed.setDescription("Fabric Discovery's final attempt to initialize the local cell's CC to Crossbar Chip (XBC) link has failed. This cell cannot talk to the fabric. Data: link init state bit read from the CC Link State register")
hpevtFwVirtualMappingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8652)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwVirtualMappingError.setDescription('An internal firmware error was encountered. This is usually caused by a bad parameter passed to a function, corrupt memory, corrupt malloc tables or something similar. The data field contains the physical address that failed mapping to a virtual address')
hpevtFabricXinInitWriteErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8676)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinInitWriteErr.setDescription('Failure while writing the XBC CSR containing the link status')
hpevtFabricXinInitReadErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8677)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinInitReadErr.setDescription('Failure while reading the XBC CSR containing the link status')
hpevtFabricLinkInitIntermittentFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8679)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricLinkInitIntermittentFailure.setDescription("Fabric Discovery's attempt to initialize the local cell's CC to XBC link has failed. The link initialization sequence has an intermittent problem.")
hpevtIodiscPciInitnodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8690)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciInitnodeError.setDescription('An error was encountered while attempting to create and initialize a PCI device node')
hpevtIodiscPciBusscanError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8691)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciBusscanError.setDescription('An error was encountered while scanning the PCI bus')
hpevtIodiscPciInitbridgeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8692)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciInitbridgeError.setDescription('An error was encountered while attempting to initialize a P2P bridge')
hpevtIodiscPciIomapError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8693)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciIomapError.setDescription('Insufficient IO Port space to support the PCI card')
hpevtIodiscPciMmiomapError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8694)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciMmiomapError.setDescription('Insufficient MMIO space to support the PCI card requirements')
hpevtIodiscSbaInitnodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8709)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscSbaInitnodeError.setDescription('An error was encountered while attempting to initialize the SBA node')
hpevtIodiscSbaDiscoverError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8710)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscSbaDiscoverError.setDescription('An error was encountered while attempting to discover SBA hardware')
hpevtIodiscSbaResetError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8711)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscSbaResetError.setDescription('An error was encountered while attempting to reset the SBA')
hpevtIodiscIolinkError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8712)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscIolinkError.setDescription('An error was detected in the link between the CC and the I/O controller.')
hpevtIodiscCableError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8713)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscCableError.setDescription('An SBA cable error has been detected')
hpevtIodiscIoChassisPower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8714)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscIoChassisPower.setDescription('Identified the cell number that is connected to the chassis.')
hpevtIodiscLbaInitnodeError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8715)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaInitnodeError.setDescription('An error occurred while attempting to create or initialize an LBA node')
hpevtIodiscLbaWidthError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8716)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaWidthError.setDescription('An error was encountered while attempting to configure LBA rope bundling width')
hpevtIodiscLbaPhaseError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8717)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaPhaseError.setDescription('error code')
hpevtIodiscLbaClearError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8718)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaClearError.setDescription('An error occurred while attempting to clear an LBA error log register')
hpevtIodiscLbaLogError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8719)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaLogError.setDescription('An error was encountered while attempting to generate LBA error logs')
hpevtIodiscLbaDiscoverError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8720)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaDiscoverError.setDescription('An error was encountered while attempting to discover LBA hardware')
hpevtIodiscLbaConfigError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8721)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaConfigError.setDescription('An error occurred while attempting to configure the LBA hardware')
hpevtIodiscLbaPciscanError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8722)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaPciscanError.setDescription('An error was encountered while attempting to scan the PCI bus')
hpevtIodiscLbaPciconfigError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8723)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscLbaPciconfigError.setDescription('An error was encountered while attempting to configure PCI config space')
hpevtBootOlaCellErrAccessCmplxProfile = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8745)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellErrAccessCmplxProfile.setDescription('The OLA cell failed accessing the complex profile. Cell will send Failed to OLA message back to partition and then reboot itself. Existing partition will not be affected.')
hpevtBootFwRelocMemErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8747)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFwRelocMemErr.setDescription('A Firmware tries to find a main memory block large enough meeting alignment requirements.')
hpevtBootOlaCellNotConfigInCmplxProfile = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8752)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaCellNotConfigInCmplxProfile.setDescription('Cell started OLA but is not configured in the complex profile of the partition. Cell will reboot to SINC_BIB. Existing partition will not be affected.')
hpevtOptsNvmAllocError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8756)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOptsNvmAllocError.setDescription('The Options service received an error when attempting to allocate an NVRAM storage block. Either an error was returned from the call, or the call returned successfully yet an invalid address was returned.')
hpevtBootOlaUpdateRtcFailedOlaCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8757)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaUpdateRtcFailedOlaCell.setDescription('A failure occurred on the OLA cell during the attempt to synchronize its real time clock with the clock(s) in the existing partition. Data field contains physical location of OLA cell.')
hpevtSalInfoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8758)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalInfoTimeout.setDescription('Access to SAL error log procedure timed out because the log facility was busy processing a request from another CPU. Data field indicates the SAL procedure ID.')
hpevtPdhIprNotClearedOnCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8761)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhIprNotClearedOnCell.setDescription('The PDH FPGA IPR is not cleared after a MAX_RD_CLR_IPR_TRIES on a cell. The Data Filed in the Cell number. See the next Chassis Code to see the MAX_RD_CLR_IPR_TRIES')
hpevtPdhIprClearAttempts = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8762)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhIprClearAttempts.setDescription('Indicated the PDH FPGA IPR is not cleared after a number of PDC attempts. The Data Field contents the MAX_RD_CLR_IPR_TRIES. Please look at the previous Chassis Code to see the Cell number.')
hpevtBootOlaUpdateRtcFailedExistingCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8763)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootOlaUpdateRtcFailedExistingCell.setDescription('attempt to synchronize the Real-Time Clock of the OLA cell with the existing partition failed because the RTC on the core cell could not be read.')
hpevtMemIncompleteEchelon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8768)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemIncompleteEchelon.setDescription('One or more dimms are missing from the echelon given in the data field. The dimms may not be installed or firmware was not able to detect the dimms.')
hpevtFabricRdPortStatePortInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8771)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRdPortStatePortInvalid.setDescription('The code that reads the port state (landmine vs. healthy) expects a XBC internal port number, it received bogus data. The port state cannot be read. Data Field: (port << 44) | (xbc num << 32)')
hpevtFabricWrPortStatePortInvalid = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8772)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricWrPortStatePortInvalid.setDescription('The code that writes the port state (landmine vs. healthy) expects a XBC internal port number, it received bogus data. The port state cannot be read. Data Field: (port << 44) | (xbc num << 32)')
hpevtMainBpLpmFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8784)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMainBpLpmFlt.setDescription('The main backplane is reporting the LPM status as fault.')
hpevtIoBpLpmFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8787)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoBpLpmFlt.setDescription('The IO backplane has reported a local power monitor fault.')
hpevtCmplxProfileInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8797)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCmplxProfileInitFailed.setDescription('System firmware was unable to default the complex profile')
hpevtPalSetProcFeaturesFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8798)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPalSetProcFeaturesFailed.setDescription('Firmware call to set processor feature resulted in an error.')
hpevtActiveLogNotFound = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8806)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtActiveLogNotFound.setDescription('This chassis code shows that the error log space in the NVRAM has not been allocated for the current error event. This will be emitted out whenever a error section is attempted to be logged without allocation of log space in NVRAM')
hpevtReachedMaxErrorLogs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8807)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtReachedMaxErrorLogs.setDescription('This indicates that the error logs for a particular event type have reached the maximum allowed to be stored in the NVRAM. The event type is indicated in the data field.')
hpevtOldNoCellToDelete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8814)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOldNoCellToDelete.setDescription('System firmware has been invoked to perform a cell delete operation but no cell in the system appears to be ready for deletion.')
hpevtBpsOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8817)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsOvercurrent.setDescription('The bulk power supply is overcurrent')
hpevtBpsWarnOt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8818)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBpsWarnOt.setDescription('Data: Bulk location.')
hpevtErmOutOfHeap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8819)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErmOutOfHeap.setDescription('Error Response Mode code attempted a malloc of heap space that failed.')
hpevtMemDimmUnsupported = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8821)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemDimmUnsupported.setDescription('The dimm in the physical location given by the data field is not supported on this platform. The dimm may not be supported by the hardware, or the dimm may not have been properly qualified for this platform.')
hpevtOptsMallocError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8828)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOptsMallocError.setDescription('The OPTIONS component was unable to allocate NVRAM memory in order to store a non-volatile variable. The storage area for NVRAM options may be full, or there may be undetected corruption.')
hpevtCellHwDegraded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8837)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellHwDegraded.setDescription('A dimm or CPU has failed and is not operational for the system. This event is emitted prior to determining if the cell should be integrated into the Partition.')
hpevtNotIntegratingCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8839)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNotIntegratingCell.setDescription('A cpu or dimm error has been detected, and the Complex Profile, Cell Integration Table, Cell integration policy says to not integrate the cell into the PD. The data field is unused, but the cell that emitted this event is the one that did not get integrated.')
hpevtIoContextCorruptErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8842)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoContextCorruptErr.setDescription('The IO error context is corrupt. This will impair IO error reporting.')
hpevtIoRopeFatal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8843)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoRopeFatal.setDescription('A rope went fatal from the SBA to the LBA. If all the ropes go fatal the IO subsystem is dead. Any I/O below the rope will not be accessible. The data field gives the physical location of the rope that went fatal. Some ROPE_FATAL conditions will not cause the system to go down. For Example, a rope that has gone fatal during an OLAR operation will only cause warnings to the user, not bring the partition down.')
hpevtIoBusFatal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8844)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoBusFatal.setDescription('A PCI bus on the system is fatal. Any device on this bus is unavailable. Firmware was unable to complete card initialization due to an error. Data field contains physical location of failed bus.')
hpevtIoRopeUnitFatal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8845)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoRopeUnitFatal.setDescription('One of the rope units in the SBA failed. If all of the rope units fail, then IO will not be available on this cell.')
hpevtPdhFlashWriteEnableBitSetNowCleared = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8851)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhFlashWriteEnableBitSetNowCleared.setDescription('The System Flash Write Enable bit is incorrectly set and now clearing by PDC. The Data field contains the value of PDH Miscellaneous Signal Register read before System Flash bit is cleared.')
hpevtFirmwareInitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8855)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFirmwareInitError.setDescription('System firmware encountered an error while trying to perform an operation during system initialization. This event ID will always be emitted before an event ID that describes the status of the operation that failed.')
hpevtMcIncompleteCpuSet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8857)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcIncompleteCpuSet.setDescription('This means that all the cpus in the cell did not show up.')
hpevtMcIncompleteCellSet = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8858)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcIncompleteCellSet.setDescription('This means that all the cells did not rendezvous during the PD rendezvous. The data part will contain the Expected data and the actual mask of the cells that rendezvoused.')
hpevtMcTreeCheckFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8859)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcTreeCheckFailed.setDescription('The FW tree sanity check failed during the MCA error processing.')
hpevtMcRegistryCheckFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8860)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcRegistryCheckFailed.setDescription('This means that the registry sanity check failed during MCA error handling.')
hpevtMcDuringOsMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8861)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcDuringOsMca.setDescription('This means that MCA occurred while OS_MCA was performing error recovery.')
hpevtMcMemDumpAbandon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8864)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcMemDumpAbandon.setDescription('This means that memory dump will be abandoned due to work-around for CN2272. This happens when one of the Blocking timeout in the Processor input block of the Cell Controller occurs.')
hpevtMcFwTreeNotComplete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8865)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcFwTreeNotComplete.setDescription('The firmware tree is not complete and hence there will be no PD rendezvous.')
hpevtAcpiConfigMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8872)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcpiConfigMismatch.setDescription('The firmware parameter that defines the ACPI configuration is inconsistent in at least one of the cells in the partition.')
hpevtFabricXinErrOrderStatusClrFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8873)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinErrOrderStatusClrFailed.setDescription('Writing the XIN_ERR_ORDER_STATUS register of the CC failed. This is some sort of a hardware failure. Data Field: return status')
hpevtFabricAssertFabricInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8876)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAssertFabricInit.setDescription("An unexpected error occurred while initializing the fabric. The firmware is not able to analyze this error. Clues to the cause of this error may be found in the IPMI forward progress log (FPL) either shortly before or after this log entry occurred. The FPL is available from the management processor using the 'sl' command. HP-UX also saves these logs in the /var/stm/logs/os directory, and they can be viewed using the slview utility.")
hpevtInvalidPiromData = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8877)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvalidPiromData.setDescription("A value read by the PDHC from a CPU module's Processor Information ROM was not within acceptable limits.")
hpevtSettingFreqRatiosError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8882)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSettingFreqRatiosError.setDescription('An invalid parameter was specified when trying to set the cpu bus config register, cpu frequencies ratio field. Valid range is 0xe - 0x17')
hpevtOptsBlockCksumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8883)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOptsBlockCksumError.setDescription('The overhead structure of the OPTIONS block in NVRAM has a checksum error.')
hpevtFabricColaLocalCcLinkNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8894)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricColaLocalCcLinkNotInit.setDescription('During a cell OLA, the link on the local cell failed to initialize. Data Field: (my cell << 32) | XIN Link State')
hpevtFabricXinInitDisableWrError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8895)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinInitDisableWrError.setDescription('An attempt to disable the fabric link failed because writing the CC CSR failed. Data Field: (cell << 56) | return status')
hpevtFabricXinErrMaskUnknownBkp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8896)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinErrMaskUnknownBkp.setDescription('Could not determine the system type in order to write the appropriate error mask for the fabric link. Data Field: system type')
hpevtFabricXinWrErrMaskError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8897)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinWrErrMaskError.setDescription("Failed writing the XIN error mask for CC's fabric link. Data Field: (cell << 56) | return status")
hpevtFabricXinRdErrMaskError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8898)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinRdErrMaskError.setDescription('Could not read the XIN Link error mask register. Data Field: (cell << 56) | return status')
hpevtFabricInitCcLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8900)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricInitCcLinkFailure.setDescription('The CC to CC link initialization sequence has failed. Data Field: link init status')
hpevtResetCommandError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8906)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtResetCommandError.setDescription('An error occurred while trying to notify the MP that a reset is about to occur (QPartitionReleaseBIB command). The status is in the data field.')
hpevtFabricInitCcLinkDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8926)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricInitCcLinkDisableErr.setDescription('A fabric access error occurred while trying to disable the CC to CC link on a single cell Medel system. This cell will halt. Data field: error status')
hpevtFabricSetPortStateGetSm4Err = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8930)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricSetPortStateGetSm4Err.setDescription('While updating the Port State register, the cell could not get the XBC semaphore. Data field is: (Port Num << 44 | XBC num << 32 | return status). Where return status is: (0 Success; -1 Access Failure; -2 Semaphore Owned By Another, -3 Semaphore Already Owned; -4 XBC Key Contention)')
hpevtFabricSetPortStateRlsSm4Err = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8931)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricSetPortStateRlsSm4Err.setDescription('While updating the Port State register, the cell could not get the XBC semaphore. Data field is: (Port Num << 44 | XBC num << 32 | return status). Where return status is: (0 Success; -1 Generic Failure)')
hpevtFabricAssertFabricErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8936)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAssertFabricErr.setDescription("An unexpected error occurred while initializing the fabric. The firmware is not able to analyze this error. Clues to the cause of this error may be found in the IPMI forward progress log (FPL) either shortly before or after this log entry occurred. The FPL is available from the management processor using the 'sl' command. HP-UX also saves these logs in the /var/stm/logs/os directory, and they can be viewed using the slview utility.")
hpevtFabricXinLinkAlreadyInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8939)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinLinkAlreadyInit.setDescription('While attempting to initialize the XIN link, it was found to already be initialized. A firmware assertion has failed. The link will not be re-initialized and processing should continue as normal. However, the system could be confused at this point.')
hpevtNoCpuModulesFoundByPdhc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8940)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoCpuModulesFoundByPdhc.setDescription('The PDHC FW could not detect any CPU modules on its Cell board, so it is holding the Cell in reset.')
hpevtCpuModCompatMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8941)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuModCompatMismatch.setDescription('The Cell has been disabled by PDHC FW because the CPU modules are not compatible. Compatibility is determined based on data stored in the Scratch/FRUID EEPROM on each CPU module. The CPU module partition compatibility byte for each CPU module must be identical.')
hpevtBadCpuModScratchCksum = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8942)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBadCpuModScratchCksum.setDescription("The Cell has been disabled because of invalid data in a CPU module Scratch EEPROM. PDHC FW checksums the FRUID data stored in each CPU module's Scratch EEPROM. If a checksum fails, the Cell is held in reset and will not boot. The data field identifies the CPU module that failed.")
hpevtPdhBatteryLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8954)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhBatteryLowWarning.setDescription('The battery voltage level is low for the cell. This indicates that the NVRAM will not be saved if the power is removed.')
hpevtFabricRouteXbcCopyRoutingErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8959)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRouteXbcCopyRoutingErr.setDescription('There was an error while copying the routing for the XBC to the local XBC port. The cell will reset. Data: (XBC port << 44) | (XBC num << 32) | return status')
hpevtFabricCopyRdBackFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8960)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCopyRdBackFailed.setDescription('The read immediately after a write while copying routing registers failed. Data: whether or not the XBC Key was enabled')
hpevtFabricRtgCompleteSm4RlsErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8962)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteSm4RlsErr.setDescription('Failed to release a XBC Semaphore while marking each XBC in the complex to indicate that routing has completed. Data: (XBC num << 32) | return value')
hpevtFabricRtgCompleteWrFwdPrgErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8964)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteWrFwdPrgErr.setDescription("Writing this XBC's forward progress register failed. Data: (XBC num << 32) | return value")
hpevtFabricRtgCompleteSm4AccessErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8965)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteSm4AccessErr.setDescription('Failed to get a XBC Semaphore while marking each XBC in the complex to indicate that routing has completed. Skipping this XBC. Data: (XBC num << 32) | return value')
hpevtFabricRtgCompleteTopologyErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8966)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteTopologyErr.setDescription("Reading this XBC's topology register failed. Data Field: (xbc num << 32) | return status")
hpevtFabricRouteTraversableCc2CcErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8968)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRouteTraversableCc2CcErr.setDescription('Could not check the traversability between two cells on an XBCless platform. Data field: return status (1 = SUCCESS, 0 = FALSE, -1 = FAILURE)')
hpevtFabricDataRouteTraversableCc2CcErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8969)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricDataRouteTraversableCc2CcErr.setDescription('Could not check the traversability between two cells on an XBCless platform. Data field: return status (1 = SUCCESS, 0 = FALSE, -1 = FAILURE)')
hpevtFabricCc2ccTraverseLclXinRdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8970)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2ccTraverseLclXinRdErr.setDescription("While checking traversability of a 2 cell back to back system, there was an error reading the local cell's XIN block. Data Field: return status (1 or -1)")
hpevtFabricCc2ccTraverseRmtXinRdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8971)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2ccTraverseRmtXinRdErr.setDescription("While checking traversability of a 2 cell back to back system, there was an error reading the local cell's XIN block. Data Field: return status (1 or -1)")
hpevtFabricCc2ccTraverseLclNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8972)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2ccTraverseLclNotInit.setDescription('Could not traverse to the target cell. The XIN link is either not initialized, or is not connected to the target cell. However, the target cell is designated to be within the partition. Data Field: target cell << 56 | XIN link state register')
hpevtFabricCc2ccTraverseRmtNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8973)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2ccTraverseRmtNotInit.setDescription('Could not traverse to the target cell. The XIN link is either not initialized, or is not connected to the target cell. However, the target cell is designated to be within the partition. Data Field: target cell << 56 | XIN link state register')
hpevtFabricDisableXinLinkReadErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8974)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricDisableXinLinkReadErr.setDescription('Error reading the XIN_LINK_STATE register of the CC. This occurred while verifying that the link had been disabled. Data Field: cell being read << 56 | return status from the CSR read.')
hpevtFabricXinInitRetryReadErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8975)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXinInitRetryReadErr.setDescription('Failure while reading the XBC CSR containing the link status. This occurred while attempting the retry process to get XBC to CC link initialized. Data Field: link init status')
hpevtFabricAssertFabricCc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8976)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAssertFabricCc.setDescription("An unexpected error occurred while initializing the fabric. The firmware is not able to analyze this error. Clues to the cause of this error may be found in the IPMI forward progress log (FPL) either shortly before or after this log entry occurred. The FPL is available from the management processor using the 'sl' command. HP-UX also saves these logs in the /var/stm/logs/os directory, and they can be viewed using the slview utility.")
hpevtCpuRestricted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8979)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuRestricted.setDescription("The CPU that just completed self tests is functionally or performance restricted. The data field contains the Self Test State Parameter. The 2-bit state field (bits 1..0) can have the following values when this event is displayed: 01 - Performance Restricted - cpu still functions 10 - Functionally Restricted - cpu doesn't function properly")
hpevtPdhInvalidRtcCleared = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8981)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhInvalidRtcCleared.setDescription('The RTC was found to be invalid and has been cleared')
hpevtLstNotRun = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8982)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtLstNotRun.setDescription('System firmware requested that Late Self Tests be run by PAL, but PAL returned that the tests did not actually run on the processor. The data field indicates the status word returned by PAL.')
hpevtBootSetCellStateFabricFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8983)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSetCellStateFabricFailure.setDescription('An attempt to update the cell state has failed due to a fabric crossbar failure. The cell number being updated in bits 63:56, while the traversable cell set (those cells connected to the fabric) is returned in bits 31:0')
hpevtBootResetCellStateFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,8984)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootResetCellStateFailure.setDescription("Failed to reset a cell due to an error setting the cell's state. The cell will not be reset with the other cells in the PD. The cell number is reported in the data field.")
hpevtMemChipspareDeallocRank = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9000)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemChipspareDeallocRank.setDescription('SFW has detected that a DRAM is failing on the DIMM specified by the physical location. The rank the failing DIMM is part of will be deallocated.')
hpevtClockFreqError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9019)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtClockFreqError.setDescription('Internal CPU clocks are not valid when compared with the real time clock. The data field contains the hex value of the elapsed time. If this value is off a small percentage from the expected value (which is given in the next chassis code), the event is emitted.')
hpevtFabricColaInitTraversableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9020)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricColaInitTraversableErr.setDescription('Could not traverse the fabric to the cell being added. Data field: (chosen cell << 56) | return status, where -1 = failure')
hpevtFabricAttemptFocusedReroute = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9021)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAttemptFocusedReroute.setDescription('A XBC port was found to be unhealthy on this reboot. This cell will attempt to route around it. Data field: (local Cell << 56) | (local internal Port << 44) | (local XBC << 32) | XBC internal port number being routed around.')
hpevtFabricCellRerouteNinfoErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9022)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellRerouteNinfoErr.setDescription("Error getting the XBC port's expected neighbor from a firmware table. Data field: 0 (SUCCESS) or -1 (FAILURE)")
hpevtBootWakeCpuIsCpuDeconfigErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9038)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootWakeCpuIsCpuDeconfigErr.setDescription('Either PDC is going to halt the cell or reset the partition because PDC was unable to access the PDH memory of either its local cell or another cell in the partition. The data field contains the error return value from PDC function IsHCellCpuDeconfig().')
hpevtBootWakeCpuGetCountersErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9039)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootWakeCpuGetCountersErr.setDescription('Either PDC is going to halt the cell or reset the partition because PDC was unable to access the PDH memory of either its local cell or another cell in the partition. The data field contains the error return value from PDC function SleepAndWakeupCountersGet().')
hpevtBootWakeCpuGetStructAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9040)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootWakeCpuGetStructAddrErr.setDescription('Either PDC is going to halt the cell or reset the partition because PDC was unable to access the PDH memory of either its local cell or another cell in the partition. The data field contains the error return value from PDC function PdhGetHCellStructAddr().')
hpevtBootCheckCpu4CompletionErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9041)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCheckCpu4CompletionErr.setDescription('Either PDC is going to halt the cell or reset the partition because PDC was unable to access the PDH memory of either its local cell or another cell in the partition. The data field contains the error return value from PDC function HasCpuCompletedWakeupTask().')
hpevtBootCheckCpuGetStructAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9042)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCheckCpuGetStructAddrErr.setDescription('Either PDC is going to halt the cell or reset the partition because PDC was unable to access the PDH memory of either its local cell or another cell in the partition. The data field contains the error return value from PDC function PdhGetHCellStructAddr().')
hpevtReconfigResetScheduled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9043)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtReconfigResetScheduled.setDescription('There is a need to reset the cell for reconfiguration, but it cannot be done yet because the cell has not reported at BIB. The Reset is being scheduled to be performed later.')
hpevtProfileWrongArchType = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9045)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtProfileWrongArchType.setDescription("When processing the complex profile, the an unexpected 'Architecture Type' was specified in the PA/IA Arch field. The actual data found is displayed.")
hpevtBootCheckCpuIsDeconfigErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9046)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCheckCpuIsDeconfigErr.setDescription('While trying to determine whether or not a particular processor has completed the task for which it was awakened, PDC was unable to access the deconfig byte information about the target processor. A processor should always be able to access this data in PDH memory for any processor on its own cell and for any processor on a cell that is alive in the partition. Therefore, PDC is either going to halt the cell or reset the partition because of this problem. The data field contains the PDC error return status from IsHCellCpuDeconfig().')
hpevtBootCheckCpuGetCountersErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9047)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCheckCpuGetCountersErr.setDescription("While trying to determine whether or not a particular processor has completed the task for which it was awakened, PDC was unable to access the CPU's sleep and wakeup counters for the target processor. A processor should always be able to access this data in PDH memory for any processor on its own cell and for any processor on a cell that is alive in the partition. Therefore, PDC is either going to halt the cell or reset the partition because of this problem. The data field contains the PDC error return status from SleepAndWakeupCountersGet().")
hpevtBootPdMonarchRtnFromSwSetFpErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9049)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootPdMonarchRtnFromSwSetFpErr.setDescription("While trying to determine whether or not a particular processor has completed the task for which it was awakened, PDC was unable to access the CPU's forward progress state (i.e. PST state) for the target processor. A processor should always be able to access this data in PDH memory for any processor on its own cell and for any processor on a cell that is alive in the partition. Therefore, PDC is either going to halt the cell or reset the partition because of this problem. The data field contains the PDC error return status from CpuFpSet().")
hpevtBootSlaveRtnFromFwSetFpErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9051)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSlaveRtnFromFwSetFpErr.setDescription("While trying to determine whether or not a particular processor has completed the task for which it was awakened, PDC was unable to access the CPU's Forward Progress State (i.e. PST state) for the target processor. A processor should always be able to access this data in PDH memory for any processor on its own cell and for any processor on a cell that is alive in the partition. Therefore, PDC is either going to halt the cell or reset the partition because of this problem. The data field contains the PDC error return status from CpuFpSet().")
hpevtBootProblemBranchingToPgzLocation = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9052)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootProblemBranchingToPgzLocation.setDescription('At a certain point in PDC boot, all of the processors in the partition except the PD monarch are put into a sleep, and they remain there until they are awakened by the PD monarch, at which time they read an architected location in Page Zero to find out where to branch to. This gives the OS a mechanism by which to bring processors under its control and have it executing OS code. This chassis log is sent if and when a problem is detected by PDC regarding the contents in the Page Zero location. This means that PDC cannot branch to the location logged in the Page Zero location. So, PDC sends this chassis log and then the processor returns to sleep. The data field is unused.')
hpevtBootBadCpuOrder = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9084)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootBadCpuOrder.setDescription('The Data Field contains the value used to determine a valid order.')
hpevtBootSlpWakeCntrsStructAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9364)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootSlpWakeCntrsStructAddrErr.setDescription('While trying to get the sleep counter and the wakeup counter for a particular processor, which is kept in a data structure in PDH memory, PDC was unable to determine the address to the data structure on the remote cell. PDC is supposed to be able to calculate addresses to anything in PDH memory on other cells in the partition. The data field contains the PDC error return status from a function called PdhGetHCellStructAddr().')
hpevtBootGetSleepTimeoutStructAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9365)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetSleepTimeoutStructAddrErr.setDescription('Error occurred accessing a PDC data structure. Depending upon the situation the cell or entire partition will be reset. The data field contains the return status for the function that encountered the error.')
hpevtBootMoveSlavesDispatcherAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9367)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveSlavesDispatcherAddrErr.setDescription('PDC is about to halt the cell because PDC was unable to determine the GNI address of the SlaveDispatcher function of PDC relocated to memory by PDC. The data field contains the error return value from the function GetGniCodeAddrFromRomCodeAddr().')
hpevtBootMoveSlavesCheckSlaveErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9368)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveSlavesCheckSlaveErr.setDescription("PDC is about to halt the cell because at least one of the processors didn't complete the task for which they were awakened and then return to sleep. The data field contains an error return status.")
hpevtBootMoveSlavesFpSetAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9370)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveSlavesFpSetAddrErr.setDescription('PDC is about to halt the cell because PDC was unable to determine the GNI address of the CpuFpSet() function of PDC relocated to memory by PDC. The data field contains the error return value from the function GetGniCodeAddrFromRomCodeAddr().')
hpevtBootMoveSlavesFpSetErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9371)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveSlavesFpSetErr.setDescription('PDC is about to halt the cell because one or more of the slaves were unable to change their CPU FP state in PDH memory on the local cell. The data field contains an error return status.')
hpevtBootMoveCellMonarchsStructAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9372)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveCellMonarchsStructAddrErr.setDescription('PDC was trying to move the cell monarchs on each of the non-core cells into the Dispatcher, but in order to do that, the PD monarch needs to be able to read the CPU number of the cell monarch on each of the non-core cells, which is kept in a data structure on each of the cells. PDC was unable to get the address to the CELL_CPU_STATE structure in PDH memory in a cell in the partition. The data field is the error return status from the PDC function called PdhGetHCellStructAddr().')
hpevtBootMoveCellMonarchsCheckSlaveErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9373)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveCellMonarchsCheckSlaveErr.setDescription("PDC is about to reset the partition because at least one of the processors didn't complete the task for which they were awakened and then return to sleep. The data field contains the error return status from the PDC function CheckSingleSlave().")
hpevtBootMoveCellMonarchsFpSetAddrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9375)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveCellMonarchsFpSetAddrErr.setDescription('PDC is about to reset the partition because it is unable to determine the GNI address for the CpuFpSet() function for one or more of the cells in the partition. The data field contains the error return status from GetGniCodeAddrFromRomCodeAddr().')
hpevtBootMoveCellMonarchsFpSetErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9376)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveCellMonarchsFpSetErr.setDescription('PDC is about to reset the partition because one or more of the processors were unable to successfully modify their CPU FP State (aka their PST state). The data field contains the error return status from the CpuFpSet() function.')
hpevtBootDualCoreInitFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9379)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootDualCoreInitFail.setDescription('MX2 initialization failed.')
hpevtBootDeconfigCpuModulePair = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9380)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootDeconfigCpuModulePair.setDescription('A cpu that is attached to a cpu that is slated for deconfiguration is being deconfigured as well.')
hpevtBootVirtualizeDualCoreRegistersFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9382)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootVirtualizeDualCoreRegistersFail.setDescription('FW failed to virtualize the mx2 interposer.')
hpevtBootVirtualizeDualCoreInterposerFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9383)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootVirtualizeDualCoreInterposerFail.setDescription('FW has failed to virtualize the mx2 interposer.')
hpevtBootInstallPmiHandlerFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9385)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootInstallPmiHandlerFailed.setDescription('Installation of the FW PMI handler has failed.')
hpevtPdhcCellIncompatable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9388)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcCellIncompatable.setDescription('Cell and or cpus have failed compatibility checks.')
hpevtPdhcPdhNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9389)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcPdhNotAvailable.setDescription('PDH space not available after release from reset.')
hpevtPdhcMponFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9390)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcMponFailed.setDescription('MPON failed to release.')
hpevtPdhcDillonResetFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9391)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcDillonResetFailed.setDescription('Dillon failed to reset.')
hpevtPdhcDmdClockFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9392)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhcDmdClockFailed.setDescription('DMD clock is not running.')
hpevtAllCpusDeconfOnCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9394)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAllCpusDeconfOnCell.setDescription('All possible CPUs on a cell have been scheduled for deconfiguration.')
hpevtFabricLogRoutingRdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9403)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricLogRoutingRdErr.setDescription('A read error occurred while dumping the XBC port routing registers during boot. This cell will attempt fabricless boot. Data field: (XBC port << 48) | (XBC num << 32) | error status reg')
hpevtFabricLinkRendezDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9412)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricLinkRendezDisableErr.setDescription('After cell rendezvous for a 2 cell Medel, only one cell made it into the partition. Disabling the link failed. The cell will reset for reconfig. Data Field: return status')
hpevtAcDeletedA0 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9417)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcDeletedA0.setDescription('Power is no longer being supplied to input A0 on the cabinet specified in the data field.')
hpevtAcDeletedA1 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9418)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcDeletedA1.setDescription('Power is no longer being supplied to input A1 on the cabinet specified in the data field.')
hpevtAcDeletedB0 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9419)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcDeletedB0.setDescription('Power is no longer being supplied to input B0 on the cabinet specified in the data field.')
hpevtAcDeletedB1 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9420)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAcDeletedB1.setDescription('Power is no longer being supplied to input B1 on the cabinet specified in the data field.')
hpevtFabricCc2CcLinkDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9428)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCc2CcLinkDisableErr.setDescription('Failed to disable the XIN link init CSR on a XBCless system. Cell will halt. Data field: return status (0 = SUCCESS, -1 = FAILURE), -1 is expected for this event.')
hpevtFabricISREarlyCopyRoutingErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9430)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricISREarlyCopyRoutingErr.setDescription("Error writing the XBC port's routing registers. The cell will reboot. Data Field: XBC port << 44 | XBC num << 32 | return status")
hpevtFabricClrLinkInitBitErrMaskRd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9431)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrLinkInitBitErrMaskRd.setDescription('Could not read the XIN error mask register on the CC. Data Field: cell number and return status')
hpevtFabricClrLinkInitBitErrMaskWr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9432)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrLinkInitBitErrMaskWr.setDescription('Could not write the XIN error mask register on the CC. Data Field: cell number and return status')
hpevtFabricPortPairRdPstatusErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9433)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricPortPairRdPstatusErr.setDescription('While testing link traversability, a XBC CSR could not be read. Data Field: Port Number << 44 | XBC Number << 32 | return value')
hpevtPdhBatteryPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9438)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPdhBatteryPowerLow.setDescription('The Battery-Low interrupt was signaled in the Interrupt Pending Register in Dillon (PDH) by the hardware. PDHC is merely reporting the problem.')
hpevtNoHandoffToOsMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9440)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoHandoffToOsMca.setDescription('This means that the system FW MCA handler is not going to handoff to the OS_MCA handler.')
hpevtBootRtnFromSwCantGetCounters = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9441)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootRtnFromSwCantGetCounters.setDescription('When returning from other software, like when returning from ISL, PDC is trying to make sure that all of the slave processors in the partition are asleep; however, this event ID indicates that we were unable to access PDH memory of a cell that is supposed to be part of our partition. The data field contains the error return status from a function called SleepAndWakeupCountersGet().')
hpevtBootRtnFromSwCpuNotAsleep = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9442)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootRtnFromSwCpuNotAsleep.setDescription('When returning to PDC from other software, like returning from ISL, PDC tries to verify that all the slave processors are in the expected state (i.e. that all slave processors are asleep); however, this event ID indicates that at least one processor active in the partition was not asleep. So, PDC is going to reset the partition. The data field of this Event ID is the global CPU number of the first CPU in the partition not found in the expected state.')
hpevtBootDeconfigAbsentCantSetCpuState = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9445)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootDeconfigAbsentCantSetCpuState.setDescription('PDC could not access one of its own data structures on the local cell. The cell will be halted. The data field contains the return status from the PDC function that encountered the error.')
hpevtNvramBlockTableCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9448)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramBlockTableCorrupt.setDescription('The NVRAM-based descriptor for System Firmware NVRAM blocks is corrupt.')
hpevtBootMoveSlavesSetTimeoutErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9450)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootMoveSlavesSetTimeoutErr.setDescription("The cell will be reset because it was unable to access PDH memory on its own cell. While trying to move all the slave processors on the cell to the 'late boot sleep', the monarch tried to write the sleep timeout to PDH memory on its own cell, but encountered an error in doing so. The data field contains a PDC return status.")
hpevtBootReconfigAllCpus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9460)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootReconfigAllCpus.setDescription('All CPUs have been determined to be manually deconfigured in NVM during boot. This may only happen when switching from single core CPU deconfiguration to multi-core CPU deconfiguration in product qualification testing. As a recovery, NVM settings have been changed to reconfigure all CPUs.')
hpevtBootGetNumcoresFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9461)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetNumcoresFailure.setDescription('A failure has occurred trying to determine the number of CPU cores per module. Depending upon the situation, either the cell will be halted or the entire partition will be reset.')
hpevtFabricRmtRoutePortTopoErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9465)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRmtRoutePortTopoErr.setDescription('While writing the remote routing, the local XBC could not be accessed to determine the topology. Look for additional chassis codes to determine what will happen as a result of this failure. Data field: return status, either SUCCESS (0) or (-1)')
hpevtFabricCellRerouteFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9466)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellRerouteFailure.setDescription('Failed to route around a broken link on cell reboot. Data Field: PDC return status')
hpevtFabricRdFailedLinksError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9468)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRdFailedLinksError.setDescription('Could not read the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricWrFailedLinksRdError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9469)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricWrFailedLinksRdError.setDescription('Could not read the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricWrFailedLinksWrError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9470)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricWrFailedLinksWrError.setDescription('Could not write the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricIncFailedLinksRdError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9471)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricIncFailedLinksRdError.setDescription('Could not read the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricIncFailedLinksWrError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9472)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricIncFailedLinksWrError.setDescription('Could not write the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricIncFailedLinksHitLimit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9473)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricIncFailedLinksHitLimit.setDescription('Too many broken crossbar links were found. This cell will have no connectivity to other cells in the complex. It will attempt a fabricless boot, except in a few configurations. Data Field: (XBC Num << 32) | number of broken links')
hpevtFabricRtgCompleteRdFldLinksErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9474)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteRdFldLinksErr.setDescription('Could not read the XBC register that contains the number of links that are currently broken on the complex. Data Field: PDC return status')
hpevtFabricRtgCompleteWrFldLinksErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9475)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRtgCompleteWrFldLinksErr.setDescription('Could not write the XBC register that contains the number of links that are currently broken on the complex. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricCellRerouteRdXbcErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9476)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellRerouteRdXbcErr.setDescription('Could not read the XBC register that marks the ports that have been routed around. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricCellRerouteNbrNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9477)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellRerouteNbrNotReachable.setDescription('The PIOB route to the remote XBC was not traversable. The cell will halt. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricCellRerouteSm4RlsErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9479)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricCellRerouteSm4RlsErr.setDescription("Could not release the remote XBC's semaphore. Cell will halt. Data Field: (XBC Num << 32) | PDC return status")
hpevtFabricRmtRoutePortBcastWrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9480)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRmtRoutePortBcastWrErr.setDescription('Failed to complete a broadcast write to an XBC. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricRmtRoutePortRdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9481)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRmtRoutePortRdErr.setDescription('Failed to complete a read to the built-in port of a XBC. Data Field: (XBC Num << 32) | PDC return status')
hpevtFabricRmtRoutePortWrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9482)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRmtRoutePortWrErr.setDescription("Failed to complete a write to the local cell's port of the XBC. Data Field: (XBC Port << 44) | (XBC Num << 32) | PDC return status")
hpevtIoLinkSubsystemFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9484)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoLinkSubsystemFailed.setDescription('The link between the CC and SBA failed meaning that I/O is not available to the reporting cell.')
hpevtIoSbaSubsystemFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9485)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoSbaSubsystemFailed.setDescription('An error was detected in the SBA and the reporting cell has no I/O.')
hpevtIoErrengineError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9486)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoErrengineError.setDescription('The structured exception handling within the system firmware failed during I/O initialization.')
hpevtIoDiscEeMallocErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9487)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeMallocErr.setDescription('There is not enough malloc resources for the I/O structure exception handling. I/O on the reported cell is not available.')
hpevtIoDiscEeCreatetreeErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9488)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeCreatetreeErr.setDescription('Error creating the structure for housing the I/O structured exception handling services and data. I/O is lost on the reporting cell.')
hpevtIoDiscEeAttachserviceErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9489)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeAttachserviceErr.setDescription('Unable to bind the I/O structure exception handling to the internal data structures.')
hpevtIoDiscEeInitErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9490)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeInitErr.setDescription('Error detected while initializing the I/O structure exception handling services.')
hpevtIoDiscEeInitializationErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9491)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeInitializationErr.setDescription('Error initializing the I/O structure exception handling data structures.')
hpevtIoDiscEeContextErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9492)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscEeContextErr.setDescription('The structured I/O exception handling data structures have an error. All I/O on the reporting cell is not available.')
hpevtIoDiscCreateSbaNodeErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9493)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscCreateSbaNodeErr.setDescription('While setting up the internal SBA data and service an error was detected. All I/O for the reporting cell is not available.')
hpevtIoDiscSbaAttachserviceErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9494)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscSbaAttachserviceErr.setDescription('An error attaching firmware services to the internal structures was detected. All I/O on the reporting cell is not available.')
hpevtIoDiscSbaInitnodeErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9495)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscSbaInitnodeErr.setDescription('System firmware detected an error initializing internal SBA data structures and services. This is usually an error with unavailable resources.')
hpevtIoDiscSbaUnknownErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9496)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDiscSbaUnknownErr.setDescription('The SBA type is unknown to the system firmware. The I/O on the reporting cell is not available.')
hpevtIoDeviceMissing = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9497)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoDeviceMissing.setDescription('An expected I/O device cannot be detected by the system firmware.')
hpevtFabricRmtRoutePortBadReroute = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9498)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricRmtRoutePortBadReroute.setDescription(' Too many broken links! The XBC port route around failed because the route-around port was bad too. Data field: (XBC port << 44) | (XBC num << 32) | port state')
hpevtAgtPredictMemFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9652)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAgtPredictMemFail.setDescription('ECC (Error Checking and Correcting) memory is designed to detect and correct single-bit errors that occasionally occur in computer systems. This memory module is currently correcting many single bit errors.')
hpevtWinAgtLockedProperty = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9653)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWinAgtLockedProperty.setDescription('Server Agents SNMP branch is not responding due to a portion of the IPMI Management Subsystem being locked by another entity.')
hpevtIoPciPowerOverloadErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9658)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIoPciPowerOverloadErr.setDescription("A non-hot plug I/O slot's power consumption increases the total I/O power consumption beyond the supported limit. Firmware will display the following EFI error message, 'I/O configuration exceeds power limit' and disallow O/S boot. Data Field: Physical location of the I/O slot.")
hpevtMemSbeSeedingEnabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9659)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemSbeSeedingEnabled.setDescription('This is a warning that the system is running in a degraded mode. It will only be emitted in MFG mode when Memory SBE Seeding is enabled. This is only for testing of SBE seeding for LAB and possibly MFG use ONLY. It should NEVER be seen in the field.')
hpevtFabricWrFailedLinksTopoErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9661)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricWrFailedLinksTopoErr.setDescription('Read failure while writing the number of failed links to the XBC. Data Field: Return Status (SUCCESS = 0, FAILURE = -1)')
hpevtBootErrInitGroupCPaFields = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9663)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootErrInitGroupCPaFields.setDescription('PDC could not access a complex profile. The partition will be reset because the available complex profile is not valid. Data field contains the return status from the function that encountered the error.')
hpevtFabricAssertFabricHop = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9666)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricAssertFabricHop.setDescription("An unexpected error occurred while initializing the fabric. The firmware is not able to analyze this error. Clues to the cause of this error may be found in the IPMI forward progress log (FPL) either shortly before or after this log entry occurred. The FPL is available from the management processor using the 'sl' command. HP-UX also saves these logs in the /var/stm/logs/os directory, and they can be viewed using the slview utility.")
hpevtBootFailedReadingProfileCInIcm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9668)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFailedReadingProfileCInIcm.setDescription('PDC could not access a complex profile. The partition will be reset. Data field contains the return status from the function that encountered the error.')
hpevtFabricHaltLinkDisableErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9670)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricHaltLinkDisableErr.setDescription("Before attempting a fabricless boot, the cell's link to the fabric should be disabled to provide isolation and stability. The link could not be disabled, so the cell will halt.")
hpevtBootGetSpiromGetSiblingErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9674)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetSpiromGetSiblingErr.setDescription('Configuration information on the processor was invalid. The cell will be halted. Data field contains the return value from the function that encountered the error.')
hpevtCpuClockRatioMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9678)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuClockRatioMismatch.setDescription('The clock ratio that the processor is running at does not match the clock ratio that manageability is reporting.')
hpevtBootStopBootOverride = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9681)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootStopBootOverride.setDescription('The user has manually bypassed a stop boot condition (caused by an error during boot) and continued to boot an O/S. The system might experience unpredictable failures.')
hpevtVgaBiosRelocFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9682)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVgaBiosRelocFail.setDescription('Firmware was unable to relocate the VGA BIOS to the hardcoded VGA BIOS region in main memory (physical address range 0xc0000 - 0xdffff). VGA routing has been disabled by firmware. No VGA device will be accessible on this boot.')
hpevtCompMatrixXsumError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9685)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCompMatrixXsumError.setDescription('The component compatibility matrix stored in NVRAM and used by system firmware has a checksum error. The stored value does not equal the calculated value. The data field will contain first the expected value, and the subsequent code will contain the actual data.')
hpevtBootGetDefaultRdrsFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9695)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetDefaultRdrsFailed.setDescription('PDC could not read an internal CPU register. The partition will be reset. Data field is the return status from the function that encountered the error.')
hpevtBootGetCurrentRdrsFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9696)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootGetCurrentRdrsFailed.setDescription('PDC could not read an internal CPU register. The partition will be reset. Data field is the return status from the function that encountered the error.')
hpevtBootReadPrefetchFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9697)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootReadPrefetchFailed.setDescription('PDC failed reading a value out of its own copy of the internal CPU register settings. Data field is a status return indicating the type of failure.')
hpevtBootReadZlcoFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9698)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootReadZlcoFailed.setDescription('PDC failed reading a value out of its own copy of the internal CPU register settings. Data field is a status return indicating the type of failure.')
hpevtBootUpdateZlcoAndPrefetchFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9700)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootUpdateZlcoAndPrefetchFailed.setDescription('PDC attempted to update CPU registers to match their respective settings in the complex profile, but a failure was returned from the call to accomplish the update. Data field contains the failure.')
hpevtBootErrorReadingZlcoFlagInPdProfile = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9701)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootErrorReadingZlcoFlagInPdProfile.setDescription('PDC could not access a complex profile. The partition will be reset.. Data field contains the return status from the function that encountered the error.')
hpevtBootFindCoreCellCmplxProfileAcErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9706)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFindCoreCellCmplxProfileAcErr.setDescription('PDC could not access a complex profile. The cell will be reset. Data field contains the return status from the function that encountered the error.')
hpevtBootFindCoreCellConfigSelectErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9707)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFindCoreCellConfigSelectErr.setDescription('Could not find a potential core cell for the partition in the configured set. This cell will reset for reconfiguration. Data Field: return status from failing function')
hpevtBootCellLclCantFindViable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9708)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellLclCantFindViable.setDescription('The potential core cell was not viable (i.e. no core I/O, etc). This cell will reset for reconfiguration. Data Field: bit mask of cells that made the rendezvous set')
hpevtBootCellRmtCantFindViable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9709)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootCellRmtCantFindViable.setDescription('The potential core cell was not viable (i.e. no core I/O, etc). This cell will reset for reconfiguration. Data Field: bit mask of cells that made the rendezvous set')
hpevtBootFindCoreCellNotInRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9710)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFindCoreCellNotInRendez.setDescription('The potential core cell did not rendezvous with the rest of the partition. This cell cannot talk to the selected core cell. This cell will reset for reconfiguration. Data Field: bit mask of cells that made the rendezvous set')
hpevtBootFindCoreCellLclNotViable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9711)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFindCoreCellLclNotViable.setDescription('The local cell is disconnected from the rest of the system due to the main backplane configuration. While the partition is only configured to contain a single cell, the local cell is not a viable core cell. The cell will reset for reconfiguration. Data Field: bit mask of cells that made the rendezvous set')
hpevtBootFindCoreCellFabriclessPdErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9712)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootFindCoreCellFabriclessPdErr.setDescription('This cell has booted without the main backplane, probably due to prior main backplane errors. The partition it is in is configured with 3 or more cells. The combination of these two configurations is not allowed. The cell will reset for reconfiguration. Data Field: configured set')
hpevtRtcAccessError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9719)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRtcAccessError.setDescription('While validating the internal RTC data the data is read twice and compared. If the comparison fails to match the read is performed again up a maximum of 50 times. If we cannot get a match in 50 retries we issue this event.')
hpevtBootAccessCellArchErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9727)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootAccessCellArchErr.setDescription('PDC attempts to make sure that all of the cells in a partition are installed in the same processor architecture. PDC failed to read the architecture for another cell. PDC will reset all of the cells in the partition when this error is detected. The data field contains the physical location of the cell reporting the event.')
hpevtXbcLogSizeErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9740)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcLogSizeErr.setDescription('The buffer size passed in to the XBC error logging routine through SAL_GET_STATE_INFO, SAL_CLEAR_STATE_INFO, or MCA logging is too small for the XBC error log Data field consists of: XBC number (32:43)')
hpevtXbcLogClearErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9741)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcLogClearErr.setDescription('System firmware was unable to clear an XBC error. The data field contains: XBC number (32:43) port number (44:55) error type (0:31)')
hpevtIodiscPciLogError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9744)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscPciLogError.setDescription('Error encountered while collecting PCI error logs. The result is some or all PCI error logs will be unavailable.')
hpevtIodiscSbaLogError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9745)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIodiscSbaLogError.setDescription('Error encountered while collecting SBA error logs. The result is some or all SBA error logs will be unavailable.')
hpevtXbcInitMaxRetries = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9746)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcInitMaxRetries.setDescription('During fabric initialization, if a crossbar is found to be in an unexpected state, the number of retries is incremented. If the number of retries exceeds the maximum, then something is wrong and there is no way to initialize the fabric. Data field: number of retries (0:31), crossbar number (32:63)')
hpevtWinAgtPredictMemFailWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9750)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWinAgtPredictMemFailWarning.setDescription('ECC (Error Checking and Correcting) memory is designed to detect and correct single-bit errors that occasionally occur in computer systems. This memory module is currently correcting many single bit errors.')
hpevtWinAgtPredictMemFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9751)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWinAgtPredictMemFailCritical.setDescription('ECC (Error Checking and Correcting) memory is designed to detect and correct single-bit errors that occasionally occur in computer systems. This memory module is currently correcting many single bit errors.')
hpevtPciFatalRopeParityErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9753)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPciFatalRopeParityErr.setDescription('A error occurred on the bus connecting the PCI card to the system bus.')
hpevtPciFatalBusError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9754)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPciFatalBusError.setDescription("A PCI card has been marked as 'fatal' by the operating system due to a bus error. The LBA has been isolated by the operating system due to an error which occurred in a device(s) connected to that LBA.")
hpevtPciFatalDeviceError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9755)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPciFatalDeviceError.setDescription("A PCI card has been marked as 'fatal' by the operating system due to a device error.")
hpevtBootErrorReadingFirstBootToken = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9768)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootErrorReadingFirstBootToken.setDescription('Firmware tried to read the first boot token an got a failure. The data field contains the token number that FW tried to read. This is a stop boot condition')
hpevtBootNonPaCellDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9769)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBootNonPaCellDetected.setDescription('monarch PA cell has detected that a cell it is attempting to rendezvous into its PD is not a PA cell and is thus incompatible.')
hpevtFabricErrorsXbcClearWrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9774)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrorsXbcClearWrErr.setDescription('A XBC error could not be cleared due to a write failure. The data field indicates the type of error: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricErrorsXbcClearRdGlblErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9775)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrorsXbcClearRdGlblErr.setDescription('Failed to read the XBC Global CSR Error Status register. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricErrorsXbcClrLoSevErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9776)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrorsXbcClrLoSevErr.setDescription('The XBC CSR Low Severity error was not cleared or more errors remain. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | contents of the XBC CSR Error Status Register')
hpevtFabricErrorsXbcClrHiSevErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9777)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrorsXbcClrHiSevErr.setDescription('The XBC CSR High Severity error was not cleared or more errors remain. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | contents of the XBC CSR Error Status Register')
hpevtFabricErrorsXbcClearRdPortErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9778)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrorsXbcClearRdPortErr.setDescription('Failed to read the XBC Port Error Status register. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricErrsCsrLogClrRdSlicesErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9780)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrsCsrLogClrRdSlicesErr.setDescription('Failed to read the XBC Global CSR Error Status register. Data Field: (XBC Port Num << 56) | error status')
hpevtFabricErrsCsrLogClrCopyBlk0Err = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9781)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrsCsrLogClrCopyBlk0Err.setDescription('Firmware failed to copy the XBC CSR Error symbol 01 registers into a data structure on the stack. Data Field: address where the register contents are being copied')
hpevtFabricErrsCsrLogClrCopyBlk2Err = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9782)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricErrsCsrLogClrCopyBlk2Err.setDescription('Firmware failed to copy the XBC CSR Error symbol 23 registers into a data structure on the stack. Data Field: address where the register contents are being copied')
hpevtFabricXbcLoStateResetErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9783)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXbcLoStateResetErr.setDescription('Firmware was unable to reset the XBC CSR Low Severity error log state. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricClrXbcSym01Failure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9784)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrXbcSym01Failure.setDescription('The XBC Low Severity error logs were not cleared. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | number of failed clear attempts')
hpevtFabricClrXbcIsLoCsrErrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9785)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrXbcIsLoCsrErrErr.setDescription('Reading the XBC CSR Error Status register failed. Data field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricClrXbcRdLoLogStateErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9786)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrXbcRdLoLogStateErr.setDescription('Failed to read a XBC Global scratch register that indicates if new, unlogged errors have been encountered. Data field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricXbcHiStateResetErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9787)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXbcHiStateResetErr.setDescription('Firmware was unable to reset the XBC CSR Low Severity error log state. Data Field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricClrXbcIsHiCsrErrErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9788)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrXbcIsHiCsrErrErr.setDescription('Reading the XBC CSR Error Status register failed. Data field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtFabricClrXbcRdHiLogStateErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9789)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricClrXbcRdHiLogStateErr.setDescription('Failed to read a XBC Global scratch register that indicates if new, unlogged errors have been encountered. Data field: (XBC Port Num << 56) | (XBC Num << 32) | error status')
hpevtPlatformCacheHashingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9801)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPlatformCacheHashingError.setDescription('An error occurred while enabling hashing in the platform cache. The data field contains the status.')
hpevtFabricXbcWriteableInvalidCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9827)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabricXbcWriteableInvalidCsr.setDescription('A write to an invalid XBC CSR address was attempted. The write will not be allowed. The severity of this result will be determined by the calling function. Data Field: XBC CSR address that was attempted')
hpevtMcCellsLostConnection = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9832)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMcCellsLostConnection.setDescription('It indicates loss of cell connectivity in the partition during a global MCA processing.')
hpevtBuildErrCellDevTree = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9849)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBuildErrCellDevTree.setDescription('Error status of building the cell-level firmware device tree')
hpevtDcnfgFsbInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9867)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgFsbInit.setDescription('An error has occurred during CPU FSB interface initialization. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuParams = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9868)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuParams.setDescription('An error has occurred while obtaining CPU parameters from the CPU abstraction layer. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuIcache = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9869)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuIcache.setDescription('An error occurred while getting CPU icache parameters from the CPU abstraction layer. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured if this error occurs during system boot.')
hpevtDcnfgCpuDcache = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9870)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuDcache.setDescription('An error occurred while obtaining CPU dcache parameters from the CPU abstraction layer. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured if error occurs during system boot.')
hpevtDcnfgCpuCacheState = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9871)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuCacheState.setDescription('An error occurred while initializing the CPU cache to a known state. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuCacheMonitor = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9872)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuCacheMonitor.setDescription('An error occurred while enabling CPU cache error monitoring. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9873)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuMca.setDescription('An error occurred while enabling some machine error check traps on a CPU. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuDisableMca = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9874)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuDisableMca.setDescription('An error occurred while disabling marching error check traps on a CPU. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuSelfTest = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9875)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuSelfTest.setDescription('An error occurred during the serialized CPU late selftests. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuL2Cache = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9876)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuL2Cache.setDescription('An error occurred while enabling the CPU L2 shared cache. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuDefValue = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9877)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuDefValue.setDescription('An error while getting default values for programmable CPU internal registers from the CPU abstraction layer. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuInReg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9878)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuInReg.setDescription('An error occurred while getting an address for a CPU internal register within a buffer from the CPU abstraction layer. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtDcnfgCpuProgReg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9879)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgCpuProgReg.setDescription('An error occurred while programming CPU internal registers with final configuration values. The datafield contains a 32-bit error number and 32-bits of additional error information. The CPU will be deconfigured.')
hpevtNoMemSelfTest = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,9896)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoMemSelfTest.setDescription('There was not enough error free memory in the system to run the late selftests.')
hpevtCellLatchOpen = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10060)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellLatchOpen.setDescription('The left cell ejector on the specified cell is open.')
hpevtDcnfgRightCellLatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10061)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDcnfgRightCellLatch.setDescription('The right ejector latch on the specified cell board is open.')
hpevtCellLatchSensorBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10062)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellLatchSensorBad.setDescription('The optical emitters on the cell latch sensors are not functioning.')
hpevtVrmVltFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10063)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVrmVltFault.setDescription('The specified vrm is reporting a fault.')
hpevtVrmTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10064)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVrmTempFlt.setDescription('The specified vrm is reporting a fault.')
hpevtVrmFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10065)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVrmFlt.setDescription('The specified rail is reporting a fault.')
hpevtVrmIoVltFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10068)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVrmIoVltFlt.setDescription('The specified pci vrm is reporting a voltage fault.')
hpevtPwrBrickVltFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10069)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPwrBrickVltFlt.setDescription('The specified pci power brick is reporting a voltage fault.')
hpevtVrmBkPlaneTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10070)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVrmBkPlaneTempFlt.setDescription('The specified vrm is reporting a temperature fault.')
hpevtBkPlanePwrBrickTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10071)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlanePwrBrickTempFlt.setDescription('The specified pci power brick is reporting a temperature fault.')
hpevtBkPlanVrmRailFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10072)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlanVrmRailFlt.setDescription('The specified vrm rail is reporting a fault.')
hpevtBkPlanePwrBrkFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10073)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlanePwrBrkFlt.setDescription('The specified pci brick is reporting a fault.')
hpevtBkPlaneVrmVltFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10103)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlaneVrmVltFlt.setDescription('The specified system backplane vrm is reporting a module voltage fault.')
hpevtBkPlaneVrmTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10104)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlaneVrmTempFlt.setDescription('The specified system backplane vrm is reporting a temperature fault.')
hpevtBkPlaneFlt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10105)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlaneFlt.setDescription('The specified system backplane rail is reporting a fault')
hpevtMstrMpFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10115)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMstrMpFailed.setDescription('The master mp has failed. The slave has taken over management of the cabinet.')
hpevtNvramAlloc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10116)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramAlloc.setDescription('The NVRAM service was unable to satisfy an NVRAM allocation request.')
hpevtRtcTimeReg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10132)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRtcTimeReg.setDescription('The RTC seems to not be updating its internal time registers. The cell cannot boot without the RTC.')
hpevtPAAFltMx2 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10159)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPAAFltMx2.setDescription('An uncorrectable Power Aware Architecture (PAA) fault has occurred on the MX2 module and PAA firmware has halted. The system will continue to run without PAA firmware.')
hpevtAPIopenLnkLocCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10209)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAPIopenLnkLocCell.setDescription('fabric API is about to open the a link going out of the local cell')
hpevtCSRreadUnsuccessTimeOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10272)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCSRreadUnsuccessTimeOut.setDescription('An Arches fabric CSR read was unsuccessful because of a timeout.')
hpevtCSRWriteUnsuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10273)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCSRWriteUnsuccess.setDescription('An Arches fabric CSR write was unsuccessful')
hpevtDataErrEncount = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10343)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDataErrEncount.setDescription('The event data details the error return status from Phase3BackToBackPrep. Internal debug only, this refers to an unexpected firmware error or data corruption.')
hpevtConfigMaxMemory = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10351)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtConfigMaxMemory.setDescription('The maximum memory supported by this system has been exceeded. The data field contains the amount of memory supported by the system.')
hpevtFailDelBadPort = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10357)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailDelBadPort.setDescription('Failed to delete a bad port while routing the fabric. Data field indicates return status')
hpevtFailDelBadEdge = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10358)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailDelBadEdge.setDescription('failed to delete an edge that was found to be bad during routing')
hpevtCommandMemBuf = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10361)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCommandMemBuf.setDescription('A command to the memory buffer chip failed to complete.')
hpevtUnsupprtArflsCsrRouteTravsble = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10375)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnsupprtArflsCsrRouteTravsble.setDescription('The Arches Fabric function ArfIsCsrRouteTraversable was called for a back-to-back system. This is unsupported, ArfIsCsrRouteTraversable should only be called for systems with crossbars. No data.')
hpevtInvalidPortToTravsble = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10376)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvalidPortToTravsble.setDescription('An invalid port number was given as an input to an Arches Fabric Traversability function. The port is expected to be an internal XBC num (8-15), but the actual port was not. Data field: (XBC number << 32) | (port number << 48)')
hpevtUnbleRdXBCPortNghbr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10377)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnbleRdXBCPortNghbr.setDescription('Unable to read XBC port neighbor information. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtXBCPortUnexpctNghbrChip = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10378)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCPortUnexpctNghbrChip.setDescription('XBC port with an unexpected neighbor chip type. Data field: (expected chip type) | (actual chip type << 16) | (xbcNum << 32) | (portNum << 48)')
hpevtXBCPortHaveUnxpctNghbrID = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10379)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCPortHaveUnxpctNghbrID.setDescription('An XBC port was found to have an unexpected neighbor ID. Data field: (expected NID) | (actual NID << 16) | (xbcNum << 32) | (portNum << 48)')
hpevtXBCHaveUnexpctNghbrPrtConn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10380)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCHaveUnexpctNghbrPrtConn.setDescription('An XBC was found to have an unexpected neighbor port connection. Data field: (expected port) | (actual port << 16) | (xbcNum << 32) | (portNum << 48)')
hpevtDataNotFndEdgLst = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10381)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDataNotFndEdgLst.setDescription('The expected data was not found in the Arches Fabric expected edge list. Data field is unused')
hpevtXBCPrtUnxpctNgbrChip = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10382)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCPrtUnxpctNgbrChip.setDescription('An XBC port has an unexpected neighbor chip type. Data field: neighbor type found, bits [7:0], other bits unused')
hpevtXBCtoXBCLnkDwn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10384)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCtoXBCLnkDwn.setDescription('A previously good XBC-XBC link was found to be down. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtXBCprtFndErrTravsbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10385)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCprtFndErrTravsbl.setDescription('An XBC port was found to have a Fatal Error during traversability test. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtUnblRdLnkCelFabCSR = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10386)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnblRdLnkCelFabCSR.setDescription("Unable to read the local cell's LINK_SEL_FABRIC CSR Data field: unused")
hpevtUblRdXBCrouteTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10387)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUblRdXBCrouteTbl.setDescription('Unable to read the XBC route table. Data field: (route index) | (xbcNum << 32) | (portNum << 48)')
hpevtXBCLnkNotConnCSRTravsbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10388)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCLnkNotConnCSRTravsbl.setDescription('An XBC link was found to be not connected while testing CSR traffic traversability. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtErrRdAlrecAlbIdCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10389)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRdAlrecAlbIdCsr.setDescription('Error reading Skyline ALREC_ALB_ID CSR Data field: (Skyline port) | (Cell number << 56)')
hpevtCirRoutFndTstXbcCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10390)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCirRoutFndTstXbcCsr.setDescription('A circular route was found while testing XBC CSR traffic traversability. Data field: (target XBC << 32) | (cellNum << 56)')
hpevtXBCRdErrAlrecAlbIdCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10391)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCRdErrAlrecAlbIdCsr.setDescription('Error reading ALREC_ALB_ID CSR for an XBC port. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtXBC_XBCPrtHavInvldChipCnn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10392)).setLabel("hpevtXBC-XBCPrtHavInvldChipCnn").setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBC_XBCPrtHavInvldChipCnn.setDescription('An XBC-XBC port had an invalid chip type connection. Data field: (expected chip type) | (actual chip type << 32)')
hpevtArflsXbcRotTravrsblCalBakToBak = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10393)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArflsXbcRotTravrsblCalBakToBak.setDescription('ArfIsXbcRouteTraversable was called on a back-to-back system which is an improper use of the function. Data field: unused')
hpevtXBCToXBClnkFndFatErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10394)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXBCToXBClnkFndFatErr.setDescription('In ArfIsXbcRouteTraversable, an XBC-XBC link was found to have fatal errors. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtUnablRdXbcRotTblEnblMskCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10395)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablRdXbcRotTblEnblMskCsr.setDescription('Unable to read the XBC ROUTE_TABLE_ENABLE_MASK CSR. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtErrRdXbcRotTablCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10396)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRdXbcRotTablCsr.setDescription('Error reading an XBC ROUTE_TABLE CSR. Data field: route index | (xbcNum << 32) | (portNum << 48)')
hpevtXbcPrtErrRdAlrecAlbIDCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10397)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPrtErrRdAlrecAlbIDCsr.setDescription('Error reading ALB ALREC_ALB_ID CSR for an XBC port. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtXbcPrtFndUnxpctNgbrChip = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10398)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPrtFndUnxpctNgbrChip.setDescription('An XBC port was found with an unexpected neighbor chip. Data field: expected chip type | (actual chip type << 32)')
hpevtCelPrtPairNotFndGrphDat = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10401)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCelPrtPairNotFndGrphDat.setDescription('A cell/port pair was not found in the expected graph data. Data field: (cellNum << 32) | CC portNum')
hpevtArchFabFndLocCelLnkNotConn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10402)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArchFabFndLocCelLnkNotConn.setDescription('Arches Fabric Traversability code unexpectedly found the local cell link not connected. Data field: linkState (0 = connected, 1 = link pending, 2 = not connected, -1 = error)')
hpevtXbcErrRdRoutCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10403)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcErrRdRoutCsr.setDescription('Error reading the ROUTEx CSR on the XBC. Data field: route index | (xbcNum << 32) | (portNum << 48)')
hpevtXbcUnablRdAlrecAlbIdCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10404)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcUnablRdAlrecAlbIdCsr.setDescription('Unable to read the ALB ALREC_ALB_ID CSR for an XBC port. Data field: (xbcNum << 32) | (portNum << 48)')
hpevtXbcPrtHasUnxpctNgbrChptype = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10405)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtXbcPrtHasUnxpctNgbrChptype.setDescription('An XBC port has an unexpected neighbor chip type. Data field: expected neighbor chip type | (actual neighbor chip type << 32)')
hpevtCelToCelLnkHasUnxpctNgbrChpType = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10406)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCelToCelLnkHasUnxpctNgbrChpType.setDescription('A Cell-Cell link has an unexpected neighbor chip type. Data field: expected neighbor chip type | (actual neighbor chip type << 32)')
hpevtCelPrtPairNotExstGrphDat = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10407)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCelPrtPairNotExstGrphDat.setDescription('The cell/port pair does not exist in the Arches Fabric expected graph data. Data field: CC port | (cellNum << 32)')
hpevtCelToCelLnkConnUnxpctNgbrPrt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10408)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCelToCelLnkConnUnxpctNgbrPrt.setDescription('A Cell-Cell link is connected to an unexpected neighbor port. Data field: expected neighbor port | (actual neighbor port << 32)')
hpevtCelToCelLnkConnUnxpctCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10409)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCelToCelLnkConnUnxpctCel.setDescription('A Cell-Cell link is connected to an unexpected cell. Data field: expected neighbor ID | (actual neighbor ID << 16) | (target cell << 32) | (local cell << 48)')
hpevtEFIDrvrFailLoad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10412)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEFIDrvrFailLoad.setDescription('An EFI Driver may be corrupt.')
hpevtVmRetErrNonCohTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10413)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVmRetErrNonCohTbl.setDescription('VM_FindAllRoutes returned an unexpected error during Non-Coherent table setup. Data field: (return value) | (source cell << 32) | (target cell << 48)')
hpevtNctTblWrtGlobLnkSelNonCohFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10414)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNctTblWrtGlobLnkSelNonCohFail.setDescription('In SetupNCTable, a write to the GLOBAL_LINK_SEL_NONCOH CSR failed. Data field: (data written to CSR) | (actual CSR data read << 32)')
hpevtNctTblFailArfPhs3 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10415)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNctTblFailArfPhs3.setDescription('SetupNCTable failed in ArfPhase3. Data field: cell set passed in to SetupNCTable')
hpevtPostRndevzFailPrepBckToBckSys = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10427)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPostRndevzFailPrepBckToBckSys.setDescription('A failure occurred while prepping a back-to-back system for post-rendezvous Arches Fabric setup. Data field: return value from Phase4BackToBackPrep')
hpevtArfPhs4UnablSetNonCohLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10429)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArfPhs4UnablSetNonCohLnk.setDescription('ArfPhase4 was unable to set up the Non-Coherent link select to at least one cell in its alive/gsm sharing set. Data field: bitmap of unreachable cells')
hpevtUnablSetNonCohRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10431)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablSetNonCohRout.setDescription('Unable to set the Non-Coherent route. Data field: (sourceCell << 32) | (cell set passed in to SetupNCTable)')
hpevtUnableSetCohRoutCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10432)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnableSetCohRoutCel.setDescription('Unable to setup the Coherent route table for a cell in our partition. Data field: (sourceCell << 32) | (cell set passed in to SetupCohTable)')
hpevtErrWrtXbcRoutTblEnblMskCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10435)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtXbcRoutTblEnblMskCsr.setDescription('Error writing the XBC ROUTE_TABLE_ENABLE_MASK CSR. Data field: (route set to disable) | (xbcNum << 32) | (xbc port << 48)')
hpevtVertxRetUnxpctErrNonCohTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10436)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVertxRetUnxpctErrNonCohTbl.setDescription('The Arches Fabric vertex module returned an unexpected error during Non-Coherent table setup. Data field: (return value) | (sourceCell << 32) | (dest cell << 48)')
hpevtWrtSkyGlobLnkSelCohFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10439)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWrtSkyGlobLnkSelCohFail.setDescription('A write to a Skyline Global LINK_SEL_COHx CSR failed. Data field: cell number of the Skyline that failed, bits [7:0]. Other bits unused')
hpevtUnablWrtXbcPrtCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10475)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablWrtXbcPrtCsr.setDescription('Unable to write the XBC port scratch CSR with the routing state. Data field: (routing state) | (xbcNum << 32) | (portNum << 48)')
hpevtSysFwUnAccesComplxProf = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10481)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwUnAccesComplxProf.setDescription("Couldn't get the configured set during Fabric Init")
hpevtSysFwDetctErrFabInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10482)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwDetctErrFabInit.setDescription('Error while running the Arches Fabric API part of Fabric Init.')
hpevtSysFwDetctFailFabInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10483)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwDetctFailFabInit.setDescription('Failure while running the Fabric API part of Fabric Init.')
hpevtSysFwDetctErrFabOptimz = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10487)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwDetctErrFabOptimz.setDescription('An error was encountered while running the Fabric API to optimize the fabric.')
hpevtInPwrUPSFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10489)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInPwrUPSFail.setDescription('Input power to the specified UPS has failed.')
hpevtUpsRestored = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10490)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUpsRestored.setDescription('Input power to the specified UPS has been restored.')
hpevtUpsExhausted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10495)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUpsExhausted.setDescription('The system is being powered down as UPS power is exhausted.')
hpevtSALFailRedzvsProcs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10509)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSALFailRedzvsProcs.setDescription('During SAL Machine Check handling, SAL fail to round up all the processor entering SAL Machine check handler.')
hpevtSALFailClrCECLog = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10510)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSALFailClrCECLog.setDescription('Sal failed to clear the CEC logs during Machine check handling. The data field return an ASCII name of the CEC that failed to clear.')
hpevtSysFwUnAccesXBCSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10516)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwUnAccesXBCSemphr.setDescription('An error occurred while getting the XBC semaphore.')
hpevtSysFwDetctErrRelXBCGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10518)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwDetctErrRelXBCGlobSemphr.setDescription('An error occurred while releasing the XBC Global Semaphore.')
hpevtSysFwDetctErrOwnXBCGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10519)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwDetctErrOwnXBCGlobSemphr.setDescription('An error occurred while checking the owner of the XBC Global Semaphore.')
hpevtErrFormXbcSemphrAddr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10520)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrFormXbcSemphrAddr.setDescription('An error occurred while forming the XBC semaphore address. Data Field: (xbc << 32) | (cell << 56)')
hpevtErrRdXbcGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10521)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRdXbcGlobSemphr.setDescription('Error reading the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailGetXbcGlobSemphrAddr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10523)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailGetXbcGlobSemphrAddr.setDescription('Failure to get the XBC Global Semaphore address. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailWrtXbcGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10524)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtXbcGlobSemphr.setDescription('Failed to write the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailRdXbcGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10528)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRdXbcGlobSemphr.setDescription('Failed to read the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailGetAddrXbcGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10529)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailGetAddrXbcGlobSemphr.setDescription('Failed to get the address of the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailWrtXbcGlobSemphrAfrRls = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10530)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtXbcGlobSemphrAfrRls.setDescription('Failed to write the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFailRelXbcGlobSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10532)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRelXbcGlobSemphr.setDescription('Failed to release the XBC Global Semaphore. Data Field: (cell num << 56) | (xbc << 32)')
hpevtFabPhsExeInvlOrdr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10534)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabPhsExeInvlOrdr.setDescription('Fabric phases have been executed in an invalid order')
hpevtFabPhsExeInvlOrdrDatExpctPhs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10535)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabPhsExeInvlOrdrDatExpctPhs.setDescription('Fabric phases have been executed in an invalid order. Data field indicates the expected phase.')
hpevtFailGetAddrXbcToXbcLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10558)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailGetAddrXbcToXbcLnk.setDescription('Failed to get an address when opening XBC to XBC links. Data field is return value from GetAlbAddrBlk function. Internal debug only.')
hpevtFailOpnFabLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10559)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailOpnFabLnk.setDescription('Failed to open a fabric link. Data field: [31:0] - error status from OpenFabricLink [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrWrtXbcRetRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10560)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtXbcRetRout.setDescription('Error when writing the XBC return route. Data field: [31:0] - error status from WriteRouteReg [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrEnblXbcRetRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10561)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrEnblXbcRetRout.setDescription('Error enabling the XBC return route. Data field: [31:0] - error status from WriteRouteEnable [39:32] - XBC ID [51:44] - XBC port number')
hpevtFailDisprsRoutAcrssLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10564)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailDisprsRoutAcrssLnk.setDescription('failed to disperse the routes across links. Data field: [31:0] - error status from GetDispersedOutboundPort [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrSetXbcToXbcLnkRoutX = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10565)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrSetXbcToXbcLnkRoutX.setDescription('Error setting up XBC-XBC link for routing across it. Data field: [31:0] - error status from SetupXbcToXbcLinks [39:32] - XBC ID [51:44] - XBC port number ')
hpevtErrRoutRemtside = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10566)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRoutRemtside.setDescription('Error while routing the remote side of a route. Data field: [31:0] - error status from RouteRemoteXbcPort [39:32] - XBC ID [51:44] - XBC port number [59:52] - Destination cell number:')
hpevtErrGetAddrRoutRemtXbc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10567)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrGetAddrRoutRemtXbc.setDescription('Error getting address while routing the remote XBC. Data field: [31:0] - error status from GetAlbAddrBlk [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrGetNgbrInfo = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10568)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrGetNgbrInfo.setDescription('Error getting the neighbor info. Data field: [31:0] - error status from AlbGetNeighborInfo [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrFindShrtRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10569)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrFindShrtRout.setDescription('Error finding the shortest route. Most likely a firmware error or data corruption. Data field: [31:0] - error status from VM_FindShortestRoute [39:32] - Destination XBC ID [59:52] - Destination Cell number')
hpevtErrWrtRemtXbcRoutReg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10570)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtRemtXbcRoutReg.setDescription('error writing the remote XBC routing register. Data field: [31:0] - error status from WriteRouteReg [39:32] - XBC ID [51:44] - XBC port number [59:52] - Destination cell number')
hpevtErrEnblRoutRemtXbc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10571)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrEnblRoutRemtXbc.setDescription('error enabling the routes on the remote XBC. Data field: [31:0] - error status from WriteRouteEnable [39:32] - XBC ID [51:44] - XBC port number [59:52] - Destination cell number')
hpevtErrWrtRoutRegLocXbc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10572)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtRoutRegLocXbc.setDescription('Error writing the routing register on the local XBC. Data field: [31:0] - error status from WriteRouteReg [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrWrtLocXbcRoutRegRchRemtCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10573)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtLocXbcRoutRegRchRemtCel.setDescription('Error writing the local XBC routing registers to reach a remote cell. Data field: [31:0] - error status from WriteRouteReg [39:32] - XBC ID [51:44] - XBC port number')
hpevtErrEnblLocXbcRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10574)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrEnblLocXbcRout.setDescription('Error enabling the local XBC routes. Data field: [31:0] - error status from WriteRouteEnable [39:32] - XBC ID [51:44] - XBC port number')
hpevtSynGrphFailPhs4 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10617)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSynGrphFailPhs4.setDescription('SynchGraphs() failed during Arches Fabric Phase 4. Data field: return value from SynchGraphs()')
hpevtVmVertxFailSyncGrph = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10619)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVmVertxFailSyncGrph.setDescription('VM_DeleteVertex() failed in SynchGraphs(). Data field: (vertex id << 32) | (vertex type << 56) | (return value from VM_DeleteVertex())')
hpevtVmEdgFailFncSyncGrph = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10620)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVmEdgFailFncSyncGrph.setDescription('VM_DeleteEdge() failed in the Arches Fabric function SynchGraphs(). Data field:(vertex id1 << 32) | (vertex port1 << 48) | (vertex type1 << 56) | (vertex id2 << 0) | (vertex port2 << 16) | (vertex type2 << 24)')
hpevtUnexpctErrCalVertxMod = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10621)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpctErrCalVertxMod.setDescription('Unexpected error when calling an Arches Fabric vertex module function. Data field: return value from vertex module function')
hpevtUnexpctRetVertxModCopCelGrph = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10622)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpctRetVertxModCopCelGrph.setDescription("Unexpected return from an Arches Fabric vertex module function while copying a cell's graph. Data field: return value from vertex module function")
hpevtChecksumPdtFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10623)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtChecksumPdtFailed.setDescription('The checksum update for the PDT has failed.')
hpevtChecksumNvmBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10625)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtChecksumNvmBad.setDescription('The checksum in the memory area of NVM is bad. Memory NVM will be cleared.')
hpevtChecksumCalcFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10626)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtChecksumCalcFailed.setDescription('Checksum calculation failed.')
hpevtSalandBmcTokenBad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10628)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSalandBmcTokenBad.setDescription('The BMC copy and SAL copy of the token specified in the data field has been initialized from the default value for the token due to an IPMI error and SAL NVM error.')
hpevtBkPlaneCable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10629)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBkPlaneCable.setDescription('Detected incompatibility between the cell board and the I/O backplane and/or I/O backplane cables.')
hpevtFparUnusable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10698)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFparUnusable.setDescription('The fPar identified by the event detail will be unusable. Other events may preceded this event which will help to diagnose the failure. A possible cause is that the system exhausted unused NVRAM.')
hpevtFWoutOfNvram = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10702)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWoutOfNvram.setDescription('Firmware is out of NVRAM and cannot built the ILM memory slice device map')
hpevtNvramCPUCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10703)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramCPUCorrupt.setDescription('The NVRAM for the CPU map is corrupt and cannot be trusted. It appears that there are more CPUs in the map than the size of the map can hold.')
hpevtNvramIOCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10704)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramIOCorrupt.setDescription('The NVRAM for the IO device ownership map is corrupt and cannot be trusted. It appears that there are more IO devices in the map than the size of the map can hold.')
hpevtNvramLocMemCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10705)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNvramLocMemCorrupt.setDescription('The NVRAM for the cell local memory map is corrupt and cannot be trusted. It appears that there are more memory slices in the map than the size of the map can hold.')
hpevtFWInconsistExist = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10706)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWInconsistExist.setDescription('An internal firmware inconsistency exists or the server exhausted its internal resources and is unable to create an fPars EFI ownership variable for a CPU device in the partition. Either of these conditions is fatal.')
hpevtFWUnableCreatefParsIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10707)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWUnableCreatefParsIO.setDescription('An internal firmware inconsistency exists or the server exhausted its internal resources and is unable to create an fPars EFI ownership variable for an IO device in the partition. Either of these conditions is fatal.')
hpevtFWUnableCreatefParsCLM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10708)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWUnableCreatefParsCLM.setDescription('An internal firmware inconsistency exists or the server exhausted its internal resources and is unable to create an fPars EFI ownership variable for a CLM device in the partition. Either of these conditions is fatal.')
hpevtFWOutOfNvram = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10771)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWOutOfNvram.setDescription('Firmware has run out of NVRAM and cannot create the needed variable(s)')
hpevtFWLbaReconfigFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10772)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWLbaReconfigFail.setDescription("The call to the IOC firmware component method 'LbaReconfig' failed, probably a low-level hardware error. The fPar BSP is identified in bits 63..32 of the event detail, the fPar owning this CPU and LBA is identified in bits 31..16 and the number of the Rope is identified in bits 15..0.")
hpevtCpuModuleBadConfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10779)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuModuleBadConfig.setDescription('The CPU modules have been installed in an illegal configuration on the cell board.')
hpevtCpuInvalidTerminator = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10780)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuInvalidTerminator.setDescription('An invalid CPU terminator card is installed on the cell board. The data field indicates the physical location of the offending socket.')
hpevtInvocationSoftResetCode = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10793)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvocationSoftResetCode.setDescription('Invocation of the soft reset code from an interrupt or similar vector, or improper locking/releasing of semaphores.')
hpevtDataSm4SelfReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10794)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDataSm4SelfReset.setDescription('Data field is count of cpus held by the sm4 which issues the event (and is trying to reset itself). Indicates invocation of the SoftResetCpu code from an interrupt or similar vector where the processor was modifying critical resources, or improper locking/releasing of semaphores.')
hpevtfParsfailRelseResrce = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10795)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParsfailRelseResrce.setDescription('A reset of an fPar discovered that an fPar failed to release critical resources within a reasonable time.')
hpevtPFMManyErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10814)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMManyErrors.setDescription('Significant numbers of corrected memory errors have been detected on the memory subsystem')
hpevtPFMOverTempProc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10822)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMOverTempProc.setDescription('Over-temperature condition detected on a processor')
hpevtPFMCacheErrorProc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10823)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMCacheErrorProc.setDescription('Cache errors detected on a processor')
hpevtPFMCorrecErrorCache = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10824)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMCorrecErrorCache.setDescription('Corrected errors detected in the cache portion of the memory for a processor module')
hpevtPFMCorrErrSysBus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10825)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMCorrErrSysBus.setDescription('Corrected errors detected on the system bus for a processor module')
hpevtPFMCorrErrProcBus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10826)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMCorrErrProcBus.setDescription('Corrected errors detected on the processor bus for a processor module')
hpevtPFMErrTagMemProc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10827)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPFMErrTagMemProc.setDescription('Corrected errors detected in the tag portion of the memory for a processor module')
hpevtfParsNotEnableBoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10830)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParsNotEnableBoot.setDescription('fPars-mode EFI variable is set to enable fPars operation but no fPars are actually enabled to boot. So the server boots in hard partition mode.')
hpevtfParsNotRecveOwnShip = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10832)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParsNotRecveOwnShip.setDescription('An fPar was directed to reset using the ESIT DirectedfParResetAndMigrate() service but the target (recipient) fPar of the resources is in a state that cannot receive ownership of these resources.')
hpevtFWErrSetNvramVal = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10833)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWErrSetNvramVal.setDescription('Firmware error setting the NVRAM value of preferred-bsp for the vPars monitor. The partition will boot using the PD monarch, but the value of preferred-bsp may not match this CPU.')
hpevtUnablWrtXbcPrtRoutTblEnblMsk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10842)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablWrtXbcPrtRoutTblEnblMsk.setDescription('Unable to write to an XBC port ROUTE_TABLE_ENABLE_MASK CSR in Arches Fabric Phase3. Data field: (XBC port << 48) | (XBC ID < 32) | (route)')
hpevtProcessIntrptUnRecoverble = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10853)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtProcessIntrptUnRecoverble.setDescription('An unrecoverable processor interrupt occurred. IPF firmware owned the processor interrupt vector table (IVT) at the time of the interrupt.')
hpevtSBASetDevMaskFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10871)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSBASetDevMaskFail.setDescription('SBA call to LBA SetDeviceMask method fails.')
hpevtLBASlotDevScanErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10927)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtLBASlotDevScanErr.setDescription('LBA slot device scan error')
hpevtInadequateMemTofPar = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10936)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInadequateMemTofPar.setDescription('There is none (or inadequate) memory slice resource assigned to the fPar so it cannot boot its instance. The fPar will be disabled (enter a spinloop) because it cannot boot, or if in vPars mode will return control to the monitor.')
hpevtFailCollVertxInfo = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10937)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailCollVertxInfo.setDescription("Couldn't collect vertex information during Fabric Info call. Data Field: return status")
hpevtFailCollVertxFabInfoCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10938)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailCollVertxFabInfoCall.setDescription("Couldn't collect the vertices during the Fabric Info call. Data Field: number of vertices returned")
hpevtFailFndEdgeProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10939)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailFndEdgeProcCall.setDescription("Couldn't find all the edges during a procedure call. Data Field: return status")
hpevtFailFndEdgProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10940)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailFndEdgProcCall.setDescription("Couldn't find an appropriate number of edges during a procedure call. Data Field: the number of edges found")
hpevtManyEdgEncntProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10941)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtManyEdgEncntProcCall.setDescription('Too many edges were encountered during a procedure call. Data Field: link count')
hpevtFailGetAddrProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10943)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailGetAddrProcCall.setDescription('Failed to get an address during a procedure call. Data Field: return status')
hpevtUnexpctStatEncntProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10944)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpctStatEncntProcCall.setDescription('An unexpected state was encountered during a procedure call. Data Field: state returned')
hpevtUnablGetLnkHlthStatProcCall = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10945)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablGetLnkHlthStatProcCall.setDescription('Unable to get the link health state during a procedure call. Data Field: (cell num << 56) | (port << 44) | (xbc << 32)')
hpevtFabDatFailCrcChk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,10946)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabDatFailCrcChk.setDescription('The fabric data failed a CRC check. Data Field: (xbc port << 44 ) | (xbc << 32) | return status)')
hpevtVmCollVertcFailUnexpct = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11032)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVmCollVertcFailUnexpct.setDescription('VM_CollectVertices failed unexpectedly. Could possibly be a data corruption problem. Data field: (cell number << 56) | (return value from VM_CollectVertices)')
hpevtUnablGenAlbArfSetCsr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11033)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablGenAlbArfSetCsr.setDescription('Unable to generate an ALB address in Arches Fabric ArfSetDefaultCSRs() function. Data field:(cell number << 56) | (port number << 48) | (xbc ID < 32) | (return value)')
hpevtSetDefCsrFailUnexpct = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11034)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSetDefCsrFailUnexpct.setDescription('SetDefaultCSRs function failed unexpectedly. Arches Fabric was unable to set XBC CSRs to default values. Data field: return value from SetDefaultCSRs')
hpevtEncntErrRout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11038)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEncntErrRout.setDescription('A problem was encountered while routing which prevented an appropriate route from being chosen. Data Field: Destination Cell << 56 | XBC Port << 44 | XBC # << 32 | return status')
hpevtEncntErrRoutFab = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11039)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEncntErrRoutFab.setDescription('An error was encountered while routing the fabric. This error prevents an appropriate route from being selected. Data Field: Destination Cell << 56 | XBC Port << 44 | XBC # << 32 | return status')
hpevtErrEncntRoutFabPrvntRoutSel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11040)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrEncntRoutFabPrvntRoutSel.setDescription('An error was encountered while routing the fabric. This error prevents an appropriate route from being selected. Data Field: Destination Cell << 56 | XBC Port << 44 | XBC # << 32 | return status')
hpevtInvlPrtRetRoutXbcCcLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11041)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvlPrtRetRoutXbcCcLnk.setDescription('An invalid port number was returned when selecting a route for the XBC-CC link. Data Field: (destination cell 56) | (xbc port 44) | (xbc # 32) | port selected')
hpevtErrEncntRoutFabPrvntRoutSelSw = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11042)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrEncntRoutFabPrvntRoutSelSw.setDescription('An error was encountered while routing the fabric. This error prevents an appropriate route from being selected. Data Field: Destination Cell << 56 | XBC Port << 44 | XBC # << 32 | switch fabric')
hpevtSecndFlshNotProgrmValidImg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11052)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSecndFlshNotProgrmValidImg.setDescription('The second flash part is not programmed with a valid image')
hpevtSysBckPlnPwr1p2LDOFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11452)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr1p2LDOFault.setDescription('System backplane power has reported a 1.2v LDO fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr2p5LDOFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11454)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr2p5LDOFault.setDescription('System backplane power has reported a 2.5v LDO fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr3p3HseFault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11456)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr3p3HseFault.setDescription('System backplane power has reported a 3.3v house keeping power fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr12Fault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11459)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr12Fault.setDescription('System backplane power has reported a 12v power fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr3p3Fault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11461)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr3p3Fault.setDescription('System backplane power has reported a 3.3v power fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr1p5Fault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11463)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr1p5Fault.setDescription('System backplane power has reported a 1.5v power fault. The data field contains the physical location of the fault.')
hpevtSysBckPlnPwr2p5Fault = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11465)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysBckPlnPwr2p5Fault.setDescription('System backplane power has reported a 2.5v power fault. The data field contains the physical location of the fault.')
hpevtPwrRailPrvInsuffPwrToBckPln = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11467)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPwrRailPrvInsuffPwrToBckPln.setDescription('One or more power rails is providing insufficient power to the backplane.')
hpevtRcsNoProvClkBckPln = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11468)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRcsNoProvClkBckPln.setDescription('Clock fault for clocks supplied from the Redundant Clock Source (RCS) board to the system backplane. RCS board is no longer providing clocks to the backplane. The data field contains the physical location of the RCS.')
hpevtHsoFaultOrRemv = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11471)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHsoFaultOrRemv.setDescription('Clock fault for clocks supplied from the Hot Swap Oscillator (HSO) board to the system backplane. HSO has reported a fault or has been removed. The data field contains the physical location of the HSO.')
hpevtOpClkNoMtchRcsHso = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11478)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOpClkNoMtchRcsHso.setDescription('The operational clock frequencies do not match between the Redundant Clock Source (RCS) and the Hot Swap Oscillator (HSO). The data field contains the physical location of the HSO.')
hpevtClkMrgnBckPlnFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11479)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtClkMrgnBckPlnFail.setDescription('The clock margin of the system backplane failed.')
hpevtHsoNoRedund = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11481)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHsoNoRedund.setDescription('System backplane Hot Swap Oscillator (HSO) boards are NOT redundant.')
hpevtHsoInsuff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11482)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtHsoInsuff.setDescription('System backplane Hot Swap Oscillator (HSO) boards are insufficient.')
hpevtFailRdRcsHso = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11483)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRdRcsHso.setDescription('Failure reading Redundant Clock Source (RCS) or Hot Swap Oscillator HSO boards EEPROM. Data field contains the physical location of the device.')
hpevtFailWrtRcsHso = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11484)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtRcsHso.setDescription('Failure writing Redundant Clock Source (RCS) or Hot Swap Oscillator HSO boards EEPROM. Data field contains the physical location of the device')
hpevtFailRdRpm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11485)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRdRpm.setDescription('Failure reading the Reset and Power Monitors (RPM) EEPROM. Data field contains the physical location of the device.')
hpevtFailWrtRpm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11486)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtRpm.setDescription('Failure writing the Reset and Power Monitors (RPM) EEPROM. Datafield contains the physical location of the device')
hpevtFailRdOsp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11487)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRdOsp.setDescription('Failure reading the Onboard System Programmers (OSP) EEPROM. Datafield contains the physical location of the device')
hpevtFailWrtOsp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11488)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtOsp.setDescription('Failure writing the Onboard System Programmers (OSP) EEPROM. Datafield contains physical location of the device')
hpevtSbsFaultStrt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11489)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSbsFaultStrt.setDescription("Serial Bit Stream (SBS) fault on startup. An SBS fault results in the MOAB's not being configured correctly.")
hpevtFailRdIObckPlnLpm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11495)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailRdIObckPlnLpm.setDescription('Failure reading IO backplane LPM. Datafield contains the physical location of the device.')
hpevtFailWrtIOBckPlnLpm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11496)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailWrtIOBckPlnLpm.setDescription('Failure writing IO backplane LPM. Datafield contains physical location of device.')
hpevtSysSoftViolateWellBhaveRule = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11515)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysSoftViolateWellBhaveRule.setDescription("The system software violated one of the 'well-behavedness' rules of soft partitions and tried to call a firmware procedure within the firmware instance of a sibling. This is an access violation and firmware rejects the call")
hpevtAlbInitPrepUnablRdAlrecConfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11521)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAlbInitPrepUnablRdAlrecConfig.setDescription('AlbInitPrep was unable to read the ALREC_CONFIG CSR to determine whether the link is up or not. Data field: unused')
hpevtfParIsDisbleFrmBoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11529)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParIsDisbleFrmBoot.setDescription('The fPar whose ID is identified in the event detail is disabled from booting because it has no bootable, healthy CPU. It may not own any CPU or the CPUs it owns are Unhealthy (or deconfigured)')
hpevtfParNotInstantiateFW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11530)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParNotInstantiateFW.setDescription('Non-critical event announces that an fPar is enabled to boot but has inadequate memory resources to instantiate the firmware for the fPar. The configuration is modified to disable but not delete this fPar.')
hpevtfParNotHaveIOResrc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11531)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtfParNotHaveIOResrc.setDescription('The fPar has been enabled to boot, and contains at least one CPU and adequate memory but has not been given any IO resources. The soft partition (fPar) may therefore only boot as far as the EFI shell. It must be reconfigured and reset before it may boot an operating system.')
hpevtCPUsDeconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11537)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCPUsDeconfig.setDescription('All CPUs were scheduled to be deconfigured')
hpevtCPUsReconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11538)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCPUsReconfig.setDescription('All CPUs have been auto reconfigured')
hpevtIOBckPln33VFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11566)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPln33VFail.setDescription('IO Backplane 3.3V power fault')
hpevtBckPln5VFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11567)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBckPln5VFail.setDescription('IO Backplane 5.0V power fault')
hpevtIOBckPlnNeg12VFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11568)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPlnNeg12VFail.setDescription('IO Backplane -12V power fault')
hpevtIOBckPln12VFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11569)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPln12VFail.setDescription('IO Backplane +12V power fault')
hpevtIOBckPln15VTempFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11575)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPln15VTempFail.setDescription('IO Backplane 1.5V temperature fault')
hpevtIOBckPln33VTempFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11576)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPln33VTempFail.setDescription('IO Backplane 3.3V temperature fault')
hpevtIOBckPlnNeg12VTempFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11578)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPlnNeg12VTempFail.setDescription('IO Backplane -12.0V temperature fault')
hpevtIOBckPln12VTempFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11579)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPln12VTempFail.setDescription('IO Backplane +12.0V temperature fault')
hpevtLocCelUnablClrLnkOffBit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11580)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtLocCelUnablClrLnkOffBit.setDescription('The local cell was unable to clear the link_off bit on at least one CC-CC link. Data field: return value of Phase3BackToBackPrep()')
hpevtArfOlaPreRendezUnablRchCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11581)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArfOlaPreRendezUnablRchCel.setDescription('ArfOLAPreRendez() was unable to reach the added cell. Data field: bitmap of unreachable cells')
hpevtUnexpctErrSetNctTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11582)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnexpctErrSetNctTbl.setDescription('An unexpected error occurred in SetupNCTable(). Data field: return value from SetupNCTable()')
hpevtPhs4UnexpctFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11583)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPhs4UnexpctFail.setDescription('Phase4BackToBackPrep() unexpectedly failed. Data field: return value of Phase4BackToBackPrep()')
hpevtUnablSyncGrphCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11584)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablSyncGrphCell.setDescription('Data field: (master cell number << 56) | (bitmap of cells to synch)')
hpevtBitMapUnrchCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11585)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBitMapUnrchCel.setDescription('Data field: bitmap of unreachable cells.')
hpevtRetValNctCohTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11586)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRetValNctCohTbl.setDescription('Data field: return value from SetupNCTable() or SetupCohTable()')
hpevtArfRoutEnblRetErrLocCel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11597)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArfRoutEnblRetErrLocCel.setDescription('Data field: (local cell number << 56) | (bitmap of routes to enable)')
hpevtArfRoutDisRetErrOla = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11598)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArfRoutDisRetErrOla.setDescription('Data field: (bitmap of cells << 32) | (bitmap of routes to disable)')
hpevtArfRoutDisRetErrArfPhs4 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11599)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtArfRoutDisRetErrArfPhs4.setDescription('Data field: (bitmap of source cells << 32) | (bitmap of routes to disable)')
hpevtMemAlloctFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11603)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemAlloctFail.setDescription('Memory allocation failed. The data is the size of the memory block which could not be allocated.')
hpevtMemLockFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11604)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemLockFail.setDescription('Memory locking failed. The data is the size of the memory block which could not be locked.')
hpevtMinProcReqMoreThanAvail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11605)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMinProcReqMoreThanAvail.setDescription('The minimum number of processors required is more than the number available. The data is the number of available processors.')
hpevtVMNotHandlGuestOSPerf = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11607)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMNotHandlGuestOSPerf.setDescription('The guest operating system performed an operation which could not be handled by the virtual machine. The virtual machine could not continue running the guest so it stopped.')
hpevtKernlDrvFailLckMem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11696)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtKernlDrvFailLckMem.setDescription('Kernel driver failed to lock memory')
hpevtMMIOmapFndInfoInTble = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11700)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMMIOmapFndInfoInTble.setDescription('The code which initializes the MMIO/IOP map found that the table already contained information.')
hpevtAttmptAddPCImoreThanAllow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11702)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAttmptAddPCImoreThanAllow.setDescription('An attempt was made to add a PCI bus with a number greater than the maximum allowed.')
hpevtCPUConfigNotSupprt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11703)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCPUConfigNotSupprt.setDescription('The configured CPU generation is not supported')
hpevtISAUARTcreatWithoutDatStrct = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11705)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtISAUARTcreatWithoutDatStrct.setDescription('An ISA UART was created without a data structure. A PCI UART structure exists')
hpevtTCGETorIOCTLFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11706)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtTCGETorIOCTLFail.setDescription('A TCGETS or TCSETS IOCTL failed. The errno status will be in a subsequent event.')
hpevtStatCallPMANFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11707)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtStatCallPMANFail.setDescription('A stat call on the PMAN failed. The next event contains the failure errno.')
hpevtVMDrvNotOpen = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11708)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMDrvNotOpen.setDescription('The virtual machine driver could not be opened')
hpevtVMDrvNotCreatVM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11709)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMDrvNotCreatVM.setDescription('The virtual machine driver could not create a virtual machine')
hpevtNotAbleCreatNodeForComm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11710)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNotAbleCreatNodeForComm.setDescription('Could not create a file system node for communication between the vmm driver and the virtual machine. The next event contains the error from the Unix system call.')
hpevtVMNotOpen = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11711)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMNotOpen.setDescription('The vm device was created but cannot be opened')
hpevtVMDrvNotLoad = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11712)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMDrvNotLoad.setDescription('The virtual machine driver has not been loaded')
hpevtCreatThreadPMANFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11718)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCreatThreadPMANFail.setDescription('An attempt to create a thread on the PMAN has failed. The next event contains the Unix error number.')
hpevtVMDrvUnableCommVM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11719)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMDrvUnableCommVM.setDescription('VM Driver was unable to communicate with virtual machine')
hpevtConfigUnableToRd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11720)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtConfigUnableToRd.setDescription('The configuration file could not be read')
hpevtMemAllocFWTblFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11721)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMemAllocFWTblFail.setDescription('Memory allocation for a firmware table has failed. The data contains the name of the firmware table.')
hpevtDrvUnableBldMapTbl = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11723)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDrvUnableBldMapTbl.setDescription('Driver was unable to build map tables')
hpevtVMRebootFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11724)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMRebootFail.setDescription('Reboot failed. The virtual machine will exit.')
hpevtSetIntlCohTblRetErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11775)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSetIntlCohTblRetErr.setDescription('Data field: (cell set << 32) | (return value from SetupInitialCohTables())')
hpBootStblStoreFlashErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11780)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpBootStblStoreFlashErr.setDescription('Stable store read or write to flash failed.')
hpBootStblStoreNvMErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11783)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpBootStblStoreNvMErr.setDescription('Error reading or writing the stable store NVM area')
hpevtFWDetectilleglMemConfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11784)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFWDetectilleglMemConfig.setDescription('SFW has detected an illegal memory config using 4GB DIMMs. The system will be halted')
hpevtSFWFailAllotNVM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11788)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSFWFailAllotNVM.setDescription('SFW component NVM space is not big enough to store all it data. Check the ASCII data field to determine which component caused the error.')
hpevtSFWFailAllotSCRRAM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11789)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSFWFailAllotSCRRAM.setDescription('SFW component does not allocate enough SCR ram space to store it data.')
hpevtSetIntlCohRetErrArfPhs3 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11797)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSetIntlCohRetErrArfPhs3.setDescription('Data field: cell set [63:32], return value [31:0]')
hpevtErrWrtErrMskAlrecAlTran = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11807)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrWrtErrMskAlrecAlTran.setDescription('Data field: cell ID [63:56], port num [55:44], XBC ID [43:32]')
hpevtFwUnexpctIntrnlErrVertx = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11840)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwUnexpctIntrnlErrVertx.setDescription('Data field: vType1 [63:56] | vPort1 [55:48] | vId1 [47:32] | vType2 [31:24] | vPort2 [23:16] | vId2 [15:0]')
hpOsUnsupportedWmixedCpuRevs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11850)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpOsUnsupportedWmixedCpuRevs.setDescription('The OS being booted is not supported in a partition containing a mix of processor stepping revisions.')
hpevtFwUnexpctErrSetLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11851)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwUnexpctErrSetLnk.setDescription('Data field: vType1 [63:56] | vPort1 [55:48] | vId1 [47:32] | vType2 [31:24] | vPort2 [23:16] | vId2 [15:0]')
hpevtFwUnbleWrtSkyGlobLnkSelCoh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11863)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwUnbleWrtSkyGlobLnkSelCoh.setDescription('Data field: cell num [63:56] | link sel coh CSR (0 or 1) [0:0]')
hpOsBootDisabledWmixedCpuKeys = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11870)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpOsBootDisabledWmixedCpuKeys.setDescription('The OS suitable for booting in this mode does not support booting in the current configuration due to the existence of cpus of differing revisions.')
hpevtSysFwErrUpdtLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11885)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwErrUpdtLnk.setDescription('System firmware experienced an error while updating the link sel value. Data field indicates return status')
hpevtFabUnablGenSkyCsrAddr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11904)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFabUnablGenSkyCsrAddr.setDescription('Fabric was unable to generate a Skyline CSR address Data field: cell number [63:56] and return value from address function [31:0]')
hpevtFwUnablGenSkyCsrAdrr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11905)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFwUnablGenSkyCsrAdrr.setDescription('Firmware was unable to generate a Skyline CSR address. Data field: cell number [63:56] | return value [31:0]')
hpevtNoOSBootRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11932)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoOSBootRendez.setDescription('Target CPU receives wakeup interrupt to join the OS but the OS_BOOT_RENDEZ entry point is invalid or none-existent')
hpevtChksmFailOSBootRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11933)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtChksmFailOSBootRendez.setDescription('The entry point for OS_BOOT_RENDEZ exists, but fails the checksum test performed by firmware')
hpevtSysFWCallPalCopyInfoFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11960)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFWCallPalCopyInfoFail.setDescription('The System Firmware call to PAL_COPY_INFO failed.')
hpevtSysFWCallPalCopyPalFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11961)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFWCallPalCopyPalFail.setDescription('The System Firmware call to PAL_COPY_PAL failed.')
hpevtSysFWCallPalCacFlusFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11962)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFWCallPalCacFlusFail.setDescription('The System Firmware call to PAL_CACHE_FLUSH failed.')
hpevtCellNotInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11964)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellNotInit.setDescription('Cell on line add/delete is not initialized and cannot be used.')
hpevtFPARsCompBroke = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11966)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFPARsCompBroke.setDescription('In FPARs mode, cell on line add/delete depends on functionality in the FPARs component. This is either broken or missing.')
hpevtFailGetFPARsSemphr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11967)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFailGetFPARsSemphr.setDescription('Cell on line add/delete in FPARs mode failed to get the FPARs semaphore.')
hpevtMorThnOneProcCallCell = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11968)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMorThnOneProcCallCell.setDescription('More than one processor from an FPAR called into cell on line add/delete')
hpevtFPARsProcFailRendez = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11969)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFPARsProcFailRendez.setDescription('All FPARs processors failed to rendezvous during a cell on line add/delete op')
hpevtEncntUnexptErrOLA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11970)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtEncntUnexptErrOLA.setDescription('Unable to setup Skyline LINK_SEL_COHx CSRs on the running partition to the newly added cell. Data field: cell set [63:32] | return val [31:0]')
hpevtMCAOccPriorPreMCA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11971)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMCAOccPriorPreMCA.setDescription('This indicates an MCA happening before a previous MCA was not completely handled.')
hpevtMCAInitEvtProc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11972)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMCAInitEvtProc.setDescription('This indicates an MCA event happening before a previous INIT event was not completely processed.')
hpevtUnablFndBadEdg = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11974)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablFndBadEdg.setDescription('Firmware was unable to find a bad edge in an untraversable route. Data Field: (destCell << 56 | port num < 44 | xbc num << 32 | return status)')
hpevtUnknEntityDrwPwrBus = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,11989)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnknEntityDrwPwrBus.setDescription('Some entity that is not known to the firmware, is drawing power from the bus bars.')
hpevtSoftPartNotBoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12001)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSoftPartNotBoot.setDescription('Rebooting the partition to nPars because a soft partition could not be booted.')
hpevtUnablRotArndBrkLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12008)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablRotArndBrkLnk.setDescription('Firmware was unable to find a replacement route for the broken link. Data field contains: port << 44, chip id << 32, and number of attempts to find an alternate route')
hpevtUnablSetAPERLock = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12013)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablSetAPERLock.setDescription('Data field details the cell that failed to set its bit')
hpevtUncorrtMemEccErrOccr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12017)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUncorrtMemEccErrOccr.setDescription('Indicates that an uncorrectable ECC error has been encountered, and gives the physical location of the DIMM that had the error.')
hpevtErrRetrvCrssbarLnk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12025)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRetrvCrssbarLnk.setDescription('System firmware experienced an error while retrieving the expected neighbor fabric chip for distributing traffic over crossbarl inks. Data Field: (xbc port # << 44) | (xbc # << 32) | return status')
hpevtUnablRdCrssbar = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12028)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablRdCrssbar.setDescription('Could not read crossbar neighbor information during routing. Data Field: (xbc port << 44) | (xbc << 32) | error status')
hpevtUnablEstbshCrssbar = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12029)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnablEstbshCrssbar.setDescription('Could not establish route for local crossbar during route around routing. Data Field: (xbc port << 44) | (xbc << 32) | error status')
hpevtNoRoutLocCrssBar = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12047)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtNoRoutLocCrssBar.setDescription('An invalid TPM has been detected in the system and is being use. Security might be compromised. Data field unused.')
hpevtInvalidTPM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12048)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInvalidTPM.setDescription('Invalid or unsupported TPM detected in the system. TPM is disabled. Data filed unused')
hpevtTPMFailInit = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12049)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtTPMFailInit.setDescription('Firmware cannot initialize the TPM. TPM related security feature are disabled Data field unused')
hpevtCpuTempExceedHiThres = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12050)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCpuTempExceedHiThres.setDescription("A CPU module's temperature has exceed the high temperature threshold or a CPU power module fault has occurred. As a result of this event, the CPU has been inhibited. The Cell must be powered off then on using the MP's PE command before the CPU module will be powered again.")
hpevtSFWDetErrStablStorFlsh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12069)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSFWDetErrStablStorFlsh.setDescription('An error occurred while writing to stable store flash. Data field is unused.')
hpevtInlckOpenPCIPwr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12091)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtInlckOpenPCIPwr.setDescription('PCI interlock has been opened with PCI slot power on. The datafield can be decoded as follows (where byte 0 is the rightmost byte): byte offset 2:PCI slot number byte offset 5: IO Chassis number byte offset 6: IO Bay number byte offset 7: Cabinet number ')
hpevtFaltDetDropRegIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12101)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFaltDetDropRegIO.setDescription('The specified low dropout regulator on the IO backplane is reporting a fault. The specified power rail is reporting a fault. The number in the slot field of the physical location is the rail number that caused the fault. Rails are: 4 = LDO 2.5v for Esca 0, 5 = LDO 2.5v for Esca 1, 1.5v, 7 = Other backplane 2.5v, 8 = Other backplane 1.2v')
hpevtFaltDetDropRegManBckPlne = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12102)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFaltDetDropRegManBckPlne.setDescription('The specified low dropout regulator on the main backplane is reporting a fault. The number in the slot field of the physical location is the rail number that caused the fault. Rails are: 0 = SysBP xb0 1.5v, 1 = SysBp xb1 1.5v, 2 = SysBp switched 3.3v, 3 = SysBp LDO xb0 2.5v, 4 = SysBp xb1 LDO 2.5v, 5 = SysBp LDO 1.5v br0, 6 = SysBp LDO 1.5v br1')
hpevtFaltDetHotswpCoreIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12103)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFaltDetHotswpCoreIO.setDescription('The hot swap controller for the specified core IO is reporting fault.')
hpevtErrRetrvCrssbarChipNmbr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12109)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrRetrvCrssbarChipNmbr.setDescription('An error occurred while retrieving the crossbar chip number. Data Field: cell number << 56 | port number << 44 | return status')
hpevtCellNotCfgCLMMode = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12119)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellNotCfgCLMMode.setDescription('For most workloads, the system performance may be degraded if CLM mode is not enabled for all of the cells in a partition. Windows Server 2003 contains additional support to optimize for CLM systems, increasing the performance compared to an interleaved configuration. ')
hpevttDoblDramInvoke = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12120)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevttDoblDramInvoke.setDescription('Corrected memory errors have been detected. Double DRAM chip sparing events have been invoked.')
hpevtErrCrssbarCrctByHW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12121)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrCrssbarCrctByHW.setDescription('A error occurred in the crossbar controller and was corrected by the hardware.')
hpevtErrCrssChipBckPln = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12127)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrCrssChipBckPln.setDescription('A platform error was detected by the firmware/hardware, and corrected by using a spare channel. The error occurred between the crossbar chips on the backplane(s).')
hpevtErrCeLLIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12128)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrCeLLIO.setDescription('A platform error was detected by the firmware/hardware, and corrected by using a spare channel. The error occurred between the cell controller and the IO controller.')
hpevtMltPltFrmErrCellBckPln = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12129)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMltPltFrmErrCellBckPln.setDescription('Multiple platform errors were detected and corrected by the firmware/hardware. The errors occurred between the cell controller and the backplane.')
hpevtMultPltFrmErrCrssChpBckPln = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12130)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMultPltFrmErrCrssChpBckPln.setDescription('Multiple platform errors were detected and corrected by the firmware/hardware. The errors occurred between the crossbar chips on the backplane(s).')
hpevtMultPltFrmErrCeLLIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12131)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMultPltFrmErrCeLLIO.setDescription('Multiple platform errors were detected and corrected by the firmware/hardware. The errors occurred between the cell controller and the IO controller.')
hpevtServIDNotMatchCab = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12132)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtServIDNotMatchCab.setDescription('The server identification information does not match the cabinet type. The server will not power on until this condition is resolved.')
hpevtDupDimNumDetect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12135)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDupDimNumDetect.setDescription('Duplicate DIMM serial numbers have been detected. Data field gives physical location of DIMM. Check for other events specifying other DIMMs with same serial number.')
hpevtMPLostUPS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12143)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMPLostUPS.setDescription('The MP has lost communications with the UPS via SNMP over the LAN')
hpevtMPGainLanCommUPS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12144)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMPGainLanCommUPS.setDescription('The MP lan communications with the UPS have been restored.')
hpevtUnrecovProcIFAinterptInFW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12149)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnrecovProcIFAinterptInFW.setDescription('An unrecoverable processor interrupt occurred while in IPF firmware. The data value is the processor IFA.')
hpevtUnrecovProcISRinterptInFW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12150)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnrecovProcISRinterptInFW.setDescription('An unrecoverable processor interrupt occurred while in IPF firmware. The event data is the processor ISR.')
hpevtDblChipSpareInvoked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12153)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtDblChipSpareInvoked.setDescription('System firmware has detected and corrected memory errors. Double chip sparing has been invoked to help mitigate this condition.')
hpevtExtClkCablRemvFrmCPUCab = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12155)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtExtClkCablRemvFrmCPUCab.setDescription('External clock cable has been removed from the CPU cabinet. The data field contains the physical location of the cabinet.')
hpevtSysFabEncntLnkErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12156)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFabEncntLnkErr.setDescription('System Fabric encountered a link error after opening up the fabric link')
hpevtFatErrOnCelToFabPrt44I32I1 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12157)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFatErrOnCelToFabPrt44I32I1.setDescription("Fatal errors are present on a cell's link to the fabric. Data Field: (crossbar port << 44) | (crossbar << 32) | 1")
hpevtSysFWgetFabProblm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12159)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFWgetFabProblm.setDescription('System firmware encountered fabric problems. Data Field: (crossbar port << 44) | (crossbar << 32)')
hpevtFatErrCelLnkToFabPrt44I32 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12160)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFatErrCelLnkToFabPrt44I32.setDescription("Fatal errors are present on a cell's link to the fabric. Data Field: (crossbar port << 44) | (crossbar << 32)")
hpevtSysOSRecovFrmPCIErrL1 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12161)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysOSRecovFrmPCIErrL1.setDescription('A PCI error occurred, but the OS recovered.')
hpevtSysOSRecovFrmPCIErrL2 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12162)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysOSRecovFrmPCIErrL2.setDescription('A PCI error occurred, but the operating system recovered.')
hpevtSysOSRecovFrmPCIErrL5 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12163)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysOSRecovFrmPCIErrL5.setDescription('A PCI error occurred, but the operating system recovered')
hpevtReqPwrOnDenied = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12164)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtReqPwrOnDenied.setDescription('The request to power on, either via MP user interface, power button, or other, was denied by the Onboard Administrator.')
hpevtBladeFrcPWon = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12165)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBladeFrcPWon.setDescription('The blade has been forced to power-on, either via the MP user interface or the power button. The blade did not negotiate with the Onboard Administrator to insure that there was sufficient power for this action.')
hpevtMPNotRecvRespEnclMangr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12168)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMPNotRecvRespEnclMangr.setDescription('The MP has repeatedly tried to communicate with the Onboard Administrator and has not received any response')
hpevtIntrnlSwErr7193 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12193)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIntrnlSwErr7193.setDescription('This is an internal SW error')
hpevtIntrnlSwErr7194 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12194)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIntrnlSwErr7194.setDescription('This is an internal SFW error')
hpevtIntrnlSwErr7195 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12195)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIntrnlSwErr7195.setDescription('This is an internal SFW error')
hpevtIntrnlSwErr7196 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12196)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIntrnlSwErr7196.setDescription('This is an internal SFW error')
hpevtComplxProfNoMtch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12199)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtComplxProfNoMtch.setDescription('There are miscompares in the complex profiles between cells in a partition. Data field is unused, earlier events will give more detail.')
hpevtIODevMissCore = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12204)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIODevMissCore.setDescription('An I/O device is missing from the Core I/O. Internal peripherals may be not accessible.')
hpevtFparUnablNotiCPU = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12207)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFparUnablNotiCPU.setDescription("An fPar's GPE_EN bits are not set up to handle receiving a CPU migrate. This event is emitted 2 times, the Data field is different each time. 1. Data field: Address of GPE block 2. Data field: bits 31:0 Virtual GPE_EN register (lower byte) bits 63:32 Enable bits needed for successful migrate")
hpevtFparUnablNotiCpuIOSAPICredir = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12208)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFparUnablNotiCpuIOSAPICredir.setDescription('FSHWA was unable to notify the new owner of a CPU migrate. This event is emitted 2 times: 1. Data field: IOSAPIC Address 2. Data field: Virtual IOSAPIC SCI redir')
hpevtOSSetWtchDogTimerToTimeOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12210)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOSSetWtchDogTimerToTimeOut.setDescription('The operating system set the watchdog timer to time out if it was not reset within a specified time. It was not reset and has timed out. The management processor will now take the action specified when the timer was set.')
hpevtOSShtDwnDueMCA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12217)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOSShtDwnDueMCA.setDescription('An OS is shutting down due to an MCA (Machine Check Abort) or INIT.')
hpevtOSShtDwnDuePanic = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12218)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOSShtDwnDuePanic.setDescription('An OS is shutting down due to a panic.')
hpevtCLUFWIncomptblSysType = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12222)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCLUFWIncomptblSysType.setDescription('Following an in-the-box system type upgrade, or after a UGUY board was replaced, the CLU FW may not have been updated to an appropriate revision for the system type.')
hpevtOnlnIdentHWProb = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12227)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOnlnIdentHWProb.setDescription('Diagnostics running under the OS have detected a problem with the identified hardware.')
hpevtProcOvTemp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12228)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtProcOvTemp.setDescription("The processor temperature has exceeded normal limits. HP's Enhanced Thermal Management (ETM) feature has been employed to cool the processor. If the temperature problem persists, this will have an adverse impact on the performance of this processor. ")
hpevtErrChkFabBootStat = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12229)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtErrChkFabBootStat.setDescription('An error occurred while checking the fabricless boot state')
hpevtSysFwUnblClrLnkErrMsk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12230)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwUnblClrLnkErrMsk.setDescription('System firmware was unable to clear the link error masks')
hpevtSysFwNotDetLnkAdrr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12231)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwNotDetLnkAdrr.setDescription("System firmware could not determine a link's address")
hpevtSysFwUnblTurnBadLnkOff = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12232)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSysFwUnblTurnBadLnkOff.setDescription('System firmware was unable to turn a bad link off')
hpevtWindWtchDogXpired = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12244)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtWindWtchDogXpired.setDescription('The Wiindows watchdog timer has expired. The nPartition will either be reset or powered off. The data field contains the following information: byte 2 - cell slot number of the cell that generated the timeout event byte 3 - nPartition number (SX2000 superdome only) byte 4 - timeout action (0 = Reset, 1 = Power off) byte 7 - cabinet number ')
hpevtMPCtrlReprtMPBusCommFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12251)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMPCtrlReprtMPBusCommFail.setDescription('An MP Bus communications device is reporting a hardware revision that is known to cause MP Bus communications failures. The value in the data field indicates the physical location of the PM, CLU, or PDHC device that is failing.')
hpevt12VPCIFailonIOChass = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12255)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevt12VPCIFailonIOChass.setDescription('Main power at the PCI slot located on the IO Chassis has faulted.')
hpevtSFWDetFailOptmzFab = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12289)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtSFWDetFailOptmzFab.setDescription('A failure was encountered while running the Fabric API to optimize the fabric.')
hpevtCritFailCellOnline = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12291)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCritFailCellOnline.setDescription('A critical failure occurred during a cell online add or delete call.')
hpevtCellHasIncomptbleHwFW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12296)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellHasIncomptbleHwFW.setDescription('A cell being added is not compatible with the partition.')
hpevtCellFWnotMatchPartFW = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12297)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCellFWnotMatchPartFW.setDescription('The Firmware revision of the cell being added is different from the nPar.')
hpevtVMSDetctUnrecvrdEvnt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12319)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMSDetctUnrecvrdEvnt.setDescription('The OpenVMS system has failed and will reboot')
hpevtBadCellBrdOrBadProcBrd = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12324)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBadCellBrdOrBadProcBrd.setDescription('Bad cell board (on cellular system), or bad processor board (on non-cellular system).')
hpevtCPUDegradErrThirdCache = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12343)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCPUDegradErrThirdCache.setDescription('CPU performance degraded due to excessive errors in third level cache.')
hpevtROMFailAuthentc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12352)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtROMFailAuthentc.setDescription('The alternate ROM failed to authenticate. The current (primary) ROM will continue to be used')
hpevtAltrntROMUnblSwap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12354)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtAltrntROMUnblSwap.setDescription('The alternate ROM was successfully authenticated but the primary and alternate ROM could not be swapped. The current primary will still be used')
hpevtPciSlotErrDetect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12358)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPciSlotErrDetect.setDescription('PCI/PCIX/PCIe card/slot error detected during IO bus scan')
hpevtCCLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12394)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtCCLinkDown.setDescription('A CC to CC link failed to train in a 2-cell system. The partition can still boot, but with less redundancy and bandwidth. Data field: Cell number [63:56] Link number [32:0]')
hpevtUnrecovProcIntOccr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12395)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnrecovProcIntOccr.setDescription('An unrecoverable processor interrupt occurred while in IPF firmware. The event data is the processor status register. ')
hpevtElectrncKeyProblm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12399)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtElectrncKeyProblm.setDescription("The 'e-keying error' only occurs during the power-up if the SVB must be left off due to an electronic keying problem.")
hpevtBldeInstImproperLoc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12400)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBldeInstImproperLoc.setDescription("The 'location error' only occurs during power-up if the SVB must be left off due to being installed in an improper location in the enclosure (SVBs must be installed in specific positions relative to fans or other components.")
hpevtbldeInstViolateEnclre = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12401)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtbldeInstViolateEnclre.setDescription("The 'ccoling error' occurs during the power-up if the SVB must be left off due to insufficient cooling; more fans may be needed.")
hpevtsx2000FabRprtUnexpctErr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12403)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtsx2000FabRprtUnexpctErr.setDescription('Data field: return value from internal firmware function.')
hpevtOANotServPwrOnReqst = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12408)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOANotServPwrOnReqst.setDescription('OA is Busy: The Powe-on request cannot be completed.')
hpevtIOBckPlnReprtNonRedundncyPCIPwr = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12411)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtIOBckPlnReprtNonRedundncyPCIPwr.setDescription('The IO backplane in the specified cabinet is reporting a non-redundant PCI power condition.')
hpevtUSBStorAttch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12503)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUSBStorAttch.setDescription('This trap is sent when a USB storage device has been attached.')
hpevtUSBStorRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12504)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUSBStorRemoved.setDescription('This trap is sent when a attached USB storage device is removed.')
hpevtMigratSrcNotConnt = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12547)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMigratSrcNotConnt.setDescription('The migration source could not connect to the target.')
hpevtMigratFail = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12548)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMigratFail.setDescription('A migration has failed.')
hpevtMigratNotSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12550)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtMigratNotSuccess.setDescription('A migration was not successful. This contains the migration phase when it was terminated.')
hpevtVMNotAlloctMemForIO = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12551)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtVMNotAlloctMemForIO.setDescription('A virtual machine was not able to obtain memory for an I/O device.')
hpevtUnSupprtDimmInPartition = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12557)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtUnSupprtDimmInPartition.setDescription('HP PFM service has detected HP unsupported DIMM(s) on this partition.')
hpevtRuntimeCritShtDwn = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12560)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtRuntimeCritShtDwn.setDescription('OS run-time critical shutdown has occurred.')
hpevtPwrExptGreatrPwrBulk = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12586)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtPwrExptGreatrPwrBulk.setDescription('The amount of power expected to be drawn by the currently operating hardware is greater than the rating of the currently operating Bulk Power Supplies (BPS). It is very likely that partitions may be powered down with no further warning to eliminate the excess power load.')
hpevtBulkPwrReduncLost = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12589)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtBulkPwrReduncLost.setDescription('Bulk power supply (BPS) redundancy has been lost on one or more row(s) of power supplies in the complex. The further loss of a single BPS or an AC grid will most likely result in the shutdown of partitions using the chassis that lost redundancy.')
hpevtACReduncLost = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12591)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtACReduncLost.setDescription('AC redundancy has been lost on one or more row(s) of power supplies in the complex. The further loss of a single Bulk Power Supply (BPS) or the other AC grid will most likely result in the shutdown of partitions using the chassis that have lost redundancy.')
hpevtFanCoolNotRedunc = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12593)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFanCoolNotRedunc.setDescription('The fans that cool a region of the system are not redundant. If an additional fan fails in or is removed from this cooling domain, the partitions on this system will be automatically shut down to prevent an over temperature condition.')
hpevtFanInsufficientInCoolDomain = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12595)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFanInsufficientInCoolDomain.setDescription('An insufficient number of fans are working in a cooling domain to permit system operation. Running partitions will be shut down immediately to prevent system damage due to excessive heat. (If the situation is corrected immediately, it is possible to prevent system shutdown).')
hpevtOSNotUseAllProcs = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12627)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtOSNotUseAllProcs.setDescription('Operating system is not using all available processors for the current system.')
hpevtFMPUnexpctRstHasRcv = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 35) + (0,12863)).setObjects(("HPIPFTRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpevtFMPUnexpctRstHasRcv.setDescription('A Fabric Message Processor (FMP) has unexpectedly reset. The system has recovered from the problem.')
mibBuilder.exportSymbols("HPIPFTRAP-MIB", hpevtBootWakeCpuIsCpuDeconfigErr=hpevtBootWakeCpuIsCpuDeconfigErr, hpevtSysBckPlnPwr12Fault=hpevtSysBckPlnPwr12Fault, hpevtFabricCc2CcLinkDisableErr=hpevtFabricCc2CcLinkDisableErr, hpevtIoSbaFatalParityErr=hpevtIoSbaFatalParityErr, hpevtBootOutOfRangeVector=hpevtBootOutOfRangeVector, hpevtBootCheckCpuIsDeconfigErr=hpevtBootCheckCpuIsDeconfigErr, hpevtfParsNotRecveOwnShip=hpevtfParsNotRecveOwnShip, hpevtPartitionTimeoutReset=hpevtPartitionTimeoutReset, hpevtCelPrtPairNotFndGrphDat=hpevtCelPrtPairNotFndGrphDat, hpevtArflsXbcRotTravrsblCalBakToBak=hpevtArflsXbcRotTravrsblCalBakToBak, hpevtIOBckPln33VTempFail=hpevtIOBckPln33VTempFail, hpevtPdMemPdtInstallFail=hpevtPdMemPdtInstallFail, hpevtROMFailAuthentc=hpevtROMFailAuthentc, hpevtUtilitiesLedError=hpevtUtilitiesLedError, hpevtFabricCcPriModeRegRdData=hpevtFabricCcPriModeRegRdData, hpevtArfRoutEnblRetErrLocCel=hpevtArfRoutEnblRetErrLocCel, hpevtOSShtDwnDuePanic=hpevtOSShtDwnDuePanic, hpevtBootFindCoreCellConfigSelectErr=hpevtBootFindCoreCellConfigSelectErr, hpevtBootLostContextInt=hpevtBootLostContextInt, hpevtErrRetrvCrssbarLnk=hpevtErrRetrvCrssbarLnk, hpevtUnablGetLnkHlthStatProcCall=hpevtUnablGetLnkHlthStatProcCall, hpevtVMSDetctUnrecvrdEvnt=hpevtVMSDetctUnrecvrdEvnt, hpevtBootFplFailed=hpevtBootFplFailed, hpevtErrorUpdatingGroupBProfile=hpevtErrorUpdatingGroupBProfile, hpevtFwUnexpctErrSetLnk=hpevtFwUnexpctErrSetLnk, hpevtVmRetErrNonCohTbl=hpevtVmRetErrNonCohTbl, hpevtBulkPwrReduncLost=hpevtBulkPwrReduncLost, hpevtEfiSecInitWriteErr=hpevtEfiSecInitWriteErr, hpevtXinLinkInitFailed=hpevtXinLinkInitFailed, hpevtCpuInitNodeError=hpevtCpuInitNodeError, hpevtPciFatalRopeParityErr=hpevtPciFatalRopeParityErr, hpevtMcRegistryCheckFailed=hpevtMcRegistryCheckFailed, hpevtIoLbaInitErr=hpevtIoLbaInitErr, hpevtFabricWriteError=hpevtFabricWriteError, hpevtPowerOverload=hpevtPowerOverload, hpevt12VPCIFailonIOChass=hpevt12VPCIFailonIOChass, hpevtIofanFail=hpevtIofanFail, hpevtUSBStorRemoved=hpevtUSBStorRemoved, hpevtBootUnclearedInt=hpevtBootUnclearedInt, hpevtBootCellMonSelFailure=hpevtBootCellMonSelFailure, hpevtCelToCelLnkHasUnxpctNgbrChpType=hpevtCelToCelLnkHasUnxpctNgbrChpType, hpevtBootErrorReadingFirstBootToken=hpevtBootErrorReadingFirstBootToken, hpevtPdhFlashWriteEnableBitSetNowCleared=hpevtPdhFlashWriteEnableBitSetNowCleared, hpevtBootFindCoreCellFabriclessPdErr=hpevtBootFindCoreCellFabriclessPdErr, hpevtMemAlloctFail=hpevtMemAlloctFail, hpevtCsrTestFailure=hpevtCsrTestFailure, hpevtPdIncompatibleCpuSpeeds=hpevtPdIncompatibleCpuSpeeds, hpevtSettingProcTimeoutFail=hpevtSettingProcTimeoutFail, hpevtBootUnexpectedMca=hpevtBootUnexpectedMca, hpevtErrorPromotingCoreCell=hpevtErrorPromotingCoreCell, hpevtBootHaltCell=hpevtBootHaltCell, hpevtPdMemPdtAddrNotFound=hpevtPdMemPdtAddrNotFound, hpevtFrequencyProgramFailed=hpevtFrequencyProgramFailed, hpevtIodiscLbaClearError=hpevtIodiscLbaClearError, hpevtMemTestCodeInPage0Corrupt=hpevtMemTestCodeInPage0Corrupt, hpevtXBCprtFndErrTravsbl=hpevtXBCprtFndErrTravsbl, hpevtBckPln5VFail=hpevtBckPln5VFail, hpevtVMNotOpen=hpevtVMNotOpen, hpevtSysOSRecovFrmPCIErrL5=hpevtSysOSRecovFrmPCIErrL5, hpevtFailRdXbcGlobSemphr=hpevtFailRdXbcGlobSemphr, hpevtIoRopeResetError=hpevtIoRopeResetError, hpevtIoContextCorruptErr=hpevtIoContextCorruptErr, hpevtMemMbeInRank=hpevtMemMbeInRank, hpevtSetIntlCohTblRetErr=hpevtSetIntlCohTblRetErr, hpevtIllegalBpsid=hpevtIllegalBpsid, hpevtIodiscIolinkError=hpevtIodiscIolinkError, hpevtFabricIncFailedLinksRdError=hpevtFabricIncFailedLinksRdError, hpevtPFMCorrecErrorCache=hpevtPFMCorrecErrorCache, hpevtMemDimmSpdChecksum=hpevtMemDimmSpdChecksum, hpevtBootEfiRomBadSize=hpevtBootEfiRomBadSize, hpevtMemWarnSetCheckBypass=hpevtMemWarnSetCheckBypass, hpevtBootCpuConfigFail=hpevtBootCpuConfigFail, hpevtOsMcaNotRegistered=hpevtOsMcaNotRegistered, hpevtUnablRdXbcRotTblEnblMskCsr=hpevtUnablRdXbcRotTblEnblMskCsr, hpevtCPUsReconfig=hpevtCPUsReconfig, hpevtXbcPortFeError=hpevtXbcPortFeError, hpevtChecksumCalcFailed=hpevtChecksumCalcFailed, hpevtBootGetDefaultRdrsFailed=hpevtBootGetDefaultRdrsFailed, hpevtFabricErrsCsrLogClrRdSlicesErr=hpevtFabricErrsCsrLogClrRdSlicesErr, hpevtBootOlaCellIncompatible=hpevtBootOlaCellIncompatible, hpevtMemNoMemFound=hpevtMemNoMemFound, hpevtEfiTaccessServiceNotInit=hpevtEfiTaccessServiceNotInit, hpevtBootMoveSlavesDispatcherAddrErr=hpevtBootMoveSlavesDispatcherAddrErr, hpevtPdhcWatchdogTimedOut=hpevtPdhcWatchdogTimedOut, hpevtReqPwrOnDenied=hpevtReqPwrOnDenied, hpevtSysFWCallPalCacFlusFail=hpevtSysFWCallPalCacFlusFail, hpevtPFMErrTagMemProc=hpevtPFMErrTagMemProc, hpevtPdhInvalidRtcCleared=hpevtPdhInvalidRtcCleared, hpevtTPMFailInit=hpevtTPMFailInit, hpevtFabricCc2ccTraverseRmtXinRdErr=hpevtFabricCc2ccTraverseRmtXinRdErr, hpevtFabricXinWrErrMaskError=hpevtFabricXinWrErrMaskError, hpevtFabricAssertFabricCc=hpevtFabricAssertFabricCc, hpevtOptsBlockCksumError=hpevtOptsBlockCksumError, hpevtBootSlaveRendezHandlerFail=hpevtBootSlaveRendezHandlerFail, hpevtBootUnexpectedExtIntPostRedirTable=hpevtBootUnexpectedExtIntPostRedirTable, hpevtVMRebootFail=hpevtVMRebootFail, hpevtFailWrtRcsHso=hpevtFailWrtRcsHso, hpevtBootScrFail=hpevtBootScrFail, hpevtOnlnIdentHWProb=hpevtOnlnIdentHWProb, hpevtCpuModuleThermalert=hpevtCpuModuleThermalert, hpevtNvmFreelistCorrupt=hpevtNvmFreelistCorrupt, hpevtXbcUnexpectedState=hpevtXbcUnexpectedState, hpevtIoDiscSbaAttachserviceErr=hpevtIoDiscSbaAttachserviceErr, hpevtCellNotInit=hpevtCellNotInit, hpevtXbcPortLandmined=hpevtXbcPortLandmined, hpevtMpI2cCommError=hpevtMpI2cCommError, hpevtErrWrtLocXbcRoutRegRchRemtCel=hpevtErrWrtLocXbcRoutRegRchRemtCel, hpevtBootMoveSlavesFpSetErr=hpevtBootMoveSlavesFpSetErr, hpevtMemPdtNvmErr=hpevtMemPdtNvmErr, hpevtMemRankEntryNotFound=hpevtMemRankEntryNotFound, hpevtFabricDataRouteTraversableCc2CcErr=hpevtFabricDataRouteTraversableCc2CcErr, hpevtFabricRdFailedLinksError=hpevtFabricRdFailedLinksError, hpevtIoInvalidRopeBundle=hpevtIoInvalidRopeBundle, hpevtIoDiscEeCreatetreeErr=hpevtIoDiscEeCreatetreeErr, hpevtFWoutOfNvram=hpevtFWoutOfNvram, hpevtNvramIOCorrupt=hpevtNvramIOCorrupt, hpevtAlbInitPrepUnablRdAlrecConfig=hpevtAlbInitPrepUnablRdAlrecConfig, hpevtIOBckPln12VTempFail=hpevtIOBckPln12VTempFail, hpevtMMIOmapFndInfoInTble=hpevtMMIOmapFndInfoInTble, hpevtVMDrvNotCreatVM=hpevtVMDrvNotCreatVM, hpevtMemWarnLoadingOrderBypass=hpevtMemWarnLoadingOrderBypass, hpevtNvramBlockUnlocked=hpevtNvramBlockUnlocked, hpevtEncntErrRoutFab=hpevtEncntErrRoutFab, hpevtPdhcGetSm4Timeout=hpevtPdhcGetSm4Timeout, hpevtBootFindCoreCellCmplxProfileAcErr=hpevtBootFindCoreCellCmplxProfileAcErr, hpevtIoSbaFatalFunctionErr=hpevtIoSbaFatalFunctionErr, hpevtFabricGetNeighborMaxLinksBroken=hpevtFabricGetNeighborMaxLinksBroken, hpevtBootGetSleepTimeoutStructAddrErr=hpevtBootGetSleepTimeoutStructAddrErr, hpevtFabricPortNotXbc=hpevtFabricPortNotXbc, hpevtPdhcPdhNotAvailable=hpevtPdhcPdhNotAvailable, hpevtPmFirmwareUnknownErr=hpevtPmFirmwareUnknownErr, hpevtMcIncompleteCellSet=hpevtMcIncompleteCellSet, hpevtISAUARTcreatWithoutDatStrct=hpevtISAUARTcreatWithoutDatStrct, hpevtFabricXinRdErrMaskError=hpevtFabricXinRdErrMaskError, hpevtUndefinedSmcInterleaveErr=hpevtUndefinedSmcInterleaveErr, hpevtIodiscLbaLogError=hpevtIodiscLbaLogError, hpevtUnexpctErrCalVertxMod=hpevtUnexpctErrCalVertxMod, hpevtFaltDetDropRegManBckPlne=hpevtFaltDetDropRegManBckPlne, hpevtPAAFltMx2=hpevtPAAFltMx2, hpevtBootSetCellStateFabricFailure=hpevtBootSetCellStateFabricFailure, hpevtBpsWarnOt=hpevtBpsWarnOt, hpevtInvalidPortToTravsble=hpevtInvalidPortToTravsble, hpevtIoSbaSubsystemFailed=hpevtIoSbaSubsystemFailed, hpevtTreeNodeNotFound=hpevtTreeNodeNotFound, hpevtBootCheckCpuGetCountersErr=hpevtBootCheckCpuGetCountersErr, hpevtIoDiscEeInitializationErr=hpevtIoDiscEeInitializationErr, hpevtSysBckPlnPwr3p3HseFault=hpevtSysBckPlnPwr3p3HseFault, hpevtFabricRtgCompleteSm4RlsErr=hpevtFabricRtgCompleteSm4RlsErr, hpevtIodiscPciMmiomapError=hpevtIodiscPciMmiomapError, hpevtBootFruVersionError=hpevtBootFruVersionError, hpevtDcnfgCpuMca=hpevtDcnfgCpuMca, hpevtIoCheckLbaDeconfigErr=hpevtIoCheckLbaDeconfigErr, hpevtBootCpuOverClocked=hpevtBootCpuOverClocked, hpevtInvalidPiromData=hpevtInvalidPiromData, hpevtIodiscIoChassisPower=hpevtIodiscIoChassisPower, hpevtDataNotFndEdgLst=hpevtDataNotFndEdgLst, hpevtFabricRtgCompleteTopologyErr=hpevtFabricRtgCompleteTopologyErr, hpevtErrSetXbcToXbcLnkRoutX=hpevtErrSetXbcToXbcLnkRoutX, hpevtHbpbBoardPowerFault=hpevtHbpbBoardPowerFault, hpevtFanCoolNotRedunc=hpevtFanCoolNotRedunc, hpevtAbortStartIofan=hpevtAbortStartIofan, hpevtFailRdRcsHso=hpevtFailRdRcsHso, hpevtErmOutOfHeap=hpevtErmOutOfHeap, hpevtUnrecovProcISRinterptInFW=hpevtUnrecovProcISRinterptInFW, hpevtIoBusFatal=hpevtIoBusFatal, hpevtFabricISRInvalidBkp=hpevtFabricISRInvalidBkp, hpevtEfiSysidBmcWriteError=hpevtEfiSysidBmcWriteError, hpevtSysFwNotDetLnkAdrr=hpevtSysFwNotDetLnkAdrr, hpevtArfPhs4UnablSetNonCohLnk=hpevtArfPhs4UnablSetNonCohLnk, hpevtErrWrtRemtXbcRoutReg=hpevtErrWrtRemtXbcRoutReg, hpevtfParNotInstantiateFW=hpevtfParNotInstantiateFW, hpevtFailOpnFabLnk=hpevtFailOpnFabLnk, hpevtEfiSecInitVerifyErr=hpevtEfiSecInitVerifyErr, hpevtFabricRmtRoutePortTopoErr=hpevtFabricRmtRoutePortTopoErr, hpevtBootNvmWriteToBmcTokenFailure=hpevtBootNvmWriteToBmcTokenFailure, hpevtXBC_XBCPrtHavInvldChipCnn=hpevtXBC_XBCPrtHavInvldChipCnn, hpevtBkPlaneFlt=hpevtBkPlaneFlt, hpevtBootIvtOffset=hpevtBootIvtOffset, hpevtCompMatrixXsumError=hpevtCompMatrixXsumError, hpevtCellNotInAPd=hpevtCellNotInAPd, hpevtInvalidTPM=hpevtInvalidTPM, hpevtHiopbPowerFault=hpevtHiopbPowerFault, hpevtErrEnblXbcRetRout=hpevtErrEnblXbcRetRout, hpevtDblChipSpareInvoked=hpevtDblChipSpareInvoked, hpevtHalt=hpevtHalt, hpevtCPUConfigNotSupprt=hpevtCPUConfigNotSupprt, hpevtCpuTempExceedHiThres=hpevtCpuTempExceedHiThres, hpevtShutdownIofan=hpevtShutdownIofan, hpevtXBCtoXBCLnkDwn=hpevtXBCtoXBCLnkDwn, hpevtPdMemUpdateLocalCellFailed=hpevtPdMemUpdateLocalCellFailed, hpevtMcPalCantEscalateToBerr=hpevtMcPalCantEscalateToBerr, hpevtExpMcNotRegistered=hpevtExpMcNotRegistered, hpevtBootCpuBadCoreFixedRatio=hpevtBootCpuBadCoreFixedRatio, hpevtCmplxProfilIncoherent=hpevtCmplxProfilIncoherent, hpevtErrWrtRoutRegLocXbc=hpevtErrWrtRoutRegLocXbc, hpevtBootLdbStateBad=hpevtBootLdbStateBad, hpevtSalInitUnknownFail=hpevtSalInitUnknownFail, hpevtSFWDetErrStablStorFlsh=hpevtSFWDetErrStablStorFlsh, hpevtIoDevAdapterMiscFatalErr=hpevtIoDevAdapterMiscFatalErr, hpevtBootMoveCellMonarchsFpSetErr=hpevtBootMoveCellMonarchsFpSetErr, hpevtUnsupprtArflsCsrRouteTravsble=hpevtUnsupprtArflsCsrRouteTravsble, hpevtFabricCopyRdBackFailed=hpevtFabricCopyRdBackFailed, hpevtFabricAssertFabricInit=hpevtFabricAssertFabricInit, hpevtErrorProcFailed=hpevtErrorProcFailed, hpevtTreeNodeErrorSequencer=hpevtTreeNodeErrorSequencer, hpevtAbortPowerupOth=hpevtAbortPowerupOth, hpevtBlowrFail=hpevtBlowrFail, hpevtIoBridgeDepthExceeded=hpevtIoBridgeDepthExceeded, hpevtXbcSemaphoreTakeoverFailed=hpevtXbcSemaphoreTakeoverFailed, hpevtBootPlatConsoleDevFailed=hpevtBootPlatConsoleDevFailed, hpevtMemEnoughMemFailed=hpevtMemEnoughMemFailed, hpevtMemInterleaveCodeFailure=hpevtMemInterleaveCodeFailure, hpevtPdMemIntlvWaysMismatch=hpevtPdMemIntlvWaysMismatch, hpevtBootErrorWritingFirstBootToken=hpevtBootErrorWritingFirstBootToken, hpevtCpuFreqMismatch=hpevtCpuFreqMismatch, hpevtMemWarnUsingAltConfig=hpevtMemWarnUsingAltConfig, hpevtBadCpuModScratchCksum=hpevtBadCpuModScratchCksum, hpevtCelToCelLnkConnUnxpctNgbrPrt=hpevtCelToCelLnkConnUnxpctNgbrPrt, hpevtOSShtDwnDueMCA=hpevtOSShtDwnDueMCA, hpevtEepromInvalidCksm=hpevtEepromInvalidCksm, hpevtArchFabFndLocCelLnkNotConn=hpevtArchFabFndLocCelLnkNotConn, hpevtIoDiscSbaInitnodeErr=hpevtIoDiscSbaInitnodeErr, hpevtMstrMpFailed=hpevtMstrMpFailed, hpevtEfiBmcMfgModeInvalid=hpevtEfiBmcMfgModeInvalid, hpevtEncntUnexptErrOLA=hpevtEncntUnexptErrOLA, hpevtIntrnlSwErr7193=hpevtIntrnlSwErr7193, hpevtACReduncLost=hpevtACReduncLost, hpevtNctTblWrtGlobLnkSelNonCohFail=hpevtNctTblWrtGlobLnkSelNonCohFail, hpevtIoCheckRopeWidthErr=hpevtIoCheckRopeWidthErr, hpevtPalProcConfigIncompatible=hpevtPalProcConfigIncompatible, hpevtfParsfailRelseResrce=hpevtfParsfailRelseResrce, hpevtFatErrCelLnkToFabPrt44I32=hpevtFatErrCelLnkToFabPrt44I32, hpevtWinAgtLockedProperty=hpevtWinAgtLockedProperty, hpevtDynamicProfileSeqidInvalid=hpevtDynamicProfileSeqidInvalid, hpevtMemDimmLoadOrderErr=hpevtMemDimmLoadOrderErr, hpevtFabricClrLinkInitBitErrMaskRd=hpevtFabricClrLinkInitBitErrMaskRd, hpevtVMNotHandlGuestOSPerf=hpevtVMNotHandlGuestOSPerf, hpevtSbchEepromRdFail=hpevtSbchEepromRdFail, hpevtCpuExecuteCmdError=hpevtCpuExecuteCmdError, hpevtFWOutOfNvram=hpevtFWOutOfNvram, hpevtPdhcMponFailed=hpevtPdhcMponFailed, hpevtMPCtrlReprtMPBusCommFail=hpevtMPCtrlReprtMPBusCommFail, hpevtManyEdgEncntProcCall=hpevtManyEdgEncntProcCall, hpevtIoSlotStandbyPowerError=hpevtIoSlotStandbyPowerError, hpevtMemTestSummaryBitsInvalid=hpevtMemTestSummaryBitsInvalid, hpevtOsInitNotRegistered=hpevtOsInitNotRegistered, hpevtFailRdOsp=hpevtFailRdOsp, hpevtMemErrAddrNotInMbat=hpevtMemErrAddrNotInMbat, hpevtArfRoutDisRetErrArfPhs4=hpevtArfRoutDisRetErrArfPhs4, hpevtPwrExptGreatrPwrBulk=hpevtPwrExptGreatrPwrBulk, hpevtBootGetNumcoresFailure=hpevtBootGetNumcoresFailure, hpevtBootRtnFromSwCpuNotAsleep=hpevtBootRtnFromSwCpuNotAsleep, hpevtDataSm4SelfReset=hpevtDataSm4SelfReset, hpevtXbcPrtHasUnxpctNgbrChptype=hpevtXbcPrtHasUnxpctNgbrChptype)
mibBuilder.exportSymbols("HPIPFTRAP-MIB", hpevtMemErrLogFailedToClear=hpevtMemErrLogFailedToClear, hpevtEfiFwError=hpevtEfiFwError, hpevtMcPdCellMissedRendez=hpevtMcPdCellMissedRendez, hpevtUnexpctStatEncntProcCall=hpevtUnexpctStatEncntProcCall, hpevtPdhcFirmwareUnknownErr=hpevtPdhcFirmwareUnknownErr, hpevtBootOlaUpdateRtcFailedExistingCell=hpevtBootOlaUpdateRtcFailedExistingCell, hpevtUtilitiesParmListTooLarge=hpevtUtilitiesParmListTooLarge, hpevtIoErrengineError=hpevtIoErrengineError, hpevtSetDefCsrFailUnexpct=hpevtSetDefCsrFailUnexpct, hpevtBootPalProcFailure=hpevtBootPalProcFailure, hpevtMdtLmmioEntryNotFound=hpevtMdtLmmioEntryNotFound, hpevtCpuRestricted=hpevtCpuRestricted, hpevtMultPltFrmErrCrssChpBckPln=hpevtMultPltFrmErrCrssChpBckPln, hpevtBootPalBRomWarning=hpevtBootPalBRomWarning, hpevtWindWtchDogXpired=hpevtWindWtchDogXpired, hpevtFanInsufficientInCoolDomain=hpevtFanInsufficientInCoolDomain, hpevtXbcGetGlobalSm4Timeout=hpevtXbcGetGlobalSm4Timeout, hpevtFabricXinInitWriteErr=hpevtFabricXinInitWriteErr, hpevtPdhAcpihwNodeError=hpevtPdhAcpihwNodeError, hpevtFabricClrXbcIsLoCsrErrErr=hpevtFabricClrXbcIsLoCsrErrErr, hpevtMdtPageZeroBad=hpevtMdtPageZeroBad, hpevtfParIsDisbleFrmBoot=hpevtfParIsDisbleFrmBoot, hpevtFabricErrorsXbcClearRdGlblErr=hpevtFabricErrorsXbcClearRdGlblErr, hpevtFabricGetNeighborInfoError=hpevtFabricGetNeighborInfoError, hpevtEfiEsiTableUnsupportedEntryType=hpevtEfiEsiTableUnsupportedEntryType, hpevtAbortStartBlowr=hpevtAbortStartBlowr, nm=nm, hpevtBootFindCoreCellLclNotViable=hpevtBootFindCoreCellLclNotViable, hpevtErrCeLLIO=hpevtErrCeLLIO, hpevtBootIpmiEventFailed=hpevtBootIpmiEventFailed, hpevtCellNotInGlobalSet=hpevtCellNotInGlobalSet, hpevtFabricClrXbcRdLoLogStateErr=hpevtFabricClrXbcRdLoLogStateErr, hpevtAcDeletedA1=hpevtAcDeletedA1, hpIpf02Events=hpIpf02Events, hpevtMpSoftwareError=hpevtMpSoftwareError, hpevtSysFwDetctFailFabInit=hpevtSysFwDetctFailFabInit, hpevtVrmFlt=hpevtVrmFlt, hpevtAcDeleted=hpevtAcDeleted, hpevtMltPltFrmErrCellBckPln=hpevtMltPltFrmErrCellBckPln, hpevtPdhcI2cReadFailed=hpevtPdhcI2cReadFailed, hpevtIoRopeUnitFatal=hpevtIoRopeUnitFatal, hpevtNvramBlockTableCorrupt=hpevtNvramBlockTableCorrupt, hpevtCellNotCfgCLMMode=hpevtCellNotCfgCLMMode, hpevtCLUFWIncomptblSysType=hpevtCLUFWIncomptblSysType, hpevtFabricUnexpectedNChip=hpevtFabricUnexpectedNChip, hpevtIoSbaCorrDataParityErr=hpevtIoSbaCorrDataParityErr, hpevtBkPlanePwrBrickTempFlt=hpevtBkPlanePwrBrickTempFlt, hpevtNotIntegratingCell=hpevtNotIntegratingCell, hpevtDataErrEncount=hpevtDataErrEncount, hpevtSysFwDetctErrFabOptimz=hpevtSysFwDetctErrFabOptimz, hpevtBootGetPsrFailure=hpevtBootGetPsrFailure, hpevtBootGetCurrentRdrsFailed=hpevtBootGetCurrentRdrsFailed, hpevtEfiSysidBmcReadError=hpevtEfiSysidBmcReadError, hpevtVmEdgFailFncSyncGrph=hpevtVmEdgFailFncSyncGrph, hpevtFabricLinkCorErrTestFailure=hpevtFabricLinkCorErrTestFailure, hpevtOpClkNoMtchRcsHso=hpevtOpClkNoMtchRcsHso, hpevtSysBkpI2cRdFail=hpevtSysBkpI2cRdFail, hpevtBootPalARomWarning=hpevtBootPalARomWarning, hpevtBootSalExtractError=hpevtBootSalExtractError, hpevtWinAgtPredictMemFailWarning=hpevtWinAgtPredictMemFailWarning, hpevtXbcNeighborPortNotRoutable=hpevtXbcNeighborPortNotRoutable, hpevtIodiscSbaDiscoverError=hpevtIodiscSbaDiscoverError, hpevtMcPalSetFeatFail=hpevtMcPalSetFeatFail, hpevtIodiscPciInitbridgeError=hpevtIodiscPciInitbridgeError, hpevtPFMCacheErrorProc=hpevtPFMCacheErrorProc, hpevtDeadDillon=hpevtDeadDillon, hpevtFparUnablNotiCPU=hpevtFparUnablNotiCPU, hpevtErm=hpevtErm, hpevtCelToCelLnkConnUnxpctCel=hpevtCelToCelLnkConnUnxpctCel, hpevtMcCellRendezFailed=hpevtMcCellRendezFailed, hpevtOptsHdrCksumError=hpevtOptsHdrCksumError, hpevtMemPlatformInitFailure=hpevtMemPlatformInitFailure, hpevtFailDisprsRoutAcrssLnk=hpevtFailDisprsRoutAcrssLnk, hpevtSysFwDetctErrFabInit=hpevtSysFwDetctErrFabInit, hpevtFabricErrsCsrLogClrCopyBlk0Err=hpevtFabricErrsCsrLogClrCopyBlk0Err, hpevtNvramLocMemCorrupt=hpevtNvramLocMemCorrupt, hpevtEfiExitMfgModeNotInit=hpevtEfiExitMfgModeNotInit, hpevtCellVoltageMarginUnkn=hpevtCellVoltageMarginUnkn, hpevtNvramHeaderNotFound=hpevtNvramHeaderNotFound, hpevtSysFwUnblTurnBadLnkOff=hpevtSysFwUnblTurnBadLnkOff, hpevtInletOvertempHi=hpevtInletOvertempHi, hpevtClockFreqError=hpevtClockFreqError, hpevtPdMemNoMemoryDesc=hpevtPdMemNoMemoryDesc, hpevtAcDeletedA0=hpevtAcDeletedA0, hpevtFailDelBadEdge=hpevtFailDelBadEdge, hpOsUnsupportedWmixedCpuRevs=hpOsUnsupportedWmixedCpuRevs, hpevtMcRendezPalCantEscalate=hpevtMcRendezPalCantEscalate, hpevtInletOvertempLo=hpevtInletOvertempLo, hpevtFabricUnexpectedNPort=hpevtFabricUnexpectedNPort, hpevtWriteFruDataFail=hpevtWriteFruDataFail, hpevtPdMltplCoreCells=hpevtPdMltplCoreCells, hpevtEfiAssertError=hpevtEfiAssertError, hpevtHiopbLpmFltRdFail=hpevtHiopbLpmFltRdFail, hpevtIoPciSerr=hpevtIoPciSerr, hpevtXbcSlicesHwVersionDiffer=hpevtXbcSlicesHwVersionDiffer, hpevtMainBpLpmFlt=hpevtMainBpLpmFlt, hpevtPartitionProfileXsumError=hpevtPartitionProfileXsumError, hpevtEfiSalFreqBaseUnknown=hpevtEfiSalFreqBaseUnknown, hpevtUnblRdLnkCelFabCSR=hpevtUnblRdLnkCelFabCSR, hpevtCpuSupplementalTestFailed=hpevtCpuSupplementalTestFailed, hpevtRemoteCellStateUnknown=hpevtRemoteCellStateUnknown, hpevtBootReconfigAllCpus=hpevtBootReconfigAllCpus, hpevtMcRendezNoWakeup=hpevtMcRendezNoWakeup, hpevtPdhMiscRegFail=hpevtPdhMiscRegFail, hpevtfParNotHaveIOResrc=hpevtfParNotHaveIOResrc, hpevtIntrnlSwErr7195=hpevtIntrnlSwErr7195, hpevtSFWDetFailOptmzFab=hpevtSFWDetFailOptmzFab, hpevtBootBmcTokenDownloadError=hpevtBootBmcTokenDownloadError, hpevtIllegalBpsCfgOrPhaseFlt=hpevtIllegalBpsCfgOrPhaseFlt, hpevtFabricLinkInitIntermittentFailure=hpevtFabricLinkInitIntermittentFailure, hpevtFailRdRpm=hpevtFailRdRpm, hpevtfParsNotEnableBoot=hpevtfParsNotEnableBoot, hpevtFwUnablGenSkyCsrAdrr=hpevtFwUnablGenSkyCsrAdrr, hpevtMemEccSbeDataTstFailed=hpevtMemEccSbeDataTstFailed, hpevtMemParityErr=hpevtMemParityErr, hpevtPartitionVariableError=hpevtPartitionVariableError, hpevtXBCPortUnexpctNghbrChip=hpevtXBCPortUnexpctNghbrChip, hpevtSlaveConsoleSetupError=hpevtSlaveConsoleSetupError, hpevtLstNotRun=hpevtLstNotRun, hpevtIoDeviceMissing=hpevtIoDeviceMissing, hpevtConfigUnableToRd=hpevtConfigUnableToRd, hpevtBkPlanVrmRailFlt=hpevtBkPlanVrmRailFlt, hpevttDoblDramInvoke=hpevttDoblDramInvoke, hpevtBootCpuEarlyTestFail=hpevtBootCpuEarlyTestFail, hpevtHp_uxCrashdumpStarted=hpevtHp_uxCrashdumpStarted, hpevtKernlDrvFailLckMem=hpevtKernlDrvFailLckMem, hpevtXBCLnkNotConnCSRTravsbl=hpevtXBCLnkNotConnCSRTravsbl, hpevtXBCHaveUnexpctNghbrPrtConn=hpevtXBCHaveUnexpctNghbrPrtConn, hpevtMemUnexpectedMca=hpevtMemUnexpectedMca, hpevtMcRendezvousSlavesFail=hpevtMcRendezvousSlavesFail, hpevtIoIdentifyIoBpFailed=hpevtIoIdentifyIoBpFailed, hpevtIdCommandRequired=hpevtIdCommandRequired, hpevtFWLbaReconfigFail=hpevtFWLbaReconfigFail, hpevtEfiSecInvalidSysmode=hpevtEfiSecInvalidSysmode, hpevtIoUnsupportedLba=hpevtIoUnsupportedLba, hpevtEfiSecInitCloseErr=hpevtEfiSecInitCloseErr, hpIpfE0Events=hpIpfE0Events, hpevtDcnfgCpuProgReg=hpevtDcnfgCpuProgReg, hpevtIoLbaFatalParityErr=hpevtIoLbaFatalParityErr, hpevtIoHotPlugCtrlFailed=hpevtIoHotPlugCtrlFailed, hpevtIODevMissCore=hpevtIODevMissCore, hpevtHiobEepromRdFail=hpevtHiobEepromRdFail, hpevtIpmiBmc2hostMsgFailure=hpevtIpmiBmc2hostMsgFailure, hpevtMemExtFatalLoadOrdErr=hpevtMemExtFatalLoadOrdErr, hpevtBpsFailOt=hpevtBpsFailOt, hpevtFabricRtgCompleteSm4AccessErr=hpevtFabricRtgCompleteSm4AccessErr, hpevtFabricRmtRoutePortRdErr=hpevtFabricRmtRoutePortRdErr, hpevtRetValNctCohTbl=hpevtRetValNctCohTbl, hpevtDuplicateCabinet=hpevtDuplicateCabinet, hpevtInitInitiated=hpevtInitInitiated, hpevtMemBibRegFailure=hpevtMemBibRegFailure, hpevtCellLatchSensorBad=hpevtCellLatchSensorBad, hpevtPlatformCacheHashingError=hpevtPlatformCacheHashingError, hpevtSysSoftViolateWellBhaveRule=hpevtSysSoftViolateWellBhaveRule, hpevtBkPlaneVrmTempFlt=hpevtBkPlaneVrmTempFlt, hpevtCmplxProfilePdNumInvalid=hpevtCmplxProfilePdNumInvalid, hpevtMcRendezBadVectRange=hpevtMcRendezBadVectRange, hpevtFabricXinInitReadErr=hpevtFabricXinInitReadErr, hpevtBootExtIntNestLimitedExceeded=hpevtBootExtIntNestLimitedExceeded, hpevtIoLbaUncFunctionErr=hpevtIoLbaUncFunctionErr, hpevtBootVirtualizeDualCoreRegistersFail=hpevtBootVirtualizeDualCoreRegistersFail, hpevtXBCPortHaveUnxpctNghbrID=hpevtXBCPortHaveUnxpctNghbrID, hpevtBootOlaFailedUpdatePdAddrMap=hpevtBootOlaFailedUpdatePdAddrMap, hpevtBootIncompatiblePal=hpevtBootIncompatiblePal, hpevtVrmIoVltFlt=hpevtVrmIoVltFlt, hpevtCirRoutFndTstXbcCsr=hpevtCirRoutFndTstXbcCsr, hpevtUSBStorAttch=hpevtUSBStorAttch, hpevtMcIoClearFail=hpevtMcIoClearFail, hpevtRomCrcError=hpevtRomCrcError, hpevtBootSmbiosBuildError=hpevtBootSmbiosBuildError, hpevtNoViableCoreCellInPd=hpevtNoViableCoreCellInPd, hpevtBootResetCellStateFailure=hpevtBootResetCellStateFailure, hpevtIoDiscSbaUnknownErr=hpevtIoDiscSbaUnknownErr, hpevtCpuCmdStateInvalid=hpevtCpuCmdStateInvalid, hpevtBootMoveCellMonarchsCheckSlaveErr=hpevtBootMoveCellMonarchsCheckSlaveErr, hpevtEfiSecurityNotInit=hpevtEfiSecurityNotInit, hpevtMemMainMemFailed=hpevtMemMainMemFailed, hpevtIodiscSbaResetError=hpevtIodiscSbaResetError, hpevtIodiscPciLogError=hpevtIodiscPciLogError, hpevtFabricErrsCsrLogClrCopyBlk2Err=hpevtFabricErrsCsrLogClrCopyBlk2Err, hpevtUnablWrtXbcPrtRoutTblEnblMsk=hpevtUnablWrtXbcPrtRoutTblEnblMsk, hpevtBootReadPrefetchFailed=hpevtBootReadPrefetchFailed, hpevtUnrecovProcIFAinterptInFW=hpevtUnrecovProcIFAinterptInFW, hpevtCpuFanSlow=hpevtCpuFanSlow, hpevtCluUndefinedCase=hpevtCluUndefinedCase, hpevtBootCellVirtualizeSalFailure=hpevtBootCellVirtualizeSalFailure, hpevtBootPlatIntfcDevFailed=hpevtBootPlatIntfcDevFailed, hpevtNoMemSelfTest=hpevtNoMemSelfTest, hpevtSALFailRedzvsProcs=hpevtSALFailRedzvsProcs, hpevtFabricPortPairRdPstatusErr=hpevtFabricPortPairRdPstatusErr, hpevtFabricErrorsXbcClearWrErr=hpevtFabricErrorsXbcClearWrErr, hpevtLocCelUnablClrLnkOffBit=hpevtLocCelUnablClrLnkOffBit, hpevtFWDetectilleglMemConfig=hpevtFWDetectilleglMemConfig, hpevtMigratFail=hpevtMigratFail, hpevtBootSlpWakeCntrsStructAddrErr=hpevtBootSlpWakeCntrsStructAddrErr, hpevtFailWrtRpm=hpevtFailWrtRpm, hpevtSysFWCallPalCopyInfoFail=hpevtSysFWCallPalCopyInfoFail, hpevtErrCrssChipBckPln=hpevtErrCrssChipBckPln, hpevtBootCellVirtualizeEfiFailure=hpevtBootCellVirtualizeEfiFailure, hpevtBootNonPaCellDetected=hpevtBootNonPaCellDetected, hpevtIoPciUnmappingFailed=hpevtIoPciUnmappingFailed, hpevtDillonPdhNodeInitError=hpevtDillonPdhNodeInitError, hpevtMcLossOfLockstep=hpevtMcLossOfLockstep, hpevtEfiBreakpoint=hpevtEfiBreakpoint, hpevtFirmwareInitError=hpevtFirmwareInitError, hpevtSoftPartNotBoot=hpevtSoftPartNotBoot, hpevtPdhcSmbusReadFailed=hpevtPdhcSmbusReadFailed, hpevtMemTestStatusBitsInvalid=hpevtMemTestStatusBitsInvalid, hpevtSecndFlshNotProgrmValidImg=hpevtSecndFlshNotProgrmValidImg, hpevtIoLbaCorrTimeoutErr=hpevtIoLbaCorrTimeoutErr, hpevtFabricXinInitDisableWrError=hpevtFabricXinInitDisableWrError, hpevtMcPdMonarchTimeout=hpevtMcPdMonarchTimeout, hpevtBootCpuLoadingError=hpevtBootCpuLoadingError, hpevtDnaFanFail=hpevtDnaFanFail, hpevtPdErrorReachableSet=hpevtPdErrorReachableSet, hpevtBootUnexpectedIntPreRedirTable=hpevtBootUnexpectedIntPreRedirTable, hpevtSysBckPlnPwr2p5Fault=hpevtSysBckPlnPwr2p5Fault, hpevtBootUnknownFailure=hpevtBootUnknownFailure, hpevtCPUsDeconfig=hpevtCPUsDeconfig, hpevtXbcPortRouteAround=hpevtXbcPortRouteAround, hpevtSynGrphFailPhs4=hpevtSynGrphFailPhs4, hpevtBootMoveSlavesCheckSlaveErr=hpevtBootMoveSlavesCheckSlaveErr, hpevtXBCRdErrAlrecAlbIdCsr=hpevtXBCRdErrAlrecAlbIdCsr, hpevtBootMoveCellMonarchsStructAddrErr=hpevtBootMoveCellMonarchsStructAddrErr, hpevtFabricRtgCompleteRdFldLinksErr=hpevtFabricRtgCompleteRdFldLinksErr, hpevtBootErrInitGroupCPaFields=hpevtBootErrInitGroupCPaFields, hpevtFabricCc2ccTraverseLclXinRdErr=hpevtFabricCc2ccTraverseLclXinRdErr, hpevtSysFwDetctErrOwnXBCGlobSemphr=hpevtSysFwDetctErrOwnXBCGlobSemphr, hpevtXbcReadNeighborInfoError=hpevtXbcReadNeighborInfoError, hpevtFabricXinInitRetryReadErr=hpevtFabricXinInitRetryReadErr, hpevtFabricIncFailedLinksWrError=hpevtFabricIncFailedLinksWrError, hpevtMemSbeSeedingEnabled=hpevtMemSbeSeedingEnabled, hpevtMemLockFail=hpevtMemLockFail, hpevtXbcPortPresenceError=hpevtXbcPortPresenceError, hpevtBootReadZlcoFailed=hpevtBootReadZlcoFailed, hpevtBkPlaneCable=hpevtBkPlaneCable, hpevtFabricXinErrMaskUnknownBkp=hpevtFabricXinErrMaskUnknownBkp, hpevtMemPdtDisabledHalt=hpevtMemPdtDisabledHalt, hpevtBootNoPalBInFit=hpevtBootNoPalBInFit, hpevtPalSetProcFeaturesFailed=hpevtPalSetProcFeaturesFailed, hpevtPmCriticalDebug=hpevtPmCriticalDebug, hpevtVrmBkPlaneTempFlt=hpevtVrmBkPlaneTempFlt, hpevtBootEfiRomXsumError=hpevtBootEfiRomXsumError, hpevtPdCellLateForRendez=hpevtPdCellLateForRendez, hpevtFabricXinLinkAlreadyInit=hpevtFabricXinLinkAlreadyInit, hpevtCellPowerFault=hpevtCellPowerFault, hpevtBpsFailFanflt=hpevtBpsFailFanflt, hpevtBootMoveCellMonarchsFpSetAddrErr=hpevtBootMoveCellMonarchsFpSetAddrErr, hpevtFabricPortNotCc=hpevtFabricPortNotCc, hpevtChecksumPdtFailed=hpevtChecksumPdtFailed, hpevtMcTreeCheckFailed=hpevtMcTreeCheckFailed, hpevtPmI2cWriteFailed=hpevtPmI2cWriteFailed, hpevtXBCPrtUnxpctNgbrChip=hpevtXBCPrtUnxpctNgbrChip, hpevtErrGetNgbrInfo=hpevtErrGetNgbrInfo)
mibBuilder.exportSymbols("HPIPFTRAP-MIB", hpevtBootGetSpiromGetSiblingErr=hpevtBootGetSpiromGetSiblingErr, hpevtFailWrtXbcGlobSemphr=hpevtFailWrtXbcGlobSemphr, hpevtIoPciPowerOverloadErr=hpevtIoPciPowerOverloadErr, hpevtBootFinalRendezWatchdogFail=hpevtBootFinalRendezWatchdogFail, hpevtXinLinkInitError=hpevtXinLinkInitError, hpBootStblStoreFlashErr=hpBootStblStoreFlashErr, hpevtErrChkFabBootStat=hpevtErrChkFabBootStat, hpevtXucFanFail=hpevtXucFanFail, hpevtMediaFailure=hpevtMediaFailure, hpevtMcRendezNoMonarch=hpevtMcRendezNoMonarch, hpevtEfiSalStarttimerServiceNotInit=hpevtEfiSalStarttimerServiceNotInit, hpevtIodiscSbaInitnodeError=hpevtIodiscSbaInitnodeError, hpevtProcOvTemp=hpevtProcOvTemp, hpevtBadOsMcaChecksum=hpevtBadOsMcaChecksum, hpevtCpuOverclocked=hpevtCpuOverclocked, hpevtFabricInvalidXbcPortNum=hpevtFabricInvalidXbcPortNum, hpevtEfiRtIvtEsiTableErr=hpevtEfiRtIvtEsiTableErr, hpevtMcNoAccessToPd=hpevtMcNoAccessToPd, hpevtFabricRmtRoutePortBcastWrErr=hpevtFabricRmtRoutePortBcastWrErr, hpevtMPNotRecvRespEnclMangr=hpevtMPNotRecvRespEnclMangr, hpevtProfileWrongArchType=hpevtProfileWrongArchType, hpevtBootUpdateZlcoAndPrefetchFailed=hpevtBootUpdateZlcoAndPrefetchFailed, hpevtIOBckPlnNeg12VTempFail=hpevtIOBckPlnNeg12VTempFail, hpevtMemDmtEntryNotFound=hpevtMemDmtEntryNotFound, hpevtPdCellConfigError=hpevtPdCellConfigError, hpevtInvalidCabinetNumber=hpevtInvalidCabinetNumber, hpevtPFMManyErrors=hpevtPFMManyErrors, hpevtFpgaNodeInitError=hpevtFpgaNodeInitError, hpevtEfiPosseLibNotInit=hpevtEfiPosseLibNotInit, hpevtEfiSysEventAlreadyInit=hpevtEfiSysEventAlreadyInit, hpevtIodiscLbaPhaseError=hpevtIodiscLbaPhaseError, hpevtBootVirtualizeDualCoreInterposerFail=hpevtBootVirtualizeDualCoreInterposerFail, hpevtMemPdtTableFull=hpevtMemPdtTableFull, hpevtXinInitIntermittentFailure=hpevtXinInitIntermittentFailure, hpevtEfiRtIvtEsiQueryErr=hpevtEfiRtIvtEsiQueryErr, hpevtEfiEfiBreakpoint=hpevtEfiEfiBreakpoint, hpevtErrEnblRoutRemtXbc=hpevtErrEnblRoutRemtXbc, hpevtEncntErrRout=hpevtEncntErrRout, hpevtFabricClrXbcIsHiCsrErrErr=hpevtFabricClrXbcIsHiCsrErrErr, hpevtIodiscPciBusscanError=hpevtIodiscPciBusscanError, hpevtIodiscSbaLogError=hpevtIodiscSbaLogError, hpevtUnablRotArndBrkLnk=hpevtUnablRotArndBrkLnk, hpevtCellInfoError=hpevtCellInfoError, hpevtXBCToXBClnkFndFatErr=hpevtXBCToXBClnkFndFatErr, hpevtFabricLinkRendezDisableErr=hpevtFabricLinkRendezDisableErr, hpevtFabricCellRerouteFailure=hpevtFabricCellRerouteFailure, hpevtFPARsProcFailRendez=hpevtFPARsProcFailRendez, hpevtFabDatFailCrcChk=hpevtFabDatFailCrcChk, hpevtXbcPortOeError=hpevtXbcPortOeError, hpevtMemDimmSpdExtendedChecksum=hpevtMemDimmSpdExtendedChecksum, hp=hp, hpevtReachedMaxErrorLogs=hpevtReachedMaxErrorLogs, hpevtFabUnablGenSkyCsrAddr=hpevtFabUnablGenSkyCsrAddr, hpevtEfiSalHandoffVerMismatch=hpevtEfiSalHandoffVerMismatch, hpevtCpuRevisionMismatch=hpevtCpuRevisionMismatch, hpevtAcDeletedB1=hpevtAcDeletedB1, hpevtCellLatchOpen=hpevtCellLatchOpen, hpevtBootCellVirtualizeSalprocFailure=hpevtBootCellVirtualizeSalprocFailure, hpevtBootSelectingNewMonarch=hpevtBootSelectingNewMonarch, hpevtHsoNoRedund=hpevtHsoNoRedund, hpevtMPLostUPS=hpevtMPLostUPS, hpevtMcPdCellRendezFailed=hpevtMcPdCellRendezFailed, hpevtBootErrorReadingZlcoFlagInPdProfile=hpevtBootErrorReadingZlcoFlagInPdProfile, hpevtBootDeconfigCpuModulePair=hpevtBootDeconfigCpuModulePair, hpevtBootPdMonarchRtnFromSwSetFpErr=hpevtBootPdMonarchRtnFromSwSetFpErr, hpevtVMDrvNotLoad=hpevtVMDrvNotLoad, hpevtBootRtnFromSwCantGetCounters=hpevtBootRtnFromSwCantGetCounters, hpevtInitRendezvousSlavesFail=hpevtInitRendezvousSlavesFail, hpevtIoSbaClearErrFailed=hpevtIoSbaClearErrFailed, hpevtMigratSrcNotConnt=hpevtMigratSrcNotConnt, hpevtFabricCcPriModeRegRdStatus=hpevtFabricCcPriModeRegRdStatus, hpevtBootOlaCellDidNotReachRendezvous=hpevtBootOlaCellDidNotReachRendezvous, hpevtMemDimmUnsupported=hpevtMemDimmUnsupported, hpevtUnableSetCohRoutCel=hpevtUnableSetCohRoutCel, hpevtXbcReleaseSm4Timeout=hpevtXbcReleaseSm4Timeout, hpevtIodiscLbaConfigError=hpevtIodiscLbaConfigError, hpevtXbcSlicesInDiffLocation=hpevtXbcSlicesInDiffLocation, hpevtMemEccSbeEccTstFailed=hpevtMemEccSbeEccTstFailed, hpevtBkPlaneVrmVltFlt=hpevtBkPlaneVrmVltFlt, hpevtErrWrtXbcRoutTblEnblMskCsr=hpevtErrWrtXbcRoutTblEnblMskCsr, hpevtUnrecovProcIntOccr=hpevtUnrecovProcIntOccr, hpevtMemTestExcessMcBits=hpevtMemTestExcessMcBits, hpevtMemDimmSpdFatal=hpevtMemDimmSpdFatal, hpevtBootPlatScrBad=hpevtBootPlatScrBad, hpevtlotimeout=hpevtlotimeout, hpevtEfiBootIvtEsiTableErr=hpevtEfiBootIvtEsiTableErr, hpevtSFWFailAllotSCRRAM=hpevtSFWFailAllotSCRRAM, hpevtNoOSBootRendez=hpevtNoOSBootRendez, hpevtFatErrOnCelToFabPrt44I32I1=hpevtFatErrOnCelToFabPrt44I32I1, hpevtEfiHcdHostHung=hpevtEfiHcdHostHung, hpevtErrEncntRoutFabPrvntRoutSel=hpevtErrEncntRoutFabPrvntRoutSel, hpevtFabricRdPortStatePortInvalid=hpevtFabricRdPortStatePortInvalid, hpevtCCLinkDown=hpevtCCLinkDown, hpevtStableProfileXsumError=hpevtStableProfileXsumError, hpevtIoDiscEeInitErr=hpevtIoDiscEeInitErr, hpevtMdtBad=hpevtMdtBad, hpevtMultPltFrmErrCeLLIO=hpevtMultPltFrmErrCeLLIO, hpevtIoSbaFatalDataParityErr=hpevtIoSbaFatalDataParityErr, hpevtFabricWrFailedLinksTopoErr=hpevtFabricWrFailedLinksTopoErr, hpevtSalAbiFwError=hpevtSalAbiFwError, hpevtBootUnexpectedTrapPostRedirTable=hpevtBootUnexpectedTrapPostRedirTable, hpevtMemWarnSpdBypass=hpevtMemWarnSpdBypass, hpevtOptsDataCksumError=hpevtOptsDataCksumError, hpevtErrorObtainingSemaphore=hpevtErrorObtainingSemaphore, hpevtEfiSalCallbackAttempted=hpevtEfiSalCallbackAttempted, hpevtEfiSecSetPassLevelErr=hpevtEfiSecSetPassLevelErr, hpevtPdhcUnexpectedReset=hpevtPdhcUnexpectedReset, hpevtIodiscLbaWidthError=hpevtIodiscLbaWidthError, hpevtBootNvmFail=hpevtBootNvmFail, hpevtFabricNoServiceProviders=hpevtFabricNoServiceProviders, hpevtCmplxProfileInitFailed=hpevtCmplxProfileInitFailed, hpevtRtcTimeReg=hpevtRtcTimeReg, hpevtProcessIntrptUnRecoverble=hpevtProcessIntrptUnRecoverble, hpevtFailGetFPARsSemphr=hpevtFailGetFPARsSemphr, hpevtBootCpuFailed=hpevtBootCpuFailed, hpevtIOBckPln33VFail=hpevtIOBckPln33VFail, hpevtPdhIprNotClearedOnCell=hpevtPdhIprNotClearedOnCell, hpevtXbcRoutingStateTimeout=hpevtXbcRoutingStateTimeout, hpevtFabricCellRerouteRdXbcErr=hpevtFabricCellRerouteRdXbcErr, hpevtBldeInstImproperLoc=hpevtBldeInstImproperLoc, hpevtFabricISRRdFwdProgErr=hpevtFabricISRRdFwdProgErr, hpevtPalGetBusFeaturesFailed=hpevtPalGetBusFeaturesFailed, hpevtMemRefreshStartError=hpevtMemRefreshStartError, hpevtFabricColaLocalCcLinkNotInit=hpevtFabricColaLocalCcLinkNotInit, hpevtFailWrtIOBckPlnLpm=hpevtFailWrtIOBckPlnLpm, hpevtMCAInitEvtProc=hpevtMCAInitEvtProc, hpevtSBASetDevMaskFail=hpevtSBASetDevMaskFail, hpevtCommandMemBuf=hpevtCommandMemBuf, hpevtIoSlotPowerOnError=hpevtIoSlotPowerOnError, hpevtFailRelXbcGlobSemphr=hpevtFailRelXbcGlobSemphr, hpevtFabricInvalidXbcNum=hpevtFabricInvalidXbcNum, hpevtIoLbaUncParityErr=hpevtIoLbaUncParityErr, hpevtIodiscCableError=hpevtIodiscCableError, hpevtPwrRailPrvInsuffPwrToBckPln=hpevtPwrRailPrvInsuffPwrToBckPln, hpevtIoCheckLbaMissingErr=hpevtIoCheckLbaMissingErr, hpevtVgaBiosRelocFail=hpevtVgaBiosRelocFail, hpevtFabricISREarlyCopyRoutingErr=hpevtFabricISREarlyCopyRoutingErr, hpevtFailRdIObckPlnLpm=hpevtFailRdIObckPlnLpm, hpevtUblRdXBCrouteTbl=hpevtUblRdXBCrouteTbl, hpevtPwrBrickVltFlt=hpevtPwrBrickVltFlt, hpIpfEvtDetailStr=hpIpfEvtDetailStr, hpevtUnexpctErrSetNctTbl=hpevtUnexpctErrSetNctTbl, hpevtXbcPortSm4NotReleased=hpevtXbcPortSm4NotReleased, hpevtFabricXinErrOrderStatusClrFailed=hpevtFabricXinErrOrderStatusClrFailed, hpevtBootOlaCellStillAtBib=hpevtBootOlaCellStillAtBib, hpevtPdhcPdhArbiterTimeout=hpevtPdhcPdhArbiterTimeout, hpevtFabricErrorsXbcClrLoSevErr=hpevtFabricErrorsXbcClrLoSevErr, hpevtIoLbaMiscFatalErr=hpevtIoLbaMiscFatalErr, hpevtSbsFaultStrt=hpevtSbsFaultStrt, hpevtIoNotEnoughPowerError=hpevtIoNotEnoughPowerError, hpevtCpuModCompatMismatch=hpevtCpuModCompatMismatch, hpevtFabricInitCcLinkFailure=hpevtFabricInitCcLinkFailure, hpevtAbortPwrupBps=hpevtAbortPwrupBps, hpevtMinProcReqMoreThanAvail=hpevtMinProcReqMoreThanAvail, hpevtOptsNvmAllocError=hpevtOptsNvmAllocError, hpevtCellRedundtPowerFault=hpevtCellRedundtPowerFault, hpevtChecksumNvmBad=hpevtChecksumNvmBad, hpevtPdhBatteryLowWarning=hpevtPdhBatteryLowWarning, hpevtUnablSetAPERLock=hpevtUnablSetAPERLock, hpevtMemNoDimmsInstalled=hpevtMemNoDimmsInstalled, hpevtFMPUnexpctRstHasRcv=hpevtFMPUnexpctRstHasRcv, hpevtSysFwUnblClrLnkErrMsk=hpevtSysFwUnblClrLnkErrMsk, hpevtXbcLogClearErr=hpevtXbcLogClearErr, hpevtFabricXbcHiStateResetErr=hpevtFabricXbcHiStateResetErr, hpevtFailGetAddrXbcToXbcLnk=hpevtFailGetAddrXbcToXbcLnk, hpevtDnaFanSlow=hpevtDnaFanSlow, hpevtDynamicProfileXsumError=hpevtDynamicProfileXsumError, hpnsa=hpnsa, hpevtMemChipspareDeallocRank=hpevtMemChipspareDeallocRank, hpevtErrGetAddrRoutRemtXbc=hpevtErrGetAddrRoutRemtXbc, hpevtIoCheckXtraLbaFoundErr=hpevtIoCheckXtraLbaFoundErr, hpevtFabricDisableXinLinkReadErr=hpevtFabricDisableXinLinkReadErr, hpevtEfiDebugLevelTokenErr=hpevtEfiDebugLevelTokenErr, hpevtFPARsCompBroke=hpevtFPARsCompBroke, hpevtPdRemoteCsrReadError=hpevtPdRemoteCsrReadError, hpevtBootStopBootOverride=hpevtBootStopBootOverride, hpevtMcInitiated=hpevtMcInitiated, hpevtXbcPortSm4Error=hpevtXbcPortSm4Error, hpevtBpsFail48flt=hpevtBpsFail48flt, hpevtEfiHalt=hpevtEfiHalt, hpevtFabricXbcLoStateResetErr=hpevtFabricXbcLoStateResetErr, hpevtInadequateMemTofPar=hpevtInadequateMemTofPar, hpevtHiopbOvertemp=hpevtHiopbOvertemp, hpevtFabricCellRerouteNinfoErr=hpevtFabricCellRerouteNinfoErr, hpevtXbcPortError=hpevtXbcPortError, hpevtBootPalBNotExecuted=hpevtBootPalBNotExecuted, hpevtFabricRouteTraversableCc2CcErr=hpevtFabricRouteTraversableCc2CcErr, hpevtBootDualCoreInitFail=hpevtBootDualCoreInitFail, hpevtXbcLogSizeErr=hpevtXbcLogSizeErr, hpevtMcPalCantEscalateToBinit=hpevtMcPalCantEscalateToBinit, hpevtIoPcixcapSampleError=hpevtIoPcixcapSampleError, hpevtErrFormXbcSemphrAddr=hpevtErrFormXbcSemphrAddr, hpevtErrWrtXbcRetRout=hpevtErrWrtXbcRetRout, hpevtHp_uxDumpWriteError=hpevtHp_uxDumpWriteError, hpevtErrEncntRoutFabPrvntRoutSelSw=hpevtErrEncntRoutFabPrvntRoutSelSw, hpevtHsoInsuff=hpevtHsoInsuff, hpevtInletOvertempMid=hpevtInletOvertempMid, hpevtBootMoveSlavesSetTimeoutErr=hpevtBootMoveSlavesSetTimeoutErr, hpevtIOBckPln15VTempFail=hpevtIOBckPln15VTempFail, hpevtPdhCtrlrFwMismatch=hpevtPdhCtrlrFwMismatch, hpevtDcnfgCpuSelfTest=hpevtDcnfgCpuSelfTest, hpevtEfiConsoleDriverError=hpevtEfiConsoleDriverError, hpevtBootAccessCellArchErr=hpevtBootAccessCellArchErr, hpevtXbcRoutingErrorState=hpevtXbcRoutingErrorState, hpevtUguyEepromRdFail=hpevtUguyEepromRdFail, hpevtSettingFreqRatiosError=hpevtSettingFreqRatiosError, hpevtAttmptAddPCImoreThanAllow=hpevtAttmptAddPCImoreThanAllow, hpevtSysFwErrUpdtLnk=hpevtSysFwErrUpdtLnk, hpevtDcnfgCpuInReg=hpevtDcnfgCpuInReg, hpevtbldeInstViolateEnclre=hpevtbldeInstViolateEnclre, hpevtEfiGuidTooLarge=hpevtEfiGuidTooLarge, hpevtMemDimmFailed=hpevtMemDimmFailed, hpevtErrRdXbcGlobSemphr=hpevtErrRdXbcGlobSemphr, hpevtFabricWrFailedLinksWrError=hpevtFabricWrFailedLinksWrError, hpevtBootCheckCpu4CompletionErr=hpevtBootCheckCpu4CompletionErr, hpevtBootIncompatibleSlave=hpevtBootIncompatibleSlave, hpevtCpuInvalidTerminator=hpevtCpuInvalidTerminator, hpevtBootOlaUpdateRtcFailedOlaCell=hpevtBootOlaUpdateRtcFailedOlaCell, hpevtCabFanFail=hpevtCabFanFail, hpevtBootMonarchTimeout=hpevtBootMonarchTimeout, hpevtIoLbaClearErrFailed=hpevtIoLbaClearErrFailed, hpevtFabricIncFailedLinksHitLimit=hpevtFabricIncFailedLinksHitLimit, hpevtDuiNoConsole=hpevtDuiNoConsole, hpevtFwVirtualMappingError=hpevtFwVirtualMappingError, hpevtUtilCellSlotError=hpevtUtilCellSlotError, hpevtBootPalCopyPalError=hpevtBootPalCopyPalError, hpevtNvramCrcError=hpevtNvramCrcError, hpevtCellHwDegraded=hpevtCellHwDegraded, hpevtPalGetProcFeaturesFailed=hpevtPalGetProcFeaturesFailed, hpevtIodiscLbaPciconfigError=hpevtIodiscLbaPciconfigError, hpevtNvramAlloc=hpevtNvramAlloc, hpevtEfiNoIoPortSpaceRegionFound=hpevtEfiNoIoPortSpaceRegionFound, hpevtMemDimmQuadMismatch=hpevtMemDimmQuadMismatch, hpevtBpsNotRedundant=hpevtBpsNotRedundant, hpevtBootExtIntTaken=hpevtBootExtIntTaken, hpevtDuplicateCpuIds=hpevtDuplicateCpuIds, hpevtMemAllocFWTblFail=hpevtMemAllocFWTblFail, hpevtSysOSRecovFrmPCIErrL2=hpevtSysOSRecovFrmPCIErrL2, hpevtBadCellBrdOrBadProcBrd=hpevtBadCellBrdOrBadProcBrd, hpevtXbcPortNotLandmined=hpevtXbcPortNotLandmined, hpevtFabricCcToXbcError=hpevtFabricCcToXbcError, hpevtCpuTmpSensorSetupFail=hpevtCpuTmpSensorSetupFail, hpevtFailCollVertxFabInfoCall=hpevtFailCollVertxFabInfoCall, hpevtReconfigResetFail=hpevtReconfigResetFail, hpevtFabricReadMbeError=hpevtFabricReadMbeError, hpevtPciFatalDeviceError=hpevtPciFatalDeviceError, hpevtBootCellRmtCantFindViable=hpevtBootCellRmtCantFindViable, hpevtFailCollVertxInfo=hpevtFailCollVertxInfo, hpevtBootCpuInfoRomAccessError=hpevtBootCpuInfoRomAccessError, hpevtPhs4UnexpctFail=hpevtPhs4UnexpctFail, hpevtIoRopeFatal=hpevtIoRopeFatal, hpevtBpsOvervoltage=hpevtBpsOvervoltage, hpevtFWUnableCreatefParsIO=hpevtFWUnableCreatefParsIO, hpevtPltfrmStorageReadErr=hpevtPltfrmStorageReadErr)
mibBuilder.exportSymbols("HPIPFTRAP-MIB", hpevtFabricXinWrZeroErrMaskError=hpevtFabricXinWrZeroErrMaskError, hpevtBootEfiAllocateError=hpevtBootEfiAllocateError, hpevtBootEfiImageCorrupt=hpevtBootEfiImageCorrupt, hpevtEfiBootIvtEsiQueryErr=hpevtEfiBootIvtEsiQueryErr, hpevtBootSecondaryFitBad=hpevtBootSecondaryFitBad, hpevtIoDiscEeMallocErr=hpevtIoDiscEeMallocErr, hpevtMemDimmTypeTableFull=hpevtMemDimmTypeTableFull, hpevtCpuClockRatioMismatch=hpevtCpuClockRatioMismatch, hpevtDcnfgFsbInit=hpevtDcnfgFsbInit, hpevtHp_uxDumpStatus=hpevtHp_uxDumpStatus, hpevtCSRWriteUnsuccess=hpevtCSRWriteUnsuccess, hpevtIoSbaFatalMapErr=hpevtIoSbaFatalMapErr, hpevtFwError=hpevtFwError, hpevtHiopbVoltMrgnFail=hpevtHiopbVoltMrgnFail, hpevtClkMrgnBckPlnFail=hpevtClkMrgnBckPlnFail, hpevtMigratNotSuccess=hpevtMigratNotSuccess, hpevtDcnfgCpuParams=hpevtDcnfgCpuParams, hpevtSysFwUnAccesXBCSemphr=hpevtSysFwUnAccesXBCSemphr, hpevtBootOlaCellCantReachAliveCells=hpevtBootOlaCellCantReachAliveCells, hpevtMCAOccPriorPreMCA=hpevtMCAOccPriorPreMCA, hpevtFaltDetHotswpCoreIO=hpevtFaltDetHotswpCoreIO, hpevtDeadPdhHw=hpevtDeadPdhHw, hpevtXbcLinkTestError=hpevtXbcLinkTestError, hpevtSysBckPlnPwr3p3Fault=hpevtSysBckPlnPwr3p3Fault, hpevtMemDimmPairMismatch=hpevtMemDimmPairMismatch, hpevtFailFndEdgeProcCall=hpevtFailFndEdgeProcCall, hpevtSysFWgetFabProblm=hpevtSysFWgetFabProblm, hpevtDcnfgCpuDcache=hpevtDcnfgCpuDcache, hpevtAgtPredictMemFail=hpevtAgtPredictMemFail, hpevtXbcPrtErrRdAlrecAlbIDCsr=hpevtXbcPrtErrRdAlrecAlbIDCsr, hpevtArfRoutDisRetErrOla=hpevtArfRoutDisRetErrOla, hpevtCpuModuleBadConfig=hpevtCpuModuleBadConfig, hpevtBootOlaCellErrAccessCmplxProfile=hpevtBootOlaCellErrAccessCmplxProfile, hpevtMemIncompleteEchelon=hpevtMemIncompleteEchelon, hpevtDcnfgCpuDefValue=hpevtDcnfgCpuDefValue, hpevtUnablEstbshCrssbar=hpevtUnablEstbshCrssbar, hpevtBootWakeCpuGetCountersErr=hpevtBootWakeCpuGetCountersErr, hpevtMcRendezPalSetFeatFail=hpevtMcRendezPalSetFeatFail, hpevtBuildErrCellDevTree=hpevtBuildErrCellDevTree, hpevtFWInconsistExist=hpevtFWInconsistExist, hpevtIoPciPerr=hpevtIoPciPerr, hpevtBootSelFull=hpevtBootSelFull, hpevtShutdownBlowr=hpevtShutdownBlowr, hpevtBootSlaveNoFinalWakeupVector=hpevtBootSlaveNoFinalWakeupVector, hpevtMcCellsLostConnection=hpevtMcCellsLostConnection, hpevtFabricRmtRoutePortBadReroute=hpevtFabricRmtRoutePortBadReroute, hpevtBootEfiNvmFail=hpevtBootEfiNvmFail, hpevtFailWrtXbcGlobSemphrAfrRls=hpevtFailWrtXbcGlobSemphrAfrRls, hpevtUnablRdCrssbar=hpevtUnablRdCrssbar, hpevtFabricClrLinkInitBitErrMaskWr=hpevtFabricClrLinkInitBitErrMaskWr, hpevtBadOsInitChecksum=hpevtBadOsInitChecksum, hpevtFabricSetPortStateRlsSm4Err=hpevtFabricSetPortStateRlsSm4Err, hpevtMcDuringOsMca=hpevtMcDuringOsMca, hpevtIoSlotPowerDefaultError=hpevtIoSlotPowerDefaultError, hpevtBootMonSelSteppingsNoEqual=hpevtBootMonSelSteppingsNoEqual, hpevtDcnfgCpuCacheState=hpevtDcnfgCpuCacheState, hpevtXbcPortHwLinkError=hpevtXbcPortHwLinkError, hpevtUnexpectedRetToSalInit=hpevtUnexpectedRetToSalInit, hpevtBootExtIntNotServiced=hpevtBootExtIntNotServiced, hpevtIoPciBusMixedSpeeds=hpevtIoPciBusMixedSpeeds, hpevtPdhcI2cWriteFailed=hpevtPdhcI2cWriteFailed, hpevtIodiscLbaDiscoverError=hpevtIodiscLbaDiscoverError, hpevtNvramCPUCorrupt=hpevtNvramCPUCorrupt, hpevtMemFirmwareProb=hpevtMemFirmwareProb, hpevtProfileGroupCCrcError=hpevtProfileGroupCCrcError, hpevtFwUnexpctIntrnlErrVertx=hpevtFwUnexpctIntrnlErrVertx, hpevtFwUnbleWrtSkyGlobLnkSelCoh=hpevtFwUnbleWrtSkyGlobLnkSelCoh, hpevtErrCrssbarCrctByHW=hpevtErrCrssbarCrctByHW, hpevtEfiSysidBmcWarning=hpevtEfiSysidBmcWarning, hpevtBootIntrptClearFailure=hpevtBootIntrptClearFailure, hpevtPdMemGetIcmInfoFailed=hpevtPdMemGetIcmInfoFailed, hpevtDeadSram=hpevtDeadSram, hpevtBootBadCpuOrder=hpevtBootBadCpuOrder, hpevtFabricDifferentTopologies=hpevtFabricDifferentTopologies, hpevtWrtSkyGlobLnkSelCohFail=hpevtWrtSkyGlobLnkSelCohFail, hpevtTCGETorIOCTLFail=hpevtTCGETorIOCTLFail, hpevtOlaWrongNumberCells=hpevtOlaWrongNumberCells, hpevtBootProblemBranchingToPgzLocation=hpevtBootProblemBranchingToPgzLocation, hpevtCmplxProfilePdNumMismatch=hpevtCmplxProfilePdNumMismatch, hpevtMdtUnableToFindSpace=hpevtMdtUnableToFindSpace, hpevtFabricXbcWriteableInvalidCsr=hpevtFabricXbcWriteableInvalidCsr, hpevtMemDimmTypeMismatch=hpevtMemDimmTypeMismatch, hpevtXbcPortStatusError=hpevtXbcPortStatusError, hpevtBootCheckCpuGetStructAddrErr=hpevtBootCheckCpuGetStructAddrErr, hpevtSysFabEncntLnkErr=hpevtSysFabEncntLnkErr, hpevtFabricXbcRouteSourceCellPortErr=hpevtFabricXbcRouteSourceCellPortErr, hpevtInlckOpenPCIPwr=hpevtInlckOpenPCIPwr, hpevtCPUDegradErrThirdCache=hpevtCPUDegradErrThirdCache, hpevtOSSetWtchDogTimerToTimeOut=hpevtOSSetWtchDogTimerToTimeOut, hpevtFabricClrXbcRdHiLogStateErr=hpevtFabricClrXbcRdHiLogStateErr, hpevtCSRreadUnsuccessTimeOut=hpevtCSRreadUnsuccessTimeOut, hpevtVrmTempFlt=hpevtVrmTempFlt, hpevtUnablWrtXbcPrtCsr=hpevtUnablWrtXbcPrtCsr, hpevtIoCheckNumSlotsErr=hpevtIoCheckNumSlotsErr, hpevtFabricXingNeighborPortBad=hpevtFabricXingNeighborPortBad, hpevtBootCellMonarchCollision=hpevtBootCellMonarchCollision, hpevtFabricReadError=hpevtFabricReadError, hpevtCritFailCellOnline=hpevtCritFailCellOnline, hpevtCellHasIncomptbleHwFW=hpevtCellHasIncomptbleHwFW, hpevtSysOSRecovFrmPCIErrL1=hpevtSysOSRecovFrmPCIErrL1, hpevtBootCellLclCantFindViable=hpevtBootCellLclCantFindViable, hpevtMPGainLanCommUPS=hpevtMPGainLanCommUPS, hpevtFailWrtOsp=hpevtFailWrtOsp, hpevtBootMoveSlavesFpSetAddrErr=hpevtBootMoveSlavesFpSetAddrErr, hpevtSysBckPlnPwr1p5Fault=hpevtSysBckPlnPwr1p5Fault, hpevtExtClkCablRemvFrmCPUCab=hpevtExtClkCablRemvFrmCPUCab, hpevtBootOlaFailedUpdateCellMap=hpevtBootOlaFailedUpdateCellMap, hpevtXbcPrtFndUnxpctNgbrChip=hpevtXbcPrtFndUnxpctNgbrChip, hpevtUnexpctRetVertxModCopCelGrph=hpevtUnexpctRetVertxModCopCelGrph, hpevtUnablGenAlbArfSetCsr=hpevtUnablGenAlbArfSetCsr, hpevtFWErrSetNvramVal=hpevtFWErrSetNvramVal, hpevtBootFruReadError=hpevtBootFruReadError, hpevtUnablFndBadEdg=hpevtUnablFndBadEdg, hpevtPdMemAdjustMinZiFailed=hpevtPdMemAdjustMinZiFailed, hpevtPdhIprClearAttempts=hpevtPdhIprClearAttempts, hpevtBpsUndervoltage=hpevtBpsUndervoltage, hpevtNvramDataCmpError=hpevtNvramDataCmpError, hpevtFabricCc2ccTraverseRmtNotInit=hpevtFabricCc2ccTraverseRmtNotInit, hpevtBootWakeCpuGetStructAddrErr=hpevtBootWakeCpuGetStructAddrErr, hpevtSysBckPlnPwr2p5LDOFault=hpevtSysBckPlnPwr2p5LDOFault, hpevtXbcPersistantError=hpevtXbcPersistantError, hpevtNoHandoffToOsMca=hpevtNoHandoffToOsMca, hpevtPmI2cReadFailed=hpevtPmI2cReadFailed, hpevtCellFWnotMatchPartFW=hpevtCellFWnotMatchPartFW, hpevtWinAgtPredictMemFailCritical=hpevtWinAgtPredictMemFailCritical, hpevtFabricCc2XbcLinkInitFailed=hpevtFabricCc2XbcLinkInitFailed, hpevtEfiEsiTableChecksumErr=hpevtEfiEsiTableChecksumErr, hpevtFabricAssertFabricHop=hpevtFabricAssertFabricHop, hpevtBootCpusNotCompatible=hpevtBootCpusNotCompatible, hpevtXbcUnablRdAlrecAlbIdCsr=hpevtXbcUnablRdAlrecAlbIdCsr, hpevtSysBkpPowerFault=hpevtSysBkpPowerFault, hpevtMcCoreCellSelectFail=hpevtMcCoreCellSelectFail, hpevtRuntimeCritShtDwn=hpevtRuntimeCritShtDwn, hpevtNotAbleCreatNodeForComm=hpevtNotAbleCreatNodeForComm, hpevtPdhErrClearOlaSteeringBit=hpevtPdhErrClearOlaSteeringBit, hpevtElectrncKeyProblm=hpevtElectrncKeyProblm, hpevtPdMemGetCellInfoFailed=hpevtPdMemGetCellInfoFailed, hpevtBootPalANotExecuted=hpevtBootPalANotExecuted, hpevtInvlPrtRetRoutXbcCcLnk=hpevtInvlPrtRetRoutXbcCcLnk, hpevtResetCommandError=hpevtResetCommandError, hpevtPdhcCellIncompatable=hpevtPdhcCellIncompatable, hpevtSysFwUnAccesComplxProf=hpevtSysFwUnAccesComplxProf, hpevtFabricRouteXbcError=hpevtFabricRouteXbcError, hpevtMemPdtDisabledWarning=hpevtMemPdtDisabledWarning, hpevtFaltDetDropRegIO=hpevtFaltDetDropRegIO, hpevtAltrntROMUnblSwap=hpevtAltrntROMUnblSwap, hpevtIoUnknownPcixcapVal=hpevtIoUnknownPcixcapVal, hpevtPdCellLateLocalRendezSet=hpevtPdCellLateLocalRendezSet, hpevtErrWrtErrMskAlrecAlTran=hpevtErrWrtErrMskAlrecAlTran, hpevtIoconfigNodeInitError=hpevtIoconfigNodeInitError, hpevtDcnfgCpuL2Cache=hpevtDcnfgCpuL2Cache, hpevtSALFailClrCECLog=hpevtSALFailClrCECLog, hpevtEfiSecInitWriteDenied=hpevtEfiSecInitWriteDenied, hpevtBootCpuLateTestInsufficientMem=hpevtBootCpuLateTestInsufficientMem, hpevtXbcErrRdRoutCsr=hpevtXbcErrRdRoutCsr, hpevtFabricClrXbcSym01Failure=hpevtFabricClrXbcSym01Failure, hpevtIoPciBusDepthExceeded=hpevtIoPciBusDepthExceeded, hpevtFabricAssertFabricUtils=hpevtFabricAssertFabricUtils, hpevtStatCallPMANFail=hpevtStatCallPMANFail, hpevtSFWFailAllotNVM=hpevtSFWFailAllotNVM, hpevtReconfigResetScheduled=hpevtReconfigResetScheduled, hpevtIoSbaFatalTimeoutErr=hpevtIoSbaFatalTimeoutErr, hpevtBootTrapTaken=hpevtBootTrapTaken, hpevtIoDllError=hpevtIoDllError, hpevtBootOlaFailedUpdatePdPdt=hpevtBootOlaFailedUpdatePdPdt, hpevtFabricRtgCompleteWrFwdPrgErr=hpevtFabricRtgCompleteWrFwdPrgErr, hpevtIoDiscCreateSbaNodeErr=hpevtIoDiscCreateSbaNodeErr, hpevtArfOlaPreRendezUnablRchCel=hpevtArfOlaPreRendezUnablRchCel, hpevtEFIDrvrFailLoad=hpevtEFIDrvrFailLoad, hpevtIoBuswalkSuperio=hpevtIoBuswalkSuperio, hpevtPdhBatteryPowerLow=hpevtPdhBatteryPowerLow, hpevtFabricCcErrMaskRegRdData=hpevtFabricCcErrMaskRegRdData, hpevtBootPalCopyInfoError=hpevtBootPalCopyInfoError, hpevtBitMapUnrchCel=hpevtBitMapUnrchCel, hpevtUnusableResource=hpevtUnusableResource, hpevtPdRendezTreeError=hpevtPdRendezTreeError, hpevtIoPciMappingTooBig=hpevtIoPciMappingTooBig, hpevtFabricUnexpectedStatus=hpevtFabricUnexpectedStatus, hpevtMemDimmLoadOrdErr=hpevtMemDimmLoadOrdErr, hpevtIoPmNotRespondingError=hpevtIoPmNotRespondingError, hpevtNoCpuModulesFoundByPdhc=hpevtNoCpuModulesFoundByPdhc, hpevtBladeFrcPWon=hpevtBladeFrcPWon, hpevtIoLbaUncTimeoutErr=hpevtIoLbaUncTimeoutErr, hpevtFabricWrPortStatePortInvalid=hpevtFabricWrPortStatePortInvalid, hpevtOSNotUseAllProcs=hpevtOSNotUseAllProcs, hpevtVertxRetUnxpctErrNonCohTbl=hpevtVertxRetUnxpctErrNonCohTbl, hpevtAcDeletedB0=hpevtAcDeletedB0, hpevtFabricWrFailedLinksRdError=hpevtFabricWrFailedLinksRdError, hpevtDcnfgRightCellLatch=hpevtDcnfgRightCellLatch, hpevtUnknEntityDrwPwrBus=hpevtUnknEntityDrwPwrBus, hpevtHkpUndervoltage=hpevtHkpUndervoltage, hpevtBootFailedReadingProfileCInIcm=hpevtBootFailedReadingProfileCInIcm, hpevtVMDrvUnableCommVM=hpevtVMDrvUnableCommVM, hpevtFabricCellRerouteNbrNotReachable=hpevtFabricCellRerouteNbrNotReachable, hpevtCellTypMismatchWSysfw=hpevtCellTypMismatchWSysfw, hpevtPciFatalBusError=hpevtPciFatalBusError, hpevtIodiscLbaPciscanError=hpevtIodiscLbaPciscanError, hpevtBootTrapNotServiced=hpevtBootTrapNotServiced, hpevtPostRndevzFailPrepBckToBckSys=hpevtPostRndevzFailPrepBckToBckSys, hpevtNoRoutLocCrssBar=hpevtNoRoutLocCrssBar, hpevtPartitionProfileSeqidInvalid=hpevtPartitionProfileSeqidInvalid, hpevtBootMinStateRegError=hpevtBootMinStateRegError, hpevtErrRetrvCrssbarChipNmbr=hpevtErrRetrvCrssbarChipNmbr, hpevtBootAllCpusSlatedForCompatDeconfig=hpevtBootAllCpusSlatedForCompatDeconfig, hpevtIoLbaResetError=hpevtIoLbaResetError, hpevtBootCellLaunchEfiFailure=hpevtBootCellLaunchEfiFailure, hpevtMemEccMbeDataTstFailed=hpevtMemEccMbeDataTstFailed, hpevtBootRomRevToFitRevWarning=hpevtBootRomRevToFitRevWarning, hpevtIoDiscEeContextErr=hpevtIoDiscEeContextErr, hpevtMcMemDumpAbandon=hpevtMcMemDumpAbandon, hpevtRcsNoProvClkBckPln=hpevtRcsNoProvClkBckPln, hpevtIntrnlSwErr7194=hpevtIntrnlSwErr7194, hpevtFabricSetPortStateGetSm4Err=hpevtFabricSetPortStateGetSm4Err, hpevtSalPmiFwError=hpevtSalPmiFwError, hpevtMemDimmTypeIncompatible=hpevtMemDimmTypeIncompatible, hpevtSalandBmcTokenBad=hpevtSalandBmcTokenBad, hpevtCellMajorityNotPresent=hpevtCellMajorityNotPresent, hpevtBpsOvercurrent=hpevtBpsOvercurrent, hpevtFabricPortError=hpevtFabricPortError, hpevtEfiSalRtcServiceNotInit=hpevtEfiSalRtcServiceNotInit, hpOsBootDisabledWmixedCpuKeys=hpOsBootDisabledWmixedCpuKeys, hpevtOsMcaUncorrectedMc=hpevtOsMcaUncorrectedMc, hpevtUnSupprtDimmInPartition=hpevtUnSupprtDimmInPartition, hpevtStableProfileSeqidInvalid=hpevtStableProfileSeqidInvalid, hpevtNvramBatteryFail=hpevtNvramBatteryFail, hpevtFailFndEdgProcCall=hpevtFailFndEdgProcCall, hpevtChksmFailOSBootRendez=hpevtChksmFailOSBootRendez, hpevtHsoFaultOrRemv=hpevtHsoFaultOrRemv, hpevtErrRoutRemtside=hpevtErrRoutRemtside, hpevtPdhcAssertionFailed=hpevtPdhcAssertionFailed, hpevtLBASlotDevScanErr=hpevtLBASlotDevScanErr, hpevtMcIncompleteCpuSet=hpevtMcIncompleteCpuSet, hpevtVMDrvNotOpen=hpevtVMDrvNotOpen, hpevtIoSbaUncFunctionErr=hpevtIoSbaUncFunctionErr, hpevtOptsMallocError=hpevtOptsMallocError, hpevtEfiSalTimerServiceNotInit=hpevtEfiSalTimerServiceNotInit, hpevtFabricAssertFabricErr=hpevtFabricAssertFabricErr, hpevtIoDiscEeAttachserviceErr=hpevtIoDiscEeAttachserviceErr, hpevtInPwrUPSFail=hpevtInPwrUPSFail, hpevtBootFruXsumError=hpevtBootFruXsumError, hpevtCpuPalProcError=hpevtCpuPalProcError, hpevtVrmVltFault=hpevtVrmVltFault, hpevtNoNvmErrLogSpace=hpevtNoNvmErrLogSpace, hpevtCreatThreadPMANFail=hpevtCreatThreadPMANFail, hpevtHkpOvervoltage=hpevtHkpOvervoltage, hpevtErrRdAlrecAlbIdCsr=hpevtErrRdAlrecAlbIdCsr, hpevtMemWarnDistributionCheckBypass=hpevtMemWarnDistributionCheckBypass, hpevtPltfrmStorageWriteErr=hpevtPltfrmStorageWriteErr, hpevtRemoteSetViewRootError=hpevtRemoteSetViewRootError, hpevtRegistryMoveToCoreCellError=hpevtRegistryMoveToCoreCellError, hpevtIntrnlSwErr7196=hpevtIntrnlSwErr7196, hpevtMpBatteryFailure=hpevtMpBatteryFailure, hpevtErrorsPalFailure=hpevtErrorsPalFailure, hpevtSalInfoTimeout=hpevtSalInfoTimeout)
mibBuilder.exportSymbols("HPIPFTRAP-MIB", hpevtIoDevAdapterMiscUncErr=hpevtIoDevAdapterMiscUncErr, hpevtBootInstallPmiHandlerFailed=hpevtBootInstallPmiHandlerFailed, hpevtFailDelBadPort=hpevtFailDelBadPort, hpevtNvramBlockLocked=hpevtNvramBlockLocked, hpevtMemExtBaseboardIncompatible=hpevtMemExtBaseboardIncompatible, hpevtMcCellMonarchTimeout=hpevtMcCellMonarchTimeout, hpevtPmAssertionFailed=hpevtPmAssertionFailed, hpevtComplxProfNoMtch=hpevtComplxProfNoMtch, hpevtIOBckPln12VFail=hpevtIOBckPln12VFail, hpevtIoLbaFatalTimeoutErr=hpevtIoLbaFatalTimeoutErr, hpevtMemErrorRegClearFailure=hpevtMemErrorRegClearFailure, hpevtMemCacheLine0WrRdFailed=hpevtMemCacheLine0WrRdFailed, hpevtFabricUnexpectedNtype=hpevtFabricUnexpectedNtype, hpevtNctTblFailArfPhs3=hpevtNctTblFailArfPhs3, hpevtFabPhsExeInvlOrdr=hpevtFabPhsExeInvlOrdr, hpevtBootEfiNotInFit=hpevtBootEfiNotInFit, hpevtVMNotAlloctMemForIO=hpevtVMNotAlloctMemForIO, hpevtsx2000FabRprtUnexpctErr=hpevtsx2000FabRprtUnexpctErr, hpevtFparUnusable=hpevtFparUnusable, hpevtFWUnableCreatefParsCLM=hpevtFWUnableCreatefParsCLM, hpevtServIDNotMatchCab=hpevtServIDNotMatchCab, hpevtMcFwTreeNotComplete=hpevtMcFwTreeNotComplete, hpevtMdtConstructAreaBad=hpevtMdtConstructAreaBad, hpevtBootCacheSizesInconsistant=hpevtBootCacheSizesInconsistant, hpevtSysBkpEepromRdFail=hpevtSysBkpEepromRdFail, hpevtPdIncompatibleCpuTypes=hpevtPdIncompatibleCpuTypes, hpevtBootCellVirtualizePalFailure=hpevtBootCellVirtualizePalFailure, hpevtPdIncompatibleFwRevs=hpevtPdIncompatibleFwRevs, hpevtFabricRouteXbcCopyRoutingErr=hpevtFabricRouteXbcCopyRoutingErr, hpevtUnablSetNonCohRout=hpevtUnablSetNonCohRout, hpevtUpsExhausted=hpevtUpsExhausted, hpevtSysBckPlnPwr1p2LDOFault=hpevtSysBckPlnPwr1p2LDOFault, hpevtDupDimNumDetect=hpevtDupDimNumDetect, hpevtPdhcDillonResetFailed=hpevtPdhcDillonResetFailed, hpevtIodiscLbaInitnodeError=hpevtIodiscLbaInitnodeError, hpevtUnablSyncGrphCell=hpevtUnablSyncGrphCell, hpevtCpuFanFail=hpevtCpuFanFail, hpevtDrvUnableBldMapTbl=hpevtDrvUnableBldMapTbl, hpevtFailGetAddrXbcGlobSemphr=hpevtFailGetAddrXbcGlobSemphr, hpevtMemChipspareNotSupported=hpevtMemChipspareNotSupported, hpevtUtilitiesLedParamError=hpevtUtilitiesLedParamError, hpevtBootCpuLateTestFail=hpevtBootCpuLateTestFail, hpevtBootOlaCellNotConfigInCmplxProfile=hpevtBootOlaCellNotConfigInCmplxProfile, hpevtFabricErrorsXbcClrHiSevErr=hpevtFabricErrorsXbcClrHiSevErr, hpevtSysFWCallPalCopyPalFail=hpevtSysFWCallPalCopyPalFail, hpevtMorThnOneProcCallCell=hpevtMorThnOneProcCallCell, hpevtPalBusConfigIncompatible=hpevtPalBusConfigIncompatible, hpevtFabPhsExeInvlOrdrDatExpctPhs=hpevtFabPhsExeInvlOrdrDatExpctPhs, hpevtFabricRmtRoutePortWrErr=hpevtFabricRmtRoutePortWrErr, hpevtFabricCellLinkNotInit=hpevtFabricCellLinkNotInit, hpevtInvocationSoftResetCode=hpevtInvocationSoftResetCode, hpevtIoLbaFatalFunctionErr=hpevtIoLbaFatalFunctionErr, hpevtBootNvmTokenAccessFailure=hpevtBootNvmTokenAccessFailure, hpevtBootCpuEarlyConfigFail=hpevtBootCpuEarlyConfigFail, hpevtMemExtLoadOrdErr=hpevtMemExtLoadOrdErr, hpevtFabricRtgCompleteWrFldLinksErr=hpevtFabricRtgCompleteWrFldLinksErr, hpevtBootRomRevToRevBlockWarning=hpevtBootRomRevToRevBlockWarning, hpevtMemWarnLoopOnDestTest=hpevtMemWarnLoopOnDestTest, hpevtEfiEnterMfgModeNotInit=hpevtEfiEnterMfgModeNotInit, hpevtFabricAttemptFocusedReroute=hpevtFabricAttemptFocusedReroute, hpevtBootRendezFailure=hpevtBootRendezFailure, hpevtMemErrClearFail=hpevtMemErrClearFail, hpevtBootBmcTokenUploadFailure=hpevtBootBmcTokenUploadFailure, hpevtEfiSysidInvalid=hpevtEfiSysidInvalid, hpevtErrRdXbcRotTablCsr=hpevtErrRdXbcRotTablCsr, hpevtIodiscPciIomapError=hpevtIodiscPciIomapError, hpevtVmVertxFailSyncGrph=hpevtVmVertxFailSyncGrph, hpevtSysBkpI2cWrFail=hpevtSysBkpI2cWrFail, hpevtPFMOverTempProc=hpevtPFMOverTempProc, hpevtMcPalRendFail=hpevtMcPalRendFail, hpevtPdMemUnintlvdMemory=hpevtPdMemUnintlvdMemory, hpevtFabricCc2ccTraverseLclNotInit=hpevtFabricCc2ccTraverseLclNotInit, hpevtDcnfgCpuDisableMca=hpevtDcnfgCpuDisableMca, hpevtFailGetXbcGlobSemphrAddr=hpevtFailGetXbcGlobSemphrAddr, hpevtIoLbaMiscUncErr=hpevtIoLbaMiscUncErr, hpevtFabricCellRerouteSm4RlsErr=hpevtFabricCellRerouteSm4RlsErr, hpevtNvramBlockRevMismatch=hpevtNvramBlockRevMismatch, hpevtBootPrimaryFitBad=hpevtBootPrimaryFitBad, hpevtRtcAccessError=hpevtRtcAccessError, hpevtBootBmcFailed=hpevtBootBmcFailed, hpevtBootProtoTypeCpuInstalled=hpevtBootProtoTypeCpuInstalled, hpevtMcProcErrHalt=hpevtMcProcErrHalt, hpevtXbcForceUnlockSm4Timeout=hpevtXbcForceUnlockSm4Timeout, hpevtEfiSystemStateRunningErr=hpevtEfiSystemStateRunningErr, hpevtFparUnablNotiCpuIOSAPICredir=hpevtFparUnablNotiCpuIOSAPICredir, hpevtCelPrtPairNotExstGrphDat=hpevtCelPrtPairNotExstGrphDat, hpevtIOBckPlnReprtNonRedundncyPCIPwr=hpevtIOBckPlnReprtNonRedundncyPCIPwr, hpevtBootTrapNestLimitedExceeded=hpevtBootTrapNestLimitedExceeded, hpevtPdhIpmiNodeError=hpevtPdhIpmiNodeError, hpevtErrFindShrtRout=hpevtErrFindShrtRout, hpevtBootMixedCpuCoreFreqInstalled=hpevtBootMixedCpuCoreFreqInstalled, hpevtEfiSysEventCreateEventFail=hpevtEfiSysEventCreateEventFail, hpevtDcnfgCpuIcache=hpevtDcnfgCpuIcache, hpevtErrorUpdatingGroupCProfile=hpevtErrorUpdatingGroupCProfile, hpevtHiopbEepromRdFail=hpevtHiopbEepromRdFail, hpevtPdhcFlashUpdateError=hpevtPdhcFlashUpdateError, hpevtUpsRestored=hpevtUpsRestored, hpevtIoUnsupRopeFreq=hpevtIoUnsupRopeFreq, hpevtAllCpusDeconfOnCell=hpevtAllCpusDeconfOnCell, hpevtAcpiConfigMismatch=hpevtAcpiConfigMismatch, hpevtPFMCorrErrProcBus=hpevtPFMCorrErrProcBus, hpevtPdMemUpdateCellGniFailed=hpevtPdMemUpdateCellGniFailed, hpevtPdhcToSysfwRevMismtch=hpevtPdhcToSysfwRevMismtch, hpevtIodiscPciInitnodeError=hpevtIodiscPciInitnodeError, hpevtBootFwRelocMemErr=hpevtBootFwRelocMemErr, hpevtMemEccMbeSignalTstFailed=hpevtMemEccMbeSignalTstFailed, hpevtBkPlanePwrBrkFlt=hpevtBkPlanePwrBrkFlt, hpevtFailGetAddrProcCall=hpevtFailGetAddrProcCall, hpevtUnexpectedRetToSalCheck=hpevtUnexpectedRetToSalCheck, hpevtPdhcCriticalDebug=hpevtPdhcCriticalDebug, hpevtFabricValidateError=hpevtFabricValidateError, hpevtFabricMaxBrokenLinks=hpevtFabricMaxBrokenLinks, hpevtOldNoCellToDelete=hpevtOldNoCellToDelete, hpevtMemDimmThermalLoadOrderWarn=hpevtMemDimmThermalLoadOrderWarn, hpevtBootSlaveRtnFromFwSetFpErr=hpevtBootSlaveRtnFromFwSetFpErr, hpevtFabricLogRoutingRdErr=hpevtFabricLogRoutingRdErr, hpevtOANotServPwrOnReqst=hpevtOANotServPwrOnReqst, hpevtFabricHaltLinkDisableErr=hpevtFabricHaltLinkDisableErr, hpevtXbcInitMaxRetries=hpevtXbcInitMaxRetries, hpevtMemTestFwdProgBitsInvalid=hpevtMemTestFwdProgBitsInvalid, hpevtFwInstalledCpuDegraded=hpevtFwInstalledCpuDegraded, hpevtMcRendezPalGetFeatFail=hpevtMcRendezPalGetFeatFail, hpevtPdhPropertyError=hpevtPdhPropertyError, hpevtXbcReadRemoteRouteError=hpevtXbcReadRemoteRouteError, hpevtIOBckPlnNeg12VFail=hpevtIOBckPlnNeg12VFail, hpevtMcPalGetFeatFail=hpevtMcPalGetFeatFail, hpevtEfiSecInitOpenErr=hpevtEfiSecInitOpenErr, hpevtPFMCorrErrSysBus=hpevtPFMCorrErrSysBus, hpevtIoPciMappingFailed=hpevtIoPciMappingFailed, hpevtSalCheckUnknownFail=hpevtSalCheckUnknownFail, hpevtFabricErrorsXbcClearRdPortErr=hpevtFabricErrorsXbcClearRdPortErr, hpevtPdRendezUtilityError=hpevtPdRendezUtilityError, hpevtEfiGetMfgModeNotInit=hpevtEfiGetMfgModeNotInit, hpevtUtilSendCommandError=hpevtUtilSendCommandError, hpevtIoBpLpmFlt=hpevtIoBpLpmFlt, hpevtErrEnblLocXbcRout=hpevtErrEnblLocXbcRout, hpevtSysFwFlashUpdateError=hpevtSysFwFlashUpdateError, hpevtSetIntlCohRetErrArfPhs3=hpevtSetIntlCohRetErrArfPhs3, hpevtBootDeconfigAbsentCantSetCpuState=hpevtBootDeconfigAbsentCantSetCpuState, hpevtResetForReconfig=hpevtResetForReconfig, hpevtUncorrtMemEccErrOccr=hpevtUncorrtMemEccErrOccr, hpevtSysBkpVoltMrgnFail=hpevtSysBkpVoltMrgnFail, hpevtActiveLogNotFound=hpevtActiveLogNotFound, hpevtEfiEsiTableLengthErr=hpevtEfiEsiTableLengthErr, hpevtFabricCcErrMaskRegRdStatus=hpevtFabricCcErrMaskRegRdStatus, hpevtPdhcDmdClockFailed=hpevtPdhcDmdClockFailed, hpevtSysFwDetctErrRelXBCGlobSemphr=hpevtSysFwDetctErrRelXBCGlobSemphr, hpevtBootNoSalBInFit=hpevtBootNoSalBInFit, hpevtCluWatchdogReset=hpevtCluWatchdogReset, hpevtFabricInitCcLinkDisableErr=hpevtFabricInitCcLinkDisableErr, hpevtIoLinkSubsystemFailed=hpevtIoLinkSubsystemFailed, hpevtFabricColaInitTraversableErr=hpevtFabricColaInitTraversableErr, hpevtMonarchTakeover=hpevtMonarchTakeover, hpevtAPIopenLnkLocCell=hpevtAPIopenLnkLocCell, hpevtUnbleRdXBCPortNghbr=hpevtUnbleRdXBCPortNghbr, hpevtErrDeadlockResetDetected=hpevtErrDeadlockResetDetected, hpevtHp_uxHexFaultCode=hpevtHp_uxHexFaultCode, hpevtFabricInvalidXbc2XbcPort=hpevtFabricInvalidXbc2XbcPort, hpevtBootOlaCellUnexpectedCellState=hpevtBootOlaCellUnexpectedCellState, hpevtBootFindCoreCellNotInRendez=hpevtBootFindCoreCellNotInRendez, hpevtVmCollVertcFailUnexpct=hpevtVmCollVertcFailUnexpct, hpBootStblStoreNvMErr=hpBootStblStoreNvMErr, hpevtPciSlotErrDetect=hpevtPciSlotErrDetect, hpevtNvramBlockNotFound=hpevtNvramBlockNotFound, hpevtDcnfgCpuCacheMonitor=hpevtDcnfgCpuCacheMonitor, hpevtEfiSpeedyBootTokenNotRead=hpevtEfiSpeedyBootTokenNotRead, hpevtConfigMaxMemory=hpevtConfigMaxMemory, hpevtPdhcSmbusWriteFailed=hpevtPdhcSmbusWriteFailed, hpevtMemMcRegFailure=hpevtMemMcRegFailure)
