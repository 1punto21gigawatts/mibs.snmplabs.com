#
# PySNMP MIB module CISCO-DOT11-ASSOCIATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DOT11-ASSOCIATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
CDot11IfCipherType, cd11IfAuxSsid, CDot11IfVlanIdOrZero = mibBuilder.importSymbols("CISCO-DOT11-IF-MIB", "CDot11IfCipherType", "cd11IfAuxSsid", "CDot11IfVlanIdOrZero")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, TimeTicks, NotificationType, iso, Integer32, IpAddress, ObjectIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "TimeTicks", "NotificationType", "iso", "Integer32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Counter64")
TextualConvention, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString")
ciscoDot11AssociationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 273))
ciscoDot11AssociationMIB.setRevisions(('2007-01-05 00:00', '2006-06-12 00:00', '2005-03-08 00:00', '2004-11-28 00:00', '2004-10-18 00:00', '2004-02-19 00:00', '2003-07-27 00:00', '2003-04-11 00:00', '2003-01-29 00:00', '2002-07-15 00:00', '2002-04-17 00:00', '2002-03-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDot11AssociationMIB.setRevisionsDescriptions(('The changes made are as follows. - Added more explanations on the kind of entries populated for cDot11ClientConfigInfoTable, on infrastructure clients like repeaters, non-root bridges and workgroup bridges. - Added cDot11ClientNewKeyManagement object to the cDot11ClientConfigInfoTable. ', "The changes made are as follows. - Added the following enumerations to CDot11ClientRadioType. - 'cb21ag' - 'ccxClient' - 'unknown' - Added 'unknown' to CDot11ClientDevType. - Added cDot11ClientDevObjectID to cDot11ClientConfigInfoTable. ", 'Updated CDot11ClientDevType to include a new device type. Updated CDot11ClientRadioType to include new radio types.', 'Correct spelling of CDot11AuthenicationMethod to CDot11AuthenticationMethod.', 'Added new client VLAN, sub-interface ifIndex, key management type, authentication type, and cipher type information.', 'Added new cd11IfCipherStatsTable for radio interface AES, TKIP, and security tempering attempts statistics.', 'Added new IEEE 802.11g radio type to CDot11ClientRadioType and new AP device type to CDot11ClientDevType.', 'Added new objects for client software version, IP address, name, and association or authentication state.', 'Added new 5GHz radio type to CDot11ClientRadioType and new client types to CDot11ClientDevType.', 'Corrected the unit of cDot11ClientBytesReceived.', 'Added a new index cd11IfAuxSsid and a new object cDot11ClientParentAddress to the cDot11ClientConfigInfoTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoDot11AssociationMIB.setLastUpdated('200701050000Z')
if mibBuilder.loadTexts: ciscoDot11AssociationMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoDot11AssociationMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoDot11AssociationMIB.setDescription("This MIB module provides network management information on IEEE 802.11 wireless device association management and data packet forwarding configuration and statistics. This MIB is an extension to the IEEE802dot11-MIB and provides per client based information. The IEEE802dot11-MIB is defined in the IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, by the LAN MAN Standards Committee of the IEEE Computer Society. GLOSSARY and ACRONYMS Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. AES Advanced Encryption Standard Association The service used to establish access point or station mapping and enable STA invocation of the distribution system serivces. (Wireless clients attempt to connect to access points.) Bridge Device that connects two or more segments and reduces traffic by analyzing the destination address, filtering the frame, and forwarding the frame to all connected segments. Bridge AP It is an AP that functions as a transparent bridge between 2 wired LAN segments. Bridge Host This is also known as Work Group Bridge. This is a non-root bridge that is connected to a remote LAN segment and will only communicate with repeaters or root bridges. It does not accept association from other wireless devices. BSS IEEE 802.11 Basic Service Set (Radio Cell). The BSS of an AP comprises of the stations directly associated with the AP. CCX Cisco Compatible eXtensions A set of specifications which when implemented would make a client radio interoperable with a Cisco WLAN infrastructure and make best use of the innovations for enhanced security, mobility, quality of service and network management. CCMP Code Mode/CBC Mac Protocol Client (Client Station) A wireless device in a wireless network associated with an access point. Direct Sequence Spread Sprectrum ( DSSS ) DSSS is a method to send data where the transmitting and receiving systems operate at frequencies as wide as 22MHz. The wide channels help the participating systems to send more information at higher data rates than the FSSS systems. EAP Extensible Authentication Protocol EAP-TLS Extensible Authentication Protocol-Transport Layer Security Frequency Hopping Spread Spectrum ( FSSS ) FSSS systems hop from one frequency to another in the allowed band of frequencies during the data transmission. 83 MHz is specified as the allowed band of frequencies in the 2.4 GHz spectrum. IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. IEEE 802.11b The IEEE 802.11b standard describes DSSS systems that operate in the 2.4 GHz ISM band at data rates of 1, 2, 5,5 and 11 Mbps. IEEE 802.11a The IEEE 802.11a standard describes wireless LAN operation in the 5 GHz UNII band at data rates of 6, 9, 12, 18, 24, 36, 48 and 54 Mbps. IEEE 802.11g This standard specifies operation in 2.4 GHz ISM band at data rates of 6, 9, 12, 18. 24, 36, 48 and 54 Mbps. Industrial, Scientific and Medical band (ISM) A license-free band specified by the Federal Communications Commission for use by the wireless LAN systems. The ISM bands are located starting at 902 MHz, 2.4GHz and 5.8 GHz. MIC Message Integrity Check. A MIC can, optionally, be added to WEP-encrypted 802.11 frames. Non-Root Bridge This wireless bridge does not connect to the main wired LAN segment. It connects to a remote wired LAN segment and can associate to root bridges and other non-root bridges that accept client associations. It also can accept associations from other non-root bridges, repeater access points, and client devices. PCI Peripheral Component Interconnect A local bus standard developed by Intel Corporation. Most modern PCs include a PCI bus. PCI is a 64-bit bus, though it is usually implemented as a 32-bit bus. It can run at clock speeds of 33 or 66 MHz. At 32 bits and 33 MHz, it yields a throughput rate of 133 MBps. Repeater Device that connects multiple segments, listening to each and repeating signal on one to every other connected one; regenerates each transmission so that it can travel farther. Repeater or Non-root Access Point The repeater access point is not connected to the wired LAN. The Repeater is a wireless LAN transceiver that transfers data between a client and another access point, another repeater, or between two bridges. The repeater is placed within radio range of an access point connected to the wired LAN, another repeater, or an non-root bridge to extend the range of the infrastructure. Root Access Point This access point connects clients to the main wired LAN. Root Wireless Bridge This wireless bridge is connected to the main wired LAN. This wireless bridge can communicate with non-root wireless bridges, repeater access points, and client devices but not with another wireless root bridge. Only one wireless bridge in a wireless LAN can be set as the wireless root bridge. SSID Radio Service Set ID. It is used for identification during association. STA (WSTA) A non-AP 802.11 wireless station. TKIP WPA Temporal Key encryption. Unlicensed National Information Infrastucture (UNII) The UNII bands are in the 5 GHz range and are 100 MHz wide. These bands are used by 802.11a-compliant devices. WEP Wired Equivalent Privacy. 'WEP' is generally used to refer to 802.11 encryption. WPA WiFi Protected Access Work Group Bridges (WGB) See bridge host.")
ciscoDot11AssocMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 1))
cDot11AssociationGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1))
cDot11ClientConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2))
cDot11ClientStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3))
class CDot11ClientRoleClassType(TextualConvention, Integer32):
    description = 'This defines the type of role of a wireless device. The device types are: clientStation(0) - client station, repeater(1) - repeater access point, accessPoint(2) - access point, bridgeHost(3) - bridge host (WGB), bridge(4) - bridge, bridgeRoot(5) - root bridge ethernetClient(6) - Ethernet client through WGB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("clientStation", 0), ("repeater", 1), ("accessPoint", 2), ("bridgeHost", 3), ("bridge", 4), ("bridgeRoot", 5), ("ethernetClient", 6))

class CDot11ClientDevType(TextualConvention, Integer32):
    description = 'This defines the classifications of wireless client device. The devices are classified by their Ethernet connection, serial connection, and the type of radio it uses. The device classifications are: unknown(1) - unknown, ethernetAP(76) - Ethernet access point, ethernetBridge(77) - Ethernet bridge, pc3000Client(84) - client with a 3000 radio, serialUC(85) - serial port universal client, ethernetUC(86) - Ethernet universal client, pc3500Client(101) - client with a 5300 radio, pc4500Client(102) - client with a 4500 radio, generic80211Client(104) - client of an unknown radio type and non-Cisco device, pc4800Client(109) - client with a 4800 radio, pc3100Client(110) - client with a 3100 radio, mc(111) - multiple client Ethernet, universal client, ethernetClient(112) - Ethernet client of a WGB, pc4800bClient(117) - client with a 4800b radio, wgbNoDiversity(123) - WGB with one antenna, wgb(124) - WGB with two antennas, series350Client(127) - client with 350 series radio, series370Client(128) - client with 370 series dot11A radio, c1100SeriesAP(129) - Cisco 1100 series AP, c1410SeriesBridge(130) - Cisco 1410 series bridge, c1200SeriesAP(132) - Cisco 1200 series AP, mp2xClient(133) - client with MP2x IEEE 802.11g radio, c350SeriesAP(134) - Cisco IOS 350 series AP, cb21agClient(135) - Cisco CB21AG/PI21AG IEEE 802.lla/b/g client, radioKodiak(136) - Cisco IEEE 802.11a AIR-RM21A-x-K9 and AIR-RM22A-x-K9 radio, c1130SeriesAP(137) - Cisco 1130 series AP, c1310SeriesBridge(138) - Cisco 1310 series bridge, c7920phone(139) - Cisco 7920 series phone, c1240SeriesAP(140) - Cisco 1240 series AP. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 76, 77, 84, 85, 86, 101, 102, 104, 109, 110, 111, 112, 117, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140))
    namedValues = NamedValues(("unknown", 1), ("ethernetAP", 76), ("ethernetBridge", 77), ("pc3000Client", 84), ("serialUC", 85), ("ethernetUC", 86), ("pc3500Client", 101), ("pc4500Client", 102), ("generic80211Client", 104), ("pc4800Client", 109), ("pc3100Client", 110), ("mc", 111), ("ethernetClient", 112), ("pc4800bClient", 117), ("wgbNoDiversity", 123), ("wgb", 124), ("series350Client", 127), ("series370Client", 128), ("c1100SeriesAP", 129), ("c1410SeriesBridge", 130), ("c1200SeriesAP", 132), ("mp2xClient", 133), ("c350SeriesAP", 134), ("cb21agClient", 135), ("radioKodiak", 136), ("c1130SeriesAP", 137), ("c1310SeriesBridge", 138), ("c7920phone", 139), ("c1240SeriesAP", 140))

class CDot11ClientRadioType(TextualConvention, Integer32):
    description = 'This defines the radio classifications of wireless stations. It indicates the model number of the radio in the remote unit. The radio classifications are: unknown(1) - unknown, ccxClient(2) - CCX-compatible radio, pc3500(3) - Cisco 3500 radio, pc3000(4) - Cisco 3000 radio, pc4500(6) - Cisco 4500 radio, pc4800(12) - Cisco 4800 radio, pc3100(13) - Cisco 3100 radio, series340(33) - Cisco 340 series radio, series350(34) - Cisco 350 series radio, series370(35) - Cisco 370 series dot11A radio, bridge1410(36) - Cisco 1410 bridge 5GHz radio, mp2xSeries(37) - Cisco 11g MP2x series radio, rm2xSeries(38) - Cisco 11a RM2x series radio, rm2gSeries(39) - Cisco 11g RM2x series radio, mp2xMAR(40) - Cisco 3210 MAR 11g MP2x radio, cb21ag(46) - Cisco CB21AG/PI21AG IEEE 802.11a/b/g radio. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 12, 13, 33, 34, 35, 36, 37, 38, 39, 40, 46))
    namedValues = NamedValues(("unknown", 1), ("ccxClient", 2), ("pc3500", 3), ("pc3000", 4), ("pc4500", 6), ("pc4800", 12), ("pc3100", 13), ("series340", 33), ("series350", 34), ("series370", 35), ("bridge1410", 36), ("mp2xSeries", 37), ("rm2xSeries", 38), ("rm2gSeries", 39), ("mp2xMAR", 40), ("cb21ag", 46))

class CDot11AuthenticationMethod(TextualConvention, Integer32):
    reference = 'IEEE Std 802.11-Jan 14 1999, Wireless LAN Medium Access Control and Physical Layer Specifications, LAN MAN Standards Committee of the IEEE Computer Society, IEEE802dot11-MIB, dot11AuthenticationAlgorithm.'
    description = 'These are the IEEE 802.11 supported authentication methods for wireless devices: open(1) - Open System sharedKey(2) - Shared Key networkEap(129) - Network EAP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 129))
    namedValues = NamedValues(("open", 1), ("sharedKey", 2), ("networkEap", 129))

class CDot11AdditionalAuthenMethod(TextualConvention, Bits):
    description = 'These are the additional authentications that can be performed after IEEE 802.11 Open System or Shared Key authentication is completed successfully: mac(0) - MAC address authentication eap(1) - EAP authentication.'
    status = 'current'
    namedValues = NamedValues(("mac", 0), ("eap", 1))

class CDot11Dot1xAuthenMethod(TextualConvention, Bits):
    description = 'These are the IEEE 802.1x authentication methods performed between the IEEE 802.11 wireless clients and the authentication server. Depending on the server and client configuration, more than one authentication methods can be performed for any IEEE 802.11 association. The IEEE 802.1x authentication methods are: md5(0) - Message-digest algorithm leap(1) - Cisco Light-weight EAP peap(2) - Protected EAP eapTls(3) - EAP Transport Layer Security eapSim(4) - EAP Enhanced GSM Authentication eapFast(5) - Cisco EAP Fast.'
    status = 'current'
    namedValues = NamedValues(("md5", 0), ("leap", 1), ("peap", 2), ("eapTls", 3), ("eapSim", 4), ("eapFast", 5))

class CDot11KeyManagementMethod(TextualConvention, Bits):
    description = 'These are the encryption key management methods for IEEE 802.11 wireless frame encryption. The key management methods are: wpa(0) - Wi-Fi Protected Access cckm(1) - Cisco proprietary key management.'
    status = 'deprecated'
    namedValues = NamedValues(("wpa", 0), ("cckm", 1))

class CDot11NewKeyManagementMethod(TextualConvention, Bits):
    description = 'These are the encryption key management methods for IEEE 802.11 wireless frame encryption. The key management methods are: cckm(0) - Cisco proprietary key management wpa1(1) - Wi-Fi Protected Access version 1 wpa2(2) - Wi-Fi Protected Access version 2.'
    status = 'current'
    namedValues = NamedValues(("cckm", 0), ("wpa1", 1), ("wpa2", 2))

cDot11ParentAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ParentAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11ParentAddress.setDescription('This is the MAC address of the parent access point or root bridge for this device. The value is zero if this is a root access point or bridge.')
cDot11ActiveDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 2), )
if mibBuilder.loadTexts: cDot11ActiveDevicesTable.setStatus('current')
if mibBuilder.loadTexts: cDot11ActiveDevicesTable.setDescription('This table contains the list of active devices currently associated with this device on each of the IEEE 802.11 interfaces. This table has a sparse dependent relationship on the ifTable.')
cDot11ActiveDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cDot11ActiveDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11ActiveDevicesEntry.setDescription('An entry represents a currently active device associated with this device. These active devices include: wireless clients, repeaters, and bridges.')
cDot11ActiveWirelessClients = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 2, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setUnits('Device').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ActiveWirelessClients.setStatus('current')
if mibBuilder.loadTexts: cDot11ActiveWirelessClients.setDescription('This is the number of wireless clients currently associating with this device on this interface.')
cDot11ActiveBridges = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 2, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setUnits('Device').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ActiveBridges.setStatus('current')
if mibBuilder.loadTexts: cDot11ActiveBridges.setDescription('This is the number of bridges currently associating with this device on this interface.')
cDot11ActiveRepeaters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 2, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2007))).setUnits('Device').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ActiveRepeaters.setStatus('current')
if mibBuilder.loadTexts: cDot11ActiveRepeaters.setDescription('This is the number of repeaters currently associating with this device on this interface.')
cDot11AssociationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3), )
if mibBuilder.loadTexts: cDot11AssociationStatsTable.setStatus('current')
if mibBuilder.loadTexts: cDot11AssociationStatsTable.setDescription('This table contains statistics for various devices associated with this device on each of the IEEE 802.11 interfaces since it was last re-started. These devices include: wireless clients, repeaters, and bridges. This table has a sparse dependent relationship on the ifTable.')
cDot11AssociationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cDot11AssociationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11AssociationStatsEntry.setDescription('Each entry provides association statistics of various devices interacting with this device on each of the IEEE 802.11 interfaces.')
cDot11AssStatsAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 1), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsAssociated.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsAssociated.setDescription('This object counts the number of stations associated with this device on this interface since device re-started.')
cDot11AssStatsAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 2), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsAuthenticated.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsAuthenticated.setDescription('This object counts the number of stations authenticated with this device on this interface since device re-started.')
cDot11AssStatsRoamedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 3), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsRoamedIn.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsRoamedIn.setDescription('This object counts the number of stations roamed from another device to this device on this interface since device re-started.')
cDot11AssStatsRoamedAway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 4), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsRoamedAway.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsRoamedAway.setDescription('This object counts the number of stations roamed away from this device on this interface since device re-started.')
cDot11AssStatsDeauthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 5), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsDeauthenticated.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsDeauthenticated.setDescription('This object counts the number of stations deauthenticated with this device on this interface since device re-started.')
cDot11AssStatsDisassociated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 3, 1, 6), Counter32()).setUnits('client').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11AssStatsDisassociated.setStatus('current')
if mibBuilder.loadTexts: cDot11AssStatsDisassociated.setDescription('This object counts the number of stations disassociated with this device on this interface since device re-started.')
cd11IfCipherStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4), )
if mibBuilder.loadTexts: cd11IfCipherStatsTable.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherStatsTable.setDescription('This table includes AES, TKIP, and security tempering attempts statistics collected by the IEEE 802.11 radio interfaces and system management. This table has a sparse dependent relationship on the ifTable. For each entry in this table, there exists an entry in the ifTable of ifType ieee80211(71).')
cd11IfCipherStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cd11IfCipherStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherStatsEntry.setDescription('Each entry provides cipher related statistics collected on each of the IEEE 802.11 interfaces.')
cd11IfCipherMicFailClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherMicFailClientAddress.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherMicFailClientAddress.setDescription('This is MAC address of the client attached to this radio interface that caused the most recent MIC failure.')
cd11IfCipherTkipLocalMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherTkipLocalMicFailures.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherTkipLocalMicFailures.setDescription('This object counts the number of MIC failures encountered on this radio interface since device re-started.')
cd11IfCipherTkipRemotMicFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherTkipRemotMicFailures.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherTkipRemotMicFailures.setDescription('This object counts the number of MIC failures reported by clients on this radio interface since device re-started.')
cd11IfCipherTkipCounterMeasInvok = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherTkipCounterMeasInvok.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherTkipCounterMeasInvok.setDescription('This object counts the number of TKIP Counter Measures invoked on this interface since device re-started.')
cd11IfCipherCcmpReplaysDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherCcmpReplaysDiscarded.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherCcmpReplaysDiscarded.setDescription('This object counts the number of received unicast fragments discarded by replay mechanism on this interface since device re-started.')
cd11IfCipherTkipReplaysDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cd11IfCipherTkipReplaysDetected.setStatus('current')
if mibBuilder.loadTexts: cd11IfCipherTkipReplaysDetected.setDescription('This object counts the number of TKIP replay errors detected on this interface since device re-started.')
cDot11ClientConfigInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1), )
if mibBuilder.loadTexts: cDot11ClientConfigInfoTable.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientConfigInfoTable.setDescription('This table contains configuration information of client devices. Entries on this table are created by the device radio driver when clients establish association with the device. Entries are removed when clients disassociate with the device. These clients include: wireless clients, repeaters, and bridges. On Infrastructure clients like repeaters, non-root bridges and workgroup bridges, this table also has an entry for the parent device they are associated to.')
cDot11ClientConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-DOT11-IF-MIB", "cd11IfAuxSsid"), (0, "CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAddress"))
if mibBuilder.loadTexts: cDot11ClientConfigInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientConfigInfoEntry.setDescription('Each entry is the device specification of a client of this device on the IEEE 802.11 radio interfaces. Clients are grouped according to the SSIDs of the interfaces they use for associations and the MAC address of their parent devices if the clients are repeat APs.')
cDot11ClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cDot11ClientAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAddress.setDescription('The MAC address of the client.')
cDot11ClientParentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientParentAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientParentAddress.setDescription("The MAC address of the parent of the client if the client is a repeater AP. If this client has no parent, the value is '00000000'h.")
cDot11ClientRoleClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 3), CDot11ClientRoleClassType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientRoleClassType.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientRoleClassType.setDescription('The role classification of the client.')
cDot11ClientDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 4), CDot11ClientDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientDevType.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientDevType.setDescription('The device type of the client.')
cDot11ClientRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 5), CDot11ClientRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientRadioType.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientRadioType.setDescription('The radio classification of the client.')
cDot11ClientWepEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientWepEnabled.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientWepEnabled.setDescription("When this object is 'true', it indicates that the WEP key mechanism is used for transmitting frames of data for this client. The default value of this object is 'false'.")
cDot11ClientWepKeyMixEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientWepKeyMixEnabled.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientWepKeyMixEnabled.setDescription("When this object is 'true', it indicates that this client is using WEP key mixing.")
cDot11ClientMicEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMicEnabled.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMicEnabled.setDescription("When this object is 'true', it indicates that the MIC is enabled for this client. The default value of this object is 'false'.")
cDot11ClientPowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("powersave", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientPowerSaveMode.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientPowerSaveMode.setDescription('The power management mode of this client. The two possible modes are: active(1) - this client is not in power-save mode and it is actively sending or receiving data. powersave(2) - this client is in power-save mode and it wakes up once a while to check for pending data.')
cDot11ClientAid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2008))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientAid.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAid.setDescription("This is the association identification number of clients or multicast addresses associating with this device. For a multicast address with clients, the cDot11ClientAid is '0'. For the uplink association from this device to its parent access point, the cDot11ClientAid is always '1'. For any multicast address with no client currently known to be associated with this device, the cDot11ClientAid is '2008'.")
cDot11ClientDataRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientDataRateSet.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientDataRateSet.setDescription('This is the set of data rates at which this client can transmit and receive data. Each client can support up to 126 rates. Each octet contains an integer value representing one of these 126 rates. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s, This value is reported in transmitted Beacon, Probe Request, Probe Response, Association Request, Association Response, Reassociation Request, and Reassociation Response frames, and is used to determine whether a BSS with which the client desires to synchronize is suitable. It is also used when starting a BSS.')
cDot11ClientSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientSoftwareVersion.setDescription('This is the Cisco IOS software version if the other end of the association is a bridge, access point, or repeater. If it is a wireless client, this is the firmware version of the client card.')
cDot11ClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientName.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientName.setDescription('This is the Cisco IOS device hostname if the other end of the association is a bridge, access point, or repeater. If it is a wireless client, this is the configured client name.')
cDot11ClientAssociationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initial", 1), ("authenNotAssociated", 2), ("assocAndAuthenticated", 3), ("assocNotAnuthenticated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientAssociationState.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAssociationState.setDescription('This object indicates the state of the authentication and association process between the two parties: initial(1) - association request received from client, authenNotAssociated(2) - 802.11 authenticated but not 802.11 associated, assocAndAuthenticated(3) - 802.11 associated and 802.1x authenticated, assocNotAnuthenticated(4) - 802.11 associated but 802.1x not authenticated.')
cDot11ClientIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientIpAddressType.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientIpAddressType.setDescription('This is the IP address type of the cDot11ClientIpAddress.')
cDot11ClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientIpAddress.setDescription('This is the static or DHCP assigned IP address of the client.')
cDot11ClientVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 17), CDot11IfVlanIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientVlanId.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientVlanId.setDescription('This is the VLAN which this wireless client is assigned to when it is successfully associated to the wireless station. The value is 0 if this wireless client is not assigned to any VLAN or this wireless station is not configured with any VLAN.')
cDot11ClientSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 18), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientSubIfIndex.setDescription('This is the ifIndex of the sub-interface which this wireless client is assigned to when it is successfully associated to the wireless station. The value of this object is 0, if this wireless station is not configured with VLAN and this wireless client is assigned to the radio hardware interface of this wireless station.')
cDot11ClientAuthenAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 19), CDot11AuthenticationMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientAuthenAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAuthenAlgorithm.setDescription('This is the IEEE 802.11 authentication methods performed between the wireless station and this client during association.')
cDot11ClientAdditionalAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 20), CDot11AdditionalAuthenMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientAdditionalAuthen.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAdditionalAuthen.setDescription('These are the additional authentications that were performed after IEEE 802.11 Open System or Shared Key authentication had completed. If none of the bits is set, no additional MAC address or EAP authentication was performed during association.')
cDot11ClientDot1xAuthenAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 21), CDot11Dot1xAuthenMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientDot1xAuthenAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientDot1xAuthenAlgorithm.setDescription('This the IEEE 802.1x authentication methods performed between this wireless client and the authentication server. If none of the bits is set, no IEEE 802.1x authentication was performed during association.')
cDot11ClientKeyManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 22), CDot11KeyManagementMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientKeyManagement.setStatus('deprecated')
if mibBuilder.loadTexts: cDot11ClientKeyManagement.setDescription('This is the encryption key management methods employed by this client for IEEE 802.11 wireless frame encryption. If none of the bits is set, no key management method is employed.')
cDot11ClientUnicastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 23), CDot11IfCipherType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientUnicastCipher.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientUnicastCipher.setDescription('These are all the possible unicast data frame cipher encryption type combinations currently supported on this IEEE 802.11 client. If none of the bits is set, the client is not performing any unicast data frame encryption. aesccm WPA AES CCMP encryption, ckip Cisco Per packet key hashing, cmic Cisco MMH MIC, ckip|cmic Cisco Per packet key hashing and Cisco MMH MIC, tkip WPA Temporal Key encryption, wep128 128-bit WEP key, wep40 40-bit WEP key. tkip|wep128 WPA Temporal Key and 128-bit WEP, tkip|wep40 WPA Temporal Key and 40-bit WEP.')
cDot11ClientMulticastCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 24), CDot11IfCipherType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMulticastCipher.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMulticastCipher.setDescription('These are all the possible multi-cast data frame cipher encryption type combinations currently supported on this IEEE 802.11 client. If none of the bits is set, the client is not performing any multi-cast data frame encryption. aesccm WPA AES CCMP encryption, ckip Cisco Per packet key hashing, cmic Cisco MMH MIC, ckip|cmic Cisco Per packet key hashing and Cisco MMH MIC, tkip WPA Temporal Key encryption, wep128 128-bit WEP key, wep40 40-bit WEP key. tkip|wep128 WPA Temporal Key and 128-bit WEP, tkip|wep40 WPA Temporal Key and 40-bit WEP.')
cDot11ClientDevObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 25), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientDevObjectID.setReference('sysObjectID from SNMPv2-MIB')
if mibBuilder.loadTexts: cDot11ClientDevObjectID.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientDevObjectID.setDescription("This object indicates the authoritative identification of the associated 802.11 client as assigned by the respective vendor. A value of '0.0' shall be populated if no such identification exists for this 802.11 client. ")
cDot11ClientNewKeyManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 2, 1, 1, 26), CDot11NewKeyManagementMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientNewKeyManagement.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientNewKeyManagement.setDescription('This is the encryption key management methods employed by this client for IEEE 802.11 wireless frame encryption. If none of the bits is set, no key management method is employed.')
cDot11ClientStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1), )
if mibBuilder.loadTexts: cDot11ClientStatisticTable.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientStatisticTable.setDescription('This table contains statistics and status of all clients on the cDot11ClientConfigInfoTable. This table has a one-to-one relationship with the cDot11ClientConfigInfoTable.')
cDot11ClientStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1), )
cDot11ClientConfigInfoEntry.registerAugmentions(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientStatisticEntry"))
cDot11ClientStatisticEntry.setIndexNames(*cDot11ClientConfigInfoEntry.getIndexNames())
if mibBuilder.loadTexts: cDot11ClientStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientStatisticEntry.setDescription('Each entry contains statistics about errors, data transmitting and receiving rates and counts information of a client.')
cDot11ClientCurrentTxRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientCurrentTxRateSet.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientCurrentTxRateSet.setDescription('This is the set current transmit data rates for this client. Each client can transmit data at all of its configured rates. There is a maximum of 126 it can configure to transmit. Each octet contains an integer value representing one of these 126 rates it is currently transmitting. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s. This value is reported in transmitted Beacon, Probe Request, Probe Response, Association Request, Association Response, Reassociation Request, and Reassociation Response frames.')
cDot11ClientUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 2), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientUpTime.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientUpTime.setDescription('The time in seconds that this client has been associated with this device.')
cDot11ClientSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientSignalStrength.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientSignalStrength.setDescription('This is a device-dependent measure of the signal strength of the most recently received packet from this client. It may be normalized or unnormalized.')
cDot11ClientSigQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientSigQuality.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientSigQuality.setDescription('This is a device-dependent measure of the signal quality of the most recently received packet from this client.')
cDot11ClientAgingLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 5), Gauge32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientAgingLeft.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientAgingLeft.setDescription('The number of seconds of aging time left for this client.')
cDot11ClientPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 6), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientPacketsReceived.setDescription('The number of packets received from this client.')
cDot11ClientBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 7), Counter32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientBytesReceived.setDescription('The number of bytes received from this client.')
cDot11ClientPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 8), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientPacketsSent.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientPacketsSent.setDescription('The number of packets sent to this client.')
cDot11ClientBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 9), Counter32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientBytesSent.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientBytesSent.setDescription('The number of bytes sent to this client.')
cDot11ClientDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 10), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientDuplicates.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientDuplicates.setDescription('This counter increments when a packet for this client is received and the Sequence Control field in the packet header indicates the packet is a duplicate.')
cDot11ClientMsduRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 11), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMsduRetries.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMsduRetries.setDescription('This counter increments when an MSDU is successfully transmitted after one or more retransmissions for this client.')
cDot11ClientMsduFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 12), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMsduFails.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMsduFails.setDescription('This counter increments when an MSDU is not transmitted successfully for this client due to the number of transmit attempts exceeding some limit.')
cDot11ClientWepErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 13), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientWepErrors.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientWepErrors.setDescription('This is the number of packets received from this client which failed to be properly decrypted via the WEP security mechanism.')
cDot11ClientMicErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 14), Counter32()).setUnits('error').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMicErrors.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMicErrors.setDescription('This is the number of MIC errors for this client.')
cDot11ClientMicMissingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 273, 1, 3, 1, 1, 15), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cDot11ClientMicMissingFrames.setStatus('current')
if mibBuilder.loadTexts: cDot11ClientMicMissingFrames.setDescription('This is the number of missing MIC packets for this client.')
ciscoDot11AssocMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 2))
ciscoDot11AssocMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1))
ciscoDot11AssocMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2))
ciscoDot11AssocMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 1)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11AssocGlobalGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBCompliance = ciscoDot11AssocMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11AssocMIBCompliance.setDescription('The compliance statement for the ciscoDot11Assoc group.')
ciscoDot11AssocMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 2)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11AssocGlobalGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBComplianceRev1 = ciscoDot11AssocMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11AssocMIBComplianceRev1.setDescription('The compliance statement for the ciscoDot11Assoc group. This is deprecated in favor of the ciscoDot11AssocMIBComplianceRev2.')
ciscoDot11AssocMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 3)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientInfoGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfAssocStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfCipherStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ApAssocGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBComplianceRev2 = ciscoDot11AssocMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11AssocMIBComplianceRev2.setDescription('The compliance statement for the ciscoDot11Assoc group.')
ciscoDot11AssocMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 4)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientAuthenGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientInfoGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfAssocStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfCipherStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ApAssocGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBComplianceRev3 = ciscoDot11AssocMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11AssocMIBComplianceRev3.setDescription('The compliance statement for this ciscoDot11AssociationMIB module.')
ciscoDot11AssocMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 5)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientAuthenGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientInfoGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfAssocStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfCipherStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigExtGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ApAssocGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBComplianceRev4 = ciscoDot11AssocMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11AssocMIBComplianceRev4.setDescription('The compliance statement for this ciscoDot11AssociationMIB module.')
ciscoDot11AssocMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 1, 6)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientAuthenGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientInfoGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfAssocStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11IfCipherStatGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientConfigExtGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ClientNewAuthenGroup"), ("CISCO-DOT11-ASSOCIATION-MIB", "ciscoDot11ApAssocGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocMIBComplianceRev5 = ciscoDot11AssocMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11AssocMIBComplianceRev5.setDescription('The compliance statement for this ciscoDot11AssociationMIB module.')
ciscoDot11AssocGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 1)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ParentAddress"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveWirelessClients"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveBridges"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveRepeaters"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsAssociated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsAuthenticated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsRoamedIn"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsRoamedAway"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsDeauthenticated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsDisassociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11AssocGlobalGroup = ciscoDot11AssocGlobalGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11AssocGlobalGroup.setDescription('This is the device association information group. This is deprecated in favor of the ciscoDot11IfAssocStatGroup.')
ciscoDot11ClientConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 2)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientParentAddress"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientRoleClassType"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientDevType"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientRadioType"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientWepEnabled"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientWepKeyMixEnabled"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMicEnabled"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientPowerSaveMode"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAid"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientDataRateSet"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientConfigGroup = ciscoDot11ClientConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ClientConfigGroup.setDescription('This is the client configuration information group.')
ciscoDot11ClientStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 3)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientCurrentTxRateSet"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientUpTime"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientSignalStrength"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientSigQuality"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientPacketsReceived"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientBytesReceived"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientPacketsSent"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientBytesSent"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAgingLeft"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientDuplicates"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMsduRetries"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMsduFails"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientWepErrors"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMicErrors"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMicMissingFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientStatGroup = ciscoDot11ClientStatGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ClientStatGroup.setDescription('This is the client statistics group.')
ciscoDot11ClientInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 4)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientSoftwareVersion"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientName"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAssociationState"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientIpAddressType"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientInfoGroup = ciscoDot11ClientInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ClientInfoGroup.setDescription('This group provides additional client specific information.')
ciscoDot11ApAssocGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 5)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ParentAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ApAssocGlobalGroup = ciscoDot11ApAssocGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ApAssocGlobalGroup.setDescription('This group includes per AP or bridge global configuration information.')
ciscoDot11IfAssocStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 6)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveWirelessClients"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveBridges"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ActiveRepeaters"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsAssociated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsAuthenticated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsRoamedIn"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsRoamedAway"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsDeauthenticated"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11AssStatsDisassociated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfAssocStatGroup = ciscoDot11IfAssocStatGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11IfAssocStatGroup.setDescription('This group includes per IEEE 802.11 radio interface association statistics.')
ciscoDot11IfCipherStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 7)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherMicFailClientAddress"), ("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherTkipLocalMicFailures"), ("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherTkipRemotMicFailures"), ("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherTkipCounterMeasInvok"), ("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherCcmpReplaysDiscarded"), ("CISCO-DOT11-ASSOCIATION-MIB", "cd11IfCipherTkipReplaysDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11IfCipherStatGroup = ciscoDot11IfCipherStatGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11IfCipherStatGroup.setDescription('This group includes per IEEE 802.11 radio interface cipher related statistics collected.')
ciscoDot11ClientAuthenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 8)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientVlanId"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientSubIfIndex"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAuthenAlgorithm"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientAdditionalAuthen"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientDot1xAuthenAlgorithm"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientKeyManagement"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientUnicastCipher"), ("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientMulticastCipher"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientAuthenGroup = ciscoDot11ClientAuthenGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoDot11ClientAuthenGroup.setDescription('This group includes per IEEE 802.11 radio interface cipher related statistics collected.')
ciscoDot11ClientConfigExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 9)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientDevObjectID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientConfigExtGroup = ciscoDot11ClientConfigExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ClientConfigExtGroup.setDescription('This group provides more configuration information about a particular associated 802.11 client. ')
ciscoDot11ClientNewAuthenGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 273, 2, 2, 10)).setObjects(("CISCO-DOT11-ASSOCIATION-MIB", "cDot11ClientNewKeyManagement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoDot11ClientNewAuthenGroup = ciscoDot11ClientNewAuthenGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoDot11ClientNewAuthenGroup.setDescription('This group includes per IEEE 802.11 radio interface cipher related statistics collected.')
mibBuilder.exportSymbols("CISCO-DOT11-ASSOCIATION-MIB", cDot11AssStatsDeauthenticated=cDot11AssStatsDeauthenticated, cDot11ClientIpAddressType=cDot11ClientIpAddressType, cDot11ClientDataRateSet=cDot11ClientDataRateSet, cDot11AssociationGlobal=cDot11AssociationGlobal, cd11IfCipherMicFailClientAddress=cd11IfCipherMicFailClientAddress, cDot11ClientAuthenAlgorithm=cDot11ClientAuthenAlgorithm, cDot11ParentAddress=cDot11ParentAddress, cDot11ClientMicEnabled=cDot11ClientMicEnabled, cDot11ClientDuplicates=cDot11ClientDuplicates, cd11IfCipherTkipReplaysDetected=cd11IfCipherTkipReplaysDetected, ciscoDot11AssocMIBComplianceRev2=ciscoDot11AssocMIBComplianceRev2, cDot11ClientConfigInfoEntry=cDot11ClientConfigInfoEntry, cDot11ActiveDevicesEntry=cDot11ActiveDevicesEntry, cDot11ActiveBridges=cDot11ActiveBridges, cDot11ClientName=cDot11ClientName, cDot11ClientAddress=cDot11ClientAddress, cDot11ClientNewKeyManagement=cDot11ClientNewKeyManagement, CDot11Dot1xAuthenMethod=CDot11Dot1xAuthenMethod, cDot11AssociationStatsEntry=cDot11AssociationStatsEntry, cd11IfCipherTkipCounterMeasInvok=cd11IfCipherTkipCounterMeasInvok, cDot11AssStatsRoamedIn=cDot11AssStatsRoamedIn, cDot11ClientMsduFails=cDot11ClientMsduFails, cDot11AssStatsAssociated=cDot11AssStatsAssociated, cd11IfCipherStatsTable=cd11IfCipherStatsTable, cDot11ClientDevType=cDot11ClientDevType, cDot11ClientAid=cDot11ClientAid, CDot11ClientRadioType=CDot11ClientRadioType, cDot11AssStatsDisassociated=cDot11AssStatsDisassociated, ciscoDot11ClientStatGroup=ciscoDot11ClientStatGroup, cDot11AssStatsRoamedAway=cDot11AssStatsRoamedAway, cDot11ClientWepErrors=cDot11ClientWepErrors, ciscoDot11AssocMIBComplianceRev3=ciscoDot11AssocMIBComplianceRev3, cDot11ClientBytesReceived=cDot11ClientBytesReceived, cDot11ClientPacketsSent=cDot11ClientPacketsSent, CDot11AdditionalAuthenMethod=CDot11AdditionalAuthenMethod, ciscoDot11AssocMIBComplianceRev5=ciscoDot11AssocMIBComplianceRev5, ciscoDot11ClientConfigGroup=ciscoDot11ClientConfigGroup, CDot11ClientRoleClassType=CDot11ClientRoleClassType, ciscoDot11AssocMIBCompliance=ciscoDot11AssocMIBCompliance, cDot11ClientDevObjectID=cDot11ClientDevObjectID, cDot11ClientParentAddress=cDot11ClientParentAddress, cDot11AssociationStatsTable=cDot11AssociationStatsTable, cDot11ClientMulticastCipher=cDot11ClientMulticastCipher, cDot11ClientMicMissingFrames=cDot11ClientMicMissingFrames, cDot11ClientIpAddress=cDot11ClientIpAddress, cDot11ClientUnicastCipher=cDot11ClientUnicastCipher, cDot11ClientVlanId=cDot11ClientVlanId, ciscoDot11ClientNewAuthenGroup=ciscoDot11ClientNewAuthenGroup, ciscoDot11AssocMIBObjects=ciscoDot11AssocMIBObjects, ciscoDot11ClientAuthenGroup=ciscoDot11ClientAuthenGroup, ciscoDot11AssocGlobalGroup=ciscoDot11AssocGlobalGroup, cd11IfCipherCcmpReplaysDiscarded=cd11IfCipherCcmpReplaysDiscarded, cDot11ClientPacketsReceived=cDot11ClientPacketsReceived, cDot11ClientStatisticEntry=cDot11ClientStatisticEntry, cDot11ClientRadioType=cDot11ClientRadioType, ciscoDot11AssociationMIB=ciscoDot11AssociationMIB, cDot11ClientPowerSaveMode=cDot11ClientPowerSaveMode, cd11IfCipherStatsEntry=cd11IfCipherStatsEntry, ciscoDot11IfCipherStatGroup=ciscoDot11IfCipherStatGroup, cDot11ClientUpTime=cDot11ClientUpTime, cDot11ClientSoftwareVersion=cDot11ClientSoftwareVersion, cDot11ActiveRepeaters=cDot11ActiveRepeaters, cDot11ClientKeyManagement=cDot11ClientKeyManagement, CDot11NewKeyManagementMethod=CDot11NewKeyManagementMethod, cDot11ClientWepEnabled=cDot11ClientWepEnabled, cDot11ClientDot1xAuthenAlgorithm=cDot11ClientDot1xAuthenAlgorithm, cDot11ActiveWirelessClients=cDot11ActiveWirelessClients, cDot11ClientStatistics=cDot11ClientStatistics, cDot11ClientAssociationState=cDot11ClientAssociationState, ciscoDot11AssocMIBConformance=ciscoDot11AssocMIBConformance, CDot11AuthenticationMethod=CDot11AuthenticationMethod, ciscoDot11ClientConfigExtGroup=ciscoDot11ClientConfigExtGroup, cDot11ClientAdditionalAuthen=cDot11ClientAdditionalAuthen, cDot11ClientRoleClassType=cDot11ClientRoleClassType, PYSNMP_MODULE_ID=ciscoDot11AssociationMIB, cDot11ClientSignalStrength=cDot11ClientSignalStrength, cDot11AssStatsAuthenticated=cDot11AssStatsAuthenticated, ciscoDot11IfAssocStatGroup=ciscoDot11IfAssocStatGroup, CDot11ClientDevType=CDot11ClientDevType, cd11IfCipherTkipRemotMicFailures=cd11IfCipherTkipRemotMicFailures, cDot11ClientStatisticTable=cDot11ClientStatisticTable, cDot11ClientConfigInfoTable=cDot11ClientConfigInfoTable, cDot11ClientConfiguration=cDot11ClientConfiguration, cDot11ClientMsduRetries=cDot11ClientMsduRetries, ciscoDot11AssocMIBCompliances=ciscoDot11AssocMIBCompliances, cDot11ClientSubIfIndex=cDot11ClientSubIfIndex, cDot11ClientMicErrors=cDot11ClientMicErrors, cd11IfCipherTkipLocalMicFailures=cd11IfCipherTkipLocalMicFailures, ciscoDot11AssocMIBComplianceRev4=ciscoDot11AssocMIBComplianceRev4, CDot11KeyManagementMethod=CDot11KeyManagementMethod, ciscoDot11AssocMIBComplianceRev1=ciscoDot11AssocMIBComplianceRev1, cDot11ClientWepKeyMixEnabled=cDot11ClientWepKeyMixEnabled, cDot11ActiveDevicesTable=cDot11ActiveDevicesTable, cDot11ClientCurrentTxRateSet=cDot11ClientCurrentTxRateSet, cDot11ClientAgingLeft=cDot11ClientAgingLeft, ciscoDot11AssocMIBGroups=ciscoDot11AssocMIBGroups, ciscoDot11ApAssocGlobalGroup=ciscoDot11ApAssocGlobalGroup, cDot11ClientSigQuality=cDot11ClientSigQuality, ciscoDot11ClientInfoGroup=ciscoDot11ClientInfoGroup, cDot11ClientBytesSent=cDot11ClientBytesSent)
