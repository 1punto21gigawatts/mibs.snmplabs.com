#
# PySNMP MIB module HH3C-VSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-VSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:28:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Integer32, Gauge32, ObjectIdentity, Counter32, Unsigned32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "Unsigned32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Bits", "iso")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hh3cVsi = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 105))
hh3cVsi.setRevisions(('2009-08-08 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cVsi.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hh3cVsi.setLastUpdated('200908081000Z')
if mibBuilder.loadTexts: hh3cVsi.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cVsi.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cVsi.setDescription('The MIB for VSI (Virtual Switch Instance).')
hh3cVsiObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1))
hh3cVsiScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 1))
hh3cVsiNextAvailableVsiIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cVsiNextAvailableVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiNextAvailableVsiIndex.setDescription('Next available VSI entry index for creating VSI. Its value ranges from 0x1 to 0xFFFFFFFF.The invalid value 0xFFFFFFFF indicates that no VSI entry can be created.')
hh3cVsiTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2), )
if mibBuilder.loadTexts: hh3cVsiTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiTable.setDescription('A table for configuring VSI parameters.')
hh3cVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1), ).setIndexNames((0, "HH3C-VSI-MIB", "hh3cVsiIndex"))
if mibBuilder.loadTexts: hh3cVsiEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiEntry.setDescription('An entry for configuring VSI parameters.')
hh3cVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiIndex.setDescription('Index of VSI. Its value ranges from 0x1 to 0xFFFFFFFE.')
hh3cVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiName.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiName.setDescription('Name of VSI. Max string length of VSI name is 31.')
hh3cVsiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("martini", 1), ("minm", 2), ("martiniAndMinm", 3), ("kompella", 4), ("kompellaAndMinm", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiMode.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiMode.setDescription('Mode of VSI. Martini mode indicated this VSI support VPLS service signalled using LDP, kompella indicated this VSI support VPLS service signalled using BGP, minm indicated this VSI support MAC-in-MAC service.')
hh3cMinmIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMinmIsid.setStatus('current')
if mibBuilder.loadTexts: hh3cMinmIsid.setDescription('The MAC-in-MAC I-SID of VSI in minm or martiniAndMinm mode. It must be different for every VSI. Its value ranges from 0x1 to 0xFFFFFF. In other VSI mode, its value is invalid value 0x0.')
hh3cVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiId.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiId.setDescription("Identifier of VSI in martini or martiniAndMinm mode, by default, it's the PW ID of this VSI. Its value ranges from 1 to 4294967295. In other VSI mode, its value is invalid value 0.")
hh3cVsiTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("ethernet", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiTransMode.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiTransMode.setDescription('Transit Mode of VSI.')
hh3cVsiEnableHubSpoke = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiEnableHubSpoke.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiEnableHubSpoke.setDescription('Config HubSpoke property of this VSI.')
hh3cVsiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adminUp", 1), ("adminDown", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiAdminState.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiAdminState.setDescription('Set VSI admin state as adminUp or adminDown.')
hh3cVsiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiRowStatus.setDescription('Operation status of this table entry.')
hh3cVsiXconnectTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3), )
if mibBuilder.loadTexts: hh3cVsiXconnectTable.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectTable.setDescription('A table for configuring xconnect parameters.')
hh3cVsiXconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1), ).setIndexNames((0, "HH3C-VSI-MIB", "hh3cVsiXconnectIfIndex"), (0, "HH3C-VSI-MIB", "hh3cVsiXconnectEvcSrvInstId"))
if mibBuilder.loadTexts: hh3cVsiXconnectEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectEntry.setDescription('An entry for configuring xconnect parameters. Each entry means connecting a service instance of a interface to a VSI.')
hh3cVsiXconnectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hh3cVsiXconnectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectIfIndex.setDescription('Index of the interface associated with the VSI.')
hh3cVsiXconnectEvcSrvInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hh3cVsiXconnectEvcSrvInstId.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectEvcSrvInstId.setDescription('Index of the service instance associated with the VSI.')
hh3cVsiXconnectVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiXconnectVsiName.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectVsiName.setDescription('Name of VSI. Max string length of VSI name is 31.')
hh3cVsiXconnectAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("ethernet", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiXconnectAccessMode.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectAccessMode.setDescription('Access mode of this service instance.')
hh3cVsiXconnectHubSpoke = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hub", 2), ("spoke", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiXconnectHubSpoke.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectHubSpoke.setDescription('Config HubSpoke property of this service instance.')
hh3cVsiXconnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 105, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cVsiXconnectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cVsiXconnectRowStatus.setDescription('Operation status of this table entry.')
mibBuilder.exportSymbols("HH3C-VSI-MIB", hh3cVsiXconnectEntry=hh3cVsiXconnectEntry, hh3cVsiRowStatus=hh3cVsiRowStatus, hh3cVsiObjects=hh3cVsiObjects, hh3cVsiXconnectRowStatus=hh3cVsiXconnectRowStatus, hh3cVsiXconnectVsiName=hh3cVsiXconnectVsiName, hh3cVsiEnableHubSpoke=hh3cVsiEnableHubSpoke, hh3cVsiEntry=hh3cVsiEntry, hh3cMinmIsid=hh3cMinmIsid, hh3cVsi=hh3cVsi, hh3cVsiXconnectHubSpoke=hh3cVsiXconnectHubSpoke, hh3cVsiName=hh3cVsiName, hh3cVsiNextAvailableVsiIndex=hh3cVsiNextAvailableVsiIndex, hh3cVsiIndex=hh3cVsiIndex, hh3cVsiXconnectIfIndex=hh3cVsiXconnectIfIndex, hh3cVsiTable=hh3cVsiTable, PYSNMP_MODULE_ID=hh3cVsi, hh3cVsiScalarGroup=hh3cVsiScalarGroup, hh3cVsiXconnectEvcSrvInstId=hh3cVsiXconnectEvcSrvInstId, hh3cVsiXconnectTable=hh3cVsiXconnectTable, hh3cVsiId=hh3cVsiId, hh3cVsiTransMode=hh3cVsiTransMode, hh3cVsiMode=hh3cVsiMode, hh3cVsiXconnectAccessMode=hh3cVsiXconnectAccessMode, hh3cVsiAdminState=hh3cVsiAdminState)
