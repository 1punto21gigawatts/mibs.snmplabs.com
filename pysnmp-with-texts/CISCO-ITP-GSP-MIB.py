#
# PySNMP MIB module CISCO-ITP-GSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-GSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
CItpTcPointCode, CItpTcCLLI, CItpTcNetworkName, CItpTcQos, CItpTcLinksetId, CItpTcRouteTableName, CItpTcLinkSLC, CItpTcNetworkIndicator, CItpTcLinkType, CItpTcAclId, CItpTcInstanceNumber, CItpTcDisplayPC, CItpTcServiceIndicator, CItpTcPointCodeType = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcPointCode", "CItpTcCLLI", "CItpTcNetworkName", "CItpTcQos", "CItpTcLinksetId", "CItpTcRouteTableName", "CItpTcLinkSLC", "CItpTcNetworkIndicator", "CItpTcLinkType", "CItpTcAclId", "CItpTcInstanceNumber", "CItpTcDisplayPC", "CItpTcServiceIndicator", "CItpTcPointCodeType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Counter32, Gauge32, IpAddress, MibIdentifier, Counter64, ObjectIdentity, Unsigned32, TimeTicks, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Counter32", "Gauge32", "IpAddress", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "TimeTicks", "iso", "NotificationType")
TruthValue, RowStatus, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TimeStamp", "DisplayString", "TextualConvention")
ciscoGspMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 336))
ciscoGspMIB.setRevisions(('2009-12-31 00:00', '2009-09-12 00:00', '2009-05-25 00:00', '2008-05-07 00:00', '2005-10-21 00:00', '2005-02-24 00:00', '2003-07-16 00:00', '2003-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGspMIB.setRevisionsDescriptions(('Added the cgspLinkRxCongestionState object into CgspLinkTableEntry and ciscoGspRxCongestionChange notification to notify state of cgspLinkRxCongestionState.', 'Added the opc value to the cgspInstSccpWrrOption textual convention.', 'Added the following objects into cgspInstanceTableEntry for GTT weighted loadshare. cgspInstSccpWrrOpcShift, cgspInstSccpWrrOption', 'Added the following objects into CgspLinkTableEntry for additional Q752 related reporting. cgspLinkQ752T1E12, cgspLinkQ752T1E12Errors, cgspLinkQ752T2E11, cgspLinkQ752T2E17, cgspLinkQ752T2E19. Added linkRestored(34) and linkTestFailure(35) reason code to the cgspLinkReason object. Added the following textual convention: CgspDisplayInstanceUserPart. Added a new table cgspInstUPUTable with following objects: cgspMtp3SI, cgspInstSIUPUReceived, cgspInstSIUPUTransmitted, cgspInstUserPartDisplay. Added the following objects: cgspNotificationsInfo, cgspUPUNotifWindowTime. Added following new notifications: ciscoGspUPUReceived, ciscoGspUPUTransmitted. Added the following cgspNotificationsInfo objects: cgspUPUIntervalDuration, cgspIntervalUPUs.', 'Added new set of enums (from timerMtp2T01 to timerMtp2T07) to TC CgspTimerNumbers for MTP2 timers specified in ITU Q.703.', 'Added new ciscoGspIsolation notification to indicate when MTP3 node becomes isolated.', 'Additional reason codes to the cgspLinkReason object and updated CgspSS7Variant textual convention to support NTT and TTC Japanese variants. Also, update REFERENCE clauses to indicate support for appropriate ANSI standard.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGspMIB.setLastUpdated('201003050000Z')
if mibBuilder.loadTexts: ciscoGspMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGspMIB.setContactInfo('Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoGspMIB.setDescription('The MIB for managing Signalling Points and its associated messages transported over Signalling System No. 7 (SS7) Network via Cisco IP Transfer Point. This MIB replaces the CISCO-ITP-SP-MIB and provide support multiple instances of a signalling point within same configuration. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides function similar to SS7 Signalling point. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7. This MIB models the GSP as follows: Abbreviations: AERM - Alignment Error Rate Monitor CLLI - Common-Language Location Identification DPC - Destination Point Code GSP - Gateway Signalling Point HSL - High Speed Link (ATM based) LLSC - link set control LSAC - Signalling link activity control LSDA - Signalling data link allocation LSLA - Signalling link activation LSLD - Signalling link deactivation LSLR - Signalling link restoration LSSU - Link Status Signal Unit LSTA - Signalling terminal allocation MTP - Message Transport Protocol MTP2 - Layer 2 of Message Transport Protocol MTP3 - Layer 3 of Message Transport Protocol NTT - The Japanese Nippon Telephone & Telegraph OPC - Originating Point Code PC - Point Code RTN - RouteTableName SCTP - Stream Transmission Protocol(RFC 2960) SIB - Status Indicator Busy SLT - Signalling Link Test SLTA - Signalling Link Test Acknowledgement SP - Signalling Point SS7 - System No. 7 (SS7) Network SUERM - Signal Unit Error Rate Monitor TCBC - Changeback control TCOC - Changeover control TCRC - Controlled rerouting control TFRC - Forced rerouting control TLAC - Link availability control TPRC - Signalling point restart control TRCC - Signalling route set congestion control TSFC - Signalling traffic flow control TSRC - Signalling routing control TTC - The Japanese Telecommunications Technology Committee WRR - Weighted round robin')
ciscoGspMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 0))
ciscoGspMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1))
ciscoGspMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 2))
cgspScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1))
cgspProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2))
cgspInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3))
cgspPointCode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4))
cgspLinkset = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5))
cgspLink = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6))
cgspNotificationsEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7))
cgspNotificationsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 8))
class CgspSequenceNumber(TextualConvention, Unsigned32):
    description = 'This textual convention defines all of the allowed values for a sequence of integers used by the SS7 protocol to transmit and acknowledge packets. The range is specified from 0 to maximum allowed value for extended sequence numbers. The actual range will depend on the type of link and the variant. The value will increase and then wrap to the zero value. The following are examples of valid sequences. 0..126,127,0.. 0..254,255,0.. 0..32766,32767,0.. 0..65534,65535,0.. Therefore, the sequence number will behave like a counter with range appropriate for the type of link.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CgspSampleInterval(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values for a sample interval. This value is specified in seconds and ranges from 1 minute to 1 hour.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(60, 3600)

class CgspPercentThreshold(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values used to define a threshold. This value is specified as percentage of link utilization. A value of zero indicates that this specific threshold is to be ignored.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class CgspLinkTestResults(TextualConvention, Integer32):
    description = "This object provides information on result from signalling link test procedures as follows. 'noErrors' : Link test did not detect any errors. 'undefinedOpc' : A signalling link test message was received with an undefined originating point code. 'incorrectOpc' : A signalling link test message was received with an incorrect originating point code. 'undefinedSlc' : A signalling link test message was received with an undefined signalling link code. 'incorrectSlc' : A signalling link test message was received with an incorrect signalling link code.. 'incorrectNi' : A signalling link test message was received with an incorrect Network Indicator. 'badPattern' : A signalling link test message was received with an incorrect test pattern. This may be caused by variant mismatched or incorrect definitions on physical link. 'nonAdjacent' :Received a signalling link test message from an non-adjacent node. 'failed' :Unable to run test or no response was received within the specified interval."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noErrors", 0), ("undefinedOpc", 1), ("incorrectOpc", 2), ("undefinedSlc", 3), ("incorrectSlc", 4), ("incorrectNi", 5), ("badPattern", 6), ("nonAdjacent", 7), ("failed", 8))

class CgspLinkUtilization(TextualConvention, Gauge32):
    description = "This textual convention defines a range of values that represent a link's utilization during an interval of time. The values expressed as a percent of link capacity. Any value over 999 will be represented as 999. For SS7 links based on IP/SCTP the link capacity is not directly related to the interface speed used to transmit packets. This is different from serial and HSL links. The capacity of these types of links depend on the amount of resources available in the IP cloud. The IP cloud must be provisioned to support traffic for all SS7 links. In order to monitor link utilization on IP/SCTP based SS7 links a planned capacity must be specified. If this value is incorrectly estimated or traffic exceeds this expected value link utilization may exceed 100 percent. This is possible because the IP cloud may be provisioned with additional capacity or may discard less important traffic based on QoS parameters. When a SS7 link has not be configured for link utilization monitoring this value object will have a value of zero."
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 999)

class CgspLinkCapacity(TextualConvention, Unsigned32):
    description = "This textual convention defines the planned capacity of a SS7 link in bit per second. When the cgspLinkType object is 'sctpIp' or 'hsl' the link capacity can be obtained from information in the IF-MIB. When the cgspLinkType object is 'sctpIp' a value of zero indicates that link utilization should not be calculated for this SS7 link."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(56000, 2147483647), )
class CgspProfileName(TextualConvention, OctetString):
    description = 'The configured name associated with a Signalling Point Profile. An octet string specified by an administrator that must be in human-readable form. The names must conform to the allowed characters that can be specified via Command Line Interface(CLI). The names cannot contain control character and should not contain leading or trailing white space.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 19)

class CgspLinkUtilizationState(TextualConvention, Integer32):
    description = "Link Utilization State as follows: 'unMonitored' - traffic for a specified direction is not being monitored. 'underThreshold' - traffic for a specified direction on a link is below the specified threshold. 'overThreshold' - traffic for a specified direction on a link is above to or exceeds the specified threshold."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unMonitored", 0), ("underThreshold", 1), ("overThreshold", 2))

class CgspTimerNumbers(TextualConvention, Integer32):
    description = 'Enumerated values for all timers'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))
    namedValues = NamedValues(("timerMtp3T01", 1), ("timerMtp3T02", 2), ("timerMtp3T03", 3), ("timerMtp3T04", 4), ("timerMtp3T05", 5), ("timerMtp3T06", 6), ("timerMtp3T07", 7), ("timerMtp3T08", 8), ("timerMtp3T09", 9), ("timerMtp3T10", 10), ("timerMtp3T11", 11), ("timerMtp3T12", 12), ("timerMtp3T13", 13), ("timerMtp3T14", 14), ("timerMtp3T15", 15), ("timerMtp3T16", 16), ("timerMtp3T17", 17), ("timerMtp3T18", 18), ("timerMtp3T19", 19), ("timerMtp3T20", 20), ("timerMtp3T21", 21), ("timerMtp3T22", 22), ("timerMtp3T23", 23), ("timerMtp3T24", 24), ("timerMtp3T25", 25), ("timerMtp3T26", 26), ("timerMtp3T27", 27), ("timerMtp3T28", 28), ("timerMtp3T29", 29), ("timerMtp3T30", 30), ("timerMtp3T31", 31), ("timerMtp3T32", 32), ("timerMtp3T33", 33), ("timerMtp3T34", 34), ("timerLinkTest", 35), ("timerLinkMessag1", 36), ("timerLinkActRetry", 37), ("timerMtp2T01", 38), ("timerMtp2T02", 39), ("timerMtp2T03", 40), ("timerMtp2T04N", 41), ("timerMtp2T04E", 42), ("timerMtp2T05", 43), ("timerMtp2T06", 44), ("timerMtp2T07", 45))

class CgspTimerValue(TextualConvention, Unsigned32):
    reference = 'ITU Q.703 Signalling Link. ANSI T1.111.3 Telecommunications - signalling system No. 7 (SS7)-Message Transfer Part (MTP).'
    description = 'Value of timers in milliseconds as follows. A value of zero indicates that the timer is not applicable for variant or link type. The values specified in this textual convention apply to the various timers identified in CgspTimerNumbers textual convention. ANSI ITU Min Max Def Min Max Def ------ ------ ------ ------ ------ ------ TimerMtp3T01 500 1200 800 500 1200 800 TimerMtp3T02 700 2000 1400 700 2000 1400 TimerMtp3T03 500 1200 800 500 1200 800 TimerMtp3T04 500 1200 800 500 1200 800 TimerMtp3T05 500 1200 800 500 1200 800 TimerMtp3T06 500 1200 800 500 1200 800 TimerMtp3T07 1000 2000 1500 1000 2000 1500 TimerMtp3T08 800 1200 1000 800 1200 1000 TimerMtp3T10 30000 60000 45000 30000 60000 45000 TimerMtp3T11 30000 90000 60000 30000 90000 60000 TimerMtp3T12 800 1500 1150 800 1500 1150 TimerMtp3T13 800 1500 1150 800 1500 1150 TimerMtp3T14 2000 3000 2500 2000 3000 2500 TimerMtp3T15 2000 3000 2500 2000 3000 2500 TimerMtp3T16 1400 2000 1700 1400 2000 1700 TimerMtp3T17 800 1500 1150 800 1500 1150 TimerMtp3T18 2000 20000 11000 1000 31000 30000 TimerMtp3T19 480000 600000 540000 67000 69000 68000 TimerMtp3T20 90000 120000 105000 1000 61000 60000 TimerMtp3T21 90000 120000 105000 63000 65000 64000 TimerMtp3T22 36000 60000 30000 80000 360000 300000 TimerMtp3T23 9000 60000 30000 80000 360000 300000 TimerMtp3T24 9000 60000 30000 500 500 500 TimerMtp3T25 30000 35000 30000 n/a n/a n/a TimerMtp3T26 12000 15000 12000 n/a n/a n/a TimerMtp3T27 2000 50000 4000 n/a n/a n/a TimerMtp3T28 3000 35000 30000 n/a n/a n/a TimerMtp3T29 60000 65000 63000 n/a n/a n/a TimerMtp3T30 30000 35000 33000 n/a n/a n/a TimerMtp3T31 10000 120000 60000 n/a n/a n/a TimerMtp3T32 5000 120000 60000 n/a n/a n/a TimerMtp3T33 60000 600000 300000 n/a n/a n/a TimerMtp3T34 5000 120000 60000 n/a n/a n/a TimerLinkTest 4000 12000 8000 n/a n/a n/a TimerLinkMessage 30000 90000 60000 n/a n/a n/a TimerLinkActRetry 60000 90000 60000 n/a n/a n/a'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
class CgspSS7Variant(TextualConvention, Integer32):
    reference = 'GF 001-9001 - Technical Specifications of Signalling System No. 7 for National Telephone Network of China.'
    description = "The list of SS7 variants. 'unknown' : Unknown or undefined variant. 'ANSI' : The ANSI variant of the SS7 specification. 'ITU' : The ITU variant of the SS7 specification. 'China' : The China national variant. This variant is a combination of ITU and ANSI. The protocol matches ITU except where the point-code has been expanded to ANSI format. 'NTT' : The Japanese Nippon Telephone & Telegraph variant. 'TTC' : The Japanese Telecommunications Technology Committee variant."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("ansi", 1), ("itu", 2), ("china", 3), ("ntt", 4), ("ttc", 5))

class CgspDisplayInstanceUserPart(TextualConvention, OctetString):
    description = 'The instance name and user part information formatted for display. If instance name is not configured, the default local point code in ASCII string format will be provided as instance name.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 40)

class CItpTcSccpWrrOption(TextualConvention, Integer32):
    description = "The possible options for calculate sccp class1 traffic loadshare when GTT application group's multiplicity mode is WRR(Weighted round robin): 'sls' : Use sls to calculate loadsharing 'cgpaSls' : Use the combination of cgpa and sls to calculate loadsharing 'opcSls' : Use the combination of opc and sls to calculate loadsharing 'opc' : Use the opc to caculate loadsharing"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("sls", 0), ("cgpaSls", 1), ("opcSls", 2), ("opc", 3))

cgspCLLICode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 1), CItpTcCLLI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspCLLICode.setStatus('current')
if mibBuilder.loadTexts: cgspCLLICode.setDescription('Common-Language Location Identification Codes (CLLI Codes). This object identifies the physical location of this device and can provide additional informaton on the device type.')
cgspUtilSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 2), CgspSampleInterval().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspUtilSampleInterval.setStatus('current')
if mibBuilder.loadTexts: cgspUtilSampleInterval.setDescription('This object specifies the time interval used to monitor the utilization of SS7 links. This object in combination with cgspUtilThreshold, cgspLinkPlanCapacitySent and cgspLinkPlanCapacityRcvd will be used to calculate utilization of SS7 links. Changes to the polling interval will take effect after the completion of the current sample interval.')
cgspUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 3), CgspPercentThreshold().clone(40)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: cgspUtilThreshold.setDescription('This object specifies the threshold of usage for all SS7 links in SP. This object is used to determine when to generate the ciscoGspLinkRcvdUtilChange or ciscoGspLinkSentUtilChange notifications. A value of zero indicates that no default threshold is specified. Therefore, only links with non-zero values for cgspLinkUtilThresholdRcvd or cgspLinkUtilThresholdSent will generate notifications based on link utilization. Changes to the utilization threshold will take effect at the end of the current interval.')
cgspUtilAbateDelta = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 4), CgspPercentThreshold()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspUtilAbateDelta.setStatus('current')
if mibBuilder.loadTexts: cgspUtilAbateDelta.setDescription('This object allows the falling threshold to be lower than the rising threshold when calculating whether to generate the ciscoGspLinkRcvdUtilChange or ciscoGspLinkSentUtilChange notifications. This is done to prevent generating notifications for slight changes in traffic.')
cgspPlanCapacityDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 5), CgspLinkCapacity()).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspPlanCapacityDefault.setStatus('current')
if mibBuilder.loadTexts: cgspPlanCapacityDefault.setDescription("This object provides a default for value for links with a cgspLinkType='sctpIp'. For all other types of linkset this value is ignored. When a linkset based on SCTP/IP and the values for the cgspLinkPlanCapacityRcvd or cgspLinkPlanCapacitySent object are zero then this object will be used as the default. A value of zero indicates that a global default has not been specified. This object will be used in combination with cgspUtilSampleInterval, cgspUtilThreshold, cgspUtilThreshold and cgspLinkUtilThresholdRcvd to generate the ciscoGspLinkRcvdUtilChange notification.")
cgspEventSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 6), Counter32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspEventSequenceNumber.setReference('GR-82-CORE 6.6.1 Event Report Content R6-33')
if mibBuilder.loadTexts: cgspEventSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: cgspEventSequenceNumber.setDescription('Each event or notification is required to provide a sequence number to be used by the NMS to determine when messages from a particular device are missing. This value will included in each SS7 notification issued by this device.')
cgspUPUNotifWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspUPUNotifWindowTime.setStatus('current')
if mibBuilder.loadTexts: cgspUPUNotifWindowTime.setDescription('This object specifies the time interval used to monitor the ciscoGspUPUReceived and ciscoGspUPUTransmitted notifications for specific user part and signalling point instance. The first occurrence of ciscoGspUPUReceived and ciscoGspUPUTransmitted notifications are sent and the further occurrences of notifications in this interval are suppressed. At the end of this interval, a notification is sent with total number of UPU MSUs transmitted or received during this interval.')
cgspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1), )
if mibBuilder.loadTexts: cgspProfileTable.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTable.setDescription('A table that contains the Profiles of signalling points. Entries are added to this table via cgspProfileRowStatus in accordance with the RowStatus convention.')
cgspProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspProfileName"))
if mibBuilder.loadTexts: cgspProfileTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTableEntry.setDescription('A list of Profile attributes. Profiles are used to specify common configuration options for SS7 links without customizing each link. A profile is created with the specified values using this table and the cgspProfileTimerTable Table. The common values are applied to all links in a linkset by specifying the cgspLinksetProfileName on the linkset.')
cgspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1, 1), CgspProfileName())
if mibBuilder.loadTexts: cgspProfileName.setStatus('current')
if mibBuilder.loadTexts: cgspProfileName.setDescription('Name of the profile.')
cgspProfileVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1, 2), CgspSS7Variant()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileVariant.setStatus('current')
if mibBuilder.loadTexts: cgspProfileVariant.setDescription('The SS7 variant used to format data specified in this profile.')
cgspProfileMtp2BundleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileMtp2BundleTimer.setStatus('current')
if mibBuilder.loadTexts: cgspProfileMtp2BundleTimer.setDescription('Bundle timer value. This value is used to control the bundling of SS7 packets as they are transported within the device. The value of zero indicates that MTP3 packets will not be bundled for transmission as they arrival for transmission at the MTP2 layer. A non-zero value specifies the maximum delay time used to collect MTP3 packets before they are transmitted by the MTP2 layer.')
cgspProfileMtp2SendQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 32000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileMtp2SendQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cgspProfileMtp2SendQueueDepth.setDescription('The maximum Queue depth allowed per link for MTP2 waiting to be transmitted.')
cgspProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspProfileRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspProfileTable following the RowStatus textual convention.')
cgspProfileTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 2), )
if mibBuilder.loadTexts: cgspProfileTimerTable.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTimerTable.setDescription('A table that contains a profile of timers used to configure SS7 links. Entries are added to this table via cgspProfileTimerRowStatus in accordance with the RowStatus convention.')
cgspProfileTimerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspProfileTimerNumber"))
if mibBuilder.loadTexts: cgspProfileTimerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTimerTableEntry.setDescription('A list of ProfileTimer attributes. Profiles are used to specify common timer configuration options for SS7 links without customizing each link. A profile is created with the specified values using this table and the cgspProfileTable Table. The common values are applied to all links in a linkset by specifying the cgspLinksetProfileName on the linkset.')
cgspProfileTimerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 2, 1, 1), CgspTimerNumbers())
if mibBuilder.loadTexts: cgspProfileTimerNumber.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTimerNumber.setDescription('Index into table containing timer information.')
cgspProfileTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 2, 1, 2), CgspTimerValue()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileTimerValue.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTimerValue.setDescription('Value of timer selected by cgspProfileTimerNumber object.')
cgspProfileTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspProfileTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspProfileTimerRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspProfileTimerTable following the RowStatus textual convention.')
cgspInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1), )
if mibBuilder.loadTexts: cgspInstanceTable.setStatus('current')
if mibBuilder.loadTexts: cgspInstanceTable.setDescription('A table that contains the instances of signalling points. Entries are added to this table via cgspInstRowStatus in accordance with the RowStatus convention.')
cgspInstanceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"))
if mibBuilder.loadTexts: cgspInstanceTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspInstanceTableEntry.setDescription('A list of instance attributes.')
cgspInstNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 1), CItpTcNetworkName())
if mibBuilder.loadTexts: cgspInstNetwork.setStatus('current')
if mibBuilder.loadTexts: cgspInstNetwork.setDescription('The network name is used to indicate the network in which this signalling point is participating. One or more instances of signalling points can exist in the same physical device. This identifier will be used to correlate instances of signalling points by network. When multiple instance support is not enabled the network name will default to the null string. An octet string specified by an administrator that must be in human-readable form. The names must conform to the allowed characters that can be specified via Command Line Interface(CLI). The names cannot contain control character and should not contain leading or trailing white space.')
cgspInstNetworkIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 2), CItpTcNetworkIndicator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstNetworkIndicator.setStatus('current')
if mibBuilder.loadTexts: cgspInstNetworkIndicator.setDescription('The Network Indicator for this Signalling point instance.')
cgspInstVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 3), CgspSS7Variant()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstVariant.setStatus('current')
if mibBuilder.loadTexts: cgspInstVariant.setDescription('The SS7 variant used to format data used by this instance.')
cgspInstDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstDisplayName.setStatus('current')
if mibBuilder.loadTexts: cgspInstDisplayName.setDescription('A short identifier for the Signalling point. This value can be set by system administrator or defaults to the local point code formatted as an ASCII string.')
cgspInstDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstDescription.setStatus('current')
if mibBuilder.loadTexts: cgspInstDescription.setDescription('A textual description for the Signalling point.')
cgspInstTFR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstTFR.setStatus('current')
if mibBuilder.loadTexts: cgspInstTFR.setDescription("Allow transfer restricted messages. 'true' TFR are allowed. 'false' TFR are disabled.")
cgspInstCongestionsLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstCongestionsLevels.setStatus('current')
if mibBuilder.loadTexts: cgspInstCongestionsLevels.setDescription("Allow multiple congestion levels. 'true' multiple congestion levels are allowed. 'false' multiple congestion levels are disabled.")
cgspInstFastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstFastRestart.setStatus('current')
if mibBuilder.loadTexts: cgspInstFastRestart.setDescription("The support for fast restarts as follows. 'true' fast restart is enabled. 'false' fast restart is disabled.")
cgspInstDistSccpUnseq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstDistSccpUnseq.setStatus('current')
if mibBuilder.loadTexts: cgspInstDistSccpUnseq.setDescription("Evenly distribute Class 0 SCCP messages as follows. 'true' Evenly distribute 0 SCCP messages is enabled. 'false' Evenly distribute 0 SCCP messages is disabled.")
cgspInstSummaryRoutingException = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstSummaryRoutingException.setStatus('current')
if mibBuilder.loadTexts: cgspInstSummaryRoutingException.setDescription("This object is used to control the usage of the summary route when both a summary route (or ANSI cluster route) and a full point-code route (within that summary) are configured. The object is used to indicate whether the summary route is to be used when the full point-code destination is inaccessible as follows. 'true' Use summary routing. 'false' Do not use summary routing.")
cgspInstNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 11), CItpTcInstanceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspInstNumber.setStatus('current')
if mibBuilder.loadTexts: cgspInstNumber.setDescription('A unique Identifier assigned to each instance.')
cgspInstRouteTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 12), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstRouteTableName.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cgspInstRouteTableName.setStatus('current')
if mibBuilder.loadTexts: cgspInstRouteTableName.setDescription('The routing table for Signalling network management messages.')
cgspInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspInstRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspInstanceTable following the RowStatus textual convention.')
cgspInstSccpWrrOpcShift = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstSccpWrrOpcShift.setStatus('current')
if mibBuilder.loadTexts: cgspInstSccpWrrOpcShift.setDescription('This object indicates the shift amount for the OPC bits in SCCP class1 WRR(Weighted round robin). The range depends on the variant as follows. The ITU range is 0-2 The ANSI range is 0-8 The CHINA range is 0-2 The JAPAN NTT range is 0-2 The JAPAN TTC range is 0-2')
cgspInstSccpWrrOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 1, 1, 15), CItpTcSccpWrrOption()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstSccpWrrOption.setStatus('current')
if mibBuilder.loadTexts: cgspInstSccpWrrOption.setDescription('This object indicate the options for calculate SCCP class 1 traffic loadshare under WRR')
cgspInstTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 2), )
if mibBuilder.loadTexts: cgspInstTimerTable.setStatus('current')
if mibBuilder.loadTexts: cgspInstTimerTable.setDescription('A table that contains the timer used to configure an instances of signalling points. Entries are added to this table via cgspInstTimerRowStatus in accordance with the RowStatus convention.')
cgspInstTimerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspInstTimerNumber"))
if mibBuilder.loadTexts: cgspInstTimerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspInstTimerTableEntry.setDescription('This table is used to configure all MTP3 timer values that apply to linksets and links. The values apply to all linkset and links defined to this signalling point(instances).')
cgspInstTimerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 2, 1, 1), CgspTimerNumbers())
if mibBuilder.loadTexts: cgspInstTimerNumber.setStatus('current')
if mibBuilder.loadTexts: cgspInstTimerNumber.setDescription('Index into table containing timer information.')
cgspInstTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 2, 1, 2), CgspTimerValue()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstTimerValue.setStatus('current')
if mibBuilder.loadTexts: cgspInstTimerValue.setDescription('Value of timer selected by cgspInstTimerNumber object.')
cgspInstTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspInstTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspInstTimerRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspInstTimerTable following the RowStatus textual convention.')
cgspInstUPUTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3), )
if mibBuilder.loadTexts: cgspInstUPUTable.setStatus('current')
if mibBuilder.loadTexts: cgspInstUPUTable.setDescription('The Instance UPU table contains information about the number of UPU MSUs transmitted and received for the specific user part(represented by service indicator) and signalling point instance. The user part is primarily represented with the possible service indicator. This table provides the granularity of information required by Q752 table 5.6 and 5.7.')
cgspInstUPUTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspMtp3SI"))
if mibBuilder.loadTexts: cgspInstUPUTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspInstUPUTableEntry.setDescription('Each table entry represent the UPU MSU statistics for a specific user part and signalling point instance.')
cgspMtp3SI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3, 1, 1), CItpTcServiceIndicator())
if mibBuilder.loadTexts: cgspMtp3SI.setStatus('current')
if mibBuilder.loadTexts: cgspMtp3SI.setDescription('The service indicator.')
cgspInstSIUPUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3, 1, 2), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspInstSIUPUReceived.setReference('ANSI GR-82-CORE 6.4.2 System Total Measurements Item 33 measurements received from remote Signalling point.')
if mibBuilder.loadTexts: cgspInstSIUPUReceived.setStatus('current')
if mibBuilder.loadTexts: cgspInstSIUPUReceived.setDescription('The number of UPU MSUs that were received for the associated user part(service indicator) and and signalling point instance Q752/5.7.')
cgspInstSIUPUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3, 1, 3), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspInstSIUPUTransmitted.setReference('ANSI GR-82-CORE 6.4.2 System Total Measurements Item 33.')
if mibBuilder.loadTexts: cgspInstSIUPUTransmitted.setStatus('current')
if mibBuilder.loadTexts: cgspInstSIUPUTransmitted.setDescription('The number of UPU MSUs that were transmitted for the associated user part(service indicator) and and signalling point instance.')
cgspInstUserPartDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 3, 3, 1, 4), CgspDisplayInstanceUserPart()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspInstUserPartDisplay.setStatus('current')
if mibBuilder.loadTexts: cgspInstUserPartDisplay.setDescription('The associated instance name and user part information formatted for display.')
cgspPointCodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1), )
if mibBuilder.loadTexts: cgspPointCodeTable.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeTable.setDescription('A table that contains a list of point code defined for the Signalling point defined by this instance. Entries are added to this table via cgspPointCodeRowStatus in accordance with the RowStatus convention.')
cgspPointCodeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspPointCodeNi"), (0, "CISCO-ITP-GSP-MIB", "cgspPointCodeBin"))
if mibBuilder.loadTexts: cgspPointCodeTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeTableEntry.setDescription('A list of Point codes for a signalling point defined by an instance.')
cgspPointCodeNi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1, 1), CItpTcNetworkIndicator())
if mibBuilder.loadTexts: cgspPointCodeNi.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeNi.setDescription('The network Indicator for this pointcode.')
cgspPointCodeBin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1, 2), CItpTcPointCode())
if mibBuilder.loadTexts: cgspPointCodeBin.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeBin.setDescription('The point code for this Signalling Point.')
cgspPointCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1, 3), CItpTcPointCodeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspPointCodeType.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeType.setDescription('The function of this point code.')
cgspPointCodeDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1, 4), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspPointCodeDisplay.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeDisplay.setDescription('The point code for this Signalling Point.')
cgspPointCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspPointCodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspPointCodeRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspPointCodeTable following the RowStatus textual convention.')
cgspLinksetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1), )
if mibBuilder.loadTexts: cgspLinksetTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTable.setDescription('A table of linksets for this Signalling Point defined by this instance.')
cgspLinksetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"))
if mibBuilder.loadTexts: cgspLinksetTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTableEntry.setDescription('A list of Signalling Point linkset attributes for Signalling Point define by this instance.')
cgspLinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 1), CItpTcLinksetId())
if mibBuilder.loadTexts: cgspLinksetName.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetName.setDescription('The name of the linkset.')
cgspLinksetSourcePointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 2), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetSourcePointCode.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetSourcePointCode.setDescription('The point code to which this linkset is connected.')
cgspLinksetSourceDisplayPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 3), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetSourceDisplayPC.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetSourceDisplayPC.setDescription('The point code to which this linkset is connected.')
cgspLinksetAdjacentPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 4), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetAdjacentPointCode.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetAdjacentPointCode.setDescription('The point code to which this linkset is connected.')
cgspLinksetAdjacentDisplayPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 5), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetAdjacentDisplayPC.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetAdjacentDisplayPC.setDescription('The point code to which this linkset is connected.')
cgspLinksetState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("shutdown", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetState.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetState.setDescription("The list of possible linkset states. 'available' : Traffic may flow over this linkset 'shutdown' : This linkset has been forced to an unavailable state by an administrative action. 'unavailable': The linkset is currently unable to support traffic. Activation of this linkset will occur as required by protocol.")
cgspLinksetInboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 7), CItpTcAclId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetInboundAcl.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetInboundAcl.setDescription('Packets are filtered against this access control list before they are passed to the routing function. A value of zero indicates that no access control list is present.')
cgspLinksetOutboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 8), CItpTcAclId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetOutboundAcl.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetOutboundAcl.setDescription('Packets are filtered against this access control list after they have passed through the routing function. A value of zero indicates that no access control list is present.')
cgspLinksetAccountingMtp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetAccountingMtp3.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetAccountingMtp3.setDescription("This indicates if accounting for this linkset is enabled. 'true' Indicates that the accounting function is enabled for this linkset and is being accumulated in cgactMtp3Table. 'false' Indicates that the accounting function is disabled.")
cgspLinksetAccountingGtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetAccountingGtt.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetAccountingGtt.setDescription("This indicates if accounting for this linkset is enabled. 'true' Indicates that the accounting function is enabled for this linkset and is being accumulated in cgactMtp3Table. 'false' Indicates that the accounting function is disabled.")
cgspLinksetNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetNumLinks.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetNumLinks.setDescription('The number of links in this linkset.')
cgspLinksetDurationInService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 12), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetDurationInService.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetDurationInService.setDescription('Time linkset was providing service related to Q752/Table 4.2.')
cgspLinksetDurationOutService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetDurationOutService.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetDurationOutService.setDescription('Time linkset was Out-of-Service as required for Q752/Table 4.2.')
cgspLinksetActPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetActPriority.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetActPriority.setDescription('Defines the activation priority for linksets. The linksets with the lowest values will be activated first. If two or more linksets share the same values they will be activated in the order they were defined.')
cgspLinksetDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetDisplayName.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetDisplayName.setDescription('A short identifier for each linkset. This value can be set by system administrator or defaults to the linkset name.')
cgspLinksetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetDescription.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetDescription.setDescription('A textual description for the Signalling point.')
cgspLinksetRotateSlsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetRotateSlsEnable.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetRotateSlsEnable.setDescription("This defines whether signalling link selector(SLS) will be rotated. This option only applies to ANSI variant and will return false for all other variants. By default SLS rotation is enable by default for ANSI linksets. ANSI specifications state that SLS rotation should not be performed on C type linksets. This object can be used to disable SLS rotation. 'true' Indicates that SLS rotation is enable for this linkset. 'false' Indicates that SLS rotation is disable for this linkset.")
cgspLinksetRotateSlsShift = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetRotateSlsShift.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetRotateSlsShift.setDescription('This value used to shift the signalling link selector(SLS) when rotation is enabled. This option only applies to ANSI variant and will return 0 all other variants.')
cgspLinksetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 19), CgspProfileName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetProfileName.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetProfileName.setDescription('When specified this object indicates which profile will be used to establish defaults for common configuration values like MTP2 and MTP3 timers. The null string is used to indicate that the linkset does not have a profile.')
cgspLinksetAdjacentInst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 20), CItpTcNetworkName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinksetAdjacentInst.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetAdjacentInst.setDescription('When a linkset is used to carry traffic between different instances, this object contains the network name used as an index into the cgspInstanceTable table. In all other cases the object will contain the same network name as the source signalling point.')
cgspLinksetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspLinksetTable following the RowStatus textual convention.')
cgspLinksetTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 2), )
if mibBuilder.loadTexts: cgspLinksetTimerTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTimerTable.setDescription('A table that contains the timer used to configure timer values specific to a particular linkset. Entries are added to this table via cgspLinksetTimerRowStatus in accordance with the RowStatus convention.')
cgspLinksetTimerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetTimerNumber"))
if mibBuilder.loadTexts: cgspLinksetTimerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTimerTableEntry.setDescription('This table is used to configure all MTP3 timer values that apply to linksets and links. The values apply to this linkset and links it c contains.')
cgspLinksetTimerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 2, 1, 1), CgspTimerNumbers())
if mibBuilder.loadTexts: cgspLinksetTimerNumber.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTimerNumber.setDescription('Index into table containing timer information.')
cgspLinksetTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 2, 1, 2), CgspTimerValue()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetTimerValue.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTimerValue.setDescription('Value of timer selected by cgspLinksetTimerNumber object.')
cgspLinksetTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinksetTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspLinksetTimerRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspLinksetTimerTable following the RowStatus textual convention.')
cgspLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1), )
if mibBuilder.loadTexts: cgspLinkTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTable.setDescription('A table of links for each Signalling Point.')
cgspLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkSlc"))
if mibBuilder.loadTexts: cgspLinkTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTableEntry.setDescription('A list of signalling point link attributes.')
cgspLinkSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 1), CItpTcLinkSLC())
if mibBuilder.loadTexts: cgspLinkSlc.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cgspLinkSlc.setStatus('current')
if mibBuilder.loadTexts: cgspLinkSlc.setDescription('The Signalling Link Code for this link.')
cgspLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkDescription.setStatus('current')
if mibBuilder.loadTexts: cgspLinkDescription.setDescription('A textual description for this link.')
cgspLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 1), ("failed", 2), ("shutdown", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkState.setDescription("The list of possible links states. 'available' : Traffic may flow over this linkset 'failed' : Traffic management has detected a failure that prevents activating this linkset. 'shutdown' : This linkset has been forced to an unavailable state by an administrative action. 'unavailable': The linkset is currently unable to support traffic. Activation of this linkset will occur as required by protocol.")
cgspLinkReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("unknown", 0), ("changeOverInProgress", 1), ("mgmtDisconnectRequest", 2), ("linkAlignmentLost", 3), ("connectionLost", 4), ("localDisconnect", 5), ("remoteDisconnect", 6), ("suermFailure", 7), ("t1Timeout", 8), ("t2Timeout", 9), ("t3Timeout", 10), ("t6Timeout", 11), ("t7Timeout", 12), ("provingFailure", 13), ("protocolErrorBsn", 14), ("protocolErrorFib", 15), ("protocolErrorSin", 16), ("protocolErrorLssu", 17), ("peerNotReady", 18), ("communicationLost", 19), ("noListenPosted", 20), ("bufferNotAvailable", 21), ("cardRemoved", 22), ("cardInserted", 23), ("falseLinkCongestion", 24), ("configDownload", 25), ("localInhibit", 26), ("localUninhibit", 27), ("remoteInhibit", 28), ("remoteUninhibit", 29), ("localBlocked", 30), ("localUnBlocked", 31), ("remoteBlocked", 32), ("remoteUnblocked", 33), ("linkRestored", 34), ("linkTestFailure", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkReason.setStatus('current')
if mibBuilder.loadTexts: cgspLinkReason.setDescription("This object provides additional information on the source of a link failure. This object will contain the last reason that caused the link to fail. 'unknown' : Link has failed do to an undetermined cause. 'changeOverInProgress' : Change over in progress. 'mgmtDisconnectRequest' : Management disconnect request. 'linkAlignmentLost' : Link alignment lost. 'connectionLost' : Link connection lost. 'localDisconnect' : Local Disconnect. 'remoteDisconnect' : Remote Disconnect. 'suermFailure' : Signal unit error rate monitor failure. 't1Timeout' : T1 timeout no FISU received. 't2Timeout' : T2 timeout no SIO received. 't3Timeout' : T3 timeout no SIN received. 't6Timeout' : T6 timeout excessive congestion. 't7Timeout' : T7 timeout excessive acknowledgement delay. 'provingFailure' : Link proving failure. 'protocolError-BSN' : Abnormal BSN received. 'protocolError-FIB' : Abnormal FIB received. 'protocolError-SIN' : Abnormal SIB received. 'protocolError-LSSU' : Abnormal LSSU received. 'peerNotReady' : Peer not ready. 'communicationLost' : Communication lost. 'noListenPosted' : No Listen posted. 'bufferNotAvailable' : Unable to allocate buffer. 'cardRemoved' : Link card removed. 'cardInserted' : Link card Inserted. 'falseLinkCongestion' : false link congestion. 'configDownload' : Configuration downloading. 'localInhibit' : Local request to inhibit link. 'localUninhibit' : Local request to uninhibit link. 'remoteInhibit' : Remote request to inhibit link. 'remoteUninhibit': Local request to uninhibit link. 'localBlocked' : Local Processor outage. 'localUnBlocked' : Local Processor recovery. 'remoteBlocked' : Remote Processor outage. 'remoteUnblocked': Remote Processor recovery. 'linkRestored' : Link restored. 'linkTestFailure': Signalling Link Test failure.'")
cgspLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 5), CItpTcLinkType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkType.setReference('For SCTP see RFC 2960.')
if mibBuilder.loadTexts: cgspLinkType.setStatus('current')
if mibBuilder.loadTexts: cgspLinkType.setDescription('The link type.')
cgspLinkifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkifIndex.setReference('RFC1213.txt')
if mibBuilder.loadTexts: cgspLinkifIndex.setStatus('current')
if mibBuilder.loadTexts: cgspLinkifIndex.setDescription('If the link type specified by cgspLinkType is serial or high speed Link, this is the ifIndex specified in IF-MIB, otherwise no significance is to be placed on this value.')
cgspLinkSctpAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkSctpAssociation.setStatus('deprecated')
if mibBuilder.loadTexts: cgspLinkSctpAssociation.setDescription('Association Identifiers can be greater than 65,535. This object has been replaced by cgspLinkSctpAssociationId.')
cgspLinkXmitQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkXmitQueueDepth.setStatus('current')
if mibBuilder.loadTexts: cgspLinkXmitQueueDepth.setDescription('Number of packets waiting to be sent over this link.')
cgspLinkXmitQueueDepthHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkXmitQueueDepthHigh.setStatus('current')
if mibBuilder.loadTexts: cgspLinkXmitQueueDepthHigh.setDescription('This is the maximum number of packets waiting to be sent over this link since the last time this value was reset as indicated by cgspLinkXmitQueueDepthHighRT. Resetting this object is achieved by setting this object to 0. Attempting to set this object to any other value will result in a wrongValue (SNMPv2c, SNMPv3) or badValue (SNMPv1).')
cgspLinkXmitQueueDepthHighRT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkXmitQueueDepthHighRT.setStatus('current')
if mibBuilder.loadTexts: cgspLinkXmitQueueDepthHighRT.setDescription('This indicates when cgspLinkXmitQueueDepthHigh was last set to 0.')
cgspLinkCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkCongestionState.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Signalling network functions and messages 2.3.5.2.')
if mibBuilder.loadTexts: cgspLinkCongestionState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionState.setDescription('The Signalling link congestion status of this link. 0 is the least congestion level, 3 is the highest congestion level.')
cgspLinkCongestionAbate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionAbate1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionAbate1.setDescription('Threshold used to abate congestion level 1.')
cgspLinkCongestionAbate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionAbate2.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionAbate2.setDescription('Threshold used to abate congestion level 2.')
cgspLinkCongestionAbate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionAbate3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionAbate3.setDescription('Threshold used to abate congestion level 3.')
cgspLinkCongestionOnset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionOnset1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionOnset1.setDescription('Threshold used to mark onset of congestion level 1.')
cgspLinkCongestionOnset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionOnset2.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionOnset2.setDescription('Threshold used to mark onset of congestion level 2.')
cgspLinkCongestionOnset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkCongestionOnset3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkCongestionOnset3.setDescription('Threshold used to mark onset of congestion level 3.')
cgspLinkSigLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 18), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkSigLinkTest.setStatus('current')
if mibBuilder.loadTexts: cgspLinkSigLinkTest.setDescription('Indicated if Signalling link test is enabled on this link. true : Signalling link test is enabled. false : Signalling link test not enabled.')
cgspLinkQ752T1E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 19), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E1.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 23-24.')
if mibBuilder.loadTexts: cgspLinkQ752T1E1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E1.setDescription('Duration of link in the In-Service state Q752/1.1.')
cgspLinkQ752T1E2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E2.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 29.')
if mibBuilder.loadTexts: cgspLinkQ752T1E2.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E2.setDescription('Count of Signalling Link failures - All reasons Q752/1.2.')
cgspLinkQ752T1E3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 21), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E3.setDescription('Count of Signalling Link failures - Abnormal FIBR/BSNR Q752/1.3')
cgspLinkQ752T1E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 22), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E5.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E5.setDescription('Count of Signalling Link failures - Excessive error rate Q752/1.5.')
cgspLinkQ752T1E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 23), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E7.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E7.setDescription('Count of alignment or proving errors Q752/1.7.')
cgspLinkQ752T1E8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 24), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E8.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 33.')
if mibBuilder.loadTexts: cgspLinkQ752T1E8.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E8.setDescription('Count of signal units received in error Q752/1.8.')
cgspLinkQ752T1E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 25), Counter32()).setUnits('negative acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E9.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 34.')
if mibBuilder.loadTexts: cgspLinkQ752T1E9.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E9.setDescription('Count of negative acknowledgements received Q752/1.9.')
cgspLinkQ752T1E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 26), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E10.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 25.')
if mibBuilder.loadTexts: cgspLinkQ752T1E10.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E10.setDescription("Count of 'local automatic changeover' events Q752/1.10.")
cgspLinkQ752T1E11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 27), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E11.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E11.setDescription("Count of 'local automatic changeback' events Q752/1.11.")
cgspLinkQ752T2E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 28), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E1.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 30.')
if mibBuilder.loadTexts: cgspLinkQ752T2E1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E1.setDescription('Duration of Signalling Link unavailable(for any reason) Q752/2.1.')
cgspLinkQ752T2E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 29), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E5.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E5.setDescription('Duration of Signalling Link unavailable due to local management actions Q752/2.5.')
cgspLinkQ752T2E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 30), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E6.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E6.setDescription('Duration of Signalling Link unavailable due to remote management actions Q752/2.6.')
cgspLinkQ752T2E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 31), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E7.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E7.setDescription('Duration of Signalling Link unavailable due to link failure Q752/2.7.')
cgspLinkQ752T2E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 32), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E9.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 31.')
if mibBuilder.loadTexts: cgspLinkQ752T2E9.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E9.setDescription('Duration of Signalling Link unavailable due to remote processor outage Q752/2.9.')
cgspLinkQ752T2E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 33), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E10.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E10.setDescription("Count of 'remote processor outage' events Q752/2.10 and Q752/2.11. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.")
cgspLinkQ752T2E15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 34), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E15.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E15.setDescription('Count of Status Indicator Busy received Q752/2.15.')
cgspLinkQ752T2E16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 35), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E16.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 27.')
if mibBuilder.loadTexts: cgspLinkQ752T2E16.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E16.setDescription('Count of local inhibition Q752/2.16 and Q752/2.17. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cgspLinkQ752T2E18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 36), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E18.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 28.')
if mibBuilder.loadTexts: cgspLinkQ752T2E18.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E18.setDescription('Count of remote inhibition Q752/2.18 and Q752/2.19. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cgspLinkQ752T3E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 37), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E1.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 4.')
if mibBuilder.loadTexts: cgspLinkQ752T3E1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E1.setDescription('The number of MTP3 bytes sent by this link. This measurement is specified in Q752/3.1')
cgspLinkQ752T3E2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 38), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E2Bytes.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E2Bytes.setDescription('The number of MTP3 bytes retransmitted on this link. This measurement is specified in Q752/3.2')
cgspLinkQ752T3E2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 39), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E2Packets.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 3.')
if mibBuilder.loadTexts: cgspLinkQ752T3E2Packets.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E2Packets.setDescription('The number of MTP3 packets retransmitted on this link. This measurement is specified in Q752/3.2')
cgspLinkQ752T3E3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 40), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E3.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 1.')
if mibBuilder.loadTexts: cgspLinkQ752T3E3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E3.setDescription('The number of MTP3 packets sent by this link. This measurement is specified in Q752/3.3.')
cgspLinkQ752T3E4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 41), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E4.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 5.')
if mibBuilder.loadTexts: cgspLinkQ752T3E4.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E4.setDescription('The number of MTP3 bytes received by this link. This measurement is specified in Q752/3.4')
cgspLinkQ752T3E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 42), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E5.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 1.')
if mibBuilder.loadTexts: cgspLinkQ752T3E5.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E5.setDescription('The number of MTP3 packets received by this link. This measurement is specified in Q752/3.5')
cgspLinkQ752T3E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 43), Counter32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E6.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E6.setDescription('The number times this Signalling link was marked congested. This measurement is specified in Q752/3.6')
cgspLinkQ752T3E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 44), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E7.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 11.')
if mibBuilder.loadTexts: cgspLinkQ752T3E7.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E7.setDescription('Cumulative duration of Signalling link congestion Q752/3.7.')
cgspLinkQ752T3E10L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 45), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E10L1.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 17-19.')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L1.setDescription('The number of packets(MSUs) discarded due to Signalling link level 1 congestion Q752/3.10')
cgspLinkQ752T3E10L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 46), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E10L2.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 18-19.')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L2.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L2.setDescription('The number of packets(MSUs) discard due to Signalling link level 2 congestion Q752/3.10')
cgspLinkQ752T3E10L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 47), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E10L3.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 19.')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E10L3.setDescription('The number of packets(MSUs) discard due to Signalling link level 3 congestion Q752/3.10')
cgspLinkQ752T3E11L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 48), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E11L1.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 14.')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L1.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L1.setDescription('The number times this Signalling link entered congestion level 1 and packets were discarded. This measurement is specified in Q752/3.11')
cgspLinkQ752T3E11L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 49), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E11L2.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 15.')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L2.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L2.setDescription('The number times this Signalling link entered congestion level 2 and packets were discarded. This measurement is specified in Q752/3.11')
cgspLinkQ752T3E11L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 50), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T3E11L3.setReference('ANSI GR-82-CORE 6.4.4 Link Measurements Item 16.')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L3.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T3E11L3.setDescription('The number times this Signalling link entered congestion level 3 and packets were discarded. This measurement is specified in Q752/3.11')
cgspLinkLocalPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 51), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkLocalPeerPort.setStatus('current')
if mibBuilder.loadTexts: cgspLinkLocalPeerPort.setDescription("When cgspLinkType is set to 'sctpIp' then this object contains the local port number used to create the association supporting this link. This object can be used to obtain information from the cgsp2LocalPeerTable and cgsp2LpIpAddrTable Tables in the CISCO-ITP-GSP2-MIB.my MIB.")
cgspLinkRemotePeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 52), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkRemotePeerPort.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemotePeerPort.setDescription("When cgspLinkType is set to 'sctpIp' then this object contains the remote port number used to create the association supporting this link. When cgspLinkType is not set to 'sctpIp' then no significance is to be placed on this value.")
cgspLinkQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 53), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkQosClass.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQosClass.setDescription("When cgspLinkType is set to 'sctpIp' then this object contains the quality of service class to be assigned to packets sent on this association. When cgspLinkType is not set to 'sctpIp' then no significance is to be placed on this value.")
cgspLinkDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 54), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkDisplayName.setStatus('current')
if mibBuilder.loadTexts: cgspLinkDisplayName.setDescription('A short identifier for each link linkset. This value can be set by system administrator or defaults to the linkset name and SLC formatted as an ASCII string.')
cgspLinkDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 55), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkDroppedPkts.setDescription('The number of packets that were dropped by this link.')
cgspLinkTransmittedLSSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 56), Counter32()).setUnits('LSSU').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTransmittedLSSUs.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTransmittedLSSUs.setDescription('The number of Link Status Signal Units sent on this link.')
cgspLinkReceivedLSSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 57), Counter32()).setUnits('LSSU').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkReceivedLSSUs.setStatus('current')
if mibBuilder.loadTexts: cgspLinkReceivedLSSUs.setDescription('The number of Link Status Signal Units received on this link.')
cgspLinkProtocolDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 58), Bits().clone(namedValues=NamedValues(("tcbcBuffering", 0), ("tcocBuffering", 1), ("tlacAdjacentSpRestarting", 2), ("tlacEmergencyCoInProgress", 3), ("tlacChangebackInProgress", 4), ("tlacChangeoverInProgress", 5), ("tlacChangeoverFailed", 6), ("tlacInhibitRetry", 7), ("tlacManagementRequest", 8), ("tlacSpRestarting", 9), ("tsrcChangeOverComplete", 10), ("tsrcAdjacentSpRestart", 11), ("tlacLocalInhibit", 12), ("tlacRemoteInhibit", 13), ("tlacLocalBlocked", 14), ("tlacRemoteBlocked", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkProtocolDetails.setStatus('current')
if mibBuilder.loadTexts: cgspLinkProtocolDetails.setDescription("This object provide details on the protocol states for this link as follows. Changeback control(TCBC) 'tcbcBuffering': Changeback control is buffering data on this link. Changeover control(TCOC) 'tcocBuffering': Changeover control is buffering data on this link Link availability control(TLAC) 'tlacAdjacentSpRestarting': Adjacent Signalling point is restarting. 'tlacEmergencyCoInProgress': Emergency changeover is in progress on this link. 'tlacChangebackInProgress': Changeback is in progress on this link. 'tlacChangeoverInProgress': Changeover is in progress on this link. 'tlacChangeoverFailed': The last changeover operation failed on this link. 'tlacInhibitRetry': Inhibit command will be retried. 'tlacManagementRequest': Management request in progress for this link. 'tlacSpRestarting': Signalling point is in the process of a restart. 'tlacLocalInhibit': Link has been inhibited by a local management operation. 'tlacRemoteInhibit': Link has been inhibited by a remote management operation. 'tlacLocalBlocked': Link is blocked because of a local processor outage. 'tlacRemoteBlocked': Link is blocked because of a remote processor outage. Signalling routing control(TSRC) 'tsrcChangeOverComplete': Changeove request is complete. 'tsrcAdjacentSpRestart': Adjacent Signalling Point is restarting.")
cgspLinkLsacState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("inactive", 2), ("active", 3), ("activatingRestoring", 4), ("failed", 5), ("actT17wait", 6), ("actAnsiWaitDeloaded", 7), ("actItuWaitStmReady", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkLsacState.setReference('Figure 37/Q.704 - Signalling link management. Signalling link activity control (LSAC)')
if mibBuilder.loadTexts: cgspLinkLsacState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkLsacState.setDescription("Signalling link activity control state: 'undefined' - link is an undefined state 'inactive' - A Signalling link that is not in operation. 'active' - A Signalling link that is in operation. 'activatingRestoring' - A Signalling that is not operational and is being activated or restored. 'failed' - A Signalling link which is available (not blocked) is marked by level 3 as failed when a changeover order is received. 'actT17wait' - Link activation has failed. Link is placed into this state to wait for timer T17 to expire in order to avoid the oscillation of initial alignment failure and link restart. 'actAnsiWaitDeloaded - Waiting for change back acknowledgement (second attempt). 'actItuWaitStmReady' Wait for Signalling Traffic Management ready event.")
cgspLinkTsrcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("wait5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTsrcState.setReference('Figure 29/Q.704 - Signalling traffic management; Signalling routing control (TSRC)')
if mibBuilder.loadTexts: cgspLinkTsrcState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTsrcState.setDescription("Signalling traffic management routing control state: 'undefined' - link is an undefined state 'idle' - traffic management is idle 'wait5' - traffic management is active and in the sending status phase")
cgspLinkTcocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("wait2", 3), ("waitForAck", 4), ("retrieving", 5), ("wait5", 6), ("wait7", 7), ("wait8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTcocState.setReference('Figure 30/Q.704 - Signalling traffic management; changeover control (TCOC)')
if mibBuilder.loadTexts: cgspLinkTcocState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTcocState.setDescription("Changeover control State: 'undefined' - Link is an undefined state. 'idle' - Link is available and idle. 'wait2' - Wait for MTP2 to initialize link. 'waitForAck' - Waiting for changeover acknowledgement. 'retrieving' - Packets are being retrieved from link. 'wait5' - Wait state when transitioning from idle state. 'wait7' - Delay to avoid message mis-sequencing on changeover 'wait8' - Wait state prior to processing changeover order or emergency changeover order events.")
cgspLinkTcocLocalBSNT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 62), CgspSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTcocLocalBSNT.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTcocLocalBSNT.setDescription('The local backward sequence number to be transmitted.')
cgspLinkTcocRemoteBSNT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 63), CgspSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTcocRemoteBSNT.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTcocRemoteBSNT.setDescription('The remote backward sequence number to be transmitted.')
cgspLinkTcbcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("firstAttempt", 3), ("secondAttempt", 4), ("timeControlledDiversion", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTcbcState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTcbcState.setDescription("Changeback control State: 'undefined' - link is an undefined state. 'idle' - Link is available and idle. 'firstAttempt' - First attempt at changeback. 'secondAttempt' - Second attempt at changeback 'timeControlledDiversion' - Changeback using time controlled Diversion.")
cgspLinkReceivedSIBs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkReceivedSIBs.setStatus('current')
if mibBuilder.loadTexts: cgspLinkReceivedSIBs.setDescription("The number of status indicator 'busy' link status signal units received on this link. The SIB indicates that level two is congested at the transmitting Signalling point.")
cgspLinkTransmittedSIBs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTransmittedSIBs.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTransmittedSIBs.setDescription("The number of status indicator 'busy' link status signal units transmitted on this link. The SIB indicates that level two is congested at the transmitting Signalling point.")
cgspLinkMtp2T01Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T01Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T01Counts.setDescription('The number of times the alignment ready timer has expired on this link.')
cgspLinkMtp2T02Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T02Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T02Counts.setDescription('The number of times the not alignment ready timer has expired on this link.')
cgspLinkMtp2T03Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T03Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T03Counts.setDescription('The number of times the aligned timer has expired on this link.')
cgspLinkMtp2T04Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T04Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T04Counts.setDescription('The number of times the proving period timer has expired on this link.')
cgspLinkMtp2T05Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T05Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T05Counts.setDescription('The number of times the sending status indicator busy timer has expired on this link.')
cgspLinkMtp2T06Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T06Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T06Counts.setDescription('The number of times the remote congestion timer has expired on this link(Q752/1.6).')
cgspLinkMtp2T07Counts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkMtp2T07Counts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkMtp2T07Counts.setDescription('The number of times the excessive delay of acknowledgement timer has expired on this link(Q752/1.4).')
cgspLinkOMAERMCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkOMAERMCounts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkOMAERMCounts.setDescription('The number of times the Alignment Error Rate Monitor procedure was started on this link.')
cgspLinkOMAERMFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkOMAERMFailCounts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkOMAERMFailCounts.setDescription('The number of times the Alignment Error Rate Monitor procedure failed on this link.')
cgspLinkOMSURMCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkOMSURMCounts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkOMSURMCounts.setDescription('The number of times the Signal Unit Error Rate Monitor procedure was started on this link.')
cgspLinkOMSURMFailCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkOMSURMFailCounts.setStatus('current')
if mibBuilder.loadTexts: cgspLinkOMSURMFailCounts.setDescription('The number of times the Signal Unit Error Rate Monitor procedure failed on this link.')
cgspLinkPlanCapacityRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 78), CgspLinkCapacity()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkPlanCapacityRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkPlanCapacityRcvd.setDescription('An estimate of the number of bits per second that is expected to be received from this link. This object will be used in combination with cgspUtilSampleInterval, cgspUtilThreshold, cgspUtilThreshold and cgspLinkUtilThresholdRcvd to generate the ciscoGspLinkRcvdUtilChange notification.')
cgspLinkUtilThresholdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 79), CgspPercentThreshold()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkUtilThresholdRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilThresholdRcvd.setDescription('This object specifies the threshold used to to generate the ciscoGspLinkRcvdUtilChange notification. The value of zero indicates the threshold has not been defined at the link level and the value from the cgspLinksetUtilThresholdRcvd or cgspUtilThreshold objects will be used to generate the ciscoGspLinkRcvdUtilChange notification.')
cgspLinkUtilizationRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 80), CgspLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilizationRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilizationRcvd.setDescription('An estimate of the utilization of this link for traffic received on this link in the prior time period defined by the cgspUtilSampleInterval object.')
cgspLinkUtilStateRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 81), CgspLinkUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilStateRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilStateRcvd.setDescription('Link Utilization State for inbound traffic.')
cgspLinkL2BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkL2BytesRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkL2BytesRcvd.setDescription('A count of the bytes received on the link including the additional bytes required by underlying protocols. This provides a transport independent mechanism for collection information on link utilization.')
cgspLinkPlanCapacitySent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 83), CgspLinkCapacity()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkPlanCapacitySent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkPlanCapacitySent.setDescription('An estimate of the number of bits per second that is expected to be sent on this link. This object will be used in combination with cgspUtilSampleInterval, cgspUtilThreshold and cgspLinkUtilThresholdRcvd to generate the ciscoGspLinkSentUtilChange notification.')
cgspLinkUtilThresholdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 84), CgspPercentThreshold()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkUtilThresholdSent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilThresholdSent.setDescription('This object specifies the threshold used to generate the ciscoGspLinkRcvdUtilChange notification. The value of zero indicates the threshold has not been defined at the link level and the value from the cgspLinksetUtilThresholdRcvd or cgspUtilThreshold objects will be used to generate the ciscoGspLinkRcvdUtilChange notification.')
cgspLinkUtilizationSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 85), CgspLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilizationSent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilizationSent.setDescription('An estimate of the utilization of this link for traffic sent on this link in the prior time period defined by the cgspUtilSampleInterval object.')
cgspLinkUtilStateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 86), CgspLinkUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilStateSent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilStateSent.setDescription('Link Utilization State for out bound traffic.')
cgspLinkL2BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkL2BytesSent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkL2BytesSent.setDescription('A count of the bytes sent on the link including the additional bytes required by underlying protocols. This provides a transport independent mechanism for collection information on link utilization.')
cgspLinkTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 88), CgspLinkTestResults()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkTestResult.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTestResult.setDescription('This object provides information on result from signalling link test received on this link.')
cgspLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 89), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspLinkTable following the RowStatus textual convention.')
cgspLinkSctpAssociationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkSctpAssociationId.setStatus('current')
if mibBuilder.loadTexts: cgspLinkSctpAssociationId.setDescription("If the link type specified by cgspLinkType is 'sctpIp', this is the association identifier defined in the Stream Control Transmission Protocol(SCTP) MIB. Where value greater than zero indicates a valid association. The zero value indicates an association does not exist for this link. This value will always be set to zero one when cgspLinkType is not equal to the 'sctpIp' value. This object replaces cgspLinkSctpAssociation and allows association identifiers to be larger than 65,535.")
cgspLinkQ752T1E12 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 91), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E12.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E12.setDescription("Count of 'Signalling Link Restoration' events Q752/1.12.")
cgspLinkQ752T1E12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 92), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T1E12Errors.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T1E12Errors.setDescription("Count of 'Signalling Link Restoration' error events related to Q752/1.12. i.e., the number of times the link restoration was attempted and the link was not recovered.")
cgspLinkQ752T2E11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 93), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E11.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E11.setDescription("Count of 'remote processor recovery' events Q752/2.11. The standard only requires that events are issued.")
cgspLinkQ752T2E17 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 94), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E17.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E17.setDescription('Count of local uninhibition Q752/2.17. The standard only requires that events are issued.')
cgspLinkQ752T2E19 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 95), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkQ752T2E19.setStatus('current')
if mibBuilder.loadTexts: cgspLinkQ752T2E19.setDescription('Count of remote uninhibition Q752/2.19. The standard only requires that events are issued.')
cgspLinkRxCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 1, 1, 96), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkRxCongestionState.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRxCongestionState.setDescription('The Signalling link Received Side congestion status of this link. 0 abate, 1 onset is the received side congestion level')
cgspLinkTimerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 2), )
if mibBuilder.loadTexts: cgspLinkTimerTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTimerTable.setDescription('A table that contains the timer used to configure timer values specific to a particular Link. Entries are added to this table via cgspLinkTimerRowStatus in accordance with the RowStatus convention.')
cgspLinkTimerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkSlc"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkTimerNumber"))
if mibBuilder.loadTexts: cgspLinkTimerTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTimerTableEntry.setDescription('This table is used to configure all MTP3 timer values that apply to links. The values apply to a particular link.')
cgspLinkTimerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 2, 1, 1), CgspTimerNumbers())
if mibBuilder.loadTexts: cgspLinkTimerNumber.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTimerNumber.setDescription('Index into table containing timer information.')
cgspLinkTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 2, 1, 2), CgspTimerValue()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkTimerValue.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTimerValue.setDescription('Value of timer selected by cgspLinkTimerNumber object.')
cgspLinkTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspLinkTimerRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspLinkTimerTable following the RowStatus textual convention.')
cgspLinkRemoteIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3), )
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrTable.setDescription('A table that contains the remote IP addresses used to configure a particular Link. Entries are added to this table via cgspLinkRemoteIpAddrRowStatus in accordance with the RowStatus convention.')
cgspLinkRemoteIpAddrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkSlc"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkRemoteIpAddrNumber"))
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrTableEntry.setDescription('A list of remote IP addresses per Link.')
cgspLinkRemoteIpAddrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrNumber.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrNumber.setDescription('This object specifies the index for the IP addresses in the remote IP Address table')
cgspLinkRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrType.setDescription('This object contains the type of the local IP address used to create an association.')
cgspLinkRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddress.setDescription('This object contains the remote IP address used to create the association with the partner of this association.')
cgspLinkRemoteIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgspLinkRemoteIpAddrRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cgspLinkRemoteIpAddrTable following the RowStatus textual convention.')
cgspLinkUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4), )
if mibBuilder.loadTexts: cgspLinkUtilTable.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilTable.setDescription('A table that contains a history of the cgspLinkUtilizationRcvd and cgspLinkUtilizationRcvd objects. In order to properly manage network capacity it is necessary to collect utilization information during short interval. These intervals are less than 5 minutes and can be as low as 1 minute. The number of links supported by a signalling point prevent polling each signalling point to collect information. This table is provided to allow an NMS to collect the information during a normal poll cycle.')
cgspLinkUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GSP-MIB", "cgspLinksetName"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkSlc"), (0, "CISCO-ITP-GSP-MIB", "cgspLinkUtilIndex"))
if mibBuilder.loadTexts: cgspLinkUtilTableEntry.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilTableEntry.setDescription('A collection of entries used to store a history link utilization values. Values from cgspLinkUtilizationRcvd and cgspLinkUtilizationSent objects are saved in cgspLinkUtilRcvd and cgspLinkUtilSent.')
cgspLinkUtilIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)))
if mibBuilder.loadTexts: cgspLinkUtilIndex.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilIndex.setDescription('Index used to access historical link utilization information. Entry one corresponds to the most recent utilization window for the length of time specified by the cgspUtilSampleInterval object. Example of utilization history using default values. Current Time: 10:42 am Sample Interval: 300 seconds cgspLinkUtilIndex [1] Window from 10:36-10:41 [2] Window from 10:31-10:36 [3] Window from 10:26-10:31 . . [n] The index ranges from one to a maximum of sixty entries. The actual number of entries will depend on the implementation and available resources.')
cgspLinkUtilRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4, 1, 2), CgspLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilRcvd.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilRcvd.setDescription('An estimate of the utilization of this link for traffic received on this link in the time period defined by the cgspUtilSampleInterval object.')
cgspLinkUtilSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4, 1, 3), CgspLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilSent.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilSent.setDescription('An estimate of the utilization of this link for traffic transmitted on this link in the time period defined by the cgspUtilSampleInterval object.')
cgspLinkUtilEndTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 6, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgspLinkUtilEndTimestamp.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilEndTimestamp.setDescription('This timestamp indicates when time period ended for this sample.')
cgspLsStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspLsStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspLsStateChangeNotifEnabled.setDescription("The signalling point linkset notification truth value. 'true' Indicates that ciscoGspLinksetStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGspLinksetStateChange notification generation is disabled.")
cgspLnkStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspLnkStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspLnkStateChangeNotifEnabled.setDescription("The signalling point link notification truth value. 'true' Indicates that ciscoGspLinkStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGspLinkStateChange notification generation is disabled.")
cgspCongestionNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspCongestionNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspCongestionNotifEnabled.setDescription("The signalling point congestion notification truth value. 'true' Indicates that ciscoGspCongestionChange and ciscoGspRxCongestionChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGspCongestionChange and ciscoGspRxCongestionChange notification generation is disabled.")
cgspLinkUtilNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspLinkUtilNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspLinkUtilNotifEnabled.setDescription("The signalling point link utilization notification truth value. 'true' Indicates that the notification of link utilization has been enabled. That is, the notification generation is enabled. 'false' Indicates that the notification link utilization has been disabled.")
cgspIsolationNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspIsolationNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspIsolationNotifEnabled.setDescription("The isolation notification truth value. 'true' Indicates that the notification of isolation has been enabled. That is, the notification generation is enabled. 'false' Indicates that the notification of isolation has been disabled.")
cgspUPUNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 7, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgspUPUNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgspUPUNotifEnabled.setDescription("A control to enable or disable both ciscoGspUPUReceived and ciscoGspUPUTransmitted notifications as follows: 'true' Indicates that the ciscoGspUPUReceived and ciscoGspUPUTransmitted notification generation is enabled. 'false' Indicates that ciscoGspUPUReceived and ciscoGspUPUTransmitted notification generation is disabled.")
cgspUPUIntervalDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 8, 1), Unsigned32()).setUnits('seconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgspUPUIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: cgspUPUIntervalDuration.setDescription('Duration elapsed since the start of the cgspUPUNotifWindowTime interval. This duration value can range from 0 upto cgspUPUNotifWindowTime. For the notifications generated at the end of the interval, this value will be equal to cgspUPUNotifWindowTime.')
cgspIntervalUPUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 336, 1, 8, 2), Unsigned32()).setUnits('MSUs').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgspIntervalUPUs.setStatus('current')
if mibBuilder.loadTexts: cgspIntervalUPUs.setDescription('Number of UPU MSUs received or transmitted during this specific cgspUPUIntervalDuration interval.')
ciscoGspLinksetStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 1)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetState"))
if mibBuilder.loadTexts: ciscoGspLinksetStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinksetStateChange.setDescription('The notification generated when a linkset changes to a new state. The value of cgspLinksetState indicates the new state.')
ciscoGspLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 2)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkState"), ("CISCO-ITP-GSP-MIB", "cgspLinkReason"), ("CISCO-ITP-GSP-MIB", "cgspLinkTestResult"))
if mibBuilder.loadTexts: ciscoGspLinkStateChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkStateChange.setDescription('The notification generated when a link changes to a new state. The value of cgspLinkState indicates the new state.')
ciscoGspCongestionChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 3)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionState"))
if mibBuilder.loadTexts: ciscoGspCongestionChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspCongestionChange.setDescription('The notification generated when a link changes to a new congestion level as specified by cgspLinkCongestionState object for Transmission Side congestion.')
ciscoGspLinkRcvdUtilChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 4)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationRcvd"))
if mibBuilder.loadTexts: ciscoGspLinkRcvdUtilChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkRcvdUtilChange.setDescription('The notification provide is generated when the cgspLinkUtilStateRcvd changes states.')
ciscoGspLinkSentUtilChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 5)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationSent"))
if mibBuilder.loadTexts: ciscoGspLinkSentUtilChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkSentUtilChange.setDescription('The notification provide is generated when the cgspLinkUtilStateSent changes states.')
ciscoGspIsolation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 6)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspInstDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspInstDescription"))
if mibBuilder.loadTexts: ciscoGspIsolation.setStatus('current')
if mibBuilder.loadTexts: ciscoGspIsolation.setDescription('This notification indicates the instance specified by cgspInstDisplayName and cgspInstDescription has become isolated. All linkset used to connect MTP3 node (instance) are unavailable. Isolation is ended when any linkset supported by this instance reaches the active state.')
ciscoGspUPUReceived = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 8)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspInstUserPartDisplay"), ("CISCO-ITP-GSP-MIB", "cgspUPUIntervalDuration"), ("CISCO-ITP-GSP-MIB", "cgspIntervalUPUs"))
if mibBuilder.loadTexts: ciscoGspUPUReceived.setStatus('current')
if mibBuilder.loadTexts: ciscoGspUPUReceived.setDescription('The notification is generated when an UPU MSU is received from a remote signalling point, for a specific instance and user part for the first time in the configured cgspUPUNotifWindowTime. For cases when there is a non-zero number of UPU MSUs received, this notification will be sent at the end of the cgspUPUNotifWindowTime interval, with cgspIntervalUPUs indicating the total count of UPU MSUs received for that specific instance and user part during the entire cgspUPUNotifWindowTime interval Q752/5.6.')
ciscoGspUPUTransmitted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 9)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspInstUserPartDisplay"), ("CISCO-ITP-GSP-MIB", "cgspUPUIntervalDuration"), ("CISCO-ITP-GSP-MIB", "cgspIntervalUPUs"))
if mibBuilder.loadTexts: ciscoGspUPUTransmitted.setStatus('current')
if mibBuilder.loadTexts: ciscoGspUPUTransmitted.setDescription('The notification is generated when an UPU MSU is transmitted to a remote signalling point, for a specific instance and user part for the first time in the configured cgspUPUNotifWindowTime. For cases when there is a non-zero number of UPU MSUs received, this notification will be sent at the end of the cgspUPUNotifWindowTime interval, with cgspIntervalUPUs indicating the total count of UPU MSUs transmitted for that specific instance and user part during the entire cgspUPUNotifWindowTime interval Q752/5.7.')
ciscoGspRxCongestionChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 336, 0, 10)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkRxCongestionState"))
if mibBuilder.loadTexts: ciscoGspRxCongestionChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGspRxCongestionChange.setDescription('The notification generated when a link changes to a new congestion level as specified by cgspLinkRxCongestionstate object for Received side congestion')
ciscoGspMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1))
ciscoGspMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2))
ciscoGspMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 1)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBCompliance = ciscoGspMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 2)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBComplianceRev1 = ciscoGspMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 3)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupRev1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBComplianceRev2 = ciscoGspMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 4)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupRev1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstUPUGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsInfoGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup2"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBComplianceRev3 = ciscoGspMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 5)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupRev1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstUPUGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsInfoGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup2"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup2"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstSccpWrrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBComplianceRev4 = ciscoGspMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspMIBComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 1, 6)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspProfileGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstanceGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspPointCodeGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinksetTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTimerGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRemoteIpGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkUtilGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupRev1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspScalarsGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstUPUGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsInfoGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsEnableGroupSup2"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup2"), ("CISCO-ITP-GSP-MIB", "ciscoGspInstSccpWrrGroup"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkTableEntryGroupSup1"), ("CISCO-ITP-GSP-MIB", "ciscoGspNotificationsGroupSup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspMIBComplianceRev5 = ciscoGspMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoGspMIBComplianceRev5.setDescription('The compliance statement for entities which implement the CISCO-ITP-GSP-MIB')
ciscoGspScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 1)).setObjects(("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspUtilSampleInterval"), ("CISCO-ITP-GSP-MIB", "cgspUtilThreshold"), ("CISCO-ITP-GSP-MIB", "cgspUtilAbateDelta"), ("CISCO-ITP-GSP-MIB", "cgspPlanCapacityDefault"), ("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspScalarsGroup = ciscoGspScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspScalarsGroup.setDescription('Scalars Group for Gateway Signalling Point.')
ciscoGspProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 2)).setObjects(("CISCO-ITP-GSP-MIB", "cgspProfileVariant"), ("CISCO-ITP-GSP-MIB", "cgspProfileMtp2BundleTimer"), ("CISCO-ITP-GSP-MIB", "cgspProfileMtp2SendQueueDepth"), ("CISCO-ITP-GSP-MIB", "cgspProfileRowStatus"), ("CISCO-ITP-GSP-MIB", "cgspProfileTimerValue"), ("CISCO-ITP-GSP-MIB", "cgspProfileTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspProfileGroup = ciscoGspProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspProfileGroup.setDescription('Profile Group for Gateway Signalling Point.')
ciscoGspInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 3)).setObjects(("CISCO-ITP-GSP-MIB", "cgspInstNetworkIndicator"), ("CISCO-ITP-GSP-MIB", "cgspInstVariant"), ("CISCO-ITP-GSP-MIB", "cgspInstDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspInstDescription"), ("CISCO-ITP-GSP-MIB", "cgspInstTFR"), ("CISCO-ITP-GSP-MIB", "cgspInstCongestionsLevels"), ("CISCO-ITP-GSP-MIB", "cgspInstFastRestart"), ("CISCO-ITP-GSP-MIB", "cgspInstDistSccpUnseq"), ("CISCO-ITP-GSP-MIB", "cgspInstSummaryRoutingException"), ("CISCO-ITP-GSP-MIB", "cgspInstNumber"), ("CISCO-ITP-GSP-MIB", "cgspInstRouteTableName"), ("CISCO-ITP-GSP-MIB", "cgspInstRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspInstanceGroup = ciscoGspInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspInstanceGroup.setDescription('Instance of Signalling Point.')
ciscoGspInstTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 4)).setObjects(("CISCO-ITP-GSP-MIB", "cgspInstTimerValue"), ("CISCO-ITP-GSP-MIB", "cgspInstTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspInstTimerGroup = ciscoGspInstTimerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspInstTimerGroup.setDescription('Timers defined for each Instance of Signalling Point.')
ciscoGspPointCodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 5)).setObjects(("CISCO-ITP-GSP-MIB", "cgspPointCodeType"), ("CISCO-ITP-GSP-MIB", "cgspPointCodeDisplay"), ("CISCO-ITP-GSP-MIB", "cgspPointCodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspPointCodeGroup = ciscoGspPointCodeGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspPointCodeGroup.setDescription('Pointcode defined for each Instance of Signalling Point.')
ciscoGspLinksetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 6)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinksetSourcePointCode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetSourceDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentPointCode"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentDisplayPC"), ("CISCO-ITP-GSP-MIB", "cgspLinksetState"), ("CISCO-ITP-GSP-MIB", "cgspLinksetInboundAcl"), ("CISCO-ITP-GSP-MIB", "cgspLinksetOutboundAcl"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAccountingMtp3"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAccountingGtt"), ("CISCO-ITP-GSP-MIB", "cgspLinksetNumLinks"), ("CISCO-ITP-GSP-MIB", "cgspLinksetDurationInService"), ("CISCO-ITP-GSP-MIB", "cgspLinksetDurationOutService"), ("CISCO-ITP-GSP-MIB", "cgspLinksetActPriority"), ("CISCO-ITP-GSP-MIB", "cgspLinksetDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinksetDescription"), ("CISCO-ITP-GSP-MIB", "cgspLinksetRotateSlsEnable"), ("CISCO-ITP-GSP-MIB", "cgspLinksetRotateSlsShift"), ("CISCO-ITP-GSP-MIB", "cgspLinksetProfileName"), ("CISCO-ITP-GSP-MIB", "cgspLinksetAdjacentInst"), ("CISCO-ITP-GSP-MIB", "cgspLinksetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinksetGroup = ciscoGspLinksetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinksetGroup.setDescription('linkset objects .')
ciscoGspLinksetTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 7)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinksetTimerValue"), ("CISCO-ITP-GSP-MIB", "cgspLinksetTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinksetTimerGroup = ciscoGspLinksetTimerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinksetTimerGroup.setDescription('Timers defined for each Linkset.')
ciscoGspLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 8)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkDescription"), ("CISCO-ITP-GSP-MIB", "cgspLinkState"), ("CISCO-ITP-GSP-MIB", "cgspLinkReason"), ("CISCO-ITP-GSP-MIB", "cgspLinkType"), ("CISCO-ITP-GSP-MIB", "cgspLinkifIndex"), ("CISCO-ITP-GSP-MIB", "cgspLinkSctpAssociation"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepth"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepthHigh"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepthHighRT"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionState"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate1"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate2"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate3"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset1"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset2"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset3"), ("CISCO-ITP-GSP-MIB", "cgspLinkSigLinkTest"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E8"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E9"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E10"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E11"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E6"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E9"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E10"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E15"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E16"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E18"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E2Packets"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E2Bytes"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E4"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E6"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L3"), ("CISCO-ITP-GSP-MIB", "cgspLinkLocalPeerPort"), ("CISCO-ITP-GSP-MIB", "cgspLinkRemotePeerPort"), ("CISCO-ITP-GSP-MIB", "cgspLinkQosClass"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkDroppedPkts"), ("CISCO-ITP-GSP-MIB", "cgspLinkTransmittedLSSUs"), ("CISCO-ITP-GSP-MIB", "cgspLinkReceivedLSSUs"), ("CISCO-ITP-GSP-MIB", "cgspLinkProtocolDetails"), ("CISCO-ITP-GSP-MIB", "cgspLinkLsacState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTsrcState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocLocalBSNT"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocRemoteBSNT"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcbcState"), ("CISCO-ITP-GSP-MIB", "cgspLinkReceivedSIBs"), ("CISCO-ITP-GSP-MIB", "cgspLinkTransmittedSIBs"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T01Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T02Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T03Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T04Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T05Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T06Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T07Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMAERMCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMAERMFailCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMSURMCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMSURMFailCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkPlanCapacityRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilThresholdRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkL2BytesRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkPlanCapacitySent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilThresholdSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkL2BytesSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkTestResult"), ("CISCO-ITP-GSP-MIB", "cgspLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkGroup = ciscoGspLinkGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGspLinkGroup.setDescription('SP link objects.')
ciscoGspLinkTimerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 9)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkTimerValue"), ("CISCO-ITP-GSP-MIB", "cgspLinkTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkTimerGroup = ciscoGspLinkTimerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkTimerGroup.setDescription('Timers defined for each Link.')
ciscoGspLinkRemoteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 10)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkRemoteIpAddrType"), ("CISCO-ITP-GSP-MIB", "cgspLinkRemoteIpAddress"), ("CISCO-ITP-GSP-MIB", "cgspLinkRemoteIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkRemoteIpGroup = ciscoGspLinkRemoteIpGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkRemoteIpGroup.setDescription('Remote IP addresses for each Link.')
ciscoGspLinkUtilGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 11)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkUtilRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilEndTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkUtilGroup = ciscoGspLinkUtilGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkUtilGroup.setDescription('Utilization history for each Link.')
ciscoGspNotificationsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 12)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLsStateChangeNotifEnabled"), ("CISCO-ITP-GSP-MIB", "cgspLnkStateChangeNotifEnabled"), ("CISCO-ITP-GSP-MIB", "cgspCongestionNotifEnabled"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsEnableGroup = ciscoGspNotificationsEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsEnableGroup.setDescription('SP enable notification objects.')
ciscoGspNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 13)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspLinksetStateChange"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkStateChange"), ("CISCO-ITP-GSP-MIB", "ciscoGspCongestionChange"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkRcvdUtilChange"), ("CISCO-ITP-GSP-MIB", "ciscoGspLinkSentUtilChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsGroup = ciscoGspNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsGroup.setDescription('SP notifications.')
ciscoGspLinkGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 14)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkDescription"), ("CISCO-ITP-GSP-MIB", "cgspLinkState"), ("CISCO-ITP-GSP-MIB", "cgspLinkReason"), ("CISCO-ITP-GSP-MIB", "cgspLinkType"), ("CISCO-ITP-GSP-MIB", "cgspLinkifIndex"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepth"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepthHigh"), ("CISCO-ITP-GSP-MIB", "cgspLinkXmitQueueDepthHighRT"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionState"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate1"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate2"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionAbate3"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset1"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset2"), ("CISCO-ITP-GSP-MIB", "cgspLinkCongestionOnset3"), ("CISCO-ITP-GSP-MIB", "cgspLinkSigLinkTest"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E8"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E9"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E10"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E11"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E6"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E9"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E10"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E15"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E16"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E18"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E2Packets"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E2Bytes"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E4"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E5"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E6"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E7"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E10L3"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L1"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L2"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T3E11L3"), ("CISCO-ITP-GSP-MIB", "cgspLinkLocalPeerPort"), ("CISCO-ITP-GSP-MIB", "cgspLinkRemotePeerPort"), ("CISCO-ITP-GSP-MIB", "cgspLinkQosClass"), ("CISCO-ITP-GSP-MIB", "cgspLinkDisplayName"), ("CISCO-ITP-GSP-MIB", "cgspLinkDroppedPkts"), ("CISCO-ITP-GSP-MIB", "cgspLinkTransmittedLSSUs"), ("CISCO-ITP-GSP-MIB", "cgspLinkReceivedLSSUs"), ("CISCO-ITP-GSP-MIB", "cgspLinkProtocolDetails"), ("CISCO-ITP-GSP-MIB", "cgspLinkLsacState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTsrcState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocState"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocLocalBSNT"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcocRemoteBSNT"), ("CISCO-ITP-GSP-MIB", "cgspLinkTcbcState"), ("CISCO-ITP-GSP-MIB", "cgspLinkReceivedSIBs"), ("CISCO-ITP-GSP-MIB", "cgspLinkTransmittedSIBs"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T01Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T02Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T03Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T04Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T05Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T06Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkMtp2T07Counts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMAERMCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMAERMFailCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMSURMCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkOMSURMFailCounts"), ("CISCO-ITP-GSP-MIB", "cgspLinkPlanCapacityRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilThresholdRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkL2BytesRcvd"), ("CISCO-ITP-GSP-MIB", "cgspLinkPlanCapacitySent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilThresholdSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilizationSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkUtilStateSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkL2BytesSent"), ("CISCO-ITP-GSP-MIB", "cgspLinkTestResult"), ("CISCO-ITP-GSP-MIB", "cgspLinkRowStatus"), ("CISCO-ITP-GSP-MIB", "cgspLinkSctpAssociationId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkGroupRev1 = ciscoGspLinkGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkGroupRev1.setDescription('SP link objects.')
ciscoGspNotificationsEnableGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 15)).setObjects(("CISCO-ITP-GSP-MIB", "cgspIsolationNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsEnableGroupSup1 = ciscoGspNotificationsEnableGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsEnableGroupSup1.setDescription('Isolation notification enable.')
ciscoGspNotificationsGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 16)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspIsolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsGroupSup1 = ciscoGspNotificationsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsGroupSup1.setDescription('Isolation notification.')
ciscoGspLinkGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 17)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E12"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T1E12Errors"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E11"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E17"), ("CISCO-ITP-GSP-MIB", "cgspLinkQ752T2E19"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkGroupSup1 = ciscoGspLinkGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkGroupSup1.setDescription('Additional Link statistics.')
ciscoGspScalarsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 18)).setObjects(("CISCO-ITP-GSP-MIB", "cgspUPUNotifWindowTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspScalarsGroupSup1 = ciscoGspScalarsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspScalarsGroupSup1.setDescription('Scalar Group supplements.')
ciscoGspInstUPUGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 20)).setObjects(("CISCO-ITP-GSP-MIB", "cgspInstSIUPUReceived"), ("CISCO-ITP-GSP-MIB", "cgspInstSIUPUTransmitted"), ("CISCO-ITP-GSP-MIB", "cgspInstUserPartDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspInstUPUGroup = ciscoGspInstUPUGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspInstUPUGroup.setDescription('SS7 Destination and Service Indicator group.')
ciscoGspNotificationsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 21)).setObjects(("CISCO-ITP-GSP-MIB", "cgspUPUIntervalDuration"), ("CISCO-ITP-GSP-MIB", "cgspIntervalUPUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsInfoGroup = ciscoGspNotificationsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsInfoGroup.setDescription('Notifications Info Group.')
ciscoGspNotificationsEnableGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 22)).setObjects(("CISCO-ITP-GSP-MIB", "cgspUPUNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsEnableGroupSup2 = ciscoGspNotificationsEnableGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsEnableGroupSup2.setDescription('UPU notifications enable.')
ciscoGspNotificationsGroupSup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 23)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspUPUReceived"), ("CISCO-ITP-GSP-MIB", "ciscoGspUPUTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsGroupSup2 = ciscoGspNotificationsGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsGroupSup2.setDescription('Adjacent SP accessibility notification, UPU sent and received notifications.')
ciscoGspInstSccpWrrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 24)).setObjects(("CISCO-ITP-GSP-MIB", "cgspInstSccpWrrOpcShift"), ("CISCO-ITP-GSP-MIB", "cgspInstSccpWrrOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspInstSccpWrrGroup = ciscoGspInstSccpWrrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGspInstSccpWrrGroup.setDescription('SCCP GTT weighted loadshare group.')
ciscoGspLinkTableEntryGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 25)).setObjects(("CISCO-ITP-GSP-MIB", "cgspLinkRxCongestionState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspLinkTableEntryGroupSup1 = ciscoGspLinkTableEntryGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGspLinkTableEntryGroupSup1.setDescription('cgspLinkRxCongestionstate object for Received side congestion')
ciscoGspNotificationsGroupSup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 336, 2, 2, 26)).setObjects(("CISCO-ITP-GSP-MIB", "ciscoGspRxCongestionChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGspNotificationsGroupSup3 = ciscoGspNotificationsGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoGspNotificationsGroupSup3.setDescription('Link Receive side congestion notication.')
mibBuilder.exportSymbols("CISCO-ITP-GSP-MIB", cgspPointCodeTableEntry=cgspPointCodeTableEntry, cgspLinksetTimerTable=cgspLinksetTimerTable, cgspLinkPlanCapacityRcvd=cgspLinkPlanCapacityRcvd, cgspLinkQ752T2E15=cgspLinkQ752T2E15, cgspInstDescription=cgspInstDescription, cgspLinkQ752T1E2=cgspLinkQ752T1E2, cgspLinksetAdjacentPointCode=cgspLinksetAdjacentPointCode, cgspLinkQ752T3E3=cgspLinkQ752T3E3, cgspLinkQ752T2E11=cgspLinkQ752T2E11, ciscoGspIsolation=ciscoGspIsolation, CgspSS7Variant=CgspSS7Variant, cgspPointCodeDisplay=cgspPointCodeDisplay, ciscoGspUPUReceived=ciscoGspUPUReceived, cgspLinkQ752T1E5=cgspLinkQ752T1E5, cgspLinkTimerRowStatus=cgspLinkTimerRowStatus, cgspLinksetSourcePointCode=cgspLinksetSourcePointCode, cgspLinkCongestionAbate1=cgspLinkCongestionAbate1, cgspInstTFR=cgspInstTFR, cgspLinksetAdjacentDisplayPC=cgspLinksetAdjacentDisplayPC, cgspLinkUtilStateRcvd=cgspLinkUtilStateRcvd, cgspPointCodeNi=cgspPointCodeNi, cgspLinkUtilSent=cgspLinkUtilSent, ciscoGspMIBNotifs=ciscoGspMIBNotifs, cgspLinkQ752T3E11L2=cgspLinkQ752T3E11L2, ciscoGspLinkRemoteIpGroup=ciscoGspLinkRemoteIpGroup, ciscoGspLinkTimerGroup=ciscoGspLinkTimerGroup, cgspInstDisplayName=cgspInstDisplayName, ciscoGspMIBGroups=ciscoGspMIBGroups, CgspDisplayInstanceUserPart=CgspDisplayInstanceUserPart, ciscoGspNotificationsEnableGroupSup1=ciscoGspNotificationsEnableGroupSup1, cgspUPUNotifWindowTime=cgspUPUNotifWindowTime, cgspLinkifIndex=cgspLinkifIndex, cgspProfileVariant=cgspProfileVariant, cgspProfile=cgspProfile, cgspCLLICode=cgspCLLICode, cgspLinksetState=cgspLinksetState, cgspLinkQ752T3E11L3=cgspLinkQ752T3E11L3, cgspProfileTimerRowStatus=cgspProfileTimerRowStatus, cgspLinkMtp2T07Counts=cgspLinkMtp2T07Counts, ciscoGspMIBComplianceRev5=ciscoGspMIBComplianceRev5, cgspLink=cgspLink, cgspLinkRemoteIpAddress=cgspLinkRemoteIpAddress, ciscoGspMIBObjects=ciscoGspMIBObjects, CgspLinkTestResults=CgspLinkTestResults, cgspInstUPUTableEntry=cgspInstUPUTableEntry, ciscoGspNotificationsInfoGroup=ciscoGspNotificationsInfoGroup, cgspLinksetAdjacentInst=cgspLinksetAdjacentInst, ciscoGspMIBComplianceRev2=ciscoGspMIBComplianceRev2, cgspLinksetActPriority=cgspLinksetActPriority, ciscoGspMIBConform=ciscoGspMIBConform, cgspLinkOMAERMCounts=cgspLinkOMAERMCounts, cgspInstTimerTableEntry=cgspInstTimerTableEntry, cgspLinkSigLinkTest=cgspLinkSigLinkTest, cgspLinksetAccountingMtp3=cgspLinksetAccountingMtp3, cgspLinkQ752T2E17=cgspLinkQ752T2E17, ciscoGspNotificationsGroupSup2=ciscoGspNotificationsGroupSup2, cgspLinkQ752T3E10L2=cgspLinkQ752T3E10L2, cgspProfileMtp2SendQueueDepth=cgspProfileMtp2SendQueueDepth, cgspLinkDescription=cgspLinkDescription, cgspLinkUtilIndex=cgspLinkUtilIndex, ciscoGspScalarsGroup=ciscoGspScalarsGroup, cgspPointCodeBin=cgspPointCodeBin, cgspLinkSctpAssociation=cgspLinkSctpAssociation, ciscoGspMIBCompliances=ciscoGspMIBCompliances, cgspUPUIntervalDuration=cgspUPUIntervalDuration, ciscoGspMIBCompliance=ciscoGspMIBCompliance, cgspLinkUtilizationSent=cgspLinkUtilizationSent, ciscoGspLinkGroupSup1=ciscoGspLinkGroupSup1, cgspLinkQ752T3E11L1=cgspLinkQ752T3E11L1, cgspLinkState=cgspLinkState, cgspLinksetRotateSlsEnable=cgspLinksetRotateSlsEnable, cgspLinkQ752T1E10=cgspLinkQ752T1E10, cgspLinkQ752T2E16=cgspLinkQ752T2E16, cgspLinkRemoteIpAddrTableEntry=cgspLinkRemoteIpAddrTableEntry, cgspLinkRemoteIpAddrNumber=cgspLinkRemoteIpAddrNumber, cgspInstTimerValue=cgspInstTimerValue, cgspLinkQ752T1E3=cgspLinkQ752T1E3, cgspLinkUtilEndTimestamp=cgspLinkUtilEndTimestamp, cgspLinkMtp2T06Counts=cgspLinkMtp2T06Counts, cgspLinkTableEntry=cgspLinkTableEntry, cgspLinkTimerValue=cgspLinkTimerValue, cgspLsStateChangeNotifEnabled=cgspLsStateChangeNotifEnabled, ciscoGspLinkSentUtilChange=ciscoGspLinkSentUtilChange, cgspLinkMtp2T03Counts=cgspLinkMtp2T03Counts, cgspInstSIUPUReceived=cgspInstSIUPUReceived, cgspLinksetSourceDisplayPC=cgspLinksetSourceDisplayPC, cgspLinkType=cgspLinkType, cgspPointCodeRowStatus=cgspPointCodeRowStatus, ciscoGspMIB=ciscoGspMIB, cgspLinkUtilTableEntry=cgspLinkUtilTableEntry, cgspLinkQ752T2E9=cgspLinkQ752T2E9, cgspLinkXmitQueueDepth=cgspLinkXmitQueueDepth, ciscoGspInstTimerGroup=ciscoGspInstTimerGroup, cgspLinkL2BytesSent=cgspLinkL2BytesSent, cgspLinkCongestionOnset1=cgspLinkCongestionOnset1, cgspLinkQosClass=cgspLinkQosClass, cgspLinkUtilThresholdRcvd=cgspLinkUtilThresholdRcvd, cgspLinkSlc=cgspLinkSlc, cgspProfileTimerTableEntry=cgspProfileTimerTableEntry, cgspLinkTcbcState=cgspLinkTcbcState, cgspLinkRemotePeerPort=cgspLinkRemotePeerPort, cgspInstRowStatus=cgspInstRowStatus, cgspLinkTcocRemoteBSNT=cgspLinkTcocRemoteBSNT, cgspLinkQ752T3E2Bytes=cgspLinkQ752T3E2Bytes, cgspLinkUtilStateSent=cgspLinkUtilStateSent, cgspLinksetTimerRowStatus=cgspLinksetTimerRowStatus, CgspTimerValue=CgspTimerValue, cgspLinkTransmittedSIBs=cgspLinkTransmittedSIBs, cgspLinkUtilizationRcvd=cgspLinkUtilizationRcvd, cgspLinkUtilRcvd=cgspLinkUtilRcvd, CgspSampleInterval=CgspSampleInterval, cgspLinkUtilNotifEnabled=cgspLinkUtilNotifEnabled, cgspIntervalUPUs=cgspIntervalUPUs, cgspLinkQ752T2E6=cgspLinkQ752T2E6, cgspUPUNotifEnabled=cgspUPUNotifEnabled, cgspLinkTimerTable=cgspLinkTimerTable, cgspIsolationNotifEnabled=cgspIsolationNotifEnabled, cgspLinkXmitQueueDepthHighRT=cgspLinkXmitQueueDepthHighRT, cgspLinkL2BytesRcvd=cgspLinkL2BytesRcvd, cgspLinkReceivedLSSUs=cgspLinkReceivedLSSUs, ciscoGspMIBComplianceRev3=ciscoGspMIBComplianceRev3, cgspLinksetProfileName=cgspLinksetProfileName, cgspPointCodeTable=cgspPointCodeTable, cgspInstSIUPUTransmitted=cgspInstSIUPUTransmitted, cgspLinkRxCongestionState=cgspLinkRxCongestionState, cgspLinkQ752T1E9=cgspLinkQ752T1E9, ciscoGspProfileGroup=ciscoGspProfileGroup, cgspLinkSctpAssociationId=cgspLinkSctpAssociationId, ciscoGspRxCongestionChange=ciscoGspRxCongestionChange, cgspLinkset=cgspLinkset, cgspLinkProtocolDetails=cgspLinkProtocolDetails, cgspInstanceTableEntry=cgspInstanceTableEntry, cgspLinkRemoteIpAddrTable=cgspLinkRemoteIpAddrTable, cgspLinksetInboundAcl=cgspLinksetInboundAcl, cgspLinkQ752T2E5=cgspLinkQ752T2E5, cgspLinkQ752T3E4=cgspLinkQ752T3E4, ciscoGspMIBComplianceRev4=ciscoGspMIBComplianceRev4, cgspLinkCongestionOnset2=cgspLinkCongestionOnset2, cgspLinksetNumLinks=cgspLinksetNumLinks, cgspLinkQ752T1E11=cgspLinkQ752T1E11, cgspLinkLocalPeerPort=cgspLinkLocalPeerPort, cgspProfileTable=cgspProfileTable, cgspLinkPlanCapacitySent=cgspLinkPlanCapacitySent, cgspPointCodeType=cgspPointCodeType, ciscoGspLinkTableEntryGroupSup1=ciscoGspLinkTableEntryGroupSup1, cgspLinkQ752T1E12Errors=cgspLinkQ752T1E12Errors, cgspLinkQ752T3E7=cgspLinkQ752T3E7, cgspLinksetDurationOutService=cgspLinksetDurationOutService, cgspLinksetDisplayName=cgspLinksetDisplayName, cgspInstTimerNumber=cgspInstTimerNumber, CgspLinkUtilization=CgspLinkUtilization, cgspInstSummaryRoutingException=cgspInstSummaryRoutingException, cgspLinkXmitQueueDepthHigh=cgspLinkXmitQueueDepthHigh, cgspInstSccpWrrOpcShift=cgspInstSccpWrrOpcShift, cgspProfileTimerNumber=cgspProfileTimerNumber, cgspUtilAbateDelta=cgspUtilAbateDelta, ciscoGspLinkRcvdUtilChange=ciscoGspLinkRcvdUtilChange, cgspLinkReceivedSIBs=cgspLinkReceivedSIBs, ciscoGspInstanceGroup=ciscoGspInstanceGroup, cgspLinkTimerNumber=cgspLinkTimerNumber, cgspMtp3SI=cgspMtp3SI, PYSNMP_MODULE_ID=ciscoGspMIB, cgspProfileMtp2BundleTimer=cgspProfileMtp2BundleTimer, cgspLinkTable=cgspLinkTable, cgspProfileTimerValue=cgspProfileTimerValue, cgspProfileName=cgspProfileName, cgspLinkMtp2T05Counts=cgspLinkMtp2T05Counts, cgspLnkStateChangeNotifEnabled=cgspLnkStateChangeNotifEnabled, ciscoGspPointCodeGroup=ciscoGspPointCodeGroup, cgspLinkRemoteIpAddrType=cgspLinkRemoteIpAddrType, cgspLinkCongestionAbate2=cgspLinkCongestionAbate2, cgspInstTimerRowStatus=cgspInstTimerRowStatus, cgspLinkQ752T2E7=cgspLinkQ752T2E7, cgspLinkTransmittedLSSUs=cgspLinkTransmittedLSSUs, cgspInstCongestionsLevels=cgspInstCongestionsLevels, cgspLinkQ752T2E1=cgspLinkQ752T2E1, cgspInstUPUTable=cgspInstUPUTable, ciscoGspNotificationsEnableGroupSup2=ciscoGspNotificationsEnableGroupSup2, cgspCongestionNotifEnabled=cgspCongestionNotifEnabled, cgspLinkDroppedPkts=cgspLinkDroppedPkts, cgspLinkQ752T1E8=cgspLinkQ752T1E8, CgspSequenceNumber=CgspSequenceNumber, cgspLinksetAccountingGtt=cgspLinksetAccountingGtt, CgspLinkUtilizationState=CgspLinkUtilizationState, cgspLinkCongestionState=cgspLinkCongestionState, cgspLinkQ752T3E2Packets=cgspLinkQ752T3E2Packets, ciscoGspLinksetStateChange=ciscoGspLinksetStateChange, cgspLinksetDescription=cgspLinksetDescription, cgspLinkQ752T3E10L1=cgspLinkQ752T3E10L1, cgspEventSequenceNumber=cgspEventSequenceNumber, cgspLinksetTable=cgspLinksetTable, cgspLinkReason=cgspLinkReason, cgspInstNetwork=cgspInstNetwork, cgspInstance=cgspInstance, cgspPointCode=cgspPointCode, cgspLinkQ752T3E1=cgspLinkQ752T3E1, cgspLinkQ752T1E1=cgspLinkQ752T1E1, cgspUtilThreshold=cgspUtilThreshold, cgspLinkQ752T2E10=cgspLinkQ752T2E10, cgspLinkOMSURMCounts=cgspLinkOMSURMCounts, cgspLinkOMSURMFailCounts=cgspLinkOMSURMFailCounts, cgspLinkQ752T2E19=cgspLinkQ752T2E19, ciscoGspMIBComplianceRev1=ciscoGspMIBComplianceRev1, cgspLinkTestResult=cgspLinkTestResult, ciscoGspLinkStateChange=ciscoGspLinkStateChange, cgspLinksetTableEntry=cgspLinksetTableEntry, CgspProfileName=CgspProfileName, cgspLinksetName=cgspLinksetName, cgspInstUserPartDisplay=cgspInstUserPartDisplay, cgspLinkTimerTableEntry=cgspLinkTimerTableEntry, ciscoGspNotificationsGroupSup1=ciscoGspNotificationsGroupSup1, ciscoGspScalarsGroupSup1=ciscoGspScalarsGroupSup1, cgspInstTimerTable=cgspInstTimerTable, CgspPercentThreshold=CgspPercentThreshold, cgspLinkDisplayName=cgspLinkDisplayName, cgspProfileRowStatus=cgspProfileRowStatus, cgspLinkRowStatus=cgspLinkRowStatus, cgspLinksetOutboundAcl=cgspLinksetOutboundAcl, cgspLinkQ752T1E12=cgspLinkQ752T1E12, cgspScalars=cgspScalars, cgspInstNumber=cgspInstNumber, cgspLinkQ752T3E10L3=cgspLinkQ752T3E10L3, cgspInstanceTable=cgspInstanceTable, cgspLinksetTimerNumber=cgspLinksetTimerNumber, ciscoGspUPUTransmitted=ciscoGspUPUTransmitted, ciscoGspLinkUtilGroup=ciscoGspLinkUtilGroup, cgspNotificationsInfo=cgspNotificationsInfo, cgspProfileTimerTable=cgspProfileTimerTable, cgspLinkRemoteIpAddrRowStatus=cgspLinkRemoteIpAddrRowStatus, cgspLinkQ752T2E18=cgspLinkQ752T2E18, cgspLinkCongestionAbate3=cgspLinkCongestionAbate3, cgspUtilSampleInterval=cgspUtilSampleInterval, cgspLinkCongestionOnset3=cgspLinkCongestionOnset3, ciscoGspNotificationsGroupSup3=ciscoGspNotificationsGroupSup3, CgspLinkCapacity=CgspLinkCapacity, cgspInstSccpWrrOption=cgspInstSccpWrrOption, cgspLinkLsacState=cgspLinkLsacState, cgspProfileTableEntry=cgspProfileTableEntry, ciscoGspLinksetGroup=ciscoGspLinksetGroup, CItpTcSccpWrrOption=CItpTcSccpWrrOption, cgspInstNetworkIndicator=cgspInstNetworkIndicator, cgspLinksetDurationInService=cgspLinksetDurationInService, ciscoGspLinkGroup=ciscoGspLinkGroup, cgspLinksetTimerTableEntry=cgspLinksetTimerTableEntry, cgspLinkUtilTable=cgspLinkUtilTable, ciscoGspInstSccpWrrGroup=ciscoGspInstSccpWrrGroup, cgspLinkMtp2T01Counts=cgspLinkMtp2T01Counts, CgspTimerNumbers=CgspTimerNumbers, cgspLinksetTimerValue=cgspLinksetTimerValue, ciscoGspInstUPUGroup=ciscoGspInstUPUGroup, cgspInstRouteTableName=cgspInstRouteTableName, cgspInstVariant=cgspInstVariant, cgspLinkOMAERMFailCounts=cgspLinkOMAERMFailCounts, cgspLinkTcocLocalBSNT=cgspLinkTcocLocalBSNT)
mibBuilder.exportSymbols("CISCO-ITP-GSP-MIB", cgspLinkQ752T1E7=cgspLinkQ752T1E7, cgspLinkQ752T3E6=cgspLinkQ752T3E6, cgspLinksetRotateSlsShift=cgspLinksetRotateSlsShift, cgspLinkUtilThresholdSent=cgspLinkUtilThresholdSent, cgspLinkMtp2T02Counts=cgspLinkMtp2T02Counts, cgspInstDistSccpUnseq=cgspInstDistSccpUnseq, ciscoGspNotificationsEnableGroup=ciscoGspNotificationsEnableGroup, cgspInstFastRestart=cgspInstFastRestart, ciscoGspNotificationsGroup=ciscoGspNotificationsGroup, ciscoGspLinkGroupRev1=ciscoGspLinkGroupRev1, cgspNotificationsEnable=cgspNotificationsEnable, cgspLinkTsrcState=cgspLinkTsrcState, cgspLinksetRowStatus=cgspLinksetRowStatus, ciscoGspLinksetTimerGroup=ciscoGspLinksetTimerGroup, cgspLinkTcocState=cgspLinkTcocState, cgspLinkMtp2T04Counts=cgspLinkMtp2T04Counts, cgspPlanCapacityDefault=cgspPlanCapacityDefault, ciscoGspCongestionChange=ciscoGspCongestionChange, cgspLinkQ752T3E5=cgspLinkQ752T3E5)
