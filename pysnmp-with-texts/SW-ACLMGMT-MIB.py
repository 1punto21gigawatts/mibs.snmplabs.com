#
# PySNMP MIB module SW-ACLMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-ACLMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dlink_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-mgmt")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, iso, ObjectIdentity, Counter64, TimeTicks, IpAddress, MibIdentifier, ModuleIdentity, Unsigned32, Integer32, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "iso", "ObjectIdentity", "Counter64", "TimeTicks", "IpAddress", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Integer32", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString")
swAclMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 5))
if mibBuilder.loadTexts: swAclMgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swAclMgmtMIB.setOrganization('enterprise, Inc.')
if mibBuilder.loadTexts: swAclMgmtMIB.setContactInfo(' Customer Service Postal: Tel: E-mail: ')
if mibBuilder.loadTexts: swAclMgmtMIB.setDescription('The Structure of Access Control List Information for the proprietary enterprise.')
swAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 5, 1))
swAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 5, 2))
swACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1), )
if mibBuilder.loadTexts: swACLEthernetTable.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetTable.setDescription("This table contain ACL mask of Ethernet information. Access profiles will be created on the switch by row creation and to define which parts of each incoming frame's layer 2 part of header the switch will examine. Masks can be entered that will be combined with the values the switch finds in the specified frame header fields. ")
swACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLEthernetProfileID"))
if mibBuilder.loadTexts: swACLEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetEntry.setDescription('A list of information about ACL of Ethernet.')
swACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetProfileID.setDescription('The ID of ACL mask entry ,and is unique in the mask list.')
swACLEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUsevlan.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUsevlan.setDescription('Specifies that the switch will examine the VLAN part of each packet header.')
swACLEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setDescription("This object indicates the status of MAC address mask. other(1) - Neither source MAC address nor destination MAC address are masked. dst-mac-addr(2) - recieved frames's destination MAC address are currently used to be filtered as it meets with the MAC address entry of the table. src-mac-addr(3) - recieved frames's source MAC address are currently used to be filtered as it meets with the MAC address entry of the table. dst-src-mac-addr(4) - recieved frames's destination MAC address or source MAC address are currently used to be filtered as it meets with the MAC address entry of the table.")
swACLEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setDescription('This object Specifies the MAC address mask for the source MAC address.')
swACLEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setDescription('This object Specifies the MAC address mask for the destination MAC address.')
swACLEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUse8021p.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUse8021p.setDescription("Specifies if the switch will examine the 802.1p priority value in the frame's header or not.")
swACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setDescription("Specifies if the switch will examine the Ethernet type value in each frame's header or not.")
swACLEthernetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 8), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetPort.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetPort.setDescription('This object indicates the portlist of this entry.')
swACLEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2), )
if mibBuilder.loadTexts: swACLIpTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpTable.setDescription("This table contain ACL mask of IP information. Access profiles will be created on the switch by row creation and to define which parts of each incoming frame's IP layer part of header the switch will examine. Masks can be entered that will be combined with the values the switch finds in the specified frame header fields.")
swACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLIpProfileID"))
if mibBuilder.loadTexts: swACLIpEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpEntry.setDescription('A list of information about ACL of IP Layer.')
swACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpProfileID.setDescription('The ID of ACL mask entry ,and is unique in the mask list.')
swACLIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUsevlan.setStatus('current')
if mibBuilder.loadTexts: swACLIpUsevlan.setDescription('This object indicates if IP layer vlan is examined or not.')
swACLIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setDescription("This object indicates the status of IP address mask. other(1) - Neither source IP address nor destination IP address are masked. dst-ip-addr(2) - recieved frames's destination IP address are currently used to be filtered as it meets with the IP address entry of the table. src-ip-addr(3) - recieved frames's source IP address are currently used to be filtered as it meets with the IP address entry of the table. dst-src-ip-addr(4) - recieved frames's destination IP address or source IP address are currently used to be filtered as it meets with the IP address entry of the table.")
swACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setDescription('This object Specifies IP address mask for the source IP address.')
swACLIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setDescription('This object Specifies the IP address mask for the destination IP address.')
swACLIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseDSCP.setStatus('current')
if mibBuilder.loadTexts: swACLIpUseDSCP.setDescription('This object indicates DSCP protocol is is examined or not.')
swACLIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseProtoType.setStatus('current')
if mibBuilder.loadTexts: swACLIpUseProtoType.setDescription('That object indicates which protocol will be examined.')
swACLIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIcmpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpIcmpOption.setDescription('This object indicates which fields should be filled in of ICMP. none(1)- two fields are null. type(2)- type field should be filled in. code(3)- code field should be filled in. type-code(4)- not only type fileld but code field should be filled in. ')
swACLIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIgmpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpIgmpOption.setDescription('This object indicates Options of IGMP is examined or not.')
swACLIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTcpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpTcpOption.setDescription("This object indicates the status of filtered address of TCP. other(1) - Neither source port nor destination port are masked. dst-addr(2) - recieved frames's destination port are currently used to be filtered . src-addr(3) - recieved frames's source port are currently used to be filtered . dst-src-addr(4) - both recieved frames's destination port and source port are currently used to be filtered .")
swACLIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUdpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpUdpOption.setDescription("This object indicates the status of filtered address of UDP . other(1) - Neither source port nor destination port are masked. dst-addr(2) - recieved frames's destination port are currently used to be filtered . src-addr(3) - recieved frames's source port are currently used to be filtered . dst-src-addr(4) - recieved frames's destination port or source port are currently used to be filtered.")
swACLIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setDescription('Specifies a TCP port mask for the source port if swACLIpUseProtoType is TCP Specifies a UDP port mask for the source port if swACLIpUseProtoType is UDP. ')
swACLIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setDescription('Specifies a TCP port mask for the destination port if swACLIpUseProtoType is TCP Specifies a UDP port mask for the destination port if swACLIpUseProtoType is UDP.')
swACLIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setDescription('Specifies a TCP connection flag mask.')
swACLIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpProtoIDOption.setDescription("Specifies that the switch will examine each frame's Protocol ID field or not.")
swACLIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpProtoIDMask.setDescription('Specifies that the rule applies to the IP protocol ID and the mask options behind the IP header.')
swACLIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 18), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpPort.setDescription('This object indicates the portlist of this entry.')
swACLIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 115), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setDescription('A value which indicates the set of TCP flags that this entity may potentially offers. The value is a sum. This sum initially takes the value zero, Then, for each flag, L, in the range 1 through 6, that this node performs transactions for, 2 raised to (L - 1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 psh bit 3 rst bit 2 syn bit 1 fin bit For example,it you want to enable urg bit and ack bit,you should set vlaue 48(2^(5-1) + 2^(6-1)).')
swACLPayloadTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3), )
if mibBuilder.loadTexts: swACLPayloadTable.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadTable.setDescription('This table contain ACL mask of payload information.')
swACLPayloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLPayloadProfileID"))
if mibBuilder.loadTexts: swACLPayloadEntry.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadEntry.setDescription('This Entry contain ACL mask of payload information.')
swACLPayloadProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadProfileID.setDescription('The ID of ACL mask entry ,and is unique in the mask list.')
swACLPayloadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadPort.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadPort.setDescription('The portlist of ACL mask entry .')
swACLPayloadOffSet0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet0to15.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadOffSet0to15.setDescription('The offset of ACL mask entry .')
swACLPayloadOffSet16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet16to31.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadOffSet16to31.setDescription('The offset of ACL mask entry .')
swACLPayloadOffSet32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet32to47.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadOffSet32to47.setDescription('The offset of ACL mask entry .')
swACLPayloadOffSet48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet48to63.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadOffSet48to63.setDescription('The offset of ACL mask entry .')
swACLPayloadOffSet64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet64to79.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadOffSet64to79.setDescription('The offset of ACL mask entry .')
swACLPayloadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRowStatus.setDescription('The status of the entry .')
swACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1), )
if mibBuilder.loadTexts: swACLEtherRuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleTable.setDescription('This table contain ACL rule of ethernet information.')
swACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLEtherRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swACLEtherRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEntry.setDescription('A list of information about ACL rule of the layer 2 part of each packet.')
swACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setDescription('The ID of ACL mask entry ,and is unique in the mask list.')
swACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setDescription('The ID of ACL rule entry relate to swACLEtherRuleProfileID.')
swACLEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleVlan.setDescription('Specifies that the access will apply to only to this VLAN.')
swACLEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setDescription('Specifies that the access will apply to only packets with this source MAC address.')
swACLEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setDescription('Specifies that the access will apply to only packets with this destination MAC address.')
swACLEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRule8021P.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRule8021P.setDescription('Specifies that the access will apply only to packets with this 802.1p priority value.')
swACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setDescription('Specifies that the access will apply only to packets with this hexidecimal 802.1Q Ethernet type value in the packet header.')
swACLEtherRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setDescription('Specifies that the access will apply only to packets with priority value.')
swACLEtherRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRulePriority.setDescription('Specific the priority will change to the packets while the swACLEtherRuleReplacePriority is enabled .')
swACLEtherRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setDescription('Specific the packets that match the access profile will changed the 802.1p priority tag field by the switch or not .')
swACLEtherRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setDescription('Specific the packets that match the access profile will replaced the DSCP field by the switch or not .')
swACLEtherRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setDescription('specify a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRulePermit.setDescription('This object indicates the permit status of this entry.')
swACLEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2), )
if mibBuilder.loadTexts: swACLIpRuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleTable.setDescription('')
swACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLIpRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLIpRuleAccessID"))
if mibBuilder.loadTexts: swACLIpRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEntry.setDescription('')
swACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProfileID.setDescription('The ID of ACL mask entry ,and is unique in the mask list.')
swACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleAccessID.setDescription('The ID of ACL IP rule entry .')
swACLIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleVlan.setDescription('Specifies that the access will apply to only to this VLAN.')
swACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setDescription('Specific an IP source address.')
swACLIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setDescription('Specific an IP destination address.')
swACLIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDscp.setDescription('Specific the value of dscp, the value can be configured 0 to 63')
swACLIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProtocol.setDescription('Specifies the IP protocol which has been configured in swACLIpEntry .')
swACLIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleType.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleType.setDescription('Specific that the rule applies to the value of icmp type traffic.')
swACLIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleCode.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleCode.setDescription('Specific that the rule applies to the value of icmp code traffic.')
swACLIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setDescription('Specific that the rule applies the range of tcp/udp source port')
swACLIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDstPort.setDescription('Specific the range of tcp/udp destination port range')
swACLIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setDescription('A value which indicates the set of TCP flags that this entity may potentially offers. The value is a sum. This sum initially takes the value zero, Then, for each flag, L, in the range 1 through 6, that this node performs transactions for, 2 raised to (L - 1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 rsh bit 3 rst bit 2 syn bit 1 fin bit For example,it you want to enable urg bit and ack bit,you should set vlaue 48(2^(5-1) + 2^(6-1)).')
swACLIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleProtoID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProtoID.setDescription('Specific that the rule applies to the value of ip protocol id traffic')
swACLIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleUserMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleUserMask.setDescription('Specific that the rule applies to the ip protocol id and the range of options behind the IP header.')
swACLIpRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setDescription('Specifies that the access will apply only to packets with priority value.')
swACLIpRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRulePriority.setDescription('Specifies that the access profile will apply to packets that contain this value in their 802.1p priority field of their header.')
swACLIpRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setDescription('Specific the packets that match the access profile will changed the 802.1p priority tag field by the switch or not .')
swACLIpRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setDescription('Indicate weather the DSCP field can be over-write or not. ')
swACLIpRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setDescription('specify a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLIpRulePermit.setDescription('')
swACLIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setDescription('This object indicates the status of this entry.')
swACLPayloadRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3), )
if mibBuilder.loadTexts: swACLPayloadRuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleTable.setDescription('')
swACLPayloadRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLPayloadRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLPayloadRuleAccessID"))
if mibBuilder.loadTexts: swACLPayloadRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleEntry.setDescription('')
swACLPayloadRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleProfileID.setDescription('The ID of ACL RULE entry ,and is unique in the mask list.')
swACLPayloadRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleAccessID.setDescription('th id of the entry ')
swACLPayloadRuleOffSet0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet0to15.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleOffSet0to15.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleOffSet16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet16to31.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleOffSet16to31.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleOffSet32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet32to47.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleOffSet32to47.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleOffSet48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet48to63.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleOffSet48to63.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleOffSet64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet64to79.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleOffSet64to79.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleEnablePriority.setDescription('')
swACLPayloadRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRulePriority.setDescription('Specifies that the access profile will apply to packets that contain this value in their 802.1p priority field of their header.')
swACLPayloadRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleReplacePriority.setDescription('')
swACLPayloadRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleEnableReplaceDscp.setDescription('Indicate wether the DSCP field can be over-write or not ')
swACLPayloadRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleRepDscp.setDescription('specify a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLPayloadRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRulePermit.setDescription('The offset of ACL rule entry .')
swACLPayloadRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLPayloadRuleRowStatus.setDescription('The status of ACL rule entry .')
mibBuilder.exportSymbols("SW-ACLMGMT-MIB", swACLPayloadRuleEntry=swACLPayloadRuleEntry, swACLEtherRuleTable=swACLEtherRuleTable, swACLPayloadRulePermit=swACLPayloadRulePermit, swACLPayloadOffSet48to63=swACLPayloadOffSet48to63, swACLIpPort=swACLIpPort, swACLPayloadRuleOffSet48to63=swACLPayloadRuleOffSet48to63, swACLIpRuleProtocol=swACLIpRuleProtocol, swACLIpRulePriority=swACLIpRulePriority, swACLIpRuleDstIpaddress=swACLIpRuleDstIpaddress, swAclMgmtMIB=swAclMgmtMIB, swACLEthernetDstMacAddrMask=swACLEthernetDstMacAddrMask, swACLIpProfileID=swACLIpProfileID, swACLIpEntry=swACLIpEntry, swACLPayloadOffSet16to31=swACLPayloadOffSet16to31, swACLIpUseDSCP=swACLIpUseDSCP, swACLPayloadRuleEnableReplaceDscp=swACLPayloadRuleEnableReplaceDscp, swACLIpRuleEnableReplaceDscp=swACLIpRuleEnableReplaceDscp, swACLEthernetMacAddrMaskState=swACLEthernetMacAddrMaskState, swACLIpRulePermit=swACLIpRulePermit, swACLEtherRuleEtherType=swACLEtherRuleEtherType, swACLIpProtoIDMask=swACLIpProtoIDMask, swACLPayloadProfileID=swACLPayloadProfileID, swACLEthernetUsevlan=swACLEthernetUsevlan, swACLEthernetProfileID=swACLEthernetProfileID, swACLEthernetUse8021p=swACLEthernetUse8021p, swACLPayloadRulePriority=swACLPayloadRulePriority, swACLEtherRulePriority=swACLEtherRulePriority, swACLPayloadRuleEnablePriority=swACLPayloadRuleEnablePriority, swACLPayloadOffSet32to47=swACLPayloadOffSet32to47, swACLPayloadRuleOffSet16to31=swACLPayloadRuleOffSet16to31, swACLIpIgmpOption=swACLIpIgmpOption, swACLPayloadRuleProfileID=swACLPayloadRuleProfileID, swACLPayloadPort=swACLPayloadPort, swACLPayloadRowStatus=swACLPayloadRowStatus, swACLIpRuleCode=swACLIpRuleCode, swACLPayloadOffSet64to79=swACLPayloadOffSet64to79, swACLEthernetSrcMacAddrMask=swACLEthernetSrcMacAddrMask, swACLIpRuleDstPort=swACLIpRuleDstPort, swACLIpUsevlan=swACLIpUsevlan, swACLEthernetTable=swACLEthernetTable, swACLPayloadTable=swACLPayloadTable, swACLIpRuleUserMask=swACLIpRuleUserMask, swACLIpRuleRepDscp=swACLIpRuleRepDscp, swACLIpTcpOption=swACLIpTcpOption, swACLIpIpAddrMaskState=swACLIpIpAddrMaskState, swACLPayloadRuleAccessID=swACLPayloadRuleAccessID, swACLEtherRuleEnableReplaceDscp=swACLEtherRuleEnableReplaceDscp, swACLEtherRuleAccessID=swACLEtherRuleAccessID, swACLEtherRuleEnablePriority=swACLEtherRuleEnablePriority, swACLEtherRuleVlan=swACLEtherRuleVlan, swACLIpRuleSrcIpaddress=swACLIpRuleSrcIpaddress, swACLIpDstIpAddrMask=swACLIpDstIpAddrMask, swACLEtherRuleRowStatus=swACLEtherRuleRowStatus, swACLPayloadRuleRowStatus=swACLPayloadRuleRowStatus, swACLPayloadOffSet0to15=swACLPayloadOffSet0to15, swACLPayloadEntry=swACLPayloadEntry, swACLIpUdpOption=swACLIpUdpOption, swACLIpRuleProfileID=swACLIpRuleProfileID, swACLIpUseProtoType=swACLIpUseProtoType, swACLIpRuleFlagBits=swACLIpRuleFlagBits, swACLPayloadRuleTable=swACLPayloadRuleTable, swACLEthernetPort=swACLEthernetPort, swACLIpRuleProtoID=swACLIpRuleProtoID, swACLIpRuleEnablePriority=swACLIpRuleEnablePriority, swACLEthernetRowStatus=swACLEthernetRowStatus, swACLIpTCPorUDPSrcPortMask=swACLIpTCPorUDPSrcPortMask, swACLEtherRule8021P=swACLEtherRule8021P, swACLIpRuleEntry=swACLIpRuleEntry, swACLEtherRuleRepDscp=swACLEtherRuleRepDscp, PYSNMP_MODULE_ID=swAclMgmtMIB, swACLIpRuleDscp=swACLIpRuleDscp, swACLPayloadRuleReplacePriority=swACLPayloadRuleReplacePriority, swAclRuleMgmt=swAclRuleMgmt, swACLPayloadRuleOffSet32to47=swACLPayloadRuleOffSet32to47, swACLPayloadRuleRepDscp=swACLPayloadRuleRepDscp, swACLIpRowStatus=swACLIpRowStatus, swACLEthernetUseEthernetType=swACLEthernetUseEthernetType, swACLIpTCPFlagBitMask=swACLIpTCPFlagBitMask, swAclMaskMgmt=swAclMaskMgmt, swACLIpRuleTable=swACLIpRuleTable, swACLPayloadRuleOffSet64to79=swACLPayloadRuleOffSet64to79, swACLIpRuleRowStatus=swACLIpRuleRowStatus, swACLIpSrcIpAddrMask=swACLIpSrcIpAddrMask, swACLIpRuleReplacePriority=swACLIpRuleReplacePriority, swACLEtherRuleEntry=swACLEtherRuleEntry, swACLIpProtoIDOption=swACLIpProtoIDOption, swACLIpRuleSrcPort=swACLIpRuleSrcPort, swACLIpRuleAccessID=swACLIpRuleAccessID, swACLIpTCPFlagBit=swACLIpTCPFlagBit, swACLEtherRuleProfileID=swACLEtherRuleProfileID, swACLIpRuleType=swACLIpRuleType, swACLIpTable=swACLIpTable, swACLPayloadRuleOffSet0to15=swACLPayloadRuleOffSet0to15, swACLEtherRulePermit=swACLEtherRulePermit, swACLEtherRuleDstMacAddress=swACLEtherRuleDstMacAddress, swACLEthernetEntry=swACLEthernetEntry, swACLIpTCPorUDPDstPortMask=swACLIpTCPorUDPDstPortMask, swACLIpRuleVlan=swACLIpRuleVlan, swACLEtherRuleReplacePriority=swACLEtherRuleReplacePriority, swACLEtherRuleSrcMacAddress=swACLEtherRuleSrcMacAddress, swACLIpIcmpOption=swACLIpIcmpOption)
