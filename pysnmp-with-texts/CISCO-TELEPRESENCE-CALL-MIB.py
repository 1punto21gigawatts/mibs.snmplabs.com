#
# PySNMP MIB module CISCO-TELEPRESENCE-CALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TELEPRESENCE-CALL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
QosLayer2Cos, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "QosLayer2Cos")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned64, = mibBuilder.importSymbols("CISCO-TC", "Unsigned64")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter32, ObjectIdentity, Bits, Integer32, IpAddress, NotificationType, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter32", "ObjectIdentity", "Bits", "Integer32", "IpAddress", "NotificationType", "MibIdentifier", "ModuleIdentity")
RowStatus, DisplayString, TextualConvention, VariablePointer, DateAndTime, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "VariablePointer", "DateAndTime", "TruthValue")
ciscoTelepresenceCallMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 644))
ciscoTelepresenceCallMIB.setRevisions(('2014-07-24 00:00', '2012-11-08 00:00', '2012-04-20 00:00', '2012-01-11 00:00', '2011-05-16 00:00', '2011-02-04 00:00', '2011-01-31 00:00', '2009-10-21 00:00', '2008-09-17 00:00', '2008-01-23 00:00', '2007-12-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTelepresenceCallMIB.setRevisionsDescriptions(('Updated CtpcCallTerminationCode, CtpcCodecType, CtpcStreamSourceType TEXTUAL CONVENTION. Obsoleted ciscoTpCallNotificationGroup Group.', 'Added ctpcExtNumberMask to ctpcLocalDirNumTable.', 'Added ctpcTxDscpTelepresenceConfigured, and ctpcTxDscpAudioConfigured to ctpcInfoObjects. Added ctpcRxDscpCurrent, ctpcRxDscpPrevious, ctpcRxCoSCurrent, ctpcRxCoSPrevious, to ctpcStatStreamTypeTable. Added ctpcTxCallBitRate, ctpcTxPeriodBitRate, ctpcRxCallBitRate, ctpcRxPeriodBitRate, ctpcRxMaxPeriodLostPackets, ctpcRxMaxCallLostPackets, ctpcRxMaxCallLostPacketsRecTime to ctpcStatStreamSourceTable.', "Added 'content' enum to CtpcStreamMediaType to support BFCP protocol or other standard protocols in the future.", 'Updated CtpcCallTerminationCode.', 'Updated CtpcStateCode.', 'Added ctpcCalLTermReason, ctpcRxVideoHorzPixels, ctpcRxVideoVertPixels, ctpcTxVideoHorzPixels, ctpcTxVideoVertPixels, ctpcMediaSrcPort, ctpcMediaDestPort. Clarified the definition of ctpcAvgPeriodJitter, ctpcRxMaxPeriodJitter, ctpcRxMaxCallJitter. Enhanced CtpcStateCode and CtpcCodecType.', 'Added ctpcAttributes, ctpcRemoteDeviceType, ctpcTxCodec, ctpcTxFrameRate, ctpcRxCodec, ctpcRxFrameRate, ctpcMgmtSysConnStatus, ctpcMgmtSysSIPRespCode and ctpcMgmtSysConnEventHistoryTable. Enhanced CtpcStateCode and CtpcStreamSourceType.', "Updated the description on default value setting for the objects ctpcStatRisingThreshold and ctpcStatFallingThreshold. Added new enumeration 'unknown' to ctpcType and ctpcDirection. Updated the unit of ctpcTxTotalBytes and ctpcTxTotalPackets.", 'Updated the description on CtpcEntry.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTelepresenceCallMIB.setLastUpdated('201407240000Z')
if mibBuilder.loadTexts: ciscoTelepresenceCallMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTelepresenceCallMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: tsbu-snmp-dev@cisco.com')
if mibBuilder.loadTexts: ciscoTelepresenceCallMIB.setDescription('The MIB module defines the managed objects for Telepresence calls. Telepresence refers to a set of technologies which allow a person to feel as if they were present, to give the appearance that they were present, or to have an effect, at a location other than their true location. Telepresence call is an audio-video call; however, some Telepresence systems also support audio addin call. Different security levels are supported in some Telepresence systems; security level may be specified from call management system. Some Telepresence systems support Telepresence meeting, the agent of the corresponding systems may also support CISCO-TELEPRESENCE-MEETING-MIB.')
class CtpcE164Address(TextualConvention, OctetString):
    reference = 'ITU-T E.164'
    description = "A UTF-8 string limited to the character set defined for E.164, '0123456789*#,<quote>'. Note that <quote> represents the double quote which cannot be contained in a SMI description clause."
    status = 'current'
    displayHint = '32t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class CtpcStreamMediaType(TextualConvention, Integer32):
    description = 'This textual convention identifies a call stream type. A Telepresence call has two media streams, video and audio while an audio add-in call only has one media stream, audio. video (1) -- Video stream of a call. audio (2) -- Audio stream of a call. content(3)-- Content stream of a call, such as presentation'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("video", 1), ("audio", 2), ("content", 3))

class CtpcStreamSourceType(TextualConvention, Integer32):
    description = 'This textual convention identifies the stream source of a call. secCodec1 (1) -- First secondary CODEC stream priCodec (2) -- Primary CODEC stream secCodec2 (3) -- Second secondary CODEC stream auxiliary1 (4) -- First auxiliary stream like presentation stream. secLegacy1 (5) -- Legacy stream generated by first secondary CODEC for legacy system. priLegacy (6) -- Legacy stream generated by Primary CODEC for legacy system. secLegacy2 (7) -- Legacy stream generated by second secondary CODEC for legacy system. auxiliary2 (8) -- Second auxiliary stream. center (9) -- Center stream. left (10)-- Left stream. right (11)-- Right stream. legacyCtr (12)-- Legacy stream center. legacyLeft (13)-- Legacy stream left. legacyRight (14)-- Legacy stream right. auxiliary3 (15)-- Third auxiliary stream. auxiliary4 (16)-- Forth auxiliary stream. other (17)-- Not in the above list.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("secCodec1", 1), ("priCodec", 2), ("secCodec2", 3), ("auxiliary1", 4), ("secLegacy1", 5), ("priLegacy", 6), ("secLegacy2", 7), ("auxiliary2", 8), ("center", 9), ("left", 10), ("right", 11), ("legacyCtr", 12), ("legacyLeft", 13), ("legacyRight", 14), ("auxiliary3", 15), ("auxiliary4", 16), ("other", 17))

class CtpcStateCode(TextualConvention, Integer32):
    description = "The textual convention identifies a call state. unknown (1) -- The system does not know what state that the call is in. other (2) -- The call is in a state not listed. noMgmtSysConn (3) -- The call cannot be dialed out due to no call management system connection. It is applicable only if the system is in 'mgmtSys' mode. noDialTone (4) -- The call cannot be dialed out due to no line is available. invalidNumber (5) -- The directory number of the remote party is invalid. ringing (6) -- The call is waiting to be answered. noAnswer (7) -- The call is not answered. inProgress (8) -- The call is in progress. remoteHold (9) -- The call is on hold by remote party. shareLineActive (10) -- The call is being picked up by other share line device. inLocalConference (11) -- The call is in local conference mode. terminatedByError (12) -- The call is terminated because of error. localHold (13) -- The call is on hold by local party. terminatedNormally (14) -- The call is terminated normally. answer (15) -- Answer an incoming call. resume (16) -- Resume a call from local hold. busy (17) -- The call is not answered due to remote busy. pause (18) -- Put the call in pause mode, no video and audio streams will be received. playback (19) -- The call is in playback state. recording (20) -- The call is being recorded."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("noMgmtSysConn", 3), ("noDialTone", 4), ("invalidNumber", 5), ("ringing", 6), ("noAnswer", 7), ("inProgress", 8), ("remoteHold", 9), ("shareLineActive", 10), ("inLocalConference", 11), ("terminatedbyError", 12), ("localHold", 13), ("terminatedNormally", 14), ("answer", 15), ("resume", 16), ("busy", 17), ("pause", 18), ("playback", 19), ("recording", 20))

class CtpcStatMonitoredAttribute(TextualConvention, Integer32):
    description = 'The textual convention identifies the monitoring type for a Telepresence call. latency (1) -- Round trip latency measurement. jitter (2) -- Jitter of incoming and/or outgoing frames. packetLoss (3) -- Percentage of packet loss for the incoming and/or outgoing packets. authFailurePacket (4) -- Number of packets which has Secured Real-Time Protocol (SRTP) or Secured Real-Time Control Protocol (SRTCP) authentication failure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("latency", 1), ("jitter", 2), ("packetLoss", 3), ("authFailurePacket", 4))

class CtpcStatMonitoredAttributeUnit(TextualConvention, Integer32):
    description = "The textual convention identifies a Telepresence call monitoring type's measuring unit which is milliseconds, micropercent (10^-6 percent) or number of packets."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("milliseconds", 1), ("micropercent", 2), ("packets", 3))

class CtpcStatAlarmMode(TextualConvention, Integer32):
    description = 'The textual convention identifies the monitoring alarm mode. risingAlarm (1) -- Alarm will be generated if first sample is greater than or equal to rising threshold. fallingAlarm (2) -- Alarm will be generated if first sample is less than or equal to falling threshold. risingOrFallingAlarm (3) -- Alarm will be generated if first sample is greater than or equal to rising threshold or less than or equal to falling threshold.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("risingAlarm", 1), ("fallingAlarm", 2), ("risingOrFallingAlarm", 3))

class CtpcStatThreshCrossedType(TextualConvention, Integer32):
    description = 'The textual convention identifies the monitoring threshold cross type. risingThreshold (1) -- The sample data has crossed the rising threshold. fallingThreshold (2) -- The sample data has crossed the falling threshold.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("risingThreshold", 1), ("fallingThreshold", 2))

class CtpcAttributes(TextualConvention, Bits):
    description = 'The textual convention identifies the attributes or characteristics of a call. interop (0) -- The call involves at least one interop party. highDefinitionInterop (1) -- The call involves at least one high definition interop party. webEx (2) -- The call involves at least one WebEx party. schedule (3) -- This call is a scheduled call. satellite (4) -- This call is going through satellite connection. t1 (5) -- This call is going through T1 connection. liveDesk (6) -- This call is calling to live desk.'
    status = 'current'
    namedValues = NamedValues(("interop", 0), ("highDefinitionInterop", 1), ("webEx", 2), ("schedule", 3), ("satellite", 4), ("t1", 5), ("liveDesk", 6))

class CtpcRemoteDeviceType(TextualConvention, Integer32):
    description = 'The textual convention identifies the remote device type of a call. unknown (1) -- The remote device type is not known. other (2) -- The remote device type is not listed. audioDevice (3) -- Audio device. videoLegacyDevice (4) -- Video device which is sending legacy stream. highDefinitionLegacyDevice (5) -- Video device which is sending high definition legacy stream. singleTelepresence (6) -- Telepresence device which is sending single video stream. tripleTelepresence (7) -- Telepresence device which is sending three video streams. telepresenceMultipointSwitch (8) -- Telepresence Multipoint Switch. telepresenceRecordingServer (9) -- Telepresence Recording Server. telepresenceTranscodingDevice(10) -- Telepresence Transcoding Device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("audioDevice", 3), ("videoLegacyDevice", 4), ("highDefinitionLegacyDevice", 5), ("singleTelepresence", 6), ("tripleTelepresence", 7), ("telepresenceMultipointSwitch", 8), ("telepresenceRecordingServer", 9), ("telepresenceTranscodingDevice", 10))

class CtpcCodecType(TextualConvention, Integer32):
    description = 'The textual convention identifies the codec type of a stream. unknown (1) -- Codec type is not known. other (2) -- Codec type is not listed. aaclc (3) -- Advanced Audio Coding, Low Complexity. aacld (4) -- MPEG-4 Low Delay Audio Codec. g711A (5) -- G.711 A-Law audio codec. g711U (6) -- G.711 U-Law audio codec. g722 (7) -- G.722 audio codec. g7221 (8) -- G.7221 audio codec. g728 (9) -- G.728 audio codec. g729 (10) -- G.729 audio codec. h263 (11) -- H.263 video codec. h264 (12) -- H.264 video codec. aacldLatm (13) -- Advanced Audio Coding, Low Delay, -- Low-overhead MPEG4 Audio Transport -- Multiplexing. h265 (14) -- H.265 video codec.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("aaclc", 3), ("aacld", 4), ("g711A", 5), ("g711U", 6), ("g722", 7), ("g7221", 8), ("g728", 9), ("g729", 10), ("h263", 11), ("h264", 12), ("aacldLatm", 13), ("h265", 14))

class CtpcMgmtSysConnStatusCode(TextualConvention, Integer32):
    description = 'The textual convention identifies the management system connection status. unknown (1) -- Call management system connection status is unknown. other (2) -- Call management system connection status is not listed. internalError (3) -- Telepresence system has internal system error to return call management system connection status. notRegister (4) -- Telepresence system is not register to the call management system. registered (5) -- Telepresence registered to a call management system. registrationFailure (6) -- Call management system registration failed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("internalError", 3), ("notRegister", 4), ("registered", 5), ("registraionFailure", 6))

class CtpcCallTerminationCode(TextualConvention, Integer32):
    description = 'The textual convention identifies a call termination reason. unknown (1) -- Call termination reason is unknown. other (2) -- Call termination reason is not listed. internalError (3) -- Telepresence system has internal system error to return call termination reason. localDisconnected (4) -- Call is terminated due to local user disconnected. remoteDisconnected (5) -- Call is terminated due to remote user disconnected. networkCongestion (6) -- Call is terminated due to network congestion. mediaNegotiationFailure (7) -- Call is terminated due to media negotiation failure. securityConfigMismatched (8) -- Call is terminated due to security configuration mismatched. incompatibleRemoteEndPt (9) -- Call is terminated due to incompatible remote end point. serviceUnavailable (10) -- Call cannot be routed due to service unavailable. remoteTerminatedWithError (11) -- Call is terminated due to remote end point termination with error. incall (12) -- Call is not terminated yet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("internalError", 3), ("localDisconnected", 4), ("remoteDisconnected", 5), ("networkCongestion", 6), ("mediaNegotiationFailure", 7), ("securityConfigMismatched", 8), ("incompatibleRemoteEndPt", 9), ("serviceUnavailable", 10), ("remoteTerminatedWithError", 11), ("incall", 12))

ciscoTelepresenceCallMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 0))
ciscoTelepresenceCallMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1))
ciscoTelepresenceCallMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 2))
ctpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 1))
ctpcInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2))
ctpcStatMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3))
ctpcStatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4))
ctpcStatEventHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5))
ctpcMgmtSysConnEventHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6))
ctpcStatNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcStatNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctpcStatNotifyEnable.setDescription("This object controls generation of notifications for the real-time call statistics data monitoring. Call statistics monitoring threshold can be set by creating a corresponding ctpcStatMonitoredEntry. Notification will be generated based on the value of the ctpcStatStartupAlarm and the thresholds. When the object is 'true', the agent will generate notification when the monitoring threshold is crossed. When the object is 'false', the agent will not generate notification when the monitoring threshold is crossed.")
ctpcMgmtSysConnNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcMgmtSysConnNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnNotifyEnable.setDescription("This object controls generation of notifications for call management system connection state changes. When the object is 'true', the agent will generate notification when call management system connection state changes. When the object is 'false', the agent will not generate notification when call management system connection state changes.")
ctpcLocalAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalAddrType.setDescription('This object specifies the type of address contained in the corresponding instance of ctpcLocalAddr.')
ctpcLocalAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcLocalAddr.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalAddr.setDescription('This object specifies the address of the system in the format given by the corresponding instance of ctpcLocalAddrType.')
ctpcLocalDirNumTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 3), )
if mibBuilder.loadTexts: ctpcLocalDirNumTable.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalDirNumTable.setDescription('A table of information about E.164 numbers assigned to the Telepresence system. The directory numbers usually are specified by the call management system. Some Telepresence systems have only one E.164 number assigned.')
ctpcLocalDirNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcLocalDirNumIndex"))
if mibBuilder.loadTexts: ctpcLocalDirNumEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalDirNumEntry.setDescription('An entry containing information about one E.164 number.')
ctpcLocalDirNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ctpcLocalDirNumIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalDirNumIndex.setDescription('The object specifies a unique index for a local directory number entry associates to the system.')
ctpcLocalDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 3, 1, 2), CtpcE164Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcLocalDirNum.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalDirNum.setDescription('This object specifies the directory number of the Telepresence system.')
ctpcExtNumberMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcExtNumberMask.setStatus('current')
if mibBuilder.loadTexts: ctpcExtNumberMask.setDescription('This object indicates the external number mask that configured in the management system. For example, if ctpcExtNumberMask is configured as 9728XXXXX, and ctpcLocalDirNum is configured as 12345, the external caller shall see the Directory Number (DN) as 972812345')
ctpcMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noMgmtSys", 1), ("mgmtSys", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMode.setStatus('current')
if mibBuilder.loadTexts: ctpcMode.setDescription("This object specifies the system configured call mode. It indicates if the call is processed by call management system or not. nonMgmtSys(1) -- Telepresence system that does not connect to any call management system such as Cisco Unified Communication Manager (CUCM). mgmtSys (2) -- Telepresence system that connects to a call management system. Note that some Telepresence systems support 'mgmtSys' only.")
ctpcActiveMgmtSysIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcActiveMgmtSysIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcActiveMgmtSysIndex.setDescription("This object specifies the value of ctpcMgmtSysIndex which the Telepresence system currently connects. If the system is in 'nonMgmtSys' mode, this object will have value '0'")
ctpcMgmtSysTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6), )
if mibBuilder.loadTexts: ctpcMgmtSysTable.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysTable.setDescription('A table of configured call management systems.')
ctpcMgmtSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysIndex"))
if mibBuilder.loadTexts: ctpcMgmtSysEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysEntry.setDescription('An entry contains information about a call management system.')
ctpcMgmtSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ctpcMgmtSysIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysIndex.setDescription('This object specifies a unique index for a call management system entry.')
ctpcMgmtSysAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysAddrType.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysAddrType.setDescription('This object specifies the type of address contained in the corresponding instance of ctpcMgmtSysAddr.')
ctpcMgmtSysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysAddr.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysAddr.setDescription("This object specifies a call management system address which a Telepresence system can connect to if it is in 'mgmtSys' mode. It is in the format given by the corresponding instance of ctpcMgmtSysAddrType.")
ctpcMgmtSysConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1, 4), CtpcMgmtSysConnStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysConnStatus.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnStatus.setDescription('This object specifies the last connection state between the Telepresence and a call management system.')
ctpcMgmtSysSIPRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysSIPRespCode.setReference('RFC 3261, section 21')
if mibBuilder.loadTexts: ctpcMgmtSysSIPRespCode.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysSIPRespCode.setDescription('This object specifies the last SIP response code from call management system.')
ctpcTxDscpTelepresenceConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 7), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxDscpTelepresenceConfigured.setStatus('current')
if mibBuilder.loadTexts: ctpcTxDscpTelepresenceConfigured.setDescription('This object specifies the configured DSCP for all outgoing streams for a Telepresence call.')
ctpcTxDscpAudioConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 2, 8), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxDscpAudioConfigured.setStatus('current')
if mibBuilder.loadTexts: ctpcTxDscpAudioConfigured.setDescription('This object specifies the configured DSCP for outgoing streams for audio-only call.')
ctpcStatMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1), )
if mibBuilder.loadTexts: ctpcStatMonitoredTable.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredTable.setDescription('A table of configuration information for the monitoring of statistics of active Telepresence calls. The monitoring feature has a hysteresis mechanism to limit the generation of events. This mechanism generates one event as a threshold is crossed in the appropriate direction. No more events are generated for that threshold until the opposite threshold is crossed.')
ctpcStatMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatMonitoredType"), (0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatMonitoredStreamType"))
if mibBuilder.loadTexts: ctpcStatMonitoredEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredEntry.setDescription("An entry contains a particular threshold configuration on an attribute for a stream type. For example, if latency of video stream is configured; average period latency of active Telepresence calls will be monitored. A management station wishing to monitor a call statistical attribute should create the associated instance of the row status. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to 'active' to initiate the monitoring request. Note that only active call streams are monitored.")
ctpcStatMonitoredType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 1), CtpcStatMonitoredAttribute())
if mibBuilder.loadTexts: ctpcStatMonitoredType.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredType.setDescription('This object specifies a statistical attribute which to be monitored.')
ctpcStatMonitoredStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("video", 1), ("audio", 2))))
if mibBuilder.loadTexts: ctpcStatMonitoredStreamType.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredStreamType.setDescription("This object specifies a active Telepresence stream type which to be monitored. If the value of this object is 'all', all stream types are monitored with the corresponding ctpcStatRisingThreshold and/or ctpcStatFallingThreshold for ctpcStatMonitoredType. Moreover, if this value is 'all', there cannot be another row for the same value of ctpcStatMonitoredType which is either 'video' or 'audio'. If ctpcStatMonitoredType has value latency(1) or authFailurePacket(4), this object will have value '0'. Note that some Telepresence systems may not support different thresholds for different stream type.")
ctpcStatMonitoredUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 3), CtpcStatMonitoredAttributeUnit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatMonitoredUnit.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredUnit.setDescription('This object specifies the corresponding unit of a monitoring attribute. The following table lists the possible values of this object, given the value of the corresponding instance of ctpcStatMonitoredType. ctpcStatMonitoredType ctpcStatMonitoredUnit ---------------------------------------------------- latency(1) milliseconds(1) jitter(2) milliseconds(1) packetLoss(3) micropercent(2) authFailurePacket(4) packets(3)')
ctpcStatRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcStatRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: ctpcStatRisingThreshold.setDescription("This object specifies the rising threshold of a monitoring attribute. When the call period value of the corresponding attribute is greater than or equal to this threshold, a single event will be generated. A single event will also be generated if the first call period value of the corresponding attribute after this entry becomes 'active' is greater than or equal to this threshold and the associated ctpcStatStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3). After a rising event is generated, another such event will not be generated until the call period value of the corresponding attribute falls below this threshold and reaches the corresponding ctpcStatFallingThreshold. If this object is not specified when the row is created, default value based on the value of the corresponding instance of ctpcStatMonitoredType may be set by the agent. This object may not be modified if the associated ctpcStatMonitoredStatus object is equal to active(1).")
ctpcStatFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcStatFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: ctpcStatFallingThreshold.setDescription("This object specifies the falling threshold of a monitoring attribute. When the call period value of the corresponding attribute is less than or equal to this threshold, [ and the value at the last sampling interval was greater than this threshold, ] a single event will be generated. A single event will also be generated if the first call period value of the corresponding attribute after this entry becomes 'active' is less than or equal to this threshold and the associated ctpcStatStartupAlarm is equal to fallingAlarm(1) or risingOrFallingAlarm(3). After a falling event is generated, another such event will not be generated until the call period value of the corresponding attribute rises above this threshold and reaches the corresponding ctpcStatRisingThreshold. If this object is not specified when the row is created, default value based on the value of the corresponding instance of ctpcStatMonitoredType may be set by the agent. This object may not be modified if the associated ctpcStatMonitoredStatus object is equal to active(1).")
ctpcStatStartupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 6), CtpcStatAlarmMode().clone('risingOrFallingAlarm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcStatStartupAlarm.setStatus('current')
if mibBuilder.loadTexts: ctpcStatStartupAlarm.setDescription('This object specifies the alarm that may be sent after the entry is first set to valid. If the first sample after this entry becomes valid is greater than or equal to the ctpcStatRisingThreshold and ctpcStatStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3), then a single rising alarm will be generated. If the first sample after this entry becomes valid is less than or equal to the ctpcStatFallingThreshold and ctpcStatStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3), then a single falling alarm will be generated. This object may not be modified if the associated ctpcStatMonitoredStatus object is equal to active(1).')
ctpcStatMonitoredStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcStatMonitoredStatus.setStatus('current')
if mibBuilder.loadTexts: ctpcStatMonitoredStatus.setDescription("This object specifies the status of ctpcStatMonitoredEntry. Once the entry status is set to 'active', the call statistics monitoring will be started. If this object is set to 'notInService' or 'destroy', the monitoring will be disabled to the corresponding stream type on the corresponding monitoring attribute.")
ctpcStatOverallCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatOverallCalls.setStatus('current')
if mibBuilder.loadTexts: ctpcStatOverallCalls.setDescription("This object specifies total number of calls since Telepresence system was first in service. When it reaches a maximum value of 2^32-1 (4294967295 decimal), it wraps around and starts increasing again from '1'.")
ctpcStatOverallCallTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatOverallCallTime.setStatus('current')
if mibBuilder.loadTexts: ctpcStatOverallCallTime.setDescription("This object specifies elapsed time of calls since Telepresence system was first in service. When it reaches a maximum value of 2^32-1 (4294967295 decimal), it wraps around and starts increasing again from '1'.")
ctpcStatTotalCalls = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatTotalCalls.setStatus('current')
if mibBuilder.loadTexts: ctpcStatTotalCalls.setDescription("This object specifies total number of calls since Telepresence system was last rebooted. When it reaches a maximum value of 2^32-1 (4294967295 decimal), it wraps around and starts increasing again from '1'.")
ctpcStatTotalCallTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatTotalCallTime.setStatus('current')
if mibBuilder.loadTexts: ctpcStatTotalCallTime.setDescription("This object specifies elapsed time of calls since Telepresence system was last rebooted. When it reaches a maximum value of 2^32-1 (4294967295 decimal), it wraps around and starts increasing again from '1'.")
ctpcSamplePeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcSamplePeriod.setStatus('current')
if mibBuilder.loadTexts: ctpcSamplePeriod.setDescription('This object specifies a sample period by which the following objects are based on: ctpcAvgPeriodLatency, ctpcMaxPeriodLatency, ctpcTxPeriodLostPackets, ctpcRxPeriodLostPackets, ctpcAvgPeriodJitter, ctpcMaxPeriodJitter')
ctpcTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcTableSize.setStatus('current')
if mibBuilder.loadTexts: ctpcTableSize.setDescription("This object specifies the maximum number of entries of the ctpcTable. Some agents restrict the maximum value of this object to be less than 500. When the capacity of the ctpcTable has reached the value specified by this object, then the agent deletes the oldest entry in order to accommodate the new entry. When this object is set to '-1', ctpcTableSize will not set maximum entries that ctpcTable is contained. The table size in turns may be limited by the associated MIB such as CISCO-TELEPRESENCE-MEETING-MIB.")
ctpcTableLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTableLastIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcTableLastIndex.setDescription("This object specifies the value of the ctpcIndex object corresponding to the last entry added to the table. When it reaches a maximum value of 2^32-1 (4294967295 decimal), it wraps around and starts increasing again from '1'.")
ctpcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8), )
if mibBuilder.loadTexts: ctpcTable.setStatus('current')
if mibBuilder.loadTexts: ctpcTable.setDescription('A table for Telepresence call information. After management system initialization (i.e. when sysUpTime is reset to zero), this table records all calls until it reaches its capacity specifed in ctpcTableSize. Thereafter, it remains full by retaining the most recent calls information.')
ctpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcIndex"))
if mibBuilder.loadTexts: ctpcEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcEntry.setDescription('An entry contains information of a Telepresence supported call. Some Telepresence systems support both audio-video call and audio-addin call. A management station wishing to create a call should create the associated instance of the row status and the remote directory number objects. ctpcIndex should be set to the next-to-be-assigned number of ctpcTableLastIndex. An instance of ctpcRemoteDirNum is required to create a call. Once the appropriate instance of all the configuration objects have been created, the row status should be set to active to initiate the request. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo. Once a call entry has been activated, it cannot be stopped. Instance of ctpcState on the created row reports the latest status of the newly created call. If a Telepresence system receives a call, a unique index will be chosen and an entry will be created by the agent, ctpcRowStatus will be set to active, and ctpcRemoteDirNum will be filled by agent if it is known.')
ctpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ctpcIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcIndex.setDescription('This object specifies a unique identification of a call entry. If the chosen ctpcIndex value for the row creation is already in use by an existing entry, SNMP SetRequest to the ctpcIndex value will fail.')
ctpcRemoteDirNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 2), CtpcE164Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcRemoteDirNum.setStatus('current')
if mibBuilder.loadTexts: ctpcRemoteDirNum.setDescription("This object specifies the remote directory number of a call. Once the ctpcRowStatus is set to 'active', the ctpcRemoteDirNum cannot be changed.")
ctpcLocalSIPCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcLocalSIPCallId.setReference('RFC 3261 SIP: Session Initiation Protocol Section 8.1.1.4')
if mibBuilder.loadTexts: ctpcLocalSIPCallId.setStatus('current')
if mibBuilder.loadTexts: ctpcLocalSIPCallId.setDescription('This object specifies the local SIP call ID.')
ctpcTxDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxDestAddrType.setStatus('current')
if mibBuilder.loadTexts: ctpcTxDestAddrType.setDescription('This object specifies the address type of the corresponding instance of ctpcTxDestAddr.')
ctpcTxDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxDestAddr.setStatus('current')
if mibBuilder.loadTexts: ctpcTxDestAddr.setDescription('This object specifies the address of the media packets forwarded to in the format given by the corresponding instance of ctpcTxDestAddrType.')
ctpcStartDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStartDateAndTime.setStatus('current')
if mibBuilder.loadTexts: ctpcStartDateAndTime.setDescription('This object specifies the value of local date and time when a call is started.')
ctpcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcDuration.setStatus('current')
if mibBuilder.loadTexts: ctpcDuration.setDescription('This object specifies the elapsed time since the call established.')
ctpcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("audioVideo", 1), ("audioOnly", 2), ("unknown", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcType.setStatus('current')
if mibBuilder.loadTexts: ctpcType.setDescription('This object specifies the call type. audioVideo (1) -- Telepresence call. audioOnly (2) -- Audio call. unknown (3) -- The system cannot detect the type of a call. Some Telepresence systems only support audio-video call.')
ctpcSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonSecured", 1), ("authenticated", 2), ("secured", 3), ("unknown", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcSecurity.setStatus('current')
if mibBuilder.loadTexts: ctpcSecurity.setDescription('This object specifies the call security level. nonSecured (1) -- Neither media packets nor signaling packets are encrypted. authenticated (2) -- Signaling packets are authenticated and/or encrypted but not the media packets. secured (3) -- Both media packets and signaling packets are encrypted. unknown (4) -- Cannot detect the security state of a call.')
ctpcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcDirection.setStatus('current')
if mibBuilder.loadTexts: ctpcDirection.setDescription('This object specifies the call direction. incoming (1) -- The system received a call. outgoing (2) -- The system initiated a call. unknown (3) -- The system cannot detect the direction -- of a call.')
ctpcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 11), CtpcStateCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcState.setStatus('current')
if mibBuilder.loadTexts: ctpcState.setDescription('This object specifies the call state.')
ctpcInitialBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 12), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcInitialBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcInitialBitRate.setDescription('This object specifies the initial bit rate of a Telepresence call.')
ctpcLatestBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 13), Unsigned32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcLatestBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcLatestBitRate.setDescription("This object specifies the current bit rate of a call. Telepresence call's bit rate may be lowered automatically due to network congestion.")
ctpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctpcRowStatus.setDescription("This object specifies the entry status of ctpcEntry. Once ctpcRowStatus is set to 'active', the call creation cannot be stopped. Changing the value of this object from 'active' to 'notInService' or 'destroy' will likely have consequences of call termination and/or losing the call statistics information. Thus, write access to this object is inappropriate for most of the Telepresence systems, and many implementations will choose not to support write-access for this object.")
ctpcAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 15), CtpcAttributes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcAttributes.setStatus('current')
if mibBuilder.loadTexts: ctpcAttributes.setDescription('This object specifies the connection mode of a call.')
ctpcRemoteDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 16), CtpcRemoteDeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRemoteDevice.setStatus('current')
if mibBuilder.loadTexts: ctpcRemoteDevice.setDescription('This object specifies the remote device type.')
ctpcCallTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 8, 1, 17), CtpcCallTerminationCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcCallTermReason.setStatus('current')
if mibBuilder.loadTexts: ctpcCallTermReason.setDescription('This object specifies the call termination reason.')
ctpcStatStreamTypeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9), )
if mibBuilder.loadTexts: ctpcStatStreamTypeTable.setStatus('current')
if mibBuilder.loadTexts: ctpcStatStreamTypeTable.setDescription('A table of stream type information of a call.')
ctpcStatStreamTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcIndex"), (0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStreamType"))
if mibBuilder.loadTexts: ctpcStatStreamTypeEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcStatStreamTypeEntry.setDescription('An entry contains information on a particular stream type of a call. The entry will be deleted when the corresponding ctpcEntry specified by ctpcIndex is removed.')
ctpcStreamType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 1), CtpcStreamMediaType())
if mibBuilder.loadTexts: ctpcStreamType.setStatus('current')
if mibBuilder.loadTexts: ctpcStreamType.setDescription('This object specifies the call stream type.')
ctpcAvgPeriodLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcAvgPeriodLatency.setStatus('current')
if mibBuilder.loadTexts: ctpcAvgPeriodLatency.setDescription("This object specifies the average latency for the last sample period specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcAvgCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 3), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcAvgCallLatency.setStatus('current')
if mibBuilder.loadTexts: ctpcAvgCallLatency.setDescription('This object specifies the average latency for the duration of a call.')
ctpcMaxPeriodLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxPeriodLatency.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxPeriodLatency.setDescription('This object specifies the maximum latency among all the sample periods.')
ctpcMaxCallLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxCallLatency.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxCallLatency.setDescription('This object specifies the maximum latency for the duration of a call.')
ctpcMaxCallLatencyRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxCallLatencyRecTime.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxCallLatencyRecTime.setDescription('This object specifies the elapsed time since the call is established when the maximum latency of a call is recorded.')
ctpcMediaSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMediaSrcPort.setStatus('current')
if mibBuilder.loadTexts: ctpcMediaSrcPort.setDescription('This object specifies the source port to transmit and receive the media.')
ctpcMediaDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMediaDestPort.setStatus('current')
if mibBuilder.loadTexts: ctpcMediaDestPort.setDescription('This object specifies the dest port to transmit and receive the media.')
ctpcRxDscpCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 9), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxDscpCurrent.setStatus('current')
if mibBuilder.loadTexts: ctpcRxDscpCurrent.setDescription("This object specifies the DSCP marking for the current call's incoming stream.")
ctpcRxDscpPrevious = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 10), Dscp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxDscpPrevious.setStatus('current')
if mibBuilder.loadTexts: ctpcRxDscpPrevious.setDescription("This object specifies the previous DSCP marking for the current call's incoming stream.")
ctpcRxCoSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 11), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCoSCurrent.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCoSCurrent.setDescription("This object specifies the COS marking for the current call's incoming stream.")
ctpcRxCoSPrevious = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 9, 1, 12), QosLayer2Cos()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCoSPrevious.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCoSPrevious.setDescription("This object specifies the previous COS marking for the current call's incoming stream.")
ctpcStatStreamSourceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10), )
if mibBuilder.loadTexts: ctpcStatStreamSourceTable.setStatus('current')
if mibBuilder.loadTexts: ctpcStatStreamSourceTable.setDescription('A table for call stream source information.')
ctpcStatStreamSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcIndex"), (0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStreamType"), (0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStreamSource"))
if mibBuilder.loadTexts: ctpcStatStreamSourceEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcStatStreamSourceEntry.setDescription('An entry contains a stream source information of a call. The entry will be deleted when the corresponding ctpcEntry specified by ctpcIndex is removed.')
ctpcStreamSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 1), CtpcStreamSourceType())
if mibBuilder.loadTexts: ctpcStreamSource.setStatus('current')
if mibBuilder.loadTexts: ctpcStreamSource.setDescription('This object specifies the call stream source.')
ctpcTxActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxActive.setStatus('current')
if mibBuilder.loadTexts: ctpcTxActive.setDescription("This object is set to 'true' if data transmit from a stream source is 'active'.")
ctpcTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 3), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ctpcTxTotalBytes.setDescription('This object specifies the total number of bytes transmitted from a stream source.')
ctpcTxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxTotalPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcTxTotalPackets.setDescription('This object specifies the total number of packets transmitted from a stream source.')
ctpcTxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcTxLostPackets.setDescription('This object specifies the number packets failed to deliver from a stream source.')
ctpcTxPeriodLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxPeriodLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcTxPeriodLostPackets.setDescription("This object specifies the micropercent of packets failed to deliver from a stream source within the last sample period specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcTxCallLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxCallLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcTxCallLostPackets.setDescription('This object specifies the micropercent of packets failed to deliver from a stream source for the duration of a call.')
ctpcTxIDRPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxIDRPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcTxIDRPackets.setDescription('This object specifies the number of IDR packets transmitted from a stream source.')
ctpcTxShapingWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxShapingWindow.setStatus('current')
if mibBuilder.loadTexts: ctpcTxShapingWindow.setDescription('This object specifies the time span between the last video packet and first video packet of a transmitted video frame. This object is only applicable for video stream type.')
ctpcRxActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxActive.setStatus('current')
if mibBuilder.loadTexts: ctpcRxActive.setDescription("This object is set to 'true' if data received by a stream source is 'active'.")
ctpcRxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 11), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxTotalBytes.setStatus('current')
if mibBuilder.loadTexts: ctpcRxTotalBytes.setDescription('This object specifies the total number of bytes received by a stream source.')
ctpcRxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxTotalPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxTotalPackets.setDescription('This object specifies the total number of packets received by a stream source.')
ctpcRxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxLostPackets.setDescription('This object specifies the number packets failed to reach a stream source.')
ctpcRxPeriodLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxPeriodLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxPeriodLostPackets.setDescription("This object specifies the micropercent of packets failed to reach a stream source within the last sample period specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcRxCallLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCallLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCallLostPackets.setDescription('This object specifies the micropercent of packets failed to reach a stream source.')
ctpcRxOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxOutOfOrderPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxOutOfOrderPackets.setDescription('This object specifies the number packets received out of order by a stream source.')
ctpcRxDuplicatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxDuplicatePackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxDuplicatePackets.setDescription('This object specifies the number duplicated packets received by a stream source.')
ctpcRxLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 18), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxLatePackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxLatePackets.setDescription('This object specifies the number late packets received by a stream source.')
ctpcRxIDRPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 19), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxIDRPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxIDRPackets.setDescription('This object specifies the number of IDR packets received by a stream source.')
ctpcRxShapingWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 20), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxShapingWindow.setStatus('current')
if mibBuilder.loadTexts: ctpcRxShapingWindow.setDescription('This object specifies the time span between the last video packet and first video packet of a received video frame. This object is only applicable for video stream type.')
ctpcRxCallAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 21), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCallAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCallAuthFailure.setDescription('This object specifies the number of authenticated packets for which verification failed.')
ctpcAvgPeriodJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 22), Unsigned64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcAvgPeriodJitter.setStatus('current')
if mibBuilder.loadTexts: ctpcAvgPeriodJitter.setDescription("This object specifies the average jitter of a stream source for a Telepresence call from the most recent sample period specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcAvgCallJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 23), Unsigned64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcAvgCallJitter.setStatus('current')
if mibBuilder.loadTexts: ctpcAvgCallJitter.setDescription('This object specifies the average jitter of a stream source for a Telepresence call among all the sample periods specified in ctpcSamplePeriod.')
ctpcMaxPeriodJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 24), Unsigned64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxPeriodJitter.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxPeriodJitter.setDescription("This object specifies the maximum jitter of a stream source for a Telepresence call for any sample period specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcMaxCallJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 25), Unsigned64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxCallJitter.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxCallJitter.setDescription('This object specifies the maximum average jitter of a stream source for a Telepresence call among all the sample periods specified in ctpcSamplePeriod.')
ctpcMaxCallJitterRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 26), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMaxCallJitterRecTime.setStatus('current')
if mibBuilder.loadTexts: ctpcMaxCallJitterRecTime.setDescription('This object specifies the elapsed time since the call is established when the maximum jitter of a stream source is recorded.')
ctpcTxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 27), CtpcCodecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxCodec.setStatus('current')
if mibBuilder.loadTexts: ctpcTxCodec.setDescription('This object specifies the transmitted media codec type of a stream source.')
ctpcTxFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 28), Unsigned32()).setUnits('millifps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxFrameRate.setStatus('current')
if mibBuilder.loadTexts: ctpcTxFrameRate.setDescription('This object specifies the transmitted frame rate of a stream source.')
ctpcRxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 29), CtpcCodecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCodec.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCodec.setDescription('This object specifies the received media codec type of a stream source.')
ctpcRxFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 30), Unsigned32()).setUnits('millifps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxFrameRate.setStatus('current')
if mibBuilder.loadTexts: ctpcRxFrameRate.setDescription('This object specifies the received frame rate of a stream source.')
ctpcTxVideoHorzPixels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 31), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxVideoHorzPixels.setStatus('current')
if mibBuilder.loadTexts: ctpcTxVideoHorzPixels.setDescription('This object specifies the number of horizontal pixels in the outgoing video stream. When a call is terminated, the value will be the last recorded number of horizontal pixels for the outgoing video stream.')
ctpcTxVideoVertPixels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 32), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxVideoVertPixels.setStatus('current')
if mibBuilder.loadTexts: ctpcTxVideoVertPixels.setDescription('This object specifies the number of vertical pixels in the outgoing video stream. When a call is terminated, the value will be the last recorded number of vertical pixels for the outgoing video stream.')
ctpcRxVideoHorzPixels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 33), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxVideoHorzPixels.setStatus('current')
if mibBuilder.loadTexts: ctpcRxVideoHorzPixels.setDescription('This object specifies the number of horizontal pixels in the incoming video stream. When a call is terminated, the value will be the last recorded number of horizontal pixels for the incoming video stream.')
ctpcRxVideoVertPixels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxVideoVertPixels.setStatus('current')
if mibBuilder.loadTexts: ctpcRxVideoVertPixels.setDescription('This object specifies the number of vertical pixels in the incoming video streams. When a call is terminated, the value will be the last recorded number of vertical pixels for the incoming video stream.')
ctpcTxCallBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 35), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxCallBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcTxCallBitRate.setDescription('This object indicates the bit rate transmitted from a stream source.')
ctpcTxPeriodBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 36), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTxPeriodBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcTxPeriodBitRate.setDescription('This object indicates the bit rate transmitted from a stream source within the last sample period that specified in ctpcSamplePeriod.')
ctpcRxCallBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 37), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxCallBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcRxCallBitRate.setDescription('This object indicates the bit rate received from a stream source.')
ctpcRxPeriodBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 38), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxPeriodBitRate.setStatus('current')
if mibBuilder.loadTexts: ctpcRxPeriodBitRate.setDescription('This object indicates the bit rate received from a stream source within the last sample period that specified in ctpcSamplePeriod.')
ctpcRxMaxPeriodLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 39), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxMaxPeriodLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxMaxPeriodLostPackets.setDescription("This object indicates the maximum micropercent of packets failed to reach a stream source within the last sample period that specified in ctpcSamplePeriod. When a call is terminated, the value will be reset to '0'.")
ctpcRxMaxCallLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('micropercent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxMaxCallLostPackets.setStatus('current')
if mibBuilder.loadTexts: ctpcRxMaxCallLostPackets.setDescription('This object indicates the maximum micropercent of packets failed to reach a stream source for the duration of a call.')
ctpcRxMaxCallLostPacketsRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 4, 10, 1, 41), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcRxMaxCallLostPacketsRecTime.setStatus('current')
if mibBuilder.loadTexts: ctpcRxMaxCallLostPacketsRecTime.setDescription('This object indicates the elapsed time since the call is established when the maximum packet loss of a call is recorded.')
ctpcStatEventHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcStatEventHistTableSize.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventHistTableSize.setDescription("This object specifies the number of entries that the ctpcStatEventHistoryTable can contain. When the capacity of the ctpcStatEventHistoryTable has reached, the value specified by this object, then the agent deletes the oldest entry in order to accommodate the new entry. A value of '0' prevents any history from being retained.")
ctpcStatEventHistLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatEventHistLastIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventHistLastIndex.setDescription('This object specifies the value of the ctpcStatEventHistIndex object corresponding to the last entry added to the table by the agent. If the management client uses the notifications defined by this module, then it can poll this object to determine whether it has missed a notification sent by the agent.')
ctpcStatEventHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3), )
if mibBuilder.loadTexts: ctpcStatEventHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventHistoryTable.setDescription('This table contains a history of Telepresence call monitoring thresholds crossed events. After management system initialization (i.e. when sysUpTime is reset to zero), this table records all notifications until it reaches its capacity specified in ctpcStatEventHistTableSize. Thereafter, it remains full by retaining the most recent notifications.')
ctpcStatEventHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventHistoryIndex"))
if mibBuilder.loadTexts: ctpcStatEventHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventHistoryEntry.setDescription('An entry contains information about a Telepresence call monitoring threshold crossed event.')
ctpcStatEventHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ctpcStatEventHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventHistoryIndex.setDescription("A unique non-zero integer value that identifies a row in this table. The value of this table starts from '1' and monotonically increases for each threshold crossed event received by the agent. If the value of this object is '4294967295', the agent will reset it to '1' upon receiving the next event.")
ctpcStatEventMonObjectInst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatEventMonObjectInst.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventMonObjectInst.setDescription("This object specifies a complete OID of a monitoring object which was crossed. For example, the OID of ctpcAvgPeriodLatency.1.video would represent video latency of a call with call index '1' crossed the threshold set by the corresponding ctpcStatMonitoredEntry.")
ctpcStatEventCrossedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1, 3), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatEventCrossedValue.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventCrossedValue.setDescription('This object specifies the value of monitoring object when the threshold was crossed.')
ctpcStatEventCrossedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1, 4), CtpcStatThreshCrossedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatEventCrossedType.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventCrossedType.setDescription('This object specifies the type of threshold which was crossed and thereby triggered this event.')
ctpcStatEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 5, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcStatEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ctpcStatEventTimeStamp.setDescription('This object specifies the value of the sysUpTime object at the time the notification was generated.')
ctpcMgmtSysConnEventHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistTableSize.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistTableSize.setDescription("This object specifies the number of entries that the ctpcMgmtSysConnEventHistoryTable can contain. When the capacity of the ctpcMgmtSysConnEventHistoryTable has reached, the value specified by this object, then the agent deletes the oldest entry in order to accommodate the new entry. A value of '0' prevents any history from being retained. Some agents restrict the maximum value of this object to be less than 500.")
ctpcMgmtSysConnEventHistLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistLastIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistLastIndex.setDescription('This object specifies the value of the ctpcMgmtSysConnEventHistIndex object corresponding to the last entry added to the table by the agent. If the management client uses the notifications defined by this module, then it can poll this object to determine whether it has missed a notification sent by the agent.')
ctpcMgmtSysConnEventHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3), )
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryTable.setDescription('This table contains a history of call management system connection state changes. After management system initialization (i.e. when sysUpTime is reset to zero), this table records all notifications until it reaches its capacity specified in ctpcMgmtSysConnEventHistTableSize. Thereafter, it remains full by retaining the most recent notifications.')
ctpcMgmtSysConnEventHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventHistoryIndex"))
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryEntry.setDescription('An entry contains information about a call management system connection state change event.')
ctpcMgmtSysConnEventHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventHistoryIndex.setDescription("A unique non-zero integer value that identifies a row in this table. The value of this table starts from '1' and monotonically increases for each management system connection event received by the agent. If the value of this object is '4294967295', the agent will reset it to '1' upon receiving the next event.")
ctpcMgmtSysConnEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3, 1, 2), CtpcMgmtSysConnStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysConnEventStatus.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventStatus.setDescription('This object specifies a call management system connection state when the event happened.')
ctpcMgmtSysConnEventSIPRespCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysConnEventSIPRespCode.setReference('RFC 3261, section 21')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventSIPRespCode.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventSIPRespCode.setDescription('This object specifies SIP response code from call management system when the event happened.')
ctpcMgmtSysConnEventTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 644, 1, 6, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcMgmtSysConnEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventTimeStamp.setDescription('This object specifies the value of the sysUpTime object at the time the notification was generated.')
ctpcMgmtSysConnFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 644, 0, 1)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddrType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddr"))
if mibBuilder.loadTexts: ctpcMgmtSysConnFailNotification.setStatus('deprecated')
if mibBuilder.loadTexts: ctpcMgmtSysConnFailNotification.setDescription('This notification is sent when a call management system connection failure occurs. This notification is deprecated in favor of ctpcMgmtSysConnEventNotification. ctpcMgmtSysConnFailNotification object is superseded by ctpcMgmtSysConnEventNotification.')
ctpcStatNotificaion = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 644, 0, 2)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventMonObjectInst"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventCrossedValue"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventCrossedType"))
if mibBuilder.loadTexts: ctpcStatNotificaion.setStatus('current')
if mibBuilder.loadTexts: ctpcStatNotificaion.setDescription('This notification is sent when a call monitoring threshold is crossed.')
ctpcMgmtSysConnEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 644, 0, 3)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddrType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddr"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnStatus"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysSIPRespCode"))
if mibBuilder.loadTexts: ctpcMgmtSysConnEventNotification.setStatus('current')
if mibBuilder.loadTexts: ctpcMgmtSysConnEventNotification.setDescription('This notification is sent when a call management system connection state change occurs.')
ciscoTpCallMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1))
ciscoTpCallMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2))
ciscoTpCallMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 1)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBCompliance = ciscoTpCallMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTpCallMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 2)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallMgmtSysConnEventHistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBComplianceRev1 = ciscoTpCallMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTpCallMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 3)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallMgmtSysConnEventHistGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallNotificationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBComplianceRev2 = ciscoTpCallMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTpCallMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 4)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup3"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallMgmtSysConnEventHistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBComplianceRev3 = ciscoTpCallMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTpCallMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 5)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup3"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallMgmtSysConnEventHistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBComplianceRev4 = ciscoTpCallMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 1, 6)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallInformationGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup2"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallStatisticsGroupSup3"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallNotificationGroupRev1"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallConfigurationGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallEventHistoryGroup"), ("CISCO-TELEPRESENCE-CALL-MIB", "ciscoTpCallMgmtSysConnEventHistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMIBComplianceRev5 = ciscoTpCallMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco Telepresence Call MIB.')
ciscoTpCallConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 1)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatNotifyEnable"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnNotifyEnable"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatMonitoredUnit"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatRisingThreshold"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatFallingThreshold"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatStartupAlarm"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatMonitoredStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallConfigurationGroup = ciscoTpCallConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallConfigurationGroup.setDescription('A collection of objects providing the call event monitoring and notification configuration.')
ciscoTpCallInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 2)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcLocalDirNum"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcLocalAddrType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcLocalAddr"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcActiveMgmtSysIndex"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMode"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddrType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallInformationGroup = ciscoTpCallInformationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallInformationGroup.setDescription('A collection of objects providing call management system information as well as system caller ID information.')
ciscoTpCallStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 3)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatOverallCalls"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatOverallCallTime"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatTotalCalls"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatTotalCallTime"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcSamplePeriod"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTableSize"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTableLastIndex"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRemoteDirNum"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcLocalSIPCallId"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxDestAddrType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxDestAddr"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStartDateAndTime"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcDuration"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcSecurity"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcDirection"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcState"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcInitialBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcLatestBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRowStatus"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcAvgPeriodLatency"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcAvgCallLatency"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxPeriodLatency"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxCallLatency"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxCallLatencyRecTime"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxActive"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxTotalBytes"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxTotalPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxPeriodLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxCallLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxIDRPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxShapingWindow"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxActive"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxTotalBytes"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxTotalPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxPeriodLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCallLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxOutOfOrderPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxDuplicatePackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxLatePackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxIDRPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxShapingWindow"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCallAuthFailure"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcAvgPeriodJitter"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcAvgCallJitter"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxPeriodJitter"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxCallJitter"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMaxCallJitterRecTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallStatisticsGroup = ciscoTpCallStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallStatisticsGroup.setDescription("A collection of objects providing Telepresence call's statistical information.")
ciscoTpCallEventHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 4)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventHistTableSize"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventHistLastIndex"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventMonObjectInst"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventCrossedValue"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventCrossedType"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatEventTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallEventHistoryGroup = ciscoTpCallEventHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallEventHistoryGroup.setDescription('A collection of objects providing Telepresence call monitoring crossed event information.')
ciscoTpCallNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 5)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnFailNotification"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatNotificaion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallNotificationGroup = ciscoTpCallNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoTpCallNotificationGroup.setDescription('A collection of event notifications. This ciscoTpCallNotificationGroup object is not used any more.')
ciscoTpCallMgmtSysConnEventHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 6)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventHistTableSize"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventHistLastIndex"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventStatus"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventSIPRespCode"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallMgmtSysConnEventHistGroup = ciscoTpCallMgmtSysConnEventHistGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallMgmtSysConnEventHistGroup.setDescription('A collection of objects providing call management system connection changes event information.')
ciscoTpCallInformationGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 7)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnStatus"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysSIPRespCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallInformationGroupSup1 = ciscoTpCallInformationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallInformationGroupSup1.setDescription('A supplemental group of ciscoTpCallInformationGroup.')
ciscoTpCallStatisticsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 8)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcAttributes"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRemoteDevice"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxCodec"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxFrameRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCodec"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxFrameRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallStatisticsGroupSup1 = ciscoTpCallStatisticsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallStatisticsGroupSup1.setDescription('A supplemental group of ciscoTpCallStatisticsGroup.')
ciscoTpCallNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 9)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMgmtSysConnEventNotification"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcStatNotificaion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallNotificationGroupRev1 = ciscoTpCallNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallNotificationGroupRev1.setDescription('A collection of event notifications.')
ciscoTpCallStatisticsGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 10)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcCallTermReason"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMediaSrcPort"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcMediaDestPort"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxVideoHorzPixels"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxVideoVertPixels"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxVideoHorzPixels"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxVideoVertPixels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallStatisticsGroupSup2 = ciscoTpCallStatisticsGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallStatisticsGroupSup2.setDescription('A supplemental group of ciscoTpCallStatisticsGroup.')
ciscoTpCallStatisticsGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 11)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxCallBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxPeriodBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCallBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxPeriodBitRate"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxMaxPeriodLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxMaxCallLostPackets"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxMaxCallLostPacketsRecTime"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxDscpTelepresenceConfigured"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcTxDscpAudioConfigured"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxDscpCurrent"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxDscpPrevious"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCoSCurrent"), ("CISCO-TELEPRESENCE-CALL-MIB", "ctpcRxCoSPrevious"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallStatisticsGroupSup3 = ciscoTpCallStatisticsGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallStatisticsGroupSup3.setDescription('A supplemental group of ciscoTpCallStatisticsGroup.')
ciscoTpCallInformationGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 644, 2, 2, 12)).setObjects(("CISCO-TELEPRESENCE-CALL-MIB", "ctpcExtNumberMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTpCallInformationGroupSup2 = ciscoTpCallInformationGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoTpCallInformationGroupSup2.setDescription('A supplemental group of ciscoTpCallInformationGroup.')
mibBuilder.exportSymbols("CISCO-TELEPRESENCE-CALL-MIB", ctpcStatMonitorObjects=ctpcStatMonitorObjects, ciscoTpCallMgmtSysConnEventHistGroup=ciscoTpCallMgmtSysConnEventHistGroup, ctpcTxDestAddr=ctpcTxDestAddr, ctpcStatStreamTypeEntry=ctpcStatStreamTypeEntry, ctpcStatMonitoredEntry=ctpcStatMonitoredEntry, ctpcMaxPeriodJitter=ctpcMaxPeriodJitter, ctpcRxDscpPrevious=ctpcRxDscpPrevious, ctpcRxLostPackets=ctpcRxLostPackets, ctpcRxCallBitRate=ctpcRxCallBitRate, ctpcTxIDRPackets=ctpcTxIDRPackets, ctpcStatOverallCallTime=ctpcStatOverallCallTime, ctpcSamplePeriod=ctpcSamplePeriod, CtpcCodecType=CtpcCodecType, ctpcLocalAddr=ctpcLocalAddr, ctpcStatOverallCalls=ctpcStatOverallCalls, ctpcTxFrameRate=ctpcTxFrameRate, ctpcStatObjects=ctpcStatObjects, ctpcMaxCallLatency=ctpcMaxCallLatency, ctpcRxCallLostPackets=ctpcRxCallLostPackets, ctpcTableSize=ctpcTableSize, ctpcStatMonitoredType=ctpcStatMonitoredType, ciscoTpCallMIBGroups=ciscoTpCallMIBGroups, ctpcMaxCallJitterRecTime=ctpcMaxCallJitterRecTime, ctpcType=ctpcType, ctpcStatStartupAlarm=ctpcStatStartupAlarm, ctpcRxCoSCurrent=ctpcRxCoSCurrent, ctpcMgmtSysConnEventHistoryIndex=ctpcMgmtSysConnEventHistoryIndex, ctpcAvgCallLatency=ctpcAvgCallLatency, ctpcStatRisingThreshold=ctpcStatRisingThreshold, ctpcIndex=ctpcIndex, ctpcLocalSIPCallId=ctpcLocalSIPCallId, ctpcStatNotifyEnable=ctpcStatNotifyEnable, ctpcTxTotalPackets=ctpcTxTotalPackets, ctpcMgmtSysConnEventTimeStamp=ctpcMgmtSysConnEventTimeStamp, ctpcMgmtSysEntry=ctpcMgmtSysEntry, ctpcStatMonitoredStatus=ctpcStatMonitoredStatus, ciscoTpCallStatisticsGroupSup2=ciscoTpCallStatisticsGroupSup2, ctpcRxCodec=ctpcRxCodec, ciscoTpCallMIBCompliances=ciscoTpCallMIBCompliances, ctpcLatestBitRate=ctpcLatestBitRate, ctpcStatFallingThreshold=ctpcStatFallingThreshold, ctpcRemoteDevice=ctpcRemoteDevice, ctpcMgmtSysSIPRespCode=ctpcMgmtSysSIPRespCode, ctpcInfoObjects=ctpcInfoObjects, ctpcInitialBitRate=ctpcInitialBitRate, ctpcStreamSource=ctpcStreamSource, ctpcTable=ctpcTable, ctpcSecurity=ctpcSecurity, ctpcRxOutOfOrderPackets=ctpcRxOutOfOrderPackets, ctpcTxVideoHorzPixels=ctpcTxVideoHorzPixels, ctpcStatEventCrossedType=ctpcStatEventCrossedType, ciscoTpCallMIBComplianceRev4=ciscoTpCallMIBComplianceRev4, ctpcObjects=ctpcObjects, ctpcRxTotalPackets=ctpcRxTotalPackets, ctpcRxFrameRate=ctpcRxFrameRate, ctpcAvgCallJitter=ctpcAvgCallJitter, ctpcMgmtSysConnFailNotification=ctpcMgmtSysConnFailNotification, CtpcStatMonitoredAttributeUnit=CtpcStatMonitoredAttributeUnit, ctpcTxDscpTelepresenceConfigured=ctpcTxDscpTelepresenceConfigured, ctpcRowStatus=ctpcRowStatus, ctpcTxPeriodBitRate=ctpcTxPeriodBitRate, ciscoTpCallNotificationGroupRev1=ciscoTpCallNotificationGroupRev1, ctpcRxPeriodBitRate=ctpcRxPeriodBitRate, ctpcAvgPeriodJitter=ctpcAvgPeriodJitter, ctpcMgmtSysConnEventHistoryEntry=ctpcMgmtSysConnEventHistoryEntry, ctpcMaxCallJitter=ctpcMaxCallJitter, ctpcLocalDirNumTable=ctpcLocalDirNumTable, ctpcTxLostPackets=ctpcTxLostPackets, ciscoTpCallStatisticsGroup=ciscoTpCallStatisticsGroup, ctpcMgmtSysConnEventHistLastIndex=ctpcMgmtSysConnEventHistLastIndex, ctpcStatMonitoredTable=ctpcStatMonitoredTable, ctpcStatStreamTypeTable=ctpcStatStreamTypeTable, CtpcMgmtSysConnStatusCode=CtpcMgmtSysConnStatusCode, ctpcMediaSrcPort=ctpcMediaSrcPort, ctpcMgmtSysConnEventStatus=ctpcMgmtSysConnEventStatus, CtpcE164Address=CtpcE164Address, ctpcStatMonitoredStreamType=ctpcStatMonitoredStreamType, ciscoTpCallInformationGroupSup2=ciscoTpCallInformationGroupSup2, CtpcRemoteDeviceType=CtpcRemoteDeviceType, ctpcStatMonitoredUnit=ctpcStatMonitoredUnit, ctpcDirection=ctpcDirection, CtpcStatThreshCrossedType=CtpcStatThreshCrossedType, ctpcState=ctpcState, ctpcRxCallAuthFailure=ctpcRxCallAuthFailure, ciscoTpCallMIBCompliance=ciscoTpCallMIBCompliance, ctpcExtNumberMask=ctpcExtNumberMask, ciscoTelepresenceCallMIB=ciscoTelepresenceCallMIB, ctpcRxCoSPrevious=ctpcRxCoSPrevious, ctpcDuration=ctpcDuration, ctpcMgmtSysConnEventHistoryTable=ctpcMgmtSysConnEventHistoryTable, ctpcStatTotalCalls=ctpcStatTotalCalls, ctpcMgmtSysConnStatus=ctpcMgmtSysConnStatus, ctpcLocalDirNumEntry=ctpcLocalDirNumEntry, ctpcLocalDirNumIndex=ctpcLocalDirNumIndex, CtpcAttributes=CtpcAttributes, ctpcRxTotalBytes=ctpcRxTotalBytes, ctpcTxCodec=ctpcTxCodec, ciscoTpCallInformationGroup=ciscoTpCallInformationGroup, ctpcMgmtSysConnEventHistory=ctpcMgmtSysConnEventHistory, ctpcTxShapingWindow=ctpcTxShapingWindow, ciscoTpCallStatisticsGroupSup3=ciscoTpCallStatisticsGroupSup3, ctpcStreamType=ctpcStreamType, ciscoTpCallStatisticsGroupSup1=ciscoTpCallStatisticsGroupSup1, ciscoTelepresenceCallMIBObjects=ciscoTelepresenceCallMIBObjects, ctpcStatEventCrossedValue=ctpcStatEventCrossedValue, ctpcTxTotalBytes=ctpcTxTotalBytes, ctpcMediaDestPort=ctpcMediaDestPort, ctpcTxDscpAudioConfigured=ctpcTxDscpAudioConfigured, ctpcTxDestAddrType=ctpcTxDestAddrType, ctpcTxCallBitRate=ctpcTxCallBitRate, ctpcStartDateAndTime=ctpcStartDateAndTime, ctpcTableLastIndex=ctpcTableLastIndex, ctpcTxCallLostPackets=ctpcTxCallLostPackets, ctpcStatEventHistLastIndex=ctpcStatEventHistLastIndex, CtpcStreamMediaType=CtpcStreamMediaType, ctpcActiveMgmtSysIndex=ctpcActiveMgmtSysIndex, ctpcStatEventHistTableSize=ctpcStatEventHistTableSize, ctpcMgmtSysConnEventSIPRespCode=ctpcMgmtSysConnEventSIPRespCode, CtpcStatMonitoredAttribute=CtpcStatMonitoredAttribute, ctpcRemoteDirNum=ctpcRemoteDirNum, ctpcStatEventMonObjectInst=ctpcStatEventMonObjectInst, ciscoTpCallConfigurationGroup=ciscoTpCallConfigurationGroup, ctpcRxVideoHorzPixels=ctpcRxVideoHorzPixels, ctpcRxIDRPackets=ctpcRxIDRPackets, ctpcAttributes=ctpcAttributes, CtpcCallTerminationCode=CtpcCallTerminationCode, ctpcRxActive=ctpcRxActive, ciscoTpCallNotificationGroup=ciscoTpCallNotificationGroup, ctpcMgmtSysIndex=ctpcMgmtSysIndex, ctpcLocalDirNum=ctpcLocalDirNum, ctpcStatEventHistory=ctpcStatEventHistory, ctpcRxMaxCallLostPackets=ctpcRxMaxCallLostPackets, ctpcStatEventHistoryEntry=ctpcStatEventHistoryEntry, ctpcTxPeriodLostPackets=ctpcTxPeriodLostPackets, ctpcRxMaxPeriodLostPackets=ctpcRxMaxPeriodLostPackets, CtpcStreamSourceType=CtpcStreamSourceType, ciscoTelepresenceCallMIBNotifs=ciscoTelepresenceCallMIBNotifs, ciscoTpCallEventHistoryGroup=ciscoTpCallEventHistoryGroup, ctpcMgmtSysTable=ctpcMgmtSysTable, PYSNMP_MODULE_ID=ciscoTelepresenceCallMIB, ctpcRxVideoVertPixels=ctpcRxVideoVertPixels, ciscoTelepresenceCallMIBConform=ciscoTelepresenceCallMIBConform, ctpcTxActive=ctpcTxActive, ctpcRxLatePackets=ctpcRxLatePackets, CtpcStateCode=CtpcStateCode, ctpcMgmtSysConnEventHistTableSize=ctpcMgmtSysConnEventHistTableSize, ctpcMgmtSysConnEventNotification=ctpcMgmtSysConnEventNotification, ctpcTxVideoVertPixels=ctpcTxVideoVertPixels, ctpcLocalAddrType=ctpcLocalAddrType, ciscoTpCallMIBComplianceRev2=ciscoTpCallMIBComplianceRev2, ctpcStatTotalCallTime=ctpcStatTotalCallTime, ctpcRxMaxCallLostPacketsRecTime=ctpcRxMaxCallLostPacketsRecTime, ctpcRxPeriodLostPackets=ctpcRxPeriodLostPackets, ctpcRxDuplicatePackets=ctpcRxDuplicatePackets, ciscoTpCallMIBComplianceRev5=ciscoTpCallMIBComplianceRev5, ctpcMgmtSysAddrType=ctpcMgmtSysAddrType, ctpcStatNotificaion=ctpcStatNotificaion, ctpcCallTermReason=ctpcCallTermReason, ciscoTpCallInformationGroupSup1=ciscoTpCallInformationGroupSup1, ctpcMaxCallLatencyRecTime=ctpcMaxCallLatencyRecTime, ctpcMgmtSysAddr=ctpcMgmtSysAddr, ciscoTpCallMIBComplianceRev3=ciscoTpCallMIBComplianceRev3, ctpcMaxPeriodLatency=ctpcMaxPeriodLatency, ctpcMgmtSysConnNotifyEnable=ctpcMgmtSysConnNotifyEnable, ctpcStatStreamSourceTable=ctpcStatStreamSourceTable, ctpcAvgPeriodLatency=ctpcAvgPeriodLatency, CtpcStatAlarmMode=CtpcStatAlarmMode, ctpcStatEventTimeStamp=ctpcStatEventTimeStamp, ctpcEntry=ctpcEntry, ctpcRxDscpCurrent=ctpcRxDscpCurrent, ctpcMode=ctpcMode, ctpcRxShapingWindow=ctpcRxShapingWindow, ctpcStatEventHistoryTable=ctpcStatEventHistoryTable, ciscoTpCallMIBComplianceRev1=ciscoTpCallMIBComplianceRev1, ctpcStatStreamSourceEntry=ctpcStatStreamSourceEntry, ctpcStatEventHistoryIndex=ctpcStatEventHistoryIndex)
