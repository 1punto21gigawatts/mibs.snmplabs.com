#
# PySNMP MIB module TIMETRA-ELMI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-ELMI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, Counter64, IpAddress, Gauge32, iso, MibIdentifier, ObjectIdentity, NotificationType, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "Counter64", "IpAddress", "Gauge32", "iso", "MibIdentifier", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Counter32")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
tmnxChassisIndex, = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "tmnxChassisIndex")
timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs", "tmnxSRObjs")
tmnxPortEtherEntry, tmnxPortPortID = mibBuilder.importSymbols("TIMETRA-PORT-MIB", "tmnxPortEtherEntry", "tmnxPortPortID")
TmnxEncapVal, = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxEncapVal")
tmnxElmiMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 68))
tmnxElmiMIBModule.setRevisions(('1908-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxElmiMIBModule.setRevisionsDescriptions(('Rev 1.0 01 Jul 2008 00:00 1.0 release of the TIMETRA-ELMI-MIB.',))
if mibBuilder.loadTexts: tmnxElmiMIBModule.setLastUpdated('0902280000Z')
if mibBuilder.loadTexts: tmnxElmiMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxElmiMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: tmnxElmiMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Ethernet Link Management Interface (E-LMI) components of the Alcatel-Lucent 7x50 device. Copyright 2009-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxElmiObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68))
tmnxElmiNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 68))
tmnxElmiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68))
tmnxElmiConfigurationTimeStamps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 0))
tmnxElmiConfigurations = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1))
tmnxElmiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2))
tmnxElmiNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 68, 0))
tmnxElmiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 1))
tmnxElmiGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2))
class TmnxElmiIdentifierString(TextualConvention, OctetString):
    description = 'The TmnxElmiIdentifierString is a readable description that specifies the Ethernet Link Management Interface Identifier. The value must be unique in the system, and match the identifier on the connected system.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 100)

tmnxElmiIfConfigTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 0, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiIfConfigTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfConfigTableLastChanged.setDescription('The tmnxElmiIfConfigTableLastChanged indicates the time, since system startup, when a row in the tmnxElmiIfConfigTable last changed.')
tmnxElmiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1), )
if mibBuilder.loadTexts: tmnxElmiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfConfigTable.setDescription('The tmnxElmiIfConfigTable has an entry for each port in the system that is configured for Ethernet LMI. It contains the service attributes and associated parameters of Ethernet services observable for the User Network Interface (UNI) to User Network Interface.')
tmnxElmiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1), )
tmnxPortEtherEntry.registerAugmentions(("TIMETRA-ELMI-MIB", "tmnxElmiIfConfigEntry"))
tmnxElmiIfConfigEntry.setIndexNames(*tmnxPortEtherEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxElmiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfConfigEntry.setDescription('The Parameters for a particular User Network Interface. Entries cannot be created and deleted via SNMP SET operations. Rows in this table are created and destroyed by the system, and can not be created or deleted by SNMP SET operations. Each row references an existing tmnxPortEtherEntry row entry.')
tmnxElmiIfCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("uniN", 1), ("uniC", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiIfCfgMode.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgMode.setDescription("The value of tmnxElmiIfCfgMode specifies the mode of the interface. It can be set as User Network Interface Customer (UNI-C), User Network Interface Network (UNI-N), or 'none (0)' to disable E-LMI.")
tmnxElmiIfCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiIfCfgStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgStatus.setDescription('The value of tmnxElmiIfCfgStatus indicates the operational status of the Ethernet LMI interface The valid options are: up (1) -- The E-LMI interface is operational. down (2) -- The E-LMI error threshold exceeded.')
tmnxElmiIfCfgN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiIfCfgN393.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgN393.setDescription('The value of tmnxElmiIfCfgN393 specifies the ELMI monitored count of the consecutive errors for both UNI-N and UNI-C. It is used to determine if E-LMI is operational or not.')
tmnxElmiIfCfgT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiIfCfgT391.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgT391.setDescription('The value of tmnxElmiIfCfgT391 specifies the polling timer for the E-LMI UNI-C.')
tmnxElmiIfCfgT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiIfCfgT392.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgT392.setDescription('The value of tmnxElmiIfCfgT392 specifies the polling verification timer for the E-LMI UNI-N.')
tmnxElmiIfCfgUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notUsed", 0), ("allToOneBundling", 1), ("svcMultiplexNoBundling", 2), ("bundling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiIfCfgUniType.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgUniType.setDescription('The value of tmnxElmiIfCfgUniType indicates the information retrieved from the CE-VLAN ID/EVC Map Type contained in the UNI Status Information Element. The valid options are: notUsed (0) -- unused value. allToOneBundling (1) -- All VLANs are associated with a single EVC. svcMultiplexNoBundling (2) -- One VLAN is associated with a single EVC. bundling (3) -- multiple VLANs can be associated with a single EVC.')
tmnxElmiIfCfgUniIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 1, 1, 7), TmnxElmiIdentifierString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiIfCfgUniIdentifier.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfCfgUniIdentifier.setDescription('The value of tmnxElmiIfCfgUniIdentifier specifies the UNI Indentifier of the E-LMI entity.')
tmnxElmiEvcCfgTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 0, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiEvcCfgTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgTableLastChanged.setDescription('The tmnxElmiEvcCfgTableLastChanged indicates the time, since system startup, when a row in the tmnxElmiEvcConfigTable last changed.')
tmnxElmiEvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2), )
if mibBuilder.loadTexts: tmnxElmiEvcConfigTable.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcConfigTable.setDescription('The tmnxElmiEvcConfigTable has an entry for each SAP in the system that is configured for ELMI. It contains the service attributes for the Ethernet Virtual Connection (EVC). An EVC is an association of two or more UNIs.')
tmnxElmiEvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgVlanId"))
if mibBuilder.loadTexts: tmnxElmiEvcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcConfigEntry.setDescription('The Parameters for a particular Ethernet Virtual Connection (EVC) Interface. Entries cannot be created and deleted via SNMP SET operations. Rows in this table are created and destroyed by the system, and can not be created or deleted by SNMP SET operations. Rows are created for q-tag encapsulated Ethernet SAPs.')
tmnxElmiEvcCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1, 1), TmnxEncapVal())
if mibBuilder.loadTexts: tmnxElmiEvcCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgVlanId.setDescription('The value of tmnxElmiEvcCfgVlanId specifies the third index for the tmnxElmiEvcConfigEntry, as well as the VLAN Identifier of the EVC.')
tmnxElmiEvcCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1, 2), TmnxElmiIdentifierString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxElmiEvcCfgIdentifier.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgIdentifier.setDescription('The value of tmnxElmiEvcCfgIdentifier specifies the unique value used in ELMI validation.')
tmnxElmiEvcCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("p2p", 0), ("mp2mp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiEvcCfgType.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgType.setDescription('The value of tmnxElmiEvcCfgType indicates the type of EVC configured. The valid options are: p2p (0) -- Point-to-point connection mp2mp (1) -- Multipoint-to-multipoint connection.')
tmnxElmiEvcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notActive", 0), ("newAndNotActive", 1), ("active", 2), ("newAndActive", 3), ("partiallyActive", 4), ("newAndPartiallyActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiEvcCfgStatus.setReference('MEF 16 Section 5.5.3.7')
if mibBuilder.loadTexts: tmnxElmiEvcCfgStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgStatus.setDescription("The value of tmnxElmiEvcCfgStatus indicates the status reported in the EVC Status Information Element. An EVC is fully operational when the EVC is capable of transferring traffic among all of the UNIs in the EVC. The valid options are: notActive (0) -- The EVC is not fully operational. newAndNotActive (1) -- The EVC is newly created and not fully operational. active (2) -- The EVC is fully operational. newAndActive (3) -- The EVC is newly created and fully operational. partiallyActive (4) -- The EVC is multipoint-to- multipoint and some of the EVC endpoints are operational. newAndPartiallyActive (5) -- The EVC is newly created and 'partiallyActive'.")
tmnxElmiEvcCfgStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiEvcCfgStatusTimeStamp.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcCfgStatusTimeStamp.setDescription('The value of tmnxElmiEvcCfgStatusTimeStamp indicates the time, since system startup, when the tmnxElmiEvcCfgStatus changed state.')
tmnxElmiStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1), )
if mibBuilder.loadTexts: tmnxElmiStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatTable.setDescription('The tmnxElmiStatTable has an entry for each entry in the tmnxElmiIfConfigEntry.')
tmnxElmiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1), )
tmnxElmiIfConfigEntry.registerAugmentions(("TIMETRA-ELMI-MIB", "tmnxElmiStatEntry"))
tmnxElmiStatEntry.setIndexNames(*tmnxElmiIfConfigEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxElmiStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatEntry.setDescription('The Statistics Entry for an E-LMI Configuration Entry. Entries cannot be created and deleted via SNMP SET operations. Rows in this table are created and destroyed by the system, and can not be created or deleted by SNMP SET operations. Each row references an existing tmnxElmiIfConfigEntry row entry.')
tmnxElmiStatRxStatusEnqMsgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatRxStatusEnqMsgTime.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatRxStatusEnqMsgTime.setDescription('The value of tmnxElmiStatRxStatusEnqMsgTime indicates the time, since system startup, of the last received ELMI Status Enquiry message.')
tmnxElmiStatRxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 2), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatRxStatusEnqMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatRxStatusEnqMsgs.setDescription('The value of tmnxElmiStatRxStatusEnqMsgs indicates the number of ELMI Status Enquiry messages received on this Ethernet interface.')
tmnxElmiStatStatusEnqMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 3), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatStatusEnqMsgTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatStatusEnqMsgTimeouts.setDescription('The value of tmnxElmiStatStatusEnqMsgTimeouts indicates the number of times the ELMI agent did not receive a Status Enquiry message within the allotted time.')
tmnxElmiStatTxStatusMsgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatTxStatusMsgTime.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatTxStatusMsgTime.setDescription('The value of tmnxElmiStatTxStatusMsgTime indicates the time, since system startup, of the last transmitted ELMI Status message.')
tmnxElmiStatTxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatTxStatusMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatTxStatusMsgs.setDescription('The value of tmnxElmiStatTxStatusMsgs indicates the number of ELMI Status messages transmitted on this Ethernet interface.')
tmnxElmiStatRxStatusCheckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatRxStatusCheckTime.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatRxStatusCheckTime.setDescription('The value of tmnxElmiStatRxStatusCheckTime indicates the time, since system startup, of the last received ELMI Status Check message.')
tmnxElmiStatTxStatusCheckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatTxStatusCheckTime.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatTxStatusCheckTime.setDescription('The value of tmnxElmiStatTxStatusCheckTime indicates the time, since system startup, of the last transmitted ELMI Status Check message.')
tmnxElmiStatDiscardedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatDiscardedMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatDiscardedMsgs.setDescription("The value of tmnxElmiStatDiscardedMsgs indicates the number of times the ELMI agent discarded a received message because it wasn't expecting it, the type of message was incorrect, or the contents of the message were invalid.")
tmnxElmiStatInvRxSeqNumMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatInvRxSeqNumMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatInvRxSeqNumMsgs.setDescription('The value of tmnxElmiStatInvRxSeqNumMsgs indicates the number of times the ELMI agent received a message with an invalid receive sequence number: i.e. a sequence number that does not match the last transmitted sequence number of the agent.')
tmnxElmiStatTxAsyncStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 68, 2, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxElmiStatTxAsyncStatusMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatTxAsyncStatusMsgs.setDescription('The value of tmnxElmiStatTxAsyncStatusMsgs indicates the number of single EVC Asynchronous Status messages transmitted.')
tmnxElmiIfStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 68, 0, 1)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgStatus"))
if mibBuilder.loadTexts: tmnxElmiIfStatusChangeEvent.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfStatusChangeEvent.setDescription('The tmnxElmiIfStatusChangeEvent notification indicates that the Ethernet LMI Interface has changed state.')
tmnxElmiEVCStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 68, 0, 2)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgStatus"))
if mibBuilder.loadTexts: tmnxElmiEVCStatusChangeEvent.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEVCStatusChangeEvent.setDescription("The tmnxElmiEVCStatusChangeEvent notification indicates that the indicated Ethernet Virtual Connection (EVC) has changed its active state (ie. from not active to active). The notification is suppressed when the tmnxElmiIfCfgMode is set to 'none (0)'.")
tmnxElmiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 1, 1)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiTimeStampGroup"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfConfigGroup"), ("TIMETRA-ELMI-MIB", "tmnxElmiEvcConfigGroup"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatsGroup"), ("TIMETRA-ELMI-MIB", "tmnxElmiEventGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiCompliance = tmnxElmiCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiCompliance.setDescription('The compliance statement for revision 1.0 of TIMETRA-ELMI-MIB.')
tmnxElmiTimeStampGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2, 1)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiIfConfigTableLastChanged"), ("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgTableLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiTimeStampGroup = tmnxElmiTimeStampGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiTimeStampGroup.setDescription('The tmnxElmiTimeStampGroup consists of the objects used for monitoring overal configuration change of E-LMI configuration for the 7x50.')
tmnxElmiIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2, 2)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgMode"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgStatus"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgN393"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgT391"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgT392"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgUniType"), ("TIMETRA-ELMI-MIB", "tmnxElmiIfCfgUniIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiIfConfigGroup = tmnxElmiIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiIfConfigGroup.setDescription('The tmnxElmiIfConfigGroup consists of the objects used for management of E-LMI configuration for the 7x50.')
tmnxElmiEvcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2, 3)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgIdentifier"), ("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgType"), ("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgStatus"), ("TIMETRA-ELMI-MIB", "tmnxElmiEvcCfgStatusTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiEvcConfigGroup = tmnxElmiEvcConfigGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEvcConfigGroup.setDescription('The tmnxElmiEvcConfigGroup consists of the objects used for management of E-LMI EVC configuration for the 7x50.')
tmnxElmiStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2, 4)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiStatRxStatusEnqMsgTime"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatRxStatusEnqMsgs"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatStatusEnqMsgTimeouts"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatTxStatusMsgTime"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatTxStatusMsgs"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatRxStatusCheckTime"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatTxStatusCheckTime"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatDiscardedMsgs"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatInvRxSeqNumMsgs"), ("TIMETRA-ELMI-MIB", "tmnxElmiStatTxAsyncStatusMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiStatsGroup = tmnxElmiStatsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiStatsGroup.setDescription('The tmnxElmiStatsGroup consists of the objects used for collecting statistics for E-LMI for the 7x50.')
tmnxElmiEventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 68, 2, 5)).setObjects(("TIMETRA-ELMI-MIB", "tmnxElmiIfStatusChangeEvent"), ("TIMETRA-ELMI-MIB", "tmnxElmiEVCStatusChangeEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxElmiEventGroup = tmnxElmiEventGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxElmiEventGroup.setDescription('The tmnxElmiEventGroup consists of the notifications used for generating events for E-LMI for the 7x50.')
mibBuilder.exportSymbols("TIMETRA-ELMI-MIB", tmnxElmiCompliance=tmnxElmiCompliance, tmnxElmiEvcCfgType=tmnxElmiEvcCfgType, tmnxElmiEvcCfgTableLastChanged=tmnxElmiEvcCfgTableLastChanged, tmnxElmiIfStatusChangeEvent=tmnxElmiIfStatusChangeEvent, tmnxElmiStatTxStatusMsgs=tmnxElmiStatTxStatusMsgs, tmnxElmiIfConfigGroup=tmnxElmiIfConfigGroup, tmnxElmiIfConfigTable=tmnxElmiIfConfigTable, tmnxElmiConformance=tmnxElmiConformance, tmnxElmiIfCfgT391=tmnxElmiIfCfgT391, tmnxElmiGroups=tmnxElmiGroups, tmnxElmiNotifications=tmnxElmiNotifications, tmnxElmiNotifyPrefix=tmnxElmiNotifyPrefix, tmnxElmiEvcConfigGroup=tmnxElmiEvcConfigGroup, tmnxElmiIfCfgMode=tmnxElmiIfCfgMode, tmnxElmiEvcCfgStatusTimeStamp=tmnxElmiEvcCfgStatusTimeStamp, tmnxElmiIfCfgT392=tmnxElmiIfCfgT392, tmnxElmiEVCStatusChangeEvent=tmnxElmiEVCStatusChangeEvent, tmnxElmiStatRxStatusEnqMsgTime=tmnxElmiStatRxStatusEnqMsgTime, tmnxElmiStatistics=tmnxElmiStatistics, TmnxElmiIdentifierString=TmnxElmiIdentifierString, tmnxElmiEvcCfgIdentifier=tmnxElmiEvcCfgIdentifier, tmnxElmiStatTxStatusMsgTime=tmnxElmiStatTxStatusMsgTime, tmnxElmiStatDiscardedMsgs=tmnxElmiStatDiscardedMsgs, tmnxElmiTimeStampGroup=tmnxElmiTimeStampGroup, tmnxElmiObjs=tmnxElmiObjs, tmnxElmiStatEntry=tmnxElmiStatEntry, tmnxElmiConfigurations=tmnxElmiConfigurations, tmnxElmiIfCfgUniType=tmnxElmiIfCfgUniType, tmnxElmiStatStatusEnqMsgTimeouts=tmnxElmiStatStatusEnqMsgTimeouts, tmnxElmiEvcConfigEntry=tmnxElmiEvcConfigEntry, tmnxElmiMIBModule=tmnxElmiMIBModule, tmnxElmiIfCfgN393=tmnxElmiIfCfgN393, tmnxElmiStatRxStatusEnqMsgs=tmnxElmiStatRxStatusEnqMsgs, tmnxElmiIfConfigEntry=tmnxElmiIfConfigEntry, tmnxElmiIfConfigTableLastChanged=tmnxElmiIfConfigTableLastChanged, tmnxElmiIfCfgStatus=tmnxElmiIfCfgStatus, tmnxElmiEvcConfigTable=tmnxElmiEvcConfigTable, tmnxElmiStatTable=tmnxElmiStatTable, tmnxElmiStatInvRxSeqNumMsgs=tmnxElmiStatInvRxSeqNumMsgs, tmnxElmiStatsGroup=tmnxElmiStatsGroup, tmnxElmiStatTxStatusCheckTime=tmnxElmiStatTxStatusCheckTime, tmnxElmiEvcCfgVlanId=tmnxElmiEvcCfgVlanId, PYSNMP_MODULE_ID=tmnxElmiMIBModule, tmnxElmiStatTxAsyncStatusMsgs=tmnxElmiStatTxAsyncStatusMsgs, tmnxElmiCompliances=tmnxElmiCompliances, tmnxElmiStatRxStatusCheckTime=tmnxElmiStatRxStatusCheckTime, tmnxElmiEvcCfgStatus=tmnxElmiEvcCfgStatus, tmnxElmiIfCfgUniIdentifier=tmnxElmiIfCfgUniIdentifier, tmnxElmiEventGroup=tmnxElmiEventGroup, tmnxElmiConfigurationTimeStamps=tmnxElmiConfigurationTimeStamps)
