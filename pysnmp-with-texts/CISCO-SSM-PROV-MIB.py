#
# PySNMP MIB module CISCO-SSM-PROV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SSM-PROV-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Integer32, Gauge32, MibIdentifier, ObjectIdentity, iso, Counter64, TimeTicks, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Gauge32", "MibIdentifier", "ObjectIdentity", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Counter32")
DisplayString, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention")
ciscoSsmProvMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 448))
ciscoSsmProvMIB.setRevisions(('2005-02-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSsmProvMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoSsmProvMIB.setLastUpdated('200502150000Z')
if mibBuilder.loadTexts: ciscoSsmProvMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoSsmProvMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoSsmProvMIB.setDescription('This MIB is used to provision features on a Data Path Processor (DPP) of a Storage Service Module (SSM). A DPP is assigned to a contiguous set of ports. Each DPP can run one or more features independent of other DPPs on the module. Since the concept of a DPP is transparent to the network manager, ranges of ports are used to configure different features. A start and an end port are specified to identify a DPP and provision a feature.')
ciscoSsmProvMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 448, 1))
ciscoSsmProvMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 448, 2))
ssmProvConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1))
ssmProvFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 1), )
if mibBuilder.loadTexts: ssmProvFeatureTable.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureTable.setDescription('A table containing list of features that can be provisioned on an SSM.')
ssmProvFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SSM-PROV-MIB", "ssmProvFeatureName"))
if mibBuilder.loadTexts: ssmProvFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureEntry.setDescription('An entry in the ssmProvFeatureTable that contains information on the features that can be configured on an SSM.')
ssmProvFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: ssmProvFeatureName.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureName.setDescription('The name of the feature that can be provisioned on the SSM.')
ssmProvFeatureNeedsImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmProvFeatureNeedsImage.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureNeedsImage.setDescription("The object indicates if the feature needs an image name to be specified during provisioning. If the value of this object is 'true', then an image needs to be specified. If the value of this object is 'false', then an image does not need to be specified.")
ssmProvFeatureIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2), )
if mibBuilder.loadTexts: ssmProvFeatureIfTable.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfTable.setDescription('A table containing feature related information for interfaces. This table gives a list of interfaces that are assigned to different features. The interfaces supported are of the type fibreChannel. If a feature is removed from ssmProvFeatureTable, then corresponding entries in ssmProvFeatureIfTable will also get removed.')
ssmProvFeatureIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SSM-PROV-MIB", "ssmProvFeatureIfStartPort"), (0, "CISCO-SSM-PROV-MIB", "ssmProvFeatureIfEndPort"), (0, "CISCO-SSM-PROV-MIB", "ssmProvFeatureIfFeatureName"))
if mibBuilder.loadTexts: ssmProvFeatureIfEntry.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfEntry.setDescription('This contains information on the SSM-feature membership of a interface.')
ssmProvFeatureIfStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ssmProvFeatureIfStartPort.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfStartPort.setDescription('The starting interface index on the SSM card to which a feature is going to be assigned. A feature is assigned to a DPP by specifying a starting and ending port.')
ssmProvFeatureIfEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ssmProvFeatureIfEndPort.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfEndPort.setDescription('The end interface index on the SSM card to which a feature is going to be assigned. A feature is assigned to a DPP by specifying a start and end port.')
ssmProvFeatureIfFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: ssmProvFeatureIfFeatureName.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfFeatureName.setDescription('The SSM feature name bound to the interface. This must be one of the features listed in ssmProvFeatureTable.')
ssmProvFeatureIfForceRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forceReset", 1), ("noop", 2))).clone('noop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssmProvFeatureIfForceRemove.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfForceRemove.setDescription("This object indicates if the provisioning should be forcefully removed. The object must be set concurrently with setting the corresponding instance of ssmProvFeatureIfRowStatus to 'destroy'. The 'forceReset' option will cause the configuration to be removed and the SSM card to be reset in the process. No action is taken if this object is set to 'noop'. The value of this object when read is always 'noop'.")
ssmProvFeatureIfPartnerImageURI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssmProvFeatureIfPartnerImageURI.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfPartnerImageURI.setDescription("The object representing the location on the local system, from where the partner image will be picked for installation. The value of this object is only relevant if the ssmProvFeatureNeedsImage object is set to 'true' for that feature in ssmProvFeatureTable.")
ssmProvFeatureIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssmProvFeatureIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfRowStatus.setDescription('The status of this conceptual row.')
ssmProvDppTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 3), )
if mibBuilder.loadTexts: ssmProvDppTable.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppTable.setDescription('A table containing DPP information for interfaces. This table gives a list of DPPs for every interface. Entries get added to the table when an SSM comes online and removed when it goes offline.')
ssmProvDppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-SSM-PROV-MIB", "ssmProvDppStartPort"))
if mibBuilder.loadTexts: ssmProvDppEntry.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppEntry.setDescription('This contains information on the DPP to interface association.')
ssmProvDppStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ssmProvDppStartPort.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppStartPort.setDescription('The starting interface index on the SSM card that corresponds to a DPP.')
ssmProvDppEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmProvDppEndPort.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppEndPort.setDescription('The ending interface index on the SSM card that corresponds to a DPP.')
ssmProvDppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 448, 1, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssmProvDppName.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppName.setDescription('The DPP that is associated with the given starting and ending interface.')
ssmProvMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 1))
ssmProvMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 2))
ssmProvMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 1, 1)).setObjects(("CISCO-SSM-PROV-MIB", "ssmProvFeatureGroup"), ("CISCO-SSM-PROV-MIB", "ssmProvFeatureIfGroup"), ("CISCO-SSM-PROV-MIB", "ssmProvDppGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssmProvMIBCompliance = ssmProvMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ssmProvMIBCompliance.setDescription('The compliance statement for entities which implement this MIB.')
ssmProvFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 2, 1)).setObjects(("CISCO-SSM-PROV-MIB", "ssmProvFeatureNeedsImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssmProvFeatureGroup = ssmProvFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureGroup.setDescription('A collection of objects related to SSM features.')
ssmProvFeatureIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 2, 2)).setObjects(("CISCO-SSM-PROV-MIB", "ssmProvFeatureIfForceRemove"), ("CISCO-SSM-PROV-MIB", "ssmProvFeatureIfPartnerImageURI"), ("CISCO-SSM-PROV-MIB", "ssmProvFeatureIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssmProvFeatureIfGroup = ssmProvFeatureIfGroup.setStatus('current')
if mibBuilder.loadTexts: ssmProvFeatureIfGroup.setDescription('A collection of objects related to SSM Feature to Interface mapping . ')
ssmProvDppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 448, 2, 2, 3)).setObjects(("CISCO-SSM-PROV-MIB", "ssmProvDppEndPort"), ("CISCO-SSM-PROV-MIB", "ssmProvDppName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ssmProvDppGroup = ssmProvDppGroup.setStatus('current')
if mibBuilder.loadTexts: ssmProvDppGroup.setDescription('A collection of objects related to DPP to interface mapping.')
mibBuilder.exportSymbols("CISCO-SSM-PROV-MIB", ssmProvFeatureName=ssmProvFeatureName, ssmProvFeatureIfFeatureName=ssmProvFeatureIfFeatureName, ssmProvFeatureIfRowStatus=ssmProvFeatureIfRowStatus, ssmProvFeatureIfTable=ssmProvFeatureIfTable, ssmProvFeatureIfEntry=ssmProvFeatureIfEntry, ssmProvFeatureIfStartPort=ssmProvFeatureIfStartPort, ssmProvDppName=ssmProvDppName, ssmProvMIBCompliance=ssmProvMIBCompliance, ssmProvFeatureIfPartnerImageURI=ssmProvFeatureIfPartnerImageURI, ssmProvFeatureIfForceRemove=ssmProvFeatureIfForceRemove, ciscoSsmProvMIB=ciscoSsmProvMIB, ssmProvDppGroup=ssmProvDppGroup, ssmProvDppEntry=ssmProvDppEntry, ssmProvConfiguration=ssmProvConfiguration, ssmProvDppEndPort=ssmProvDppEndPort, ssmProvFeatureIfEndPort=ssmProvFeatureIfEndPort, ssmProvFeatureNeedsImage=ssmProvFeatureNeedsImage, ciscoSsmProvMIBObjects=ciscoSsmProvMIBObjects, ciscoSsmProvMIBConform=ciscoSsmProvMIBConform, ssmProvFeatureGroup=ssmProvFeatureGroup, ssmProvMIBCompliances=ssmProvMIBCompliances, ssmProvMIBGroups=ssmProvMIBGroups, PYSNMP_MODULE_ID=ciscoSsmProvMIB, ssmProvFeatureIfGroup=ssmProvFeatureIfGroup, ssmProvDppTable=ssmProvDppTable, ssmProvFeatureTable=ssmProvFeatureTable, ssmProvFeatureEntry=ssmProvFeatureEntry, ssmProvDppStartPort=ssmProvDppStartPort)
