#
# PySNMP MIB module H3C-DLDP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-DLDP2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, iso, MibIdentifier, ModuleIdentity, TimeTicks, Gauge32, IpAddress, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "iso", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Gauge32", "IpAddress", "ObjectIdentity", "Counter32")
MacAddress, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue")
h3cDldp2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117))
h3cDldp2.setRevisions(('2011-12-26 15:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDldp2.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: h3cDldp2.setLastUpdated('201112261530Z')
if mibBuilder.loadTexts: h3cDldp2.setOrganization('Hangzhou H3C Technologies. Co., Ltd.')
if mibBuilder.loadTexts: h3cDldp2.setContactInfo('Platform Team Hangzhou H3C Technologies. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: h3cDldp2.setDescription('Device Link Detection Protocol (DLDP) MIB. Device Link Detection Protocol is a private Layer 2 protocol, which can be used to detect and shut down unidirectional links (fiber or copper links) to avoid network problems.')
h3cDldp2ScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1))
h3cDldp2GlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2GlobalEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2GlobalEnable.setDescription('Enable(true) or disable(false) DLDP on the device.')
h3cDldp2Interval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2Interval.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2Interval.setDescription('Indicates the advertisement packet sending interval.')
h3cDldp2AuthMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("simple", 3), ("md5", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2AuthMode.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2AuthMode.setDescription('Indicates the authentication mode. unknown: cannot be determined for some reason. none: not authenticated. simple: authenticated by a clear text password. md5: authenticated by MD5 digest.')
h3cDldp2AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2AuthPassword.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2AuthPassword.setDescription('Indicates the authentication password. Setting the password to a zero-length octet string means deleting the password. When read, it always returns a zero-length octet string.')
h3cDldp2UniShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2UniShutdown.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2UniShutdown.setDescription('Indicates the shutdown mode when a unidirectional link has been detected. unknown: cannot be determined for some reason. auto: the port will be shutdown automatically. manual: the port must be shut down manually.')
h3cDldp2TableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2))
h3cDldp2PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 1), )
if mibBuilder.loadTexts: h3cDldp2PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortConfigTable.setDescription('This table contains all ports that support DLDP.')
h3cDldp2PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDldp2PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortConfigEntry.setDescription('This entry describes a port that supports DLDP.')
h3cDldp2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDldp2PortEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortEnable.setDescription('Enable(true) or disable(false) DLDP on a port.')
h3cDldp2PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 2), )
if mibBuilder.loadTexts: h3cDldp2PortStatusTable.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortStatusTable.setDescription('This table contains all ports enabled with DLDP.')
h3cDldp2PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDldp2PortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortStatusEntry.setDescription('This entry describes a port enabled with DLDP.')
h3cDldp2PortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("initial", 2), ("inactive", 3), ("unidirectional", 4), ("bidirectional", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDldp2PortOperStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortOperStatus.setDescription("Indicates the DLDP operating status on the port. unknown: cannot be determined for some reason. initial: DLDP is not globally enabled. inactive: physical status of the port is down. unidirectional: all neighbors of the port are in 'unconfirmed' status. bidirectional: more than one neighbor of the port is in 'confirmed' status.")
h3cDldp2PortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDldp2PortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2PortLinkStatus.setDescription("Indicates the DLDP link status of the port. unknown: cannot be determined for some reason. down: the DLDP link status of the port is down. up: the DLDP link status of the port is up. If the port operating status is not 'inactive', 'unidirectional', or 'bidirectional', it always returns 'unknown'.")
h3cDldp2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3), )
if mibBuilder.loadTexts: h3cDldp2NeighborTable.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborTable.setDescription("This table contains all port's neighbors.")
h3cDldp2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-DLDP2-MIB", "h3cDldp2NeighborBridgeMac"), (0, "H3C-DLDP2-MIB", "h3cDldp2NeighborPortIndex"))
if mibBuilder.loadTexts: h3cDldp2NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborEntry.setDescription("This entry describes a port's neighbors.")
h3cDldp2NeighborBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDldp2NeighborBridgeMac.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborBridgeMac.setDescription('Indicates the bridge MAC address of a neighbor.')
h3cDldp2NeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: h3cDldp2NeighborPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborPortIndex.setDescription('Indicates the port index of a neighbor.')
h3cDldp2NeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("unconfirmed", 2), ("confirmed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDldp2NeighborStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborStatus.setDescription('Indicates the status of a neighbor. unknown: cannot be determined for some reason. unconfirmed: unidirectional communication between the port and its neighbor. confirmed: bidirectional communication between the port and its neighbor.')
h3cDldp2NeighborAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 2, 3, 1, 4), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDldp2NeighborAgingTime.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2NeighborAgingTime.setDescription("Indicates the aging time of a neighbor. If the neighbor status is not 'confirmed', it always returns 0.")
h3cDldp2TrapBindObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 3))
h3cDldp2Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 4))
h3cDldp2TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 4, 0))
h3cDldp2TrapUniLink = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 4, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cDldp2TrapUniLink.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2TrapUniLink.setDescription('This trap is generated when DLDP detects a unidirectional link, ifIndex and ifDescr identify the port.')
h3cDldp2TrapBidLink = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 117, 4, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cDldp2TrapBidLink.setStatus('current')
if mibBuilder.loadTexts: h3cDldp2TrapBidLink.setDescription('This trap is generated when DLDP detects a bidirectional link, ifIndex and ifDescr identify the port.')
mibBuilder.exportSymbols("H3C-DLDP2-MIB", h3cDldp2ScalarGroup=h3cDldp2ScalarGroup, h3cDldp2TableGroup=h3cDldp2TableGroup, PYSNMP_MODULE_ID=h3cDldp2, h3cDldp2Trap=h3cDldp2Trap, h3cDldp2PortOperStatus=h3cDldp2PortOperStatus, h3cDldp2TrapUniLink=h3cDldp2TrapUniLink, h3cDldp2NeighborPortIndex=h3cDldp2NeighborPortIndex, h3cDldp2TrapPrefix=h3cDldp2TrapPrefix, h3cDldp2PortConfigEntry=h3cDldp2PortConfigEntry, h3cDldp2Interval=h3cDldp2Interval, h3cDldp2=h3cDldp2, h3cDldp2TrapBidLink=h3cDldp2TrapBidLink, h3cDldp2NeighborEntry=h3cDldp2NeighborEntry, h3cDldp2GlobalEnable=h3cDldp2GlobalEnable, h3cDldp2AuthMode=h3cDldp2AuthMode, h3cDldp2PortStatusEntry=h3cDldp2PortStatusEntry, h3cDldp2NeighborTable=h3cDldp2NeighborTable, h3cDldp2TrapBindObjects=h3cDldp2TrapBindObjects, h3cDldp2AuthPassword=h3cDldp2AuthPassword, h3cDldp2PortStatusTable=h3cDldp2PortStatusTable, h3cDldp2PortConfigTable=h3cDldp2PortConfigTable, h3cDldp2PortLinkStatus=h3cDldp2PortLinkStatus, h3cDldp2NeighborAgingTime=h3cDldp2NeighborAgingTime, h3cDldp2UniShutdown=h3cDldp2UniShutdown, h3cDldp2NeighborBridgeMac=h3cDldp2NeighborBridgeMac, h3cDldp2PortEnable=h3cDldp2PortEnable, h3cDldp2NeighborStatus=h3cDldp2NeighborStatus)
