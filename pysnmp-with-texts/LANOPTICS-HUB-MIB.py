#
# PySNMP MIB module LANOPTICS-HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANOPTICS-HUB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:05:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, enterprises, ModuleIdentity, ObjectIdentity, Integer32, Unsigned32, TimeTicks, Gauge32, Counter32, MibIdentifier, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "enterprises", "ModuleIdentity", "ObjectIdentity", "Integer32", "Unsigned32", "TimeTicks", "Gauge32", "Counter32", "MibIdentifier", "iso", "IpAddress", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class BITMAP(Integer32):
    pass

lanOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 224))
lanOpticsHub = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 1))
snMaxSlots = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMaxSlots.setStatus('mandatory')
if mibBuilder.loadTexts: snMaxSlots.setDescription('The limit on the total number of slots that the Hub chassis has.')
snSlotsNum = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSlotsNum.setStatus('mandatory')
if mibBuilder.loadTexts: snSlotsNum.setDescription('The actual number of slots occupied by the Hub modules .')
snConfig = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snConfig.setStatus('mandatory')
if mibBuilder.loadTexts: snConfig.setDescription('A list of all modules occupying slots in Hub in accordance with snSlotsNum.')
snLLActiveNMS = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLActiveNMS.setStatus('mandatory')
if mibBuilder.loadTexts: snLLActiveNMS.setDescription('States whether the NMS-431X is active (1) or inactive (0). For internal use only. Should not be modified.')
snReset = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snReset.setStatus('mandatory')
if mibBuilder.loadTexts: snReset.setDescription('Resets the management module of the Hub.')
snInternalID = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInternalID.setStatus('mandatory')
if mibBuilder.loadTexts: snInternalID.setDescription('The internal address of the management module (NMS-431X).')
snDirtyBit = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 7), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDirtyBit.setStatus('mandatory')
if mibBuilder.loadTexts: snDirtyBit.setDescription('Low level description in bits for changes made in the system.')
snSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 8), )
if mibBuilder.loadTexts: snSlotsTable.setStatus('mandatory')
if mibBuilder.loadTexts: snSlotsTable.setDescription('A list of slots entries. The number of entries is given by the value of snSlotsNum.')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1) + (1000, ), Integer32())
snSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 8, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: snSlotsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snSlotsEntry.setDescription('A slot entry containing a high and low level description of the module in the slot.')
snCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCardName.setStatus('mandatory')
if mibBuilder.loadTexts: snCardName.setDescription('Description of the card (module) name and type (IOM,LBM,BKM,NMS). It is set by Management entity . If not set by the Management entity - will response with HW,SW Rev.')
snCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCardDescr.setStatus('mandatory')
if mibBuilder.loadTexts: snCardDescr.setDescription('Description of the card media, connectors and hardware.- not accesible in Low Level. In High Level will be set by the Management entity (for agents above v5.0)')
snLLHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLLHwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: snLLHwRevision.setDescription("Low level description of the module's hardware revision (module type). For internal use only!")
snLLSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLLSwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: snLLSwRevision.setDescription("Low level description of the module's software revision (module revision). For internal use only!")
snLLControl0 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 14), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLControl0.setStatus('mandatory')
if mibBuilder.loadTexts: snLLControl0.setDescription('Low level description of control actions on the module. Bit per port. For internal use only!')
snLLControl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 15), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLControl1.setStatus('mandatory')
if mibBuilder.loadTexts: snLLControl1.setDescription('Low level description of control actions on the module. Bit per port. For internal use only!.')
snPollInf = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPollInf.setStatus('mandatory')
if mibBuilder.loadTexts: snPollInf.setDescription('Low level status description of this module represented by an internal structure. For internal use only.')
snResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snResetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: snResetSlot.setDescription('Reset this slot (e.g. LBM module, NMS module). If this slot is the one the Agent occupies, reset the agent (same effect as snReset variable). If this is a special slot (0xF), reset the device mapped to this slot (e.g. the router ).')
snPollInfCode = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 41), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPollInfCode.setStatus('mandatory')
if mibBuilder.loadTexts: snPollInfCode.setDescription('This variable is set with assembly code for pollInf structure (per slot)')
snAssCode = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAssCode.setStatus('mandatory')
if mibBuilder.loadTexts: snAssCode.setDescription('This variable is set with assembly code that should be perform immediatly (per slot)')
snPairAddress = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPairAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPairAddress.setDescription('Low level port address.')
snPairData = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPairData.setStatus('mandatory')
if mibBuilder.loadTexts: snPairData.setDescription('Low level port data. The value of this variable is read/written from/to the I/O address in snPairAddress variable.')
snHubSplitTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 11), )
if mibBuilder.loadTexts: snHubSplitTable.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSplitTable.setDescription('Status of each split card.')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 11, 1) + (1001, ), Integer32())
snHubSplitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 11, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: snHubSplitEntry.setStatus('mandatory')
snHubSplitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("splitted", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSplitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSplitStatus.setDescription('This variable describes the status of this split module.')
snHubPSTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 12), )
if mibBuilder.loadTexts: snHubPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: snHubPSTable.setDescription('Status of each Power supply.')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 12, 1) + (1002, ), Integer32())
snHubPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 12, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: snHubPSEntry.setStatus('mandatory')
snHubPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("malfunctioning", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snHubPSStatus.setDescription('This variable describes the status of this Power Supply.')
snHubFanTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 13), )
if mibBuilder.loadTexts: snHubFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: snHubFanTable.setDescription('Status of each Fan.')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 13, 1) + (1003, ), Integer32())
snHubFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 13, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: snHubFanEntry.setStatus('mandatory')
snHubFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("malfunctioning", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snHubFanStatus.setDescription('This variable describes the status of this Fan.')
snHubSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 14), )
if mibBuilder.loadTexts: snHubSlotsTable.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSlotsTable.setDescription("Hub's alerts related information per slot")
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1) + (1004, ), Integer32())
snHubSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 14, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: snHubSlotsEntry.setStatus('mandatory')
snHubSlotConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotConnected.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSlotConnected.setDescription('This variable signifies that this entire slot was disconnected or reconnected by a management entity.')
snHubSlotFreqError = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("slot-4M", 4), ("slot-16M", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotFreqError.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSlotFreqError.setDescription("This variable signifies that this slot frequency differs from the back-plane's.")
snHubSlotRevChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unchanged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotRevChanged.setStatus('mandatory')
if mibBuilder.loadTexts: snHubSlotRevChanged.setDescription('This variable signifies that this slot SW revision has changed.')
snCompanionHW = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCompanionHW.setStatus('mandatory')
if mibBuilder.loadTexts: snCompanionHW.setDescription('Gives the value of the Hardware and software revision that is sharing the (PC) bus with the agent, e.g, a Cisco Router PC-Card. If no hardware exists, the value should be 0xFF.')
snCompanionReset = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCompanionReset.setStatus('mandatory')
if mibBuilder.loadTexts: snCompanionReset.setDescription('Send Reset to the companion hardware(cisco router)')
snCompanionStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 17), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCompanionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snCompanionStatus.setDescription('Gives the companion status. For cisco router: Bit0 - Lan Active led(1-on,0-off) Bit2 - ISDN present bit Bit3 - O.k. Led(1-on,0-off)')
snGenPortsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 18), )
if mibBuilder.loadTexts: snGenPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: snGenPortsTable.setDescription('A table of all possible I/O ports in address range is 0xC000 - 0xFFFF')
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1) + (1005, ), Integer32())
pysmiFakeCol1006 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1) + (1006, ), Integer32())
snGenPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 18, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1005"), (0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1006"))
if mibBuilder.loadTexts: snGenPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snGenPortsEntry.setDescription('An I/O port entry. Each byte of the I/O address is represented by one index digit; e.g, instance 255.12 is I/O address (port) 0xFF0C.')
snPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1, 1), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortValue.setStatus('mandatory')
if mibBuilder.loadTexts: snPortValue.setDescription('The I/O port value.')
mibBuilder.exportSymbols("LANOPTICS-HUB-MIB", snGenPortsEntry=snGenPortsEntry, snHubSlotsTable=snHubSlotsTable, snConfig=snConfig, lanOpticsHub=lanOpticsHub, snGenPortsTable=snGenPortsTable, snSlotsNum=snSlotsNum, snLLHwRevision=snLLHwRevision, snReset=snReset, snPairAddress=snPairAddress, snHubSlotsEntry=snHubSlotsEntry, snHubSplitStatus=snHubSplitStatus, snHubPSEntry=snHubPSEntry, pysmiFakeCol1004=pysmiFakeCol1004, snCompanionStatus=snCompanionStatus, snHubFanTable=snHubFanTable, snHubSlotConnected=snHubSlotConnected, snSlotsTable=snSlotsTable, snHubFanEntry=snHubFanEntry, lanOptics=lanOptics, snCompanionHW=snCompanionHW, pysmiFakeCol1006=pysmiFakeCol1006, snAssCode=snAssCode, snHubSlotRevChanged=snHubSlotRevChanged, pysmiFakeCol1000=pysmiFakeCol1000, snCompanionReset=snCompanionReset, snLLSwRevision=snLLSwRevision, snPortValue=snPortValue, snLLActiveNMS=snLLActiveNMS, pysmiFakeCol1003=pysmiFakeCol1003, snResetSlot=snResetSlot, snSlotsEntry=snSlotsEntry, snHubFanStatus=snHubFanStatus, snLLControl1=snLLControl1, snInternalID=snInternalID, snHubSlotFreqError=snHubSlotFreqError, pysmiFakeCol1005=pysmiFakeCol1005, snHubSplitTable=snHubSplitTable, snCardDescr=snCardDescr, snDirtyBit=snDirtyBit, pysmiFakeCol1002=pysmiFakeCol1002, snHubSplitEntry=snHubSplitEntry, snHubPSTable=snHubPSTable, snHubPSStatus=snHubPSStatus, snLLControl0=snLLControl0, BITMAP=BITMAP, snCardName=snCardName, snPairData=snPairData, pysmiFakeCol1001=pysmiFakeCol1001, snPollInf=snPollInf, snMaxSlots=snMaxSlots, snPollInfCode=snPollInfCode)
