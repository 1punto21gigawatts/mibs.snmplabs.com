#
# PySNMP MIB module HUAWEI-DISMAN-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DISMAN-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
pingCtlOwnerIndex, pingCtlTestName, pingCtlEntry = mibBuilder.importSymbols("DISMAN-PING-MIB", "pingCtlOwnerIndex", "pingCtlTestName", "pingCtlEntry")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Unsigned32, TimeTicks, MibIdentifier, ModuleIdentity, mib_2, Integer32, Counter64, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Unsigned32", "TimeTicks", "MibIdentifier", "ModuleIdentity", "mib-2", "Integer32", "Counter64", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "IpAddress")
Unsigned32, RowStatus, TextualConvention, TimeStamp, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "Unsigned32", "RowStatus", "TextualConvention", "TimeStamp", "DisplayString", "DateAndTime")
hwDismanPing = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28))
if mibBuilder.loadTexts: hwDismanPing.setLastUpdated('200308130000Z')
if mibBuilder.loadTexts: hwDismanPing.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwDismanPing.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwDismanPing.setDescription('This private mib file includes the test information of the device. It is supplementary for DISMAN-PING-MIB(rfc2925). By setting more parameters you can finish more types test such as tcp, udp, dlsw, dhcp, ftp, http and jitter . This mib contains 5 tables: hwPingCtlTable, hwpingResultsTable, hwPingJitterStatsTable, hwPingTcpServerTable, hwPingUdpServerTable, and 3 nodes: hwPingMIBVersion, hwPingAgentEnable, hwPingServerEnable. ')
hwPingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1))
class InetAddress(TextualConvention, OctetString):
    description = "Denotes a generic Internet address. An InetAddress value is always interpreted within the context of an InetAddressType value. The InetAddressType object which defines the context must be registered immediately before the object which uses the InetAddress textual convention. In other words, the object identifiers for the InetAddressType object and the InetAddress object MUST have the same length and the last sub-identifier of the InetAddressType object MUST be 1 less than the last sub-identifier of the InetAddress object. When this textual convention is used as the syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2, STD 58. In this case, the OBJECT-TYPE declaration MUST include a 'SIZE' clause to limit the number of potential instance sub-identifiers."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

hwPingImplementationTypeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2))
hwpingUdpEcho = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 1))
if mibBuilder.loadTexts: hwpingUdpEcho.setStatus('current')
if mibBuilder.loadTexts: hwpingUdpEcho.setDescription('Indicates that an implementation is using the UDP based echo server. Notes: The hwpingCtlTargetPort and hwpingCtlSourcePort need to be set.')
hwpingTcpconnect = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 2))
if mibBuilder.loadTexts: hwpingTcpconnect.setStatus('current')
if mibBuilder.loadTexts: hwpingTcpconnect.setDescription('Indicates that an implementation is attempting to connect to a TCP port in order to calculate a round trip time. Notes: The hwpingCtlTargetPort and hwpingCtlSourcePort need to be set.')
hwpingjitter = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 3))
if mibBuilder.loadTexts: hwpingjitter.setStatus('current')
if mibBuilder.loadTexts: hwpingjitter.setDescription("Indicates that an implementation is using udp for packet transfers. 'jitter' will cause the PING application to perform delay variance analysis.")
hwpingHttp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 4))
if mibBuilder.loadTexts: hwpingHttp.setStatus('current')
if mibBuilder.loadTexts: hwpingHttp.setDescription('Indicates that an implementation is using udp for name resolution, tcp connect and tcp data transfer mechanisms for HTTP data download from a particular HTTP Server. it cause the PING application to perform a download of the object specified in the URL')
hwpingdlsw = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 5))
if mibBuilder.loadTexts: hwpingdlsw.setStatus('current')
if mibBuilder.loadTexts: hwpingdlsw.setDescription("Indicates that an implementation is using tcp for sending keepalives. 'dlsw' will cause the PING application to perform a keepalive operation to measure the response time of a DLSw peer.")
hwpingdhcp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 6))
if mibBuilder.loadTexts: hwpingdhcp.setStatus('current')
if mibBuilder.loadTexts: hwpingdhcp.setDescription("Indicates that an implementation is using udp for sending dhcp requests. 'dhcp' will cause the PING application to perform an IP Address lease request/teardown operation.")
hwpingftp = ObjectIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 2, 7))
if mibBuilder.loadTexts: hwpingftp.setStatus('current')
if mibBuilder.loadTexts: hwpingftp.setDescription('Indicates that an implementation is using tcp for connect & data transfer. ')
hwPingMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingMIBVersion.setStatus('current')
if mibBuilder.loadTexts: hwPingMIBVersion.setDescription("Huawei PING MIB version string. The format will be: 'Version.Release.Patch: Textual-Description' For example: '1.0.0: Initial Ping MIB'")
hwPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2), )
if mibBuilder.loadTexts: hwPingCtlTable.setStatus('current')
if mibBuilder.loadTexts: hwPingCtlTable.setDescription('Defines the ping Control Extend Table for providing, via SNMP, the capability of performing ping operations at a remote host. ')
hwPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1), )
pingCtlEntry.registerAugmentions(("HUAWEI-DISMAN-PING-MIB", "hwPingCtlEntry"))
hwPingCtlEntry.setIndexNames(*pingCtlEntry.getIndexNames())
if mibBuilder.loadTexts: hwPingCtlEntry.setStatus('current')
if mibBuilder.loadTexts: hwPingCtlEntry.setDescription('Defines an entry in the hwpingCtlTable. The operation of this table is same as that of pingResultsTable.')
hwpingCtlTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlTargetPort.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlTargetPort.setDescription("This object represents the target's port number. This object is applicable to udpEcho, tcpConnect and jitter probes.")
hwpingCtlSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlSourcePort.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlSourcePort.setDescription("This object represents the source's port number. If this object is not specified, the application will get a port allocated by the system. This object is applicable to all probes except dns, dlsw.")
hwpingCtlTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 3), Integer32().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlTTL.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlTTL.setDescription('Specifies the value to store in the TTL Field in the IP packet used to encapsulate the ping probe.')
hwpingCtlJitterAdminInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 4), Integer32().clone(20)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlJitterAdminInterval.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlJitterAdminInterval.setDescription('This value represents the inter-packet delay between packets and is in milliseconds. This value is currently used for Jitter probe. This object is applicable to jitter probe only.')
hwpingCtlJitterAdminNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 5), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlJitterAdminNumPackets.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlJitterAdminNumPackets.setDescription('This value represents the number of packets that need to be transmitted. This value is currently used for Jitter probe. This object is applicable to jitter probe only.')
hwpingCtlHttpOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("post", 2))).clone('get')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlHttpOperationType.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlHttpOperationType.setDescription('Http operation type:get or post.')
hwpingCtlHttpOperationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlHttpOperationString.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlHttpOperationString.setDescription('Http operation string.for example,if you choose get operation type,the string will be url , home page and http version.')
hwpingCtlFtpOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2))).clone('get')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpOperationType.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlFtpOperationType.setDescription('Ftp operation type:get or put')
hwpingCtlFtpUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpUsername.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlFtpUsername.setDescription('Ftp username')
hwpingCtlFtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpPassword.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlFtpPassword.setDescription('Ftp password.')
hwpingCtlFtpOperationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlFtpOperationString.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlFtpOperationString.setDescription('Ftp operation string.If the ftp operation type is get,the string will be file name that you will get from ftp server.')
hwpingCtlVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingCtlVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwpingCtlVPNInstance.setDescription('This field is used to specify the VPN name in which the PING operation will be userd. The agent will use the field to identify the VPN routing Table for this operation.')
hwpingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3), )
if mibBuilder.loadTexts: hwpingResultsTable.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsTable.setDescription('Defines the Ping Results Extend Table for providing the capability of performing ping operations at a remote host. The results of these operations are stored in the hwpingResultsTable . The operation of this table is same as that of pingResultsTable.')
hwpingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"))
if mibBuilder.loadTexts: hwpingResultsEntry.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsEntry.setDescription('The operation of this table is same as that of pingResultsTable.')
hwpingResultsRttNumDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttNumDisconnects.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttNumDisconnects.setDescription("When the pingCtlType is 'icmpecho' , this object represents the number of times that the target or hop along the path to a target became disconnected. For all other values of pingCtlType, this object will remain zero. For connectionless protocols this has no meaning, and will consequently remain 0. Since this error does not indicate any information about the failure of an PING operation, no response time information for this instance will be recorded in the appropriate objects.")
hwpingResultsRttTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttTimeouts.setDescription('The number of occasions when a PING operation was not completed before a timeout occurred, i.e. pingCtlTimeOut was exceeded. Since the PING operation was never completed, the completion time of these operations are not accumulated.')
hwpingResultsRttBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttBusies.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttBusies.setDescription("The number of occasions when a PING operation could not be initiated because a previous PING operation has not been completed. When the pingCtlType is 'pathEcho' this can occur for both connection oriented protocols and connectionless protocols. When the initiation of a new operation cannot be started, this object will be incremented and the operation will be omitted. (The next operation will start at the next Frequency). ")
hwpingResultsRttNoConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttNoConnections.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttNoConnections.setDescription("When the pingCtlType is 'icmpecho' this is the number of occasions when a PING operation could not be initiated because the connection to the target has not been established. For all other pingCtlTypes this object will remain zero.")
hwpingResultsRttDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttDrops.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttDrops.setDescription('The number of occasions when a PING operation could not be initiated because some necessary internal resource (for example memory) was not available,or the operation completion could not be recognized.')
hwpingResultsRttSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttSequenceErrors.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttSequenceErrors.setDescription("When the pingCtlType is 'icmpecho' this is the number of PING operation completions received with an unexpected sequence identifier. For all other values of pingCtlType this object will remain zero. When this has occurred some of the possible reasons may be: - a duplicate packet was received - a response was received after it had timed-out - a corrupted packet was received and was not detected ")
hwpingResultsRttStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsRttStatsErrors.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsRttStatsErrors.setDescription('The number of some other errors')
hwpingResultsMaxDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsMaxDelaySD.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsMaxDelaySD.setDescription(' The maximal delay from source device to destination device. Currently this value is only used for JITTER test, and this value must be 0 in other type test. In JITTER test, if destination system time is not valid, the SD delay may be set 0.')
hwpingResultsMaxDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsMaxDelayDS.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsMaxDelayDS.setDescription(' The maximal delay from destination device to source device. Currently this value is only used for JITTER test, and this value is 0 in other type test. In JITTER test, if destination system time is not valid, the DS delay may be set 0.')
hwpingResultsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 3, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpingResultsLostPacketRatio.setStatus('current')
if mibBuilder.loadTexts: hwpingResultsLostPacketRatio.setDescription('The value of this object reflects the drop rate of HWPing test. For example, this value is 30 that means source device only had received 70% packets of total sent packets.')
hwPingJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4), )
if mibBuilder.loadTexts: hwPingJitterStatsTable.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsTable.setDescription('A table which contains the status of latest Jitter operation.')
hwPingJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1), ).setIndexNames((0, "DISMAN-PING-MIB", "pingCtlOwnerIndex"), (0, "DISMAN-PING-MIB", "pingCtlTestName"))
if mibBuilder.loadTexts: hwPingJitterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsEntry.setDescription('A table which contains the status of latest Jitter operation. This entry is created only if the pingCtlType is hwpingjitter. ')
hwPingJitterStatsNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfRTT.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsNumOfRTT.setDescription("The number of Jitter's that are successfully measured.")
hwPingJitterStatsMinOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesSD.setDescription('The minimum of all positive jitter values from packets sent from source to destination.')
hwPingJitterStatsMaxOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesSD.setDescription('The maximum of all positive jitter values from packets sent from source to destination.')
hwPingJitterStatsNumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesSD.setDescription('The sum of number of all positive jitter values from packets sent from source to destination.')
hwPingJitterStatsSumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesSD.setDescription("The sum of RTT's of all positive jitter values from packets sent from source to destination.")
hwPingJitterStatsSum2PositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesSD.setDescription("The sum of square of RTT's of all positive jitter values from packets sent from source to destination.")
hwPingJitterStatsMinOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesSD.setDescription('The minimum of absolute values of all negative jitter values from packets sent from source to destination.')
hwPingJitterStatsMaxOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesSD.setDescription('The maximum of absolute values of all negative jitter values from packets sent from source to destination.')
hwPingJitterStatsNumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesSD.setDescription('The sum of number of all negative jitter values from packets sent from source to destination.')
hwPingJitterStatsSumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesSD.setDescription('The sum of all negative jitter values from packets sent from source to destination.')
hwPingJitterStatsSum2NegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesSD.setDescription("The sum of square of RTT's of all negative jitter values from packets sent from source to destination.")
hwPingJitterStatsMinOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMinOfPositivesDS.setDescription('The minimum of all positive jitter values from packets sent from destination to source.')
hwPingJitterStatsMaxOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfPositivesDS.setDescription('The maximum of all positive jitter values from packets sent from destination to source.')
hwPingJitterStatsNumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsNumOfPositivesDS.setDescription('The sum of number of all positive jitter values from packets sent from destination to source.')
hwPingJitterStatsSumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSumOfPositivesDS.setDescription("The sum of RTT's of all positive jitter values from packets sent from destination to source.")
hwPingJitterStatsSum2PositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSum2PositivesDS.setDescription("The sum of squares of RTT's of all positive jitter values from packets sent from destination to source.")
hwPingJitterStatsMinOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMinOfNegativesDS.setDescription('The minimum of all negative jitter values from packets sent from destination to source.')
hwPingJitterStatsMaxOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsMaxOfNegativesDS.setDescription('The maximum of all negative jitter values from packets sent from destination to source.')
hwPingJitterStatsNumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsNumOfNegativesDS.setDescription('The sum of number of all negative jitter values from packets sent from destination to source.')
hwPingJitterStatsSumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSumOfNegativesDS.setDescription("The sum of RTT's of all negative jitter values from packets sent from destination to source.")
hwPingJitterStatsSum2NegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsSum2NegativesDS.setDescription("The sum of squares of RTT's of all negative jitter values from packets sent from destination to source.")
hwPingJitterStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossSD.setDescription('The number of packets lost when sent from source to destination.')
hwPingJitterStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsPacketLossDS.setDescription('The number of packets lost when sent from destination to source.')
hwPingJitterStatsAvePositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesSD.setDescription("The average of RTT's of all positive jitter values from packets sent from source to destination.")
hwPingJitterStatsAveNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesSD.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesSD.setDescription('The average of all negative jitter values from packets sent from source to destination.')
hwPingJitterStatsAvePositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsAvePositivesDS.setDescription("The average of RTT's of all positive jitter values from packets sent from destination to source.")
hwPingJitterStatsAveNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesDS.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsAveNegativesDS.setDescription("The average of RTT's of all negative jitter values from packets sent from destination to source.")
hwPingJitterStatsPktLossUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 4, 1, 28), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPingJitterStatsPktLossUnknown.setStatus('current')
if mibBuilder.loadTexts: hwPingJitterStatsPktLossUnknown.setDescription(' The number of packets which lost but not knowing result .')
hwPingAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPingAgentEnable.setStatus('current')
if mibBuilder.loadTexts: hwPingAgentEnable.setDescription('Enable Huawei PING agent function')
hwPingTcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6), )
if mibBuilder.loadTexts: hwPingTcpServerTable.setStatus('current')
if mibBuilder.loadTexts: hwPingTcpServerTable.setDescription('A table which contains the status of hwping tcp server configuration information.')
hwPingTcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1), ).setIndexNames((0, "HUAWEI-DISMAN-PING-MIB", "hwPingTcpServerIpAddress"), (0, "HUAWEI-DISMAN-PING-MIB", "hwPingTcpServerPort"), (0, "HUAWEI-DISMAN-PING-MIB", "hwpingTcpServerVPNInstance"))
if mibBuilder.loadTexts: hwPingTcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwPingTcpServerEntry.setDescription('A table which contains the status of hwping tcp server configuration information. This entry is includeed not only the tcp server ip address but also the tcp server udp port. If used for VPN it is also included the VPN name.')
hwPingTcpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 1), InetAddress().clone(hexValue=""))
if mibBuilder.loadTexts: hwPingTcpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPingTcpServerIpAddress.setDescription("This object represents the tcp server's ip address. This object and hwpingTcpServerPort is hwPingTcpServerTable index.")
hwPingTcpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwPingTcpServerPort.setStatus('current')
if mibBuilder.loadTexts: hwPingTcpServerPort.setDescription("This object represents the tcp server's port number. This object and hwPingTcpServerIpAddress is hwPingTcpServerTable index.")
hwpingTcpServerVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwpingTcpServerVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwpingTcpServerVPNInstance.setDescription('This field is used to specify the VPN name in which the PING operation will be userd. The TCP server will use the field to identify the VPN routing Table for this operation.')
hwpingTcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingTcpServerRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: hwpingTcpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwpingTcpServerRowStatus.setDescription('This object allows entries to be created and deleted in the hwPingTcpServerTable. A value MUST be specified for hwPingTcpServerIpAddress and hwPingTcpServerPort prior to a transition to active(1) state being accepted.')
hwPingUdpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7), )
if mibBuilder.loadTexts: hwPingUdpServerTable.setStatus('current')
if mibBuilder.loadTexts: hwPingUdpServerTable.setDescription('A table which contains the status of hwping udp server configuration information.')
hwPingUdpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1), ).setIndexNames((0, "HUAWEI-DISMAN-PING-MIB", "hwPingUdpServerIpAddress"), (0, "HUAWEI-DISMAN-PING-MIB", "hwPingUdpServerPort"), (0, "HUAWEI-DISMAN-PING-MIB", "hwpingUdpServerVPNInstance"))
if mibBuilder.loadTexts: hwPingUdpServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwPingUdpServerEntry.setDescription('A table which contains the status of hwping udp server configuration information. This entry is includeed not only the udp server ip address but also the udp server udp port.If used for VPN it is also included the VPN name.')
hwPingUdpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 1), InetAddress().clone(hexValue=""))
if mibBuilder.loadTexts: hwPingUdpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwPingUdpServerIpAddress.setDescription("This object represents the udp server's ip address. This object and hwpingUdpServerPort is hwPingUdpServerEntry index.")
hwPingUdpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hwPingUdpServerPort.setStatus('current')
if mibBuilder.loadTexts: hwPingUdpServerPort.setDescription("This object represents the udp server's port number. This object and hwPingUdpServerIpAddress is hwPingUdpServerEntry index.")
hwpingUdpServerVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwpingUdpServerVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwpingUdpServerVPNInstance.setDescription('This field is used to specify the VPN name in which the PING operation will be userd. The UDP server will use the field to identify the VPN routing Table for this operation.')
hwpingUdpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwpingUdpServerRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: hwpingUdpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwpingUdpServerRowStatus.setDescription('This object allows entries to be created and deleted in the hwPingUdpServerTable. A value MUST be specified for hwPingUdpServerIpAddress and hwPingUdpServerPort prior to a transition to active(1) state being accepted.')
hwPingServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPingServerEnable.setStatus('current')
if mibBuilder.loadTexts: hwPingServerEnable.setDescription('Enable Huawei PING server function')
mibBuilder.exportSymbols("HUAWEI-DISMAN-PING-MIB", hwPingJitterStatsMinOfNegativesDS=hwPingJitterStatsMinOfNegativesDS, hwPingJitterStatsTable=hwPingJitterStatsTable, hwPingJitterStatsMaxOfNegativesDS=hwPingJitterStatsMaxOfNegativesDS, hwpingCtlHttpOperationString=hwpingCtlHttpOperationString, hwPingJitterStatsSumOfPositivesSD=hwPingJitterStatsSumOfPositivesSD, hwPingUdpServerEntry=hwPingUdpServerEntry, hwPingJitterStatsNumOfPositivesDS=hwPingJitterStatsNumOfPositivesDS, hwpingResultsMaxDelaySD=hwpingResultsMaxDelaySD, hwPingTcpServerEntry=hwPingTcpServerEntry, hwpingCtlFtpPassword=hwpingCtlFtpPassword, hwPingJitterStatsNumOfNegativesSD=hwPingJitterStatsNumOfNegativesSD, hwPingJitterStatsNumOfPositivesSD=hwPingJitterStatsNumOfPositivesSD, hwPingAgentEnable=hwPingAgentEnable, hwpingftp=hwpingftp, hwpingUdpServerVPNInstance=hwpingUdpServerVPNInstance, hwPingJitterStatsSum2NegativesDS=hwPingJitterStatsSum2NegativesDS, hwPingTcpServerTable=hwPingTcpServerTable, hwPingJitterStatsNumOfRTT=hwPingJitterStatsNumOfRTT, hwPingJitterStatsMinOfNegativesSD=hwPingJitterStatsMinOfNegativesSD, hwPingCtlEntry=hwPingCtlEntry, hwpingCtlFtpOperationString=hwpingCtlFtpOperationString, hwPingJitterStatsSumOfNegativesDS=hwPingJitterStatsSumOfNegativesDS, hwPingCtlTable=hwPingCtlTable, hwPingServerEnable=hwPingServerEnable, hwpingCtlSourcePort=hwpingCtlSourcePort, hwPingJitterStatsMinOfPositivesDS=hwPingJitterStatsMinOfPositivesDS, hwPingJitterStatsAvePositivesDS=hwPingJitterStatsAvePositivesDS, hwpingCtlHttpOperationType=hwpingCtlHttpOperationType, hwpingResultsRttNoConnections=hwpingResultsRttNoConnections, hwpingResultsRttNumDisconnects=hwpingResultsRttNumDisconnects, hwpingResultsLostPacketRatio=hwpingResultsLostPacketRatio, hwPingJitterStatsPacketLossDS=hwPingJitterStatsPacketLossDS, hwpingCtlJitterAdminInterval=hwpingCtlJitterAdminInterval, hwpingCtlVPNInstance=hwpingCtlVPNInstance, hwpingTcpServerRowStatus=hwpingTcpServerRowStatus, hwPingJitterStatsSum2PositivesDS=hwPingJitterStatsSum2PositivesDS, hwpingResultsMaxDelayDS=hwpingResultsMaxDelayDS, hwPingTcpServerIpAddress=hwPingTcpServerIpAddress, hwpingResultsRttBusies=hwpingResultsRttBusies, hwPingJitterStatsSumOfPositivesDS=hwPingJitterStatsSumOfPositivesDS, hwPingMIBVersion=hwPingMIBVersion, hwPingUdpServerIpAddress=hwPingUdpServerIpAddress, hwPingJitterStatsAveNegativesDS=hwPingJitterStatsAveNegativesDS, hwpingResultsEntry=hwpingResultsEntry, hwpingTcpServerVPNInstance=hwpingTcpServerVPNInstance, hwPingTcpServerPort=hwPingTcpServerPort, hwPingJitterStatsNumOfNegativesDS=hwPingJitterStatsNumOfNegativesDS, PYSNMP_MODULE_ID=hwDismanPing, hwpingdhcp=hwpingdhcp, hwPingImplementationTypeDomains=hwPingImplementationTypeDomains, hwPingJitterStatsPktLossUnknown=hwPingJitterStatsPktLossUnknown, hwpingResultsTable=hwpingResultsTable, hwPingObjects=hwPingObjects, hwPingJitterStatsSum2PositivesSD=hwPingJitterStatsSum2PositivesSD, InetAddress=InetAddress, hwpingResultsRttStatsErrors=hwpingResultsRttStatsErrors, hwPingJitterStatsMinOfPositivesSD=hwPingJitterStatsMinOfPositivesSD, hwPingJitterStatsAveNegativesSD=hwPingJitterStatsAveNegativesSD, hwpingCtlJitterAdminNumPackets=hwpingCtlJitterAdminNumPackets, hwPingUdpServerPort=hwPingUdpServerPort, hwpingTcpconnect=hwpingTcpconnect, hwPingJitterStatsEntry=hwPingJitterStatsEntry, hwPingUdpServerTable=hwPingUdpServerTable, hwPingJitterStatsSumOfNegativesSD=hwPingJitterStatsSumOfNegativesSD, hwpingCtlFtpUsername=hwpingCtlFtpUsername, hwpingCtlFtpOperationType=hwpingCtlFtpOperationType, hwpingCtlTargetPort=hwpingCtlTargetPort, hwpingCtlTTL=hwpingCtlTTL, hwPingJitterStatsPacketLossSD=hwPingJitterStatsPacketLossSD, hwPingJitterStatsAvePositivesSD=hwPingJitterStatsAvePositivesSD, hwpingResultsRttTimeouts=hwpingResultsRttTimeouts, hwPingJitterStatsMaxOfPositivesSD=hwPingJitterStatsMaxOfPositivesSD, hwPingJitterStatsMaxOfPositivesDS=hwPingJitterStatsMaxOfPositivesDS, hwPingJitterStatsMaxOfNegativesSD=hwPingJitterStatsMaxOfNegativesSD, hwPingJitterStatsSum2NegativesSD=hwPingJitterStatsSum2NegativesSD, hwpingResultsRttDrops=hwpingResultsRttDrops, hwpingUdpServerRowStatus=hwpingUdpServerRowStatus, hwpingjitter=hwpingjitter, hwpingResultsRttSequenceErrors=hwpingResultsRttSequenceErrors, hwpingUdpEcho=hwpingUdpEcho, hwDismanPing=hwDismanPing, hwpingHttp=hwpingHttp, hwpingdlsw=hwpingdlsw)
